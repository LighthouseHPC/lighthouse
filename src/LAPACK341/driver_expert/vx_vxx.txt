Solve AX = B, expert


       TYPE    PARAMS       SIZE             MATRIX     FACTORED           PIVOT EQ           RHS     SOLN    COND               WORK                   INFO
[sdcz] gesvx ( fact, trans, n,         nrhs, A,  ldA,   Af,  ldAf,         ipiv, equed, r, c, B, ldB, X, ldX, rcond, ferr, berr, work,        [ir]work, info )
[sdcz] gbsvx ( fact, trans, n, kl, ku, nrhs, Ab, ldAb,  Afb, ldAfb,        ipiv, equed, r, c, B, ldB, X, ldX, rcond, ferr, berr, work,        [ir]work, info )
[sdcz] gtsvx ( fact, trans, n,         nrhs, dl, d, du, dlf, df, duf, du2, ipiv,              B, ldB, X, ldX, rcond, ferr, berr, work,        [ir]work, info )

[sdcz] posvx ( fact, uplo,  n,         nrhs, A,  ldA,   Af,  ldAf,               equed, s,    B, ldB, X, ldX, rcond, ferr, berr, work,        [ir]work, info )
[sdcz] ppsvx ( fact, uplo,  n,         nrhs, Ap,        Afp,                     equed, s,    B, ldB, X, ldX, rcond, ferr, berr, work,        [ir]work, info )
[sdcz] pbsvx ( fact, uplo,  n, kd,     nrhs, Ab, ldAb,  Afb, ldAfb,              equed, s,    B, ldB, X, ldX, rcond, ferr, berr, work,        [ir]work, info )
[sd  ] ptsvx ( fact,        n,         nrhs, d, e,      df, ef,                               B, ldB, X, ldX, rcond, ferr, berr, work,                  info )
[  cz] ptsvx ( fact,        n,         nrhs, d, e,      df, ef,                               B, ldB, X, ldX, rcond, ferr, berr, work,           rwork, info )

[sdcz] sysvx ( fact, uplo,  n,         nrhs, A, ldA,    Af, ldAf,          ipiv,              B, ldB, X, ldX, rcond, ferr, berr, work, lwork, [ir]work, info )
[  cz] hesvx ( fact, uplo,  n,         nrhs, A, ldA,    Af, ldAf,          ipiv,              B, ldB, X, ldX, rcond, ferr, berr, work, lwork,    rwork, info )
[sdcz] spsvx ( fact, uplo,  n,         nrhs, Ap,        Afp,               ipiv,              B, ldB, X, ldX, rcond, ferr, berr, work,        [ir]work, info )
[  cz] hpsvx ( fact, uplo,  n,         nrhs, Ap,        Afp,               ipiv,              B, ldB, X, ldX, rcond, ferr, berr, work,           rwork, info )


Solve AX = B, expert-2


       TYPE    PARAM        SIZE             MATRIX     FACTORED           PIVOT EQ           RHS     SOLN    COND                                                                            WORK            INFO
[sdcz] gesvxx( fact, trans, n,         nrhs, A,  ldA,   Af,  ldAf,         ipiv, equed, r, c, B, ldB, X, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, [ir]work, info )
[sdcz] gbsvxx( fact, trans, n, kl, ku, nrhs, Ab, ldAb,  Afb, ldAfb,        ipiv, equed, r, c, B, ldB, X, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, [ir]work, info )
[sdcz] posvxx( fact, uplo,  n,         nrhs, A,  ldA,   Af,  ldAf,               equed, s,    B, ldB, X, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, [ir]work, info )

[sdcz] sysvxx( fact, uplo,  n,         nrhs, A,  ldA,   Af,  ldAf,         ipiv, equed, s,    B, ldB, X, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work, [ir]work, info )
[  cz] hesvxx( fact, uplo,  n,         nrhs, A,  ldA,   Af,  ldAf,         ipiv, equed, s,    B, ldB, X, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, params, work,    rwork, info )




*> \param[out] FERR
*> \verbatim
*>          FERR is REAL array, dimension (NRHS)
*>          The estimated forward error bound for each solution vector
*>          X(j) (the j-th column of the solution matrix X).
*>          If XTRUE is the true solution corresponding to X(j), FERR(j)
*>          is an estimated upper bound for the magnitude of the largest
*>          element in (X(j) - XTRUE) divided by the magnitude of the
*>          largest element in X(j).  The estimate is as reliable as
*>          the estimate for RCOND, and is almost always a slight
*>          overestimate of the true error.


*> \param[out] RPVGRW
*> \verbatim
*>          RPVGRW is REAL
*>     Reciprocal pivot growth.  On exit, this contains the reciprocal
*>     pivot growth factor norm(A)/norm(U). The "max absolute element"
*>     norm is used.  If this is much less than 1, then the stability of
*>     the LU factorization of the (equilibrated) matrix A could be poor.
*>     This also means that the solution X, estimated condition numbers,
*>     and error bounds could be unreliable. If factorization fails with
*>     0<INFO<=N, then this contains the reciprocal pivot growth factor
*>     for the leading INFO columns of A.  In SGESVX, this quantity is
*>     returned in WORK(1).



*> \param[in] N_ERR_BNDS
*> \verbatim
*>          N_ERR_BNDS is INTEGER
*>     Number of error bounds to return for each right hand side
*>     and each type (normwise or componentwise).  See ERR_BNDS_NORM and
*>     ERR_BNDS_COMP below.



*> \param[out] ERR_BNDS_NORM
*> \verbatim
*>          ERR_BNDS_NORM is REAL array, dimension (NRHS, N_ERR_BNDS)
*>     For each right-hand side, this array contains information about
*>     various error bounds and condition numbers corresponding to the
*>     normwise relative error, which is defined as follows:
*>
*>     Normwise relative error in the ith solution vector:
*>             max_j (abs(XTRUE(j,i) - X(j,i)))
*>            ------------------------------
*>                  max_j abs(X(j,i))
*>
*>     The array is indexed by the type of error information as described
*>     below. There currently are up to three pieces of information
*>     returned.
*>
*>     The first index in ERR_BNDS_NORM(i,:) corresponds to the ith
*>     right-hand side.
*>
*>     The second index in ERR_BNDS_NORM(:,err) contains the following
*>     three fields:
*>     err = 1 "Trust/don't trust" boolean. Trust the answer if the
*>              reciprocal condition number is less than the threshold
*>              sqrt(n) * slamch('Epsilon').
*>
*>     err = 2 "Guaranteed" error bound: The estimated forward error,
*>              almost certainly within a factor of 10 of the true error
*>              so long as the next entry is greater than the threshold
*>              sqrt(n) * slamch('Epsilon'). This error bound should only
*>              be trusted if the previous boolean is true.
*>
*>     err = 3  Reciprocal condition number: Estimated normwise
*>              reciprocal condition number.  Compared with the threshold
*>              sqrt(n) * slamch('Epsilon') to determine if the error
*>              estimate is "guaranteed". These reciprocal condition
*>              numbers are 1 / (norm(Z^{-1},inf) * norm(Z,inf)) for some
*>              appropriately scaled matrix Z.
*>              Let Z = S*A, where S scales each row by a power of the
*>              radix so all absolute row sums of Z are approximately 1.
*>
*>     See Lapack Working Note 165 for further details and extra
*>     cautions.





*>
*> \param[out] ERR_BNDS_COMP
*> \verbatim
*>          ERR_BNDS_COMP is REAL array, dimension (NRHS, N_ERR_BNDS)
*>     For each right-hand side, this array contains information about
*>     various error bounds and condition numbers corresponding to the
*>     componentwise relative error, which is defined as follows:
*>
*>     Componentwise relative error in the ith solution vector:
*>                    abs(XTRUE(j,i) - X(j,i))
*>             max_j ----------------------
*>                         abs(X(j,i))
*>
*>     The array is indexed by the right-hand side i (on which the
*>     componentwise relative error depends), and the type of error
*>     information as described below. There currently are up to three
*>     pieces of information returned for each right-hand side. If
*>     componentwise accuracy is not requested (PARAMS(3) = 0.0), then
*>     ERR_BNDS_COMP is not accessed.  If N_ERR_BNDS .LT. 3, then at most
*>     the first (:,N_ERR_BNDS) entries are returned.
*>
*>     The first index in ERR_BNDS_COMP(i,:) corresponds to the ith
*>     right-hand side.
*>
*>     The second index in ERR_BNDS_COMP(:,err) contains the following
*>     three fields:
*>     err = 1 "Trust/don't trust" boolean. Trust the answer if the
*>              reciprocal condition number is less than the threshold
*>              sqrt(n) * slamch('Epsilon').
*>
*>     err = 2 "Guaranteed" error bound: The estimated forward error,
*>              almost certainly within a factor of 10 of the true error
*>              so long as the next entry is greater than the threshold
*>              sqrt(n) * slamch('Epsilon'). This error bound should only
*>              be trusted if the previous boolean is true.
*>
*>     err = 3  Reciprocal condition number: Estimated componentwise
*>              reciprocal condition number.  Compared with the threshold
*>              sqrt(n) * slamch('Epsilon') to determine if the error
*>              estimate is "guaranteed". These reciprocal condition
*>              numbers are 1 / (norm(Z^{-1},inf) * norm(Z,inf)) for some
*>              appropriately scaled matrix Z.
*>              Let Z = S*(A*diag(x)), where x is the solution for the
*>              current right-hand side and S scales each row of
*>              A*diag(x) by a power of the radix so all absolute row
*>              sums of Z are approximately 1.
*>
*>     See Lapack Working Note 165 for further details and extra
*>     cautions.




*> \param[in] NPARAMS
*> \verbatim
*>          NPARAMS is INTEGER
*>     Specifies the number of parameters set in PARAMS.  If .LE. 0, the
*>     PARAMS array is never referenced and default values are used.
*> \endverbatim




*> \param[in,out] PARAMS
*> \verbatim
*>          PARAMS is REAL array, dimension NPARAMS
*>     Specifies algorithm parameters.  If an entry is .LT. 0.0, then
*>     that entry will be filled with default value used for that
*>     parameter.  Only positions up to NPARAMS are accessed; defaults
*>     are used for higher-numbered parameters.
*>
*>       PARAMS(LA_LINRX_ITREF_I = 1) : Whether to perform iterative
*>            refinement or not.
*>         Default: 1.0
*>            = 0.0 : No refinement is performed, and no error bounds are
*>                    computed.
*>            = 1.0 : Use the double-precision refinement algorithm,
*>                    possibly with doubled-single computations if the
*>                    compilation environment does not support DOUBLE
*>                    PRECISION.
*>              (other values are reserved for future use)
*>
*>       PARAMS(LA_LINRX_ITHRESH_I = 2) : Maximum number of residual
*>            computations allowed for refinement.
*>         Default: 10
*>         Aggressive: Set to 100 to permit convergence using approximate
*>                     factorizations or factorizations other than LU. If
*>                     the factorization uses a technique other than
*>                     Gaussian elimination, the guarantees in
*>                     err_bnds_norm and err_bnds_comp may no longer be
*>                     trustworthy.
*>
*>       PARAMS(LA_LINRX_CWISE_I = 3) : Flag determining if the code
*>            will attempt to find a solution with small componentwise
*>            relative error in the double-precision algorithm.  Positive
*>            is true, 0.0 is false.
*>         Default: 1.0 (attempt componentwise convergence)