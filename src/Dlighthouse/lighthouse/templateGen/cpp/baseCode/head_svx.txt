/**********************************************************************/
/*                                                                    */
/*   Solve the matrix equation A*x=B and estimate error bounds        */
/*          and condition nubersusing LAPACK subroutine routineName        */
/*                                                                    */
/*               -- Created by the Lighthouse Development Team        */
/*                                                                    */
/**********************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include <complex.h>

#define min(a, b) (((a) < (b)) ? (a) : (b)) 
#define max(a, b) (((a) > (b)) ? (a) : (b))

/**************************** BEGIN CONSTANT SET UP ****************************/
/*--- input matrix properties ---*/
define_list

/*--- If FACT = 'F', must also input data of input_list.  ---*/
/*--- EQUED_comment ---*/
char_list

/*--- enter file locations for (1) matrix A and (2) matrix B ---*/ 
#define fileA "/path/to/file/of/data_A"
#define fileB "/path/to/file/of/data_B"
/**************************** END CONSTANT SET UP ****************************/


/*--- global variables ---*/
global_list;
  
int integer_list, i, j;
dataType real_list;
dataType complex complex_list;
FILE *fptA, *fptB;


/*--- external function prototype declaration ---*/
extern void OPEN_FILE();
extern void GET_DATA();
extern void PRINT_SOLUTION();



int main(){  
  /*--- message ---*/
  printf("**********************************************************************\n");
  printf("*** Use routineName to solve a system of linear equations. Error bounds ***\n");
  printf("*** on the solution and a condition estimate are also provided.    ***\n");
  printf("**********************************************************************\n");
  printf("\n");
    
    
  /*--- open files that store data ---*/
  OPEN_FILE();

  
  /*--- read data ---*/
  GET_DATA();
  
  
  /*--- call lapack subroutine routineName, note: ---*/  
  /*--- (1) all the arguments must be pointers ---*/ 
  /*--- (2) add an underscore to the routine name ---*/
  /*--- (3) matrices must be transformed into their Fortran vector formats ---*/
  routineName_routine_parameters;           //compute the error bounds

  
  /*--- print the solution ---*/
  PRINT_SOLUTION();
  
  
  /*--- close files ---*/
  fclose(fptA);
  fclose(fptB);

  return 0;
}



void OPEN_FILE(){
  fptA = fopen(fileA,"r");
  if(fptA == NULL){
    printf("Cannot open %s.\n", fileA);    
    puts(strerror(errno));
    exit(EXIT_FAILURE);
  }

  fptB = fopen(fileB,"r");
  if(fptB == NULL){
    printf("Cannot open %s.\n", fileB);    
    puts(strerror(errno));
    exit(EXIT_FAILURE);
  } 
}



void GET_DATA(){
