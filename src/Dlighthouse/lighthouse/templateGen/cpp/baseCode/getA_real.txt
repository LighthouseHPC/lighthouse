begin gesv sgesv geequ geequb getrs getrf getri gecon gerfs gesvx
  /*--- to call a Fortran routine from C, matrices must be transformed into their Fortran vector formats ---*/
  /*--- read A and transform it to AT ---*/
  for(i=0; i<lda; i++){
    for(j=0; j<n; j++){
      fscanf(fptA, "%placeholder",&AT[i+lda*j]);
    }
  }
  
end gesv sgesv geequ geequb getrs getrf getri gecon gerfs gesvx
 

begin gtsv gttrs gttrf gtcon gtrfs gtsvx
  /*--- get DU, D, and DL from the file ---*/
  for (i=0; i<3; i++){
    if (i==0){
      for(j=0; j<n-1; j++){
        fscanf(fptA, "%placeholder",&DU[j]);
      }
    }
    else if (i==1){
      for(j=0; j<n; j++){
        fscanf(fptA, "%placeholder",&D[j]);
      }     
    }
    else if (i==2){
      for(j=0; j<n-1; j++){
        fscanf(fptA, "%placeholder",&DL[j]);
      }      
    }
  }
  
end gtsv gttrs gttrf gtcon gtrfs gtsvx


begin ptsv pttrs pttrf ptcon ptrfs ptsvx
  /*--- get D and E from the file ---*/
  for (i=0; i<2; i++){
    if (i==0){
      for(j=0; j<n; j++){
        fscanf(fptA, "%placeholder",&D[j]);
      }
    }
    else if (i ==1){
      for(j=0; j<n-1; j++){
        fscanf(fptA, "%placeholder",&E[j]);
      }     
    }
  }

end ptsv pttrs pttrf ptcon ptrfs ptsvx


begin gbsv gbtrs gbtrf
  /*--- to call a Fortran routine from C, matrices must be transformed into their Fortran vector formats ---*/
  /*--- read band matrix A and transform it to LAPACK band storage AB ---*/
  for(i=0; i<n; i++){
    for(j=max(i-kl,0); j<=min(i+ku,n-1); j++){
      fscanf(fptA, "%placeholder",&AB[kl+ku+i-j][j]);
    }
  }
  
  /*--- transform AB to ABT ---*/
  for (i=0; i<ldab; i++){
    for (j=0; j<n; j++){
      ABT[i+ldab*j]=AB[i][j];
    }
  }
  
end gbsv gbtrs gbtrf


begin gbequ gbequb gbsvx
  /*--- to call a Fortran routine from C, matrices must be transformed into their Fortran vector formats ---*/  
  /*--- read band matrix A and transform it to LAPACK band storage AB ---*/
  for(i=0; i<m; i++){
    for(j=max(i-kl,0); j<=min(i+ku,n-1); j++){
      fscanf(fptA, "%placeholder",&AB[ku+i-j][j]);                
    }
  }    

  /*--- transform AB to ABT ---*/
  for (i=0; i<ldab; i++){
    for (j=0; j<n; j++){
      ABT[i+ldab*j]=AB[i][j];
    }
  }
  
end gbequ gbequb gbsvx


begin gbcon
  /*--- to call a Fortran routine from C, matrices must be transformed into their Fortran vector formats ---*/
  /*--- read band matrix A and transform it to LAPACK band storage AB ---*/
  for(i=0; i<n; i++){
    for(j=max(i-kl,0); j<=min(i+ku,n-1); j++){
      fscanf(fptA, "%placeholder",&AB[kl+ku+i-j][j]);
      AB_anorm[ku+i-j][j] = AB[kl+ku+i-j][j];
    }
  }    

  /*--- transform AB to ABT and AB_anorm to ABT_anorm ---*/
  for (i=0; i<ldab; i++){
    for (j=0; j<n; j++){
      ABT[i+ldab*j]=AB[i][j];
      ABT_anorm[i+ldab*j]=AB_anorm[i][j];
    }
  }
  
end gbcon


begin gbrfs
  /*--- to call a Fortran routine from C, matrices must be transformed into their Fortran vector formats ---*/
  /*--- read AFB and AB---*/
  for(i=0; i<n; i++){
    for(j=max(i-kl,0); j<=min(i+ku,n-1); j++){
      fscanf(fptA, "%placeholder",&AFB[kl+ku+i-j][j]);
      AB[ku+i-j][j] = AFB[kl+ku+i-j][j];
    }
  }
  
  /*--- transform AFB to AFBT ---*/
  for (i=0; i<ldafb; i++){
    for (j=0; j<n; j++){
      AFBT[i+ldafb*j]=AFB[i][j];
    }
  }
  
  /*--- transform AB to ABT ---*/
  for (i=0; i<ldab; i++){
    for (j=0; j<n; j++){
      ABT[i+ldab*j] = AB[i][j];
    }
  }
  
end gbrfs


begin pbsv pbequ pbtrs tbtrs pbcon tbcon tbrfs pbrfs pbsvx pbtrf
  /*--- to call a Fortran routine from C, matrices must be transformed into their Fortran vector formats ---*/
  /*--- read band matrix A and transform it to LAPACK band storage AB ---*/
  if (UPLO =='U' || UPLO =='u'){
    for(i=0; i<n; i++){
      for(j=i; j<min(i+1+kd,n); j++){
        fscanf(fptA, "%placeholder",&AB[kd+i-j][j]);
      }
    }   
  }
  else if (UPLO =='L' || UPLO =='l' ){
    for(i=0; i<n; i++){
      for(j=max(0,i-kd); j<=i; j++){
        fscanf(fptA, "%placeholder",&AB[i-j][j]);
      }
    }
  }
  else{
    printf("Invalid UPLO value!\n");
    exit(EXIT_FAILURE);
    }
    
  /*--- transform AB into its Fortran vector format, ABT ---*/
  for (i=0; i<ldab; i++){
    for (j=0; j<n; j++){
      ABT[i+ldab*j]=AB[i][j];
    }
  }

end pbsv pbequ pbtrs tbtrs pbcon tbcon tbrfs pbrfs pbsvx pbtrf


begin sysv posv sposv poequ poequb syequb sytrs potrs trtrs sytri potri trtri sycon pocon trcon syrfs porfs trrfs sysvx posvx sytrf potrf pstrf
  /*--- to call a Fortran routine from C, matrices must be transformed into their Fortran vector formats ---*/
  /*--- read A and transform it to AT ---*/
  if (UPLO == 'U' || UPLO == 'u'){
    for(i=0; i<lda; i++){
      for(j=i; j<n; j++){
        fscanf(fptA, "%placeholder",&AT[i+lda*j]);
      }
    }    
  }
  else if (UPLO == 'L' || UPLO == 'l' ){
    for(i=0; i<lda; i++){
      for(j=0; j<=i; j++){
        fscanf(fptA, "%placeholder",&AT[i+lda*j]);
      }
    }
  }
  else{
    printf("Invalid UPLO value!\n");
    exit(EXIT_FAILURE);
  }

end sysv posv sposv poequ poequb syequb sytrs potrs trtrs sytri potri trtri sycon pocon trcon syrfs porfs trrfs sysvx posvx sytrf potrf pstrf


begin ppsv spsv ppequ pptrs sptrs tptrs pptri sptri tptri ppcon spcon tpcon pprfs sprfs tprfs ppsvx spsvx pptrf sptrf
  /*--- read AP from the file ---*/
  for(i=0; i<n*(n+1)/2; i++){
    fscanf(fptA, "%placeholder",&AP[i]);
  }
    
end ppsv spsv ppequ pptrs sptrs tptrs pptri sptri tptri ppcon spcon tpcon pprfs sprfs tprfs ppsvx spsvx pptrf sptrf


begin pftrs pftrf pftri tftri
  /*--- read A (1D array) from the file ---*/
  for(i=0; i<n*(n+1)/2; i++){
    fscanf(fptA, "%placeholder",&A[i]);
  }

end pftrs pftrf pftri tftri

