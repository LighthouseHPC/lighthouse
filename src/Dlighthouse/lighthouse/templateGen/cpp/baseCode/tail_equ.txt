!--- group 1: with R and C ---!
begin (real) (complex) geequ geequb gbequ gbequb
}


void PRINT_SOLUTION(){
  printf("Solution: \n");
  printf("AMAX = %6.3e\n", amax);
  printf("ROWCND = %6.3e\n", rowcnd);
  printf("COLCND = %6.3e\n\n", colcnd);
  
  printf("Row scale factors:\n");
  for (i=0; i<m; i++){
      printf("   % 6.3e\t", R[i]);      
    }
    
  printf("\n\n");
  
  printf("Column scale factors:\n");
  for (i=0; i<m; i++){
      printf("   % 6.3e\t", C[i]);      
    }

  /*---print info ---*/
   printf("\n\ninfo = %d\n\n", info);   
}


end (real) (complex) geequ geequb gbequ gbequb


begin (real) geequ geequb
void SCALED_MATRIX(){
  if (rowcnd>=0.1 && SMLNUM<amax && amax<BIGNUM){
    if (colcnd<0.1){
      printf("Row scaling is not needed. Column Scaled Matrix A =\n");
      for (j=0; j<n; j++){
        for (i=0; i<m; i++){
           AT[i+m*j] =  AT[i+m*j]*C[j];
        }
      }
    }
    else
      printf("Matrix is not worth scaling.\n");
      exit(EXIT_SUCCESS);
  }
  else{
    if (colcnd>=0.1){
      printf("Column scaling is not needed. Row Scaled Matrix A =\n");
      for (j=0; j<n; j++){
        for (i=0; i<m; i++){
           AT[i+m*j] = R[i]* AT[i+m*j];
        }
      }
    }
    else {
      printf("Row-and-column Scaled Matrix A =\n");
      for (j=0; j<n; j++){
        for (i=0; i<m; i++){
           AT[i+m*j] = R[i]* AT[i+m*j]*C[j];
        }
      }
    }
  } 

  /*--- print scaled matrix A ---*/
  for (i=0; i<m; i++){
    for (j=0; j<n; j++){
      printf("   %6.3f", AT[i+m*j]);    
    }
    printf("\n");
  }
}

end (real) geequ geequb


begin (complex) geequ geequb
void SCALED_MATRIX(){
  if (rowcnd>=0.1 && SMLNUM<amax && amax<BIGNUM){
    if (colcnd<0.1){
      printf("Row scaling is not needed. Column Scaled Matrix A =\n");
      for (j=0; j<n; j++){
        for (i=0; i<m; i++){
           A[i][j] = A[i][j]*C[j];
        }
      }
    }
    else
      printf("Matrix is not worth scaling.");
  }
  else{
    if (colcnd>=0.1){
      printf("Column scaling is not needed. Row Scaled Matrix A =\n");
      for (j=0; j<n; j++){
        for (i=0; i<m; i++){
           A[i][j] = R[i]*A[i][j];
        }
      }
    }
    else {
      printf("Row-and-column Scaled Matrix A =\n");
      for (j=0; j<n; j++){
        for (i=0; i<m; i++){
           A[i][j] = R[i]*A[i][j]*C[j];
        }
      }
    }
  } 
  
  /*--- print scaled matrix A ---*/
  for (i=0; i<m; i++){
    for (j=0; j<n; j++){
      printf("   (%6.3f, %6.3f)", creal(A[i][j]), cimag(A[i][j]));    
    }
    printf("\n");
  }
}

end (complex) geequ geequb


begin (real) (complex) gbequ gbequb
void SCALED_MATRIX(){
  if (rowcnd>=0.1 && SMLNUM<amax && amax<BIGNUM){
    if (colcnd<0.1){
      printf("Row scaling is not needed. Column Scaled Band Matrix A =\n");
      for (j=0; j<n; j++){
        for (i=max(0,j-ku); i<=min(n-1,j+kl); i++){
          AB[ku+i-j][j] =  AB[ku+i-j][j]*C[j];
        }
      }
    }
    else
      printf("Matrix is not worth scaling.");
      exit(EXIT_SUCCESS);
  }
  else{
    if (colcnd>=0.1){
      printf("Column scaling is not needed. Row Scaled Band Matrix A =\n");
      for (j=0; j<n; j++){
        for (i=max(0,j-ku); i<=min(n-1,j+kl); i++){
          AB[ku+i-j][j] = R[i]*AB[ku+i-j][j];
        }
      }
    }
    else {
      printf("Row-and-column Scaled Band matrix A =\n");
      for (j=0; j<n; j++){
        for (i=max(0,j-ku); i<=min(n-1,j+kl); i++){
          AB[ku+i-j][j] = R[i]*AB[ku+i-j][j]*C[j];
        }
      }
    }
  }
  
end (real) (complex) gbequ gbequb

  
begin (real) gbequ gbequb
  /*--- print scaled band matrix A---*/
  for (i=0; i<m; i++){
    for (j=0; j<n; j++){
      if (j>=max(i-kl,0) && j<=min(i+ku,n-1)){
        printf("\t%6.3f", AB[ku+i-j][j]);
      }
      else{
        printf("\t ");
      }
    }
    printf("\n");
  }

}

end (real) gbequ gbequb

  
begin (complex) gbequ gbequb
  /*--- print scaled band matrix A---*/
  for (i=0; i<m; i++){
    for (j=0; j<n; j++){
      if (j>=max(i-kl,0) && j<=min(i+ku,n-1)){
        printf("\t(%6.3f, %6.3f)", creal(AB[ku+i-j][j]), cimag(AB[ku+i-j][j]));
      }
      else{
        printf("\t \t \t");
      }
    }
    printf("\n");
  }

}

end (complex) gbequ gbequb



!--- group 2: with S ---!
begin (real) (complex) pbequ poequ ppequ poequb syequb heequb
}


void PRINT_SOLUTION(){
  printf("Solution: \n");
  printf("AMAX = %6.3e\n", amax);
  printf("SCOND = %6.3e\n", scond);
  
  printf("\n\n");
  
  printf("Scale factors:\n");
  for (i=0; i<n; i++){
      printf("   % 6.3e\t", S[i]);      
    }
    
  printf("\n");

  /*---print info ---*/
   printf("\n\ninfo = %d\n\n", info);   
}


end (real) (complex) pbequ poequ ppequ poequb syequb heequb


begin (real) (complex) pbequ
void SCALED_MATRIX(){
  /*--- scale AB ---*/
  if (scond>=0.1 && SMLNUM<amax && amax<BIGNUM){
      printf("Matrix is not worth scaling.");
  }
  else {
    printf("Scaled matrix A =\n");
    if (UPLO=='U'){
      for (j=0; j<n; j++){
        for (i=max(0,j-kd); i<=j; i++){
          AB[kd+i-j][j] = S[i]*AB[kd+i-j][j]*S[j];
          //printf("%d, %d --> %f\n", kd+i-j, j, AB[kd+i-j][j]);
        }
      }      
    }
    else if (UPLO=='L'){ 
      for (j=0; j<n; j++){
        for (i=j; i<=min(n-1,j+kd); i++){
          AB[i-j][j] = S[i]*AB[i-j][j]*S[j];
          //printf("%d, %d --> %f\n", i-j, j, AB[i-j][j]);
        }
      }
    }
  } 
  
end (real) (complex) pbequ


begin (real) pbequ  
  /*--- print scaled matrix A---*/
  if (UPLO =='U' || UPLO =='u'){
    for (i=0; i<n; i++){
      for (j=0; j<n; j++){
        if (j>=i && j<min(i+1+kd,n)){
          printf("\t%6.3f", AB[kd+i-j][j]);
        }
        else{
          printf("\t ");
        }
      }
      printf("\n");
    }
  }
  else{
    for (i=0; i<n; i++){
      for (j=0; j<n; j++){
        if (j>=max(0,i-kd) && j<=i){
          printf("\t%6.3f", AB[i-j][j]);
        }
        else{
          printf("\t ");
        }
      }
      printf("\n");
    }    
  }

}

end (real) pbequ


begin (complex) pbequ
  /*--- print scaled matrix A---*/
  if (UPLO =='U' || UPLO =='u'){
    for (i=0; i<n; i++){
      for (j=0; j<n; j++){
        if (j>=i && j<min(i+1+kd,n)){
          printf("\t(%6.3f, %6.3f)", creal(AB[kd+i-j][j]), cimag(AB[kd+i-j][j]));
        }
        else{
          printf("\t \t \t");
        }
      }
      printf("\n");
    }
  }
  else{
    for (i=0; i<n; i++){
      for (j=0; j<n; j++){
        if (j>=max(0,i-kd) && j<=i){
          printf("\t(%6.3f, %6.3f)", creal(AB[i-j][j]), cimag(AB[i-j][j]));
        }
        else{
          printf("\t \t \t");
        }
      }
      printf("\n");
    }    
  }
}

end (complex) pbequ


begin (real) poequ poequb syequb
void SCALED_MATRIX(){
  /*--- scale A ---*/
  if (scond>=0.1 && SMLNUM<amax && amax<BIGNUM){
      printf("Matrix is not worth scaling.");
  }
  else {
    printf("Scaled matrix A =\n");
    if (UPLO=='U'){
      for (j=0; j<n; j++){
        for (i=0; i<=j; i++){
          AT[i+lda*j] = S[i]*AT[i+lda*j]*S[j];
        }
      }      
    }
    else if (UPLO=='L'){ 
      for (j=0; j<n; j++){
        for (i=j; i<n; i++){
          AT[i+lda*j] = S[i]*AT[i+lda*j]*S[j];
        }
      }
    }
  } 

  /*--- print scaled matrix A---*/
  if (UPLO =='U' || UPLO =='u'){
    for (i=0; i<n; i++){
      for (j=0; j<n; j++){
        if (j>=i && j<n){
          printf("\t%6.3f", AT[i+lda*j]);
        }
        else{
          printf("\t ");
        }
      }
      printf("\n");
    }
  }
  else{
    for (i=0; i<n; i++){
      for (j=0; j<n; j++){
        if (j>=0 && j<=i){
          printf("\t%6.3f", AT[i+lda*j]);
        }
        else{
          printf("\t ");
        }
      }
      printf("\n");
    }    
  }

}

end (real) poequ poequb syequb


begin (complex) poequ poequb syequb heequb
void SCALED_MATRIX(){
  /*--- scale A ---*/
  if (scond>=0.1 && SMLNUM<amax && amax<BIGNUM){
      printf("Matrix is not worth scaling.");
  }
  else {
    printf("Scaled matrix A =\n");
    if (UPLO=='U'){
      for (j=0; j<n; j++){
        for (i=0; i<=j; i++){
          A[i][j] = S[i]*A[i][j]*S[j];
        }
      }      
    }
    else if (UPLO=='L'){ 
      for (j=0; j<n; j++){
        for (i=j; i<n; i++){
          A[i][j] = S[i]*A[i][j]*S[j];
        }
      }
    }
  }
  
  /*--- print scaled matrix A---*/
  if (UPLO =='U' || UPLO =='u'){
    for (i=0; i<n; i++){
      for (j=0; j<n; j++){
        if (j>=i && j<n){
          printf("\t(%6.3f, %6.3f)", creal(A[i][j]), cimag(A[i][j]));
        }
        else{
          printf("\t \t \t");
        }
      }
      printf("\n");
    }
  }
  else{
    for (i=0; i<n; i++){
      for (j=0; j<n; j++){
        if (j>=0 && j<=i){
          printf("\t(%6.3f, %6.3f)", creal(A[i][j]), cimag(A[i][j]));
        }
        else{
          printf("\t \t \t");
        }
      }
      printf("\n");
    }    
  }

}

end (complex) poequ poequb syequb heequb


begin (real) ppequ
void SCALED_MATRIX(){
  /*--- scale A ---*/
  if (scond>=0.1 && SMLNUM<amax && amax<BIGNUM){
      printf("Matrix is not worth scaling.");
  }
  else {
    printf("Scaled matrix A =\n");
    if (UPLO=='U'){
      for (j=0; j<n; j++){
        for (i=0; i<=j; i++){
          AP[(i+1)+j*(j+1)/2-1] = S[i]*AP[(i+1)+j*(j+1)/2-1]*S[j];
        }
      }      
    }
    else if (UPLO=='L'){ 
      for (j=0; j<n; j++){
        for (i=j; i<n; i++){
          AP[i+j*(2*SIZE-j-1)/2] = S[i]*AP[i+j*(2*SIZE-j-1)/2]*S[j];
        }
      }
    }
  } 
  
  
  /*--- print scaled matrix A---*/
  if (UPLO =='U' || UPLO =='u'){
    for (i=0; i<n; i++){
      for (j=0; j<n; j++){
        if (j>=i && j<n){
          printf("\t%6.3f", AP[(i+1)+j*(j+1)/2-1]);
        }
        else{
          printf("\t ");
        }
      }
      printf("\n");
    }
  }
  else{
    for (i=0; i<n; i++){
      for (j=0; j<n; j++){
        if (j>=0 && j<=i){
          printf("\t%6.3f", AP[i+j*(2*SIZE-j-1)/2]);
        }
        else{
          printf("\t ");
        }
      }
      printf("\n");
    }    
  }

}

end (real) ppequ


begin (complex) ppequ
void SCALED_MATRIX(){
  /*--- scale A ---*/
  if (scond>=0.1 && SMLNUM<amax && amax<BIGNUM){
      printf("Matrix is not worth scaling.\n");
      exit(EXIT_SUCCESS);
  }
  else {
    printf("Scaled matrix A =\n");
    if (UPLO=='U'){
      for (j=0; j<n; j++){
        for (i=0; i<=j; i++){
          AP[(i+1)+j*(j+1)/2-1] = S[i]*AP[(i+1)+j*(j+1)/2-1]*S[j];
        }
      }      
    }
    else if (UPLO=='L'){ 
      for (j=0; j<n; j++){
        for (i=j; i<n; i++){
          AP[i+j*(2*n-j-1)/2] = S[i]*AP[i+j*(2*n-j-1)/2]*S[j];
        }
      }
    }
  } 
  
  /*--- print scaled matrix A---*/
  if (UPLO =='U' || UPLO =='u'){
    for (i=0; i<n; i++){
      for (j=0; j<n; j++){
        if (j>=i && j<n){
          printf("\t(%6.3f, %6.3f)", creal(AP[(i+1)+j*(j+1)/2-1]), cimag(AP[(i+1)+j*(j+1)/2-1]));
        }
        else{
          printf("\t \t \t");
        }
      }
      printf("\n");
    }
  }
  else{
    for (i=0; i<n; i++){
      for (j=0; j<n; j++){
        if (j>=0 && j<=i){
          printf("\t(%6.3f, %6.3f)", creal(AP[i+j*(2*n-j-1)/2]), cimag(AP[i+j*(2*n-j-1)/2]));
        }
        else{
          printf("\t \t \t");
        }
      }
      printf("\n");
    }    
  }

}

end (complex) ppequ