/*****************************************************************/
/*** solving the matrix equation A*x=b using LAPACK subroutine ***/
/*****************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>

/**************************** BEGIN CONSTANT SET UP ****************************/
/*--- matrix properties ---*/
#define SIZE 9
#define ROW_B 9
#define COL_B 2
const char UPLO = 'L';      //set UPLO = 'U' or 'u' for upper triangular matrix, and 'L' or 'l' for lower triangular matrix

/*--- enter file locations for (1) matrix A and (2) matrix B ---*/ 
#define fileA "data/data_sposv9L.txt"
#define fileB "data/array_sposv9L.txt"
/**************************** END CONSTANT SET UP ****************************/


/*--- global variables ---*/
int n = SIZE;
int nrhs = COL_B;
int lda = SIZE;
int ldb = ROW_B;
  
int i, j, info;
float B[ROW_B][COL_B], AT[SIZE*SIZE], BT[ROW_B*COL_B];
FILE *fptA, *fptB;


/*--- external function prototype declaration ---*/
extern void OPEN_FILE();
extern void GET_DATA();
extern void PRINT_SOLUTION();



main(){  
  /*--- message ---*/
  printf("*********************************\n");
  printf("*** Use sposv to solve Ax = B ***\n");
  printf("*********************************\n");
  printf("\n");
    
    
  /*--- open files that store data ---*/
  OPEN_FILE();

  
  /*--- read data ---*/
  GET_DATA();
  
  
  /*--- call lapack subroutine sposv, note: ---*/  
  /*--- (1) all the arguments must be pointers ---*/ 
  /*--- (2) add an underscore to the routine name ---*/
  /*--- (3) matrices must be transformed into Fortran vector format ---*/ 
  sposv_(&UPLO, &n, &nrhs, AT, &lda, BT, &ldb, &info); 

  
  /*--- print the silution ---*/
  PRINT_SOLUTION();
  
  
  /*--- close files ---*/
  fclose(fptA);
  fclose(fptB);

  return 0;
}



void OPEN_FILE(){
  fptA = fopen(fileA,"r");
  if(fptA == NULL){
    printf("Cannot open %s.\n", fileA);    
    puts(strerror(errno));
    exit(EXIT_FAILURE);
  }

  fptB = fopen(fileB,"r");
  if(fptB == NULL){
    printf("Cannot open %s.\n", fileB);    
    puts(strerror(errno));
    exit(EXIT_FAILURE);
  } 
}




void GET_DATA(){
  /*--- read and transform A into its Fortran vector format, AT ---*/
  if (UPLO == 'U' || UPLO == 'u'){
    for(i=0; i<lda; i++){
      for(j=i; j<n; j++){
	fscanf(fptA, "%f",&AT[i+lda*j]);
	//printf("%d, %d, %d --> %f\n", i, j, i+lda*j, AT[i+lda*j]);
      }
      //printf("------------------------\n");
    }    
  }
  else if (UPLO == 'L' || UPLO == 'l' ){
    for(i=0; i<lda; i++){
      for(j=0; j<=i; j++){
	fscanf(fptA, "%f",&AT[i+lda*j]);
	//printf("%d, %d, %d --> %f\n", i, j, i+lda*j, AT[i+lda*j]);
      }
      //printf("------------------------\n");
    }
  }
  else{
    printf("Invalid UPLO value!\n");
    exit(EXIT_FAILURE);
    }

  
  /*--- read and transform B into its Fortran vector format, BT ---*/
  for(i=0; i <ldb; i++){
    for (j=0; j<nrhs; j++){
      fscanf(fptB, "%f",&BT[i+n*j]);
      //printf("%d, %d ---> %f\n", i, j, B[i][j]);
    }
  }
}




void PRINT_SOLUTION(){
  /*--- print vector x ---*/
  printf("Solution: \n");
  for (i=0; i<n; i++){
    for (j=0; j<nrhs; j++){
      B[i][j] = BT[i+n*j];
      printf("\t% 6.2f", B[i][j]);	
    }
    printf("\n");
  }


  /*---print info ---*/
   printf("\n\ninfo = %d", info);   
}
