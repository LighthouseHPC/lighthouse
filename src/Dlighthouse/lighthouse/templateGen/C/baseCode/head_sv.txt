/*********************************************************************/
/*** solve the matrix equation A*x=B using LAPACK subroutine routineName ***/
/*********************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>

/**************************** BEGIN CONSTANT SET UP ****************************/
/*--- matrix properties ---*/
#define SIZE 9
#define ROW_B 9
#define COL_B 2
const char UPLO = 'L';      //set UPLO = 'U' or 'u' for upper triangular matrix, and 'L' or 'l' for lower triangular matrix

/*--- enter file locations for (1) matrix A and (2) matrix B ---*/ 
#define fileA "file_name_for_data_A"
#define fileB "file_name_for_data_B"
/**************************** END CONSTANT SET UP ****************************/


/*--- global variables ---*/
int n = SIZE;
int nrhs = COL_B;
int lda = SIZE;
int ldb = ROW_B;
  
int integer_list, i, j;
dataType real_list;
dataType complex complex_list;
float float_list;
float complex float_complex_list;
FILE *fptA, *fptB;


/*--- external function prototype declaration ---*/
extern void OPEN_FILE();
extern void GET_DATA();
extern void PRINT_SOLUTION();



main(){  
  /*--- message ---*/
  printf("*********************************\n");
  printf("*** Use routineName to solve Ax = B ***\n");
  printf("*********************************\n");
  printf("\n");
    
    
  /*--- open files that store data ---*/
  OPEN_FILE();

  
  /*--- read data ---*/
  GET_DATA();
  
  
  /*--- call lapack subroutine sposv, note: ---*/  
  /*--- (1) all the arguments must be pointers ---*/ 
  /*--- (2) add an underscore to the routine name ---*/
  /*--- (3) matrices must be transformed into Fortran vector format ---*/ 
  routineName_routine_parameters; 

  
  /*--- print the silution ---*/
  PRINT_SOLUTION();
  
  
  /*--- close files ---*/
  fclose(fptA);
  fclose(fptB);

  return 0;
}



void OPEN_FILE(){
  fptA = fopen(fileA,"r");
  if(fptA == NULL){
    printf("Cannot open %s.\n", fileA);    
    puts(strerror(errno));
    exit(EXIT_FAILURE);
  }

  fptB = fopen(fileB,"r");
  if(fptB == NULL){
    printf("Cannot open %s.\n", fileB);    
    puts(strerror(errno));
    exit(EXIT_FAILURE);
  } 
}




