begin gesv sgesv
  /*--- to call a Fortran routine from C, matrices must be transformed into Fortran vector format, AT and BT ---*/
  /*--- read A and transform it to AT ---*/
  for(i=0; i<lda; i++){
    for(j=0; j<n; j++){
      fscanf(fptA, "%placeholder",&AT[i+lda*j]);
    }
  }
  
end gesv sgesv
 

begin gtsv
  /*--- get DU, D, and DL ---*/
  for (i=0; i<3; i++){
    if (i==0){
      for(j=0; j<n-1; j++){
        fscanf(fptA, "%placeholder",&DU[j]);
      }
    }
    else if (i==1){
      for(j=0; j<n; j++){
        fscanf(fptA, "%placeholder",&D[j]);
      }     
    }
    else if (i==2){
      for(j=0; j<n-1; j++){
        fscanf(fptA, "%placeholder",&DL[j]);
      }      
    }
  }
  
end gtsv


begin ptsv
  /*--- get D and E ---*/
  for (i=0; i<2; i++){
    if (i==0){
      for(j=0; j<n; j++){
        fscanf(fptA, "%placeholder",&D[j]);
      }
    }
    else if (i ==1){
      for(j=0; j<n-1; j++){
        fscanf(fptA, "%placeholder",&E[j]);
      }     
    }
  }

end ptsv


begin gbsv
  /*--- to call a Fortran routine from C, matrices must be transformed into Fortran vector format, ABT and BT ---*/
  /*--- read AB ---*/
  for(i=0; i<n; i++){
    for(j=max(i-kl,0); j<=min(i+ku,n-1); j++){
      fscanf(fptA, "%placeholder",&AB[kl+ku+i-j][j]);
    }
  }    

  /*--- transform AB to AT ---*/
  for (i=0; i<ldab; i++){
    for (j=0; j<n; j++){
      ABT[i+ldab*j]=AB[i][j];
    }
  }
  
end gbsv


begin pbsv
  /*--- to call a Fortran routine from C, matrices must be transformed into Fortran vector format, ABT and BT ---*/
  /*--- read AB ---*/
  if (UPLO =='U' || UPLO =='u'){
    for(i=0; i<n; i++){
      for(j=i; j<min(i+1+kd,n); j++){
        fscanf(fptA, "%placeholder",&AB[kd+i-j][j]);
      }
    }   
  }
  else if (UPLO =='L' || UPLO =='l' ){
    for(i=0; i<n; i++){
      for(j=max(0,i-kd); j<=i; j++){
        fscanf(fptA, "%placeholder",&AB[i-j][j]);
      }
    }
  }
  else{
    printf("Invalid UPLO value!\n");
    exit(EXIT_FAILURE);
    }


    
  /*--- transform AB into its Fortran vector format, ABT ---*/
  for (i=0; i<ldab; i++){
    for (j=0; j<n; j++){
      ABT[i+ldab*j]=AB[i][j];
    }
  }

end pbsv


begin sysv posv sposv
  /*--- to call a Fortran routine from C, matrices must be transformed into Fortran vector format, AT and BT ---*/
  /*--- read A and transform it to AT ---*/
  if (UPLO == 'U' || UPLO == 'u'){
    for(i=0; i<lda; i++){
      for(j=i; j<n; j++){
        fscanf(fptA, "%placeholder",&AT[i+lda*j]);
      }
    }    
  }
  else if (UPLO == 'L' || UPLO == 'l' ){
    for(i=0; i<lda; i++){
      for(j=0; j<=i; j++){
        fscanf(fptA, "%placeholder",&AT[i+lda*j]);
      }
    }
  }
  else{
    printf("Invalid UPLO value!\n");
    exit(EXIT_FAILURE);
    }

end sysv posv sposv


begin ppsv spsv
  /*--- get AP ---*/
  if (UPLO == 'U' || UPLO == 'u'){
    for(i=0; i<SIZE; i++){
      for(j=i; j<SIZE; j++){
        fscanf(fptA, "%placeholder",&AP[(i+1)+j*(j+1)/2-1]);
      }
    }    
  }
  else if (UPLO == 'L' || UPLO == 'l' ){
    for(i=0; i<SIZE; i++){
      for(j=0; j<=i; j++){
        fscanf(fptA, "%placeholder",&AP[i+j*(2*SIZE-j-1)/2]);
      }
    }
  }
  else{
    printf("Invalid UPLO value!\n");
    exit(EXIT_FAILURE);
    }
    
end ppsv spsv

