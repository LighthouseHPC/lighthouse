begin gesv
void GET_DATA_A(){
  int linenum = 0;
  char *ptr, line[BUFSIZ];
  double *buffer_A;

  /*--- allocate temporary array ---*/ 
  buffer_A = (double*)malloc (sizeof (double)*(2*n*n));
  
  /*--- read matrix into buffer ---*/
  while(fgets(line, BUFSIZ, fptA)){                                     //read the file line by line
    ptr = strtok(line, ")(, ");                                         //split line around ")(, "
    //printf("%s\n", ptr);                                              //print the first element in the line after the split
    for (i=0; i<2*n; i++){
      buffer_A[linenum*2*n+i] = strtof(ptr, &ptr);                      //convert ptr to float
      ptr = strtok(NULL, ")(, ");                                       //and keep splitting , search in pointer+1
    }
    //printf("----------------------------\n");
    linenum++;
  }
  
  /*--- get A ---*/
  for (i=0; i<n; i++){
    for (j=0; j<n; j++){
      A[i][j] = buffer_A[2*(i*n+j)]+buffer_A[2*(i*n+j)+1]*I;
      //printf("%d, %d ---> (%placeholder, %placeholder) \n", i,j, creal(A[i][j]), cimag(A[i][j]));
    }
    //printf("----------------------------\n");
  }
    
    free(buffer_A);
}
  
end gesv
 
begin gesv gtsv ptsv gbsv pbsv sysv hesv posv ppsv spsv hpsv sgesv cgesv sposv cposv  
void GET_DATA_B(){
  int linenum = 0;
  char *ptr, line[BUFSIZ];
  double *buffer_B;
  
  /*--- allocate temporary array ---*/ 
  buffer_B = (double*)malloc (sizeof (double)*(2*ldb*nrhs));
  
  /*--- read matrix B into buffer ---*/
  linenum = 0;
  while(fgets(line, BUFSIZ, fptB)){                                     //read the file line by line
    ptr = strtok(line, ")(, ");                                         //split line around ")(, "
    //printf("%s\n", ptr);                                              //print the first element in the line after the split
    for (i=0; i<2*nrhs; i++){
      buffer_B[linenum*2*nrhs+i] = strtof(ptr, &ptr);                   //convert ptr to float
      //printf("%d, %d ---> %f\n", i, linenum*2*nrhs+i, buffer_B[linenum*2*nrhs+i]);
      ptr = strtok(NULL, ")(, ");                                       //and keep splitting , search in pointer+1
    }
    //printf("----------------------------\n");
    linenum++;
  }
  
    /*--- get B ---*/
  for (i=0; i<ldb; i++){
    for (j=0; j<nrhs; j++){
      B[i][j] = buffer_B[2*(i*nrhs+j)]+buffer_B[2*(i*nrhs+j)+1]*I;
      //printf("%d, %d ---> (%placeholder, %placeholder) \n", i,j, creal(B[i][j]), cimag(B[i][j]));
    }
    //printf("----------------------------\n");
  }

  free(buffer_B);
}


end gesv gtsv ptsv gbsv pbsv sysv hesv posv ppsv spsv hpsv sgesv cgesv sposv cposv


begin gesv
void MAT_TRANSFORM(){
  for (i=0; i<lda; i++){
    for(j=0; j<n; j++){
       AT[2*(i+lda*j)]=creal(A[i][j]);
       AT[2*(i+lda*j)+1]=cimag(A[i][j]);
    }
  }
end gesv


begin gesv gtsv ptsv gbsv pbsv sysv hesv posv ppsv spsv hpsv sgesv cgesv sposv cposv  
  for (i=0; i<ldb; i++){                               
    for(j=0; j<nrhs; j++){
       BT[2*(i+ldb*j)]=creal(B[i][j]);
       BT[2*(i+ldb*j)+1]=cimag(B[i][j]);
    }
  } 
}
end gesv gtsv ptsv gbsv pbsv sysv hesv posv ppsv spsv hpsv sgesv cgesv sposv cposv



begin gesv gtsv ptsv gbsv pbsv sysv hesv posv ppsv spsv hpsv
void PRINT_SOLUTION(){
  /*--- print vector x (stored in B) ---*/
  printf("Solution: \n");
  for (i=0; i<n; i++){
    for (j=0; j<nrhs; j++){
      B[i][j] = BT[2*(i+n*j)] + BT[2*(i+n*j)+1]*I;
      printf("(%06.4f, %06.4f)\t", creal(B[i][j]), cimag(B[i][j]));     
    }
    printf("\n");
  }

end gesv gtsv ptsv gbsv pbsv sysv hesv posv ppsv spsv hpsv





begin sgesv cgesv sposv cposv
void PRINT_SOLUTION(){
  /*--- print vector x ---*/
  printf("Solution: \n");
  for (i=0; i<n; i++){
    for (j=0; j<nrhs; j++){
      X[i][j] = XT[2*(i+n*j)] + XT[2*(i+n*j)+1]*I;
      printf("(%06.4f, %06.4f)\t", creal(X[i][j]), cimag(X[i][j]));     
    }
    printf("\n");
  }
  
end sgesv cgesv sposv cposv




begin gesv gtsv ptsv gbsv pbsv sysv hesv posv ppsv spsv hpsv sgesv cgesv sposv cposv
  /*---print info ---*/
   printf("\n\ninfo = %d", info);   
}
end gesv gtsv ptsv gbsv pbsv sysv hesv posv ppsv spsv hpsv sgesv cgesv sposv cposv  