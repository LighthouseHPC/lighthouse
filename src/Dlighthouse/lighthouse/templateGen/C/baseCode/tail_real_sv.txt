begin gesv
void GET_DATA(){
  /*--- to call a Fortran routine from C, matrices must be transformed into Fortran vector format, AT and BT ---*/
  for(i=0; i<lda; i++){
    for(j=0; j<n; j++){
      fscanf(fptA, "%placeholder",&AT[i+lda*j]);
    }
  }
  
end gesv
 
begin gesv gtsv ptsv gbsv pbsv sysv hesv posv ppsv spsv hpsv sgesv cgesv sposv cposv  
  /*--- get B and transform it to BT ---*/
  for(i=0; i <ldb; i++){
    for (j=0; j<nrhs; j++){
      fscanf(fptB, "%placeholder",&BT[i+ldb*j]);
    }
  }
}

end gesv gtsv ptsv gbsv pbsv sysv hesv posv ppsv spsv hpsv sgesv cgesv sposv cposv


begin gesv gtsv ptsv gbsv pbsv sysv hesv posv ppsv spsv hpsv
void PRINT_SOLUTION(){
  /*--- print vector x (stored in B) ---*/
  printf("Solution: \n");
  for (i=0; i<n; i++){
    for (j=0; j<nrhs; j++){
      B[i][j] = BT[i+n*j];
      printf("   %6.2f", B[i][j]);    
    }
    printf("\n");
  }

end gesv gtsv ptsv gbsv pbsv sysv hesv posv ppsv spsv hpsv


begin sgesv cgesv sposv cposv
void PRINT_SOLUTION(){
  /*--- print vector x ---*/
  printf("Solution: \n");
  for (i=0; i<n; i++){
    for (j=0; j<nrhs; j++){
      X[i][j] = XT[i+n*j];
      printf("   %6.2f", X[i][j]);    
    }
    printf("\n");
  }
  
end sgesv cgesv sposv cposv




begin gesv gtsv ptsv gbsv pbsv sysv hesv posv ppsv spsv hpsv sgesv cgesv sposv cposv
  /*---print info ---*/
   printf("\n\ninfo = %d", info);   
}
end gesv gtsv ptsv gbsv pbsv sysv hesv posv ppsv spsv hpsv sgesv cgesv sposv cposv  