ZHEGVD computes all the eigenvalues, and optionally, the eigenvectors
of a complex generalized Hermitian-definite eigenproblem, of the form
A*x=(lambda)*B*x,  A*Bx=(lambda)*x,  or B*A*x=(lambda)*x.  Here A and
B are assumed to be Hermitian and B is also positive definite.
If eigenvectors are desired, it uses a divide and conquer algorithm.
The divide and conquer algorithm makes very mild assumptions about
floating point arithmetic. It will work on machines with a guard
digit in add/subtract, or on those binary machines without guard
digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or
Cray-2. It could conceivably fail on hexadecimal or decimal machines
without guard digits, but we know of none.
Arguments:
\param[in] ITYPE
         ITYPE is INTEGER
         Specifies the problem type to be solved:
         = 1:  A*x = (lambda)*B*x
         = 2:  A*B*x = (lambda)*x
         = 3:  B*A*x = (lambda)*x
\param[in] JOBZ
         JOBZ is CHARACTER*1
         = 'N':  Compute eigenvalues only;
         = 'V':  Compute eigenvalues and eigenvectors.
\param[in] UPLO
         UPLO is CHARACTER*1
         = 'U':  Upper triangles of A and B are stored;
         = 'L':  Lower triangles of A and B are stored.
\param[in] N
         N is INTEGER
         The order of the matrices A and B.  N >= 0.
\param[in,out] A
         A is COMPLEX*16 array, dimension (LDA, N)
         On entry, the Hermitian matrix A.  If UPLO = 'U', the
         leading N-by-N upper triangular part of A contains the
         upper triangular part of the matrix A.  If UPLO = 'L',
         the leading N-by-N lower triangular part of A contains
         the lower triangular part of the matrix A.
         On exit, if JOBZ = 'V', then if INFO = 0, A contains the
         matrix Z of eigenvectors.  The eigenvectors are normalized
         as follows:
         if ITYPE = 1 or 2, Z**H*B*Z = I;
         if ITYPE = 3, Z**H*inv(B)*Z = I.
         If JOBZ = 'N', then on exit the upper triangle (if UPLO='U')
         or the lower triangle (if UPLO='L') of A, including the
         diagonal, is destroyed.
\param[in] LDA
         LDA is INTEGER
         The leading dimension of the array A.  LDA >= max(1,N).
\param[in,out] B
         B is COMPLEX*16 array, dimension (LDB, N)
         On entry, the Hermitian matrix B.  If UPLO = 'U', the
         leading N-by-N upper triangular part of B contains the
         upper triangular part of the matrix B.  If UPLO = 'L',
         the leading N-by-N lower triangular part of B contains
         the lower triangular part of the matrix B.
         On exit, if INFO <= N, the part of B containing the matrix is
         overwritten by the triangular factor U or L from the Cholesky
         factorization B = U**H*U or B = L*L**H.
\param[in] LDB
         LDB is INTEGER
         The leading dimension of the array B.  LDB >= max(1,N).
\param[out] W
         W is DOUBLE PRECISION array, dimension (N)
         If INFO = 0, the eigenvalues in ascending order.
\param[out] WORK
         WORK is COMPLEX*16 array, dimension (MAX(1,LWORK))
         On exit, if INFO = 0, WORK(1) returns the optimal LWORK.
\param[in] LWORK
         LWORK is INTEGER
         The length of the array WORK.
         If N <= 1,                LWORK >= 1.
         If JOBZ  = 'N' and N > 1, LWORK >= N + 1.
         If JOBZ  = 'V' and N > 1, LWORK >= 2*N + N**2.
         If LWORK = -1, then a workspace query is assumed; the routine
         only calculates the optimal sizes of the WORK, RWORK and
         IWORK arrays, returns these values as the first entries of
         the WORK, RWORK and IWORK arrays, and no error message
         related to LWORK or LRWORK or LIWORK is issued by XERBLA.
\param[out] RWORK
         RWORK is DOUBLE PRECISION array, dimension (MAX(1,LRWORK))
         On exit, if INFO = 0, RWORK(1) returns the optimal LRWORK.
\param[in] LRWORK
         LRWORK is INTEGER
         The dimension of the array RWORK.
         If N <= 1,                LRWORK >= 1.
         If JOBZ  = 'N' and N > 1, LRWORK >= N.
         If JOBZ  = 'V' and N > 1, LRWORK >= 1 + 5*N + 2*N**2.
         If LRWORK = -1, then a workspace query is assumed; the
         routine only calculates the optimal sizes of the WORK, RWORK
         and IWORK arrays, returns these values as the first entries
         of the WORK, RWORK and IWORK arrays, and no error message
         related to LWORK or LRWORK or LIWORK is issued by XERBLA.
\param[out] IWORK
         IWORK is INTEGER array, dimension (MAX(1,LIWORK))
         On exit, if INFO = 0, IWORK(1) returns the optimal LIWORK.
\param[in] LIWORK
         LIWORK is INTEGER
         The dimension of the array IWORK.
         If N <= 1,                LIWORK >= 1.
         If JOBZ  = 'N' and N > 1, LIWORK >= 1.
         If JOBZ  = 'V' and N > 1, LIWORK >= 3 + 5*N.
         If LIWORK = -1, then a workspace query is assumed; the
         routine only calculates the optimal sizes of the WORK, RWORK
         and IWORK arrays, returns these values as the first entries
         of the WORK, RWORK and IWORK arrays, and no error message
         related to LWORK or LRWORK or LIWORK is issued by XERBLA.
\param[out] INFO
         INFO is INTEGER
         = 0:  successful exit
         < 0:  if INFO = -i, the i-th argument had an illegal value
         > 0:  ZPOTRF or ZHEEVD returned an error code:
            <= N:  if INFO = i and JOBZ = 'N', then the algorithm
                   failed to converge; i off-diagonal elements of an
                   intermediate tridiagonal form did not converge to
                   zero;
                   if INFO = i and JOBZ = 'V', then the algorithm
                   failed to compute an eigenvalue while working on
                   the submatrix lying in rows and columns INFO/(N+1)
                   through mod(INFO,N+1);
            > N:   if INFO = N + i, for 1 <= i <= N, then the leading
                   minor of order i of B is not positive definite.
                   The factorization of B could not be completed and
                   no eigenvalues or eigenvectors were computed.
Authors:
\author Univ. of Tennessee 
\author Univ. of California Berkeley 
\author Univ. of Colorado Denver 
\author NAG Ltd. 
\date November 2011
\ingroup complex16HEeigen
\par Further Details:
 Modified so that no backsubstitution is performed if ZHEEVD fails to
 converge (NEIG in old code could be greater than N causing out of
 bounds reference to A - reported by Ralf Meyer).  Also corrected the
 description of INFO and the test on ITYPE. Sven, 16 Feb 05.
\par Contributors:
    Mark Fahey, Department of Mathematics, Univ. of Kentucky, USA
   SUBROUTINE ZHEGVD( ITYPE, JOBZ, UPLO, N, A, LDA, B, LDB, W, WORK,
  $                   LWORK, RWORK, LRWORK, IWORK, LIWORK, INFO )
-- LAPACK driver routine (version 3.4.0) --
-- LAPACK is a software package provided by Univ. of Tennessee,    --
