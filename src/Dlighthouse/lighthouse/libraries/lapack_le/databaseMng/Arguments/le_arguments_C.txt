1	sgesv,dgesv	(&n, &nrhs, AT, &lda, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	na::	int n = SIZE;int lda = SIZE;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	B[ROW_B][COL_B], AT[SIZE*SIZE], BT[ROW_B*COL_B]	na::	na::	na::2	cgesv,zgesv	(&n, &nrhs, AT, &lda, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	na::	int n = SIZE;int lda = SIZE;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	AT[2*SIZE*SIZE], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], B[ROW_B][COL_B]	na::	na::3	sgtsv,dgtsv	(&n, &nrhs, DL, D, DU, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	na::	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	DU[SIZE-1], D[SIZE], DL[SIZE-1], B[ROW_B][COL_B], BT[ROW_B*COL_B]	na::	na::	na::4	cgtsv,zgtsv	(&n, &nrhs, DL, D, DU, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	na::	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	BT[2*ROW_B*COL_B]	DU[SIZE-1], D[SIZE], DL[SIZE-1], B[ROW_B][COL_B]	na::	na::5	sptsv,dptsv	(&n, &nrhs, D, E, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	na::	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	D[SIZE], E[SIZE-1], B[ROW_B][COL_B], BT[ROW_B*COL_B]	na::	na::	na::6	cptsv,zptsv	(&n, &nrhs, D, E, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	na::	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	D[SIZE], BT[2*ROW_B*COL_B]	E[SIZE-1], B[ROW_B][COL_B]	na::	na::7	sgbsv,dgbsv	(&n, &kl, &ku, &nrhs, ABT, &ldab, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B;#define KL;#define KU	na::	int n = SIZE;int ldab = 2*KL+KU+1;int nrhs = COL_B;int ldb = ROW_B;int kl = KL;int ku = KU	IPIV[SIZE], info	AB[(2*KL+KU+1)][SIZE], B[ROW_B][COL_B], ABT[(2*KL+KU+1)*SIZE], BT[ROW_B*COL_B]	na::	na::	na::8	cgbsv,zgbsv	(&n, &kl, &ku, &nrhs, ABT, &ldab, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B;#define KL;#define KU	na::	int n = SIZE;int ldab = 2*KL+KU+1;int nrhs = COL_B;int ldb = ROW_B;int kl = KL;int ku = KU	IPIV[SIZE], info	ABT[2*(2*KL+KU+1)*SIZE], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], AB[(2*KL+KU+1)][SIZE], B[ROW_B][COL_B]	na::	na::9	spbsv,dpbsv	(&UPLO, &n, &kd, &nrhs, ABT, &ldab, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B;#define KD	const char UPLO =	int n = SIZE;int kd = KD;int nrhs = COL_B;int ldab = KD+1;int ldb = ROW_B	info	AB[(KD+1)][SIZE], B[ROW_B][COL_B], ABT[(KD+1)*SIZE], BT[ROW_B*COL_B]	na::	na::	na::10	cpbsv,zpbsv	(&UPLO, &n, &kd, &nrhs, ABT, &ldab, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B;#define KD	const char UPLO =	int n = SIZE;int kd = KD;int nrhs = COL_B;int ldab = KD+1;int ldb = ROW_B	info	ABT[2*(KD+1)*SIZE], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], AB[(KD+1)][SIZE], B[ROW_B][COL_B]	na::	na::11	ssysv,dsysv	(&UPLO, &n, &nrhs, AT, &lda, IPIV, BT, &ldb, WORK, &lwork, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int lda = SIZE;int ldb = ROW_B;int lwork = SIZE*SIZE	IPIV[SIZE], info	B[ROW_B][COL_B], A[SIZE][SIZE], AT[SIZE*SIZE], BT[ROW_B*COL_B], WORK[SIZE*SIZE]	na::	na::	na::12	csysv,zsysv	(&UPLO, &n, &nrhs, AT, &lda, IPIV, BT, &ldb, WORK, &lwork, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int lda = SIZE;int ldb = ROW_B;int lwork = SIZE*SIZE	IPIV[SIZE], info	AT[2*SIZE*SIZE], BT[2*ROW_B*COL_B], WORK[SIZE*SIZE]	A[SIZE][SIZE], B[ROW_B][COL_B]	na::	na::13	chesv,zhesv	(&UPLO, &n, &nrhs, AT, &lda, IPIV, BT, &ldb, WORK, &lwork, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int lda = SIZE;int ldb = ROW_B;int lwork = SIZE*SIZE	IPIV[SIZE], info	AT[2*SIZE*SIZE], BT[2*ROW_B*COL_B], WORK[SIZE*SIZE]	A[SIZE][SIZE], B[ROW_B][COL_B]	na::	na::14	sposv,dposv	(&UPLO, &n, &nrhs, AT, &lda, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int lda = SIZE;int ldb = ROW_B	info	B[ROW_B][COL_B], A[SIZE][SIZE], AT[SIZE*SIZE], BT[ROW_B*COL_B]	na::	na::	na::15	cposv,zposv	(&UPLO, &n, &nrhs, AT, &lda, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int lda = SIZE;int ldb = ROW_B	info	AT[2*SIZE*SIZE], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], B[ROW_B][COL_B]	na::	na::16	sppsv,dppsv	(&UPLO, &n, &nrhs, AP, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	AP[SIZE*(SIZE+1)/2], B[ROW_B][COL_B], BT[ROW_B*COL_B]	na::	na::	na::17	cppsv,zppsv	(&UPLO, &n, &nrhs, AP, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	AP[2*SIZE*(SIZE+1)/2], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], B[ROW_B][COL_B]	na::	na::18	sspsv,dspsv	(&UPLO, &n, &nrhs, AP, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	AP[SIZE*(SIZE+1)/2], B[ROW_B][COL_B], BT[ROW_B*COL_B]	na::	na::	na::19	cspsv,zspsv	(&UPLO, &n, &nrhs, AP, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	AP[2*SIZE*(SIZE+1)/2], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], B[ROW_B][COL_B]	na::	na::20	chpsv,zhpsv	(&UPLO, &n, &nrhs, AP, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	AP[2*SIZE*(SIZE+1)/2], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], B[ROW_B][COL_B]	na::	na::21	dsgesv	(&n, &nrhs, AT, &lda, IPIV, BT, &ldb, XT, &ldx, WORK, SWORK, &iter, &info)	#define SIZE;#define ROW_B;#define COL_B	na::	int n = SIZE;int lda = SIZE;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	iter, IPIV[SIZE], info	B[ROW_B][COL_B], X[ROW_B][COL_B], WORK[ROW_B][COL_B], AT[SIZE*SIZE], BT[ROW_B*COL_B], XT[ROW_B*COL_B]	na::	SWORK[SIZE*(SIZE+COL_B)]	na::22	zcgesv	(&n, &nrhs, AT, &lda, IPIV, BT, &ldb, XT, &ldx, WORK, SWORK, RWORK, &iter, &info)	#define SIZE;#define ROW_B;#define COL_B	na::	int n = SIZE;int lda = SIZE;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	iter, IPIV[SIZE], info	AT[2*SIZE*SIZE], BT[2*ROW_B*COL_B], XT[2*ROW_B*COL_B], RWORK[ROW_B]	A[SIZE][SIZE], B[ROW_B][COL_B], X[ROW_B][COL_B], WORK[ROW_B*COL_B]	na::	SWORK[ROW_B*(SIZE+COL_B)]23	dsposv	(&UPLO, &n, &nrhs, AT, &lda, BT, &ldb, XT, &ldx, WORK, SWORK, &iter, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int lda = SIZE;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	iter, info	B[ROW_B][COL_B], X[ROW_B][COL_B], WORK[ROW_B][COL_B], AT[SIZE*SIZE], BT[ROW_B*COL_B], XT[ROW_B*COL_B]	na::	SWORK[SIZE*(SIZE+COL_B)]	na::24	zcposv	(&UPLO, &n, &nrhs, AT, &lda, BT, &ldb, XT, &ldx, WORK, SWORK, RWORK, &iter, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int lda = SIZE;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	iter, info	AT[2*SIZE*SIZE], BT[2*ROW_B*COL_B], XT[2*ROW_B*COL_B], RWORK[ROW_B]	A[SIZE][SIZE], B[ROW_B][COL_B], X[ROW_B][COL_B], WORK[ROW_B*COL_B]	na::	SWORK[ROW_B*(SIZE+COL_B)]25	sgeequ,dgeequ,sgeequb,dgeequb	(&m, &n, AT, &lda, R, C, &rowcnd, &colcnd, &amax, &info)	#define ROW_A;#define COL_A	na::	int m = ROW_A;int n = COL_A;int lda = ROW_A	info	amax, rowcnd, colcnd, R[ROW_A], C[COL_A], AT[ROW_A*COL_A]	na::	na::	na::26	cgeequ,zgeequ,cgeequb,zgeequb	(&m, &n, AT, &lda, R, C, &rowcnd, &colcnd, &amax, &info)	#define ROW_A;#define COL_A	na::	int m = ROW_A;int n = COL_A;int lda = ROW_A	info	amax, rowcnd, colcnd, R[ROW_A], C[COL_A], AT[2*ROW_A*COL_A]	A[ROW_A][COL_A]	na::	na::27	sgbequ,dgbequ,sgbequb,dgbequb	(&m, &n, &kl, &ku, ABT, &ldab, R, C, &rowcnd, &colcnd, &amax, &info)	#define ROW_A;#define COL_A;#define KL;#define KU	na::	int m = ROW_A;int n = COL_A;int kl = KL;int ku = KU;int ldab = KL+KU+1	info	amax, rowcnd, colcnd, R[ROW_A], C[COL_A], AB[(KL+KU+1)][COL_A], ABT[(KL+KU+1)*COL_A]	na::	na::	na::28	cgbequ,zgbequ,cgbequb,zgbequb	(&m, &n, &kl, &ku, ABT, &ldab, R, C, &rowcnd, &colcnd, &amax, &info)	#define ROW_A;#define COL_A;#define KL;#define KU	na::	int m = ROW_A;int n = COL_A;int kl = KL;int ku = KU;int ldab = KL+KU+1	info	amax, rowcnd, colcnd, R[ROW_A], C[COL_A], ABT[2*(KL+KU+1)*COL_A]	A[ROW_A][COL_A], AB[(KL+KU+1)][COL_A]	na::	na::29	spbequ,dpbequ	(&UPLO, &n, &kd, ABT, &ldab, S, &scond, &amax, &info)	#define SIZE;#define KD	const char UPLO =	int n = SIZE;int kd = KD;int ldab = KD+1	info	amax, scond, S[SIZE], AB[(KD+1)][SIZE], ABT[(KD+1)*SIZE]	na::	na::	na::30	cpbequ,zpbequ	(&UPLO, &n, &kd, ABT, &ldab, S, &scond, &amax, &info)	#define SIZE;#define KD	const char UPLO =	int n = SIZE;int kd = KD;int ldab = KD+1	info	amax, scond, S[SIZE], ABT[2*(KD+1)*SIZE]	A[SIZE][SIZE], AB[(KD+1)][SIZE]	na::	na::31	spoequ,dpoequ,spoequb,dpoequb	(&n, AT, &lda, S, &scond, &amax, &info)	#define SIZE	const char UPLO =	int n = SIZE;int lda = SIZE	info	amax, scond, S[SIZE], A[SIZE][SIZE], AT[SIZE*SIZE]	na::	na::	na::32	cpoequ,zpoequ,cpoequb,zpoequb	(&n, AT, &lda, S, &scond, &amax, &info)	#define SIZE	const char UPLO =	int n = SIZE;int lda = SIZE	info	amax, scond, S[SIZE], AT[2*SIZE*SIZE]	A[SIZE][SIZE]	na::	na::33	sppequ,dppequ	(&UPLO, &n, AP, S, &scond, &amax, &info)	#define SIZE	const char UPLO =	int n = SIZE	info	amax, scond, S[SIZE], AP[SIZE*(SIZE+1)/2]	na::	na::	na::34	cppequ,zppequ	(&UPLO, &n, AP, S, &scond, &amax, &info)	#define SIZE	const char UPLO =	int n = SIZE	info	amax, scond, S[SIZE], AP[2*SIZE*(SIZE+1)/2]	A[SIZE][SIZE]	na::	na::35	ssyequb,dsyequb	(&UPLO, &n, AT, &lda, S, &scond, &amax, WORK, &info)	#define SIZE	const char UPLO =	int n = SIZE;int lda = SIZE	info	amax, scond, S[SIZE], A[SIZE][SIZE], AT[SIZE*SIZE], WORK[3*SIZE]	na::	na::	na::36	csyequb,zsyequb,cheequb,zheequb	(&UPLO, &n, AT, &lda, S, &scond, &amax, WORK, &info)	#define SIZE	const char UPLO =	int n = SIZE;int lda = SIZE	info	amax, scond, S[SIZE], AT[2*SIZE*SIZE]	A[SIZE][SIZE], WORK[3*SIZE]	na::	na::37	sgetrf,dgetrf	(&m, &n, AT, &lda, IPIV, &info)	#define ROW_A;#define COL_A	na::	int m = ROW_A;int n = COL_A;int lda = ROW_A	IPIV[min(ROW_A,COL_A)], info	AT[ROW_A*COL_A]	na::	na::	na::	cgetrf,zgetrf									39	sgttrf,dgttrf	(&n, DL, D, DU, DU2, IPIV, &info)	#define SIZE	na::	int n = SIZE	IPIV[SIZE], info	DL[SIZE-1], D[SIZE], DU[SIZE-1], DU2[SIZE-2]	na::	na::	na::	cgttrf,zgttrf									41	spttrf,dpttrf	(&n, D, E, &info)	#define SIZE	na::	int n = SIZE	info	D[SIZE], E[SIZE-1]	na::	na::	na::	cpttrf,zpttrf										sgbtrf,dgbtrf	(&m, &n, &kl, &ku, ABT, &ldab, IPIV, &info)									cgbtrf,zgbtrf										spbtrf,dpbtrf	(&UPLO, &n, &kd, ABT, &ldab, &info)									cpbtrf,zpbtrf										ssytrf,dsytrf	(&UPLO, &n, AT, &lda, IPIV, WORK, &lwork, &info)									csytrf,zsytrf										chetrf,zhetrf		spotrf,dpotrf	(&UPLO, &n, AT, &lda, &info)	cpotrf,zpotrf		spptrf,dpptrf	(&UPLO, &n, AP, &info)	cpptrf,zpptrf		ssptrf,dsptrf	(&UPLO, &n, AP, IPIV, &info)	csptrf,zsptrf		chptrf,zhptrf		strtrf,dtrtrf,ctrtrf,ztrtrf	(This is only a dummy routine!) :: 	stbtrf,dtbtrf,ctbtrf,ztbtrf	(This is only a dummy routine!) :: 	stptrf,dtptrf,ctptrf,ztptrf	(This is only a dummy routine!) :: 	stftrf,dtftrf,ctftrf,ztftrf	(This is only a dummy routine!) :: 	spftrf,dpftrf	(&TRANSR, &UPLO, &n, AT, &info)	cpftrf,zpftrf		spstrf,dpstrf		cpstrf,zpstrf	65	sgetrs,dgetrs	(&TRANS, &n, &nrhs, AT, &lda, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char TRANS =	int m = SIZE;int n = SIZE;int lda = SIZE;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	B[ROW_B][COL_B], AT[SIZE*SIZE], BT[ROW_B*COL_B]	na::	na::	na::	cgetrs,zgetrs									67	sgttrs,dgttrs	(&TRANS, &n, &nrhs, DL, D, DU, DU2, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char TRANS =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	DL[SIZE-1], D[SIZE], DU[SIZE-1], DU2[SIZE-2], B[ROW_B][COL_B], BT[ROW_B*COL_B]	na::	na::	na::	cgttrs,zgttrs									69	spttrs,dpttrs	(&n, &nrhs, D, E, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	na::	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	D[SIZE], E[SIZE-1], B[ROW_B][COL_B], BT[ROW_B*COL_B]	na::	na::	na::	cpttrs,zpttrs									71	sgbtrs,dgbtrs	(&TRANS, &n, &kl, &ku, &nrhs, ABT, &ldab, IPIV, BT, &ldb, &info)	#define SIZE;#define KL;#define KU;#define ROW_B;#define COL_B	const char TRANS =	int n = SIZE;int m = SIZE;int kl = KL;int ku = KU;int nrhs = COL_B;int ldab = 2*KL+KU+1;int ldb = ROW_B	IPIV[SIZE], info					cgbtrs,zgbtrs									73	spbtrs,dpbtrs	(&UPLO, &n, &kd, &nrhs, ABT, &ldab, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B;#define KD	const char UPLO =	int n = SIZE;int kd = KD;int nrhs = COL_B;int ldab = KD+1;int ldb = ROW_B	info	AB[(KD+1)][SIZE], B[ROW_B][COL_B], ABT[(KD+1)*SIZE], BT[ROW_B*COL_B]	na::	na::	na::	cpbtrs,zpbtrs									75	ssytrs,dsytrs	(&UPLO, &n, &nrhs, AT, &lda, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int lda = SIZE;int ldb = ROW_B;int lwork = SIZE*SIZE	IPIV[SIZE], info	B[ROW_B][COL_B], A[SIZE][SIZE], AT[SIZE*SIZE], BT[ROW_B*COL_B], WORK[SIZE*SIZE]	na::	na::	na::	csytrs,zsytrs										chetrs,zhetrs									78	spotrs,dpotrs	(&UPLO, &n, &nrhs, AT, &lda, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int lda = SIZE;int ldb = ROW_B	info	B[ROW_B][COL_B], A[SIZE][SIZE], AT[SIZE*SIZE], BT[ROW_B*COL_B]	na::	na::	na::	cpotrs,zpotrs									80	spptrs,dpptrs	(&UPLO, &n, &nrhs, AP, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	AP[SIZE*(SIZE+1)/2], B[ROW_B][COL_B], BT[ROW_B*COL_B]	na::	na::	na::	cpptrs,zpptrs									82	ssptrs,dsptrs	(&UPLO, &n, &nrhs, AP, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	AP[SIZE*(SIZE+1)/2], B[ROW_B][COL_B], BT[ROW_B*COL_B]	na::	na::	na::	csptrs,zsptrs										chptrs,zhptrs									85	strtrs,dtrtrs	(&UPLO, &TRANS, &DIAG, &n, &nrhs, AT, &lda, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =;const char TRANS =;const char DIAG =	int n = SIZE;int lda = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	A[SIZE][SIZE], AT[SIZE*SIZE], B[ROW_B][COL_B], BT[ROW_B*COL_B]	na::	na::	na::	ctrtrs,ztrtrs									87	stbtrs,dtbtrs	(&UPLO, &TRANS, &DIAG, &n, &kd, &nrhs, ABT, &ldab, BT, &ldb, &info)	#define SIZE;#define KD;#define ROW_B;#define COL_B	const char UPLO =;const char TRANS =;const char DIAG =	int n = SIZE;int kd = KD;int ldab = KD+1;int nrhs = COL_B;int ldb = ROW_B	info	AB[KD+1][SIZE], ABT[(KD+1)*SIZE], B[ROW_B][COL_B], BT[ROW_B*COL_B]	na::	na::	na::	ctbtrs,ztbtrs									89	stptrs,dtptrs	(&UPLO, &TRANS, &DIAG, &n, &nrhs, AP, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =;const char TRANS =;const char DIAG =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	AP[SIZE*(SIZE+1)/2], B[ROW_B][COL_B], BT[ROW_B*COL_B]	na::	na::	na::	ctptrs,ztptrs									91	spftrs,dpftrs	(&TRANSR, &UPLO, &n, &nrhs, AT, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =;const char TRANSR =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	AT[SIZE*(SIZE+1)/2], B[ROW_B][COL_B], BT[ROW_B*COL_B]	na::	na::	na::	cpftrs,zpftrs										sytrs2										hetrs2									