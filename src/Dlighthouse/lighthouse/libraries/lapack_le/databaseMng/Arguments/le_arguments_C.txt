1	sgesv,dgesv	(&n, &nrhs, AT, &lda, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	na::	int n = SIZE;int lda = SIZE;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	B[ROW_B][COL_B], AT[SIZE*SIZE], BT[ROW_B*COL_B]	na::	na::2	sgetrs,dgetrs	(&TRANS, &n, &nrhs, AT, &lda, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char TRANS =	int m = SIZE;int n = SIZE;int lda = SIZE;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	B[ROW_B][COL_B], AT[SIZE*SIZE], BT[ROW_B*COL_B]	na::	na::3	cgesv,zgesv	(&n, &nrhs, AT, &lda, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	na::	int n = SIZE;int lda = SIZE;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	AT[2*SIZE*SIZE], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], B[ROW_B][COL_B]	na::4	cgetrs,zgetrs	(&TRANS, &n, &nrhs, AT, &lda, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char TRANS =	int m = SIZE;int n = SIZE;int lda = SIZE;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	AT[2*SIZE*SIZE], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], B[ROW_B][COL_B]	na::5	sgtsv,dgtsv	(&n, &nrhs, DL, D, DU, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	na::	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	DU[SIZE-1], D[SIZE], DL[SIZE-1], B[ROW_B][COL_B], BT[ROW_B*COL_B]	na::	na::6	sgttrs,dgttrs	(&TRANS, &n, &nrhs, DL, D, DU, DU2, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char TRANS =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	DL[SIZE-1], D[SIZE], DU[SIZE-1], DU2[SIZE-2], B[ROW_B][COL_B], BT[ROW_B*COL_B]	na::	na::7	cgtsv,zgtsv	(&n, &nrhs, DL, D, DU, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	na::	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	BT[2*ROW_B*COL_B]	DU[SIZE-1], D[SIZE], DL[SIZE-1], B[ROW_B][COL_B]	na::8	cgttrs,zgttrs	(&TRANS, &n, &nrhs, DL, D, DU, DU2, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char TRANS =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	BT[2*ROW_B*COL_B]	DL[SIZE-1], D[SIZE], DU[SIZE-1], DU2[SIZE-2], B[ROW_B][COL_B]	na::9	sptsv,dptsv,spttrs,dpttrs	(&n, &nrhs, D, E, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	na::	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	D[SIZE], E[SIZE-1], B[ROW_B][COL_B], BT[ROW_B*COL_B]	na::	na::10	cptsv,zptsv	(&n, &nrhs, D, E, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	na::	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	D[SIZE], BT[2*ROW_B*COL_B]	E[SIZE-1], B[ROW_B][COL_B]	na::11	cpttrs,zpttrs	(&UPLO, &n, &nrhs, D, E, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	D[SIZE], BT[2*ROW_B*COL_B]	E[SIZE-1], B[ROW_B][COL_B]	na::12	sgbsv,dgbsv	(&n, &kl, &ku, &nrhs, ABT, &ldab, IPIV, BT, &ldb, &info)	#define SIZE;#define KL;#define KU;#define ROW_B;#define COL_B	na::	int n = SIZE;int kl = KL;int ku = KU;int ldab = 2*KL+KU+1;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	AB[(2*KL+KU+1)][SIZE], B[ROW_B][COL_B], ABT[(2*KL+KU+1)*SIZE], BT[ROW_B*COL_B]	na::	na::13	sgbtrs,dgbtrs	(&TRANS, &n, &kl, &ku, &nrhs, ABT, &ldab, IPIV, BT, &ldb, &info)	#define SIZE;#define KL;#define KU;#define ROW_B;#define COL_B	const char TRANS =	int n = SIZE;int m = SIZE;int kl = KL;int ku = KU;int ldab = 2*KL+KU+1;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	AB[(2*KL+KU+1)][SIZE], B[ROW_B][COL_B], ABT[(2*KL+KU+1)*SIZE], BT[ROW_B*COL_B]	na::	na::14	cgbsv,zgbsv	(&n, &kl, &ku, &nrhs, ABT, &ldab, IPIV, BT, &ldb, &info)	#define SIZE;#define KL;#define KU;#define ROW_B;#define COL_B	na::	int n = SIZE;int kl = KL;int ku = KU;int ldab = 2*KL+KU+1;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	ABT[2*(2*KL+KU+1)*SIZE], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], AB[(2*KL+KU+1)][SIZE], B[ROW_B][COL_B]	na::15	cgbtrs,zgbtrs	(&TRANS, &n, &kl, &ku, &nrhs, ABT, &ldab, IPIV, BT, &ldb, &info)	#define SIZE;#define KL;#define KU;#define ROW_B;#define COL_B	const char TRANS =	int n = SIZE;int m = SIZE;int kl = KL;int ku = KU;int ldab = 2*KL+KU+1;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	ABT[2*(2*KL+KU+1)*SIZE], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], AB[(2*KL+KU+1)][SIZE], B[ROW_B][COL_B]	na::16	spbsv,dpbsv,spbtrs,dpbtrs	(&UPLO, &n, &kd, &nrhs, ABT, &ldab, BT, &ldb, &info)	#define SIZE;#define KD;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int kd = KD;int nrhs = COL_B;int ldab = KD+1;int ldb = ROW_B	info	AB[(KD+1)][SIZE], B[ROW_B][COL_B], ABT[(KD+1)*SIZE], BT[ROW_B*COL_B]	na::	na::17	cpbsv,zpbsv,cpbtrs,zpbtrs	(&UPLO, &n, &kd, &nrhs, ABT, &ldab, BT, &ldb, &info)	#define SIZE;#define KD;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int kd = KD;int nrhs = COL_B;int ldab = KD+1;int ldb = ROW_B	info	ABT[2*(KD+1)*SIZE], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], AB[(KD+1)][SIZE], B[ROW_B][COL_B]	na::18	ssysv,dsysv	(&UPLO, &n, &nrhs, AT, &lda, IPIV, BT, &ldb, WORK, &lwork, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int lda = SIZE;int ldb = ROW_B;int lwork = SIZE*SIZE	IPIV[SIZE], info	B[ROW_B][COL_B], AT[SIZE*SIZE], BT[ROW_B*COL_B], WORK[SIZE*SIZE]	na::	na::19	ssytrs,dsytrs	(&UPLO, &n, &nrhs, AT, &lda, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int lda = SIZE;int ldb = ROW_B;int lwork = SIZE*SIZE	IPIV[SIZE], info	B[ROW_B][COL_B], AT[SIZE*SIZE], BT[ROW_B*COL_B], WORK[SIZE*SIZE]	na::	na::20	csysv,zsysv,chesv,zhesv	(&UPLO, &n, &nrhs, AT, &lda, IPIV, BT, &ldb, WORK, &lwork, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int lda = SIZE;int ldb = ROW_B;int lwork = SIZE*SIZE	IPIV[SIZE], info	AT[2*SIZE*SIZE], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], B[ROW_B][COL_B], WORK[SIZE*SIZE]	na::21	csytrs,zsytrs,chetrs,zhetrs	(&UPLO, &n, &nrhs, AT, &lda, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int lda = SIZE;int ldb = ROW_B;int lwork = SIZE*SIZE	IPIV[SIZE], info	AT[2*SIZE*SIZE], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], B[ROW_B][COL_B], WORK[SIZE*SIZE]	na::22	sposv,dposv,spotrs,dpotrs	(&UPLO, &n, &nrhs, AT, &lda, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int lda = SIZE;int ldb = ROW_B	info	B[ROW_B][COL_B], AT[SIZE*SIZE], BT[ROW_B*COL_B]	na::	na::23	cposv,zposv,cpotrs,zpotrs	(&UPLO, &n, &nrhs, AT, &lda, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int lda = SIZE;int ldb = ROW_B	info	AT[2*SIZE*SIZE], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], B[ROW_B][COL_B]	na::24	sppsv,dppsv,spptrs,dpptrs	(&UPLO, &n, &nrhs, AP, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	AP[SIZE*(SIZE+1)/2], B[ROW_B][COL_B], BT[ROW_B*COL_B]	na::	na::25	cppsv,zppsv,cpptrs,zpptrs	(&UPLO, &n, &nrhs, AP, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	AP[SIZE*(SIZE+1)], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], B[ROW_B][COL_B]	na::26	sspsv,dspsv,ssptrs,dsptrs	(&UPLO, &n, &nrhs, AP, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	AP[SIZE*(SIZE+1)/2], B[ROW_B][COL_B], BT[ROW_B*COL_B]	na::	na::27	cspsv,zspsv,csptrs,zsptrs,chpsv,zhpsv,chptrs,zhptrs	(&UPLO, &n, &nrhs, AP, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	AP[SIZE*(SIZE+1)], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], B[ROW_B][COL_B]	na::28	dsgesv	(&n, &nrhs, AT, &lda, IPIV, BT, &ldb, XT, &ldx, WORK, SWORK, &iter, &info)	#define SIZE;#define ROW_B;#define COL_B	na::	int n = SIZE;int lda = SIZE;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	iter, IPIV[SIZE], info	B[ROW_B][COL_B], X[ROW_B][COL_B], WORK[ROW_B][COL_B], AT[SIZE*SIZE], BT[ROW_B*COL_B], XT[ROW_B*COL_B]	na::	SWORK[SIZE*(SIZE+COL_B)]29	zcgesv	(&n, &nrhs, AT, &lda, IPIV, BT, &ldb, XT, &ldx, WORK, SWORK, RWORK, &iter, &info)	#define SIZE;#define ROW_B;#define COL_B	na::	int n = SIZE;int lda = SIZE;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	iter, IPIV[SIZE], info	AT[2*SIZE*SIZE], BT[2*ROW_B*COL_B], XT[2*ROW_B*COL_B], RWORK[ROW_B]	A[SIZE][SIZE], B[ROW_B][COL_B], X[ROW_B][COL_B], WORK[ROW_B*COL_B]	complex SWORK[ROW_B*(SIZE+COL_B)]30	dsposv	(&UPLO, &n, &nrhs, AT, &lda, BT, &ldb, XT, &ldx, WORK, SWORK, &iter, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int lda = SIZE;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	iter, info	B[ROW_B][COL_B], X[ROW_B][COL_B], WORK[ROW_B][COL_B], AT[SIZE*SIZE], BT[ROW_B*COL_B], XT[ROW_B*COL_B]	na::	SWORK[SIZE*(SIZE+COL_B)]31	zcposv	(&UPLO, &n, &nrhs, AT, &lda, BT, &ldb, XT, &ldx, WORK, SWORK, RWORK, &iter, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int lda = SIZE;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	iter, info	AT[2*SIZE*SIZE], BT[2*ROW_B*COL_B], XT[2*ROW_B*COL_B], RWORK[ROW_B]	A[SIZE][SIZE], B[ROW_B][COL_B], X[ROW_B][COL_B], WORK[ROW_B*COL_B]	complex SWORK[ROW_B*(SIZE+COL_B)]32	strtrs,dtrtrs	(&UPLO, &TRANS, &DIAG, &n, &nrhs, AT, &lda, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =;const char TRANS =;const char DIAG =	int n = SIZE;int lda = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	A[SIZE][SIZE], AT[SIZE*SIZE], B[ROW_B][COL_B], BT[ROW_B*COL_B]	na::	na::33	ctrtrs,ztrtrs	(&UPLO, &TRANS, &DIAG, &n, &nrhs, AT, &lda, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =;const char TRANS =;const char DIAG =	int n = SIZE;int lda = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	AT[2*SIZE*SIZE], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], B[ROW_B][COL_B]	na::34	stbtrs,dtbtrs	(&UPLO, &TRANS, &DIAG, &n, &kd, &nrhs, ABT, &ldab, BT, &ldb, &info)	#define SIZE;#define KD;#define ROW_B;#define COL_B	const char UPLO =;const char TRANS =;const char DIAG =	int n = SIZE;int kd = KD;int ldab = KD+1;int nrhs = COL_B;int ldb = ROW_B	info	AB[KD+1][SIZE], ABT[(KD+1)*SIZE], B[ROW_B][COL_B], BT[ROW_B*COL_B]	na::	na::35	ctbtrs,ztbtrs	(&UPLO, &TRANS, &DIAG, &n, &kd, &nrhs, ABT, &ldab, BT, &ldb, &info)	#define SIZE;#define KD;#define ROW_B;#define COL_B	const char UPLO =;const char TRANS =;const char DIAG =	int n = SIZE;int kd = KD;int nrhs = COL_B;int ldab = KD+1;int ldb = ROW_B	info	ABT[2*(KD+1)*SIZE], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], AB[(KD+1)][SIZE], B[ROW_B][COL_B]	na::36	stptrs,dtptrs	(&UPLO, &TRANS, &DIAG, &n, &nrhs, AP, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =;const char TRANS =;const char DIAG =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	AP[SIZE*(SIZE+1)/2], B[ROW_B][COL_B], BT[ROW_B*COL_B]	na::	na::37	ctptrs,ztptrs	(&UPLO, &TRANS, &DIAG, &n, &nrhs, AP, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =;const char TRANS =;const char DIAG =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	AP[SIZE*(SIZE+1)], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], B[ROW_B][COL_B]	na::38	spftrs,dpftrs	(&TRANSR, &UPLO, &n, &nrhs, AT, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =;const char TRANSR =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	AT[SIZE*(SIZE+1)/2], B[ROW_B][COL_B], BT[ROW_B*COL_B]	na::	na::39	cpftrs,zpftrs	(&TRANSR, &UPLO, &n, &nrhs, AT, BT, &ldb, &info)							na::40	sytrs2								na::41	hetrs2								na::42	sgeequ,dgeequ,sgeequb,dgeequb	(&m, &n, AT, &lda, R, C, &rowcnd, &colcnd, &amax, &info)	#define ROW_A;#define COL_A	na::	int m = ROW_A;int n = COL_A;int lda = ROW_A	info	amax, rowcnd, colcnd, R[ROW_A], C[COL_A], AT[ROW_A*COL_A]	na::	na::43	cgeequ,zgeequ,cgeequb,zgeequb	(&m, &n, AT, &lda, R, C, &rowcnd, &colcnd, &amax, &info)	#define ROW_A;#define COL_A	na::	int m = ROW_A;int n = COL_A;int lda = ROW_A	info	amax, rowcnd, colcnd, R[ROW_A], C[COL_A], AT[2*ROW_A*COL_A]	A[ROW_A][COL_A]	na::44	sgbequ,dgbequ,sgbequb,dgbequb	(&m, &n, &kl, &ku, ABT, &ldab, R, C, &rowcnd, &colcnd, &amax, &info)	#define ROW_A;#define COL_A;#define KL;#define KU	na::	int m = ROW_A;int n = COL_A;int kl = KL;int ku = KU;int ldab = KL+KU+1	info	amax, rowcnd, colcnd, R[ROW_A], C[COL_A], AB[(KL+KU+1)][COL_A], ABT[(KL+KU+1)*COL_A]	na::	na::45	cgbequ,zgbequ,cgbequb,zgbequb	(&m, &n, &kl, &ku, ABT, &ldab, R, C, &rowcnd, &colcnd, &amax, &info)	#define ROW_A;#define COL_A;#define KL;#define KU	na::	int m = ROW_A;int n = COL_A;int kl = KL;int ku = KU;int ldab = KL+KU+1	info	amax, rowcnd, colcnd, R[ROW_A], C[COL_A], ABT[2*(KL+KU+1)*COL_A]	A[ROW_A][COL_A], AB[(KL+KU+1)][COL_A]	na::46	spbequ,dpbequ	(&UPLO, &n, &kd, ABT, &ldab, S, &scond, &amax, &info)	#define SIZE;#define KD	const char UPLO =	int n = SIZE;int kd = KD;int ldab = KD+1	info	amax, scond, S[SIZE], AB[(KD+1)][SIZE], ABT[(KD+1)*SIZE]	na::	na::47	cpbequ,zpbequ	(&UPLO, &n, &kd, ABT, &ldab, S, &scond, &amax, &info)	#define SIZE;#define KD	const char UPLO =	int n = SIZE;int kd = KD;int ldab = KD+1	info	amax, scond, S[SIZE], ABT[2*(KD+1)*SIZE]	A[SIZE][SIZE], AB[(KD+1)][SIZE]	na::48	spoequ,dpoequ,spoequb,dpoequb	(&n, AT, &lda, S, &scond, &amax, &info)	#define SIZE	const char UPLO =	int n = SIZE;int lda = SIZE	info	amax, scond, S[SIZE], A[SIZE][SIZE], AT[SIZE*SIZE]	na::	na::49	cpoequ,zpoequ,cpoequb,zpoequb	(&n, AT, &lda, S, &scond, &amax, &info)	#define SIZE	const char UPLO =	int n = SIZE;int lda = SIZE	info	amax, scond, S[SIZE], AT[2*SIZE*SIZE]	A[SIZE][SIZE]	na::50	sppequ,dppequ	(&UPLO, &n, AP, S, &scond, &amax, &info)	#define SIZE	const char UPLO =	int n = SIZE	info	amax, scond, S[SIZE], AP[SIZE*(SIZE+1)/2]	na::	na::51	cppequ,zppequ	(&UPLO, &n, AP, S, &scond, &amax, &info)	#define SIZE	const char UPLO =	int n = SIZE	info	amax, scond, S[SIZE], AP[2*SIZE*(SIZE+1)/2]	A[SIZE][SIZE]	na::52	ssyequb,dsyequb	(&UPLO, &n, AT, &lda, S, &scond, &amax, WORK, &info)	#define SIZE	const char UPLO =	int n = SIZE;int lda = SIZE	info	amax, scond, S[SIZE], A[SIZE][SIZE], AT[SIZE*SIZE], WORK[3*SIZE]	na::	na::53	csyequb,zsyequb,cheequb,zheequb	(&UPLO, &n, AT, &lda, S, &scond, &amax, WORK, &info)	#define SIZE	const char UPLO =	int n = SIZE;int lda = SIZE	info	amax, scond, S[SIZE], AT[2*SIZE*SIZE]	A[SIZE][SIZE], WORK[3*SIZE]	na::54	sgetri,dgetri	(&n, AT, &lda, IPIV, WORK, &lwork, &info)	#define SIZE	na::	int m = SIZE;int n = SIZE;int lda = SIZE;int lwork = SIZE*SIZE	IPIV[SIZE], info	AT[SIZE*SIZE], WORK[SIZE*SIZE]	na::	na::55	cgetri,zgetri	(&n, AT, &lda, IPIV, WORK, &lwork, &info)	#define SIZE	na::	int m = SIZE;int n = SIZE;int lda = SIZE;int lwork = SIZE*SIZE	IPIV[SIZE], info	AT[2*SIZE*SIZE]	A[SIZE][SIZE], WORK[SIZE*SIZE]	na::56	ssytri,dsytri	(&UPLO, &n, AT, &lda, IPIV, WORK, &info)	#define SIZE	const char UPLO =	int n = SIZE;int lda = SIZE;int lwork = SIZE*SIZE	IPIV[SIZE], info	AT[SIZE*SIZE], WORK[SIZE*SIZE]	na::	na::57	csytri,zsytri,chetri,zhetri	(&UPLO, &n, AT, &lda, IPIV, WORK, &info)	#define SIZE	const char UPLO =	int n = SIZE;int lda = SIZE;int lwork = SIZE*SIZE	IPIV[SIZE], info	AT[2*SIZE*SIZE]	A[SIZE][SIZE], WORK[SIZE*SIZE]	na::58	spotri,dpotri	(&UPLO, &n, AT, &lda, &info)	#define SIZE	const char UPLO =	int n = SIZE;int lda = SIZE	info	AT[SIZE*SIZE]	na::	na::59	cpotri,zpotri	(&UPLO, &n, AT, &lda, &info)	#define SIZE	const char UPLO =	int n = SIZE;int lda = SIZE	info	AT[2*SIZE*SIZE]	A[SIZE][SIZE]	na::60	spptri,dpptri	(&UPLO, &n, AP, &info)	#define SIZE	const char UPLO =	int n = SIZE	info	AP[SIZE*(SIZE+1)/2]	na::	na::61	cpptri,zpptri	(&UPLO, &n, AP, &info)	#define SIZE	const char UPLO =	int n = SIZE	info	AP[SIZE*(SIZE+1)]	A[SIZE][SIZE]	na::62	ssptri,dsptri	(&UPLO, &n, AP, IPIV, WORK, &info)	#define SIZE	const char UPLO =	int n = SIZE	IPIV[SIZE], info	AP[SIZE*(SIZE+1)/2], WORK[SIZE]	na::	na::63	csptri,zsptri,chptri,zhptri	(&UPLO, &n, AP, IPIV, WORK, &info)	#define SIZE	const char UPLO =	int n = SIZE	IPIV[SIZE], info	AP[SIZE*(SIZE+1)]	A[SIZE][SIZE], WORK[SIZE]	na::64	strtri,dtrtri	(&UPLO, &DIAG, &n, AT, &lda, &info)	#define SIZE	const char UPLO =;const char DIAG =	int n = SIZE;int lda = SIZE	info	AT[SIZE*SIZE]	na::	na::65	ctrtri,ztrtri	(&UPLO, &DIAG, &n, AT, &lda, &info)	#define SIZE	const char UPLO =;const char DIAG =	int n = SIZE;int lda = SIZE	info	AT[2*SIZE*SIZE]	A[SIZE][SIZE]	na::66	stptri,dtptri	(&UPLO, &DIAG, &n, AP, &info)	#define SIZE	const char UPLO =;const char DIAG =	int n = SIZE	info	AP[SIZE*(SIZE+1)/2]	na::	na::67	ctptri,ztptri	(&UPLO, &DIAG, &n, AP, &info)	#define SIZE	const char UPLO =;const char DIAG =	int n = SIZE	info	AP[SIZE*(SIZE+1)]	A[SIZE][SIZE]	na::68	spftri,dpftri								na::69	cpftri,zpftri								na::70	stftri,dtftri								na::71	ctftri,ztftri								na::72	sytri2								na::73	hetri2								na::74	sytri2x								na::75	hetri2x								na::76	trti2								na::77	sgetrf,dgetrf	(&m, &n, AT, &lda, IPIV, &info)	#define ROW_A;#define COL_A	na::	int m = ROW_A;int n = COL_A;int lda = ROW_A	IPIV[min(ROW_A,COL_A)], info	AT[ROW_A*COL_A]	na::	AT, &lda=AFT, &ldaf78	cgetrf,zgetrf	(&m, &n, AT, &lda, IPIV, &info)	#define ROW_A;#define COL_A	na::	int m = ROW_A;int n = COL_A;int lda = ROW_A	IPIV[min(ROW_A,COL_A)], info	AT[2*ROW_A*COL_A]	A[ROW_A][COL_A]	AT, &lda=AFT, &ldaf79	sgttrf,dgttrf	(&n, DL, D, DU, DU2, IPIV, &info)	#define SIZE	na::	int n = SIZE	IPIV[SIZE], info	DL[SIZE-1], D[SIZE], DU[SIZE-1], DU2[SIZE-2]	na::	DL, D, DU=DLF, DF, DUF80	cgttrf,zgttrf	(&n, DL, D, DU, DU2, IPIV, &info)	#define SIZE	na::	int n = SIZE	IPIV[SIZE], info	na::	DL[SIZE-1], D[SIZE], DU[SIZE-1], DU2[SIZE-2]	DL, D, DU=DLF, DF, DUF81	spttrf,dpttrf	(&n, D, E, &info)	#define SIZE	na::	int n = SIZE	info	D[SIZE], E[SIZE-1]	na::	D, E=DF, EF82	cpttrf,zpttrf	(&n, D, E, &info)	#define SIZE	na::	int n = SIZE	info	D[SIZE]	E[SIZE-1]	D, E=DF, EF83	sgbtrf,dgbtrf	(&m, &n, &kl, &ku, ABT, &ldab, IPIV, &info)	#define ROW_A;#define COL_A;#define KL;#define KU	na::	int m = ROW_A;int n = COL_A;int kl = KL;int ku = KU;int ldab = 2*KL+KU+1	IPIV[min(ROW_A, COL_A)], info	AB[(2*KL+KU+1)][COL_A], ABT[(2*KL+KU+1)*COL_A]	na::	ABT, &ldab=AFBT, &ldafb84	cgbtrf,zgbtrf	(&m, &n, &kl, &ku, ABT, &ldab, IPIV, &info)	#define ROW_A;#define COL_A;#define KL;#define KU	na::	int m = ROW_A;int n = COL_A;int kl = KL;int ku = KU;int ldab = 2*KL+KU+1	IPIV[min(ROW_A, COL_A)], info	ABT[2*(2*KL+KU+1)*COL_A]	AB[(2*KL+KU+1)][COL_A], A[ROW_A][COL_A]	ABT, &ldab=AFBT, &ldafb85	spbtrf,dpbtrf	(&UPLO, &n, &kd, ABT, &ldab, &info)	#define SIZE;#define KD	const char UPLO =	int n = SIZE;int kd = KD;int ldab = KD+1	info	AB[(KD+1)][SIZE], ABT[(KD+1)*SIZE]	na::	ABT, &ldab=AFBT, &ldafb86	cpbtrf,zpbtrf	(&UPLO, &n, &kd, ABT, &ldab, &info)	#define SIZE;#define KD	const char UPLO =	int n = SIZE;int kd = KD;int ldab = KD+1	info	ABT[2*(KD+1)*SIZE]	AB[(KD+1)][SIZE], A[SIZE][SIZE]	ABT, &ldab=AFBT, &ldafb87	ssytrf,dsytrf	(&UPLO, &n, AT, &lda, IPIV, WORK, &lwork, &info)	#define SIZE	const char UPLO =	int n = SIZE;int lda = SIZE;int lwork = SIZE*SIZE	IPIV[SIZE], info	AT[SIZE*SIZE], WORK[SIZE*SIZE]	na::	AT, &lda=AFT, &ldaf88	csytrf,zsytrf,chetrf,zhetrf	(&UPLO, &n, AT, &lda, IPIV, WORK, &lwork, &info)	#define SIZE	const char UPLO =	int n = SIZE;int lda = SIZE;int lwork = SIZE*SIZE	IPIV[SIZE], info	AT[2*SIZE*SIZE]	A[SIZE][SIZE], WORK[SIZE*SIZE]	AT, &lda=AFT, &ldaf89	spotrf,dpotrf	(&UPLO, &n, AT, &lda, &info)	#define SIZE	const char UPLO =	int n = SIZE;int lda = SIZE	info	AT[SIZE*SIZE]	na::	AT, &lda=AFT, &ldaf90	cpotrf,zpotrf	(&UPLO, &n, AT, &lda, &info)	#define SIZE	const char UPLO =	int n = SIZE;int lda = SIZE	info	AT[2*SIZE*SIZE]	A[SIZE][SIZE]	AT, &lda=AFT, &ldaf91	spptrf,dpptrf	(&UPLO, &n, AP, &info)	#define SIZE	const char UPLO =	int n = SIZE	info	AP[SIZE*(SIZE+1)/2]	na::	AP=AFP92	cpptrf,zpptrf	(&UPLO, &n, AP, &info)	#define SIZE	const char UPLO =	int n = SIZE	info	AP[SIZE*(SIZE+1)]	A[SIZE][SIZE]	AP=AFP93	ssptrf,dsptrf	(&UPLO, &n, AP, IPIV, &info)	#define SIZE	const char UPLO =	int n = SIZE	IPIV[SIZE], info	AP[SIZE*(SIZE+1)/2]	na::	AP=AFP94	csptrf,zsptrf,chptrf,zhptrf	(&UPLO, &n, AP, IPIV, &info)	#define SIZE	const char UPLO =	int n = SIZE	IPIV[SIZE], info	AP[SIZE*(SIZE+1)]	A[SIZE][SIZE]	AP=AFP95	strtrf,dtrtrf,ctrtrf,ztrtrf	(This is only a dummy routine!) na:: 							::=::96	stbtrf,dtbtrf,ctbtrf,ztbtrf	(This is only a dummy routine!) na:: 							::=::97	stptrf,dtptrf,ctptrf,ztptrf	(This is only a dummy routine!) na:: 							::=::98	stftrf,dtftrf,ctftrf,ztftrf	(This is only a dummy routine!) na:: 							na::99	spftrf,dpftrf	(&TRANSR, &UPLO, &n, AT, &info)							na::100	cpftrf,zpftrf	(&TRANSR, &UPLO, &n, AT, &info)							na::101	spstrf,dpstrf	(&UPLO, &n, AT, &lda, PIV, &rank, &tol, WORK, &info)							na::102	cpstrf,zpstrf	(&UPLO, &n, AT, &lda, PIV, &rank, &tol, WORK, &info)							na::103	sgecon,dgecon	(&NORM, &n, AT, &lda, &anorm, &rcond, WORK, IWORK, &info)	#define SIZE	const char NORM =	int m = SIZE;int n = SIZE;int lda = SIZE	IPIV[SIZE], IWORK[SIZE], info	anorm, rcond, AT[SIZE*SIZE], WORK[4*SIZE]	na::	LANGE(&NORM, &m, &n, AT, &lda, WORK)104	cgecon,zgecon	(&NORM, &n, AT, &lda, &anorm, &rcond, WORK, RWORK, &info)	#define SIZE	const char NORM =	int m = SIZE;int n = SIZE;int lda = SIZE	IPIV[SIZE], info	anorm, rcond, AT[2*SIZE*SIZE], RWORK[2*SIZE]	A[SIZE][SIZE], WORK[2*SIZE]	LANGE(&NORM, &m, &n, AT, &lda, WORK)105	sgtcon,dgtcon	(&NORM, &n, DL, D, DU, DU2, IPIV, &anorm, &rcond, WORK, IWORK, &info)	#define SIZE	const char NORM =	int n = SIZE	IPIV[SIZE], IWORK[SIZE], info	anorm, rcond, DL[SIZE-1], D[SIZE], DU[SIZE-1], DU2[SIZE-2], WORK[2*SIZE]	na::	LANGT(&NORM, &n, DL, D, DU)106	cgtcon,zgtcon	(&NORM, &n, DL, D, DU, DU2, IPIV, &anorm, &rcond, WORK, &info)	#define SIZE	const char NORM =	int n = SIZE	IPIV[SIZE], info	anorm, rcond	DL[SIZE-1], D[SIZE], DU[SIZE-1], DU2[SIZE-2], WORK[2*SIZE]	LANGT(&NORM, &n, DL, D, DU)107	sptcon,dptcon	(&n, D, E, &anorm, &rcond, WORK, &info)	#define SIZE	const char NORM =	int n = SIZE	info	anorm, rcond, D[SIZE], E[SIZE-1], WORK[SIZE]	na::	LANST(&NORM, &n, D, E)108	cptcon,zptcon	(&n, D, E, &anorm, &rcond, RWORK, &info)	#define SIZE	const char NORM =	int n = SIZE	info	anorm, rcond, D[SIZE], RWORK[SIZE]	E[SIZE-1]	LANHT(&NORM, &n, D, E)109	sgbcon,dgbcon	(&NORM, &n, &kl, &ku, ABT, &ldab, IPIV, &anorm, &rcond, WORK, IWORK, &info)	#define SIZE;#define KL;#define KU	const char NORM =	int n = SIZE;int m = SIZE;int kl = KL;int ku = KU;int ldab = 2*KL+KU+1	IPIV[SIZE], IWORK[SIZE], info	anorm, rcond, AB_anorm[(KL+KU+1)][SIZE], ABT_anorm[(KL+KU+1)*SIZE], AB[(2*KL+KU+1)][SIZE], ABT[(2*KL+KU+1)*SIZE], WORK[3*SIZE]	na::	LANGB(&NORM, &n, &kl, &ku, ABT_anorm, &ldab, WORK)110	cgbcon,zgbcon	(&NORM, &n, &kl, &ku, ABT, &ldab, IPIV, &anorm, &rcond, WORK, RWORK, &info)	#define SIZE;#define KL;#define KU	const char NORM =	int n = SIZE;int m = SIZE;int kl = KL;int ku = KU;int ldab = 2*KL+KU+1	IPIV[SIZE], info	anorm, rcond, ABT_anorm[2*(KL+KU+1)*SIZE], ABT[2*(2*KL+KU+1)*SIZE], RWORK[SIZE]	A[SIZE][SIZE], AB[(2*KL+KU+1)][SIZE], AB_anorm[(KL+KU+1)][SIZE], WORK[2*SIZE]	LANGB(&NORM, &n, &kl, &ku, ABT_anorm, &ldab, WORK)111	spbcon,dpbcon	(&UPLO, &n, &kd, ABT, &ldab, &anorm, &rcond, WORK, IWORK, &info)	#define SIZE;#define KD	const char UPLO =;const char NORM =	int n = SIZE;int kd = KD;int ldab = KD+1	IWORK[SIZE], info	anorm, rcond, AB[(KD+1)][SIZE], ABT[(KD+1)*SIZE], WORK[3*SIZE]	na::	LANSB(&NORM, &UPLO, &n, &kd, ABT, &ldab, WORK)112	cpbcon,zpbcon	(&UPLO, &n, &kd, ABT, &ldab, &anorm, &rcond, WORK, RWORK, &info)	#define SIZE;#define KD	const char UPLO =;const char NORM =	int n = SIZE;int kd = KD;int ldab = KD+1	info	anorm, rcond, ABT[2*(KD+1)*SIZE], RWORK[SIZE]	A[SIZE][SIZE], AB[(KD+1)][SIZE], WORK[2*SIZE]	LANHB(&NORM, &UPLO, &n, &kd, ABT, &ldab, WORK)113	ssycon,dsycon	(&UPLO, &n, AT, &lda, IPIV, &anorm, &rcond, WORK, IWORK, &info)	#define SIZE	const char UPLO =;const char NORM =	int n = SIZE;int lda = SIZE;int lwork = SIZE*SIZE	IPIV[SIZE], IWORK[SIZE], info	anorm, rcond, AT[SIZE*SIZE], WORK[2*SIZE]	na::	LANSY(&NORM, &UPLO, &n, AT, &lda, WORK)114	csycon,zsycon	(&UPLO, &n, AT, &lda, IPIV, &anorm, &rcond, WORK, &info)	#define SIZE	const char UPLO =;const char NORM =	int n = SIZE;int lda = SIZE;int lwork = SIZE*SIZE	IPIV[SIZE], info	anorm, rcond, AT[2*SIZE*SIZE]	A[SIZE][SIZE], WORK[2*SIZE]	LANSY(&NORM, &UPLO, &n, AT, &lda, WORK)115	checon,zhecon	(&UPLO, &n, AT, &lda, IPIV, &anorm, &rcond, WORK, &info)	#define SIZE	const char UPLO =;const char NORM =	int n = SIZE;int lda = SIZE;int lwork = SIZE*SIZE	IPIV[SIZE], info	anorm, rcond, AT[2*SIZE*SIZE]	A[SIZE][SIZE], WORK[2*SIZE]	LANHE(&NORM, &UPLO, &n, AT, &lda, WORK)116	spocon,dpocon	(&UPLO, &n, AT, &lda, &anorm, &rcond, WORK, IWORK, &info)	#define SIZE	const char UPLO =;const char NORM =	int n = SIZE;int lda = SIZE	IWORK[SIZE], info	anorm, rcond, AT[SIZE*SIZE], WORK[3*SIZE]	na::	LANSY(&NORM, &UPLO, &n, AT, &lda, WORK)117	cpocon,zpocon	(&UPLO, &n, AT, &lda, &anorm, &rcond, WORK, RWORK, &info)	#define SIZE	const char UPLO =;const char NORM =	int n = SIZE;int lda = SIZE	info	anorm, rcond, AT[2*SIZE*SIZE], RWORK[SIZE]	A[SIZE][SIZE], WORK[2*SIZE]	LANHE(&NORM, &UPLO, &n, AT, &lda, WORK)118	sppcon,dppcon	(&UPLO, &n, AP, &anorm, &rcond, WORK, IWORK, &info)	#define SIZE	const char UPLO =;const char NORM =	int n = SIZE	IWORK[SIZE], info	anorm, rcond, AP[SIZE*(SIZE+1)/2], WORK[3*SIZE]	na::	LANSP(&NORM, &UPLO, &n, AP, WORK)119	cppcon,zppcon	(&UPLO, &n, AP, &anorm, &rcond, WORK, RWORK, &info)	#define SIZE	const char UPLO =;const char NORM =	int n = SIZE	info	anorm, rcond, AP[SIZE*(SIZE+1)], RWORK[SIZE]	A[SIZE][SIZE], WORK[2*SIZE]	LANHP(&NORM, &UPLO, &n, AP, WORK)120	sspcon,dspcon	(&UPLO, &n, AP, IPIV, &anorm, &rcond, WORK, IWORK, &info)	#define SIZE	const char UPLO =;const char NORM =	int n = SIZE	IPIV[SIZE], IWORK[SIZE], info	anorm, rcond, AP[SIZE*(SIZE+1)/2], WORK[2*SIZE]	na::	LANSP(&NORM, &UPLO, &n, AP, WORK)121	cspcon,zspcon	(&UPLO, &n, AP, IPIV, &anorm, &rcond, WORK, &info)	#define SIZE	const char UPLO =;const char NORM =	int n = SIZE	IPIV[SIZE], info	anorm, rcond, AP[SIZE*(SIZE+1)]	A[SIZE][SIZE], WORK[2*SIZE]	LANSP(&NORM, &UPLO, &n, AP, WORK)122	chpcon,zhpcon	(&UPLO, &n, AP, IPIV, &anorm, &rcond, WORK, &info)	#define SIZE	const char UPLO =;const char NORM =	int n = SIZE	IPIV[SIZE], info	anorm, rcond, AP[SIZE*(SIZE+1)]	A[SIZE][SIZE], WORK[2*SIZE]	LANHP(&NORM, &UPLO, &n, AP, WORK)123	strcon,dtrcon	(&NORM, &UPLO, &DIAG, &n, AT, &lda, &rcond, WORK, IWORK, &info)	#define SIZE	const char UPLO =;const char NORM =;const char DIAG =	int n = SIZE;int lda = SIZE	IWORK[SIZE], info	rcond, AT[SIZE*SIZE], WORK[3*SIZE]	na::	na::124	ctrcon,ztrcon	(&NORM, &UPLO, &DIAG, &n, AT, &lda, &rcond, WORK, RWORK, &info)	#define SIZE	const char UPLO =;const char NORM =;const char DIAG =	int n = SIZE;int lda = SIZE	info	rcond, AT[2*SIZE*SIZE], RWORK[SIZE]	A[SIZE][SIZE], WORK[2*SIZE]	na::125	stbcon,dtbcon	(&NORM, &UPLO, &DIAG, &n, &kd, ABT, &ldab, &rcond, WORK, IWORK, &info)	#define SIZE;#define KD	const char UPLO =;const char NORM =;const char DIAG =	int n = SIZE;int kd = KD;int ldab = KD+1	IWORK[SIZE], info	rcond, AB[(KD+1)][SIZE], ABT[(KD+1)*SIZE], WORK[3*SIZE]	na::	na::126	ctbcon,ztbcon	(&NORM, &UPLO, &DIAG, &n, &kd, ABT, &ldab, &rcond, WORK, RWORK, &info)	#define SIZE;#define KD	const char UPLO =;const char NORM =;const char DIAG =	int n = SIZE;int kd = KD;int ldab = KD+1	info	rcond, ABT[2*(KD+1)*SIZE], RWORK[SIZE]	A[SIZE][SIZE], AB[(KD+1)][SIZE], WORK[2*SIZE]	na::127	stpcon,dtpcon	(&NORM, &UPLO, &DIAG, &n, AP, &rcond, WORK, IWORK, &info)	#define SIZE	const char UPLO =;const char NORM =;const char DIAG =	int n = SIZE	IWORK[SIZE], info	rcond, AP[SIZE*(SIZE+1)/2], WORK[3*SIZE]	na::	na::128	ctpcon,ztpcon	(&NORM, &UPLO, &DIAG, &n, AP, &rcond, WORK, RWORK, &info)	#define SIZE	const char UPLO =;const char NORM =;const char DIAG =	int n = SIZE	info	rcond, AP[SIZE*(SIZE+1)], RWORK[SIZE]	A[SIZE][SIZE], WORK[2*SIZE]	na::129	sgerfs,dgerfs	(&TRANS, &n, &nrhs, AT, &lda, AFT, &ldaf, IPIV, BT, &ldb, XT, &ldx, FERR, BERR, WORK, IWORK, &info)	#define SIZE;#define ROW_B;#define COL_B	const char TRANS =	int m = SIZE;int n = SIZE;int lda = SIZE;int ldaf = SIZE;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	IPIV[SIZE], IWORK[SIZE], info	BT[ROW_B*COL_B], XT[ROW_B*COL_B], FERR[COL_B], BERR[COL_B], AT[SIZE*SIZE], AFT[SIZE*SIZE], WORK[3*SIZE]	na::	memcpy(AFT, AT, sizeof AFT)130	cgerfs,zgerfs	(&TRANS, &n, &nrhs, AT, &lda, AFT, &ldaf, IPIV, BT, &ldb, XT, &ldx, FERR, BERR, WORK, RWORK, &info)	#define SIZE;#define ROW_B;#define COL_B	const char TRANS =	int m = SIZE;int n = SIZE;int lda = SIZE;int ldaf = SIZE;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	IPIV[SIZE], info	BT[2*ROW_B*COL_B], XT[2*ROW_B*COL_B], FERR[COL_B], BERR[COL_B], AT[2*SIZE*SIZE], AFT[2*SIZE*SIZE], RWORK[SIZE]	B[ROW_B][COL_B], A[SIZE][SIZE], WORK[2*SIZE]	memcpy(AFT, AT, sizeof AFT)131	sgtrfs,dgtrfs	(&TRANS, &n, &nrhs, DL, D, DU, DLF, DF, DUF, DU2, IPIV, BT, &ldb, XT, &ldx, FERR, BERR, WORK, IWORK, &info)	#define SIZE;#define ROW_B;#define COL_B	const char TRANS =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	IPIV[SIZE], IWORK[SIZE], info	BT[ROW_B*COL_B], XT[ROW_B*COL_B], FERR[COL_B], BERR[COL_B], D[SIZE], DL[SIZE-1], DU[SIZE-1] ,DU2[SIZE-1], DF[SIZE], DLF[SIZE-1], DUF[SIZE-1], WORK[3*SIZE]	na::	memcpy(DF, D, sizeof DF);memcpy(DLF, DL, sizeof DLF);memcpy(DUF, DU, sizeof DUF)132	cgtrfs,zgtrfs	(&TRANS, &n, &nrhs, DL, D, DU, DLF, DF, DUF, DU2, IPIV, BT, &ldb, XT, &ldx, FERR, BERR, WORK, RWORK, &info)	#define SIZE;#define ROW_B;#define COL_B	const char TRANS =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	IPIV[SIZE], info	BT[2*ROW_B*COL_B], XT[2*ROW_B*COL_B], FERR[COL_B], BERR[COL_B], RWORK[SIZE]	B[ROW_B][COL_B], D[SIZE], DL[SIZE-1], DU[SIZE-1] ,DU2[SIZE-1], DF[SIZE], DLF[SIZE-1], DUF[SIZE-1], WORK[2*SIZE]	memcpy(DF, D, sizeof DF);memcpy(DLF, DL, sizeof DLF);memcpy(DUF, DU, sizeof DUF)133	sptrfs,dptrfs	(&n, &nrhs, D, E, DF, EF, BT, &ldb, XT, &ldx, FERR, BERR, WORK, &info)	#define SIZE;#define ROW_B;#define COL_B		int n = SIZE;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	info	BT[ROW_B*COL_B], XT[ROW_B*COL_B], FERR[COL_B], BERR[COL_B], D[SIZE], E[SIZE-1], DF[SIZE], EF[SIZE-1], WORK[2*SIZE]	na::	memcpy(DF, D, sizeof DF);memcpy(EF, E, sizeof EF)134	cptrfs,zptrfs	(&UPLO, &n, &nrhs, D, E, DF, EF, BT, &ldb, XT, &ldx, FERR, BERR, WORK, RWORK, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	info	BT[2*ROW_B*COL_B], XT[2*ROW_B*COL_B], FERR[COL_B], BERR[COL_B], D[SIZE], DF[SIZE], RWORK[SIZE]	B[ROW_B][COL_B], E[SIZE-1], EF[SIZE-1], WORK[SIZE]	memcpy(DF, D, sizeof DF);memcpy(EF, E, sizeof EF)135	sgbrfs,dgbrfs	(&TRANS, &n, &kl, &ku, &nrhs, ABT, &ldab, AFBT, &ldafb, IPIV, BT, &ldb, XT, &ldx, FERR, BERR, WORK, IWORK, &info)	#define SIZE;#define KL;#define KU;#define ROW_B;#define COL_B	const char TRANS =	int n = SIZE;int m = SIZE;int kl = KL;int ku = KU;int nrhs = COL_B;int ldab = KL+KU+1;int ldafb = 2*KL+KU+1;int ldb = ROW_B;int ldx = ROW_B	IPIV[SIZE], IWORK[SIZE], info	BT[ROW_B*COL_B], XT[ROW_B*COL_B], FERR[COL_B], BERR[COL_B], AB[(KL+KU+1)][SIZE], ABT[(KL+KU+1)*SIZE], AFB[(2*KL+KU+1)][SIZE], AFBT[(2*KL+KU+1)*SIZE], WORK[3*SIZE]	na::	na::136	cgbrfs,zgbrfs	(&TRANS, &n, &kl, &ku, &nrhs, ABT, &ldab, AFBT, &ldafb, IPIV, BT, &ldb, XT, &ldx, FERR, BERR, WORK, RWORK, &info)	#define SIZE;#define KL;#define KU;#define ROW_B;#define COL_B	const char TRANS =	int n = SIZE;int m = SIZE;int kl = KL;int ku = KU;int nrhs = COL_B;int ldab = KL+KU+1;int ldafb = 2*KL+KU+1;int ldb = ROW_B;int ldx = ROW_B	IPIV[SIZE], info	BT[2*ROW_B*COL_B], XT[2*ROW_B*COL_B], FERR[COL_B], BERR[COL_B], ABT[2*(KL+KU+1)*SIZE], AFBT[2*(2*KL+KU+1)*SIZE], RWORK[SIZE]	B[ROW_B][COL_B], A[SIZE][SIZE], AB[(KL+KU+1)][SIZE], AFB[(2*KL+KU+1)][SIZE], WORK[2*SIZE]	na::137	spbrfs,dpbrfs	(&UPLO, &n, &kd, &nrhs, ABT, &ldab, AFBT, &ldafb, BT, &ldb, XT, &ldx, FERR, BERR, WORK, IWORK, &info)	#define SIZE;#define KD;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int kd = KD;int ldab = KD+1;int ldafb = KD+1;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	IWORK[SIZE], info	BT[ROW_B*COL_B], XT[ROW_B*COL_B], FERR[COL_B], BERR[COL_B], AB[(KD+1)][SIZE], ABT[(KD+1)*SIZE], AFBT[(KD+1)*SIZE], WORK[3*SIZE]	na::	memcpy(AFBT, ABT, sizeof AFBT)138	cpbrfs,zpbrfs	(&UPLO, &n, &kd, &nrhs, ABT, &ldab, AFBT, &ldafb, BT, &ldb, XT, &ldx, FERR, BERR, WORK, RWORK, &info)	#define SIZE;#define KD;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int kd = KD;int ldab = KD+1;int ldafb = KD+1;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	info	BT[2*ROW_B*COL_B], XT[2*ROW_B*COL_B], FERR[COL_B], BERR[COL_B], ABT[2*(KD+1)*SIZE], AFBT[2*(KD+1)*SIZE], RWORK[SIZE]	B[ROW_B][COL_B], A[SIZE][SIZE], AB[(KD+1)][SIZE], WORK[2*SIZE]	memcpy(AFBT, ABT, sizeof AFBT)139	ssyrfs,dsyrfs	(&UPLO, &n, &nrhs, AT, &lda, AFT, &ldaf, IPIV, BT, &ldb, XT, &ldx, FERR, BERR, WORK, IWORK, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int lda = SIZE;int ldaf = SIZE;int ldb = ROW_B;int ldx = ROW_B;int lwork = SIZE*SIZE	IPIV[SIZE], IWORK[SIZE], info	BT[ROW_B*COL_B], XT[ROW_B*COL_B], FERR[COL_B], BERR[COL_B], AT[SIZE*SIZE], AFT[SIZE*SIZE], WORK[SIZE*SIZE]	na::	memcpy(AFT, AT, sizeof AFT)140	csyrfs,zsyrfs	(&UPLO, &n, &nrhs, AT, &lda, AFT, &ldaf, IPIV, BT, &ldb, XT, &ldx, FERR, BERR, WORK, RWORK, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int lda = SIZE;int ldaf = SIZE;int ldb = ROW_B;int ldx = ROW_B;int lwork = SIZE*SIZE	IPIV[SIZE], info	BT[2*ROW_B*COL_B], XT[2*ROW_B*COL_B], FERR[COL_B], BERR[COL_B], AT[2*SIZE*SIZE], AFT[2*SIZE*SIZE], RWORK[SIZE]	B[ROW_B][COL_B], A[SIZE][SIZE], WORK[SIZE*SIZE]	memcpy(AFT, AT, sizeof AFT)141	cherfs,zherfs	(&UPLO, &n, &nrhs, AT, &lda, AFT, &ldaf, IPIV, BT, &ldb, XT, &ldx, FERR, BERR, WORK, RWORK, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int lda = SIZE;int ldaf = SIZE;int ldb = ROW_B;int ldx = ROW_B;int lwork = SIZE*SIZE	IPIV[SIZE], info	BT[2*ROW_B*COL_B], XT[2*ROW_B*COL_B], FERR[COL_B], BERR[COL_B], AT[2*SIZE*SIZE], AFT[2*SIZE*SIZE], RWORK[SIZE]	B[ROW_B][COL_B], A[SIZE][SIZE], WORK[SIZE*SIZE]	memcpy(AFT, AT, sizeof AFT)142	sporfs,dporfs	(&UPLO, &n, &nrhs, AT, &lda, AFT, &ldaf, BT, &ldb, XT, &ldx, FERR, BERR, WORK, IWORK, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int lda = SIZE;int ldaf = SIZE;int ldb = ROW_B;int ldx = ROW_B	IPIV[SIZE], IWORK[SIZE], info	BT[ROW_B*COL_B], XT[ROW_B*COL_B], FERR[COL_B], BERR[COL_B], AT[SIZE*SIZE], AFT[SIZE*SIZE], WORK[3*SIZE]	na::	memcpy(AFT, AT, sizeof AFT)143	cporfs,zporfs	(&UPLO, &n, &nrhs, AT, &lda, AFT, &ldaf, BT, &ldb, XT, &ldx, FERR, BERR, WORK, RWORK, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int lda = SIZE;int ldaf = SIZE;int ldb = ROW_B;int ldx = ROW_B	info	BT[2*ROW_B*COL_B], XT[2*ROW_B*COL_B], FERR[COL_B], BERR[COL_B], AT[2*SIZE*SIZE], AFT[2*SIZE*SIZE], RWORK[SIZE]	B[ROW_B][COL_B], A[SIZE][SIZE], WORK[SIZE*SIZE]	memcpy(AFT, AT, sizeof AFT)144	spprfs,dpprfs	(&UPLO, &n, &nrhs, AP, AFP, BT, &ldb, XT, &ldx, FERR, BERR, WORK, IWORK, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	IWORK[SIZE], info	BT[ROW_B*COL_B], XT[ROW_B*COL_B], FERR[COL_B], BERR[COL_B], AP[SIZE*(SIZE+1)/2], AFP[SIZE*(SIZE+1)/2], WORK[3*SIZE]	na::	memcpy(AFP, AP, sizeof AFP)145	cpprfs,zpprfs	(&UPLO, &n, &nrhs, AP, AFP, BT, &ldb, XT, &ldx, FERR, BERR, WORK, RWORK, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	info	BT[2*ROW_B*COL_B], XT[2*ROW_B*COL_B], FERR[COL_B], BERR[COL_B], AP[SIZE*(SIZE+1)], AFP[SIZE*(SIZE+1)], RWORK[SIZE]	B[ROW_B][COL_B], A[SIZE][SIZE], WORK[2*SIZE]	memcpy(AFP, AP, sizeof AFP)146	ssprfs,dsprfs	(&UPLO, &n, &nrhs, AP, AFP, IPIV, BT, &ldb, XT, &ldx, FERR, BERR, WORK, IWORK, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	IPIV[SIZE], IWORK[SIZE], info	BT[ROW_B*COL_B], XT[ROW_B*COL_B], FERR[COL_B], BERR[COL_B], AP[SIZE*(SIZE+1)/2], AFP[SIZE*(SIZE+1)/2], WORK[3*SIZE]	na::	memcpy(AFP, AP, sizeof AFP)147	csprfs,zsprfs	(&UPLO, &n, &nrhs, AP, AFP, IPIV, BT, &ldb, XT, &ldx, FERR, BERR, WORK, RWORK, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	IPIV[SIZE], info	BT[2*ROW_B*COL_B], XT[2*ROW_B*COL_B], FERR[COL_B], BERR[COL_B], AP[SIZE*(SIZE+1)], AFP[SIZE*(SIZE+1)], RWORK[SIZE]	B[ROW_B][COL_B], A[SIZE][SIZE], WORK[2*SIZE]	memcpy(AFP, AP, sizeof AFP)148	chprfs,zhprfs	(&UPLO, &n, &nrhs, AP, AFP, IPIV, BT, &ldb, XT, &ldx, FERR, BERR, WORK, RWORK, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	IPIV[SIZE], info	BT[2*ROW_B*COL_B], XT[2*ROW_B*COL_B], FERR[COL_B], BERR[COL_B], AP[SIZE*(SIZE+1)], AFP[SIZE*(SIZE+1)], RWORK[SIZE]	B[ROW_B][COL_B], A[SIZE][SIZE], WORK[2*SIZE]	memcpy(AFP, AP, sizeof AFP)149	strrfs,dtrrfs	(&UPLO, &TRANS, &DIAG, &n, &nrhs, AT, &lda, BT, &ldb, XT, &ldx, FERR, BERR, WORK, IWORK, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =;const char TRANS =;const char DIAG =	int n = SIZE;int lda = SIZE;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	IWORK[SIZE], info	BT[ROW_B*COL_B], XT[ROW_B*COL_B], FERR[COL_B], BERR[COL_B], AT[SIZE*SIZE], WORK[3*SIZE]	na::	na::150	ctrrfs,ztrrfs	(&UPLO, &TRANS, &DIAG, &n, &nrhs, AT, &lda, BT, &ldb, XT, &ldx, FERR, BERR, WORK, RWORK, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =;const char TRANS =;const char DIAG =	int n = SIZE;int lda = SIZE;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	info	BT[2*ROW_B*COL_B], XT[2*ROW_B*COL_B], FERR[COL_B], BERR[COL_B], AT[2*SIZE*SIZE], RWORK[SIZE]	B[ROW_B][COL_B], A[SIZE][SIZE], WORK[2*SIZE]	na::151	stbrfs,dtbrfs	(&UPLO, &TRANS, &DIAG, &n, &kd, &nrhs, ABT, &ldab, BT, &ldb, XT, &ldx, FERR, BERR, WORK, IWORK, &info)	#define SIZE;#define KD;#define ROW_B;#define COL_B	const char UPLO =;const char TRANS =;const char DIAG =	int n = SIZE;int kd = KD;int ldab = KD+1;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	IWORK[SIZE], info	BT[ROW_B*COL_B], XT[ROW_B*COL_B], FERR[COL_B], BERR[COL_B], AB[KD+1][SIZE], ABT[(KD+1)*SIZE], WORK[3*SIZE]	na::	na::152	ctbrfs,ztbrfs	(&UPLO, &TRANS, &DIAG, &n, &kd, &nrhs, ABT, &ldab, BT, &ldb, XT, &ldx, FERR, BERR, WORK, RWORK, &info)	#define SIZE;#define KD;#define ROW_B;#define COL_B	const char UPLO =;const char TRANS =;const char DIAG =	int n = SIZE;int kd = KD;int ldab = KD+1;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	info	BT[2*ROW_B*COL_B], XT[2*ROW_B*COL_B], FERR[COL_B], BERR[COL_B], ABT[2*(KD+1)*SIZE], RWORK[SIZE]	B[ROW_B][COL_B], A[SIZE][SIZE], AB[KD+1][SIZE], WORK[2*SIZE]	na::153	stprfs,dtprfs	(&UPLO, &TRANS, &DIAG, &n, &nrhs, AP, BT, &ldb, XT, &ldx, FERR, BERR, WORK, IWORK, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =;const char TRANS =;const char DIAG =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	IWORK[SIZE], info	BT[ROW_B*COL_B], XT[ROW_B*COL_B], FERR[COL_B], BERR[COL_B], AP[SIZE*(SIZE+1)/2], WORK[3*SIZE]	na::	na::154	ctprfs,ztprfs	(&UPLO, &TRANS, &DIAG, &n, &nrhs, AP, BT, &ldb, XT, &ldx, FERR, BERR, WORK, RWORK, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =;const char TRANS =;const char DIAG =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	info	BT[2*ROW_B*COL_B], XT[2*ROW_B*COL_B], FERR[COL_B], BERR[COL_B], AP[SIZE*(SIZE+1)], RWORK[SIZE]	B[ROW_B][COL_B], A[SIZE][SIZE], WORK[2*SIZE]	na::155	sgerfsx,dgerfsx								156	cgerfsx,zgerfsx								157	sgbrfsx,dgbrfsx								158	cgbrfsx,zgbrfsx								159	ssyrfsx,dsyrfsx								160	csyrfsx,zsyrfsx								161	cherfsx,zherfsx								162	sporfsx,dporfsx								163	cporfsx,zporfsx								164	sgesvx,dgesvx	(&FACT, &TRANS, &n, &nrhs, AT, &lda, AFT, &ldaf, IPIV, &EQUED, R, C, BT, &ldb, XT, &ldx, &rcond, FERR, BERR, WORK, IWORK, &info)	#define SIZE;#define ROW_B;#define COL_B	const char TRANS =;const char FACT =;const char EQUED;	int n = SIZE;int lda = SIZE;int ldaf = SIZE;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	IPIV[SIZE], IWORK[SIZE], info	BT[ROW_B*COL_B], XT[ROW_B*COL_B], FERR[COL_B], BERR[COL_B], AT[SIZE*SIZE], AFT[SIZE*SIZE], R[SIZE], C[SIZE], rcond, WORK[4*SIZE]	na::	EQUED is an input argument only when FACT = 'F'. Otherwise, it is an output argument.;AF,R,C165	cgesvx,zgesvx	(&FACT, &TRANS, &n, &nrhs, AT, &lda, AFT, &ldaf, IPIV, &EQUED, R, C, BT, &ldb, XT, &ldx, &rcond, FERR, BERR, WORK, RWORK, &info)	#define SIZE;#define ROW_B;#define COL_B	const char TRANS =;const char FACT =;const char EQUED;	int n = SIZE;int lda = SIZE;int ldaf = SIZE;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	IPIV[SIZE], info	BT[2*ROW_B*COL_B], XT[2*ROW_B*COL_B], FERR[COL_B], BERR[COL_B], AT[2*SIZE*SIZE], AFT[2*SIZE*SIZE], R[SIZE], C[SIZE], rcond, RWORK[SIZE]	B[ROW_B][COL_B], A[SIZE][SIZE], WORK[2*SIZE]	EQUED is an input argument only when FACT = 'F'. Otherwise, it is an output argument.;AF,R,C166	sgtsvx,dgtsvx	(&FACT, &TRANS, &n, &nrhs, DL, D, DU, DLF, DF, DUF, DU2, IPIV, BT, &ldb, XT, &ldx, &rcond, FERR, BERR, WORK, IWORK, &info)	#define SIZE;#define ROW_B;#define COL_B	const char TRANS =;const char FACT =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	IPIV[SIZE], IWORK[SIZE], info	BT[ROW_B*COL_B], XT[ROW_B*COL_B], FERR[COL_B], BERR[COL_B], D[SIZE], DL[SIZE-1], DU[SIZE-1] ,DU2[SIZE-1], DF[SIZE], DLF[SIZE-1], DUF[SIZE-1], rcond, WORK[3*SIZE]	na::	na:: ;DLF,DF,DUF167	cgtsvx,zgtsvx	(&FACT, &TRANS, &n, &nrhs, DL, D, DU, DLF, DF, DUF, DU2, IPIV, BT, &ldb, XT, &ldx, &rcond, FERR, BERR, WORK, RWORK, &info)	#define SIZE;#define ROW_B;#define COL_B	const char TRANS =;const char FACT =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	IPIV[SIZE], info	BT[2*ROW_B*COL_B], XT[2*ROW_B*COL_B], FERR[COL_B], BERR[COL_B], rcond, RWORK[SIZE]	B[ROW_B][COL_B], A[SIZE][SIZE], D[SIZE], DL[SIZE-1], DU[SIZE-1] ,DU2[SIZE-1], DF[SIZE], DLF[SIZE-1], DUF[SIZE-1], WORK[2*SIZE]	na:: ;DLF,DF,DUF168	sptsvx,dptsvx	(&FACT, &n, &nrhs, D, E, DF, EF, BT, &ldb, XT, &ldx, &rcond, FERR, BERR, WORK, &info)	#define SIZE;#define ROW_B;#define COL_B	const char FACT =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	info	BT[ROW_B*COL_B], XT[ROW_B*COL_B], FERR[COL_B], BERR[COL_B], D[SIZE], E[SIZE-1], DF[SIZE], EF[SIZE-1], rcond, WORK[2*SIZE]	na::	na:: ;DF,EF169	cptsvx,zptsvx	(&FACT, &n, &nrhs, D, E, DF, EF, BT, &ldb, XT, &ldx, &rcond, FERR, BERR, WORK, RWORK, &info)	#define SIZE;#define ROW_B;#define COL_B	const char FACT =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	info	BT[2*ROW_B*COL_B], XT[2*ROW_B*COL_B], FERR[COL_B], BERR[COL_B], D[SIZE], DF[SIZE], rcond, RWORK[SIZE]	B[ROW_B][COL_B], E[SIZE-1], EF[SIZE-1], WORK[SIZE]	na:: ;DF,EF170	sgbsvx,dgbsvx	(&FACT, &TRANS, &n, &kl, &ku, &nrhs, ABT, &ldab, AFBT, &ldafb, IPIV, &EQUED, R, C, BT, &ldb, XT, &ldx, &rcond, FERR, BERR, WORK, IWORK, &info)	#define SIZE;#define KL;#define KU;#define ROW_B;#define COL_B	const char TRANS =;const char FACT =;const char EQUED;	int n = SIZE;int m = SIZE;int kl = KL;int ku = KU;int nrhs = COL_B;int ldab = KL+KU+1;int ldafb = 2*KL+KU+1;int ldb = ROW_B;int ldx = ROW_B	IPIV[SIZE], IWORK[SIZE], info	BT[ROW_B*COL_B], XT[ROW_B*COL_B], FERR[COL_B], BERR[COL_B], AB[(KL+KU+1)][SIZE], ABT[(KL+KU+1)*SIZE], AFB[(2*KL+KU+1)][SIZE], AFBT[(2*KL+KU+1)*SIZE], rcond, R[SIZE], C[SIZE], WORK[3*SIZE]	na::	EQUED is an input argument only when FACT = 'F'. Otherwise, it is an output argument.;AFB,R,C171	cgbsvx,zgbsvx	(&FACT, &TRANS, &n, &kl, &ku, &nrhs, ABT, &ldab, AFBT, &ldafb, IPIV, &EQUED, R, C, BT, &ldb, XT, &ldx, &rcond, FERR, BERR, WORK, RWORK, &info)	#define SIZE;#define KL;#define KU;#define ROW_B;#define COL_B	const char TRANS =;const char FACT =;const char EQUED;	int n = SIZE;int m = SIZE;int kl = KL;int ku = KU;int nrhs = COL_B;int ldab = KL+KU+1;int ldafb = 2*KL+KU+1;int ldb = ROW_B;int ldx = ROW_B	IPIV[SIZE], info	BT[2*ROW_B*COL_B], XT[2*ROW_B*COL_B], FERR[COL_B], BERR[COL_B], ABT[2*(KL+KU+1)*SIZE], AFBT[2*(2*KL+KU+1)*SIZE], rcond, R[SIZE], C[SIZE], RWORK[SIZE]	B[ROW_B][COL_B], A[SIZE][SIZE], AB[(KL+KU+1)][SIZE], AFB[(2*KL+KU+1)][SIZE], WORK[2*SIZE]	EQUED is an input argument only when FACT = 'F'. Otherwise, it is an output argument.;AFB,R,C172	spbsvx,dpbsvx	(&FACT, &UPLO, &n, &kd, &nrhs, ABT, &ldab, AFBT, &ldafb, &EQUED, S, BT, &ldb, XT, &ldx, &rcond, FERR, BERR, WORK, IWORK, &info)	#define SIZE;#define KD;#define ROW_B;#define COL_B	const char UPLO =;const char FACT =;const char EQUED;	int n = SIZE;int kd = KD;int ldab = KD+1;int ldafb = KD+1;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	IWORK[SIZE], info	BT[ROW_B*COL_B], XT[ROW_B*COL_B], FERR[COL_B], BERR[COL_B], AB[(KD+1)][SIZE], ABT[(KD+1)*SIZE], AFBT[(KD+1)*SIZE], rcond, S[SIZE], WORK[3*SIZE]	na::	EQUED is an input argument only when FACT = 'F'. Otherwise, it is an output argument.;AFB,S173	cpbsvx,zpbsvx	(&FACT, &UPLO, &n, &kd, &nrhs, ABT, &ldab, AFBT, &ldafb, &EQUED, S, BT, &ldb, XT, &ldx, &rcond, FERR, BERR, WORK, RWORK, &info)	#define SIZE;#define KD;#define ROW_B;#define COL_B	const char UPLO =;const char FACT =;const char EQUED;	int n = SIZE;int kd = KD;int ldab = KD+1;int ldafb = KD+1;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	info	BT[2*ROW_B*COL_B], XT[2*ROW_B*COL_B], FERR[COL_B], BERR[COL_B], ABT[2*(KD+1)*SIZE], AFBT[2*(KD+1)*SIZE], rcond, S[SIZE], RWORK[SIZE]	B[ROW_B][COL_B], A[SIZE][SIZE], AB[(KD+1)][SIZE], WORK[2*SIZE]	EQUED is an input argument only when FACT = 'F'. Otherwise, it is an output argument.;AFB,S174	ssysvx,dsysvx	(&FACT, &UPLO, &n, &nrhs, AT, &lda, AFT, &ldaf, IPIV, BT, &ldb, XT, &ldx, &rcond, FERR, BERR, WORK, &lwork, IWORK, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =;const char FACT =	int n = SIZE;int nrhs = COL_B;int lda = SIZE;int ldaf = SIZE;int ldb = ROW_B;int ldx = ROW_B;int lwork = SIZE*SIZE	IPIV[SIZE], IWORK[SIZE], info	BT[ROW_B*COL_B], XT[ROW_B*COL_B], FERR[COL_B], BERR[COL_B], AT[SIZE*SIZE], AFT[SIZE*SIZE], rcond, WORK[SIZE*SIZE]	na::	na:: ;AF175	csysvx,zsysvx,chesvx,zhesvx	(&FACT, &UPLO, &n, &nrhs, AT, &lda, AFT, &ldaf, IPIV, BT, &ldb, XT, &ldx, &rcond, FERR, BERR, WORK, &lwork, RWORK, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =;const char FACT =	int n = SIZE;int nrhs = COL_B;int lda = SIZE;int ldaf = SIZE;int ldb = ROW_B;int ldx = ROW_B;int lwork = SIZE*SIZE	IPIV[SIZE], info	BT[2*ROW_B*COL_B], XT[2*ROW_B*COL_B], FERR[COL_B], BERR[COL_B], AT[2*SIZE*SIZE], AFT[2*SIZE*SIZE], rcond, RWORK[SIZE]	B[ROW_B][COL_B], A[SIZE][SIZE], WORK[SIZE*SIZE]	na:: ;AF176	sposvx,dposvx	(&FACT, &UPLO, &n, &nrhs, AT, &lda, AFT, &ldaf, &EQUED, S, BT, &ldb, XT, &ldx, &rcond, FERR, BERR, WORK, IWORK, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =;const char FACT =;const char EQUED;	int n = SIZE;int nrhs = COL_B;int lda = SIZE;int ldaf = SIZE;int ldb = ROW_B;int ldx = ROW_B	IWORK[SIZE], info	BT[ROW_B*COL_B], XT[ROW_B*COL_B], FERR[COL_B], BERR[COL_B], AT[SIZE*SIZE], AFT[SIZE*SIZE], rcond, S[SIZE], WORK[3*SIZE]	na::	EQUED is an input argument only when FACT = 'F'. Otherwise, it is an output argument.;AF,S177	cposvx,zposvx	(&FACT, &UPLO, &n, &nrhs, AT, &lda, AFT, &ldaf, &EQUED, S, BT, &ldb, XT, &ldx, &rcond, FERR, BERR, WORK, RWORK, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =;const char FACT =;const char EQUED;	int n = SIZE;int nrhs = COL_B;int lda = SIZE;int ldaf = SIZE;int ldb = ROW_B;int ldx = ROW_B	info	BT[2*ROW_B*COL_B], XT[2*ROW_B*COL_B], FERR[COL_B], BERR[COL_B], AT[2*SIZE*SIZE], AFT[2*SIZE*SIZE], rcond, S[SIZE], RWORK[SIZE]	B[ROW_B][COL_B], A[SIZE][SIZE], WORK[2*SIZE]	EQUED is an input argument only when FACT = 'F'. Otherwise, it is an output argument.;AF,S178	sppsvx,dppsvx	(&FACT, &UPLO, &n, &nrhs, AP, AFP, &EQUED, S,BT, &ldb, XT, &ldx, &rcond, FERR, BERR, WORK, IWORK, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =;const char FACT =;const char EQUED;	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	IWORK[SIZE], info	BT[ROW_B*COL_B], XT[ROW_B*COL_B], FERR[COL_B], BERR[COL_B], AP[SIZE*(SIZE+1)/2], AFP[SIZE*(SIZE+1)/2], rcond, S[SIZE], WORK[3*SIZE]	na::	EQUED is an input argument only when FACT = 'F'. Otherwise, it is an output argument.;AFP,S179	cppsvx,zppsvx	(&FACT, &UPLO, &n, &nrhs, AP, AFP, &EQUED, S,BT, &ldb, XT, &ldx, &rcond, FERR, BERR, WORK, RWORK, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =;const char FACT =;const char EQUED;	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	info	BT[2*ROW_B*COL_B], XT[2*ROW_B*COL_B], FERR[COL_B], BERR[COL_B], AP[SIZE*(SIZE+1)], AFP[SIZE*(SIZE+1)], rcond, S[SIZE], RWORK[SIZE]	B[ROW_B][COL_B], A[SIZE][SIZE], WORK[2*SIZE]	EQUED is an input argument only when FACT = 'F'. Otherwise, it is an output argument.;AFP,S180	sspsvx,dspsvx	(&FACT, &UPLO, &n, &nrhs, AP, AFP, IPIV, BT, &ldb, XT, &ldx, &rcond, FERR, BERR, WORK, IWORK, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =;const char FACT =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	IPIV[SIZE], IWORK[SIZE], info	BT[ROW_B*COL_B], XT[ROW_B*COL_B], FERR[COL_B], BERR[COL_B], AP[SIZE*(SIZE+1)/2], AFP[SIZE*(SIZE+1)/2], rcond, WORK[3*SIZE]	na::	na:: ;AFP181	cspsvx,zspsvx,chpsvx,zhpsvx	(&FACT, &UPLO, &n, &nrhs, AP, AFP, IPIV, BT, &ldb, XT, &ldx, &rcond, FERR, BERR, WORK, RWORK, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =;const char FACT =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	IPIV[SIZE], info	BT[2*ROW_B*COL_B], XT[2*ROW_B*COL_B], FERR[COL_B], BERR[COL_B], AP[SIZE*(SIZE+1)], AFP[SIZE*(SIZE+1)], rcond, RWORK[SIZE]	B[ROW_B][COL_B], A[SIZE][SIZE], WORK[2*SIZE]	na:: ;AFP182	sgesvxx,dgesvxx								183	cgesvxx,zgesvxx								184	sgbsvxx,dgbsvxx								185	cgbsvxx,zgbsvxx								186	ssysvxx,dsysvxx								187	csysvxx,zsysvxx								188	chesvxx,zhesvxx								189	sposvxx,dposvxx								190	cposvxx,zposvxx								