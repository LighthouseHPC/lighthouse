1	sgesv,dgesv	(&n, &nrhs, AT, &lda, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	na::	int n = SIZE;int lda = SIZE;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	B[ROW_B][COL_B], AT[SIZE*SIZE], BT[ROW_B*COL_B]	na::	na::	na::2	sgetrs,dgetrs	(&TRANS, &n, &nrhs, AT, &lda, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char TRANS =	int m = SIZE;int n = SIZE;int lda = SIZE;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	B[ROW_B][COL_B], AT[SIZE*SIZE], BT[ROW_B*COL_B]	na::	na::	na::3	cgesv,zgesv	(&n, &nrhs, AT, &lda, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	na::	int n = SIZE;int lda = SIZE;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	AT[2*SIZE*SIZE], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], B[ROW_B][COL_B]	na::	na::4	cgetrs,zgetrs	(&TRANS, &n, &nrhs, AT, &lda, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char TRANS =	int m = SIZE;int n = SIZE;int lda = SIZE;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	AT[2*SIZE*SIZE], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], B[ROW_B][COL_B]	na::	na::5	sgtsv,dgtsv	(&n, &nrhs, DL, D, DU, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	na::	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	DU[SIZE-1], D[SIZE], DL[SIZE-1], B[ROW_B][COL_B], BT[ROW_B*COL_B]	na::	na::	na::6	sgttrs,dgttrs	(&TRANS, &n, &nrhs, DL, D, DU, DU2, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char TRANS =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	DL[SIZE-1], D[SIZE], DU[SIZE-1], DU2[SIZE-2], B[ROW_B][COL_B], BT[ROW_B*COL_B]	na::	na::	na::7	cgtsv,zgtsv	(&n, &nrhs, DL, D, DU, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	na::	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	BT[2*ROW_B*COL_B]	DU[SIZE-1], D[SIZE], DL[SIZE-1], B[ROW_B][COL_B]	na::	na::8	cgttrs,zgttrs	(&TRANS, &n, &nrhs, DL, D, DU, DU2, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char TRANS =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	BT[2*ROW_B*COL_B]	DL[SIZE-1], D[SIZE], DU[SIZE-1], DU2[SIZE-2], B[ROW_B][COL_B]	na::	na::9	sptsv,dptsv,spttrs,dpttrs	(&n, &nrhs, D, E, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	na::	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	D[SIZE], E[SIZE-1], B[ROW_B][COL_B], BT[ROW_B*COL_B]	na::	na::	na::10	cptsv,zptsv	(&n, &nrhs, D, E, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	na::	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	D[SIZE], BT[2*ROW_B*COL_B]	E[SIZE-1], B[ROW_B][COL_B]	na::	na::11	cpttrs,zpttrs	(&UPLO, &n, &nrhs, D, E, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	D[SIZE], BT[2*ROW_B*COL_B]	E[SIZE-1], B[ROW_B][COL_B]	na::	na::12	sgbsv,dgbsv	(&n, &kl, &ku, &nrhs, ABT, &ldab, IPIV, BT, &ldb, &info)	#define SIZE;#define KL;#define KU;#define ROW_B;#define COL_B	na::	int n = SIZE;int kl = KL;int ku = KU;int ldab = 2*KL+KU+1;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	AB[(2*KL+KU+1)][SIZE], B[ROW_B][COL_B], ABT[(2*KL+KU+1)*SIZE], BT[ROW_B*COL_B]	na::	na::	na::13	sgbtrs,dgbtrs	(&TRANS, &n, &kl, &ku, &nrhs, ABT, &ldab, IPIV, BT, &ldb, &info)	#define SIZE;#define KL;#define KU;#define ROW_B;#define COL_B	const char TRANS =	int n = SIZE;int m = SIZE;int kl = KL;int ku = KU;int ldab = 2*KL+KU+1;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	AB[(2*KL+KU+1)][SIZE], B[ROW_B][COL_B], ABT[(2*KL+KU+1)*SIZE], BT[ROW_B*COL_B]	na::	na::	na::14	cgbsv,zgbsv	(&n, &kl, &ku, &nrhs, ABT, &ldab, IPIV, BT, &ldb, &info)	#define SIZE;#define KL;#define KU;#define ROW_B;#define COL_B	na::	int n = SIZE;int kl = KL;int ku = KU;int ldab = 2*KL+KU+1;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	ABT[2*(2*KL+KU+1)*SIZE], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], AB[(2*KL+KU+1)][SIZE], B[ROW_B][COL_B]	na::	na::15	cgbtrs,zgbtrs	(&TRANS, &n, &kl, &ku, &nrhs, ABT, &ldab, IPIV, BT, &ldb, &info)	#define SIZE;#define KL;#define KU;#define ROW_B;#define COL_B	const char TRANS =	int n = SIZE;int m = SIZE;int kl = KL;int ku = KU;int ldab = 2*KL+KU+1;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	ABT[2*(2*KL+KU+1)*SIZE], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], AB[(2*KL+KU+1)][SIZE], B[ROW_B][COL_B]	na::	na::16	spbsv,dpbsv,spbtrs,dpbtrs	(&UPLO, &n, &kd, &nrhs, ABT, &ldab, BT, &ldb, &info)	#define SIZE;#define KD;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int kd = KD;int nrhs = COL_B;int ldab = KD+1;int ldb = ROW_B	info	AB[(KD+1)][SIZE], B[ROW_B][COL_B], ABT[(KD+1)*SIZE], BT[ROW_B*COL_B]	na::	na::	na::17	cpbsv,zpbsv,cpbtrs,zpbtrs	(&UPLO, &n, &kd, &nrhs, ABT, &ldab, BT, &ldb, &info)	#define SIZE;#define KD;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int kd = KD;int nrhs = COL_B;int ldab = KD+1;int ldb = ROW_B	info	ABT[2*(KD+1)*SIZE], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], AB[(KD+1)][SIZE], B[ROW_B][COL_B]	na::	na::18	ssysv,dsysv	(&UPLO, &n, &nrhs, AT, &lda, IPIV, BT, &ldb, WORK, &lwork, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int lda = SIZE;int ldb = ROW_B;int lwork = SIZE*SIZE	IPIV[SIZE], info	B[ROW_B][COL_B], AT[SIZE*SIZE], BT[ROW_B*COL_B], WORK[SIZE*SIZE]	na::	na::	na::19	ssytrs,dsytrs	(&UPLO, &n, &nrhs, AT, &lda, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int lda = SIZE;int ldb = ROW_B;int lwork = SIZE*SIZE	IPIV[SIZE], info	B[ROW_B][COL_B], AT[SIZE*SIZE], BT[ROW_B*COL_B], WORK[SIZE*SIZE]	na::	na::	na::20	csysv,zsysv,chesv,zhesv	(&UPLO, &n, &nrhs, AT, &lda, IPIV, BT, &ldb, WORK, &lwork, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int lda = SIZE;int ldb = ROW_B;int lwork = SIZE*SIZE	IPIV[SIZE], info	AT[2*SIZE*SIZE], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], B[ROW_B][COL_B], WORK[SIZE*SIZE]	na::	na::21	csytrs,zsytrs,chetrs,zhetrs	(&UPLO, &n, &nrhs, AT, &lda, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int lda = SIZE;int ldb = ROW_B;int lwork = SIZE*SIZE	IPIV[SIZE], info	AT[2*SIZE*SIZE], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], B[ROW_B][COL_B], WORK[SIZE*SIZE]	na::	na::22	sposv,dposv,spotrs,dpotrs	(&UPLO, &n, &nrhs, AT, &lda, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int lda = SIZE;int ldb = ROW_B	info	B[ROW_B][COL_B], AT[SIZE*SIZE], BT[ROW_B*COL_B]	na::	na::	na::23	cposv,zposv,cpotrs,zpotrs	(&UPLO, &n, &nrhs, AT, &lda, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int lda = SIZE;int ldb = ROW_B	info	AT[2*SIZE*SIZE], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], B[ROW_B][COL_B]	na::	na::24	sppsv,dppsv,spptrs,dpptrs	(&UPLO, &n, &nrhs, AP, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	AP[SIZE*(SIZE+1)/2], B[ROW_B][COL_B], BT[ROW_B*COL_B]	na::	na::	na::25	cppsv,zppsv,cpptrs,zpptrs	(&UPLO, &n, &nrhs, AP, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	AP[SIZE*(SIZE+1)], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], B[ROW_B][COL_B]	na::	na::26	sspsv,dspsv,ssptrs,dsptrs	(&UPLO, &n, &nrhs, AP, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	AP[SIZE*(SIZE+1)/2], B[ROW_B][COL_B], BT[ROW_B*COL_B]	na::	na::	na::27	cspsv,zspsv,csptrs,zsptrs,chpsv,zhpsv,chptrs,zhptrs	(&UPLO, &n, &nrhs, AP, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	AP[SIZE*(SIZE+1)], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], B[ROW_B][COL_B]	na::	na::28	dsgesv	(&n, &nrhs, AT, &lda, IPIV, BT, &ldb, XT, &ldx, WORK, SWORK, &iter, &info)	#define SIZE;#define ROW_B;#define COL_B	na::	int n = SIZE;int lda = SIZE;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	iter, IPIV[SIZE], info	B[ROW_B][COL_B], X[ROW_B][COL_B], WORK[ROW_B][COL_B], AT[SIZE*SIZE], BT[ROW_B*COL_B], XT[ROW_B*COL_B]	na::	SWORK[SIZE*(SIZE+COL_B)]	na::29	zcgesv	(&n, &nrhs, AT, &lda, IPIV, BT, &ldb, XT, &ldx, WORK, SWORK, RWORK, &iter, &info)	#define SIZE;#define ROW_B;#define COL_B	na::	int n = SIZE;int lda = SIZE;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	iter, IPIV[SIZE], info	AT[2*SIZE*SIZE], BT[2*ROW_B*COL_B], XT[2*ROW_B*COL_B], RWORK[ROW_B]	A[SIZE][SIZE], B[ROW_B][COL_B], X[ROW_B][COL_B], WORK[ROW_B*COL_B]	na::	SWORK[ROW_B*(SIZE+COL_B)]30	dsposv	(&UPLO, &n, &nrhs, AT, &lda, BT, &ldb, XT, &ldx, WORK, SWORK, &iter, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int lda = SIZE;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	iter, info	B[ROW_B][COL_B], X[ROW_B][COL_B], WORK[ROW_B][COL_B], AT[SIZE*SIZE], BT[ROW_B*COL_B], XT[ROW_B*COL_B]	na::	SWORK[SIZE*(SIZE+COL_B)]	na::31	zcposv	(&UPLO, &n, &nrhs, AT, &lda, BT, &ldb, XT, &ldx, WORK, SWORK, RWORK, &iter, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int lda = SIZE;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	iter, info	AT[2*SIZE*SIZE], BT[2*ROW_B*COL_B], XT[2*ROW_B*COL_B], RWORK[ROW_B]	A[SIZE][SIZE], B[ROW_B][COL_B], X[ROW_B][COL_B], WORK[ROW_B*COL_B]	na::	SWORK[ROW_B*(SIZE+COL_B)]32	strtrs,dtrtrs	(&UPLO, &TRANS, &DIAG, &n, &nrhs, AT, &lda, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =;const char TRANS =;const char DIAG =	int n = SIZE;int lda = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	A[SIZE][SIZE], AT[SIZE*SIZE], B[ROW_B][COL_B], BT[ROW_B*COL_B]	na::	na::	na::33	ctrtrs,ztrtrs	(&UPLO, &TRANS, &DIAG, &n, &nrhs, AT, &lda, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =;const char TRANS =;const char DIAG =	int n = SIZE;int lda = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	AT[2*SIZE*SIZE], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], B[ROW_B][COL_B]	na::	na::34	stbtrs,dtbtrs	(&UPLO, &TRANS, &DIAG, &n, &kd, &nrhs, ABT, &ldab, BT, &ldb, &info)	#define SIZE;#define KD;#define ROW_B;#define COL_B	const char UPLO =;const char TRANS =;const char DIAG =	int n = SIZE;int kd = KD;int ldab = KD+1;int nrhs = COL_B;int ldb = ROW_B	info	AB[KD+1][SIZE], ABT[(KD+1)*SIZE], B[ROW_B][COL_B], BT[ROW_B*COL_B]	na::	na::	na::35	ctbtrs,ztbtrs	(&UPLO, &TRANS, &DIAG, &n, &kd, &nrhs, ABT, &ldab, BT, &ldb, &info)	#define SIZE;#define KD;#define ROW_B;#define COL_B	const char UPLO =;const char TRANS =;const char DIAG =	int n = SIZE;int kd = KD;int nrhs = COL_B;int ldab = KD+1;int ldb = ROW_B	info	ABT[2*(KD+1)*SIZE], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], AB[(KD+1)][SIZE], B[ROW_B][COL_B]	na::	na::36	stptrs,dtptrs	(&UPLO, &TRANS, &DIAG, &n, &nrhs, AP, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =;const char TRANS =;const char DIAG =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	AP[SIZE*(SIZE+1)/2], B[ROW_B][COL_B], BT[ROW_B*COL_B]	na::	na::	na::37	ctptrs,ztptrs	(&UPLO, &TRANS, &DIAG, &n, &nrhs, AP, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =;const char TRANS =;const char DIAG =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	AP[SIZE*(SIZE+1)], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], B[ROW_B][COL_B]	na::	na::38	spftrs,dpftrs	(&TRANSR, &UPLO, &n, &nrhs, AT, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =;const char TRANSR =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	AT[SIZE*(SIZE+1)/2], B[ROW_B][COL_B], BT[ROW_B*COL_B]	na::	na::	na::39	cpftrs,zpftrs	(&TRANSR, &UPLO, &n, &nrhs, AT, BT, &ldb, &info)								40	sytrs2									41	hetrs2									42	sgeequ,dgeequ,sgeequb,dgeequb	(&m, &n, AT, &lda, R, C, &rowcnd, &colcnd, &amax, &info)	#define ROW_A;#define COL_A	na::	int m = ROW_A;int n = COL_A;int lda = ROW_A	info	amax, rowcnd, colcnd, R[ROW_A], C[COL_A], AT[ROW_A*COL_A]	na::	na::	na::43	cgeequ,zgeequ,cgeequb,zgeequb	(&m, &n, AT, &lda, R, C, &rowcnd, &colcnd, &amax, &info)	#define ROW_A;#define COL_A	na::	int m = ROW_A;int n = COL_A;int lda = ROW_A	info	amax, rowcnd, colcnd, R[ROW_A], C[COL_A], AT[2*ROW_A*COL_A]	A[ROW_A][COL_A]	na::	na::44	sgbequ,dgbequ,sgbequb,dgbequb	(&m, &n, &kl, &ku, ABT, &ldab, R, C, &rowcnd, &colcnd, &amax, &info)	#define ROW_A;#define COL_A;#define KL;#define KU	na::	int m = ROW_A;int n = COL_A;int kl = KL;int ku = KU;int ldab = KL+KU+1	info	amax, rowcnd, colcnd, R[ROW_A], C[COL_A], AB[(KL+KU+1)][COL_A], ABT[(KL+KU+1)*COL_A]	na::	na::	na::45	cgbequ,zgbequ,cgbequb,zgbequb	(&m, &n, &kl, &ku, ABT, &ldab, R, C, &rowcnd, &colcnd, &amax, &info)	#define ROW_A;#define COL_A;#define KL;#define KU	na::	int m = ROW_A;int n = COL_A;int kl = KL;int ku = KU;int ldab = KL+KU+1	info	amax, rowcnd, colcnd, R[ROW_A], C[COL_A], ABT[2*(KL+KU+1)*COL_A]	A[ROW_A][COL_A], AB[(KL+KU+1)][COL_A]	na::	na::46	spbequ,dpbequ	(&UPLO, &n, &kd, ABT, &ldab, S, &scond, &amax, &info)	#define SIZE;#define KD	const char UPLO =	int n = SIZE;int kd = KD;int ldab = KD+1	info	amax, scond, S[SIZE], AB[(KD+1)][SIZE], ABT[(KD+1)*SIZE]	na::	na::	na::47	cpbequ,zpbequ	(&UPLO, &n, &kd, ABT, &ldab, S, &scond, &amax, &info)	#define SIZE;#define KD	const char UPLO =	int n = SIZE;int kd = KD;int ldab = KD+1	info	amax, scond, S[SIZE], ABT[2*(KD+1)*SIZE]	A[SIZE][SIZE], AB[(KD+1)][SIZE]	na::	na::48	spoequ,dpoequ,spoequb,dpoequb	(&n, AT, &lda, S, &scond, &amax, &info)	#define SIZE	const char UPLO =	int n = SIZE;int lda = SIZE	info	amax, scond, S[SIZE], A[SIZE][SIZE], AT[SIZE*SIZE]	na::	na::	na::49	cpoequ,zpoequ,cpoequb,zpoequb	(&n, AT, &lda, S, &scond, &amax, &info)	#define SIZE	const char UPLO =	int n = SIZE;int lda = SIZE	info	amax, scond, S[SIZE], AT[2*SIZE*SIZE]	A[SIZE][SIZE]	na::	na::50	sppequ,dppequ	(&UPLO, &n, AP, S, &scond, &amax, &info)	#define SIZE	const char UPLO =	int n = SIZE	info	amax, scond, S[SIZE], AP[SIZE*(SIZE+1)/2]	na::	na::	na::51	cppequ,zppequ	(&UPLO, &n, AP, S, &scond, &amax, &info)	#define SIZE	const char UPLO =	int n = SIZE	info	amax, scond, S[SIZE], AP[2*SIZE*(SIZE+1)/2]	A[SIZE][SIZE]	na::	na::52	ssyequb,dsyequb	(&UPLO, &n, AT, &lda, S, &scond, &amax, WORK, &info)	#define SIZE	const char UPLO =	int n = SIZE;int lda = SIZE	info	amax, scond, S[SIZE], A[SIZE][SIZE], AT[SIZE*SIZE], WORK[3*SIZE]	na::	na::	na::53	csyequb,zsyequb,cheequb,zheequb	(&UPLO, &n, AT, &lda, S, &scond, &amax, WORK, &info)	#define SIZE	const char UPLO =	int n = SIZE;int lda = SIZE	info	amax, scond, S[SIZE], AT[2*SIZE*SIZE]	A[SIZE][SIZE], WORK[3*SIZE]	na::	na::54	sgetri,dgetri	(&n, AT, &lda, IPIV, WORK, &lwork, &info)	#define SIZE	na::	int m = SIZE;int n = SIZE;int lda = SIZE;int lwork = SIZE*SIZE	IPIV[SIZE], info	AT[SIZE*SIZE], WORK[SIZE*SIZE]	na::	na::	na::55	cgetri,zgetri	(&n, AT, &lda, IPIV, WORK, &lwork, &info)	#define SIZE	na::	int m = SIZE;int n = SIZE;int lda = SIZE;int lwork = SIZE*SIZE	IPIV[SIZE], info	AT[2*SIZE*SIZE]	A[SIZE][SIZE], WORK[SIZE*SIZE]	na::	na::56	ssytri,dsytri	(&UPLO, &n, AT, &lda, IPIV, WORK, &info)	#define SIZE	const char UPLO =	int n = SIZE;int lda = SIZE;int lwork = SIZE*SIZE	IPIV[SIZE], info	AT[SIZE*SIZE], WORK[SIZE*SIZE]	na::	na::	na::57	csytri,zsytri,chetri,zhetri	(&UPLO, &n, AT, &lda, IPIV, WORK, &info)	#define SIZE	const char UPLO =	int n = SIZE;int lda = SIZE;int lwork = SIZE*SIZE	IPIV[SIZE], info	AT[2*SIZE*SIZE]	A[SIZE][SIZE], WORK[SIZE*SIZE]	na::	na::58	spotri,dpotri	(&UPLO, &n, AT, &lda, &info)	#define SIZE	const char UPLO =	int n = SIZE;int lda = SIZE	info	AT[SIZE*SIZE]	na::	na::	na::59	cpotri,zpotri	(&UPLO, &n, AT, &lda, &info)	#define SIZE	const char UPLO =	int n = SIZE;int lda = SIZE	info	AT[2*SIZE*SIZE]	A[SIZE][SIZE]	na::	na::60	spptri,dpptri	(&UPLO, &n, AP, &info)	#define SIZE	const char UPLO =	int n = SIZE	info	AP[SIZE*(SIZE+1)/2]	na::	na::	na::61	cpptri,zpptri	(&UPLO, &n, AP, &info)	#define SIZE	const char UPLO =	int n = SIZE	info	AP[SIZE*(SIZE+1)]	A[SIZE][SIZE]	na::	na::62	ssptri,dsptri	(&UPLO, &n, AP, IPIV, WORK, &info)	#define SIZE	const char UPLO =	int n = SIZE	IPIV[SIZE], info	AP[SIZE*(SIZE+1)/2], WORK[SIZE]	na::	na::	na::63	csptri,zsptri,chptri,zhptri	(&UPLO, &n, AP, IPIV, WORK, &info)	#define SIZE	const char UPLO =	int n = SIZE	IPIV[SIZE], info	AP[SIZE*(SIZE+1)]	A[SIZE][SIZE], WORK[SIZE]	na::	na::64	strtri,dtrtri	(&UPLO, &DIAG, &n, AT, &lda, &info)	#define SIZE	const char UPLO =;const char DIAG =	int n = SIZE;int lda = SIZE	info	AT[SIZE*SIZE]	na::	na::	na::65	ctrtri,ztrtri	(&UPLO, &DIAG, &n, AT, &lda, &info)	#define SIZE	const char UPLO =;const char DIAG =	int n = SIZE;int lda = SIZE	info	AT[2*SIZE*SIZE]	A[SIZE][SIZE]	na::	na::66	stptri,dtptri	(&UPLO, &DIAG, &n, AP, &info)	#define SIZE	const char UPLO =;const char DIAG =	int n = SIZE	info	AP[SIZE*(SIZE+1)/2]	na::	na::	na::67	ctptri,ztptri	(&UPLO, &DIAG, &n, AP, &info)	#define SIZE	const char UPLO =;const char DIAG =	int n = SIZE	info	AP[SIZE*(SIZE+1)]	A[SIZE][SIZE]	na::	na::68	spftri,dpftri									69	cpftri,zpftri									70	stftri,dtftri									71	ctftri,ztftri									72	sytri2									73	hetri2									74	sytri2x									75	hetri2x									76	trti2									77	sgetrf,dgetrf	(&m, &n, AT, &lda, IPIV, &info)	#define ROW_A;#define COL_A	na::	int m = ROW_A;int n = COL_A;int lda = ROW_A	IPIV[min(ROW_A,COL_A)], info	AT[ROW_A*COL_A]	na::	na::	na::78	cgetrf,zgetrf	(&m, &n, AT, &lda, IPIV, &info)								79	sgttrf,dgttrf	(&n, DL, D, DU, DU2, IPIV, &info)	#define SIZE	na::	int n = SIZE	IPIV[SIZE], info	DL[SIZE-1], D[SIZE], DU[SIZE-1], DU2[SIZE-2]	na::	na::	na::80	cgttrf,zgttrf	(&n, DL, D, DU, DU2, IPIV, &info)								81	spttrf,dpttrf	(&n, D, E, &info)	#define SIZE	na::	int n = SIZE	info	D[SIZE], E[SIZE-1]	na::	na::	na::82	cpttrf,zpttrf	(&n, D, E, &info)								83	sgbtrf,dgbtrf	(&m, &n, &kl, &ku, ABT, &ldab, IPIV, &info)								84	cgbtrf,zgbtrf	(&m, &n, &kl, &ku, ABT, &ldab, IPIV, &info)								85	spbtrf,dpbtrf	(&UPLO, &n, &kd, ABT, &ldab, &info)								86	cpbtrf,zpbtrf	(&UPLO, &n, &kd, ABT, &ldab, &info)								87	ssytrf,dsytrf	(&UPLO, &n, AT, &lda, IPIV, WORK, &lwork, &info)								88	csytrf,zsytrf	(&UPLO, &n, AT, &lda, IPIV, WORK, &lwork, &info)								89	chetrf,zhetrf	(&UPLO, &n, AT, &lda, IPIV, WORK, &lwork, &info)								90	spotrf,dpotrf	(&UPLO, &n, AT, &lda, &info)								91	cpotrf,zpotrf	(&UPLO, &n, AT, &lda, &info)								92	spptrf,dpptrf	(&UPLO, &n, AP, &info)								93	cpptrf,zpptrf	(&UPLO, &n, AP, &info)								94	ssptrf,dsptrf	(&UPLO, &n, AP, IPIV, &info)								95	csptrf,zsptrf	(&UPLO, &n, AP, IPIV, &info)								96	chptrf,zhptrf	(&UPLO, &n, AP, IPIV, &info)								97	strtrf,dtrtrf,ctrtrf,ztrtrf	(This is only a dummy routine!) na:: 									98	stbtrf,dtbtrf,ctbtrf,ztbtrf	(This is only a dummy routine!) na:: 									99	stptrf,dtptrf,ctptrf,ztptrf	(This is only a dummy routine!) na:: 									100	stftrf,dtftrf,ctftrf,ztftrf	(This is only a dummy routine!) na:: 									101	spftrf,dpftrf	(&TRANSR, &UPLO, &n, AT, &info)									102	cpftrf,zpftrf	(&TRANSR, &UPLO, &n, AT, &info)									103	spstrf,dpstrf	(&UPLO, &n, AT, &lda, PIV, &rank, &tol, WORK, &info)									104	cpstrf,zpstrf	(&UPLO, &n, AT, &lda, PIV, &rank, &tol, WORK, &info)									105	sgecon,dgecon	(&NORM, &n, AT, &lda, &anorm, &rcond, WORK, IWORK, &info)	#define SIZE	const char NORM =	int m = SIZE;int n = SIZE;int lda = SIZE	IPIV[SIZE], IWORK[SIZE], info	anorm, rcond, AT[SIZE*SIZE], WORK[4*SIZE]	na::	na::	na::	LANGE_(&NORM, &m, &n, AT, &lda, WORK)106	cgecon,zgecon	(&NORM, &n, AT, &lda, &anorm, &rcond, WORK, RWORK, &info)	#define SIZE	const char NORM =	int m = SIZE;int n = SIZE;int lda = SIZE	IPIV[SIZE], info	anorm, rcond, AT[2*SIZE*SIZE], RWORK[2*SIZE]	A[SIZE][SIZE], WORK[2*SIZE]	na::	na::	LANGE_(&NORM, &m, &n, AT, &lda, WORK)107	sgtcon,dgtcon	(&NORM, &n, DL, D, DU, DU2, IPIV, &anorm, &rcond, WORK, IWORK, &info)	#define SIZE	const char NORM =	int n = SIZE	IPIV[SIZE], IWORK[SIZE], info	anorm, rcond, DL[SIZE-1], D[SIZE], DU[SIZE-1], DU2[SIZE-2], WORK[2*SIZE]	na::	na::	na::	LANGT_(&NORM, &n, DL, D, DU)108	cgtcon,zgtcon	(&NORM, &n, DL, D, DU, DU2, IPIV, &anorm, &rcond, WORK, &info)	#define SIZE	const char NORM =	int n = SIZE	IPIV[SIZE], info	anorm, rcond	DL[SIZE-1], D[SIZE], DU[SIZE-1], DU2[SIZE-2], WORK[2*SIZE]	na::	na::	LANGT_(&NORM, &n, DL, D, DU)109	sptcon,dptcon	(&n, D, E, &anorm, &rcond, WORK, &info)	#define SIZE	const char NORM =	int n = SIZE	info	anorm, rcond, D[SIZE], E[SIZE-1], WORK[SIZE]	na::	na::	na::	LANST_(&NORM, &n, D, E)110	cptcon,zptcon	(&n, D, E, &anorm, &rcond, RWORK, &info)	#define SIZE	const char NORM =	int n = SIZE	info	anorm, rcond, D[SIZE], RWORK[SIZE]	E[SIZE-1]	na::	na::	LANHT_(&NORM, &n, D, E)111	sgbcon,dgbcon	(&NORM, &n, &kl, &ku, ABT, &ldab, IPIV, &anorm, &rcond, WORK, IWORK, &info)	#define SIZE;#define KL;#define KU	const char NORM =	int n = SIZE;int m = SIZE;int kl = KL;int ku = KU;int ldab = 2*KL+KU+1	IPIV[SIZE], IWORK[SIZE], info	anorm, rcond, AB_anorm[(KL+KU+1)][SIZE], ABT_anorm[(KL+KU+1)*SIZE], AB[(2*KL+KU+1)][SIZE], ABT[(2*KL+KU+1)*SIZE], WORK[3*SIZE]	na::	na::	na::	LANGB_(&NORM, &n, &kl, &ku, ABT_anorm, &ldab, WORK)112	cgbcon,zgbcon	(&NORM, &n, &kl, &ku, ABT, &ldab, IPIV, &anorm, &rcond, WORK, RWORK, &info)	#define SIZE;#define KL;#define KU	const char NORM =	int n = SIZE;int m = SIZE;int kl = KL;int ku = KU;int ldab = 2*KL+KU+1	IPIV[SIZE], info	anorm, rcond, ABT_anorm[2*(KL+KU+1)*SIZE], ABT[2*(2*KL+KU+1)*SIZE], RWORK[SIZE]	A[SIZE][SIZE], AB[(2*KL+KU+1)][SIZE], AB_anorm[(KL+KU+1)][SIZE], WORK[2*SIZE]	na::	na::	LANGB_(&NORM, &n, &kl, &ku, ABT_anorm, &ldab, WORK)113	spbcon,dpbcon	(&UPLO, &n, &kd, ABT, &ldab, &anorm, &rcond, WORK, IWORK, &info)	#define SIZE;#define KD	const char UPLO =;const char NORM	int n = SIZE;int kd = KD;int ldab = KD+1	IWORK[SIZE], info	anorm, rcond, AB[(KD+1)][SIZE], ABT[(KD+1)*SIZE], WORK[3*SIZE]	na::	na::	na::	LANSB_(&NORM, &UPLO, &n, &kd, ABT, &ldab, WORK)114	cpbcon,zpbcon	(&UPLO, &n, &kd, ABT, &ldab, &anorm, &rcond, WORK, RWORK, &info)	#define SIZE;#define KD	const char UPLO =;const char NORM	int n = SIZE;int kd = KD;int ldab = KD+1	info	anorm, rcond, ABT[2*(KD+1)*SIZE], RWORK[SIZE]	A[SIZE][SIZE], AB[(KD+1)][SIZE], WORK[2*SIZE]	na::	na::	LANHB_(&NORM, &UPLO, &n, &kd, ABT, &ldab, WORK)115	ssycon,dsycon	(&UPLO, &n, AT, &lda, IPIV, &anorm, &rcond, WORK, IWORK, &info)	#define SIZE	const char UPLO =;const char NORM	int n = SIZE;int lda = SIZE;int lwork = SIZE*SIZE	IPIV[SIZE], IWORK[SIZE], info	anorm, rcond, AT[SIZE*SIZE], WORK[2*SIZE]	na::	na::	na::	LANSY_(&NORM, &UPLO, &n, AT, &lda, WORK)116	csycon,zsycon	(&UPLO, &n, AT, &lda, IPIV, &anorm, &rcond, WORK, &info)	#define SIZE	const char UPLO =;const char NORM	int n = SIZE;int lda = SIZE;int lwork = SIZE*SIZE	IPIV[SIZE], info	anorm, rcond, AT[2*SIZE*SIZE]	A[SIZE][SIZE], WORK[2*SIZE]	na::	na::	LANSY_(&NORM, &UPLO, &n, AT, &lda, WORK)117	checon,zhecon	(&UPLO, &n, AT, &lda, IPIV, &anorm, &rcond, WORK, &info)	#define SIZE	const char UPLO =;const char NORM	int n = SIZE;int lda = SIZE;int lwork = SIZE*SIZE	IPIV[SIZE], info	anorm, rcond, AT[2*SIZE*SIZE]	A[SIZE][SIZE], WORK[2*SIZE]	na::	na::	LANHE_(&NORM, &UPLO, &n, AT, &lda, WORK)118	spocon,dpocon	(&UPLO, &n, AT, &lda, &anorm, &rcond, WORK, IWORK, &info)	#define SIZE	const char UPLO =;const char NORM	int n = SIZE;int lda = SIZE	IWORK[SIZE], info	anorm, rcond, AT[SIZE*SIZE], WORK[3*SIZE]	na::	na::	na::	LANSY_(&NORM, &UPLO, &n, AT, &lda, WORK)119	cpocon,zpocon	(&UPLO, &n, AT, &lda, &anorm, &rcond, WORK, RWORK, &info)	#define SIZE	const char UPLO =;const char NORM	int n = SIZE;int lda = SIZE	info	anorm, rcond, AT[2*SIZE*SIZE], RWORK[SIZE]	A[SIZE][SIZE], WORK[2*SIZE]	na::	na::	LANHE_(&NORM, &UPLO, &n, AT, &lda, WORK)120	sppcon,dppcon	(&UPLO, &n, AP, &anorm, &rcond, WORK, IWORK, &info)	#define SIZE	const char UPLO =;const char NORM	int n = SIZE	IWORK[SIZE], info	anorm, rcond, AP[SIZE*(SIZE+1)/2], WORK[3*SIZE]	na::	na::	na::	LANSP_(&NORM, &UPLO, &n, AP, WORK)121	cppcon,zppcon	(&UPLO, &n, AP, &anorm, &rcond, WORK, RWORK, &info)	#define SIZE	const char UPLO =;const char NORM	int n = SIZE	info	anorm, rcond, AP[SIZE*(SIZE+1)], RWORK[SIZE]	A[SIZE][SIZE], WORK[2*SIZE]	na::	na::	LANHP_(&NORM, &UPLO, &n, AP, WORK)122	sspcon,dspcon	(&UPLO, &n, AP, IPIV, &anorm, &rcond, WORK, IWORK, &info)	#define SIZE	const char UPLO =;const char NORM	int n = SIZE	IPIV[SIZE], IWORK[SIZE], info	anorm, rcond, AP[SIZE*(SIZE+1)/2], WORK[2*SIZE]	na::	na::	na::	LANSP_(&NORM, &UPLO, &n, AP, WORK)123	cspcon,zspcon	(&UPLO, &n, AP, IPIV, &anorm, &rcond, WORK, &info)	#define SIZE	const char UPLO =;const char NORM	int n = SIZE	IPIV[SIZE], info	anorm, rcond, AP[SIZE*(SIZE+1)]	A[SIZE][SIZE], WORK[2*SIZE]	na::	na::	LANSP_(&NORM, &UPLO, &n, AP, WORK)124	chpcon,zhpcon	(&UPLO, &n, AP, IPIV, &anorm, &rcond, WORK, &info)	#define SIZE	const char UPLO =;const char NORM	int n = SIZE	IPIV[SIZE], info	anorm, rcond, AP[SIZE*(SIZE+1)]	A[SIZE][SIZE], WORK[2*SIZE]	na::	na::	LANHP_(&NORM, &UPLO, &n, AP, WORK)125	strcon,dtrcon	(&NORM, &UPLO, &DIAG, &n, AT, &lda, &rcond, WORK, IWORK, &info)	#define SIZE	const char UPLO =;const char NORM;const char DIAG =	int n = SIZE;int lda = SIZE	IWORK[SIZE], info	rcond, AT[SIZE*SIZE], WORK[3*SIZE]	na::	na::	na::	na::126	ctrcon,ztrcon	(&NORM, &UPLO, &DIAG, &n, AT, &lda, &rcond, WORK, RWORK, &info)	#define SIZE	const char UPLO =;const char NORM;const char DIAG =	int n = SIZE;int lda = SIZE	info	AT[2*SIZE*SIZE], RWORK[SIZE]	A[SIZE][SIZE], WORK[2*SIZE]	na::	na::	na::127	stbcon,dtbcon	(&NORM, &UPLO, &DIAG, &n, &kd, ABT, &ldab, &rcond, WORK, IWORK, &info)	#define SIZE;#define KD	const char UPLO =;const char NORM;const char DIAG =	int n = SIZE;int kd = KD;int ldab = KD+1	IWORK[SIZE], info	rcond, AB[(KD+1)][SIZE], ABT[(KD+1)*SIZE], WORK[3*SIZE]	na::	na::	na::	na::128	ctbcon,ztbcon	(&NORM, &UPLO, &DIAG, &n, &kd, ABT, &ldab, &rcond, WORK, RWORK, &info)	#define SIZE;#define KD	const char UPLO =;const char NORM;const char DIAG =	int n = SIZE;int kd = KD;int ldab = KD+1	info	rcond, ABT[2*(KD+1)*SIZE], RWORK[SIZE]	A[SIZE][SIZE], AB[(KD+1)][SIZE], WORK[2*SIZE]	na::	na::	na::129	stpcon,dtpcon	(&NORM, &UPLO, &DIAG, &n, AP, &rcond, WORK, IWORK, &info)	#define SIZE	const char UPLO =;const char NORM;const char DIAG =	int n = SIZE	IWORK[SIZE], info	rcond, AP[SIZE*(SIZE+1)/2], WORK[3*SIZE]	na::	na::	na::	na::130	ctpcon,ztpcon	(&NORM, &UPLO, &DIAG, &n, AP, &rcond, WORK, RWORK, &info)	#define SIZE	const char UPLO =;const char NORM;const char DIAG =	int n = SIZE	info	rcond, AP[SIZE*(SIZE+1)], RWORK[SIZE]	A[SIZE][SIZE], WORK[2*SIZE]	na::	na::	na::