1	sgesv,dgesv	(&n, &nrhs, AT, &lda, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	na::	int n = SIZE;int lda = SIZE;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	B[ROW_B][COL_B], AT[SIZE*SIZE], BT[ROW_B*COL_B]	na::	na::	na::2	sgetrs,dgetrs	(&TRANS, &n, &nrhs, AT, &lda, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char TRANS =	int m = SIZE;int n = SIZE;int lda = SIZE;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	B[ROW_B][COL_B], AT[SIZE*SIZE], BT[ROW_B*COL_B]	na::	na::	na::3	cgesv,zgesv	(&n, &nrhs, AT, &lda, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	na::	int n = SIZE;int lda = SIZE;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	AT[2*SIZE*SIZE], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], B[ROW_B][COL_B]	na::	na::4	cgetrs,zgetrs	(&TRANS, &n, &nrhs, AT, &lda, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char TRANS =	int m = SIZE;int n = SIZE;int lda = SIZE;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	AT[2*SIZE*SIZE], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], B[ROW_B][COL_B]	na::	na::5	sgtsv,dgtsv	(&n, &nrhs, DL, D, DU, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	na::	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	DU[SIZE-1], D[SIZE], DL[SIZE-1], B[ROW_B][COL_B], BT[ROW_B*COL_B]	na::	na::	na::6	sgttrs,dgttrs	(&TRANS, &n, &nrhs, DL, D, DU, DU2, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char TRANS =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	DL[SIZE-1], D[SIZE], DU[SIZE-1], DU2[SIZE-2], B[ROW_B][COL_B], BT[ROW_B*COL_B]	na::	na::	na::7	cgtsv,zgtsv	(&n, &nrhs, DL, D, DU, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	na::	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	BT[2*ROW_B*COL_B]	DU[SIZE-1], D[SIZE], DL[SIZE-1], B[ROW_B][COL_B]	na::	na::8	cgttrs,zgttrs	(&TRANS, &n, &nrhs, DL, D, DU, DU2, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char TRANS =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	BT[2*ROW_B*COL_B]	DL[SIZE-1], D[SIZE], DU[SIZE-1], DU2[SIZE-2], B[ROW_B][COL_B]	na::	na::9	sptsv,dptsv,spttrs,dpttrs	(&n, &nrhs, D, E, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	na::	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	D[SIZE], E[SIZE-1], B[ROW_B][COL_B], BT[ROW_B*COL_B]	na::	na::	na::10	cptsv,zptsv	(&n, &nrhs, D, E, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	na::	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	D[SIZE], BT[2*ROW_B*COL_B]	E[SIZE-1], B[ROW_B][COL_B]	na::	na::11	cpttrs,zpttrs	(&UPLO, &n, &nrhs, D, E, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	D[SIZE], BT[2*ROW_B*COL_B]	E[SIZE-1], B[ROW_B][COL_B]	na::	na::12	sgbsv,dgbsv	(&n, &kl, &ku, &nrhs, ABT, &ldab, IPIV, BT, &ldb, &info)	#define SIZE;#define KL;#define KU;#define ROW_B;#define COL_B	na::	int n = SIZE;int kl = KL;int ku = KU;int ldab = 2*KL+KU+1;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	AB[(2*KL+KU+1)][SIZE], B[ROW_B][COL_B], ABT[(2*KL+KU+1)*SIZE], BT[ROW_B*COL_B]	na::	na::	na::13	sgbtrs,dgbtrs	(&TRANS, &n, &kl, &ku, &nrhs, ABT, &ldab, IPIV, BT, &ldb, &info)	#define SIZE;#define KL;#define KU;#define ROW_B;#define COL_B	const char TRANS =	int n = SIZE;int m = SIZE;int kl = KL;int ku = KU;int ldab = 2*KL+KU+1;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	AB[(2*KL+KU+1)][SIZE], B[ROW_B][COL_B], ABT[(2*KL+KU+1)*SIZE], BT[ROW_B*COL_B]	na::	na::	na::14	cgbsv,zgbsv	(&n, &kl, &ku, &nrhs, ABT, &ldab, IPIV, BT, &ldb, &info)	#define SIZE;#define KL;#define KU;#define ROW_B;#define COL_B	na::	int n = SIZE;int kl = KL;int ku = KU;int ldab = 2*KL+KU+1;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	ABT[2*(2*KL+KU+1)*SIZE], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], AB[(2*KL+KU+1)][SIZE], B[ROW_B][COL_B]	na::	na::15	cgbtrs,zgbtrs	(&TRANS, &n, &kl, &ku, &nrhs, ABT, &ldab, IPIV, BT, &ldb, &info)	#define SIZE;#define KL;#define KU;#define ROW_B;#define COL_B	const char TRANS =	int n = SIZE;int m = SIZE;int kl = KL;int ku = KU;int ldab = 2*KL+KU+1;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	ABT[2*(2*KL+KU+1)*SIZE], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], AB[(2*KL+KU+1)][SIZE], B[ROW_B][COL_B]	na::	na::16	spbsv,dpbsv,spbtrs,dpbtrs	(&UPLO, &n, &kd, &nrhs, ABT, &ldab, BT, &ldb, &info)	#define SIZE;#define KD;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int kd = KD;int nrhs = COL_B;int ldab = KD+1;int ldb = ROW_B	info	AB[(KD+1)][SIZE], B[ROW_B][COL_B], ABT[(KD+1)*SIZE], BT[ROW_B*COL_B]	na::	na::	na::17	cpbsv,zpbsv,cpbtrs,zpbtrs	(&UPLO, &n, &kd, &nrhs, ABT, &ldab, BT, &ldb, &info)	#define SIZE;#define KD;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int kd = KD;int nrhs = COL_B;int ldab = KD+1;int ldb = ROW_B	info	ABT[2*(KD+1)*SIZE], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], AB[(KD+1)][SIZE], B[ROW_B][COL_B]	na::	na::18	ssysv,dsysv	(&UPLO, &n, &nrhs, AT, &lda, IPIV, BT, &ldb, WORK, &lwork, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int lda = SIZE;int ldb = ROW_B;int lwork = SIZE*SIZE	IPIV[SIZE], info	B[ROW_B][COL_B], AT[SIZE*SIZE], BT[ROW_B*COL_B], WORK[SIZE*SIZE]	na::	na::	na::19	ssytrs,dsytrs	(&UPLO, &n, &nrhs, AT, &lda, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int lda = SIZE;int ldb = ROW_B;int lwork = SIZE*SIZE	IPIV[SIZE], info	B[ROW_B][COL_B], AT[SIZE*SIZE], BT[ROW_B*COL_B], WORK[SIZE*SIZE]	na::	na::	na::20	csysv,zsysv	(&UPLO, &n, &nrhs, AT, &lda, IPIV, BT, &ldb, WORK, &lwork, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int lda = SIZE;int ldb = ROW_B;int lwork = SIZE*SIZE	IPIV[SIZE], info	AT[2*SIZE*SIZE], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], B[ROW_B][COL_B], WORK[SIZE*SIZE]	na::	na::21	csytrs,zsytrs	(&UPLO, &n, &nrhs, AT, &lda, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int lda = SIZE;int ldb = ROW_B;int lwork = SIZE*SIZE	IPIV[SIZE], info	AT[2*SIZE*SIZE], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], B[ROW_B][COL_B], WORK[SIZE*SIZE]	na::	na::22	chesv,zhesv	(&UPLO, &n, &nrhs, AT, &lda, IPIV, BT, &ldb, WORK, &lwork, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int lda = SIZE;int ldb = ROW_B;int lwork = SIZE*SIZE	IPIV[SIZE], info	AT[2*SIZE*SIZE], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], B[ROW_B][COL_B], WORK[SIZE*SIZE]	na::	na::23	chetrs,zhetrs	(&UPLO, &n, &nrhs, AT, &lda, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int lda = SIZE;int ldb = ROW_B;int lwork = SIZE*SIZE	IPIV[SIZE], info	AT[2*SIZE*SIZE], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], B[ROW_B][COL_B], WORK[SIZE*SIZE]	na::	na::24	sposv,dposv,spotrs,dpotrs	(&UPLO, &n, &nrhs, AT, &lda, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int lda = SIZE;int ldb = ROW_B	info	B[ROW_B][COL_B], AT[SIZE*SIZE], BT[ROW_B*COL_B]	na::	na::	na::25	cposv,zposv,cpotrs,zpotrs	(&UPLO, &n, &nrhs, AT, &lda, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int lda = SIZE;int ldb = ROW_B	info	AT[2*SIZE*SIZE], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], B[ROW_B][COL_B]	na::	na::26	sppsv,dppsv,spptrs,dpptrs	(&UPLO, &n, &nrhs, AP, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	AP[SIZE*(SIZE+1)/2], B[ROW_B][COL_B], BT[ROW_B*COL_B]	na::	na::	na::27	cppsv,zppsv,cpptrs,zpptrs	(&UPLO, &n, &nrhs, AP, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	AP[2*SIZE*(SIZE+1)/2], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], B[ROW_B][COL_B]	na::	na::28	sspsv,dspsv,ssptrs,dsptrs	(&UPLO, &n, &nrhs, AP, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	AP[SIZE*(SIZE+1)/2], B[ROW_B][COL_B], BT[ROW_B*COL_B]	na::	na::	na::29	cspsv,zspsv,csptrs,zsptrs	(&UPLO, &n, &nrhs, AP, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	AP[2*SIZE*(SIZE+1)/2], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], B[ROW_B][COL_B]	na::	na::30	chpsv,zhpsv,chptrs,zhptrs	(&UPLO, &n, &nrhs, AP, IPIV, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	IPIV[SIZE], info	AP[2*SIZE*(SIZE+1)/2], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], B[ROW_B][COL_B]	na::	na::31	dsgesv	(&n, &nrhs, AT, &lda, IPIV, BT, &ldb, XT, &ldx, WORK, SWORK, &iter, &info)	#define SIZE;#define ROW_B;#define COL_B	na::	int n = SIZE;int lda = SIZE;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	iter, IPIV[SIZE], info	B[ROW_B][COL_B], X[ROW_B][COL_B], WORK[ROW_B][COL_B], AT[SIZE*SIZE], BT[ROW_B*COL_B], XT[ROW_B*COL_B]	na::	SWORK[SIZE*(SIZE+COL_B)]	na::32	zcgesv	(&n, &nrhs, AT, &lda, IPIV, BT, &ldb, XT, &ldx, WORK, SWORK, RWORK, &iter, &info)	#define SIZE;#define ROW_B;#define COL_B	na::	int n = SIZE;int lda = SIZE;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	iter, IPIV[SIZE], info	AT[2*SIZE*SIZE], BT[2*ROW_B*COL_B], XT[2*ROW_B*COL_B], RWORK[ROW_B]	A[SIZE][SIZE], B[ROW_B][COL_B], X[ROW_B][COL_B], WORK[ROW_B*COL_B]	na::	SWORK[ROW_B*(SIZE+COL_B)]33	dsposv	(&UPLO, &n, &nrhs, AT, &lda, BT, &ldb, XT, &ldx, WORK, SWORK, &iter, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int lda = SIZE;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	iter, info	B[ROW_B][COL_B], X[ROW_B][COL_B], WORK[ROW_B][COL_B], AT[SIZE*SIZE], BT[ROW_B*COL_B], XT[ROW_B*COL_B]	na::	SWORK[SIZE*(SIZE+COL_B)]	na::34	zcposv	(&UPLO, &n, &nrhs, AT, &lda, BT, &ldb, XT, &ldx, WORK, SWORK, RWORK, &iter, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =	int n = SIZE;int lda = SIZE;int nrhs = COL_B;int ldb = ROW_B;int ldx = ROW_B	iter, info	AT[2*SIZE*SIZE], BT[2*ROW_B*COL_B], XT[2*ROW_B*COL_B], RWORK[ROW_B]	A[SIZE][SIZE], B[ROW_B][COL_B], X[ROW_B][COL_B], WORK[ROW_B*COL_B]	na::	SWORK[ROW_B*(SIZE+COL_B)]35	strtrs,dtrtrs	(&UPLO, &TRANS, &DIAG, &n, &nrhs, AT, &lda, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =;const char TRANS =;const char DIAG =	int n = SIZE;int lda = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	A[SIZE][SIZE], AT[SIZE*SIZE], B[ROW_B][COL_B], BT[ROW_B*COL_B]	na::	na::	na::36	ctrtrs,ztrtrs	(&UPLO, &TRANS, &DIAG, &n, &nrhs, AT, &lda, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =;const char TRANS =;const char DIAG =	int n = SIZE;int lda = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	AT[2*SIZE*SIZE], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], B[ROW_B][COL_B]	na::	na::37	stbtrs,dtbtrs	(&UPLO, &TRANS, &DIAG, &n, &kd, &nrhs, ABT, &ldab, BT, &ldb, &info)	#define SIZE;#define KD;#define ROW_B;#define COL_B	const char UPLO =;const char TRANS =;const char DIAG =	int n = SIZE;int kd = KD;int ldab = KD+1;int nrhs = COL_B;int ldb = ROW_B	info	AB[KD+1][SIZE], ABT[(KD+1)*SIZE], B[ROW_B][COL_B], BT[ROW_B*COL_B]	na::	na::	na::38	ctbtrs,ztbtrs	(&UPLO, &TRANS, &DIAG, &n, &kd, &nrhs, ABT, &ldab, BT, &ldb, &info)	#define SIZE;#define KD;#define ROW_B;#define COL_B	const char UPLO =;const char TRANS =;const char DIAG =	int n = SIZE;int kd = KD;int nrhs = COL_B;int ldab = KD+1;int ldb = ROW_B	info	ABT[2*(KD+1)*SIZE], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], AB[(KD+1)][SIZE], B[ROW_B][COL_B]	na::	na::39	stptrs,dtptrs	(&UPLO, &TRANS, &DIAG, &n, &nrhs, AP, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =;const char TRANS =;const char DIAG =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	AP[SIZE*(SIZE+1)/2], B[ROW_B][COL_B], BT[ROW_B*COL_B]	na::	na::	na::40	ctptrs,ztptrs	(&UPLO, &TRANS, &DIAG, &n, &nrhs, AP, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =;const char TRANS =;const char DIAG =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	AP[2*SIZE*(SIZE+1)/2], BT[2*ROW_B*COL_B]	A[SIZE][SIZE], B[ROW_B][COL_B]	na::	na::41	spftrs,dpftrs	(&TRANSR, &UPLO, &n, &nrhs, AT, BT, &ldb, &info)	#define SIZE;#define ROW_B;#define COL_B	const char UPLO =;const char TRANSR =	int n = SIZE;int nrhs = COL_B;int ldb = ROW_B	info	AT[SIZE*(SIZE+1)/2], B[ROW_B][COL_B], BT[ROW_B*COL_B]	na::	na::	na::42	cpftrs,zpftrs	(&TRANSR, &UPLO, &n, &nrhs, AT, BT, &ldb, &info)								43	sytrs2									44	hetrs2									45	sgeequ,dgeequ,sgeequb,dgeequb	(&m, &n, AT, &lda, R, C, &rowcnd, &colcnd, &amax, &info)	#define ROW_A;#define COL_A	na::	int m = ROW_A;int n = COL_A;int lda = ROW_A	info	amax, rowcnd, colcnd, R[ROW_A], C[COL_A], AT[ROW_A*COL_A]	na::	na::	na::46	cgeequ,zgeequ,cgeequb,zgeequb	(&m, &n, AT, &lda, R, C, &rowcnd, &colcnd, &amax, &info)	#define ROW_A;#define COL_A	na::	int m = ROW_A;int n = COL_A;int lda = ROW_A	info	amax, rowcnd, colcnd, R[ROW_A], C[COL_A], AT[2*ROW_A*COL_A]	A[ROW_A][COL_A]	na::	na::47	sgbequ,dgbequ,sgbequb,dgbequb	(&m, &n, &kl, &ku, ABT, &ldab, R, C, &rowcnd, &colcnd, &amax, &info)	#define ROW_A;#define COL_A;#define KL;#define KU	na::	int m = ROW_A;int n = COL_A;int kl = KL;int ku = KU;int ldab = KL+KU+1	info	amax, rowcnd, colcnd, R[ROW_A], C[COL_A], AB[(KL+KU+1)][COL_A], ABT[(KL+KU+1)*COL_A]	na::	na::	na::48	cgbequ,zgbequ,cgbequb,zgbequb	(&m, &n, &kl, &ku, ABT, &ldab, R, C, &rowcnd, &colcnd, &amax, &info)	#define ROW_A;#define COL_A;#define KL;#define KU	na::	int m = ROW_A;int n = COL_A;int kl = KL;int ku = KU;int ldab = KL+KU+1	info	amax, rowcnd, colcnd, R[ROW_A], C[COL_A], ABT[2*(KL+KU+1)*COL_A]	A[ROW_A][COL_A], AB[(KL+KU+1)][COL_A]	na::	na::49	spbequ,dpbequ	(&UPLO, &n, &kd, ABT, &ldab, S, &scond, &amax, &info)	#define SIZE;#define KD	const char UPLO =	int n = SIZE;int kd = KD;int ldab = KD+1	info	amax, scond, S[SIZE], AB[(KD+1)][SIZE], ABT[(KD+1)*SIZE]	na::	na::	na::50	cpbequ,zpbequ	(&UPLO, &n, &kd, ABT, &ldab, S, &scond, &amax, &info)	#define SIZE;#define KD	const char UPLO =	int n = SIZE;int kd = KD;int ldab = KD+1	info	amax, scond, S[SIZE], ABT[2*(KD+1)*SIZE]	A[SIZE][SIZE], AB[(KD+1)][SIZE]	na::	na::51	spoequ,dpoequ,spoequb,dpoequb	(&n, AT, &lda, S, &scond, &amax, &info)	#define SIZE	const char UPLO =	int n = SIZE;int lda = SIZE	info	amax, scond, S[SIZE], A[SIZE][SIZE], AT[SIZE*SIZE]	na::	na::	na::52	cpoequ,zpoequ,cpoequb,zpoequb	(&n, AT, &lda, S, &scond, &amax, &info)	#define SIZE	const char UPLO =	int n = SIZE;int lda = SIZE	info	amax, scond, S[SIZE], AT[2*SIZE*SIZE]	A[SIZE][SIZE]	na::	na::53	sppequ,dppequ	(&UPLO, &n, AP, S, &scond, &amax, &info)	#define SIZE	const char UPLO =	int n = SIZE	info	amax, scond, S[SIZE], AP[SIZE*(SIZE+1)/2]	na::	na::	na::54	cppequ,zppequ	(&UPLO, &n, AP, S, &scond, &amax, &info)	#define SIZE	const char UPLO =	int n = SIZE	info	amax, scond, S[SIZE], AP[2*SIZE*(SIZE+1)/2]	A[SIZE][SIZE]	na::	na::55	ssyequb,dsyequb	(&UPLO, &n, AT, &lda, S, &scond, &amax, WORK, &info)	#define SIZE	const char UPLO =	int n = SIZE;int lda = SIZE	info	amax, scond, S[SIZE], A[SIZE][SIZE], AT[SIZE*SIZE], WORK[3*SIZE]	na::	na::	na::56	csyequb,zsyequb,cheequb,zheequb	(&UPLO, &n, AT, &lda, S, &scond, &amax, WORK, &info)	#define SIZE	const char UPLO =	int n = SIZE;int lda = SIZE	info	amax, scond, S[SIZE], AT[2*SIZE*SIZE]	A[SIZE][SIZE], WORK[3*SIZE]	na::	na::57	sgetri,dgetri	(&n, AT, &lda, IPIV, WORK, &lwork, &info)	#define SIZE	na::	int m = SIZE;int n = SIZE;int lda = SIZE;int lwork = SIZE*SIZE	IPIV[SIZE], info	AT[SIZE*SIZE], WORK[SIZE*SIZE]	na::	na::	na::58	cgetri,zgetri									59	ssytri,dsytri	(&UPLO, &n, AT, &lda, IPIV, WORK, &info)	#define SIZE	const char UPLO =	int n = SIZE;int lda = SIZE;int lwork = SIZE*SIZE	IPIV[SIZE], info	AT[SIZE*SIZE], WORK[SIZE*SIZE]	na::	na::	na::60	csytri,zsytri									61	chetri,zhetri									62	spotri,dpotri	(&UPLO, &n, AT, &lda, &info)	#define SIZE	const char UPLO =	int n = SIZE;int lda = SIZE	info	AT[SIZE*SIZE]	na::	na::	na::63	cpotri,zpotri									64	spptri,dpptri	(&UPLO, &n, AP, &info)	#define SIZE	const char UPLO =	int n = SIZE	info	AP[SIZE*(SIZE+1)/2]	na::	na::	na::65	cpptri,zpptri									66	ssptri,dsptri	(&UPLO, &n, AP, IPIV, WORK, &info)	#define SIZE	const char UPLO =	int n = SIZE	IPIV[SIZE], info	AP[SIZE*(SIZE+1)/2], WORK[SIZE]	na::	na::	na::67	csptri,zsptri									68	chptri,zhptri									69	strtri,dtrtri	(&UPLO, &DIAG, &n, AT, &lda, &info)	#define SIZE	const char UPLO =;const char DIAG =	int n = SIZE;int lda = SIZE	info	AT[SIZE*SIZE]	na::	na::	na::70	ctrtri,ztrtri									71	stptri,dtptri	(&UPLO, &DIAG, &n, AP, &info)	#define SIZE	const char UPLO =;const char DIAG =	int n = SIZE	info	AP[SIZE*(SIZE+1)/2]	na::	na::	na::72	ctptri,ztptri									73	spftri,dpftri									74	cpftri,zpftri									75	stftri,dtftri									76	ctftri,ztftri									77	sytri2									78	hetri2									79	sytri2x									80	hetri2x									81	trti2									82	sgetrf,dgetrf	(&m, &n, AT, &lda, IPIV, &info)	#define ROW_A;#define COL_A	na::	int m = ROW_A;int n = COL_A;int lda = ROW_A	IPIV[min(ROW_A,COL_A)], info	AT[ROW_A*COL_A]	na::	na::	na::83	cgetrf,zgetrf	(&m, &n, AT, &lda, IPIV, &info)								84	sgttrf,dgttrf	(&n, DL, D, DU, DU2, IPIV, &info)	#define SIZE	na::	int n = SIZE	IPIV[SIZE], info	DL[SIZE-1], D[SIZE], DU[SIZE-1], DU2[SIZE-2]	na::	na::	na::85	cgttrf,zgttrf	(&n, DL, D, DU, DU2, IPIV, &info)								86	spttrf,dpttrf	(&n, D, E, &info)	#define SIZE	na::	int n = SIZE	info	D[SIZE], E[SIZE-1]	na::	na::	na::87	cpttrf,zpttrf	(&n, D, E, &info)								88	sgbtrf,dgbtrf	(&m, &n, &kl, &ku, ABT, &ldab, IPIV, &info)								89	cgbtrf,zgbtrf	(&m, &n, &kl, &ku, ABT, &ldab, IPIV, &info)								90	spbtrf,dpbtrf	(&UPLO, &n, &kd, ABT, &ldab, &info)								91	cpbtrf,zpbtrf	(&UPLO, &n, &kd, ABT, &ldab, &info)								92	ssytrf,dsytrf	(&UPLO, &n, AT, &lda, IPIV, WORK, &lwork, &info)								93	csytrf,zsytrf	(&UPLO, &n, AT, &lda, IPIV, WORK, &lwork, &info)								94	chetrf,zhetrf	(&UPLO, &n, AT, &lda, IPIV, WORK, &lwork, &info)								95	spotrf,dpotrf	(&UPLO, &n, AT, &lda, &info)								96	cpotrf,zpotrf	(&UPLO, &n, AT, &lda, &info)								97	spptrf,dpptrf	(&UPLO, &n, AP, &info)98	cpptrf,zpptrf	(&UPLO, &n, AP, &info)99	ssptrf,dsptrf	(&UPLO, &n, AP, IPIV, &info)100	csptrf,zsptrf	(&UPLO, &n, AP, IPIV, &info)101	chptrf,zhptrf	(&UPLO, &n, AP, IPIV, &info)102	strtrf,dtrtrf,ctrtrf,ztrtrf	(This is only a dummy routine!) na:: 103	stbtrf,dtbtrf,ctbtrf,ztbtrf	(This is only a dummy routine!) na:: 104	stptrf,dtptrf,ctptrf,ztptrf	(This is only a dummy routine!) na:: 105	stftrf,dtftrf,ctftrf,ztftrf	(This is only a dummy routine!) na:: 106	spftrf,dpftrf	(&TRANSR, &UPLO, &n, AT, &info)107	cpftrf,zpftrf	(&TRANSR, &UPLO, &n, AT, &info)108	spstrf,dpstrf	(&UPLO, &n, AT, &lda, PIV, &rank, &tol, WORK, &info)109	cpstrf,zpstrf	(&UPLO, &n, AT, &lda, PIV, &rank, &tol, WORK, &info)