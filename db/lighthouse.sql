-- MySQL dump 10.13  Distrib 5.1.49, for debian-linux-gnu (x86_64)
--
-- Host: localhost    Database: shark
-- ------------------------------------------------------
-- Server version	5.1.49-1ubuntu8.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `Combine_linearequation_only`
--

DROP TABLE IF EXISTS `Combine_linearequation_only`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Combine_linearequation_only` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `thePrecision` varchar(20) NOT NULL,
  `routineName` varchar(30) NOT NULL,
  `matrixType` varchar(20) NOT NULL,
  `storageType` varchar(20) NOT NULL,
  `url` varchar(200) NOT NULL,
  `notes` varchar(225) NOT NULL,
  `info_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `Combine_linearequation_only_369e409c` (`info_id`)
) ENGINE=MyISAM AUTO_INCREMENT=105 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Combine_linearequation_only`
--

LOCK TABLES `Combine_linearequation_only` WRITE;
/*!40000 ALTER TABLE `Combine_linearequation_only` DISABLE KEYS */;
INSERT INTO `Combine_linearequation_only` VALUES (1,'s','gesv','general','full','http://www.netlib.org/lapack/single/sgesv.f','driver simple, solve A*X = B only',1),(2,'d','gesv','general','full','http://www.netlib.org/lapack/double/dgesv.f','driver simple, solve A*X = B only',2),(3,'c','gesv','general','full','http://www.netlib.org/lapack/complex/cgesv.f','driver simple, solve A*X = B only',3),(4,'z','gesv','general','full','http://www.netlib.org/lapack/complex16/zgesv.f','driver simple, solve A*X = B only',4),(5,'s','gbsv','general','band','http://www.netlib.org/lapack/single/sgbsv.f','driver simple, solve A*X = B only',5),(6,'d','gbsv','general','band','http://www.netlib.org/lapack/double/dgbsv.f','driver simple, solve A*X = B only',6),(7,'c','gbsv','general','band','http://www.netlib.org/lapack/complex/cgbsv.f','driver simple, solve A*X = B only',7),(8,'z','gbsv','general','band','http://www.netlib.org/lapack/complex16/zgbsv.f','driver simple, solve A*X = B only',8),(9,'s','gtsv','general','tridiagonal','http://www.netlib.org/lapack/single/sgtsv.f','driver simple, solve A*X = B only',9),(10,'d','gtsv','general','tridiagonal','http://www.netlib.org/lapack/double/dgtsv.f','driver simple, solve A*X = B only',10),(11,'c','gtsv','general','tridiagonal','http://www.netlib.org/lapack/complex/cgtsv.f','driver simple, solve A*X = B only',11),(12,'z','gtsv','general','tridiagonal','http://www.netlib.org/lapack/complex16/zgtsv.f','driver simple, solve A*X = B only',12),(13,'c','hesv','Hermitian','full','http://www.netlib.org/lapack/complex/chesv.f','driver simple, solve A*X = B only',13),(14,'z','hesv','Hermitian','full','http://www.netlib.org/lapack/complex16/zhesv.f','driver simple, solve A*X = B only',14),(15,'c','hpsv','Hermitian','packed','http://www.netlib.org/lapack/complex/chpsv.f','driver simple, solve A*X = B only',15),(16,'z','hpsv','Hermitian','packed','http://www.netlib.org/lapack/complex16/zhpsv.f','driver simple, solve A*X = B only',16),(17,'s','posv','SPD','full','http://www.netlib.org/lapack/single/sposv.f','driver simple, solve A*X = B only',17),(18,'d','posv','SPD','full','http://www.netlib.org/lapack/double/dposv.f','driver simple, solve A*X = B only',18),(19,'c','posv','HPD','full','http://www.netlib.org/lapack/complex/cposv.f','driver simple, solve A*X = B only',19),(20,'z','posv','HPD','full','http://www.netlib.org/lapack/complex16/zposv.f','driver simple, solve A*X = B only',20),(21,'s','pbsv','SPD','band','http://www.netlib.org/lapack/single/spbsv.f','driver simple, solve A*X = B only',21),(22,'d','pbsv','SPD','band','http://www.netlib.org/lapack/double/dpbsv.f','driver simple, solve A*X = B only',22),(23,'c','pbsv','HPD','band','http://www.netlib.org/lapack/complex/cpbsv.f','driver simple, solve A*X = B only',23),(24,'z','pbsv','HPD','band','http://www.netlib.org/lapack/complex16/zpbsv.f','driver simple, solve A*X = B only',24),(25,'s','ppsv','SPD','packed','http://www.netlib.org/lapack/single/sppsv.f','driver simple, solve A*X = B only',25),(26,'d','ppsv','SPD','packed','http://www.netlib.org/lapack/double/dppsv.f','driver simple, solve A*X = B only',26),(27,'c','ppsv','HPD','packed','http://www.netlib.org/lapack/complex/cppsv.f','driver simple, solve A*X = B only',27),(28,'z','ppsv','HPD','packed','http://www.netlib.org/lapack/complex16/zppsv.f','driver simple, solve A*X = B only',28),(29,'s','ptsv','SPD','tridiagonal','http://www.netlib.org/lapack/single/sptsv.f','driver simple, solve A*X = B only',29),(30,'d','ptsv','SPD','tridiagonal','http://www.netlib.org/lapack/double/dptsv.f','driver simple, solve A*X = B only',30),(31,'c','ptsv','HPD','tridiagonal','http://www.netlib.org/lapack/complex/cptsv.f','driver simple, solve A*X = B only',31),(32,'z','ptsv','HPD','tridiagonal','http://www.netlib.org/lapack/complex16/zptsv.f','driver simple, solve A*X = B only',32),(33,'s','sysv','symmetric','full','http://www.netlib.org/lapack/single/ssysv.f','driver simple, solve A*X = B only',33),(34,'d','sysv','symmetric','full','http://www.netlib.org/lapack/double/dsysv.f','driver simple, solve A*X = B only',34),(35,'c','sysv','symmetric','full','http://www.netlib.org/lapack/complex/csysv.f','driver simple, solve A*X = B only',35),(36,'z','sysv','symmetric','full','http://www.netlib.org/lapack/complex16/zsysv.f','driver simple, solve A*X = B only',36),(37,'s','spsv','symmetric','packed','http://www.netlib.org/lapack/single/sspsv.f','driver simple, solve A*X = B only',37),(38,'d','spsv','symmetric','packed','http://www.netlib.org/lapack/double/dspsv.f','driver simple, solve A*X = B only',38),(39,'c','spsv','symmetric','packed','http://www.netlib.org/lapack/complex/cspsv.f','driver simple, solve A*X = B only',39),(40,'z','spsv','symmetric','packed','http://www.netlib.org/lapack/complex16/zspsv.f','driver simple, solve A*X = B only',40),(41,'s','gesvx','general','full','http://www.netlib.org/lapack/single/sgesvx.f','driver expert, solve A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate, Transpose',41),(42,'d','gesvx','general','full','http://www.netlib.org/lapack/double/dgesvx.f','driver expert, solve A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate, Transpose',42),(43,'c','gesvx','general','full','http://www.netlib.org/lapack/complex/cgesvx.f','driver expert, solve A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate, Transpose',43),(44,'z','gesvx','general','full','http://www.netlib.org/lapack/complex16/zgesvx.f','driver expert, solve A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate, Transpose',44),(45,'s','gbsvx','general','band','http://www.netlib.org/lapack/single/sgbsvx.f','driver expert, solve A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate, Transpose',45),(46,'d','gbsvx','general','band','http://www.netlib.org/lapack/double/dgbsvx.f','driver expert, solve A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate, Transpose',46),(47,'c','gbsvx','general','band','http://www.netlib.org/lapack/complex/cgbsvx.f','driver expert, solve A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate, Transpose',47),(48,'z','gbsvx','general','band','http://www.netlib.org/lapack/complex16/zgbsvx.f','driver expert, solve A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate, Transpose',48),(49,'s','gtsvx','general','tridiagonal','http://www.netlib.org/lapack/single/sgtsvx.f','driver expert, solve A*X = B, Condition Number, Error Bounds, Refine, Factor, Transpose',49),(50,'d','gtsvx','general','tridiagonal','http://www.netlib.org/lapack/double/dgtsvx.f','driver expert, solve A*X = B, Condition Number, Error Bounds, Refine, Factor, Transpose',50),(51,'c','gtsvx','general','tridiagonal','http://www.netlib.org/lapack/complex/cgtsvx.f','driver expert, solve A*X = B, Condition Number, Error Bounds, Refine, Factor, Transpose',51),(52,'z','gtsvx','general','tridiagonal','http://www.netlib.org/lapack/complex16/zgtsvx.f','driver expert, solve A*X = B, Condition Number, Error Bounds, Refine, Factor, Transpose',52),(53,'s','getrs','general','full','http://www.netlib.org/lapack/single/sgetrs.f','computational, solve A*X = B using LU, TRANS',261),(54,'d','getrs','general','full','http://www.netlib.org/lapack/double/dgetrs.f','computational, solve A*X = B using LU, TRANS',262),(55,'c','getrs','general','full','http://www.netlib.org/lapack/complex/cgetrs.f','computational, solve A*X = B using LU, TRANS',263),(56,'z','getrs','general','full','http://www.netlib.org/lapack/complex16/zgetrs.f','computational, solve A*X = B using LU, TRANS',264),(57,'s','gbtrs','general','band','http://www.netlib.org/lapack/single/sgbtrs.f','computational, solve A*X = B using LU, TRANS',265),(58,'d','gbtrs','general','band','http://www.netlib.org/lapack/double/dgbtrs.f','computational, solve A*X = B using LU, TRANS',266),(59,'c','gbtrs','general','band','http://www.netlib.org/lapack/complex/cgbtrs.f','computational, solve A*X = B using LU, TRANS',267),(60,'z','gbtrs','general','band','http://www.netlib.org/lapack/complex16/zgbtrs.f','computational, solve A*X = B using LU, TRANS',268),(61,'s','gttrs','general','tridiagonal','http://www.netlib.org/lapack/single/sgttrs.f','computational, solve A*X = B using LU, TRANS',269),(62,'d','gttrs','general','tridiagonal','http://www.netlib.org/lapack/double/dgttrs.f','computational, solve A*X = B using LU, TRANS',270),(63,'c','gttrs','general','tridiagonal','http://www.netlib.org/lapack/complex/cgttrs.f','computational, solve A*X = B using LU, TRANS',271),(64,'z','gttrs','general','tridiagonal','http://www.netlib.org/lapack/complex16/zgttrs.f','computational, solve A*X = B using LU, TRANS',272),(65,'s','potrs','SPD','full','http://www.netlib.org/lapack/single/spotrs.f','computational, solve A*X = B using Cholesky',273),(66,'d','potrs','SPD','full','http://www.netlib.org/lapack/double/dpotrs.f','computational, solve A*X = B using Cholesky',274),(67,'c','potrs','HPD','full','http://www.netlib.org/lapack/complex/cpotrs.f','computational, solve A*X = B using Cholesky',275),(68,'z','potrs','HPD','full','http://www.netlib.org/lapack/complex16/zpotrs.f','computational, solve A*X = B using Cholesky',276),(69,'s','pptrs','SPD','packed','http://www.netlib.org/lapack/single/spptrs.f','computational, solve A*X = B using Cholesky',277),(70,'d','pptrs','SPD','packed','http://www.netlib.org/lapack/double/dpptrs.f','computational, solve A*X = B using Cholesky',278),(71,'c','pptrs','HPD','packed','http://www.netlib.org/lapack/complex/cpptrs.f','computational, solve A*X = B using Cholesky',279),(72,'z','pptrs','HPD','packed','http://www.netlib.org/lapack/complex16/zpptrs.f','computational, solve A*X = B using Cholesky',280),(73,'s','pbtrs','SPD','band','http://www.netlib.org/lapack/single/spbtrs.f','computational, solve A*X = B using Cholesky',281),(74,'d','pbtrs','SPD','band','http://www.netlib.org/lapack/double/dpbtrs.f','computational, solve A*X = B using Cholesky',282),(75,'c','pbtrs','HPD','band','http://www.netlib.org/lapack/complex/cpbtrs.f','computational, solve A*X = B using Cholesky',283),(76,'z','pbtrs','HPD','band','http://www.netlib.org/lapack/complex16/zpbtrs.f','computational, solve A*X = B using Cholesky',284),(77,'s','pttrs','SPD','tridiagonal','http://www.netlib.org/lapack/single/spttrs.f','computational, solve A*X = B using the L*D*L**T',285),(78,'d','pttrs','SPD','tridiagonal','http://www.netlib.org/lapack/double/dpttrs.f','computational, solve A*X = B using the L*D*L**T ',286),(79,'c','pttrs','HPD','tridiagonal','http://www.netlib.org/lapack/complex/cpttrs.f','computational, solve A*X = B using A = U**H*D*U or A = L*D*L**H',287),(80,'z','pttrs','HPD','tridiagonal','http://www.netlib.org/lapack/complex16/zpttrs.f','computational, solve A*X = B using A = U**H*D*U or A = L*D*L**H',288),(81,'s','sytrs','symmetric','full','http://www.netlib.org/lapack/single/ssytrs.f','computational, solve A*X = B using A = U*D*U**T or A = L*D*L**T ',289),(82,'d','sytrs','symmetric','full','http://www.netlib.org/lapack/double/dsytrs.f','computational, solve A*X = B using A = U*D*U**T or A = L*D*L**T ',290),(83,'c','hetrs','Hermitian','full','http://www.netlib.org/lapack/complex/chetrs.f','computational, solve A*X = B using U*D*U*H or L*D*L*H',291),(84,'z','hetrs','Hermitian','full','http://www.netlib.org/lapack/complex16/zhetrs.f','computational, solve A*X = B using U*D*U*H or L*D*L*H',292),(85,'c','sytrs','symmetric','full','http://www.netlib.org/lapack/complex/csytrs.f','computational, solve A*X = B using A = U*D*U**T or A = L*D*L**T',293),(86,'z','sytrs','symmetric','full','http://www.netlib.org/lapack/complex16/zsytrs.f','computational, solve A*X = B using A = U*D*U**T or A = L*D*L**T',294),(87,'s','sptrs','symmetric','packed','http://www.netlib.org/lapack/single/ssptrs.f','computational, solve A*X = B using A = U*D*U**T or A = L*D*L**T',295),(88,'d','sptrs','symmetric','packed','http://www.netlib.org/lapack/double/dsptrs.f','computational, solve A*X = B using A = U*D*U**T or A = L*D*L**T',296),(89,'c','hptrs','Hermitian','packed','http://www.netlib.org/lapack/complex/chptrs.f','computational, solve A*X = B using U*D*U*H or L*D*L*H',297),(90,'z','hptrs','Hermitian','packed','http://www.netlib.org/lapack/complex16/zhptrs.f','computational, solve A*X = B using U*D*U*H or L*D*L*H',298),(91,'c','sptrs','symmetric','packed','http://www.netlib.org/lapack/complex/csptrs.f','computational, solve A*X = B using A = U*D*U**T or A = L*D*L**T',299),(92,'z','sptrs','symmetric','packed','http://www.netlib.org/lapack/complex16/zsptrs.f','computational, solve A*X = B using A = U*D*U**T or A = L*D*L**T ',300),(93,'s','trtrs','triangular','full','http://www.netlib.org/lapack/single/strtrs.f','computational, solve A*X = B, B is an N-by-NRHS matrix, TRANS',301),(94,'d','trtrs','triangular','full','http://www.netlib.org/lapack/double/dtrtrs.f','computational, solve A*X = B, B is an N-by-NRHS matrix, TRANS',302),(95,'c','trtrs','triangular','full','http://www.netlib.org/lapack/complex/ctrtrs.f','computational, solve A*X = B, B is an N-by-NRHS matrix, TRANS',303),(96,'z','trtrs','triangular','full','http://www.netlib.org/lapack/complex16/ztrtrs.f','computational, solve A*X = B, B is an N-by-NRHS matrix, TRANS',304),(97,'s','tptrs','triangular','packed','http://www.netlib.org/lapack/single/stptrs.f','computational, solve A*X = B, B is an N-by-NRHS matrix, TRANS',305),(98,'d','tptrs','triangular','packed','http://www.netlib.org/lapack/double/dtptrs.f','computational, solve A*X = B, B is an N-by-NRHS matrix, TRANS',306),(99,'c','tptrs','triangular','packed','http://www.netlib.org/lapack/complex/ctptrs.f','computational, solve A*X = B, B is an N-by-NRHS matrix, TRANS',307),(100,'z','tptrs','triangular','packed','http://www.netlib.org/lapack/complex16/ztptrs.f','computational, solve A*X = B, B is an N-by-NRHS matrix, TRANS',308),(101,'s','tbtrs','triangular','band','http://www.netlib.org/lapack/single/stbtrs.f','computational, solve A*X = B, B is an N-by-NRHS matrix, TRANS',309),(102,'d','tbtrs','triangular','band','http://www.netlib.org/lapack/double/dtbtrs.f','computational, solve A*X = B, B is an N-by-NRHS matrix, TRANS',310),(103,'c','tbtrs','triangular','band','http://www.netlib.org/lapack/complex/ctbtrs.f','computational, solve A*X = B, B is an N-by-NRHS matrix, TRANS',311),(104,'z','tbtrs','triangular','band','http://www.netlib.org/lapack/complex16/ztbtrs.f','computational, solve A*X = B, B is an N-by-NRHS matrix, TRANS',312);
/*!40000 ALTER TABLE `Combine_linearequation_only` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Computational_linearequation_computational`
--

DROP TABLE IF EXISTS `Computational_linearequation_computational`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Computational_linearequation_computational` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `thePrecision` varchar(20) NOT NULL,
  `routineName` varchar(30) NOT NULL,
  `matrixType` varchar(20) NOT NULL,
  `storageType` varchar(20) NOT NULL,
  `url` varchar(200) NOT NULL,
  `notes` varchar(225) NOT NULL,
  `info_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `Computational_linearequation_computational_369e409c` (`info_id`)
) ENGINE=MyISAM AUTO_INCREMENT=249 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Computational_linearequation_computational`
--

LOCK TABLES `Computational_linearequation_computational` WRITE;
/*!40000 ALTER TABLE `Computational_linearequation_computational` DISABLE KEYS */;
INSERT INTO `Computational_linearequation_computational` VALUES (1,'s','getrf','general','full','http://www.netlib.org/lapack/single/sgetrf.f','Computes an LU factorization of an m-by-n matrix using partial pivoting with row interchanges',221),(2,'d','getrf','general','full','http://www.netlib.org/lapack/double/dgetrf.f','Computes an LU factorization of an m-by-n matrix using partial pivoting with row interchanges',222),(3,'c','getrf','general','full','http://www.netlib.org/lapack/complex/cgetrf.f','Computes an LU factorization of an m-by-n matrix using partial pivoting with row interchanges',223),(4,'z','getrf','general','full','http://www.netlib.org/lapack/complex16/zgetrf.f','Computes an LU factorization of an m-by-n matrix using partial pivoting with row interchanges',224),(5,'s','gbtrf','general','band','http://www.netlib.org/lapack/single/sgbtrf.f','computes an LU factorization of an m-by-n band matrix using partial pivoting with row interchanges.',225),(6,'d','gbtrf','general','band','http://www.netlib.org/lapack/double/dgbtrf.f','computes an LU factorization of an m-by-n band matrix using partial pivoting with row interchanges.',226),(7,'c','gbtrf','general','band','http://www.netlib.org/lapack/complex/cgbtrf.f','computes an LU factorization of an m-by-n band matrix using partial pivoting with row interchanges.',227),(8,'z','gbtrf','general','band','http://www.netlib.org/lapack/complex16/zgbtrf.f','computes an LU factorization of an m-by-n band matrix using partial pivoting with row interchanges.',228),(9,'s','gttrf','general','tridiagonal','http://www.netlib.org/lapack/single/sgttrf.f','computes an LU factorization of a tridiagonal matrix using elimination with partial pivoting and row interchanges',229),(10,'d','gttrf','general','tridiagonal','http://www.netlib.org/lapack/double/dgttrf.f','computes an LU factorization of a tridiagonal matrix using elimination with partial pivoting and row interchanges',230),(11,'c','gttrf','general','tridiagonal','http://www.netlib.org/lapack/complex/cgttrf.f','computes an LU factorization of a tridiagonal matrix using elimination with partial pivoting and row interchanges',231),(12,'z','gttrf','general','tridiagonal','http://www.netlib.org/lapack/complex16/zgttrf.f','computes an LU factorization of a tridiagonal matrix using elimination with partial pivoting and row interchanges',232),(13,'s','potrf','SPD','full','http://www.netlib.org/lapack/single/spotrf.f','computes the Cholesky factorization of an SPD matrix',233),(14,'d','potrf','SPD','full','http://www.netlib.org/lapack/double/dpotrf.f','computes the Cholesky factorization of an SPD matrix',234),(15,'c','potrf','HPD','full','http://www.netlib.org/lapack/complex/cpotrf.f','computes the Cholesky factorization of an HPD matrix',235),(16,'z','potrf','HPD','full','http://www.netlib.org/lapack/complex16/zpotrf.f','computes the Cholesky factorization of an HPD matrix',236),(17,'s','pptrf','SPD','packed','http://www.netlib.org/lapack/single/spptrf.f','computes the Cholesky factorization of an SPD matrix stored in packed format',237),(18,'d','pptrf','SPD','packed','http://www.netlib.org/lapack/double/dpptrf.f','computes the Cholesky factorization of an SPD matrix stored in packed format',238),(19,'c','pptrf','HPD','packed','http://www.netlib.org/lapack/complex/cpptrf.f','computes the Cholesky factorization of an HPD matrix stored in packed format',239),(20,'z','pptrf','HPD','packed','http://www.netlib.org/lapack/complex16/zpptrf.f','computes the Cholesky factorization of an HPD matrix stored in packed format',240),(21,'s','pbtrf','SPD','band','http://www.netlib.org/lapack/single/spbtrf.f','computes the Cholesky factorization of an SPD band matrix',241),(22,'d','pbtrf','SPD','band','http://www.netlib.org/lapack/double/dpbtrf.f','computes the Cholesky factorization of an SPD band matrix',242),(23,'c','pbtrf','HPD','band','http://www.netlib.org/lapack/complex/cpbtrf.f','computes the Cholesky factorization of an HPD band matrix',243),(24,'z','pbtrf','HPD','band','http://www.netlib.org/lapack/complex16/zpbtrf.f','computes the Cholesky factorization of an HPD band matrix',244),(25,'s','pttrf','SPD','tridiagonal','http://www.netlib.org/lapack/single/spttrf.f','computes the L*D*L**T factorization of an SPD tridiagonal matrix',245),(26,'d','pttrf','SPD','tridiagonal','http://www.netlib.org/lapack/double/dpttrf.f','computes the L*D*L**T factorization of an SPD tridiagonal matrix',246),(27,'c','pttrf','HPD','tridiagonal','http://www.netlib.org/lapack/complex/cpttrf.f','computes the L*D*L**T factorization of an HPD tridiagonal matrix',247),(28,'z','pttrf','HPD','tridiagonal','http://www.netlib.org/lapack/complex16/zpttrf.f','computes the L*D*L**T factorization of an HPD tridiagonal matrix',248),(29,'s','sytrf','symmetric','full','http://www.netlib.org/lapack/single/ssytrf.f','computes the factorization of a real symmetric matrix using the Bunch-Kaufman diagonal pivoting method',249),(30,'d','sytrf','symmetric','full','http://www.netlib.org/lapack/double/dsytrf.f','computes the factorization of a real symmetric matrix using the Bunch-Kaufman diagonal pivoting method',250),(31,'c','hetrf','Hermitian','full','http://www.netlib.org/lapack/complex/chetrf.f','computes the factorization of a complex Hermitian matrix using the Bunch-Kaufman diagonal pivoting method',251),(32,'z','hetrf','Hermitian','full','http://www.netlib.org/lapack/complex16/zhetrf.f','computes the factorization of a complex Hermitian matrix using the Bunch-Kaufman diagonal pivoting method',252),(33,'c','sytrf','symmetric','full','http://www.netlib.org/lapack/complex/csytrf.f','computes the factorization of a complex symmetric matrix using the Bunch-Kaufman diagonal pivoting method',253),(34,'z','sytrf','symmetric','full','http://www.netlib.org/lapack/complex16/zsytrf.f','computes the factorization of a complex symmetric matrix using the Bunch-Kaufman diagonal pivoting method',254),(35,'s','sptrf','symmetric','packed','http://www.netlib.org/lapack/single/ssptrf.f','computes the factorization of a real symmetric matrix stored in packed format using the Bunch-Kaufman diagonal pivoting method',255),(36,'d','sptrf','symmetric','packed','http://www.netlib.org/lapack/double/dsptrf.f','computes the factorization of a real symmetric matrix stored in packed format using the Bunch-Kaufman diagonal pivoting method',256),(37,'c','hptrf','Hermitian','packed','http://www.netlib.org/lapack/complex/chptrf.f','computes the factorization of a complex Hermitian packed matrix using the Bunch-Kaufman diagonal pivoting method',257),(38,'z','hptrf','Hermitian','packed','http://www.netlib.org/lapack/complex16/zhptrf.f','computes the factorization of a complex Hermitian packed matrix using the Bunch-Kaufman diagonal pivoting method',258),(39,'c','sptrf','symmetric','packed','http://www.netlib.org/lapack/complex/csptrf.f','computes the factorization of a complex symmetric matrix stored in packed format using the Bunch-Kaufman diagonal pivoting method',259),(40,'z','sptrf','symmetric','packed','http://www.netlib.org/lapack/complex16/zsptrf.f','computes the factorization of a complex symmetric matrix stored in packed format using the Bunch-Kaufman diagonal pivoting method',260),(41,'s','getrs','general','full','http://www.netlib.org/lapack/single/sgetrs.f','Solve A*X = B using LU, TRANS',261),(42,'d','getrs','general','full','http://www.netlib.org/lapack/double/dgetrs.f','Solve A*X = B using LU, TRANS',262),(43,'c','getrs','general','full','http://www.netlib.org/lapack/complex/cgetrs.f','Solve A*X = B using LU, TRANS',263),(44,'z','getrs','general','full','http://www.netlib.org/lapack/complex16/zgetrs.f','Solve A*X = B using LU, TRANS',264),(45,'s','gbtrs','general','band','http://www.netlib.org/lapack/single/sgbtrs.f','Solve A*X = B using LU, TRANS',265),(46,'d','gbtrs','general','band','http://www.netlib.org/lapack/double/dgbtrs.f','Solve A*X = B using LU, TRANS',266),(47,'c','gbtrs','general','band','http://www.netlib.org/lapack/complex/cgbtrs.f','Solve A*X = B using LU, TRANS',267),(48,'z','gbtrs','general','band','http://www.netlib.org/lapack/complex16/zgbtrs.f','Solve A*X = B using LU, TRANS',268),(49,'s','gttrs','general','tridiagonal','http://www.netlib.org/lapack/single/sgttrs.f','Solve A*X = B using LU, TRANS',269),(50,'d','gttrs','general','tridiagonal','http://www.netlib.org/lapack/double/dgttrs.f','Solve A*X = B using LU, TRANS',270),(51,'c','gttrs','general','tridiagonal','http://www.netlib.org/lapack/complex/cgttrs.f','Solve A*X = B using LU, TRANS',271),(52,'z','gttrs','general','tridiagonal','http://www.netlib.org/lapack/complex16/zgttrs.f','Solve A*X = B using LU, TRANS',272),(53,'s','potrs','SPD','full','http://www.netlib.org/lapack/single/spotrs.f','Solve A*X = B using Cholesky',273),(54,'d','potrs','SPD','full','http://www.netlib.org/lapack/double/dpotrs.f','Solve A*X = B using Cholesky',274),(55,'c','potrs','HPD','full','http://www.netlib.org/lapack/complex/cpotrs.f','Solve A*X = B using Cholesky',275),(56,'z','potrs','HPD','full','http://www.netlib.org/lapack/complex16/zpotrs.f','Solve A*X = B using Cholesky',276),(57,'s','pptrs','SPD','packed','http://www.netlib.org/lapack/single/spptrs.f','Solve A*X = B using Cholesky',277),(58,'d','pptrs','SPD','packed','http://www.netlib.org/lapack/double/dpptrs.f','Solve A*X = B using Cholesky',278),(59,'c','pptrs','HPD','packed','http://www.netlib.org/lapack/complex/cpptrs.f','Solve A*X = B using Cholesky',279),(60,'z','pptrs','HPD','packed','http://www.netlib.org/lapack/complex16/zpptrs.f','Solve A*X = B using Cholesky',280),(61,'s','pbtrs','SPD','band','http://www.netlib.org/lapack/single/spbtrs.f','Solve A*X = B using Cholesky',281),(62,'d','pbtrs','SPD','band','http://www.netlib.org/lapack/double/dpbtrs.f','Solve A*X = B using Cholesky',282),(63,'c','pbtrs','HPD','band','http://www.netlib.org/lapack/complex/cpbtrs.f','Solve A*X = B using Cholesky',283),(64,'z','pbtrs','HPD','band','http://www.netlib.org/lapack/complex16/zpbtrs.f','Solve A*X = B using Cholesky',284),(65,'s','pttrs','SPD','tridiagonal','http://www.netlib.org/lapack/single/spttrs.f','Solve A*X = B using the L*D*L**T',285),(66,'d','pttrs','SPD','tridiagonal','http://www.netlib.org/lapack/double/dpttrs.f','Solve A*X = B using the L*D*L**T ',286),(67,'c','pttrs','HPD','tridiagonal','http://www.netlib.org/lapack/complex/cpttrs.f','Solve A*X = B using A = U**H*D*U or A = L*D*L**H',287),(68,'z','pttrs','HPD','tridiagonal','http://www.netlib.org/lapack/complex16/zpttrs.f','Solve A*X = B using A = U**H*D*U or A = L*D*L**H',288),(69,'s','sytrs','symmetric','full','http://www.netlib.org/lapack/single/ssytrs.f','Solve A*X = B using A = U*D*U**T or A = L*D*L**T ',289),(70,'d','sytrs','symmetric','full','http://www.netlib.org/lapack/double/dsytrs.f','Solve A*X = B using A = U*D*U**T or A = L*D*L**T ',290),(71,'c','hetrs','Hermitian','full','http://www.netlib.org/lapack/complex/chetrs.f','Solve A*X = B using U*D*U*H or L*D*L*H',291),(72,'z','hetrs','Hermitian','full','http://www.netlib.org/lapack/complex16/zhetrs.f','Solve A*X = B using U*D*U*H or L*D*L*H',292),(73,'c','sytrs','symmetric','full','http://www.netlib.org/lapack/complex/csytrs.f','Solve A*X = B using A = U*D*U**T or A = L*D*L**T',293),(74,'z','sytrs','symmetric','full','http://www.netlib.org/lapack/complex16/zsytrs.f','Solve A*X = B using A = U*D*U**T or A = L*D*L**T',294),(75,'s','sptrs','symmetric','packed','http://www.netlib.org/lapack/single/ssptrs.f','Solve A*X = B using A = U*D*U**T or A = L*D*L**T',295),(76,'d','sptrs','symmetric','packed','http://www.netlib.org/lapack/double/dsptrs.f','Solve A*X = B using A = U*D*U**T or A = L*D*L**T',296),(77,'c','hptrs','Hermitian','packed','http://www.netlib.org/lapack/complex/chptrs.f','Solve A*X = B using U*D*U*H or L*D*L*H',297),(78,'z','hptrs','Hermitian','packed','http://www.netlib.org/lapack/complex16/zhptrs.f','Solve A*X = B using U*D*U*H or L*D*L*H',298),(79,'c','sptrs','symmetric','packed','http://www.netlib.org/lapack/complex/csptrs.f','Solve A*X = B using A = U*D*U**T or A = L*D*L**T',299),(80,'z','sptrs','symmetric','packed','http://www.netlib.org/lapack/complex16/zsptrs.f','Solve A*X = B using A = U*D*U**T or A = L*D*L**T ',300),(81,'s','trtrs','triangular','full','http://www.netlib.org/lapack/single/strtrs.f','Solve A*X = B, B is an N-by-NRHS matrix, TRANS',301),(82,'d','trtrs','triangular','full','http://www.netlib.org/lapack/double/dtrtrs.f','Solve A*X = B, B is an N-by-NRHS matrix, TRANS',302),(83,'c','trtrs','triangular','full','http://www.netlib.org/lapack/complex/ctrtrs.f','Solve A*X = B, B is an N-by-NRHS matrix, TRANS',303),(84,'z','trtrs','triangular','full','http://www.netlib.org/lapack/complex16/ztrtrs.f','Solve A*X = B, B is an N-by-NRHS matrix, TRANS',304),(85,'s','tptrs','triangular','packed','http://www.netlib.org/lapack/single/stptrs.f','Solve A*X = B, B is an N-by-NRHS matrix, TRANS',305),(86,'d','tptrs','triangular','packed','http://www.netlib.org/lapack/double/dtptrs.f','Solve A*X = B, B is an N-by-NRHS matrix, TRANS',306),(87,'c','tptrs','triangular','packed','http://www.netlib.org/lapack/complex/ctptrs.f','Solve A*X = B, B is an N-by-NRHS matrix, TRANS',307),(88,'z','tptrs','triangular','packed','http://www.netlib.org/lapack/complex16/ztptrs.f','Solve A*X = B, B is an N-by-NRHS matrix, TRANS',308),(89,'s','tbtrs','triangular','band','http://www.netlib.org/lapack/single/stbtrs.f','Solve A*X = B, B is an N-by-NRHS matrix, TRANS',309),(90,'d','tbtrs','triangular','band','http://www.netlib.org/lapack/double/dtbtrs.f','Solve A*X = B, B is an N-by-NRHS matrix, TRANS',310),(91,'c','tbtrs','triangular','band','http://www.netlib.org/lapack/complex/ctbtrs.f','Solve A*X = B, B is an N-by-NRHS matrix, TRANS',311),(92,'z','tbtrs','triangular','band','http://www.netlib.org/lapack/complex16/ztbtrs.f','Solve A*X = B, B is an N-by-NRHS matrix, TRANS',312),(93,'s','gecon','general','full','http://www.netlib.org/lapack/single/sgecon.f','estimates the reciprocal of the condition number of a general real matrix',313),(94,'d','gecon','general','full','http://www.netlib.org/lapack/double/dgecon.f','estimates the reciprocal of the condition number of a general real matrix',314),(95,'c','gecon','general','full','http://www.netlib.org/lapack/complex/cgecon.f','estimates the reciprocal of the condition number of a general complex matrix',315),(96,'z','gecon','general','full','http://www.netlib.org/lapack/complex16/zgecon.f','estimates the reciprocal of the condition number of a general complex matrix',316),(97,'s','gbcon','general','band','http://www.netlib.org/lapack/single/sgbcon.f','estimates the reciprocal of the condition number of a real general band matrix',317),(98,'d','gbcon','general','band','http://www.netlib.org/lapack/double/dgbcon.f','estimates the reciprocal of the condition number of a real general band matrix',318),(99,'c','gbcon','general','band','http://www.netlib.org/lapack/complex/cgbcon.f','estimates the reciprocal of the condition number of a complex general band matrix',319),(100,'z','gbcon','general','band','http://www.netlib.org/lapack/complex16/zgbcon.f','estimates the reciprocal of the condition number of a complex general band matrix',320),(101,'s','gtcon','general','tridiagonal','http://www.netlib.org/lapack/single/sgtcon.f','estimates the reciprocal of the condition number of a real tridiagonal matrix A using LU ',321),(102,'d','gtcon','general','tridiagonal','http://www.netlib.org/lapack/double/dgtcon.f','estimates the reciprocal of the condition number of a real tridiagonal matrix A using LU ',322),(103,'c','gtcon','general','tridiagonal','http://www.netlib.org/lapack/complex/cgtcon.f','estimates the reciprocal of the condition number of a complex tridiagonal matrix A using LU',323),(104,'z','gtcon','general','tridiagonal','http://www.netlib.org/lapack/complex16/zgtcon.f','estimates the reciprocal of the condition number of a complex tridiagonal matrix A using LU ',324),(105,'s','pocon','SPD','full','http://www.netlib.org/lapack/single/spocon.f','estimates the reciprocal of the condition number (in the 1-norm) of a real symmetric positive definite matrix using Cholesky',325),(106,'d','pocon','SPD','full','http://www.netlib.org/lapack/double/dpocon.f','estimates the reciprocal of the condition number (in the 1-norm) of a real symmetric positive definite matrix using Cholesky',326),(107,'c','pocon','HPD','full','http://www.netlib.org/lapack/complex/cpocon.f','estimates the reciprocal of the condition number (in the 1-norm) of a complex Hermitian positive definite matrix using Cholesky',327),(108,'z','pocon','HPD','full','http://www.netlib.org/lapack/complex16/zpocon.f','estimates the reciprocal of the condition number (in the 1-norm) of a complex Hermitian positive definite matrix using Cholesky',328),(109,'s','ppcon','SPD','packed','http://www.netlib.org/lapack/single/sppcon.f','estimates the reciprocal of the condition number (in the 1-norm) of a real symmetric positive definite packed matrix using Cholesky',329),(110,'d','ppcon','SPD','packed','http://www.netlib.org/lapack/double/dppcon.f','estimates the reciprocal of the condition number (in the 1-norm) of a real symmetric positive definite packed matrix using Cholesky ',330),(111,'c','ppcon','HPD','packed','http://www.netlib.org/lapack/complex/cppcon.f','estimates the reciprocal of the condition number (in the 1-norm) of a complex Hermitian positive definite packed matrix using Cholesky',331),(112,'z','ppcon','HPD','packed','http://www.netlib.org/lapack/complex16/zppcon.f','estimates the reciprocal of the condition number (in the 1-norm) of a complex Hermitian positive definite packed matrix using Cholesky ',332),(113,'s','pbcon','SPD','band','http://www.netlib.org/lapack/single/spbcon.f','estimates the reciprocal of the condition number (in the 1-norm) of a real symmetric positive definite banded matrix using Cholesky',333),(114,'d','pbcon','SPD','band','http://www.netlib.org/lapack/double/dpbcon.f','estimates the reciprocal of the condition number (in the 1-norm) of a real symmetric positive definite banded matrix using Cholesky',334),(115,'c','pbcon','HPD','band','http://www.netlib.org/lapack/complex/cpbcon.f','estimates the reciprocal of the condition number (in the 1-norm) of a complex Hermitian positive definite banded matrix using Cholesky',335),(116,'z','pbcon','HPD','band','http://www.netlib.org/lapack/complex16/zpbcon.f','estimates the reciprocal of the condition number (in the 1-norm) of a complex Hermitian positive definite banded matrix using Cholesky ',336),(117,'s','ptcon','SPD','tridiagonal','http://www.netlib.org/lapack/single/sptcon.f','estimates the reciprocal of the condition number (in the 1-norm) of a real symmetric positive definite tridiagonal matrix using Cholesky',337),(118,'d','ptcon','SPD','tridiagonal','http://www.netlib.org/lapack/double/dptcon.f','estimates the reciprocal of the condition number (in the 1-norm) of a real symmetric positive definite tridiagonal matrix using Cholesky',338),(119,'c','ptcon','HPD','tridiagonal','http://www.netlib.org/lapack/complex/cptcon.f','estimates the reciprocal of the condition number (in the 1-norm) of a complex Hermitian positive definite tridiagonal matrix using Cholesky',339),(120,'z','ptcon','HPD','tridiagonal','http://www.netlib.org/lapack/complex16/zptcon.f','estimates the reciprocal of the condition number (in the 1-norm) of a complex Hermitian positive definite tridiagonal matrix using Cholesky',340),(121,'c','hecon','Hermitian','full','http://www.netlib.org/lapack/complex/checon.f','estimates the reciprocal of the condition number of a complex Hermitian matrix A using A = U*D*U**H or A = L*D*L**H',341),(122,'z','hecon','Hermitian','full','http://www.netlib.org/lapack/complex16/zhecon.f','estimates the reciprocal of the condition number of a complex Hermitian matrix A using A = U*D*U**H or A = L*D*L**H',342),(123,'s','sycon','symmetric','full','http://www.netlib.org/lapack/single/ssycon.f','estimates the reciprocal of the condition number (in the 1-norm) of a real symmetric matrix A using A = U*D*U**T or A = L*D*L**T',343),(124,'d','sycon','symmetric','full','http://www.netlib.org/lapack/double/dsycon.f','estimates the reciprocal of the condition number (in the 1-norm) of a real symmetric matrix A using A = U*D*U**T or A = L*D*L**T',344),(125,'c','sycon','symmetric','full','http://www.netlib.org/lapack/complex/csycon.f','estimates the reciprocal of the condition number (in the 1-norm) of a complex symmetric matrix A using A = U*D*U**T or A = L*D*L**T',345),(126,'z','sycon','symmetric','full','http://www.netlib.org/lapack/complex16/zsycon.f','estimates the reciprocal of the condition number (in the 1-norm) of a complex symmetric matrix A using A = U*D*U**T or A = L*D*L**T',346),(127,'s','spcon','symmetric','packed','http://www.netlib.org/lapack/single/sspcon.f','estimates the reciprocal of the condition number (in the 1-norm) of a real symmetric packed matrix A using A = U*D*U**T or A = L*D*L**T ',347),(128,'d','spcon','symmetric','packed','http://www.netlib.org/lapack/double/dspcon.f','estimates the reciprocal of the condition number (in the 1-norm) of a real symmetric packed matrix A using A = U*D*U**T or A = L*D*L**T ',348),(129,'c','spcon','symmetric','packed','http://www.netlib.org/lapack/complex/cspcon.f','estimates the reciprocal of the condition number (in the 1-norm) of a complex symmetric packed matrix A using A = U*D*U**T or A = L*D*L**T',349),(130,'z','spcon','symmetric','packed','http://www.netlib.org/lapack/complex16/zspcon.f','estimates the reciprocal of the condition number (in the 1-norm) of a complex symmetric packed matrix A using A = U*D*U**T or A = L*D*L**T',350),(131,'c','hpcon','Hermitian','packed','http://www.netlib.org/lapack/complex/chpcon.f','estimates the reciprocal of the condition number of a complex Hermitian packed matrix A using A = U*D*U**H or A = L*D*L**H',351),(132,'z','hpcon','Hermitian','packed','http://www.netlib.org/lapack/complex16/zhpcon.f','estimates the reciprocal of the condition number of a complex Hermitian packed matrix A using A = U*D*U**H or A = L*D*L**H',352),(133,'s','trcon','triangular','full','http://www.netlib.org/lapack/single/strcon.f','estimates the reciprocal of the condition number of a triangular matrix A, in either the 1-norm or the infinity-norm',353),(134,'d','trcon','triangular','full','http://www.netlib.org/lapack/double/dtrcon.f','estimates the reciprocal of the condition number of a triangular matrix A, in either the 1-norm or the infinity-norm',354),(135,'c','trcon','triangular','full','http://www.netlib.org/lapack/complex/ctrcon.f','estimates the reciprocal of the condition number of a triangular matrix A, in either the 1-norm or the infinity-norm.',355),(136,'z','trcon','triangular','full','http://www.netlib.org/lapack/complex16/ztrcon.f','estimates the reciprocal of the condition number of a triangular matrix A, in either the 1-norm or the infinity-norm.',356),(137,'s','tbcon','triangular','band','http://www.netlib.org/lapack/single/stbcon.f','estimates the reciprocal of the condition number of a triangular band matrix A, in either the 1-norm or the infinity-norm',357),(138,'d','tbcon','triangular','band','http://www.netlib.org/lapack/double/dtbcon.f','estimates the reciprocal of the condition number of a triangular band matrix A, in either the 1-norm or the infinity-norm',358),(139,'c','tbcon','triangular','band','http://www.netlib.org/lapack/complex/ctbcon.f','estimates the reciprocal of the condition number of a triangular band matrix A, in either the 1-norm or the infinity-norm',359),(140,'z','tbcon','triangular','band','http://www.netlib.org/lapack/complex16/ztbcon.f','estimates the reciprocal of the condition number of a triangular band matrix A, in either the 1-norm or the infinity-norm',360),(141,'s','tpcon','triangular','packed','http://www.netlib.org/lapack/single/stpcon.f','estimates the reciprocal of the condition number of a triangular packed matrix A, in either the 1-norm or the infinity-norm',361),(142,'d','tpcon','triangular','packed','http://www.netlib.org/lapack/double/dtpcon.f','estimates the reciprocal of the condition number of a triangular packed matrix A, in either the 1-norm or the infinity-norm',362),(143,'c','tpcon','triangular','packed','http://www.netlib.org/lapack/complex/ctpcon.f','estimates the reciprocal of the condition number of a triangular packed matrix A, in either the 1-norm or the infinity-norm',363),(144,'z','tpcon','triangular','packed','http://www.netlib.org/lapack/complex16/ztpcon.f','estimates the reciprocal of the condition number of a triangular packed matrix A, in either the 1-norm or the infinity-norm',364),(145,'s','gerfs','general','full','http://www.netlib.org/lapack/single/sgerfs.f','refine solution to Ax=b, error bounds, backward error estimates',365),(146,'d','gerfs','general','full','http://www.netlib.org/lapack/double/dgerfs.f','refine solution to Ax=b, error bounds, backward error estimates',366),(147,'c','gerfs','general','full','http://www.netlib.org/lapack/complex/cgerfs.f','refine solution to Ax=b, error bounds, backward error estimates',367),(148,'z','gerfs','general','full','http://www.netlib.org/lapack/complex16/zgerfs.f','refine solution to Ax=b, error bounds, backward error estimates',368),(149,'s','gbrfs','general','band','http://www.netlib.org/lapack/single/sgbrfs.f','refine solution to Ax=b, error bounds, backward error estimates',369),(150,'d','gbrfs','general','band','http://www.netlib.org/lapack/double/dgbrfs.f','refine solution to Ax=b, error bounds, backward error estimates',370),(151,'c','gbrfs','general','band','http://www.netlib.org/lapack/complex/cgbrfs.f','refine solution to Ax=b, error bounds, backward error estimates',371),(152,'z','gbrfs','general','band','http://www.netlib.org/lapack/complex16/zgbrfs.f','refine solution to Ax=b, error bounds, backward error estimates',372),(153,'s','gtrfs','general','tridiagonal','http://www.netlib.org/lapack/single/sgtrfs.f','refine solution to Ax=b, error bounds, backward error estimates',373),(154,'d','gtrfs','general','tridiagonal','http://www.netlib.org/lapack/double/dgtrfs.f','refine solution to Ax=b, error bounds, backward error estimates',374),(155,'c','gtrfs','general','tridiagonal','http://www.netlib.org/lapack/complex/cgtrfs.f','refine solution to Ax=b, error bounds, backward error estimates',375),(156,'z','gtrfs','general','tridiagonal','http://www.netlib.org/lapack/complex16/zgtrfs.f','refine solution to Ax=b, error bounds, backward error estimates',376),(157,'c','herfs','Hermitian','full','http://www.netlib.org/lapack/complex/cherfs.f','refine solution to Ax=b, error bounds, backward error estimates',377),(158,'z','herfs','Hermitian','full','http://www.netlib.org/lapack/complex16/zherfs.f','refine solution to Ax=b, error bounds, backward error estimates',378),(159,'c','hprfs','Hermitian','packed','http://www.netlib.org/lapack/complex/chprfs.f','refine solution to Ax=b, error bounds, backward error estimates',379),(160,'z','hprfs','Hermitian','packed','http://www.netlib.org/lapack/complex16/zhprfs.f','refine solution to Ax=b, error bounds, backward error estimates',380),(161,'s','porfs','SPD','full','http://www.netlib.org/lapack/single/sporfs.f','refine solution to Ax=b, error bounds, backward error estimates',381),(162,'d','porfs','SPD','full','http://www.netlib.org/lapack/double/dporfs.f','refine solution to Ax=b, error bounds, backward error estimates',382),(163,'c','porfs','HPD','full','http://www.netlib.org/lapack/complex/cporfs.f','refine solution to Ax=b, error bounds, backward error estimates',383),(164,'z','porfs','HPD','full','http://www.netlib.org/lapack/complex16/zporfs.f','refine solution to Ax=b, error bounds, backward error estimates',384),(165,'s','pbrfs','SPD','band','http://www.netlib.org/lapack/single/spbrfs.f','refine solution to Ax=b, error bounds, backward error estimates',385),(166,'d','pbrfs','SPD','band','http://www.netlib.org/lapack/double/dpbrfs.f','refine solution to Ax=b, error bounds, backward error estimates',386),(167,'c','pbrfs','HPD','band','http://www.netlib.org/lapack/complex/cpbrfs.f','refine solution to Ax=b, error bounds, backward error estimates',387),(168,'z','pbrfs','HPD','band','http://www.netlib.org/lapack/complex16/zpbrfs.f','refine solution to Ax=b, error bounds, backward error estimates',388),(169,'s','pprfs','SPD','packed','http://www.netlib.org/lapack/single/spprfs.f','refine solution to Ax=b, error bounds, backward error estimates',389),(170,'d','pprfs','SPD','packed','http://www.netlib.org/lapack/double/dpprfs.f','refine solution to Ax=b, error bounds, backward error estimates',390),(171,'c','pprfs','HPD','packed','http://www.netlib.org/lapack/complex/cpprfs.f','refine solution to Ax=b, error bounds, backward error estimates',391),(172,'z','pprfs','HPD','packed','http://www.netlib.org/lapack/complex16/zpprfs.f','refine solution to Ax=b, error bounds, backward error estimates',392),(173,'s','ptrfs','SPD','tridiagonal','http://www.netlib.org/lapack/single/sptrfs.f','refine solution to Ax=b, error bounds, backward error estimates',393),(174,'d','ptrfs','SPD','tridiagonal','http://www.netlib.org/lapack/double/dptrfs.f','refine solution to Ax=b, error bounds, backward error estimates',394),(175,'c','ptrfs','HPD','tridiagonal','http://www.netlib.org/lapack/complex/cptrfs.f','refine solution to Ax=b, error bounds, backward error estimates',395),(176,'z','ptrfs','HPD','tridiagonal','http://www.netlib.org/lapack/complex16/zptrfs.f','refine solution to Ax=b, error bounds, backward error estimates',396),(177,'s','syrfs','symmetric','full','http://www.netlib.org/lapack/single/ssyrfs.f','refine solution to Ax=b, error bounds, backward error estimates',397),(178,'d','syrfs','symmetric','full','http://www.netlib.org/lapack/double/dsyrfs.f','refine solution to Ax=b, error bounds, backward error estimates',398),(179,'c','syrfs','symmetric','full','http://www.netlib.org/lapack/complex/csyrfs.f','refine solution to Ax=b, error bounds, backward error estimates',399),(180,'z','syrfs','symmetric','full','http://www.netlib.org/lapack/complex16/zsyrfs.f','refine solution to Ax=b, error bounds, backward error estimates',400),(181,'s','sprfs','symmetric','packed','http://www.netlib.org/lapack/single/ssprfs.f','refine solution to Ax=b, error bounds, backward error estimates',401),(182,'d','sprfs','symmetric','packed','http://www.netlib.org/lapack/double/dsprfs.f','refine solution to Ax=b, error bounds, backward error estimates',402),(183,'c','sprfs','symmetric','packed','http://www.netlib.org/lapack/complex/csprfs.f','refine solution to Ax=b, error bounds, backward error estimates',403),(184,'z','sprfs','symmetric','packed','http://www.netlib.org/lapack/complex16/zsprfs.f','refine solution to Ax=b, error bounds, backward error estimates',404),(185,'s','trrfs','triangular','full','http://www.netlib.org/lapack/single/strrfs.f','refine solution to Ax=b, error bounds, backward error estimates',405),(186,'d','trrfs','triangular','full','http://www.netlib.org/lapack/double/dtrrfs.f','refine solution to Ax=b, error bounds, backward error estimates',406),(187,'c','trrfs','triangular','full','http://www.netlib.org/lapack/complex/ctrrfs.f','refine solution to Ax=b, error bounds, backward error estimates',407),(188,'z','trrfs','triangular','full','http://www.netlib.org/lapack/complex16/ztrrfs.f','refine solution to Ax=b, error bounds, backward error estimates',408),(189,'s','tbrfs','triangular','band','http://www.netlib.org/lapack/single/stbrfs.f','refine solution to Ax=b, error bounds, backward error estimates',409),(190,'d','tbrfs','triangular','band','http://www.netlib.org/lapack/double/dtbrfs.f','refine solution to Ax=b, error bounds, backward error estimates',410),(191,'c','tbrfs','triangular','band','http://www.netlib.org/lapack/complex/ctbrfs.f','refine solution to Ax=b, error bounds, backward error estimates',411),(192,'z','tbrfs','triangular','band','http://www.netlib.org/lapack/complex16/ztbrfs.f','refine solution to Ax=b, error bounds, backward error estimates',412),(193,'s','tprfs','triangular','packed','http://www.netlib.org/lapack/single/stprfs.f','refine solution to Ax=b, error bounds, backward error estimates',413),(194,'d','tprfs','triangular','packed','http://www.netlib.org/lapack/double/dtprfs.f','refine solution to Ax=b, error bounds, backward error estimates',414),(195,'c','tprfs','triangular','packed','http://www.netlib.org/lapack/complex/ctprfs.f','refine solution to Ax=b, error bounds, backward error estimates',415),(196,'z','tprfs','triangular','packed','http://www.netlib.org/lapack/complex16/ztprfs.f','refine solution to Ax=b, error bounds, backward error estimates',416),(197,'s','getri','general','full','http://www.netlib.org/lapack/single/sgetri.f','computes the inverse of a matrix',417),(198,'d','getri','general','full','http://www.netlib.org/lapack/double/dgetri.f','computes the inverse of a matrix',418),(199,'c','getri','general','full','http://www.netlib.org/lapack/complex/cgetri.f','computes the inverse of a matrix',419),(200,'z','getri','general','full','http://www.netlib.org/lapack/complex16/zgetri.f','computes the inverse of a matrix',420),(201,'c','hetri','Hermitian','full','http://www.netlib.org/lapack/complex/chetri.f','computes the inverse of a matrix',421),(202,'z','hetri','Hermitian','full','http://www.netlib.org/lapack/complex16/zhetri.f','computes the inverse of a matrix',422),(203,'c','hptri','Hermitian','packed','http://www.netlib.org/lapack/complex/chptri.f','computes the inverse of a matrix',423),(204,'z','hptri','Hermitian','packed','http://www.netlib.org/lapack/complex16/zhptri.f','computes the inverse of a matrix',424),(205,'s','potri','SPD','full','http://www.netlib.org/lapack/single/spotri.f','computes the inverse of a matrix',425),(206,'d','potri','SPD','full','http://www.netlib.org/lapack/double/dpotri.f','computes the inverse of a matrix',426),(207,'c','potri','HPD','full','http://www.netlib.org/lapack/complex/cpotri.f','computes the inverse of a matrix',427),(208,'z','potri','HPD','full','http://www.netlib.org/lapack/complex16/zpotri.f','computes the inverse of a matrix',428),(209,'s','pptri','SPD','packed','http://www.netlib.org/lapack/single/spptri.f','computes the inverse of a matrix',429),(210,'d','pptri','SPD','packed','http://www.netlib.org/lapack/double/dpptri.f','computes the inverse of a matrix',430),(211,'c','pptri','HPD','packed','http://www.netlib.org/lapack/complex/cpptri.f','computes the inverse of a matrix',431),(212,'z','pptri','HPD','packed','http://www.netlib.org/lapack/complex16/zpptri.f','computes the inverse of a matrix',432),(213,'s','sytri','symmetric','full','http://www.netlib.org/lapack/single/ssytri.f','computes the inverse of a matrix',433),(214,'d','sytri','symmetric','full','http://www.netlib.org/lapack/double/dsytri.f','computes the inverse of a matrix',434),(215,'c','sytri','symmetric','full','http://www.netlib.org/lapack/complex/csytri.f','computes the inverse of a matrix',435),(216,'z','sytri','symmetric','full','http://www.netlib.org/lapack/complex16/zsytri.f','computes the inverse of a matrix',436),(217,'s','sptri','symmetric','packed','http://www.netlib.org/lapack/single/ssptri.f','computes the inverse of a matrix',437),(218,'d','sptri','symmetric','packed','http://www.netlib.org/lapack/double/dsptri.f','computes the inverse of a matrix',438),(219,'c','sptri','symmetric','packed','http://www.netlib.org/lapack/complex/csptri.f','computes the inverse of a matrix',439),(220,'z','sptri','symmetric','packed','http://www.netlib.org/lapack/complex16/zsptri.f','computes the inverse of a matrix',440),(221,'s','trtri','triangular','full','http://www.netlib.org/lapack/single/strtri.f','computes the inverse of a matrix',441),(222,'d','trtri','triangular','full','http://www.netlib.org/lapack/double/dtrtri.f','computes the inverse of a matrix',442),(223,'c','trtri','triangular','full','http://www.netlib.org/lapack/complex/ctrtri.f','computes the inverse of a matrix',443),(224,'z','trtri','triangular','full','http://www.netlib.org/lapack/complex16/ztrtri.f','computes the inverse of a matrix',444),(225,'s','tptri','triangular','packed','http://www.netlib.org/lapack/single/stptri.f','computes the inverse of a matrix',445),(226,'d','tptri','triangular','packed','http://www.netlib.org/lapack/double/dtptri.f','computes the inverse of a matrix',446),(227,'c','tptri','triangular','packed','http://www.netlib.org/lapack/complex/ctptri.f','computes the inverse of a matrix',447),(228,'z','tptri','triangular','packed','http://www.netlib.org/lapack/complex16/ztptri.f','computes the inverse of a matrix',448),(229,'s','geequ','general','full','http://www.netlib.org/lapack/single/sgeequ.f','computes row and column scalings intended to equilibrate an M-by-N matrix A and reduce its cn',449),(230,'d','geequ','general','full','http://www.netlib.org/lapack/double/dgeequ.f','computes row and column scalings intended to equilibrate an M-by-N matrix A and reduce its cn',450),(231,'c','geequ','general','full','http://www.netlib.org/lapack/complex/cgeequ.f','computes row and column scalings intended to equilibrate an M-by-N matrix A and reduce its cn',451),(232,'z','geequ','general','full','http://www.netlib.org/lapack/complex16/zgeequ.f','computes row and column scalings intended to equilibrate an M-by-N matrix A and reduce its cn',452),(233,'s','gbequ','general','band','http://www.netlib.org/lapack/single/sgbequ.f','computes row and column scalings intended to equilibrate an M-by-N band matrix A and reduce its cn',453),(234,'d','gbequ','general','band','http://www.netlib.org/lapack/double/dgbequ.f','computes row and column scalings intended to equilibrate an M-by-N band matrix A and reduce its cn',454),(235,'c','gbequ','general','band','http://www.netlib.org/lapack/complex/cgbequ.f','computes row and column scalings intended to equilibrate an M-by-N band matrix A and reduce its cn',455),(236,'z','gbequ','general','band','http://www.netlib.org/lapack/complex16/zgbequ.f','computes row and column scalings intended to equilibrate an M-by-N band matrix A and reduce its cn',456),(237,'s','poequ','SPD','full','http://www.netlib.org/lapack/single/spoequ.f','computes row and column scalings intended to equilibrate a symmetric positive definite matrix A and reduce its cn (with respect to the two-norm)',457),(238,'d','poequ','SPD','full','http://www.netlib.org/lapack/double/dpoequ.f','computes row and column scalings intended to equilibrate a symmetric positive definite matrix A and reduce its cn (with respect to the two-norm)',458),(239,'c','poequ','HPD','full','http://www.netlib.org/lapack/complex/cpoequ.f','computes row and column scalings intended to equilibrate a Hermitian positive definite matrix A and reduce its cn (with respect to the two-norm)',459),(240,'z','poequ','HPD','full','http://www.netlib.org/lapack/complex16/zpoequ.f','computes row and column scalings intended to equilibrate a Hermitian positive definite matrix A and reduce its cn (with respect to the two-norm)',460),(241,'s','pbequ','SPD','band','http://www.netlib.org/lapack/single/spbequ.f','computes row and column scalings intended to equilibrate a symmetric positive definite band matrix A and reduce its cn (with respect to the two-norm)',461),(242,'d','pbequ','SPD','band','http://www.netlib.org/lapack/double/dpbequ.f','computes row and column scalings intended to equilibrate a symmetric positive definite band matrix A and reduce its cn (with respect to the two-norm)',462),(243,'c','pbequ','HPD','band','http://www.netlib.org/lapack/complex/cpbequ.f','computes row and column scalings intended to equilibrate a Hermitian positive definite band matrix A and reduce its cn (with respect to the two-norm)',463),(244,'z','pbequ','HPD','band','http://www.netlib.org/lapack/complex16/zpbequ.f','computes row and column scalings intended to equilibrate a Hermitian positive definite band matrix A and reduce its cn (with respect to the two-norm)',464),(245,'s','ppequ','SPD','packed','http://www.netlib.org/lapack/single/sppequ.f','computes row and column scalings intended to equilibrate a symmetric positive definite matrix A in packed storage and reduce its cn (with respect to the two-norm)',465),(246,'d','ppequ','SPD','packed','http://www.netlib.org/lapack/double/dppequ.f','computes row and column scalings intended to equilibrate a symmetric positive definite matrix A in packed storage and reduce its cn (with respect to the two-norm)',466),(247,'c','ppequ','HPD','packed','http://www.netlib.org/lapack/complex/cppequ.f','computes row and column scalings intended to equilibrate a Hermitian positive definite matrix A in packed storage and reduce its cn (with respect to the two-norm)',467),(248,'z','ppequ','HPD','packed','http://www.netlib.org/lapack/complex16/zppequ.f','computes row and column scalings intended to equilibrate a Hermitian positive definite matrix A in packed storage and reduce its cn (with respect to the two-norm)',468);
/*!40000 ALTER TABLE `Computational_linearequation_computational` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Computational_linearequation_condition_number`
--

DROP TABLE IF EXISTS `Computational_linearequation_condition_number`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Computational_linearequation_condition_number` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `thePrecision` varchar(20) NOT NULL,
  `routineName` varchar(30) NOT NULL,
  `matrixType` varchar(20) NOT NULL,
  `storageType` varchar(20) NOT NULL,
  `url` varchar(200) NOT NULL,
  `notes` varchar(225) NOT NULL,
  `info_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `Computational_linearequation_condition_number_369e409c` (`info_id`)
) ENGINE=MyISAM AUTO_INCREMENT=53 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Computational_linearequation_condition_number`
--

LOCK TABLES `Computational_linearequation_condition_number` WRITE;
/*!40000 ALTER TABLE `Computational_linearequation_condition_number` DISABLE KEYS */;
INSERT INTO `Computational_linearequation_condition_number` VALUES (1,'s','gecon','general','full','http://www.netlib.org/lapack/single/sgecon.f','estimates the reciprocal of the condition number of a general real matrix',313),(2,'d','gecon','general','full','http://www.netlib.org/lapack/double/dgecon.f','estimates the reciprocal of the condition number of a general real matrix',314),(3,'c','gecon','general','full','http://www.netlib.org/lapack/complex/cgecon.f','estimates the reciprocal of the condition number of a general complex matrix',315),(4,'z','gecon','general','full','http://www.netlib.org/lapack/complex16/zgecon.f','estimates the reciprocal of the condition number of a general complex matrix',316),(5,'s','gbcon','general','band','http://www.netlib.org/lapack/single/sgbcon.f','estimates the reciprocal of the condition number of a real general band matrix',317),(6,'d','gbcon','general','band','http://www.netlib.org/lapack/double/dgbcon.f','estimates the reciprocal of the condition number of a real general band matrix',318),(7,'c','gbcon','general','band','http://www.netlib.org/lapack/complex/cgbcon.f','estimates the reciprocal of the condition number of a complex general band matrix',319),(8,'z','gbcon','general','band','http://www.netlib.org/lapack/complex16/zgbcon.f','estimates the reciprocal of the condition number of a complex general band matrix',320),(9,'s','gtcon','general','tridiagonal','http://www.netlib.org/lapack/single/sgtcon.f','estimates the reciprocal of the condition number of a real tridiagonal matrix A using LU ',321),(10,'d','gtcon','general','tridiagonal','http://www.netlib.org/lapack/double/dgtcon.f','estimates the reciprocal of the condition number of a real tridiagonal matrix A using LU ',322),(11,'c','gtcon','general','tridiagonal','http://www.netlib.org/lapack/complex/cgtcon.f','estimates the reciprocal of the condition number of a complex tridiagonal matrix A using LU',323),(12,'z','gtcon','general','tridiagonal','http://www.netlib.org/lapack/complex16/zgtcon.f','estimates the reciprocal of the condition number of a complex tridiagonal matrix A using LU ',324),(13,'s','pocon','SPD','full','http://www.netlib.org/lapack/single/spocon.f','estimates the reciprocal of the condition number (in the 1-norm) of a real symmetric positive definite matrix using Cholesky',325),(14,'d','pocon','SPD','full','http://www.netlib.org/lapack/double/dpocon.f','estimates the reciprocal of the condition number (in the 1-norm) of a real symmetric positive definite matrix using Cholesky',326),(15,'c','pocon','HPD','full','http://www.netlib.org/lapack/complex/cpocon.f','estimates the reciprocal of the condition number (in the 1-norm) of a complex Hermitian positive definite matrix using Cholesky',327),(16,'z','pocon','HPD','full','http://www.netlib.org/lapack/complex16/zpocon.f','estimates the reciprocal of the condition number (in the 1-norm) of a complex Hermitian positive definite matrix using Cholesky',328),(17,'s','ppcon','SPD','packed','http://www.netlib.org/lapack/single/sppcon.f','estimates the reciprocal of the condition number (in the 1-norm) of a real symmetric positive definite packed matrix using Cholesky',329),(18,'d','ppcon','SPD','packed','http://www.netlib.org/lapack/double/dppcon.f','estimates the reciprocal of the condition number (in the 1-norm) of a real symmetric positive definite packed matrix using Cholesky ',330),(19,'c','ppcon','HPD','packed','http://www.netlib.org/lapack/complex/cppcon.f','estimates the reciprocal of the condition number (in the 1-norm) of a complex Hermitian positive definite packed matrix using Cholesky',331),(20,'z','ppcon','HPD','packed','http://www.netlib.org/lapack/complex16/zppcon.f','estimates the reciprocal of the condition number (in the 1-norm) of a complex Hermitian positive definite packed matrix using Cholesky ',332),(21,'s','pbcon','SPD','band','http://www.netlib.org/lapack/single/spbcon.f','estimates the reciprocal of the condition number (in the 1-norm) of a real symmetric positive definite banded matrix using Cholesky',333),(22,'d','pbcon','SPD','band','http://www.netlib.org/lapack/double/dpbcon.f','estimates the reciprocal of the condition number (in the 1-norm) of a real symmetric positive definite banded matrix using Cholesky',334),(23,'c','pbcon','HPD','band','http://www.netlib.org/lapack/complex/cpbcon.f','estimates the reciprocal of the condition number (in the 1-norm) of a complex Hermitian positive definite banded matrix using Cholesky',335),(24,'z','pbcon','HPD','band','http://www.netlib.org/lapack/complex16/zpbcon.f','estimates the reciprocal of the condition number (in the 1-norm) of a complex Hermitian positive definite banded matrix using Cholesky ',336),(25,'s','ptcon','SPD','tridiagonal','http://www.netlib.org/lapack/single/sptcon.f','estimates the reciprocal of the condition number (in the 1-norm) of a real symmetric positive definite tridiagonal matrix using Cholesky',337),(26,'d','ptcon','SPD','tridiagonal','http://www.netlib.org/lapack/double/dptcon.f','estimates the reciprocal of the condition number (in the 1-norm) of a real symmetric positive definite tridiagonal matrix using Cholesky',338),(27,'c','ptcon','HPD','tridiagonal','http://www.netlib.org/lapack/complex/cptcon.f','estimates the reciprocal of the condition number (in the 1-norm) of a complex Hermitian positive definite tridiagonal matrix using Cholesky',339),(28,'z','ptcon','HPD','tridiagonal','http://www.netlib.org/lapack/complex16/zptcon.f','estimates the reciprocal of the condition number (in the 1-norm) of a complex Hermitian positive definite tridiagonal matrix using Cholesky',340),(29,'c','hecon','Hermitian','full','http://www.netlib.org/lapack/complex/checon.f','estimates the reciprocal of the condition number of a complex Hermitian matrix A using A = U*D*U**H or A = L*D*L**H',341),(30,'z','hecon','Hermitian','full','http://www.netlib.org/lapack/complex16/zhecon.f','estimates the reciprocal of the condition number of a complex Hermitian matrix A using A = U*D*U**H or A = L*D*L**H',342),(31,'s','sycon','symmetric','full','http://www.netlib.org/lapack/single/ssycon.f','estimates the reciprocal of the condition number (in the 1-norm) of a real symmetric matrix A using A = U*D*U**T or A = L*D*L**T',343),(32,'d','sycon','symmetric','full','http://www.netlib.org/lapack/double/dsycon.f','estimates the reciprocal of the condition number (in the 1-norm) of a real symmetric matrix A using A = U*D*U**T or A = L*D*L**T',344),(33,'c','sycon','symmetric','full','http://www.netlib.org/lapack/complex/csycon.f','estimates the reciprocal of the condition number (in the 1-norm) of a complex symmetric matrix A using A = U*D*U**T or A = L*D*L**T',345),(34,'z','sycon','symmetric','full','http://www.netlib.org/lapack/complex16/zsycon.f','estimates the reciprocal of the condition number (in the 1-norm) of a complex symmetric matrix A using A = U*D*U**T or A = L*D*L**T',346),(35,'s','spcon','symmetric','packed','http://www.netlib.org/lapack/single/sspcon.f','estimates the reciprocal of the condition number (in the 1-norm) of a real symmetric packed matrix A using A = U*D*U**T or A = L*D*L**T ',347),(36,'d','spcon','symmetric','packed','http://www.netlib.org/lapack/double/dspcon.f','estimates the reciprocal of the condition number (in the 1-norm) of a real symmetric packed matrix A using A = U*D*U**T or A = L*D*L**T ',348),(37,'c','spcon','symmetric','packed','http://www.netlib.org/lapack/complex/cspcon.f','estimates the reciprocal of the condition number (in the 1-norm) of a complex symmetric packed matrix A using A = U*D*U**T or A = L*D*L**T',349),(38,'z','spcon','symmetric','packed','http://www.netlib.org/lapack/complex16/zspcon.f','estimates the reciprocal of the condition number (in the 1-norm) of a complex symmetric packed matrix A using A = U*D*U**T or A = L*D*L**T',350),(39,'c','hpcon','Hermitian','packed','http://www.netlib.org/lapack/complex/chpcon.f','estimates the reciprocal of the condition number of a complex Hermitian packed matrix A using A = U*D*U**H or A = L*D*L**H',351),(40,'z','hpcon','Hermitian','packed','http://www.netlib.org/lapack/complex16/zhpcon.f','estimates the reciprocal of the condition number of a complex Hermitian packed matrix A using A = U*D*U**H or A = L*D*L**H',352),(41,'s','trcon','triangular','full','http://www.netlib.org/lapack/single/strcon.f','estimates the reciprocal of the condition number of a triangular matrix A, in either the 1-norm or the infinity-norm',353),(42,'d','trcon','triangular','full','http://www.netlib.org/lapack/double/dtrcon.f','estimates the reciprocal of the condition number of a triangular matrix A, in either the 1-norm or the infinity-norm',354),(43,'c','trcon','triangular','full','http://www.netlib.org/lapack/complex/ctrcon.f','estimates the reciprocal of the condition number of a triangular matrix A, in either the 1-norm or the infinity-norm.',355),(44,'z','trcon','triangular','full','http://www.netlib.org/lapack/complex16/ztrcon.f','estimates the reciprocal of the condition number of a triangular matrix A, in either the 1-norm or the infinity-norm.',356),(45,'s','tbcon','triangular','band','http://www.netlib.org/lapack/single/stbcon.f','estimates the reciprocal of the condition number of a triangular band matrix A, in either the 1-norm or the infinity-norm',357),(46,'d','tbcon','triangular','band','http://www.netlib.org/lapack/double/dtbcon.f','estimates the reciprocal of the condition number of a triangular band matrix A, in either the 1-norm or the infinity-norm',358),(47,'c','tbcon','triangular','band','http://www.netlib.org/lapack/complex/ctbcon.f','estimates the reciprocal of the condition number of a triangular band matrix A, in either the 1-norm or the infinity-norm',359),(48,'z','tbcon','triangular','band','http://www.netlib.org/lapack/complex16/ztbcon.f','estimates the reciprocal of the condition number of a triangular band matrix A, in either the 1-norm or the infinity-norm',360),(49,'s','tpcon','triangular','packed','http://www.netlib.org/lapack/single/stpcon.f','estimates the reciprocal of the condition number of a triangular packed matrix A, in either the 1-norm or the infinity-norm',361),(50,'d','tpcon','triangular','packed','http://www.netlib.org/lapack/double/dtpcon.f','estimates the reciprocal of the condition number of a triangular packed matrix A, in either the 1-norm or the infinity-norm',362),(51,'c','tpcon','triangular','packed','http://www.netlib.org/lapack/complex/ctpcon.f','estimates the reciprocal of the condition number of a triangular packed matrix A, in either the 1-norm or the infinity-norm',363),(52,'z','tpcon','triangular','packed','http://www.netlib.org/lapack/complex16/ztpcon.f','estimates the reciprocal of the condition number of a triangular packed matrix A, in either the 1-norm or the infinity-norm',364);
/*!40000 ALTER TABLE `Computational_linearequation_condition_number` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Computational_linearequation_equilibrate`
--

DROP TABLE IF EXISTS `Computational_linearequation_equilibrate`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Computational_linearequation_equilibrate` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `thePrecision` varchar(20) NOT NULL,
  `routineName` varchar(30) NOT NULL,
  `matrixType` varchar(20) NOT NULL,
  `storageType` varchar(20) NOT NULL,
  `url` varchar(200) NOT NULL,
  `notes` varchar(225) NOT NULL,
  `info_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `Computational_linearequation_equilibrate_369e409c` (`info_id`)
) ENGINE=MyISAM AUTO_INCREMENT=21 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Computational_linearequation_equilibrate`
--

LOCK TABLES `Computational_linearequation_equilibrate` WRITE;
/*!40000 ALTER TABLE `Computational_linearequation_equilibrate` DISABLE KEYS */;
INSERT INTO `Computational_linearequation_equilibrate` VALUES (1,'s','geequ','general','full','http://www.netlib.org/lapack/single/sgeequ.f','computes row and column scalings intended to equilibrate an M-by-N matrix A and reduce its cn',449),(2,'d','geequ','general','full','http://www.netlib.org/lapack/double/dgeequ.f','computes row and column scalings intended to equilibrate an M-by-N matrix A and reduce its cn',450),(3,'c','geequ','general','full','http://www.netlib.org/lapack/complex/cgeequ.f','computes row and column scalings intended to equilibrate an M-by-N matrix A and reduce its cn',451),(4,'z','geequ','general','full','http://www.netlib.org/lapack/complex16/zgeequ.f','computes row and column scalings intended to equilibrate an M-by-N matrix A and reduce its cn',452),(5,'s','gbequ','general','band','http://www.netlib.org/lapack/single/sgbequ.f','computes row and column scalings intended to equilibrate an M-by-N band matrix A and reduce its cn',453),(6,'d','gbequ','general','band','http://www.netlib.org/lapack/double/dgbequ.f','computes row and column scalings intended to equilibrate an M-by-N band matrix A and reduce its cn',454),(7,'c','gbequ','general','band','http://www.netlib.org/lapack/complex/cgbequ.f','computes row and column scalings intended to equilibrate an M-by-N band matrix A and reduce its cn',455),(8,'z','gbequ','general','band','http://www.netlib.org/lapack/complex16/zgbequ.f','computes row and column scalings intended to equilibrate an M-by-N band matrix A and reduce its cn',456),(9,'s','poequ','SPD','full','http://www.netlib.org/lapack/single/spoequ.f','computes row and column scalings intended to equilibrate a symmetric positive definite matrix A and reduce its cn (with respect to the two-norm)',457),(10,'d','poequ','SPD','full','http://www.netlib.org/lapack/double/dpoequ.f','computes row and column scalings intended to equilibrate a symmetric positive definite matrix A and reduce its cn (with respect to the two-norm)',458),(11,'c','poequ','HPD','full','http://www.netlib.org/lapack/complex/cpoequ.f','computes row and column scalings intended to equilibrate a Hermitian positive definite matrix A and reduce its cn (with respect to the two-norm)',459),(12,'z','poequ','HPD','full','http://www.netlib.org/lapack/complex16/zpoequ.f','computes row and column scalings intended to equilibrate a Hermitian positive definite matrix A and reduce its cn (with respect to the two-norm)',460),(13,'s','pbequ','SPD','band','http://www.netlib.org/lapack/single/spbequ.f','computes row and column scalings intended to equilibrate a symmetric positive definite band matrix A and reduce its cn (with respect to the two-norm)',461),(14,'d','pbequ','SPD','band','http://www.netlib.org/lapack/double/dpbequ.f','computes row and column scalings intended to equilibrate a symmetric positive definite band matrix A and reduce its cn (with respect to the two-norm)',462),(15,'c','pbequ','HPD','band','http://www.netlib.org/lapack/complex/cpbequ.f','computes row and column scalings intended to equilibrate a Hermitian positive definite band matrix A and reduce its cn (with respect to the two-norm)',463),(16,'z','pbequ','HPD','band','http://www.netlib.org/lapack/complex16/zpbequ.f','computes row and column scalings intended to equilibrate a Hermitian positive definite band matrix A and reduce its cn (with respect to the two-norm)',464),(17,'s','ppequ','SPD','packed','http://www.netlib.org/lapack/single/sppequ.f','computes row and column scalings intended to equilibrate a symmetric positive definite matrix A in packed storage and reduce its cn (with respect to the two-norm)',465),(18,'d','ppequ','SPD','packed','http://www.netlib.org/lapack/double/dppequ.f','computes row and column scalings intended to equilibrate a symmetric positive definite matrix A in packed storage and reduce its cn (with respect to the two-norm)',466),(19,'c','ppequ','HPD','packed','http://www.netlib.org/lapack/complex/cppequ.f','computes row and column scalings intended to equilibrate a Hermitian positive definite matrix A in packed storage and reduce its cn (with respect to the two-norm)',467),(20,'z','ppequ','HPD','packed','http://www.netlib.org/lapack/complex16/zppequ.f','computes row and column scalings intended to equilibrate a Hermitian positive definite matrix A in packed storage and reduce its cn (with respect to the two-norm)',468);
/*!40000 ALTER TABLE `Computational_linearequation_equilibrate` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Computational_linearequation_error_bound`
--

DROP TABLE IF EXISTS `Computational_linearequation_error_bound`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Computational_linearequation_error_bound` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `thePrecision` varchar(20) NOT NULL,
  `routineName` varchar(30) NOT NULL,
  `matrixType` varchar(20) NOT NULL,
  `storageType` varchar(20) NOT NULL,
  `url` varchar(200) NOT NULL,
  `notes` varchar(225) NOT NULL,
  `info_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `Computational_linearequation_error_bound_369e409c` (`info_id`)
) ENGINE=MyISAM AUTO_INCREMENT=53 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Computational_linearequation_error_bound`
--

LOCK TABLES `Computational_linearequation_error_bound` WRITE;
/*!40000 ALTER TABLE `Computational_linearequation_error_bound` DISABLE KEYS */;
INSERT INTO `Computational_linearequation_error_bound` VALUES (1,'s','gerfs','general','full','http://www.netlib.org/lapack/single/sgerfs.f','refine solution to Ax=b, error bounds, backward error estimates',365),(2,'d','gerfs','general','full','http://www.netlib.org/lapack/double/dgerfs.f','refine solution to Ax=b, error bounds, backward error estimates',366),(3,'c','gerfs','general','full','http://www.netlib.org/lapack/complex/cgerfs.f','refine solution to Ax=b, error bounds, backward error estimates',367),(4,'z','gerfs','general','full','http://www.netlib.org/lapack/complex16/zgerfs.f','refine solution to Ax=b, error bounds, backward error estimates',368),(5,'s','gbrfs','general','band','http://www.netlib.org/lapack/single/sgbrfs.f','refine solution to Ax=b, error bounds, backward error estimates',369),(6,'d','gbrfs','general','band','http://www.netlib.org/lapack/double/dgbrfs.f','refine solution to Ax=b, error bounds, backward error estimates',370),(7,'c','gbrfs','general','band','http://www.netlib.org/lapack/complex/cgbrfs.f','refine solution to Ax=b, error bounds, backward error estimates',371),(8,'z','gbrfs','general','band','http://www.netlib.org/lapack/complex16/zgbrfs.f','refine solution to Ax=b, error bounds, backward error estimates',372),(9,'s','gtrfs','general','tridiagonal','http://www.netlib.org/lapack/single/sgtrfs.f','refine solution to Ax=b, error bounds, backward error estimates',373),(10,'d','gtrfs','general','tridiagonal','http://www.netlib.org/lapack/double/dgtrfs.f','refine solution to Ax=b, error bounds, backward error estimates',374),(11,'c','gtrfs','general','tridiagonal','http://www.netlib.org/lapack/complex/cgtrfs.f','refine solution to Ax=b, error bounds, backward error estimates',375),(12,'z','gtrfs','general','tridiagonal','http://www.netlib.org/lapack/complex16/zgtrfs.f','refine solution to Ax=b, error bounds, backward error estimates',376),(13,'c','herfs','Hermitian','full','http://www.netlib.org/lapack/complex/cherfs.f','refine solution to Ax=b, error bounds, backward error estimates',377),(14,'z','herfs','Hermitian','full','http://www.netlib.org/lapack/complex16/zherfs.f','refine solution to Ax=b, error bounds, backward error estimates',378),(15,'c','hprfs','Hermitian','packed','http://www.netlib.org/lapack/complex/chprfs.f','refine solution to Ax=b, error bounds, backward error estimates',379),(16,'z','hprfs','Hermitian','packed','http://www.netlib.org/lapack/complex16/zhprfs.f','refine solution to Ax=b, error bounds, backward error estimates',380),(17,'s','porfs','SPD','full','http://www.netlib.org/lapack/single/sporfs.f','refine solution to Ax=b, error bounds, backward error estimates',381),(18,'d','porfs','SPD','full','http://www.netlib.org/lapack/double/dporfs.f','refine solution to Ax=b, error bounds, backward error estimates',382),(19,'c','porfs','HPD','full','http://www.netlib.org/lapack/complex/cporfs.f','refine solution to Ax=b, error bounds, backward error estimates',383),(20,'z','porfs','HPD','full','http://www.netlib.org/lapack/complex16/zporfs.f','refine solution to Ax=b, error bounds, backward error estimates',384),(21,'s','pbrfs','SPD','band','http://www.netlib.org/lapack/single/spbrfs.f','refine solution to Ax=b, error bounds, backward error estimates',385),(22,'d','pbrfs','SPD','band','http://www.netlib.org/lapack/double/dpbrfs.f','refine solution to Ax=b, error bounds, backward error estimates',386),(23,'c','pbrfs','HPD','band','http://www.netlib.org/lapack/complex/cpbrfs.f','refine solution to Ax=b, error bounds, backward error estimates',387),(24,'z','pbrfs','HPD','band','http://www.netlib.org/lapack/complex16/zpbrfs.f','refine solution to Ax=b, error bounds, backward error estimates',388),(25,'s','pprfs','SPD','packed','http://www.netlib.org/lapack/single/spprfs.f','refine solution to Ax=b, error bounds, backward error estimates',389),(26,'d','pprfs','SPD','packed','http://www.netlib.org/lapack/double/dpprfs.f','refine solution to Ax=b, error bounds, backward error estimates',390),(27,'c','pprfs','HPD','packed','http://www.netlib.org/lapack/complex/cpprfs.f','refine solution to Ax=b, error bounds, backward error estimates',391),(28,'z','pprfs','HPD','packed','http://www.netlib.org/lapack/complex16/zpprfs.f','refine solution to Ax=b, error bounds, backward error estimates',392),(29,'s','ptrfs','SPD','tridiagonal','http://www.netlib.org/lapack/single/sptrfs.f','refine solution to Ax=b, error bounds, backward error estimates',393),(30,'d','ptrfs','SPD','tridiagonal','http://www.netlib.org/lapack/double/dptrfs.f','refine solution to Ax=b, error bounds, backward error estimates',394),(31,'c','ptrfs','HPD','tridiagonal','http://www.netlib.org/lapack/complex/cptrfs.f','refine solution to Ax=b, error bounds, backward error estimates',395),(32,'z','ptrfs','HPD','tridiagonal','http://www.netlib.org/lapack/complex16/zptrfs.f','refine solution to Ax=b, error bounds, backward error estimates',396),(33,'s','syrfs','symmetric','full','http://www.netlib.org/lapack/single/ssyrfs.f','refine solution to Ax=b, error bounds, backward error estimates',397),(34,'d','syrfs','symmetric','full','http://www.netlib.org/lapack/double/dsyrfs.f','refine solution to Ax=b, error bounds, backward error estimates',398),(35,'c','syrfs','symmetric','full','http://www.netlib.org/lapack/complex/csyrfs.f','refine solution to Ax=b, error bounds, backward error estimates',399),(36,'z','syrfs','symmetric','full','http://www.netlib.org/lapack/complex16/zsyrfs.f','refine solution to Ax=b, error bounds, backward error estimates',400),(37,'s','sprfs','symmetric','packed','http://www.netlib.org/lapack/single/ssprfs.f','refine solution to Ax=b, error bounds, backward error estimates',401),(38,'d','sprfs','symmetric','packed','http://www.netlib.org/lapack/double/dsprfs.f','refine solution to Ax=b, error bounds, backward error estimates',402),(39,'c','sprfs','symmetric','packed','http://www.netlib.org/lapack/complex/csprfs.f','refine solution to Ax=b, error bounds, backward error estimates',403),(40,'z','sprfs','symmetric','packed','http://www.netlib.org/lapack/complex16/zsprfs.f','refine solution to Ax=b, error bounds, backward error estimates',404),(41,'s','trrfs','triangular','full','http://www.netlib.org/lapack/single/strrfs.f','refine solution to Ax=b, error bounds, backward error estimates',405),(42,'d','trrfs','triangular','full','http://www.netlib.org/lapack/double/dtrrfs.f','refine solution to Ax=b, error bounds, backward error estimates',406),(43,'c','trrfs','triangular','full','http://www.netlib.org/lapack/complex/ctrrfs.f','refine solution to Ax=b, error bounds, backward error estimates',407),(44,'z','trrfs','triangular','full','http://www.netlib.org/lapack/complex16/ztrrfs.f','refine solution to Ax=b, error bounds, backward error estimates',408),(45,'s','tbrfs','triangular','band','http://www.netlib.org/lapack/single/stbrfs.f','refine solution to Ax=b, error bounds, backward error estimates',409),(46,'d','tbrfs','triangular','band','http://www.netlib.org/lapack/double/dtbrfs.f','refine solution to Ax=b, error bounds, backward error estimates',410),(47,'c','tbrfs','triangular','band','http://www.netlib.org/lapack/complex/ctbrfs.f','refine solution to Ax=b, error bounds, backward error estimates',411),(48,'z','tbrfs','triangular','band','http://www.netlib.org/lapack/complex16/ztbrfs.f','refine solution to Ax=b, error bounds, backward error estimates',412),(49,'s','tprfs','triangular','packed','http://www.netlib.org/lapack/single/stprfs.f','refine solution to Ax=b, error bounds, backward error estimates',413),(50,'d','tprfs','triangular','packed','http://www.netlib.org/lapack/double/dtprfs.f','refine solution to Ax=b, error bounds, backward error estimates',414),(51,'c','tprfs','triangular','packed','http://www.netlib.org/lapack/complex/ctprfs.f','refine solution to Ax=b, error bounds, backward error estimates',415),(52,'z','tprfs','triangular','packed','http://www.netlib.org/lapack/complex16/ztprfs.f','refine solution to Ax=b, error bounds, backward error estimates',416);
/*!40000 ALTER TABLE `Computational_linearequation_error_bound` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Computational_linearequation_factor`
--

DROP TABLE IF EXISTS `Computational_linearequation_factor`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Computational_linearequation_factor` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `thePrecision` varchar(20) NOT NULL,
  `routineName` varchar(30) NOT NULL,
  `matrixType` varchar(20) NOT NULL,
  `storageType` varchar(20) NOT NULL,
  `url` varchar(200) NOT NULL,
  `notes` varchar(225) NOT NULL,
  `info_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `Computational_linearequation_factor_369e409c` (`info_id`)
) ENGINE=MyISAM AUTO_INCREMENT=41 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Computational_linearequation_factor`
--

LOCK TABLES `Computational_linearequation_factor` WRITE;
/*!40000 ALTER TABLE `Computational_linearequation_factor` DISABLE KEYS */;
INSERT INTO `Computational_linearequation_factor` VALUES (1,'s','getrf','general','full','http://www.netlib.org/lapack/single/sgetrf.f','Computes an LU factorization of an m-by-n matrix using partial pivoting with row interchanges',221),(2,'d','getrf','general','full','http://www.netlib.org/lapack/double/dgetrf.f','Computes an LU factorization of an m-by-n matrix using partial pivoting with row interchanges',222),(3,'c','getrf','general','full','http://www.netlib.org/lapack/complex/cgetrf.f','Computes an LU factorization of an m-by-n matrix using partial pivoting with row interchanges',223),(4,'z','getrf','general','full','http://www.netlib.org/lapack/complex16/zgetrf.f','Computes an LU factorization of an m-by-n matrix using partial pivoting with row interchanges',224),(5,'s','gbtrf','general','band','http://www.netlib.org/lapack/single/sgbtrf.f','computes an LU factorization of an m-by-n band matrix using partial pivoting with row interchanges.',225),(6,'d','gbtrf','general','band','http://www.netlib.org/lapack/double/dgbtrf.f','computes an LU factorization of an m-by-n band matrix using partial pivoting with row interchanges.',226),(7,'c','gbtrf','general','band','http://www.netlib.org/lapack/complex/cgbtrf.f','computes an LU factorization of an m-by-n band matrix using partial pivoting with row interchanges.',227),(8,'z','gbtrf','general','band','http://www.netlib.org/lapack/complex16/zgbtrf.f','computes an LU factorization of an m-by-n band matrix using partial pivoting with row interchanges.',228),(9,'s','gttrf','general','tridiagonal','http://www.netlib.org/lapack/single/sgttrf.f','computes an LU factorization of a tridiagonal matrix using elimination with partial pivoting and row interchanges',229),(10,'d','gttrf','general','tridiagonal','http://www.netlib.org/lapack/double/dgttrf.f','computes an LU factorization of a tridiagonal matrix using elimination with partial pivoting and row interchanges',230),(11,'c','gttrf','general','tridiagonal','http://www.netlib.org/lapack/complex/cgttrf.f','computes an LU factorization of a tridiagonal matrix using elimination with partial pivoting and row interchanges',231),(12,'z','gttrf','general','tridiagonal','http://www.netlib.org/lapack/complex16/zgttrf.f','computes an LU factorization of a tridiagonal matrix using elimination with partial pivoting and row interchanges',232),(13,'s','potrf','SPD','full','http://www.netlib.org/lapack/single/spotrf.f','computes the Cholesky factorization of an SPD matrix',233),(14,'d','potrf','SPD','full','http://www.netlib.org/lapack/double/dpotrf.f','computes the Cholesky factorization of an SPD matrix',234),(15,'c','potrf','HPD','full','http://www.netlib.org/lapack/complex/cpotrf.f','computes the Cholesky factorization of an HPD matrix',235),(16,'z','potrf','HPD','full','http://www.netlib.org/lapack/complex16/zpotrf.f','computes the Cholesky factorization of an HPD matrix',236),(17,'s','pptrf','SPD','packed','http://www.netlib.org/lapack/single/spptrf.f','computes the Cholesky factorization of an SPD matrix stored in packed format',237),(18,'d','pptrf','SPD','packed','http://www.netlib.org/lapack/double/dpptrf.f','computes the Cholesky factorization of an SPD matrix stored in packed format',238),(19,'c','pptrf','HPD','packed','http://www.netlib.org/lapack/complex/cpptrf.f','computes the Cholesky factorization of an HPD matrix stored in packed format',239),(20,'z','pptrf','HPD','packed','http://www.netlib.org/lapack/complex16/zpptrf.f','computes the Cholesky factorization of an HPD matrix stored in packed format',240),(21,'s','pbtrf','SPD','band','http://www.netlib.org/lapack/single/spbtrf.f','computes the Cholesky factorization of an SPD band matrix',241),(22,'d','pbtrf','SPD','band','http://www.netlib.org/lapack/double/dpbtrf.f','computes the Cholesky factorization of an SPD band matrix',242),(23,'c','pbtrf','HPD','band','http://www.netlib.org/lapack/complex/cpbtrf.f','computes the Cholesky factorization of an HPD band matrix',243),(24,'z','pbtrf','HPD','band','http://www.netlib.org/lapack/complex16/zpbtrf.f','computes the Cholesky factorization of an HPD band matrix',244),(25,'s','pttrf','SPD','tridiagonal','http://www.netlib.org/lapack/single/spttrf.f','computes the L*D*L**T factorization of an SPD tridiagonal matrix',245),(26,'d','pttrf','SPD','tridiagonal','http://www.netlib.org/lapack/double/dpttrf.f','computes the L*D*L**T factorization of an SPD tridiagonal matrix',246),(27,'c','pttrf','HPD','tridiagonal','http://www.netlib.org/lapack/complex/cpttrf.f','computes the L*D*L**T factorization of an HPD tridiagonal matrix',247),(28,'z','pttrf','HPD','tridiagonal','http://www.netlib.org/lapack/complex16/zpttrf.f','computes the L*D*L**T factorization of an HPD tridiagonal matrix',248),(29,'s','sytrf','symmetric','full','http://www.netlib.org/lapack/single/ssytrf.f','computes the factorization of a real symmetric matrix using the Bunch-Kaufman diagonal pivoting method',249),(30,'d','sytrf','symmetric','full','http://www.netlib.org/lapack/double/dsytrf.f','computes the factorization of a real symmetric matrix using the Bunch-Kaufman diagonal pivoting method',250),(31,'c','hetrf','Hermitian','full','http://www.netlib.org/lapack/complex/chetrf.f','computes the factorization of a complex Hermitian matrix using the Bunch-Kaufman diagonal pivoting method',251),(32,'z','hetrf','Hermitian','full','http://www.netlib.org/lapack/complex16/zhetrf.f','computes the factorization of a complex Hermitian matrix using the Bunch-Kaufman diagonal pivoting method',252),(33,'c','sytrf','symmetric','full','http://www.netlib.org/lapack/complex/csytrf.f','computes the factorization of a complex symmetric matrix using the Bunch-Kaufman diagonal pivoting method',253),(34,'z','sytrf','symmetric','full','http://www.netlib.org/lapack/complex16/zsytrf.f','computes the factorization of a complex symmetric matrix using the Bunch-Kaufman diagonal pivoting method',254),(35,'s','sptrf','symmetric','packed','http://www.netlib.org/lapack/single/ssptrf.f','computes the factorization of a real symmetric matrix stored in packed format using the Bunch-Kaufman diagonal pivoting method',255),(36,'d','sptrf','symmetric','packed','http://www.netlib.org/lapack/double/dsptrf.f','computes the factorization of a real symmetric matrix stored in packed format using the Bunch-Kaufman diagonal pivoting method',256),(37,'c','hptrf','Hermitian','packed','http://www.netlib.org/lapack/complex/chptrf.f','computes the factorization of a complex Hermitian packed matrix using the Bunch-Kaufman diagonal pivoting method',257),(38,'z','hptrf','Hermitian','packed','http://www.netlib.org/lapack/complex16/zhptrf.f','computes the factorization of a complex Hermitian packed matrix using the Bunch-Kaufman diagonal pivoting method',258),(39,'c','sptrf','symmetric','packed','http://www.netlib.org/lapack/complex/csptrf.f','computes the factorization of a complex symmetric matrix stored in packed format using the Bunch-Kaufman diagonal pivoting method',259),(40,'z','sptrf','symmetric','packed','http://www.netlib.org/lapack/complex16/zsptrf.f','computes the factorization of a complex symmetric matrix stored in packed format using the Bunch-Kaufman diagonal pivoting method',260);
/*!40000 ALTER TABLE `Computational_linearequation_factor` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Computational_linearequation_invert`
--

DROP TABLE IF EXISTS `Computational_linearequation_invert`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Computational_linearequation_invert` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `thePrecision` varchar(20) NOT NULL,
  `routineName` varchar(30) NOT NULL,
  `matrixType` varchar(20) NOT NULL,
  `storageType` varchar(20) NOT NULL,
  `url` varchar(200) NOT NULL,
  `notes` varchar(225) NOT NULL,
  `info_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `Computational_linearequation_invert_369e409c` (`info_id`)
) ENGINE=MyISAM AUTO_INCREMENT=33 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Computational_linearequation_invert`
--

LOCK TABLES `Computational_linearequation_invert` WRITE;
/*!40000 ALTER TABLE `Computational_linearequation_invert` DISABLE KEYS */;
INSERT INTO `Computational_linearequation_invert` VALUES (1,'s','getri','general','full','http://www.netlib.org/lapack/single/sgetri.f','computes the inverse of a matrix',417),(2,'d','getri','general','full','http://www.netlib.org/lapack/double/dgetri.f','computes the inverse of a matrix',418),(3,'c','getri','general','full','http://www.netlib.org/lapack/complex/cgetri.f','computes the inverse of a matrix',419),(4,'z','getri','general','full','http://www.netlib.org/lapack/complex16/zgetri.f','computes the inverse of a matrix',420),(5,'c','hetri','Hermitian','full','http://www.netlib.org/lapack/complex/chetri.f','computes the inverse of a matrix',421),(6,'z','hetri','Hermitian','full','http://www.netlib.org/lapack/complex16/zhetri.f','computes the inverse of a matrix',422),(7,'c','hptri','Hermitian','packed','http://www.netlib.org/lapack/complex/chptri.f','computes the inverse of a matrix',423),(8,'z','hptri','Hermitian','packed','http://www.netlib.org/lapack/complex16/zhptri.f','computes the inverse of a matrix',424),(9,'s','potri','SPD','full','http://www.netlib.org/lapack/single/spotri.f','computes the inverse of a matrix',425),(10,'d','potri','SPD','full','http://www.netlib.org/lapack/double/dpotri.f','computes the inverse of a matrix',426),(11,'c','potri','HPD','full','http://www.netlib.org/lapack/complex/cpotri.f','computes the inverse of a matrix',427),(12,'z','potri','HPD','full','http://www.netlib.org/lapack/complex16/zpotri.f','computes the inverse of a matrix',428),(13,'s','pptri','SPD','packed','http://www.netlib.org/lapack/single/spptri.f','computes the inverse of a matrix',429),(14,'d','pptri','SPD','packed','http://www.netlib.org/lapack/double/dpptri.f','computes the inverse of a matrix',430),(15,'c','pptri','HPD','packed','http://www.netlib.org/lapack/complex/cpptri.f','computes the inverse of a matrix',431),(16,'z','pptri','HPD','packed','http://www.netlib.org/lapack/complex16/zpptri.f','computes the inverse of a matrix',432),(17,'s','sytri','symmetric','full','http://www.netlib.org/lapack/single/ssytri.f','computes the inverse of a matrix',433),(18,'d','sytri','symmetric','full','http://www.netlib.org/lapack/double/dsytri.f','computes the inverse of a matrix',434),(19,'c','sytri','symmetric','full','http://www.netlib.org/lapack/complex/csytri.f','computes the inverse of a matrix',435),(20,'z','sytri','symmetric','full','http://www.netlib.org/lapack/complex16/zsytri.f','computes the inverse of a matrix',436),(21,'s','sptri','symmetric','packed','http://www.netlib.org/lapack/single/ssptri.f','computes the inverse of a matrix',437),(22,'d','sptri','symmetric','packed','http://www.netlib.org/lapack/double/dsptri.f','computes the inverse of a matrix',438),(23,'c','sptri','symmetric','packed','http://www.netlib.org/lapack/complex/csptri.f','computes the inverse of a matrix',439),(24,'z','sptri','symmetric','packed','http://www.netlib.org/lapack/complex16/zsptri.f','computes the inverse of a matrix',440),(25,'s','trtri','triangular','full','http://www.netlib.org/lapack/single/strtri.f','computes the inverse of a matrix',441),(26,'d','trtri','triangular','full','http://www.netlib.org/lapack/double/dtrtri.f','computes the inverse of a matrix',442),(27,'c','trtri','triangular','full','http://www.netlib.org/lapack/complex/ctrtri.f','computes the inverse of a matrix',443),(28,'z','trtri','triangular','full','http://www.netlib.org/lapack/complex16/ztrtri.f','computes the inverse of a matrix',444),(29,'s','tptri','triangular','packed','http://www.netlib.org/lapack/single/stptri.f','computes the inverse of a matrix',445),(30,'d','tptri','triangular','packed','http://www.netlib.org/lapack/double/dtptri.f','computes the inverse of a matrix',446),(31,'c','tptri','triangular','packed','http://www.netlib.org/lapack/complex/ctptri.f','computes the inverse of a matrix',447),(32,'z','tptri','triangular','packed','http://www.netlib.org/lapack/complex16/ztptri.f','computes the inverse of a matrix',448);
/*!40000 ALTER TABLE `Computational_linearequation_invert` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Computational_linearequation_solve`
--

DROP TABLE IF EXISTS `Computational_linearequation_solve`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Computational_linearequation_solve` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `thePrecision` varchar(20) NOT NULL,
  `routineName` varchar(30) NOT NULL,
  `matrixType` varchar(20) NOT NULL,
  `storageType` varchar(20) NOT NULL,
  `url` varchar(200) NOT NULL,
  `notes` varchar(225) NOT NULL,
  `info_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `Computational_linearequation_solve_369e409c` (`info_id`)
) ENGINE=MyISAM AUTO_INCREMENT=53 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Computational_linearequation_solve`
--

LOCK TABLES `Computational_linearequation_solve` WRITE;
/*!40000 ALTER TABLE `Computational_linearequation_solve` DISABLE KEYS */;
INSERT INTO `Computational_linearequation_solve` VALUES (1,'s','getrs','general','full','http://www.netlib.org/lapack/single/sgetrs.f','Solve A*X = B using LU, TRANS',261),(2,'d','getrs','general','full','http://www.netlib.org/lapack/double/dgetrs.f','Solve A*X = B using LU, TRANS',262),(3,'c','getrs','general','full','http://www.netlib.org/lapack/complex/cgetrs.f','Solve A*X = B using LU, TRANS',263),(4,'z','getrs','general','full','http://www.netlib.org/lapack/complex16/zgetrs.f','Solve A*X = B using LU, TRANS',264),(5,'s','gbtrs','general','band','http://www.netlib.org/lapack/single/sgbtrs.f','Solve A*X = B using LU, TRANS',265),(6,'d','gbtrs','general','band','http://www.netlib.org/lapack/double/dgbtrs.f','Solve A*X = B using LU, TRANS',266),(7,'c','gbtrs','general','band','http://www.netlib.org/lapack/complex/cgbtrs.f','Solve A*X = B using LU, TRANS',267),(8,'z','gbtrs','general','band','http://www.netlib.org/lapack/complex16/zgbtrs.f','Solve A*X = B using LU, TRANS',268),(9,'s','gttrs','general','tridiagonal','http://www.netlib.org/lapack/single/sgttrs.f','Solve A*X = B using LU, TRANS',269),(10,'d','gttrs','general','tridiagonal','http://www.netlib.org/lapack/double/dgttrs.f','Solve A*X = B using LU, TRANS',270),(11,'c','gttrs','general','tridiagonal','http://www.netlib.org/lapack/complex/cgttrs.f','Solve A*X = B using LU, TRANS',271),(12,'z','gttrs','general','tridiagonal','http://www.netlib.org/lapack/complex16/zgttrs.f','Solve A*X = B using LU, TRANS',272),(13,'s','potrs','SPD','full','http://www.netlib.org/lapack/single/spotrs.f','Solve A*X = B using Cholesky',273),(14,'d','potrs','SPD','full','http://www.netlib.org/lapack/double/dpotrs.f','Solve A*X = B using Cholesky',274),(15,'c','potrs','HPD','full','http://www.netlib.org/lapack/complex/cpotrs.f','Solve A*X = B using Cholesky',275),(16,'z','potrs','HPD','full','http://www.netlib.org/lapack/complex16/zpotrs.f','Solve A*X = B using Cholesky',276),(17,'s','pptrs','SPD','packed','http://www.netlib.org/lapack/single/spptrs.f','Solve A*X = B using Cholesky',277),(18,'d','pptrs','SPD','packed','http://www.netlib.org/lapack/double/dpptrs.f','Solve A*X = B using Cholesky',278),(19,'c','pptrs','HPD','packed','http://www.netlib.org/lapack/complex/cpptrs.f','Solve A*X = B using Cholesky',279),(20,'z','pptrs','HPD','packed','http://www.netlib.org/lapack/complex16/zpptrs.f','Solve A*X = B using Cholesky',280),(21,'s','pbtrs','SPD','band','http://www.netlib.org/lapack/single/spbtrs.f','Solve A*X = B using Cholesky',281),(22,'d','pbtrs','SPD','band','http://www.netlib.org/lapack/double/dpbtrs.f','Solve A*X = B using Cholesky',282),(23,'c','pbtrs','HPD','band','http://www.netlib.org/lapack/complex/cpbtrs.f','Solve A*X = B using Cholesky',283),(24,'z','pbtrs','HPD','band','http://www.netlib.org/lapack/complex16/zpbtrs.f','Solve A*X = B using Cholesky',284),(25,'s','pttrs','SPD','tridiagonal','http://www.netlib.org/lapack/single/spttrs.f','Solve A*X = B using the L*D*L**T',285),(26,'d','pttrs','SPD','tridiagonal','http://www.netlib.org/lapack/double/dpttrs.f','Solve A*X = B using the L*D*L**T ',286),(27,'c','pttrs','HPD','tridiagonal','http://www.netlib.org/lapack/complex/cpttrs.f','Solve A*X = B using A = U**H*D*U or A = L*D*L**H',287),(28,'z','pttrs','HPD','tridiagonal','http://www.netlib.org/lapack/complex16/zpttrs.f','Solve A*X = B using A = U**H*D*U or A = L*D*L**H',288),(29,'s','sytrs','symmetric','full','http://www.netlib.org/lapack/single/ssytrs.f','Solve A*X = B using A = U*D*U**T or A = L*D*L**T ',289),(30,'d','sytrs','symmetric','full','http://www.netlib.org/lapack/double/dsytrs.f','Solve A*X = B using A = U*D*U**T or A = L*D*L**T ',290),(31,'c','hetrs','Hermitian','full','http://www.netlib.org/lapack/complex/chetrs.f','Solve A*X = B using U*D*U*H or L*D*L*H',291),(32,'z','hetrs','Hermitian','full','http://www.netlib.org/lapack/complex16/zhetrs.f','Solve A*X = B using U*D*U*H or L*D*L*H',292),(33,'c','sytrs','symmetric','full','http://www.netlib.org/lapack/complex/csytrs.f','Solve A*X = B using A = U*D*U**T or A = L*D*L**T',293),(34,'z','sytrs','symmetric','full','http://www.netlib.org/lapack/complex16/zsytrs.f','Solve A*X = B using A = U*D*U**T or A = L*D*L**T',294),(35,'s','sptrs','symmetric','packed','http://www.netlib.org/lapack/single/ssptrs.f','Solve A*X = B using A = U*D*U**T or A = L*D*L**T',295),(36,'d','sptrs','symmetric','packed','http://www.netlib.org/lapack/double/dsptrs.f','Solve A*X = B using A = U*D*U**T or A = L*D*L**T',296),(37,'c','hptrs','Hermitian','packed','http://www.netlib.org/lapack/complex/chptrs.f','Solve A*X = B using U*D*U*H or L*D*L*H',297),(38,'z','hptrs','Hermitian','packed','http://www.netlib.org/lapack/complex16/zhptrs.f','Solve A*X = B using U*D*U*H or L*D*L*H',298),(39,'c','sptrs','symmetric','packed','http://www.netlib.org/lapack/complex/csptrs.f','Solve A*X = B using A = U*D*U**T or A = L*D*L**T',299),(40,'z','sptrs','symmetric','packed','http://www.netlib.org/lapack/complex16/zsptrs.f','Solve A*X = B using A = U*D*U**T or A = L*D*L**T ',300),(41,'s','trtrs','triangular','full','http://www.netlib.org/lapack/single/strtrs.f','Solve A*X = B, B is an N-by-NRHS matrix, TRANS',301),(42,'d','trtrs','triangular','full','http://www.netlib.org/lapack/double/dtrtrs.f','Solve A*X = B, B is an N-by-NRHS matrix, TRANS',302),(43,'c','trtrs','triangular','full','http://www.netlib.org/lapack/complex/ctrtrs.f','Solve A*X = B, B is an N-by-NRHS matrix, TRANS',303),(44,'z','trtrs','triangular','full','http://www.netlib.org/lapack/complex16/ztrtrs.f','Solve A*X = B, B is an N-by-NRHS matrix, TRANS',304),(45,'s','tptrs','triangular','packed','http://www.netlib.org/lapack/single/stptrs.f','Solve A*X = B, B is an N-by-NRHS matrix, TRANS',305),(46,'d','tptrs','triangular','packed','http://www.netlib.org/lapack/double/dtptrs.f','Solve A*X = B, B is an N-by-NRHS matrix, TRANS',306),(47,'c','tptrs','triangular','packed','http://www.netlib.org/lapack/complex/ctptrs.f','Solve A*X = B, B is an N-by-NRHS matrix, TRANS',307),(48,'z','tptrs','triangular','packed','http://www.netlib.org/lapack/complex16/ztptrs.f','Solve A*X = B, B is an N-by-NRHS matrix, TRANS',308),(49,'s','tbtrs','triangular','band','http://www.netlib.org/lapack/single/stbtrs.f','Solve A*X = B, B is an N-by-NRHS matrix, TRANS',309),(50,'d','tbtrs','triangular','band','http://www.netlib.org/lapack/double/dtbtrs.f','Solve A*X = B, B is an N-by-NRHS matrix, TRANS',310),(51,'c','tbtrs','triangular','band','http://www.netlib.org/lapack/complex/ctbtrs.f','Solve A*X = B, B is an N-by-NRHS matrix, TRANS',311),(52,'z','tbtrs','triangular','band','http://www.netlib.org/lapack/complex16/ztbtrs.f','Solve A*X = B, B is an N-by-NRHS matrix, TRANS',312);
/*!40000 ALTER TABLE `Computational_linearequation_solve` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Driver_eigensolver`
--

DROP TABLE IF EXISTS `Driver_eigensolver`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Driver_eigensolver` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `thePrecision` varchar(20) NOT NULL,
  `routineName` varchar(30) NOT NULL,
  `matrixType` varchar(20) NOT NULL,
  `storageType` varchar(20) NOT NULL,
  `url` varchar(200) NOT NULL,
  `notes` varchar(225) NOT NULL,
  `info_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `Driver_eigensolver_369e409c` (`info_id`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Driver_eigensolver`
--

LOCK TABLES `Driver_eigensolver` WRITE;
/*!40000 ALTER TABLE `Driver_eigensolver` DISABLE KEYS */;
/*!40000 ALTER TABLE `Driver_eigensolver` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Driver_linearequation_driver`
--

DROP TABLE IF EXISTS `Driver_linearequation_driver`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Driver_linearequation_driver` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `thePrecision` varchar(20) NOT NULL,
  `routineName` varchar(30) NOT NULL,
  `matrixType` varchar(20) NOT NULL,
  `storageType` varchar(20) NOT NULL,
  `url` varchar(200) NOT NULL,
  `notes` varchar(225) NOT NULL,
  `info_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `Driver_linearequation_driver_369e409c` (`info_id`)
) ENGINE=MyISAM AUTO_INCREMENT=81 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Driver_linearequation_driver`
--

LOCK TABLES `Driver_linearequation_driver` WRITE;
/*!40000 ALTER TABLE `Driver_linearequation_driver` DISABLE KEYS */;
INSERT INTO `Driver_linearequation_driver` VALUES (1,'s','gesv','general','full','http://www.netlib.org/lapack/single/sgesv.f','simple driver, solve A*X = B only',1),(2,'d','gesv','general','full','http://www.netlib.org/lapack/double/dgesv.f','simple driver, solve A*X = B only',2),(3,'c','gesv','general','full','http://www.netlib.org/lapack/complex/cgesv.f','simple driver, solve A*X = B only',3),(4,'z','gesv','general','full','http://www.netlib.org/lapack/complex16/zgesv.f','simple driver, solve A*X = B only',4),(5,'s','gbsv','general','band','http://www.netlib.org/lapack/single/sgbsv.f','simple driver, solve A*X = B only',5),(6,'d','gbsv','general','band','http://www.netlib.org/lapack/double/dgbsv.f','simple driver, solve A*X = B only',6),(7,'c','gbsv','general','band','http://www.netlib.org/lapack/complex/cgbsv.f','simple driver, solve A*X = B only',7),(8,'z','gbsv','general','band','http://www.netlib.org/lapack/complex16/zgbsv.f','simple driver, solve A*X = B only',8),(9,'s','gtsv','general','tridiagonal','http://www.netlib.org/lapack/single/sgtsv.f','simple driver, solve A*X = B only',9),(10,'d','gtsv','general','tridiagonal','http://www.netlib.org/lapack/double/dgtsv.f','simple driver, solve A*X = B only',10),(11,'c','gtsv','general','tridiagonal','http://www.netlib.org/lapack/complex/cgtsv.f','simple driver, solve A*X = B only',11),(12,'z','gtsv','general','tridiagonal','http://www.netlib.org/lapack/complex16/zgtsv.f','simple driver, solve A*X = B only',12),(13,'c','hesv','Hermitian','full','http://www.netlib.org/lapack/complex/chesv.f','simple driver, solve A*X = B only',13),(14,'z','hesv','Hermitian','full','http://www.netlib.org/lapack/complex16/zhesv.f','simple driver, solve A*X = B only',14),(15,'c','hpsv','Hermitian','packed','http://www.netlib.org/lapack/complex/chpsv.f','simple driver, solve A*X = B only',15),(16,'z','hpsv','Hermitian','packed','http://www.netlib.org/lapack/complex16/zhpsv.f','simple driver, solve A*X = B only',16),(17,'s','posv','SPD','full','http://www.netlib.org/lapack/single/sposv.f','simple driver, solve A*X = B only',17),(18,'d','posv','SPD','full','http://www.netlib.org/lapack/double/dposv.f','simple driver, solve A*X = B only',18),(19,'c','posv','HPD','full','http://www.netlib.org/lapack/complex/cposv.f','simple driver, solve A*X = B only',19),(20,'z','posv','HPD','full','http://www.netlib.org/lapack/complex16/zposv.f','simple driver, solve A*X = B only',20),(21,'s','pbsv','SPD','band','http://www.netlib.org/lapack/single/spbsv.f','simple driver, solve A*X = B only',21),(22,'d','pbsv','SPD','band','http://www.netlib.org/lapack/double/dpbsv.f','simple driver, solve A*X = B only',22),(23,'c','pbsv','HPD','band','http://www.netlib.org/lapack/complex/cpbsv.f','simple driver, solve A*X = B only',23),(24,'z','pbsv','HPD','band','http://www.netlib.org/lapack/complex16/zpbsv.f','simple driver, solve A*X = B only',24),(25,'s','ppsv','SPD','packed','http://www.netlib.org/lapack/single/sppsv.f','simple driver, solve A*X = B only',25),(26,'d','ppsv','SPD','packed','http://www.netlib.org/lapack/double/dppsv.f','simple driver, solve A*X = B only',26),(27,'c','ppsv','HPD','packed','http://www.netlib.org/lapack/complex/cppsv.f','simple driver, solve A*X = B only',27),(28,'z','ppsv','HPD','packed','http://www.netlib.org/lapack/complex16/zppsv.f','simple driver, solve A*X = B only',28),(29,'s','ptsv','SPD','tridiagonal','http://www.netlib.org/lapack/single/sptsv.f','simple driver, solve A*X = B only',29),(30,'d','ptsv','SPD','tridiagonal','http://www.netlib.org/lapack/double/dptsv.f','simple driver, solve A*X = B only',30),(31,'c','ptsv','HPD','tridiagonal','http://www.netlib.org/lapack/complex/cptsv.f','simple driver, solve A*X = B only',31),(32,'z','ptsv','HPD','tridiagonal','http://www.netlib.org/lapack/complex16/zptsv.f','simple driver, solve A*X = B only',32),(33,'s','sysv','symmetric','full','http://www.netlib.org/lapack/single/ssysv.f','simple driver, solve A*X = B only',33),(34,'d','sysv','symmetric','full','http://www.netlib.org/lapack/double/dsysv.f','simple driver, solve A*X = B only',34),(35,'c','sysv','symmetric','full','http://www.netlib.org/lapack/complex/csysv.f','simple driver, solve A*X = B only',35),(36,'z','sysv','symmetric','full','http://www.netlib.org/lapack/complex16/zsysv.f','simple driver, solve A*X = B only',36),(37,'s','spsv','symmetric','packed','http://www.netlib.org/lapack/single/sspsv.f','simple driver, solve A*X = B only',37),(38,'d','spsv','symmetric','packed','http://www.netlib.org/lapack/double/dspsv.f','simple driver, solve A*X = B only',38),(39,'c','spsv','symmetric','packed','http://www.netlib.org/lapack/complex/cspsv.f','simple driver, solve A*X = B only',39),(40,'z','spsv','symmetric','packed','http://www.netlib.org/lapack/complex16/zspsv.f','simple driver, solve A*X = B only',40),(41,'s','gesvx','general','full','http://www.netlib.org/lapack/single/sgesvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate, Transpose',41),(42,'d','gesvx','general','full','http://www.netlib.org/lapack/double/dgesvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate, Transpose',42),(43,'c','gesvx','general','full','http://www.netlib.org/lapack/complex/cgesvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate, Transpose',43),(44,'z','gesvx','general','full','http://www.netlib.org/lapack/complex16/zgesvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate, Transpose',44),(45,'s','gbsvx','general','band','http://www.netlib.org/lapack/single/sgbsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate, Transpose',45),(46,'d','gbsvx','general','band','http://www.netlib.org/lapack/double/dgbsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate, Transpose',46),(47,'c','gbsvx','general','band','http://www.netlib.org/lapack/complex/cgbsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate, Transpose',47),(48,'z','gbsvx','general','band','http://www.netlib.org/lapack/complex16/zgbsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate, Transpose',48),(49,'s','gtsvx','general','tridiagonal','http://www.netlib.org/lapack/single/sgtsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Transpose',49),(50,'d','gtsvx','general','tridiagonal','http://www.netlib.org/lapack/double/dgtsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Transpose',50),(51,'c','gtsvx','general','tridiagonal','http://www.netlib.org/lapack/complex/cgtsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Transpose',51),(52,'z','gtsvx','general','tridiagonal','http://www.netlib.org/lapack/complex16/zgtsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Transpose',52),(53,'c','hesvx','Hermitian','full','http://www.netlib.org/lapack/complex/chesvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor',53),(54,'z','hesvx','Hermitian','full','http://www.netlib.org/lapack/complex16/zhesvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor',54),(55,'c','hpsvx','Hermitian','packed','http://www.netlib.org/lapack/complex/chpsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor',55),(56,'z','hpsvx','Hermitian','packed','http://www.netlib.org/lapack/complex16/zhpsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor',56),(57,'s','posvx','SPD','full','http://www.netlib.org/lapack/single/sposvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate',57),(58,'d','posvx','SPD','full','http://www.netlib.org/lapack/double/dposvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate',58),(59,'c','posvx','HPD','full','http://www.netlib.org/lapack/complex/cposvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate',59),(60,'z','posvx','HPD','full','http://www.netlib.org/lapack/complex16/zposvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate',60),(61,'s','pbsvx','SPD','band','http://www.netlib.org/lapack/single/spbsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate',61),(62,'d','pbsvx','SPD','band','http://www.netlib.org/lapack/double/dpbsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate',62),(63,'c','pbsvx','HPD','band','http://www.netlib.org/lapack/complex/cpbsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate',63),(64,'z','pbsvx','HPD','band','http://www.netlib.org/lapack/complex16/zpbsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate',64),(65,'s','ppsvx','SPD','packed','http://www.netlib.org/lapack/single/sppsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate',65),(66,'d','ppsvx','SPD','packed','http://www.netlib.org/lapack/double/dppsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate',66),(67,'c','ppsvx','HPD','packed','http://www.netlib.org/lapack/complex/cppsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate',67),(68,'z','ppsvx','HPD','packed','http://www.netlib.org/lapack/complex16/zppsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate',68),(69,'s','ptsvx','SPD','tridiagonal','http://www.netlib.org/lapack/single/sptsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor',69),(70,'d','ptsvx','SPD','tridiagonal','http://www.netlib.org/lapack/double/dptsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor',70),(71,'c','ptsvx','HPD','tridiagonal','http://www.netlib.org/lapack/complex/cptsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor',71),(72,'z','ptsvx','HPD','tridiagonal','http://www.netlib.org/lapack/complex16/zptsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor',72),(73,'s','sysvx','symmetric','full','http://www.netlib.org/lapack/single/ssysvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor',73),(74,'d','sysvx','symmetric','full','http://www.netlib.org/lapack/double/dsysvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor',74),(75,'c','sysvx','symmetric','full','http://www.netlib.org/lapack/complex/csysvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor',75),(76,'z','sysvx','symmetric','full','http://www.netlib.org/lapack/complex16/zsysvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor',76),(77,'s','spsvx','symmetric','packed','http://www.netlib.org/lapack/single/sspsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor',77),(78,'d','spsvx','symmetric','packed','http://www.netlib.org/lapack/double/dspsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor',78),(79,'c','spsvx','symmetric','packed','http://www.netlib.org/lapack/complex/cspsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor',79),(80,'z','spsvx','symmetric','packed','http://www.netlib.org/lapack/complex16/zspsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor',80);
/*!40000 ALTER TABLE `Driver_linearequation_driver` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Driver_linearequation_expert`
--

DROP TABLE IF EXISTS `Driver_linearequation_expert`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Driver_linearequation_expert` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `thePrecision` varchar(20) NOT NULL,
  `routineName` varchar(30) NOT NULL,
  `matrixType` varchar(20) NOT NULL,
  `storageType` varchar(20) NOT NULL,
  `url` varchar(200) NOT NULL,
  `notes` varchar(225) NOT NULL,
  `info_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `Driver_linearequation_expert_369e409c` (`info_id`)
) ENGINE=MyISAM AUTO_INCREMENT=41 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Driver_linearequation_expert`
--

LOCK TABLES `Driver_linearequation_expert` WRITE;
/*!40000 ALTER TABLE `Driver_linearequation_expert` DISABLE KEYS */;
INSERT INTO `Driver_linearequation_expert` VALUES (1,'s','gesvx','general','full','http://www.netlib.org/lapack/single/sgesvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate, Transpose',41),(2,'d','gesvx','general','full','http://www.netlib.org/lapack/double/dgesvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate, Transpose',42),(3,'c','gesvx','general','full','http://www.netlib.org/lapack/complex/cgesvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate, Transpose',43),(4,'z','gesvx','general','full','http://www.netlib.org/lapack/complex16/zgesvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate, Transpose',44),(5,'s','gbsvx','general','band','http://www.netlib.org/lapack/single/sgbsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate, Transpose',45),(6,'d','gbsvx','general','band','http://www.netlib.org/lapack/double/dgbsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate, Transpose',46),(7,'c','gbsvx','general','band','http://www.netlib.org/lapack/complex/cgbsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate, Transpose',47),(8,'z','gbsvx','general','band','http://www.netlib.org/lapack/complex16/zgbsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate, Transpose',48),(9,'s','gtsvx','general','tridiagonal','http://www.netlib.org/lapack/single/sgtsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Transpose',49),(10,'d','gtsvx','general','tridiagonal','http://www.netlib.org/lapack/double/dgtsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Transpose',50),(11,'c','gtsvx','general','tridiagonal','http://www.netlib.org/lapack/complex/cgtsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Transpose',51),(12,'z','gtsvx','general','tridiagonal','http://www.netlib.org/lapack/complex16/zgtsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Transpose',52),(13,'c','hesvx','Hermitian','full','http://www.netlib.org/lapack/complex/chesvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor',53),(14,'z','hesvx','Hermitian','full','http://www.netlib.org/lapack/complex16/zhesvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor',54),(15,'c','hpsvx','Hermitian','packed','http://www.netlib.org/lapack/complex/chpsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor',55),(16,'z','hpsvx','Hermitian','packed','http://www.netlib.org/lapack/complex16/zhpsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor',56),(17,'s','posvx','SPD','full','http://www.netlib.org/lapack/single/sposvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate',57),(18,'d','posvx','SPD','full','http://www.netlib.org/lapack/double/dposvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate',58),(19,'c','posvx','HPD','full','http://www.netlib.org/lapack/complex/cposvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate',59),(20,'z','posvx','HPD','full','http://www.netlib.org/lapack/complex16/zposvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate',60),(21,'s','pbsvx','SPD','band','http://www.netlib.org/lapack/single/spbsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate',61),(22,'d','pbsvx','SPD','band','http://www.netlib.org/lapack/double/dpbsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate',62),(23,'c','pbsvx','HPD','band','http://www.netlib.org/lapack/complex/cpbsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate',63),(24,'z','pbsvx','HPD','band','http://www.netlib.org/lapack/complex16/zpbsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate',64),(25,'s','ppsvx','SPD','packed','http://www.netlib.org/lapack/single/sppsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate',65),(26,'d','ppsvx','SPD','packed','http://www.netlib.org/lapack/double/dppsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate',66),(27,'c','ppsvx','HPD','packed','http://www.netlib.org/lapack/complex/cppsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate',67),(28,'z','ppsvx','HPD','packed','http://www.netlib.org/lapack/complex16/zppsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor, Equilibrate',68),(29,'s','ptsvx','SPD','tridiagonal','http://www.netlib.org/lapack/single/sptsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor',69),(30,'d','ptsvx','SPD','tridiagonal','http://www.netlib.org/lapack/double/dptsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor',70),(31,'c','ptsvx','HPD','tridiagonal','http://www.netlib.org/lapack/complex/cptsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor',71),(32,'z','ptsvx','HPD','tridiagonal','http://www.netlib.org/lapack/complex16/zptsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor',72),(33,'s','sysvx','symmetric','full','http://www.netlib.org/lapack/single/ssysvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor',73),(34,'d','sysvx','symmetric','full','http://www.netlib.org/lapack/double/dsysvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor',74),(35,'c','sysvx','symmetric','full','http://www.netlib.org/lapack/complex/csysvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor',75),(36,'z','sysvx','symmetric','full','http://www.netlib.org/lapack/complex16/zsysvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor',76),(37,'s','spsvx','symmetric','packed','http://www.netlib.org/lapack/single/sspsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor',77),(38,'d','spsvx','symmetric','packed','http://www.netlib.org/lapack/double/dspsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor',78),(39,'c','spsvx','symmetric','packed','http://www.netlib.org/lapack/complex/cspsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor',79),(40,'z','spsvx','symmetric','packed','http://www.netlib.org/lapack/complex16/zspsvx.f','expert driver, A*X = B, Condition Number, Error Bounds, Refine, Factor',80);
/*!40000 ALTER TABLE `Driver_linearequation_expert` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Driver_linearequation_simple`
--

DROP TABLE IF EXISTS `Driver_linearequation_simple`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Driver_linearequation_simple` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `thePrecision` varchar(20) NOT NULL,
  `routineName` varchar(30) NOT NULL,
  `matrixType` varchar(20) NOT NULL,
  `storageType` varchar(20) NOT NULL,
  `url` varchar(200) NOT NULL,
  `notes` varchar(225) NOT NULL,
  `info_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `Driver_linearequation_simple_369e409c` (`info_id`)
) ENGINE=MyISAM AUTO_INCREMENT=41 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Driver_linearequation_simple`
--

LOCK TABLES `Driver_linearequation_simple` WRITE;
/*!40000 ALTER TABLE `Driver_linearequation_simple` DISABLE KEYS */;
INSERT INTO `Driver_linearequation_simple` VALUES (1,'s','gesv','general','full','http://www.netlib.org/lapack/single/sgesv.f','simple driver, solve A*X = B only',1),(2,'d','gesv','general','full','http://www.netlib.org/lapack/double/dgesv.f','simple driver, solve A*X = B only',2),(3,'c','gesv','general','full','http://www.netlib.org/lapack/complex/cgesv.f','simple driver, solve A*X = B only',3),(4,'z','gesv','general','full','http://www.netlib.org/lapack/complex16/zgesv.f','simple driver, solve A*X = B only',4),(5,'s','gbsv','general','band','http://www.netlib.org/lapack/single/sgbsv.f','simple driver, solve A*X = B only',5),(6,'d','gbsv','general','band','http://www.netlib.org/lapack/double/dgbsv.f','simple driver, solve A*X = B only',6),(7,'c','gbsv','general','band','http://www.netlib.org/lapack/complex/cgbsv.f','simple driver, solve A*X = B only',7),(8,'z','gbsv','general','band','http://www.netlib.org/lapack/complex16/zgbsv.f','simple driver, solve A*X = B only',8),(9,'s','gtsv','general','tridiagonal','http://www.netlib.org/lapack/single/sgtsv.f','simple driver, solve A*X = B only',9),(10,'d','gtsv','general','tridiagonal','http://www.netlib.org/lapack/double/dgtsv.f','simple driver, solve A*X = B only',10),(11,'c','gtsv','general','tridiagonal','http://www.netlib.org/lapack/complex/cgtsv.f','simple driver, solve A*X = B only',11),(12,'z','gtsv','general','tridiagonal','http://www.netlib.org/lapack/complex16/zgtsv.f','simple driver, solve A*X = B only',12),(13,'c','hesv','Hermitian','full','http://www.netlib.org/lapack/complex/chesv.f','simple driver, solve A*X = B only',13),(14,'z','hesv','Hermitian','full','http://www.netlib.org/lapack/complex16/zhesv.f','simple driver, solve A*X = B only',14),(15,'c','hpsv','Hermitian','packed','http://www.netlib.org/lapack/complex/chpsv.f','simple driver, solve A*X = B only',15),(16,'z','hpsv','Hermitian','packed','http://www.netlib.org/lapack/complex16/zhpsv.f','simple driver, solve A*X = B only',16),(17,'s','posv','SPD','full','http://www.netlib.org/lapack/single/sposv.f','simple driver, solve A*X = B only',17),(18,'d','posv','SPD','full','http://www.netlib.org/lapack/double/dposv.f','simple driver, solve A*X = B only',18),(19,'c','posv','HPD','full','http://www.netlib.org/lapack/complex/cposv.f','simple driver, solve A*X = B only',19),(20,'z','posv','HPD','full','http://www.netlib.org/lapack/complex16/zposv.f','simple driver, solve A*X = B only',20),(21,'s','pbsv','SPD','band','http://www.netlib.org/lapack/single/spbsv.f','simple driver, solve A*X = B only',21),(22,'d','pbsv','SPD','band','http://www.netlib.org/lapack/double/dpbsv.f','simple driver, solve A*X = B only',22),(23,'c','pbsv','HPD','band','http://www.netlib.org/lapack/complex/cpbsv.f','simple driver, solve A*X = B only',23),(24,'z','pbsv','HPD','band','http://www.netlib.org/lapack/complex16/zpbsv.f','simple driver, solve A*X = B only',24),(25,'s','ppsv','SPD','packed','http://www.netlib.org/lapack/single/sppsv.f','simple driver, solve A*X = B only',25),(26,'d','ppsv','SPD','packed','http://www.netlib.org/lapack/double/dppsv.f','simple driver, solve A*X = B only',26),(27,'c','ppsv','HPD','packed','http://www.netlib.org/lapack/complex/cppsv.f','simple driver, solve A*X = B only',27),(28,'z','ppsv','HPD','packed','http://www.netlib.org/lapack/complex16/zppsv.f','simple driver, solve A*X = B only',28),(29,'s','ptsv','SPD','tridiagonal','http://www.netlib.org/lapack/single/sptsv.f','simple driver, solve A*X = B only',29),(30,'d','ptsv','SPD','tridiagonal','http://www.netlib.org/lapack/double/dptsv.f','simple driver, solve A*X = B only',30),(31,'c','ptsv','HPD','tridiagonal','http://www.netlib.org/lapack/complex/cptsv.f','simple driver, solve A*X = B only',31),(32,'z','ptsv','HPD','tridiagonal','http://www.netlib.org/lapack/complex16/zptsv.f','simple driver, solve A*X = B only',32),(33,'s','sysv','symmetric','full','http://www.netlib.org/lapack/single/ssysv.f','simple driver, solve A*X = B only',33),(34,'d','sysv','symmetric','full','http://www.netlib.org/lapack/double/dsysv.f','simple driver, solve A*X = B only',34),(35,'c','sysv','symmetric','full','http://www.netlib.org/lapack/complex/csysv.f','simple driver, solve A*X = B only',35),(36,'z','sysv','symmetric','full','http://www.netlib.org/lapack/complex16/zsysv.f','simple driver, solve A*X = B only',36),(37,'s','spsv','symmetric','packed','http://www.netlib.org/lapack/single/sspsv.f','simple driver, solve A*X = B only',37),(38,'d','spsv','symmetric','packed','http://www.netlib.org/lapack/double/dspsv.f','simple driver, solve A*X = B only',38),(39,'c','spsv','symmetric','packed','http://www.netlib.org/lapack/complex/cspsv.f','simple driver, solve A*X = B only',39),(40,'z','spsv','symmetric','packed','http://www.netlib.org/lapack/complex16/zspsv.f','simple driver, solve A*X = B only',40);
/*!40000 ALTER TABLE `Driver_linearequation_simple` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Driver_linearleastsquare`
--

DROP TABLE IF EXISTS `Driver_linearleastsquare`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Driver_linearleastsquare` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `thePrecision` varchar(20) NOT NULL,
  `routineName` varchar(30) NOT NULL,
  `matrixType` varchar(20) NOT NULL,
  `storageType` varchar(20) NOT NULL,
  `url` varchar(200) NOT NULL,
  `notes` varchar(225) NOT NULL,
  `info_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `Driver_linearleastsquare_369e409c` (`info_id`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Driver_linearleastsquare`
--

LOCK TABLES `Driver_linearleastsquare` WRITE;
/*!40000 ALTER TABLE `Driver_linearleastsquare` DISABLE KEYS */;
/*!40000 ALTER TABLE `Driver_linearleastsquare` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Driver_routineinfo`
--

DROP TABLE IF EXISTS `Driver_routineinfo`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Driver_routineinfo` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `routine` varchar(30) NOT NULL,
  `info` longtext,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=481 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Driver_routineinfo`
--

LOCK TABLES `Driver_routineinfo` WRITE;
/*!40000 ALTER TABLE `Driver_routineinfo` DISABLE KEYS */;
INSERT INTO `Driver_routineinfo` VALUES (1,'sgesv_1.txt','      SUBROUTINE SGESV( N, NRHS, A, LDA, IPIV, B, LDB, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDA, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      REAL               A( LDA, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SGESV computes the solution to a real system of linear equations\n*     A * X = B,\n*  where A is an N-by-N matrix and X and B are N-by-NRHS matrices.\n*\n*  The LU decomposition with partial pivoting and row interchanges is\n*  used to factor A as\n*     A = P * L * U,\n*  where P is a permutation matrix, L is unit lower triangular, and U is\n*  upper triangular.  The factored form of A is then used to solve the\n*  system of equations A * X = B.\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  A       (input/output) REAL array, dimension (LDA,N)\n*          On entry, the N-by-N coefficient matrix A.\n*          On exit, the factors L and U from the factorization\n*          A = P*L*U; the unit diagonal elements of L are not stored.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (output) INTEGER array, dimension (N)\n*          The pivot indices that define the permutation matrix P;\n*          row i of the matrix was interchanged with row IPIV(i).\n*\n*  B       (input/output) REAL array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS matrix of right hand side matrix B.\n*          On exit, if INFO = 0, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, U(i,i) is exactly zero.  The factorization\n*                has been completed, but the factor U is exactly\n*                singular, so the solution could not be computed.\n*\n'),(2,'dgesv_2.txt','      SUBROUTINE DGESV( N, NRHS, A, LDA, IPIV, B, LDB, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDA, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      DOUBLE PRECISION   A( LDA, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DGESV computes the solution to a real system of linear equations\n*     A * X = B,\n*  where A is an N-by-N matrix and X and B are N-by-NRHS matrices.\n*\n*  The LU decomposition with partial pivoting and row interchanges is\n*  used to factor A as\n*     A = P * L * U,\n*  where P is a permutation matrix, L is unit lower triangular, and U is\n*  upper triangular.  The factored form of A is then used to solve the\n*  system of equations A * X = B.\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  A       (input/output) DOUBLE PRECISION array, dimension (LDA,N)\n*          On entry, the N-by-N coefficient matrix A.\n*          On exit, the factors L and U from the factorization\n*          A = P*L*U; the unit diagonal elements of L are not stored.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (output) INTEGER array, dimension (N)\n*          The pivot indices that define the permutation matrix P;\n*          row i of the matrix was interchanged with row IPIV(i).\n*\n*  B       (input/output) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS matrix of right hand side matrix B.\n*          On exit, if INFO = 0, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, U(i,i) is exactly zero.  The factorization\n*                has been completed, but the factor U is exactly\n*                singular, so the solution could not be computed.\n*\n'),(3,'cgesv_3.txt','      SUBROUTINE CGESV( N, NRHS, A, LDA, IPIV, B, LDB, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDA, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX            A( LDA, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CGESV computes the solution to a complex system of linear equations\n*     A * X = B,\n*  where A is an N-by-N matrix and X and B are N-by-NRHS matrices.\n*\n*  The LU decomposition with partial pivoting and row interchanges is\n*  used to factor A as\n*     A = P * L * U,\n*  where P is a permutation matrix, L is unit lower triangular, and U is\n*  upper triangular.  The factored form of A is then used to solve the\n*  system of equations A * X = B.\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  A       (input/output) COMPLEX array, dimension (LDA,N)\n*          On entry, the N-by-N coefficient matrix A.\n*          On exit, the factors L and U from the factorization\n*          A = P*L*U; the unit diagonal elements of L are not stored.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (output) INTEGER array, dimension (N)\n*          The pivot indices that define the permutation matrix P;\n*          row i of the matrix was interchanged with row IPIV(i).\n*\n*  B       (input/output) COMPLEX array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS matrix of right hand side matrix B.\n*          On exit, if INFO = 0, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, U(i,i) is exactly zero.  The factorization\n*                has been completed, but the factor U is exactly\n*                singular, so the solution could not be computed.\n*\n'),(4,'zgesv_4.txt','      SUBROUTINE ZGESV( N, NRHS, A, LDA, IPIV, B, LDB, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDA, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX*16         A( LDA, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZGESV computes the solution to a complex system of linear equations\n*     A * X = B,\n*  where A is an N-by-N matrix and X and B are N-by-NRHS matrices.\n*\n*  The LU decomposition with partial pivoting and row interchanges is\n*  used to factor A as\n*     A = P * L * U,\n*  where P is a permutation matrix, L is unit lower triangular, and U is\n*  upper triangular.  The factored form of A is then used to solve the\n*  system of equations A * X = B.\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  A       (input/output) COMPLEX*16 array, dimension (LDA,N)\n*          On entry, the N-by-N coefficient matrix A.\n*          On exit, the factors L and U from the factorization\n*          A = P*L*U; the unit diagonal elements of L are not stored.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (output) INTEGER array, dimension (N)\n*          The pivot indices that define the permutation matrix P;\n*          row i of the matrix was interchanged with row IPIV(i).\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS matrix of right hand side matrix B.\n*          On exit, if INFO = 0, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, U(i,i) is exactly zero.  The factorization\n*                has been completed, but the factor U is exactly\n*                singular, so the solution could not be computed.\n*\n'),(5,'sgbsv_5.txt','      SUBROUTINE SGBSV( N, KL, KU, NRHS, AB, LDAB, IPIV, B, LDB, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, KL, KU, LDAB, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      REAL               AB( LDAB, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SGBSV computes the solution to a real system of linear equations\n*  A * X = B, where A is a band matrix of order N with KL subdiagonals\n*  and KU superdiagonals, and X and B are N-by-NRHS matrices.\n*\n*  The LU decomposition with partial pivoting and row interchanges is\n*  used to factor A as A = L * U, where L is a product of permutation\n*  and unit lower triangular matrices with KL subdiagonals, and U is\n*  upper triangular with KL+KU superdiagonals.  The factored form of A\n*  is then used to solve the system of equations A * X = B.\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  KL      (input) INTEGER\n*          The number of subdiagonals within the band of A.  KL >= 0.\n*\n*  KU      (input) INTEGER\n*          The number of superdiagonals within the band of A.  KU >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AB      (input/output) REAL array, dimension (LDAB,N)\n*          On entry, the matrix A in band storage, in rows KL+1 to\n*          2*KL+KU+1; rows 1 to KL of the array need not be set.\n*          The j-th column of A is stored in the j-th column of the\n*          array AB as follows:\n*          AB(KL+KU+1+i-j,j) = A(i,j) for max(1,j-KU)<=i<=min(N,j+KL)\n*          On exit, details of the factorization: U is stored as an\n*          upper triangular band matrix with KL+KU superdiagonals in\n*          rows 1 to KL+KU+1, and the multipliers used during the\n*          factorization are stored in rows KL+KU+2 to 2*KL+KU+1.\n*          See below for further details.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= 2*KL+KU+1.\n*\n*  IPIV    (output) INTEGER array, dimension (N)\n*          The pivot indices that define the permutation matrix P;\n*          row i of the matrix was interchanged with row IPIV(i).\n*\n*  B       (input/output) REAL array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if INFO = 0, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, U(i,i) is exactly zero.  The factorization\n*                has been completed, but the factor U is exactly\n*                singular, and the solution has not been computed.\n*\n'),(6,'dgbsv_6.txt','      SUBROUTINE DGBSV( N, KL, KU, NRHS, AB, LDAB, IPIV, B, LDB, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, KL, KU, LDAB, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      DOUBLE PRECISION   AB( LDAB, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DGBSV computes the solution to a real system of linear equations\n*  A * X = B, where A is a band matrix of order N with KL subdiagonals\n*  and KU superdiagonals, and X and B are N-by-NRHS matrices.\n*\n*  The LU decomposition with partial pivoting and row interchanges is\n*  used to factor A as A = L * U, where L is a product of permutation\n*  and unit lower triangular matrices with KL subdiagonals, and U is\n*  upper triangular with KL+KU superdiagonals.  The factored form of A\n*  is then used to solve the system of equations A * X = B.\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  KL      (input) INTEGER\n*          The number of subdiagonals within the band of A.  KL >= 0.\n*\n*  KU      (input) INTEGER\n*          The number of superdiagonals within the band of A.  KU >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AB      (input/output) DOUBLE PRECISION array, dimension (LDAB,N)\n*          On entry, the matrix A in band storage, in rows KL+1 to\n*          2*KL+KU+1; rows 1 to KL of the array need not be set.\n*          The j-th column of A is stored in the j-th column of the\n*          array AB as follows:\n*          AB(KL+KU+1+i-j,j) = A(i,j) for max(1,j-KU)<=i<=min(N,j+KL)\n*          On exit, details of the factorization: U is stored as an\n*          upper triangular band matrix with KL+KU superdiagonals in\n*          rows 1 to KL+KU+1, and the multipliers used during the\n*          factorization are stored in rows KL+KU+2 to 2*KL+KU+1.\n*          See below for further details.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= 2*KL+KU+1.\n*\n*  IPIV    (output) INTEGER array, dimension (N)\n*          The pivot indices that define the permutation matrix P;\n*          row i of the matrix was interchanged with row IPIV(i).\n*\n*  B       (input/output) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if INFO = 0, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, U(i,i) is exactly zero.  The factorization\n*                has been completed, but the factor U is exactly\n*                singular, and the solution has not been computed.\n*\n'),(7,'cgbsv_7.txt','      SUBROUTINE CGBSV( N, KL, KU, NRHS, AB, LDAB, IPIV, B, LDB, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, KL, KU, LDAB, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX            AB( LDAB, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CGBSV computes the solution to a complex system of linear equations\n*  A * X = B, where A is a band matrix of order N with KL subdiagonals\n*  and KU superdiagonals, and X and B are N-by-NRHS matrices.\n*\n*  The LU decomposition with partial pivoting and row interchanges is\n*  used to factor A as A = L * U, where L is a product of permutation\n*  and unit lower triangular matrices with KL subdiagonals, and U is\n*  upper triangular with KL+KU superdiagonals.  The factored form of A\n*  is then used to solve the system of equations A * X = B.\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  KL      (input) INTEGER\n*          The number of subdiagonals within the band of A.  KL >= 0.\n*\n*  KU      (input) INTEGER\n*          The number of superdiagonals within the band of A.  KU >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AB      (input/output) COMPLEX array, dimension (LDAB,N)\n*          On entry, the matrix A in band storage, in rows KL+1 to\n*          2*KL+KU+1; rows 1 to KL of the array need not be set.\n*          The j-th column of A is stored in the j-th column of the\n*          array AB as follows:\n*          AB(KL+KU+1+i-j,j) = A(i,j) for max(1,j-KU)<=i<=min(N,j+KL)\n*          On exit, details of the factorization: U is stored as an\n*          upper triangular band matrix with KL+KU superdiagonals in\n*          rows 1 to KL+KU+1, and the multipliers used during the\n*          factorization are stored in rows KL+KU+2 to 2*KL+KU+1.\n*          See below for further details.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= 2*KL+KU+1.\n*\n*  IPIV    (output) INTEGER array, dimension (N)\n*          The pivot indices that define the permutation matrix P;\n*          row i of the matrix was interchanged with row IPIV(i).\n*\n*  B       (input/output) COMPLEX array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if INFO = 0, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, U(i,i) is exactly zero.  The factorization\n*                has been completed, but the factor U is exactly\n*                singular, and the solution has not been computed.\n*\n'),(8,'zgbsv_8.txt','      SUBROUTINE ZGBSV( N, KL, KU, NRHS, AB, LDAB, IPIV, B, LDB, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, KL, KU, LDAB, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX*16         AB( LDAB, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZGBSV computes the solution to a complex system of linear equations\n*  A * X = B, where A is a band matrix of order N with KL subdiagonals\n*  and KU superdiagonals, and X and B are N-by-NRHS matrices.\n*\n*  The LU decomposition with partial pivoting and row interchanges is\n*  used to factor A as A = L * U, where L is a product of permutation\n*  and unit lower triangular matrices with KL subdiagonals, and U is\n*  upper triangular with KL+KU superdiagonals.  The factored form of A\n*  is then used to solve the system of equations A * X = B.\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  KL      (input) INTEGER\n*          The number of subdiagonals within the band of A.  KL >= 0.\n*\n*  KU      (input) INTEGER\n*          The number of superdiagonals within the band of A.  KU >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AB      (input/output) COMPLEX*16 array, dimension (LDAB,N)\n*          On entry, the matrix A in band storage, in rows KL+1 to\n*          2*KL+KU+1; rows 1 to KL of the array need not be set.\n*          The j-th column of A is stored in the j-th column of the\n*          array AB as follows:\n*          AB(KL+KU+1+i-j,j) = A(i,j) for max(1,j-KU)<=i<=min(N,j+KL)\n*          On exit, details of the factorization: U is stored as an\n*          upper triangular band matrix with KL+KU superdiagonals in\n*          rows 1 to KL+KU+1, and the multipliers used during the\n*          factorization are stored in rows KL+KU+2 to 2*KL+KU+1.\n*          See below for further details.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= 2*KL+KU+1.\n*\n*  IPIV    (output) INTEGER array, dimension (N)\n*          The pivot indices that define the permutation matrix P;\n*          row i of the matrix was interchanged with row IPIV(i).\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if INFO = 0, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, U(i,i) is exactly zero.  The factorization\n*                has been completed, but the factor U is exactly\n*                singular, and the solution has not been computed.\n*\n'),(9,'sgtsv_9.txt','      SUBROUTINE SGTSV( N, NRHS, DL, D, DU, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      REAL               B( LDB, * ), D( * ), DL( * ), DU( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SGTSV  solves the equation\n*\n*     A*X = B,\n*\n*  where A is an n by n tridiagonal matrix, by Gaussian elimination with\n*  partial pivoting.\n*\n*  Note that the equation  A**T*X = B  may be solved by interchanging the\n*  order of the arguments DU and DL.\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  DL      (input/output) REAL array, dimension (N-1)\n*          On entry, DL must contain the (n-1) sub-diagonal elements of\n*          A.\n*\n*          On exit, DL is overwritten by the (n-2) elements of the\n*          second super-diagonal of the upper triangular matrix U from\n*          the LU factorization of A, in DL(1), ..., DL(n-2).\n*\n*  D       (input/output) REAL array, dimension (N)\n*          On entry, D must contain the diagonal elements of A.\n*\n*          On exit, D is overwritten by the n diagonal elements of U.\n*\n*  DU      (input/output) REAL array, dimension (N-1)\n*          On entry, DU must contain the (n-1) super-diagonal elements\n*          of A.\n*\n*          On exit, DU is overwritten by the (n-1) elements of the first\n*          super-diagonal of U.\n*\n*  B       (input/output) REAL array, dimension (LDB,NRHS)\n*          On entry, the N by NRHS matrix of right hand side matrix B.\n*          On exit, if INFO = 0, the N by NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, U(i,i) is exactly zero, and the solution\n*               has not been computed.  The factorization has not been\n*               completed unless i = N.\n*\n'),(10,'dgtsv_10.txt','      SUBROUTINE DGTSV( N, NRHS, DL, D, DU, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   B( LDB, * ), D( * ), DL( * ), DU( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DGTSV  solves the equation\n*\n*     A*X = B,\n*\n*  where A is an n by n tridiagonal matrix, by Gaussian elimination with\n*  partial pivoting.\n*\n*  Note that the equation  A**T*X = B  may be solved by interchanging the\n*  order of the arguments DU and DL.\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  DL      (input/output) DOUBLE PRECISION array, dimension (N-1)\n*          On entry, DL must contain the (n-1) sub-diagonal elements of\n*          A.\n*\n*          On exit, DL is overwritten by the (n-2) elements of the\n*          second super-diagonal of the upper triangular matrix U from\n*          the LU factorization of A, in DL(1), ..., DL(n-2).\n*\n*  D       (input/output) DOUBLE PRECISION array, dimension (N)\n*          On entry, D must contain the diagonal elements of A.\n*\n*          On exit, D is overwritten by the n diagonal elements of U.\n*\n*  DU      (input/output) DOUBLE PRECISION array, dimension (N-1)\n*          On entry, DU must contain the (n-1) super-diagonal elements\n*          of A.\n*\n*          On exit, DU is overwritten by the (n-1) elements of the first\n*          super-diagonal of U.\n*\n*  B       (input/output) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          On entry, the N by NRHS matrix of right hand side matrix B.\n*          On exit, if INFO = 0, the N by NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, U(i,i) is exactly zero, and the solution\n*               has not been computed.  The factorization has not been\n*               completed unless i = N.\n*\n'),(11,'cgtsv_11.txt','      SUBROUTINE CGTSV( N, NRHS, DL, D, DU, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      COMPLEX            B( LDB, * ), D( * ), DL( * ), DU( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CGTSV  solves the equation\n*\n*     A*X = B,\n*\n*  where A is an N-by-N tridiagonal matrix, by Gaussian elimination with\n*  partial pivoting.\n*\n*  Note that the equation  A**H *X = B  may be solved by interchanging the\n*  order of the arguments DU and DL.\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  DL      (input/output) COMPLEX array, dimension (N-1)\n*          On entry, DL must contain the (n-1) subdiagonal elements of\n*          A.\n*          On exit, DL is overwritten by the (n-2) elements of the\n*          second superdiagonal of the upper triangular matrix U from\n*          the LU factorization of A, in DL(1), ..., DL(n-2).\n*\n*  D       (input/output) COMPLEX array, dimension (N)\n*          On entry, D must contain the diagonal elements of A.\n*          On exit, D is overwritten by the n diagonal elements of U.\n*\n*  DU      (input/output) COMPLEX array, dimension (N-1)\n*          On entry, DU must contain the (n-1) superdiagonal elements\n*          of A.\n*          On exit, DU is overwritten by the (n-1) elements of the first\n*          superdiagonal of U.\n*\n*  B       (input/output) COMPLEX array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if INFO = 0, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, U(i,i) is exactly zero, and the solution\n*                has not been computed.  The factorization has not been\n*                completed unless i = N.\n*\n'),(12,'zgtsv_12.txt','      SUBROUTINE ZGTSV( N, NRHS, DL, D, DU, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      COMPLEX*16         B( LDB, * ), D( * ), DL( * ), DU( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZGTSV  solves the equation\n*\n*     A*X = B,\n*\n*  where A is an N-by-N tridiagonal matrix, by Gaussian elimination with\n*  partial pivoting.\n*\n*  Note that the equation  A**H *X = B  may be solved by interchanging the\n*  order of the arguments DU and DL.\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  DL      (input/output) COMPLEX*16 array, dimension (N-1)\n*          On entry, DL must contain the (n-1) subdiagonal elements of\n*          A.\n*          On exit, DL is overwritten by the (n-2) elements of the\n*          second superdiagonal of the upper triangular matrix U from\n*          the LU factorization of A, in DL(1), ..., DL(n-2).\n*\n*  D       (input/output) COMPLEX*16 array, dimension (N)\n*          On entry, D must contain the diagonal elements of A.\n*          On exit, D is overwritten by the n diagonal elements of U.\n*\n*  DU      (input/output) COMPLEX*16 array, dimension (N-1)\n*          On entry, DU must contain the (n-1) superdiagonal elements\n*          of A.\n*          On exit, DU is overwritten by the (n-1) elements of the first\n*          superdiagonal of U.\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if INFO = 0, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, U(i,i) is exactly zero, and the solution\n*                has not been computed.  The factorization has not been\n*                completed unless i = N.\n*\n'),(13,'chesv_13.txt','      SUBROUTINE CHESV( UPLO, N, NRHS, A, LDA, IPIV, B, LDB, WORK,\n     $                  LWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n* @generated c\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, LDB, LWORK, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX            A( LDA, * ), B( LDB, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CHESV computes the solution to a complex system of linear equations\n*     A * X = B,\n*  where A is an N-by-N Hermitian matrix and X and B are N-by-NRHS\n*  matrices.\n*\n*  The diagonal pivoting method is used to factor A as\n*     A = U * D * U**H,  if UPLO = \'U\', or\n*     A = L * D * L**H,  if UPLO = \'L\',\n*  where U (or L) is a product of permutation and unit upper (lower)\n*  triangular matrices, and D is Hermitian and block diagonal with\n*  1-by-1 and 2-by-2 diagonal blocks.  The factored form of A is then\n*  used to solve the system of equations A * X = B.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  A       (input/output) COMPLEX array, dimension (LDA,N)\n*          On entry, the Hermitian matrix A.  If UPLO = \'U\', the leading\n*          N-by-N upper triangular part of A contains the upper\n*          triangular part of the matrix A, and the strictly lower\n*          triangular part of A is not referenced.  If UPLO = \'L\', the\n*          leading N-by-N lower triangular part of A contains the lower\n*          triangular part of the matrix A, and the strictly upper\n*          triangular part of A is not referenced.\n*\n*          On exit, if INFO = 0, the block diagonal matrix D and the\n*          multipliers used to obtain the factor U or L from the\n*          factorization A = U*D*U**H or A = L*D*L**H as computed by\n*          CHETRF.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (output) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D, as\n*          determined by CHETRF.  If IPIV(k) > 0, then rows and columns\n*          k and IPIV(k) were interchanged, and D(k,k) is a 1-by-1\n*          diagonal block.  If UPLO = \'U\' and IPIV(k) = IPIV(k-1) < 0,\n*          then rows and columns k-1 and -IPIV(k) were interchanged and\n*          D(k-1:k,k-1:k) is a 2-by-2 diagonal block.  If UPLO = \'L\' and\n*          IPIV(k) = IPIV(k+1) < 0, then rows and columns k+1 and\n*          -IPIV(k) were interchanged and D(k:k+1,k:k+1) is a 2-by-2\n*          diagonal block.\n*\n*  B       (input/output) COMPLEX array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if INFO = 0, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  WORK    (workspace/output) COMPLEX array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The length of WORK.  LWORK >= 1, and for best performance\n*          LWORK >= max(1,N*NB), where NB is the optimal blocksize for\n*          CHETRF.\n*          for LWORK < N, TRS will be done with Level BLAS 2\n*          for LWORK >= N, TRS will be done with Level BLAS 3\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, D(i,i) is exactly zero.  The factorization\n*               has been completed, but the block diagonal matrix D is\n*               exactly singular, so the solution could not be computed.\n*\n'),(14,'zhesv_14.txt','      SUBROUTINE ZHESV( UPLO, N, NRHS, A, LDA, IPIV, B, LDB, WORK,\n     $                  LWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n* @precisions normal z -> c\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, LDB, LWORK, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX*16         A( LDA, * ), B( LDB, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZHESV computes the solution to a complex system of linear equations\n*     A * X = B,\n*  where A is an N-by-N Hermitian matrix and X and B are N-by-NRHS\n*  matrices.\n*\n*  The diagonal pivoting method is used to factor A as\n*     A = U * D * U**H,  if UPLO = \'U\', or\n*     A = L * D * L**H,  if UPLO = \'L\',\n*  where U (or L) is a product of permutation and unit upper (lower)\n*  triangular matrices, and D is Hermitian and block diagonal with\n*  1-by-1 and 2-by-2 diagonal blocks.  The factored form of A is then\n*  used to solve the system of equations A * X = B.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  A       (input/output) COMPLEX*16 array, dimension (LDA,N)\n*          On entry, the Hermitian matrix A.  If UPLO = \'U\', the leading\n*          N-by-N upper triangular part of A contains the upper\n*          triangular part of the matrix A, and the strictly lower\n*          triangular part of A is not referenced.  If UPLO = \'L\', the\n*          leading N-by-N lower triangular part of A contains the lower\n*          triangular part of the matrix A, and the strictly upper\n*          triangular part of A is not referenced.\n*\n*          On exit, if INFO = 0, the block diagonal matrix D and the\n*          multipliers used to obtain the factor U or L from the\n*          factorization A = U*D*U**H or A = L*D*L**H as computed by\n*          ZHETRF.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (output) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D, as\n*          determined by ZHETRF.  If IPIV(k) > 0, then rows and columns\n*          k and IPIV(k) were interchanged, and D(k,k) is a 1-by-1\n*          diagonal block.  If UPLO = \'U\' and IPIV(k) = IPIV(k-1) < 0,\n*          then rows and columns k-1 and -IPIV(k) were interchanged and\n*          D(k-1:k,k-1:k) is a 2-by-2 diagonal block.  If UPLO = \'L\' and\n*          IPIV(k) = IPIV(k+1) < 0, then rows and columns k+1 and\n*          -IPIV(k) were interchanged and D(k:k+1,k:k+1) is a 2-by-2\n*          diagonal block.\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if INFO = 0, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  WORK    (workspace/output) COMPLEX*16 array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The length of WORK.  LWORK >= 1, and for best performance\n*          LWORK >= max(1,N*NB), where NB is the optimal blocksize for\n*          ZHETRF.\n*          for LWORK < N, TRS will be done with Level BLAS 2\n*          for LWORK >= N, TRS will be done with Level BLAS 3\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, D(i,i) is exactly zero.  The factorization\n*               has been completed, but the block diagonal matrix D is\n*               exactly singular, so the solution could not be computed.\n*\n'),(15,'chpsv_15.txt','      SUBROUTINE CHPSV( UPLO, N, NRHS, AP, IPIV, B, LDB, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX            AP( * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CHPSV computes the solution to a complex system of linear equations\n*     A * X = B,\n*  where A is an N-by-N Hermitian matrix stored in packed format and X\n*  and B are N-by-NRHS matrices.\n*\n*  The diagonal pivoting method is used to factor A as\n*     A = U * D * U**H,  if UPLO = \'U\', or\n*     A = L * D * L**H,  if UPLO = \'L\',\n*  where U (or L) is a product of permutation and unit upper (lower)\n*  triangular matrices, D is Hermitian and block diagonal with 1-by-1\n*  and 2-by-2 diagonal blocks.  The factored form of A is then used to\n*  solve the system of equations A * X = B.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AP      (input/output) COMPLEX array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the Hermitian matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = A(i,j) for j<=i<=n.\n*          See below for further details.\n*\n*          On exit, the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L from the factorization\n*          A = U*D*U**H or A = L*D*L**H as computed by CHPTRF, stored as\n*          a packed triangular matrix in the same storage format as A.\n*\n*  IPIV    (output) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D, as\n*          determined by CHPTRF.  If IPIV(k) > 0, then rows and columns\n*          k and IPIV(k) were interchanged, and D(k,k) is a 1-by-1\n*          diagonal block.  If UPLO = \'U\' and IPIV(k) = IPIV(k-1) < 0,\n*          then rows and columns k-1 and -IPIV(k) were interchanged and\n*          D(k-1:k,k-1:k) is a 2-by-2 diagonal block.  If UPLO = \'L\' and\n*          IPIV(k) = IPIV(k+1) < 0, then rows and columns k+1 and\n*          -IPIV(k) were interchanged and D(k:k+1,k:k+1) is a 2-by-2\n*          diagonal block.\n*\n*  B       (input/output) COMPLEX array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if INFO = 0, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, D(i,i) is exactly zero.  The factorization\n*                has been completed, but the block diagonal matrix D is\n*                exactly singular, so the solution could not be\n*                computed.\n*\n'),(16,'zhpsv_16.txt','      SUBROUTINE ZHPSV( UPLO, N, NRHS, AP, IPIV, B, LDB, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX*16         AP( * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZHPSV computes the solution to a complex system of linear equations\n*     A * X = B,\n*  where A is an N-by-N Hermitian matrix stored in packed format and X\n*  and B are N-by-NRHS matrices.\n*\n*  The diagonal pivoting method is used to factor A as\n*     A = U * D * U**H,  if UPLO = \'U\', or\n*     A = L * D * L**H,  if UPLO = \'L\',\n*  where U (or L) is a product of permutation and unit upper (lower)\n*  triangular matrices, D is Hermitian and block diagonal with 1-by-1\n*  and 2-by-2 diagonal blocks.  The factored form of A is then used to\n*  solve the system of equations A * X = B.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AP      (input/output) COMPLEX*16 array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the Hermitian matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = A(i,j) for j<=i<=n.\n*          See below for further details.\n*\n*          On exit, the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L from the factorization\n*          A = U*D*U**H or A = L*D*L**H as computed by ZHPTRF, stored as\n*          a packed triangular matrix in the same storage format as A.\n*\n*  IPIV    (output) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D, as\n*          determined by ZHPTRF.  If IPIV(k) > 0, then rows and columns\n*          k and IPIV(k) were interchanged, and D(k,k) is a 1-by-1\n*          diagonal block.  If UPLO = \'U\' and IPIV(k) = IPIV(k-1) < 0,\n*          then rows and columns k-1 and -IPIV(k) were interchanged and\n*          D(k-1:k,k-1:k) is a 2-by-2 diagonal block.  If UPLO = \'L\' and\n*          IPIV(k) = IPIV(k+1) < 0, then rows and columns k+1 and\n*          -IPIV(k) were interchanged and D(k:k+1,k:k+1) is a 2-by-2\n*          diagonal block.\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if INFO = 0, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, D(i,i) is exactly zero.  The factorization\n*                has been completed, but the block diagonal matrix D is\n*                exactly singular, so the solution could not be\n*                computed.\n*\n'),(17,'sposv_17.txt','      SUBROUTINE SPOSV( UPLO, N, NRHS, A, LDA, B, LDB, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      REAL               A( LDA, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SPOSV computes the solution to a real system of linear equations\n*     A * X = B,\n*  where A is an N-by-N symmetric positive definite matrix and X and B\n*  are N-by-NRHS matrices.\n*\n*  The Cholesky decomposition is used to factor A as\n*     A = U**T* U,  if UPLO = \'U\', or\n*     A = L * L**T,  if UPLO = \'L\',\n*  where U is an upper triangular matrix and L is a lower triangular\n*  matrix.  The factored form of A is then used to solve the system of\n*  equations A * X = B.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  A       (input/output) REAL array, dimension (LDA,N)\n*          On entry, the symmetric matrix A.  If UPLO = \'U\', the leading\n*          N-by-N upper triangular part of A contains the upper\n*          triangular part of the matrix A, and the strictly lower\n*          triangular part of A is not referenced.  If UPLO = \'L\', the\n*          leading N-by-N lower triangular part of A contains the lower\n*          triangular part of the matrix A, and the strictly upper\n*          triangular part of A is not referenced.\n*\n*          On exit, if INFO = 0, the factor U or L from the Cholesky\n*          factorization A = U**T*U or A = L*L**T.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  B       (input/output) REAL array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if INFO = 0, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the leading minor of order i of A is not\n*                positive definite, so the factorization could not be\n*                completed, and the solution has not been computed.\n*\n'),(18,'dposv_18.txt','      SUBROUTINE DPOSV( UPLO, N, NRHS, A, LDA, B, LDB, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   A( LDA, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DPOSV computes the solution to a real system of linear equations\n*     A * X = B,\n*  where A is an N-by-N symmetric positive definite matrix and X and B\n*  are N-by-NRHS matrices.\n*\n*  The Cholesky decomposition is used to factor A as\n*     A = U**T* U,  if UPLO = \'U\', or\n*     A = L * L**T,  if UPLO = \'L\',\n*  where U is an upper triangular matrix and L is a lower triangular\n*  matrix.  The factored form of A is then used to solve the system of\n*  equations A * X = B.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  A       (input/output) DOUBLE PRECISION array, dimension (LDA,N)\n*          On entry, the symmetric matrix A.  If UPLO = \'U\', the leading\n*          N-by-N upper triangular part of A contains the upper\n*          triangular part of the matrix A, and the strictly lower\n*          triangular part of A is not referenced.  If UPLO = \'L\', the\n*          leading N-by-N lower triangular part of A contains the lower\n*          triangular part of the matrix A, and the strictly upper\n*          triangular part of A is not referenced.\n*\n*          On exit, if INFO = 0, the factor U or L from the Cholesky\n*          factorization A = U**T*U or A = L*L**T.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  B       (input/output) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if INFO = 0, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the leading minor of order i of A is not\n*                positive definite, so the factorization could not be\n*                completed, and the solution has not been computed.\n*\n'),(19,'cposv_19.txt','      SUBROUTINE CPOSV( UPLO, N, NRHS, A, LDA, B, LDB, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      COMPLEX            A( LDA, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CPOSV computes the solution to a complex system of linear equations\n*     A * X = B,\n*  where A is an N-by-N Hermitian positive definite matrix and X and B\n*  are N-by-NRHS matrices.\n*\n*  The Cholesky decomposition is used to factor A as\n*     A = U**H* U,  if UPLO = \'U\', or\n*     A = L * L**H,  if UPLO = \'L\',\n*  where U is an upper triangular matrix and  L is a lower triangular\n*  matrix.  The factored form of A is then used to solve the system of\n*  equations A * X = B.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  A       (input/output) COMPLEX array, dimension (LDA,N)\n*          On entry, the Hermitian matrix A.  If UPLO = \'U\', the leading\n*          N-by-N upper triangular part of A contains the upper\n*          triangular part of the matrix A, and the strictly lower\n*          triangular part of A is not referenced.  If UPLO = \'L\', the\n*          leading N-by-N lower triangular part of A contains the lower\n*          triangular part of the matrix A, and the strictly upper\n*          triangular part of A is not referenced.\n*\n*          On exit, if INFO = 0, the factor U or L from the Cholesky\n*          factorization A = U**H*U or A = L*L**H.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  B       (input/output) COMPLEX array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if INFO = 0, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the leading minor of order i of A is not\n*                positive definite, so the factorization could not be\n*                completed, and the solution has not been computed.\n*\n'),(20,'zposv_20.txt','      SUBROUTINE ZPOSV( UPLO, N, NRHS, A, LDA, B, LDB, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      COMPLEX*16         A( LDA, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZPOSV computes the solution to a complex system of linear equations\n*     A * X = B,\n*  where A is an N-by-N Hermitian positive definite matrix and X and B\n*  are N-by-NRHS matrices.\n*\n*  The Cholesky decomposition is used to factor A as\n*     A = U**H* U,  if UPLO = \'U\', or\n*     A = L * L**H,  if UPLO = \'L\',\n*  where U is an upper triangular matrix and  L is a lower triangular\n*  matrix.  The factored form of A is then used to solve the system of\n*  equations A * X = B.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  A       (input/output) COMPLEX*16 array, dimension (LDA,N)\n*          On entry, the Hermitian matrix A.  If UPLO = \'U\', the leading\n*          N-by-N upper triangular part of A contains the upper\n*          triangular part of the matrix A, and the strictly lower\n*          triangular part of A is not referenced.  If UPLO = \'L\', the\n*          leading N-by-N lower triangular part of A contains the lower\n*          triangular part of the matrix A, and the strictly upper\n*          triangular part of A is not referenced.\n*\n*          On exit, if INFO = 0, the factor U or L from the Cholesky\n*          factorization A = U**H *U or A = L*L**H.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if INFO = 0, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the leading minor of order i of A is not\n*                positive definite, so the factorization could not be\n*                completed, and the solution has not been computed.\n*\n'),(21,'spbsv_21.txt','      SUBROUTINE SPBSV( UPLO, N, KD, NRHS, AB, LDAB, B, LDB, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, KD, LDAB, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      REAL               AB( LDAB, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SPBSV computes the solution to a real system of linear equations\n*     A * X = B,\n*  where A is an N-by-N symmetric positive definite band matrix and X\n*  and B are N-by-NRHS matrices.\n*\n*  The Cholesky decomposition is used to factor A as\n*     A = U**T * U,  if UPLO = \'U\', or\n*     A = L * L**T,  if UPLO = \'L\',\n*  where U is an upper triangular band matrix, and L is a lower\n*  triangular band matrix, with the same number of superdiagonals or\n*  subdiagonals as A.  The factored form of A is then used to solve the\n*  system of equations A * X = B.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KD >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AB      (input/output) REAL array, dimension (LDAB,N)\n*          On entry, the upper or lower triangle of the symmetric band\n*          matrix A, stored in the first KD+1 rows of the array.  The\n*          j-th column of A is stored in the j-th column of the array AB\n*          as follows:\n*          if UPLO = \'U\', AB(KD+1+i-j,j) = A(i,j) for max(1,j-KD)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(N,j+KD).\n*          See below for further details.\n*\n*          On exit, if INFO = 0, the triangular factor U or L from the\n*          Cholesky factorization A = U**T*U or A = L*L**T of the band\n*          matrix A, in the same storage format as A.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD+1.\n*\n*  B       (input/output) REAL array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if INFO = 0, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the leading minor of order i of A is not\n*                positive definite, so the factorization could not be\n*                completed, and the solution has not been computed.\n*\n'),(22,'dpbsv_22.txt','      SUBROUTINE DPBSV( UPLO, N, KD, NRHS, AB, LDAB, B, LDB, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, KD, LDAB, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   AB( LDAB, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DPBSV computes the solution to a real system of linear equations\n*     A * X = B,\n*  where A is an N-by-N symmetric positive definite band matrix and X\n*  and B are N-by-NRHS matrices.\n*\n*  The Cholesky decomposition is used to factor A as\n*     A = U**T * U,  if UPLO = \'U\', or\n*     A = L * L**T,  if UPLO = \'L\',\n*  where U is an upper triangular band matrix, and L is a lower\n*  triangular band matrix, with the same number of superdiagonals or\n*  subdiagonals as A.  The factored form of A is then used to solve the\n*  system of equations A * X = B.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KD >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AB      (input/output) DOUBLE PRECISION array, dimension (LDAB,N)\n*          On entry, the upper or lower triangle of the symmetric band\n*          matrix A, stored in the first KD+1 rows of the array.  The\n*          j-th column of A is stored in the j-th column of the array AB\n*          as follows:\n*          if UPLO = \'U\', AB(KD+1+i-j,j) = A(i,j) for max(1,j-KD)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(N,j+KD).\n*          See below for further details.\n*\n*          On exit, if INFO = 0, the triangular factor U or L from the\n*          Cholesky factorization A = U**T*U or A = L*L**T of the band\n*          matrix A, in the same storage format as A.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD+1.\n*\n*  B       (input/output) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if INFO = 0, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the leading minor of order i of A is not\n*                positive definite, so the factorization could not be\n*                completed, and the solution has not been computed.\n*\n'),(23,'cpbsv_23.txt','      SUBROUTINE CPBSV( UPLO, N, KD, NRHS, AB, LDAB, B, LDB, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, KD, LDAB, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      COMPLEX            AB( LDAB, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CPBSV computes the solution to a complex system of linear equations\n*     A * X = B,\n*  where A is an N-by-N Hermitian positive definite band matrix and X\n*  and B are N-by-NRHS matrices.\n*\n*  The Cholesky decomposition is used to factor A as\n*     A = U**H * U,  if UPLO = \'U\', or\n*     A = L * L**H,  if UPLO = \'L\',\n*  where U is an upper triangular band matrix, and L is a lower\n*  triangular band matrix, with the same number of superdiagonals or\n*  subdiagonals as A.  The factored form of A is then used to solve the\n*  system of equations A * X = B.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KD >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AB      (input/output) COMPLEX array, dimension (LDAB,N)\n*          On entry, the upper or lower triangle of the Hermitian band\n*          matrix A, stored in the first KD+1 rows of the array.  The\n*          j-th column of A is stored in the j-th column of the array AB\n*          as follows:\n*          if UPLO = \'U\', AB(KD+1+i-j,j) = A(i,j) for max(1,j-KD)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(N,j+KD).\n*          See below for further details.\n*\n*          On exit, if INFO = 0, the triangular factor U or L from the\n*          Cholesky factorization A = U**H*U or A = L*L**H of the band\n*          matrix A, in the same storage format as A.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD+1.\n*\n*  B       (input/output) COMPLEX array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if INFO = 0, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the leading minor of order i of A is not\n*                positive definite, so the factorization could not be\n*                completed, and the solution has not been computed.\n*\n'),(24,'zpbsv_24.txt','      SUBROUTINE ZPBSV( UPLO, N, KD, NRHS, AB, LDAB, B, LDB, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, KD, LDAB, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      COMPLEX*16         AB( LDAB, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZPBSV computes the solution to a complex system of linear equations\n*     A * X = B,\n*  where A is an N-by-N Hermitian positive definite band matrix and X\n*  and B are N-by-NRHS matrices.\n*\n*  The Cholesky decomposition is used to factor A as\n*     A = U**H * U,  if UPLO = \'U\', or\n*     A = L * L**H,  if UPLO = \'L\',\n*  where U is an upper triangular band matrix, and L is a lower\n*  triangular band matrix, with the same number of superdiagonals or\n*  subdiagonals as A.  The factored form of A is then used to solve the\n*  system of equations A * X = B.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KD >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AB      (input/output) COMPLEX*16 array, dimension (LDAB,N)\n*          On entry, the upper or lower triangle of the Hermitian band\n*          matrix A, stored in the first KD+1 rows of the array.  The\n*          j-th column of A is stored in the j-th column of the array AB\n*          as follows:\n*          if UPLO = \'U\', AB(KD+1+i-j,j) = A(i,j) for max(1,j-KD)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(N,j+KD).\n*          See below for further details.\n*\n*          On exit, if INFO = 0, the triangular factor U or L from the\n*          Cholesky factorization A = U**H *U or A = L*L**H of the band\n*          matrix A, in the same storage format as A.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD+1.\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if INFO = 0, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the leading minor of order i of A is not\n*                positive definite, so the factorization could not be\n*                completed, and the solution has not been computed.\n*\n'),(25,'sppsv_25.txt','      SUBROUTINE SPPSV( UPLO, N, NRHS, AP, B, LDB, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      REAL               AP( * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SPPSV computes the solution to a real system of linear equations\n*     A * X = B,\n*  where A is an N-by-N symmetric positive definite matrix stored in\n*  packed format and X and B are N-by-NRHS matrices.\n*\n*  The Cholesky decomposition is used to factor A as\n*     A = U**T* U,  if UPLO = \'U\', or\n*     A = L * L**T,  if UPLO = \'L\',\n*  where U is an upper triangular matrix and L is a lower triangular\n*  matrix.  The factored form of A is then used to solve the system of\n*  equations A * X = B.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AP      (input/output) REAL array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the symmetric matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = A(i,j) for j<=i<=n.\n*          See below for further details.  \n*\n*          On exit, if INFO = 0, the factor U or L from the Cholesky\n*          factorization A = U**T*U or A = L*L**T, in the same storage\n*          format as A.\n*\n*  B       (input/output) REAL array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if INFO = 0, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the leading minor of order i of A is not\n*                positive definite, so the factorization could not be\n*                completed, and the solution has not been computed.\n*\n'),(26,'dppsv_26.txt','      SUBROUTINE DPPSV( UPLO, N, NRHS, AP, B, LDB, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   AP( * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DPPSV computes the solution to a real system of linear equations\n*     A * X = B,\n*  where A is an N-by-N symmetric positive definite matrix stored in\n*  packed format and X and B are N-by-NRHS matrices.\n*\n*  The Cholesky decomposition is used to factor A as\n*     A = U**T* U,  if UPLO = \'U\', or\n*     A = L * L**T,  if UPLO = \'L\',\n*  where U is an upper triangular matrix and L is a lower triangular\n*  matrix.  The factored form of A is then used to solve the system of\n*  equations A * X = B.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AP      (input/output) DOUBLE PRECISION array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the symmetric matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = A(i,j) for j<=i<=n.\n*          See below for further details.\n*\n*          On exit, if INFO = 0, the factor U or L from the Cholesky\n*          factorization A = U**T*U or A = L*L**T, in the same storage\n*          format as A.\n*\n*  B       (input/output) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if INFO = 0, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the leading minor of order i of A is not\n*                positive definite, so the factorization could not be\n*                completed, and the solution has not been computed.\n*\n'),(27,'cppsv_27.txt','      SUBROUTINE CPPSV( UPLO, N, NRHS, AP, B, LDB, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      COMPLEX            AP( * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CPPSV computes the solution to a complex system of linear equations\n*     A * X = B,\n*  where A is an N-by-N Hermitian positive definite matrix stored in\n*  packed format and X and B are N-by-NRHS matrices.\n*\n*  The Cholesky decomposition is used to factor A as\n*     A = U**H * U,  if UPLO = \'U\', or\n*     A = L * L**H,  if UPLO = \'L\',\n*  where U is an upper triangular matrix and L is a lower triangular\n*  matrix.  The factored form of A is then used to solve the system of\n*  equations A * X = B.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AP      (input/output) COMPLEX array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the Hermitian matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = A(i,j) for j<=i<=n.\n*          See below for further details.\n*\n*          On exit, if INFO = 0, the factor U or L from the Cholesky\n*          factorization A = U**H*U or A = L*L**H, in the same storage\n*          format as A.\n*\n*  B       (input/output) COMPLEX array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if INFO = 0, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the leading minor of order i of A is not\n*                positive definite, so the factorization could not be\n*                completed, and the solution has not been computed.\n*\n'),(28,'zppsv_28.txt','      SUBROUTINE ZPPSV( UPLO, N, NRHS, AP, B, LDB, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      COMPLEX*16         AP( * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZPPSV computes the solution to a complex system of linear equations\n*     A * X = B,\n*  where A is an N-by-N Hermitian positive definite matrix stored in\n*  packed format and X and B are N-by-NRHS matrices.\n*\n*  The Cholesky decomposition is used to factor A as\n*     A = U**H * U,  if UPLO = \'U\', or\n*     A = L * L**H,  if UPLO = \'L\',\n*  where U is an upper triangular matrix and L is a lower triangular\n*  matrix.  The factored form of A is then used to solve the system of\n*  equations A * X = B.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AP      (input/output) COMPLEX*16 array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the Hermitian matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = A(i,j) for j<=i<=n.\n*          See below for further details.\n*\n*          On exit, if INFO = 0, the factor U or L from the Cholesky\n*          factorization A = U**H*U or A = L*L**H, in the same storage\n*          format as A.\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if INFO = 0, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the leading minor of order i of A is not\n*                positive definite, so the factorization could not be\n*                completed, and the solution has not been computed.\n*\n'),(29,'sptsv_29.txt','      SUBROUTINE SPTSV( N, NRHS, D, E, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      REAL               B( LDB, * ), D( * ), E( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SPTSV computes the solution to a real system of linear equations\n*  A*X = B, where A is an N-by-N symmetric positive definite tridiagonal\n*  matrix, and X and B are N-by-NRHS matrices.\n*\n*  A is factored as A = L*D*L**T, and the factored form of A is then\n*  used to solve the system of equations.\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  D       (input/output) REAL array, dimension (N)\n*          On entry, the n diagonal elements of the tridiagonal matrix\n*          A.  On exit, the n diagonal elements of the diagonal matrix\n*          D from the factorization A = L*D*L**T.\n*\n*  E       (input/output) REAL array, dimension (N-1)\n*          On entry, the (n-1) subdiagonal elements of the tridiagonal\n*          matrix A.  On exit, the (n-1) subdiagonal elements of the\n*          unit bidiagonal factor L from the L*D*L**T factorization of\n*          A.  (E can also be regarded as the superdiagonal of the unit\n*          bidiagonal factor U from the U**T*D*U factorization of A.)\n*\n*  B       (input/output) REAL array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if INFO = 0, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the leading minor of order i is not\n*                positive definite, and the solution has not been\n*                computed.  The factorization has not been completed\n*                unless i = N.\n*\n'),(30,'dptsv_30.txt','      SUBROUTINE DPTSV( N, NRHS, D, E, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   B( LDB, * ), D( * ), E( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DPTSV computes the solution to a real system of linear equations\n*  A*X = B, where A is an N-by-N symmetric positive definite tridiagonal\n*  matrix, and X and B are N-by-NRHS matrices.\n*\n*  A is factored as A = L*D*L**T, and the factored form of A is then\n*  used to solve the system of equations.\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  D       (input/output) DOUBLE PRECISION array, dimension (N)\n*          On entry, the n diagonal elements of the tridiagonal matrix\n*          A.  On exit, the n diagonal elements of the diagonal matrix\n*          D from the factorization A = L*D*L**T.\n*\n*  E       (input/output) DOUBLE PRECISION array, dimension (N-1)\n*          On entry, the (n-1) subdiagonal elements of the tridiagonal\n*          matrix A.  On exit, the (n-1) subdiagonal elements of the\n*          unit bidiagonal factor L from the L*D*L**T factorization of\n*          A.  (E can also be regarded as the superdiagonal of the unit\n*          bidiagonal factor U from the U**T*D*U factorization of A.)\n*\n*  B       (input/output) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if INFO = 0, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the leading minor of order i is not\n*                positive definite, and the solution has not been\n*                computed.  The factorization has not been completed\n*                unless i = N.\n*\n'),(31,'cptsv_31.txt','      SUBROUTINE CPTSV( N, NRHS, D, E, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      REAL               D( * )\n      COMPLEX            B( LDB, * ), E( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CPTSV computes the solution to a complex system of linear equations\n*  A*X = B, where A is an N-by-N Hermitian positive definite tridiagonal\n*  matrix, and X and B are N-by-NRHS matrices.\n*\n*  A is factored as A = L*D*L**H, and the factored form of A is then\n*  used to solve the system of equations.\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  D       (input/output) REAL array, dimension (N)\n*          On entry, the n diagonal elements of the tridiagonal matrix\n*          A.  On exit, the n diagonal elements of the diagonal matrix\n*          D from the factorization A = L*D*L**H.\n*\n*  E       (input/output) COMPLEX array, dimension (N-1)\n*          On entry, the (n-1) subdiagonal elements of the tridiagonal\n*          matrix A.  On exit, the (n-1) subdiagonal elements of the\n*          unit bidiagonal factor L from the L*D*L**H factorization of\n*          A.  E can also be regarded as the superdiagonal of the unit\n*          bidiagonal factor U from the U**H*D*U factorization of A.\n*\n*  B       (input/output) COMPLEX array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if INFO = 0, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the leading minor of order i is not\n*                positive definite, and the solution has not been\n*                computed.  The factorization has not been completed\n*                unless i = N.\n*\n'),(32,'zptsv_32.txt','      SUBROUTINE ZPTSV( N, NRHS, D, E, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   D( * )\n      COMPLEX*16         B( LDB, * ), E( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZPTSV computes the solution to a complex system of linear equations\n*  A*X = B, where A is an N-by-N Hermitian positive definite tridiagonal\n*  matrix, and X and B are N-by-NRHS matrices.\n*\n*  A is factored as A = L*D*L**H, and the factored form of A is then\n*  used to solve the system of equations.\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  D       (input/output) DOUBLE PRECISION array, dimension (N)\n*          On entry, the n diagonal elements of the tridiagonal matrix\n*          A.  On exit, the n diagonal elements of the diagonal matrix\n*          D from the factorization A = L*D*L**H.\n*\n*  E       (input/output) COMPLEX*16 array, dimension (N-1)\n*          On entry, the (n-1) subdiagonal elements of the tridiagonal\n*          matrix A.  On exit, the (n-1) subdiagonal elements of the\n*          unit bidiagonal factor L from the L*D*L**H factorization of\n*          A.  E can also be regarded as the superdiagonal of the unit\n*          bidiagonal factor U from the U**H*D*U factorization of A.\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if INFO = 0, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the leading minor of order i is not\n*                positive definite, and the solution has not been\n*                computed.  The factorization has not been completed\n*                unless i = N.\n*\n'),(33,'ssysv_33.txt','      SUBROUTINE SSYSV( UPLO, N, NRHS, A, LDA, IPIV, B, LDB, WORK,\n     $                  LWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n* @generated s\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, LDB, LWORK, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      REAL               A( LDA, * ), B( LDB, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SSYSV computes the solution to a real system of linear equations\n*     A * X = B,\n*  where A is an N-by-N symmetric matrix and X and B are N-by-NRHS\n*  matrices.\n*\n*  The diagonal pivoting method is used to factor A as\n*     A = U * D * U**T,  if UPLO = \'U\', or\n*     A = L * D * L**T,  if UPLO = \'L\',\n*  where U (or L) is a product of permutation and unit upper (lower)\n*  triangular matrices, and D is symmetric and block diagonal with\n*  1-by-1 and 2-by-2 diagonal blocks.  The factored form of A is then\n*  used to solve the system of equations A * X = B.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  A       (input/output) REAL array, dimension (LDA,N)\n*          On entry, the symmetric matrix A.  If UPLO = \'U\', the leading\n*          N-by-N upper triangular part of A contains the upper\n*          triangular part of the matrix A, and the strictly lower\n*          triangular part of A is not referenced.  If UPLO = \'L\', the\n*          leading N-by-N lower triangular part of A contains the lower\n*          triangular part of the matrix A, and the strictly upper\n*          triangular part of A is not referenced.\n*\n*          On exit, if INFO = 0, the block diagonal matrix D and the\n*          multipliers used to obtain the factor U or L from the\n*          factorization A = U*D*U**T or A = L*D*L**T as computed by\n*          SSYTRF.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (output) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D, as\n*          determined by SSYTRF.  If IPIV(k) > 0, then rows and columns\n*          k and IPIV(k) were interchanged, and D(k,k) is a 1-by-1\n*          diagonal block.  If UPLO = \'U\' and IPIV(k) = IPIV(k-1) < 0,\n*          then rows and columns k-1 and -IPIV(k) were interchanged and\n*          D(k-1:k,k-1:k) is a 2-by-2 diagonal block.  If UPLO = \'L\' and\n*          IPIV(k) = IPIV(k+1) < 0, then rows and columns k+1 and\n*          -IPIV(k) were interchanged and D(k:k+1,k:k+1) is a 2-by-2\n*          diagonal block.\n*\n*  B       (input/output) REAL array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if INFO = 0, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  WORK    (workspace/output) REAL array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The length of WORK.  LWORK >= 1, and for best performance\n*          LWORK >= max(1,N*NB), where NB is the optimal blocksize for\n*          SSYTRF.\n*          for LWORK < N, TRS will be done with Level BLAS 2\n*          for LWORK >= N, TRS will be done with Level BLAS 3\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, D(i,i) is exactly zero.  The factorization\n*               has been completed, but the block diagonal matrix D is\n*               exactly singular, so the solution could not be computed.\n*\n'),(34,'dsysv_34.txt','      SUBROUTINE DSYSV( UPLO, N, NRHS, A, LDA, IPIV, B, LDB, WORK,\n     $                  LWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n* @generated d\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, LDB, LWORK, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      DOUBLE PRECISION   A( LDA, * ), B( LDB, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DSYSV computes the solution to a real system of linear equations\n*     A * X = B,\n*  where A is an N-by-N symmetric matrix and X and B are N-by-NRHS\n*  matrices.\n*\n*  The diagonal pivoting method is used to factor A as\n*     A = U * D * U**T,  if UPLO = \'U\', or\n*     A = L * D * L**T,  if UPLO = \'L\',\n*  where U (or L) is a product of permutation and unit upper (lower)\n*  triangular matrices, and D is symmetric and block diagonal with\n*  1-by-1 and 2-by-2 diagonal blocks.  The factored form of A is then\n*  used to solve the system of equations A * X = B.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  A       (input/output) DOUBLE PRECISION array, dimension (LDA,N)\n*          On entry, the symmetric matrix A.  If UPLO = \'U\', the leading\n*          N-by-N upper triangular part of A contains the upper\n*          triangular part of the matrix A, and the strictly lower\n*          triangular part of A is not referenced.  If UPLO = \'L\', the\n*          leading N-by-N lower triangular part of A contains the lower\n*          triangular part of the matrix A, and the strictly upper\n*          triangular part of A is not referenced.\n*\n*          On exit, if INFO = 0, the block diagonal matrix D and the\n*          multipliers used to obtain the factor U or L from the\n*          factorization A = U*D*U**T or A = L*D*L**T as computed by\n*          DSYTRF.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (output) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D, as\n*          determined by DSYTRF.  If IPIV(k) > 0, then rows and columns\n*          k and IPIV(k) were interchanged, and D(k,k) is a 1-by-1\n*          diagonal block.  If UPLO = \'U\' and IPIV(k) = IPIV(k-1) < 0,\n*          then rows and columns k-1 and -IPIV(k) were interchanged and\n*          D(k-1:k,k-1:k) is a 2-by-2 diagonal block.  If UPLO = \'L\' and\n*          IPIV(k) = IPIV(k+1) < 0, then rows and columns k+1 and\n*          -IPIV(k) were interchanged and D(k:k+1,k:k+1) is a 2-by-2\n*          diagonal block.\n*\n*  B       (input/output) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if INFO = 0, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  WORK    (workspace/output) DOUBLE PRECISION array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The length of WORK.  LWORK >= 1, and for best performance\n*          LWORK >= max(1,N*NB), where NB is the optimal blocksize for\n*          DSYTRF.\n*          for LWORK < N, TRS will be done with Level BLAS 2\n*          for LWORK >= N, TRS will be done with Level BLAS 3\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, D(i,i) is exactly zero.  The factorization\n*               has been completed, but the block diagonal matrix D is\n*               exactly singular, so the solution could not be computed.\n*\n'),(35,'csysv_35.txt','      SUBROUTINE CSYSV( UPLO, N, NRHS, A, LDA, IPIV, B, LDB, WORK,\n     $                  LWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n* @generated c\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, LDB, LWORK, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX            A( LDA, * ), B( LDB, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CSYSV computes the solution to a complex system of linear equations\n*     A * X = B,\n*  where A is an N-by-N symmetric matrix and X and B are N-by-NRHS\n*  matrices.\n*\n*  The diagonal pivoting method is used to factor A as\n*     A = U * D * U**T,  if UPLO = \'U\', or\n*     A = L * D * L**T,  if UPLO = \'L\',\n*  where U (or L) is a product of permutation and unit upper (lower)\n*  triangular matrices, and D is symmetric and block diagonal with\n*  1-by-1 and 2-by-2 diagonal blocks.  The factored form of A is then\n*  used to solve the system of equations A * X = B.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  A       (input/output) COMPLEX array, dimension (LDA,N)\n*          On entry, the symmetric matrix A.  If UPLO = \'U\', the leading\n*          N-by-N upper triangular part of A contains the upper\n*          triangular part of the matrix A, and the strictly lower\n*          triangular part of A is not referenced.  If UPLO = \'L\', the\n*          leading N-by-N lower triangular part of A contains the lower\n*          triangular part of the matrix A, and the strictly upper\n*          triangular part of A is not referenced.\n*\n*          On exit, if INFO = 0, the block diagonal matrix D and the\n*          multipliers used to obtain the factor U or L from the\n*          factorization A = U*D*U**T or A = L*D*L**T as computed by\n*          CSYTRF.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (output) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D, as\n*          determined by CSYTRF.  If IPIV(k) > 0, then rows and columns\n*          k and IPIV(k) were interchanged, and D(k,k) is a 1-by-1\n*          diagonal block.  If UPLO = \'U\' and IPIV(k) = IPIV(k-1) < 0,\n*          then rows and columns k-1 and -IPIV(k) were interchanged and\n*          D(k-1:k,k-1:k) is a 2-by-2 diagonal block.  If UPLO = \'L\' and\n*          IPIV(k) = IPIV(k+1) < 0, then rows and columns k+1 and\n*          -IPIV(k) were interchanged and D(k:k+1,k:k+1) is a 2-by-2\n*          diagonal block.\n*\n*  B       (input/output) COMPLEX array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if INFO = 0, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  WORK    (workspace/output) COMPLEX array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The length of WORK.  LWORK >= 1, and for best performance\n*          LWORK >= max(1,N*NB), where NB is the optimal blocksize for\n*          CSYTRF.\n*          for LWORK < N, TRS will be done with Level BLAS 2\n*          for LWORK >= N, TRS will be done with Level BLAS 3\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, D(i,i) is exactly zero.  The factorization\n*               has been completed, but the block diagonal matrix D is\n*               exactly singular, so the solution could not be computed.\n*\n'),(36,'zsysv_36.txt','      SUBROUTINE ZSYSV( UPLO, N, NRHS, A, LDA, IPIV, B, LDB, WORK,\n     $                  LWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n* @precisions normal z -> s d c\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, LDB, LWORK, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX*16         A( LDA, * ), B( LDB, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZSYSV computes the solution to a complex system of linear equations\n*     A * X = B,\n*  where A is an N-by-N symmetric matrix and X and B are N-by-NRHS\n*  matrices.\n*\n*  The diagonal pivoting method is used to factor A as\n*     A = U * D * U**T,  if UPLO = \'U\', or\n*     A = L * D * L**T,  if UPLO = \'L\',\n*  where U (or L) is a product of permutation and unit upper (lower)\n*  triangular matrices, and D is symmetric and block diagonal with\n*  1-by-1 and 2-by-2 diagonal blocks.  The factored form of A is then\n*  used to solve the system of equations A * X = B.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  A       (input/output) COMPLEX*16 array, dimension (LDA,N)\n*          On entry, the symmetric matrix A.  If UPLO = \'U\', the leading\n*          N-by-N upper triangular part of A contains the upper\n*          triangular part of the matrix A, and the strictly lower\n*          triangular part of A is not referenced.  If UPLO = \'L\', the\n*          leading N-by-N lower triangular part of A contains the lower\n*          triangular part of the matrix A, and the strictly upper\n*          triangular part of A is not referenced.\n*\n*          On exit, if INFO = 0, the block diagonal matrix D and the\n*          multipliers used to obtain the factor U or L from the\n*          factorization A = U*D*U**T or A = L*D*L**T as computed by\n*          ZSYTRF.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (output) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D, as\n*          determined by ZSYTRF.  If IPIV(k) > 0, then rows and columns\n*          k and IPIV(k) were interchanged, and D(k,k) is a 1-by-1\n*          diagonal block.  If UPLO = \'U\' and IPIV(k) = IPIV(k-1) < 0,\n*          then rows and columns k-1 and -IPIV(k) were interchanged and\n*          D(k-1:k,k-1:k) is a 2-by-2 diagonal block.  If UPLO = \'L\' and\n*          IPIV(k) = IPIV(k+1) < 0, then rows and columns k+1 and\n*          -IPIV(k) were interchanged and D(k:k+1,k:k+1) is a 2-by-2\n*          diagonal block.\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if INFO = 0, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  WORK    (workspace/output) COMPLEX*16 array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The length of WORK.  LWORK >= 1, and for best performance\n*          LWORK >= max(1,N*NB), where NB is the optimal blocksize for\n*          ZSYTRF.\n*          for LWORK < N, TRS will be done with Level BLAS 2\n*          for LWORK >= N, TRS will be done with Level BLAS 3\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, D(i,i) is exactly zero.  The factorization\n*               has been completed, but the block diagonal matrix D is\n*               exactly singular, so the solution could not be computed.\n*\n'),(37,'sspsv_37.txt','      SUBROUTINE SSPSV( UPLO, N, NRHS, AP, IPIV, B, LDB, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      REAL               AP( * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SSPSV computes the solution to a real system of linear equations\n*     A * X = B,\n*  where A is an N-by-N symmetric matrix stored in packed format and X\n*  and B are N-by-NRHS matrices.\n*\n*  The diagonal pivoting method is used to factor A as\n*     A = U * D * U**T,  if UPLO = \'U\', or\n*     A = L * D * L**T,  if UPLO = \'L\',\n*  where U (or L) is a product of permutation and unit upper (lower)\n*  triangular matrices, D is symmetric and block diagonal with 1-by-1\n*  and 2-by-2 diagonal blocks.  The factored form of A is then used to\n*  solve the system of equations A * X = B.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AP      (input/output) REAL array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the symmetric matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = A(i,j) for j<=i<=n.\n*          See below for further details.\n*\n*          On exit, the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L from the factorization\n*          A = U*D*U**T or A = L*D*L**T as computed by SSPTRF, stored as\n*          a packed triangular matrix in the same storage format as A.\n*\n*  IPIV    (output) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D, as\n*          determined by SSPTRF.  If IPIV(k) > 0, then rows and columns\n*          k and IPIV(k) were interchanged, and D(k,k) is a 1-by-1\n*          diagonal block.  If UPLO = \'U\' and IPIV(k) = IPIV(k-1) < 0,\n*          then rows and columns k-1 and -IPIV(k) were interchanged and\n*          D(k-1:k,k-1:k) is a 2-by-2 diagonal block.  If UPLO = \'L\' and\n*          IPIV(k) = IPIV(k+1) < 0, then rows and columns k+1 and\n*          -IPIV(k) were interchanged and D(k:k+1,k:k+1) is a 2-by-2\n*          diagonal block.\n*\n*  B       (input/output) REAL array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if INFO = 0, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, D(i,i) is exactly zero.  The factorization\n*                has been completed, but the block diagonal matrix D is\n*                exactly singular, so the solution could not be\n*                computed.\n*\n'),(38,'dspsv_38.txt','      SUBROUTINE DSPSV( UPLO, N, NRHS, AP, IPIV, B, LDB, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      DOUBLE PRECISION   AP( * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DSPSV computes the solution to a real system of linear equations\n*     A * X = B,\n*  where A is an N-by-N symmetric matrix stored in packed format and X\n*  and B are N-by-NRHS matrices.\n*\n*  The diagonal pivoting method is used to factor A as\n*     A = U * D * U**T,  if UPLO = \'U\', or\n*     A = L * D * L**T,  if UPLO = \'L\',\n*  where U (or L) is a product of permutation and unit upper (lower)\n*  triangular matrices, D is symmetric and block diagonal with 1-by-1\n*  and 2-by-2 diagonal blocks.  The factored form of A is then used to\n*  solve the system of equations A * X = B.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AP      (input/output) DOUBLE PRECISION array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the symmetric matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = A(i,j) for j<=i<=n.\n*          See below for further details.\n*\n*          On exit, the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L from the factorization\n*          A = U*D*U**T or A = L*D*L**T as computed by DSPTRF, stored as\n*          a packed triangular matrix in the same storage format as A.\n*\n*  IPIV    (output) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D, as\n*          determined by DSPTRF.  If IPIV(k) > 0, then rows and columns\n*          k and IPIV(k) were interchanged, and D(k,k) is a 1-by-1\n*          diagonal block.  If UPLO = \'U\' and IPIV(k) = IPIV(k-1) < 0,\n*          then rows and columns k-1 and -IPIV(k) were interchanged and\n*          D(k-1:k,k-1:k) is a 2-by-2 diagonal block.  If UPLO = \'L\' and\n*          IPIV(k) = IPIV(k+1) < 0, then rows and columns k+1 and\n*          -IPIV(k) were interchanged and D(k:k+1,k:k+1) is a 2-by-2\n*          diagonal block.\n*\n*  B       (input/output) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if INFO = 0, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, D(i,i) is exactly zero.  The factorization\n*                has been completed, but the block diagonal matrix D is\n*                exactly singular, so the solution could not be\n*                computed.\n*\n'),(39,'cspsv_39.txt','      SUBROUTINE CSPSV( UPLO, N, NRHS, AP, IPIV, B, LDB, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX            AP( * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CSPSV computes the solution to a complex system of linear equations\n*     A * X = B,\n*  where A is an N-by-N symmetric matrix stored in packed format and X\n*  and B are N-by-NRHS matrices.\n*\n*  The diagonal pivoting method is used to factor A as\n*     A = U * D * U**T,  if UPLO = \'U\', or\n*     A = L * D * L**T,  if UPLO = \'L\',\n*  where U (or L) is a product of permutation and unit upper (lower)\n*  triangular matrices, D is symmetric and block diagonal with 1-by-1\n*  and 2-by-2 diagonal blocks.  The factored form of A is then used to\n*  solve the system of equations A * X = B.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AP      (input/output) COMPLEX array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the symmetric matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = A(i,j) for j<=i<=n.\n*          See below for further details.\n*\n*          On exit, the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L from the factorization\n*          A = U*D*U**T or A = L*D*L**T as computed by CSPTRF, stored as\n*          a packed triangular matrix in the same storage format as A.\n*\n*  IPIV    (output) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D, as\n*          determined by CSPTRF.  If IPIV(k) > 0, then rows and columns\n*          k and IPIV(k) were interchanged, and D(k,k) is a 1-by-1\n*          diagonal block.  If UPLO = \'U\' and IPIV(k) = IPIV(k-1) < 0,\n*          then rows and columns k-1 and -IPIV(k) were interchanged and\n*          D(k-1:k,k-1:k) is a 2-by-2 diagonal block.  If UPLO = \'L\' and\n*          IPIV(k) = IPIV(k+1) < 0, then rows and columns k+1 and\n*          -IPIV(k) were interchanged and D(k:k+1,k:k+1) is a 2-by-2\n*          diagonal block.\n*\n*  B       (input/output) COMPLEX array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if INFO = 0, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, D(i,i) is exactly zero.  The factorization\n*                has been completed, but the block diagonal matrix D is\n*                exactly singular, so the solution could not be\n*                computed.\n*\n'),(40,'zspsv_40.txt','      SUBROUTINE ZSPSV( UPLO, N, NRHS, AP, IPIV, B, LDB, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX*16         AP( * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZSPSV computes the solution to a complex system of linear equations\n*     A * X = B,\n*  where A is an N-by-N symmetric matrix stored in packed format and X\n*  and B are N-by-NRHS matrices.\n*\n*  The diagonal pivoting method is used to factor A as\n*     A = U * D * U**T,  if UPLO = \'U\', or\n*     A = L * D * L**T,  if UPLO = \'L\',\n*  where U (or L) is a product of permutation and unit upper (lower)\n*  triangular matrices, D is symmetric and block diagonal with 1-by-1\n*  and 2-by-2 diagonal blocks.  The factored form of A is then used to\n*  solve the system of equations A * X = B.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AP      (input/output) COMPLEX*16 array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the symmetric matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = A(i,j) for j<=i<=n.\n*          See below for further details.\n*\n*          On exit, the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L from the factorization\n*          A = U*D*U**T or A = L*D*L**T as computed by ZSPTRF, stored as\n*          a packed triangular matrix in the same storage format as A.\n*\n*  IPIV    (output) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D, as\n*          determined by ZSPTRF.  If IPIV(k) > 0, then rows and columns\n*          k and IPIV(k) were interchanged, and D(k,k) is a 1-by-1\n*          diagonal block.  If UPLO = \'U\' and IPIV(k) = IPIV(k-1) < 0,\n*          then rows and columns k-1 and -IPIV(k) were interchanged and\n*          D(k-1:k,k-1:k) is a 2-by-2 diagonal block.  If UPLO = \'L\' and\n*          IPIV(k) = IPIV(k+1) < 0, then rows and columns k+1 and\n*          -IPIV(k) were interchanged and D(k:k+1,k:k+1) is a 2-by-2\n*          diagonal block.\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if INFO = 0, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, D(i,i) is exactly zero.  The factorization\n*                has been completed, but the block diagonal matrix D is\n*                exactly singular, so the solution could not be\n*                computed.\n*\n'),(41,'sgesvx_41.txt','      SUBROUTINE SGESVX( FACT, TRANS, N, NRHS, A, LDA, AF, LDAF, IPIV,\n     $                   EQUED, R, C, B, LDB, X, LDX, RCOND, FERR, BERR,\n     $                   WORK, IWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          EQUED, FACT, TRANS\n      INTEGER            INFO, LDA, LDAF, LDB, LDX, N, NRHS\n      REAL               RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * ), IWORK( * )\n      REAL               A( LDA, * ), AF( LDAF, * ), B( LDB, * ),\n     $                   BERR( * ), C( * ), FERR( * ), R( * ),\n     $                   WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SGESVX uses the LU factorization to compute the solution to a real\n*  system of linear equations\n*     A * X = B,\n*  where A is an N-by-N matrix and X and B are N-by-NRHS matrices.\n*\n*  Error bounds on the solution and a condition estimate are also\n*  provided.\n*\n*  Description\n*  ===========\n*\n*  The following steps are performed:\n*\n*  1. If FACT = \'E\', real scaling factors are computed to equilibrate\n*     the system:\n*        TRANS = \'N\':  diag(R)*A*diag(C)     *inv(diag(C))*X = diag(R)*B\n*        TRANS = \'T\': (diag(R)*A*diag(C))**T *inv(diag(R))*X = diag(C)*B\n*        TRANS = \'C\': (diag(R)*A*diag(C))**H *inv(diag(R))*X = diag(C)*B\n*     Whether or not the system will be equilibrated depends on the\n*     scaling of the matrix A, but if equilibration is used, A is\n*     overwritten by diag(R)*A*diag(C) and B by diag(R)*B (if TRANS=\'N\')\n*     or diag(C)*B (if TRANS = \'T\' or \'C\').\n*\n*  2. If FACT = \'N\' or \'E\', the LU decomposition is used to factor the\n*     matrix A (after equilibration if FACT = \'E\') as\n*        A = P * L * U,\n*     where P is a permutation matrix, L is a unit lower triangular\n*     matrix, and U is upper triangular.\n*\n*  3. If some U(i,i)=0, so that U is exactly singular, then the routine\n*     returns with INFO = i. Otherwise, the factored form of A is used\n*     to estimate the condition number of the matrix A.  If the\n*     reciprocal of the condition number is less than machine precision,\n*     INFO = N+1 is returned as a warning, but the routine still goes on\n*     to solve for X and compute error bounds as described below.\n*\n*  4. The system of equations is solved for X using the factored form\n*     of A.\n*\n*  5. Iterative refinement is applied to improve the computed solution\n*     matrix and calculate error bounds and backward error estimates\n*     for it.\n*\n*  6. If equilibration was used, the matrix X is premultiplied by\n*     diag(C) (if TRANS = \'N\') or diag(R) (if TRANS = \'T\' or \'C\') so\n*     that it solves the original system before equilibration.\n*\n*  Arguments\n*  =========\n*\n*  FACT    (input) CHARACTER*1\n*          Specifies whether or not the factored form of the matrix A is\n*          supplied on entry, and if not, whether the matrix A should be\n*          equilibrated before it is factored.\n*          = \'F\':  On entry, AF and IPIV contain the factored form of A.\n*                  If EQUED is not \'N\', the matrix A has been\n*                  equilibrated with scaling factors given by R and C.\n*                  A, AF, and IPIV are not modified.\n*          = \'N\':  The matrix A will be copied to AF and factored.\n*          = \'E\':  The matrix A will be equilibrated if necessary, then\n*                  copied to AF and factored.\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Transpose)\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  A       (input/output) REAL array, dimension (LDA,N)\n*          On entry, the N-by-N matrix A.  If FACT = \'F\' and EQUED is\n*          not \'N\', then A must have been equilibrated by the scaling\n*          factors in R and/or C.  A is not modified if FACT = \'F\' or\n*          \'N\', or if FACT = \'E\' and EQUED = \'N\' on exit.\n*\n*          On exit, if EQUED .ne. \'N\', A is scaled as follows:\n*          EQUED = \'R\':  A := diag(R) * A\n*          EQUED = \'C\':  A := A * diag(C)\n*          EQUED = \'B\':  A := diag(R) * A * diag(C).\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  AF      (input or output) REAL array, dimension (LDAF,N)\n*          If FACT = \'F\', then AF is an input argument and on entry\n*          contains the factors L and U from the factorization\n*          A = P*L*U as computed by SGETRF.  If EQUED .ne. \'N\', then\n*          AF is the factored form of the equilibrated matrix A.\n*\n*          If FACT = \'N\', then AF is an output argument and on exit\n*          returns the factors L and U from the factorization A = P*L*U\n*          of the original matrix A.\n*\n*          If FACT = \'E\', then AF is an output argument and on exit\n*          returns the factors L and U from the factorization A = P*L*U\n*          of the equilibrated matrix A (see the description of A for\n*          the form of the equilibrated matrix).\n*\n*  LDAF    (input) INTEGER\n*          The leading dimension of the array AF.  LDAF >= max(1,N).\n*\n*  IPIV    (input or output) INTEGER array, dimension (N)\n*          If FACT = \'F\', then IPIV is an input argument and on entry\n*          contains the pivot indices from the factorization A = P*L*U\n*          as computed by SGETRF; row i of the matrix was interchanged\n*          with row IPIV(i).\n*\n*          If FACT = \'N\', then IPIV is an output argument and on exit\n*          contains the pivot indices from the factorization A = P*L*U\n*          of the original matrix A.\n*\n*          If FACT = \'E\', then IPIV is an output argument and on exit\n*          contains the pivot indices from the factorization A = P*L*U\n*          of the equilibrated matrix A.\n*\n*  EQUED   (input or output) CHARACTER*1\n*          Specifies the form of equilibration that was done.\n*          = \'N\':  No equilibration (always true if FACT = \'N\').\n*          = \'R\':  Row equilibration, i.e., A has been premultiplied by\n*                  diag(R).\n*          = \'C\':  Column equilibration, i.e., A has been postmultiplied\n*                  by diag(C).\n*          = \'B\':  Both row and column equilibration, i.e., A has been\n*                  replaced by diag(R) * A * diag(C).\n*          EQUED is an input argument if FACT = \'F\'; otherwise, it is an\n*          output argument.\n*\n*  R       (input or output) REAL array, dimension (N)\n*          The row scale factors for A.  If EQUED = \'R\' or \'B\', A is\n*          multiplied on the left by diag(R); if EQUED = \'N\' or \'C\', R\n*          is not accessed.  R is an input argument if FACT = \'F\';\n*          otherwise, R is an output argument.  If FACT = \'F\' and\n*          EQUED = \'R\' or \'B\', each element of R must be positive.\n*\n*  C       (input or output) REAL array, dimension (N)\n*          The column scale factors for A.  If EQUED = \'C\' or \'B\', A is\n*          multiplied on the right by diag(C); if EQUED = \'N\' or \'R\', C\n*          is not accessed.  C is an input argument if FACT = \'F\';\n*          otherwise, C is an output argument.  If FACT = \'F\' and\n*          EQUED = \'C\' or \'B\', each element of C must be positive.\n*\n*  B       (input/output) REAL array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit,\n*          if EQUED = \'N\', B is not modified;\n*          if TRANS = \'N\' and EQUED = \'R\' or \'B\', B is overwritten by\n*          diag(R)*B;\n*          if TRANS = \'T\' or \'C\' and EQUED = \'C\' or \'B\', B is\n*          overwritten by diag(C)*B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (output) REAL array, dimension (LDX,NRHS)\n*          If INFO = 0 or INFO = N+1, the N-by-NRHS solution matrix X\n*          to the original system of equations.  Note that A and B are\n*          modified on exit if EQUED .ne. \'N\', and the solution to the\n*          equilibrated system is inv(diag(C))*X if TRANS = \'N\' and\n*          EQUED = \'C\' or \'B\', or inv(diag(R))*X if TRANS = \'T\' or \'C\'\n*          and EQUED = \'R\' or \'B\'.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  RCOND   (output) REAL\n*          The estimate of the reciprocal condition number of the matrix\n*          A after equilibration (if done).  If RCOND is less than the\n*          machine precision (in particular, if RCOND = 0), the matrix\n*          is singular to working precision.  This condition is\n*          indicated by a return code of INFO > 0.\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace/output) REAL array, dimension (4*N)\n*          On exit, WORK(1) contains the reciprocal pivot growth\n*          factor norm(A)/norm(U). The \"max absolute element\" norm is\n*          used. If WORK(1) is much less than 1, then the stability\n*          of the LU factorization of the (equilibrated) matrix A\n*          could be poor. This also means that the solution X, condition\n*          estimator RCOND, and forward error bound FERR could be\n*          unreliable. If factorization fails with 0<INFO<=N, then\n*          WORK(1) contains the reciprocal pivot growth factor for the\n*          leading INFO columns of A.\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is\n*                <= N:  U(i,i) is exactly zero.  The factorization has\n*                       been completed, but the factor U is exactly\n*                       singular, so the solution and error bounds\n*                       could not be computed. RCOND = 0 is returned.\n*                = N+1: U is nonsingular, but RCOND is less than machine\n*                       precision, meaning that the matrix is singular\n*                       to working precision.  Nevertheless, the\n*                       solution and error bounds are computed because\n*                       there are a number of situations where the\n*                       computed solution can be more accurate than the\n*                       value of RCOND would suggest.\n*\n'),(42,'dgesvx_42.txt','      SUBROUTINE DGESVX( FACT, TRANS, N, NRHS, A, LDA, AF, LDAF, IPIV,\n     $                   EQUED, R, C, B, LDB, X, LDX, RCOND, FERR, BERR,\n     $                   WORK, IWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          EQUED, FACT, TRANS\n      INTEGER            INFO, LDA, LDAF, LDB, LDX, N, NRHS\n      DOUBLE PRECISION   RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * ), IWORK( * )\n      DOUBLE PRECISION   A( LDA, * ), AF( LDAF, * ), B( LDB, * ),\n     $                   BERR( * ), C( * ), FERR( * ), R( * ),\n     $                   WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DGESVX uses the LU factorization to compute the solution to a real\n*  system of linear equations\n*     A * X = B,\n*  where A is an N-by-N matrix and X and B are N-by-NRHS matrices.\n*\n*  Error bounds on the solution and a condition estimate are also\n*  provided.\n*\n*  Description\n*  ===========\n*\n*  The following steps are performed:\n*\n*  1. If FACT = \'E\', real scaling factors are computed to equilibrate\n*     the system:\n*        TRANS = \'N\':  diag(R)*A*diag(C)     *inv(diag(C))*X = diag(R)*B\n*        TRANS = \'T\': (diag(R)*A*diag(C))**T *inv(diag(R))*X = diag(C)*B\n*        TRANS = \'C\': (diag(R)*A*diag(C))**H *inv(diag(R))*X = diag(C)*B\n*     Whether or not the system will be equilibrated depends on the\n*     scaling of the matrix A, but if equilibration is used, A is\n*     overwritten by diag(R)*A*diag(C) and B by diag(R)*B (if TRANS=\'N\')\n*     or diag(C)*B (if TRANS = \'T\' or \'C\').\n*\n*  2. If FACT = \'N\' or \'E\', the LU decomposition is used to factor the\n*     matrix A (after equilibration if FACT = \'E\') as\n*        A = P * L * U,\n*     where P is a permutation matrix, L is a unit lower triangular\n*     matrix, and U is upper triangular.\n*\n*  3. If some U(i,i)=0, so that U is exactly singular, then the routine\n*     returns with INFO = i. Otherwise, the factored form of A is used\n*     to estimate the condition number of the matrix A.  If the\n*     reciprocal of the condition number is less than machine precision,\n*     INFO = N+1 is returned as a warning, but the routine still goes on\n*     to solve for X and compute error bounds as described below.\n*\n*  4. The system of equations is solved for X using the factored form\n*     of A.\n*\n*  5. Iterative refinement is applied to improve the computed solution\n*     matrix and calculate error bounds and backward error estimates\n*     for it.\n*\n*  6. If equilibration was used, the matrix X is premultiplied by\n*     diag(C) (if TRANS = \'N\') or diag(R) (if TRANS = \'T\' or \'C\') so\n*     that it solves the original system before equilibration.\n*\n*  Arguments\n*  =========\n*\n*  FACT    (input) CHARACTER*1\n*          Specifies whether or not the factored form of the matrix A is\n*          supplied on entry, and if not, whether the matrix A should be\n*          equilibrated before it is factored.\n*          = \'F\':  On entry, AF and IPIV contain the factored form of A.\n*                  If EQUED is not \'N\', the matrix A has been\n*                  equilibrated with scaling factors given by R and C.\n*                  A, AF, and IPIV are not modified.\n*          = \'N\':  The matrix A will be copied to AF and factored.\n*          = \'E\':  The matrix A will be equilibrated if necessary, then\n*                  copied to AF and factored.\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Transpose)\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  A       (input/output) DOUBLE PRECISION array, dimension (LDA,N)\n*          On entry, the N-by-N matrix A.  If FACT = \'F\' and EQUED is\n*          not \'N\', then A must have been equilibrated by the scaling\n*          factors in R and/or C.  A is not modified if FACT = \'F\' or\n*          \'N\', or if FACT = \'E\' and EQUED = \'N\' on exit.\n*\n*          On exit, if EQUED .ne. \'N\', A is scaled as follows:\n*          EQUED = \'R\':  A := diag(R) * A\n*          EQUED = \'C\':  A := A * diag(C)\n*          EQUED = \'B\':  A := diag(R) * A * diag(C).\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  AF      (input or output) DOUBLE PRECISION array, dimension (LDAF,N)\n*          If FACT = \'F\', then AF is an input argument and on entry\n*          contains the factors L and U from the factorization\n*          A = P*L*U as computed by DGETRF.  If EQUED .ne. \'N\', then\n*          AF is the factored form of the equilibrated matrix A.\n*\n*          If FACT = \'N\', then AF is an output argument and on exit\n*          returns the factors L and U from the factorization A = P*L*U\n*          of the original matrix A.\n*\n*          If FACT = \'E\', then AF is an output argument and on exit\n*          returns the factors L and U from the factorization A = P*L*U\n*          of the equilibrated matrix A (see the description of A for\n*          the form of the equilibrated matrix).\n*\n*  LDAF    (input) INTEGER\n*          The leading dimension of the array AF.  LDAF >= max(1,N).\n*\n*  IPIV    (input or output) INTEGER array, dimension (N)\n*          If FACT = \'F\', then IPIV is an input argument and on entry\n*          contains the pivot indices from the factorization A = P*L*U\n*          as computed by DGETRF; row i of the matrix was interchanged\n*          with row IPIV(i).\n*\n*          If FACT = \'N\', then IPIV is an output argument and on exit\n*          contains the pivot indices from the factorization A = P*L*U\n*          of the original matrix A.\n*\n*          If FACT = \'E\', then IPIV is an output argument and on exit\n*          contains the pivot indices from the factorization A = P*L*U\n*          of the equilibrated matrix A.\n*\n*  EQUED   (input or output) CHARACTER*1\n*          Specifies the form of equilibration that was done.\n*          = \'N\':  No equilibration (always true if FACT = \'N\').\n*          = \'R\':  Row equilibration, i.e., A has been premultiplied by\n*                  diag(R).\n*          = \'C\':  Column equilibration, i.e., A has been postmultiplied\n*                  by diag(C).\n*          = \'B\':  Both row and column equilibration, i.e., A has been\n*                  replaced by diag(R) * A * diag(C).\n*          EQUED is an input argument if FACT = \'F\'; otherwise, it is an\n*          output argument.\n*\n*  R       (input or output) DOUBLE PRECISION array, dimension (N)\n*          The row scale factors for A.  If EQUED = \'R\' or \'B\', A is\n*          multiplied on the left by diag(R); if EQUED = \'N\' or \'C\', R\n*          is not accessed.  R is an input argument if FACT = \'F\';\n*          otherwise, R is an output argument.  If FACT = \'F\' and\n*          EQUED = \'R\' or \'B\', each element of R must be positive.\n*\n*  C       (input or output) DOUBLE PRECISION array, dimension (N)\n*          The column scale factors for A.  If EQUED = \'C\' or \'B\', A is\n*          multiplied on the right by diag(C); if EQUED = \'N\' or \'R\', C\n*          is not accessed.  C is an input argument if FACT = \'F\';\n*          otherwise, C is an output argument.  If FACT = \'F\' and\n*          EQUED = \'C\' or \'B\', each element of C must be positive.\n*\n*  B       (input/output) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit,\n*          if EQUED = \'N\', B is not modified;\n*          if TRANS = \'N\' and EQUED = \'R\' or \'B\', B is overwritten by\n*          diag(R)*B;\n*          if TRANS = \'T\' or \'C\' and EQUED = \'C\' or \'B\', B is\n*          overwritten by diag(C)*B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (output) DOUBLE PRECISION array, dimension (LDX,NRHS)\n*          If INFO = 0 or INFO = N+1, the N-by-NRHS solution matrix X\n*          to the original system of equations.  Note that A and B are\n*          modified on exit if EQUED .ne. \'N\', and the solution to the\n*          equilibrated system is inv(diag(C))*X if TRANS = \'N\' and\n*          EQUED = \'C\' or \'B\', or inv(diag(R))*X if TRANS = \'T\' or \'C\'\n*          and EQUED = \'R\' or \'B\'.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The estimate of the reciprocal condition number of the matrix\n*          A after equilibration (if done).  If RCOND is less than the\n*          machine precision (in particular, if RCOND = 0), the matrix\n*          is singular to working precision.  This condition is\n*          indicated by a return code of INFO > 0.\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace/output) DOUBLE PRECISION array, dimension (4*N)\n*          On exit, WORK(1) contains the reciprocal pivot growth\n*          factor norm(A)/norm(U). The \"max absolute element\" norm is\n*          used. If WORK(1) is much less than 1, then the stability\n*          of the LU factorization of the (equilibrated) matrix A\n*          could be poor. This also means that the solution X, condition\n*          estimator RCOND, and forward error bound FERR could be\n*          unreliable. If factorization fails with 0<INFO<=N, then\n*          WORK(1) contains the reciprocal pivot growth factor for the\n*          leading INFO columns of A.\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is\n*                <= N:  U(i,i) is exactly zero.  The factorization has\n*                       been completed, but the factor U is exactly\n*                       singular, so the solution and error bounds\n*                       could not be computed. RCOND = 0 is returned.\n*                = N+1: U is nonsingular, but RCOND is less than machine\n*                       precision, meaning that the matrix is singular\n*                       to working precision.  Nevertheless, the\n*                       solution and error bounds are computed because\n*                       there are a number of situations where the\n*                       computed solution can be more accurate than the\n*                       value of RCOND would suggest.\n*\n'),(43,'cgesvx_43.txt','      SUBROUTINE CGESVX( FACT, TRANS, N, NRHS, A, LDA, AF, LDAF, IPIV,\n     $                   EQUED, R, C, B, LDB, X, LDX, RCOND, FERR, BERR,\n     $                   WORK, RWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          EQUED, FACT, TRANS\n      INTEGER            INFO, LDA, LDAF, LDB, LDX, N, NRHS\n      REAL               RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      REAL               BERR( * ), C( * ), FERR( * ), R( * ),\n     $                   RWORK( * )\n      COMPLEX            A( LDA, * ), AF( LDAF, * ), B( LDB, * ),\n     $                   WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CGESVX uses the LU factorization to compute the solution to a complex\n*  system of linear equations\n*     A * X = B,\n*  where A is an N-by-N matrix and X and B are N-by-NRHS matrices.\n*\n*  Error bounds on the solution and a condition estimate are also\n*  provided.\n*\n*  Description\n*  ===========\n*\n*  The following steps are performed:\n*\n*  1. If FACT = \'E\', real scaling factors are computed to equilibrate\n*     the system:\n*        TRANS = \'N\':  diag(R)*A*diag(C)     *inv(diag(C))*X = diag(R)*B\n*        TRANS = \'T\': (diag(R)*A*diag(C))**T *inv(diag(R))*X = diag(C)*B\n*        TRANS = \'C\': (diag(R)*A*diag(C))**H *inv(diag(R))*X = diag(C)*B\n*     Whether or not the system will be equilibrated depends on the\n*     scaling of the matrix A, but if equilibration is used, A is\n*     overwritten by diag(R)*A*diag(C) and B by diag(R)*B (if TRANS=\'N\')\n*     or diag(C)*B (if TRANS = \'T\' or \'C\').\n*\n*  2. If FACT = \'N\' or \'E\', the LU decomposition is used to factor the\n*     matrix A (after equilibration if FACT = \'E\') as\n*        A = P * L * U,\n*     where P is a permutation matrix, L is a unit lower triangular\n*     matrix, and U is upper triangular.\n*\n*  3. If some U(i,i)=0, so that U is exactly singular, then the routine\n*     returns with INFO = i. Otherwise, the factored form of A is used\n*     to estimate the condition number of the matrix A.  If the\n*     reciprocal of the condition number is less than machine precision,\n*     INFO = N+1 is returned as a warning, but the routine still goes on\n*     to solve for X and compute error bounds as described below.\n*\n*  4. The system of equations is solved for X using the factored form\n*     of A.\n*\n*  5. Iterative refinement is applied to improve the computed solution\n*     matrix and calculate error bounds and backward error estimates\n*     for it.\n*\n*  6. If equilibration was used, the matrix X is premultiplied by\n*     diag(C) (if TRANS = \'N\') or diag(R) (if TRANS = \'T\' or \'C\') so\n*     that it solves the original system before equilibration.\n*\n*  Arguments\n*  =========\n*\n*  FACT    (input) CHARACTER*1\n*          Specifies whether or not the factored form of the matrix A is\n*          supplied on entry, and if not, whether the matrix A should be\n*          equilibrated before it is factored.\n*          = \'F\':  On entry, AF and IPIV contain the factored form of A.\n*                  If EQUED is not \'N\', the matrix A has been\n*                  equilibrated with scaling factors given by R and C.\n*                  A, AF, and IPIV are not modified.\n*          = \'N\':  The matrix A will be copied to AF and factored.\n*          = \'E\':  The matrix A will be equilibrated if necessary, then\n*                  copied to AF and factored.\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose)\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  A       (input/output) COMPLEX array, dimension (LDA,N)\n*          On entry, the N-by-N matrix A.  If FACT = \'F\' and EQUED is\n*          not \'N\', then A must have been equilibrated by the scaling\n*          factors in R and/or C.  A is not modified if FACT = \'F\' or\n*          \'N\', or if FACT = \'E\' and EQUED = \'N\' on exit.\n*\n*          On exit, if EQUED .ne. \'N\', A is scaled as follows:\n*          EQUED = \'R\':  A := diag(R) * A\n*          EQUED = \'C\':  A := A * diag(C)\n*          EQUED = \'B\':  A := diag(R) * A * diag(C).\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  AF      (input or output) COMPLEX array, dimension (LDAF,N)\n*          If FACT = \'F\', then AF is an input argument and on entry\n*          contains the factors L and U from the factorization\n*          A = P*L*U as computed by CGETRF.  If EQUED .ne. \'N\', then\n*          AF is the factored form of the equilibrated matrix A.\n*\n*          If FACT = \'N\', then AF is an output argument and on exit\n*          returns the factors L and U from the factorization A = P*L*U\n*          of the original matrix A.\n*\n*          If FACT = \'E\', then AF is an output argument and on exit\n*          returns the factors L and U from the factorization A = P*L*U\n*          of the equilibrated matrix A (see the description of A for\n*          the form of the equilibrated matrix).\n*\n*  LDAF    (input) INTEGER\n*          The leading dimension of the array AF.  LDAF >= max(1,N).\n*\n*  IPIV    (input or output) INTEGER array, dimension (N)\n*          If FACT = \'F\', then IPIV is an input argument and on entry\n*          contains the pivot indices from the factorization A = P*L*U\n*          as computed by CGETRF; row i of the matrix was interchanged\n*          with row IPIV(i).\n*\n*          If FACT = \'N\', then IPIV is an output argument and on exit\n*          contains the pivot indices from the factorization A = P*L*U\n*          of the original matrix A.\n*\n*          If FACT = \'E\', then IPIV is an output argument and on exit\n*          contains the pivot indices from the factorization A = P*L*U\n*          of the equilibrated matrix A.\n*\n*  EQUED   (input or output) CHARACTER*1\n*          Specifies the form of equilibration that was done.\n*          = \'N\':  No equilibration (always true if FACT = \'N\').\n*          = \'R\':  Row equilibration, i.e., A has been premultiplied by\n*                  diag(R).\n*          = \'C\':  Column equilibration, i.e., A has been postmultiplied\n*                  by diag(C).\n*          = \'B\':  Both row and column equilibration, i.e., A has been\n*                  replaced by diag(R) * A * diag(C).\n*          EQUED is an input argument if FACT = \'F\'; otherwise, it is an\n*          output argument.\n*\n*  R       (input or output) REAL array, dimension (N)\n*          The row scale factors for A.  If EQUED = \'R\' or \'B\', A is\n*          multiplied on the left by diag(R); if EQUED = \'N\' or \'C\', R\n*          is not accessed.  R is an input argument if FACT = \'F\';\n*          otherwise, R is an output argument.  If FACT = \'F\' and\n*          EQUED = \'R\' or \'B\', each element of R must be positive.\n*\n*  C       (input or output) REAL array, dimension (N)\n*          The column scale factors for A.  If EQUED = \'C\' or \'B\', A is\n*          multiplied on the right by diag(C); if EQUED = \'N\' or \'R\', C\n*          is not accessed.  C is an input argument if FACT = \'F\';\n*          otherwise, C is an output argument.  If FACT = \'F\' and\n*          EQUED = \'C\' or \'B\', each element of C must be positive.\n*\n*  B       (input/output) COMPLEX array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit,\n*          if EQUED = \'N\', B is not modified;\n*          if TRANS = \'N\' and EQUED = \'R\' or \'B\', B is overwritten by\n*          diag(R)*B;\n*          if TRANS = \'T\' or \'C\' and EQUED = \'C\' or \'B\', B is\n*          overwritten by diag(C)*B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (output) COMPLEX array, dimension (LDX,NRHS)\n*          If INFO = 0 or INFO = N+1, the N-by-NRHS solution matrix X\n*          to the original system of equations.  Note that A and B are\n*          modified on exit if EQUED .ne. \'N\', and the solution to the\n*          equilibrated system is inv(diag(C))*X if TRANS = \'N\' and\n*          EQUED = \'C\' or \'B\', or inv(diag(R))*X if TRANS = \'T\' or \'C\'\n*          and EQUED = \'R\' or \'B\'.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  RCOND   (output) REAL\n*          The estimate of the reciprocal condition number of the matrix\n*          A after equilibration (if done).  If RCOND is less than the\n*          machine precision (in particular, if RCOND = 0), the matrix\n*          is singular to working precision.  This condition is\n*          indicated by a return code of INFO > 0.\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX array, dimension (2*N)\n*\n*  RWORK   (workspace/output) REAL array, dimension (2*N)\n*          On exit, RWORK(1) contains the reciprocal pivot growth\n*          factor norm(A)/norm(U). The \"max absolute element\" norm is\n*          used. If RWORK(1) is much less than 1, then the stability\n*          of the LU factorization of the (equilibrated) matrix A\n*          could be poor. This also means that the solution X, condition\n*          estimator RCOND, and forward error bound FERR could be\n*          unreliable. If factorization fails with 0<INFO<=N, then\n*          RWORK(1) contains the reciprocal pivot growth factor for the\n*          leading INFO columns of A.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is\n*                <= N:  U(i,i) is exactly zero.  The factorization has\n*                       been completed, but the factor U is exactly\n*                       singular, so the solution and error bounds\n*                       could not be computed. RCOND = 0 is returned.\n*                = N+1: U is nonsingular, but RCOND is less than machine\n*                       precision, meaning that the matrix is singular\n*                       to working precision.  Nevertheless, the\n*                       solution and error bounds are computed because\n*                       there are a number of situations where the\n*                       computed solution can be more accurate than the\n*                       value of RCOND would suggest.\n*\n'),(44,'zgesvx_44.txt','      SUBROUTINE ZGESVX( FACT, TRANS, N, NRHS, A, LDA, AF, LDAF, IPIV,\n     $                   EQUED, R, C, B, LDB, X, LDX, RCOND, FERR, BERR,\n     $                   WORK, RWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          EQUED, FACT, TRANS\n      INTEGER            INFO, LDA, LDAF, LDB, LDX, N, NRHS\n      DOUBLE PRECISION   RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      DOUBLE PRECISION   BERR( * ), C( * ), FERR( * ), R( * ),\n     $                   RWORK( * )\n      COMPLEX*16         A( LDA, * ), AF( LDAF, * ), B( LDB, * ),\n     $                   WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZGESVX uses the LU factorization to compute the solution to a complex\n*  system of linear equations\n*     A * X = B,\n*  where A is an N-by-N matrix and X and B are N-by-NRHS matrices.\n*\n*  Error bounds on the solution and a condition estimate are also\n*  provided.\n*\n*  Description\n*  ===========\n*\n*  The following steps are performed:\n*\n*  1. If FACT = \'E\', real scaling factors are computed to equilibrate\n*     the system:\n*        TRANS = \'N\':  diag(R)*A*diag(C)     *inv(diag(C))*X = diag(R)*B\n*        TRANS = \'T\': (diag(R)*A*diag(C))**T *inv(diag(R))*X = diag(C)*B\n*        TRANS = \'C\': (diag(R)*A*diag(C))**H *inv(diag(R))*X = diag(C)*B\n*     Whether or not the system will be equilibrated depends on the\n*     scaling of the matrix A, but if equilibration is used, A is\n*     overwritten by diag(R)*A*diag(C) and B by diag(R)*B (if TRANS=\'N\')\n*     or diag(C)*B (if TRANS = \'T\' or \'C\').\n*\n*  2. If FACT = \'N\' or \'E\', the LU decomposition is used to factor the\n*     matrix A (after equilibration if FACT = \'E\') as\n*        A = P * L * U,\n*     where P is a permutation matrix, L is a unit lower triangular\n*     matrix, and U is upper triangular.\n*\n*  3. If some U(i,i)=0, so that U is exactly singular, then the routine\n*     returns with INFO = i. Otherwise, the factored form of A is used\n*     to estimate the condition number of the matrix A.  If the\n*     reciprocal of the condition number is less than machine precision,\n*     INFO = N+1 is returned as a warning, but the routine still goes on\n*     to solve for X and compute error bounds as described below.\n*\n*  4. The system of equations is solved for X using the factored form\n*     of A.\n*\n*  5. Iterative refinement is applied to improve the computed solution\n*     matrix and calculate error bounds and backward error estimates\n*     for it.\n*\n*  6. If equilibration was used, the matrix X is premultiplied by\n*     diag(C) (if TRANS = \'N\') or diag(R) (if TRANS = \'T\' or \'C\') so\n*     that it solves the original system before equilibration.\n*\n*  Arguments\n*  =========\n*\n*  FACT    (input) CHARACTER*1\n*          Specifies whether or not the factored form of the matrix A is\n*          supplied on entry, and if not, whether the matrix A should be\n*          equilibrated before it is factored.\n*          = \'F\':  On entry, AF and IPIV contain the factored form of A.\n*                  If EQUED is not \'N\', the matrix A has been\n*                  equilibrated with scaling factors given by R and C.\n*                  A, AF, and IPIV are not modified.\n*          = \'N\':  The matrix A will be copied to AF and factored.\n*          = \'E\':  The matrix A will be equilibrated if necessary, then\n*                  copied to AF and factored.\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose)\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  A       (input/output) COMPLEX*16 array, dimension (LDA,N)\n*          On entry, the N-by-N matrix A.  If FACT = \'F\' and EQUED is\n*          not \'N\', then A must have been equilibrated by the scaling\n*          factors in R and/or C.  A is not modified if FACT = \'F\' or\n*          \'N\', or if FACT = \'E\' and EQUED = \'N\' on exit.\n*\n*          On exit, if EQUED .ne. \'N\', A is scaled as follows:\n*          EQUED = \'R\':  A := diag(R) * A\n*          EQUED = \'C\':  A := A * diag(C)\n*          EQUED = \'B\':  A := diag(R) * A * diag(C).\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  AF      (input or output) COMPLEX*16 array, dimension (LDAF,N)\n*          If FACT = \'F\', then AF is an input argument and on entry\n*          contains the factors L and U from the factorization\n*          A = P*L*U as computed by ZGETRF.  If EQUED .ne. \'N\', then\n*          AF is the factored form of the equilibrated matrix A.\n*\n*          If FACT = \'N\', then AF is an output argument and on exit\n*          returns the factors L and U from the factorization A = P*L*U\n*          of the original matrix A.\n*\n*          If FACT = \'E\', then AF is an output argument and on exit\n*          returns the factors L and U from the factorization A = P*L*U\n*          of the equilibrated matrix A (see the description of A for\n*          the form of the equilibrated matrix).\n*\n*  LDAF    (input) INTEGER\n*          The leading dimension of the array AF.  LDAF >= max(1,N).\n*\n*  IPIV    (input or output) INTEGER array, dimension (N)\n*          If FACT = \'F\', then IPIV is an input argument and on entry\n*          contains the pivot indices from the factorization A = P*L*U\n*          as computed by ZGETRF; row i of the matrix was interchanged\n*          with row IPIV(i).\n*\n*          If FACT = \'N\', then IPIV is an output argument and on exit\n*          contains the pivot indices from the factorization A = P*L*U\n*          of the original matrix A.\n*\n*          If FACT = \'E\', then IPIV is an output argument and on exit\n*          contains the pivot indices from the factorization A = P*L*U\n*          of the equilibrated matrix A.\n*\n*  EQUED   (input or output) CHARACTER*1\n*          Specifies the form of equilibration that was done.\n*          = \'N\':  No equilibration (always true if FACT = \'N\').\n*          = \'R\':  Row equilibration, i.e., A has been premultiplied by\n*                  diag(R).\n*          = \'C\':  Column equilibration, i.e., A has been postmultiplied\n*                  by diag(C).\n*          = \'B\':  Both row and column equilibration, i.e., A has been\n*                  replaced by diag(R) * A * diag(C).\n*          EQUED is an input argument if FACT = \'F\'; otherwise, it is an\n*          output argument.\n*\n*  R       (input or output) DOUBLE PRECISION array, dimension (N)\n*          The row scale factors for A.  If EQUED = \'R\' or \'B\', A is\n*          multiplied on the left by diag(R); if EQUED = \'N\' or \'C\', R\n*          is not accessed.  R is an input argument if FACT = \'F\';\n*          otherwise, R is an output argument.  If FACT = \'F\' and\n*          EQUED = \'R\' or \'B\', each element of R must be positive.\n*\n*  C       (input or output) DOUBLE PRECISION array, dimension (N)\n*          The column scale factors for A.  If EQUED = \'C\' or \'B\', A is\n*          multiplied on the right by diag(C); if EQUED = \'N\' or \'R\', C\n*          is not accessed.  C is an input argument if FACT = \'F\';\n*          otherwise, C is an output argument.  If FACT = \'F\' and\n*          EQUED = \'C\' or \'B\', each element of C must be positive.\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit,\n*          if EQUED = \'N\', B is not modified;\n*          if TRANS = \'N\' and EQUED = \'R\' or \'B\', B is overwritten by\n*          diag(R)*B;\n*          if TRANS = \'T\' or \'C\' and EQUED = \'C\' or \'B\', B is\n*          overwritten by diag(C)*B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (output) COMPLEX*16 array, dimension (LDX,NRHS)\n*          If INFO = 0 or INFO = N+1, the N-by-NRHS solution matrix X\n*          to the original system of equations.  Note that A and B are\n*          modified on exit if EQUED .ne. \'N\', and the solution to the\n*          equilibrated system is inv(diag(C))*X if TRANS = \'N\' and\n*          EQUED = \'C\' or \'B\', or inv(diag(R))*X if TRANS = \'T\' or \'C\'\n*          and EQUED = \'R\' or \'B\'.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The estimate of the reciprocal condition number of the matrix\n*          A after equilibration (if done).  If RCOND is less than the\n*          machine precision (in particular, if RCOND = 0), the matrix\n*          is singular to working precision.  This condition is\n*          indicated by a return code of INFO > 0.\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n*\n*  RWORK   (workspace/output) DOUBLE PRECISION array, dimension (2*N)\n*          On exit, RWORK(1) contains the reciprocal pivot growth\n*          factor norm(A)/norm(U). The \"max absolute element\" norm is\n*          used. If RWORK(1) is much less than 1, then the stability\n*          of the LU factorization of the (equilibrated) matrix A\n*          could be poor. This also means that the solution X, condition\n*          estimator RCOND, and forward error bound FERR could be\n*          unreliable. If factorization fails with 0<INFO<=N, then\n*          RWORK(1) contains the reciprocal pivot growth factor for the\n*          leading INFO columns of A.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is\n*                <= N:  U(i,i) is exactly zero.  The factorization has\n*                       been completed, but the factor U is exactly\n*                       singular, so the solution and error bounds\n*                       could not be computed. RCOND = 0 is returned.\n*                = N+1: U is nonsingular, but RCOND is less than machine\n*                       precision, meaning that the matrix is singular\n*                       to working precision.  Nevertheless, the\n*                       solution and error bounds are computed because\n*                       there are a number of situations where the\n*                       computed solution can be more accurate than the\n*                       value of RCOND would suggest.\n*\n'),(45,'sgbsvx_45.txt','      SUBROUTINE SGBSVX( FACT, TRANS, N, KL, KU, NRHS, AB, LDAB, AFB,\n     $                   LDAFB, IPIV, EQUED, R, C, B, LDB, X, LDX,\n     $                   RCOND, FERR, BERR, WORK, IWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          EQUED, FACT, TRANS\n      INTEGER            INFO, KL, KU, LDAB, LDAFB, LDB, LDX, N, NRHS\n      REAL               RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * ), IWORK( * )\n      REAL               AB( LDAB, * ), AFB( LDAFB, * ), B( LDB, * ),\n     $                   BERR( * ), C( * ), FERR( * ), R( * ),\n     $                   WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SGBSVX uses the LU factorization to compute the solution to a real\n*  system of linear equations A * X = B, A**T * X = B, or A**H * X = B,\n*  where A is a band matrix of order N with KL subdiagonals and KU\n*  superdiagonals, and X and B are N-by-NRHS matrices.\n*\n*  Error bounds on the solution and a condition estimate are also\n*  provided.\n*\n*  Description\n*  ===========\n*\n*  The following steps are performed by this subroutine:\n*\n*  1. If FACT = \'E\', real scaling factors are computed to equilibrate\n*     the system:\n*        TRANS = \'N\':  diag(R)*A*diag(C)     *inv(diag(C))*X = diag(R)*B\n*        TRANS = \'T\': (diag(R)*A*diag(C))**T *inv(diag(R))*X = diag(C)*B\n*        TRANS = \'C\': (diag(R)*A*diag(C))**H *inv(diag(R))*X = diag(C)*B\n*     Whether or not the system will be equilibrated depends on the\n*     scaling of the matrix A, but if equilibration is used, A is\n*     overwritten by diag(R)*A*diag(C) and B by diag(R)*B (if TRANS=\'N\')\n*     or diag(C)*B (if TRANS = \'T\' or \'C\').\n*\n*  2. If FACT = \'N\' or \'E\', the LU decomposition is used to factor the\n*     matrix A (after equilibration if FACT = \'E\') as\n*        A = L * U,\n*     where L is a product of permutation and unit lower triangular\n*     matrices with KL subdiagonals, and U is upper triangular with\n*     KL+KU superdiagonals.\n*\n*  3. If some U(i,i)=0, so that U is exactly singular, then the routine\n*     returns with INFO = i. Otherwise, the factored form of A is used\n*     to estimate the condition number of the matrix A.  If the\n*     reciprocal of the condition number is less than machine precision,\n*     INFO = N+1 is returned as a warning, but the routine still goes on\n*     to solve for X and compute error bounds as described below.\n*\n*  4. The system of equations is solved for X using the factored form\n*     of A.\n*\n*  5. Iterative refinement is applied to improve the computed solution\n*     matrix and calculate error bounds and backward error estimates\n*     for it.\n*\n*  6. If equilibration was used, the matrix X is premultiplied by\n*     diag(C) (if TRANS = \'N\') or diag(R) (if TRANS = \'T\' or \'C\') so\n*     that it solves the original system before equilibration.\n*\n*  Arguments\n*  =========\n*\n*  FACT    (input) CHARACTER*1\n*          Specifies whether or not the factored form of the matrix A is\n*          supplied on entry, and if not, whether the matrix A should be\n*          equilibrated before it is factored.\n*          = \'F\':  On entry, AFB and IPIV contain the factored form of\n*                  A.  If EQUED is not \'N\', the matrix A has been\n*                  equilibrated with scaling factors given by R and C.\n*                  AB, AFB, and IPIV are not modified.\n*          = \'N\':  The matrix A will be copied to AFB and factored.\n*          = \'E\':  The matrix A will be equilibrated if necessary, then\n*                  copied to AFB and factored.\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations.\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Transpose)\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  KL      (input) INTEGER\n*          The number of subdiagonals within the band of A.  KL >= 0.\n*\n*  KU      (input) INTEGER\n*          The number of superdiagonals within the band of A.  KU >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AB      (input/output) REAL array, dimension (LDAB,N)\n*          On entry, the matrix A in band storage, in rows 1 to KL+KU+1.\n*          The j-th column of A is stored in the j-th column of the\n*          array AB as follows:\n*          AB(KU+1+i-j,j) = A(i,j) for max(1,j-KU)<=i<=min(N,j+kl)\n*\n*          If FACT = \'F\' and EQUED is not \'N\', then A must have been\n*          equilibrated by the scaling factors in R and/or C.  AB is not\n*          modified if FACT = \'F\' or \'N\', or if FACT = \'E\' and\n*          EQUED = \'N\' on exit.\n*\n*          On exit, if EQUED .ne. \'N\', A is scaled as follows:\n*          EQUED = \'R\':  A := diag(R) * A\n*          EQUED = \'C\':  A := A * diag(C)\n*          EQUED = \'B\':  A := diag(R) * A * diag(C).\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KL+KU+1.\n*\n*  AFB     (input or output) REAL array, dimension (LDAFB,N)\n*          If FACT = \'F\', then AFB is an input argument and on entry\n*          contains details of the LU factorization of the band matrix\n*          A, as computed by SGBTRF.  U is stored as an upper triangular\n*          band matrix with KL+KU superdiagonals in rows 1 to KL+KU+1,\n*          and the multipliers used during the factorization are stored\n*          in rows KL+KU+2 to 2*KL+KU+1.  If EQUED .ne. \'N\', then AFB is\n*          the factored form of the equilibrated matrix A.\n*\n*          If FACT = \'N\', then AFB is an output argument and on exit\n*          returns details of the LU factorization of A.\n*\n*          If FACT = \'E\', then AFB is an output argument and on exit\n*          returns details of the LU factorization of the equilibrated\n*          matrix A (see the description of AB for the form of the\n*          equilibrated matrix).\n*\n*  LDAFB   (input) INTEGER\n*          The leading dimension of the array AFB.  LDAFB >= 2*KL+KU+1.\n*\n*  IPIV    (input or output) INTEGER array, dimension (N)\n*          If FACT = \'F\', then IPIV is an input argument and on entry\n*          contains the pivot indices from the factorization A = L*U\n*          as computed by SGBTRF; row i of the matrix was interchanged\n*          with row IPIV(i).\n*\n*          If FACT = \'N\', then IPIV is an output argument and on exit\n*          contains the pivot indices from the factorization A = L*U\n*          of the original matrix A.\n*\n*          If FACT = \'E\', then IPIV is an output argument and on exit\n*          contains the pivot indices from the factorization A = L*U\n*          of the equilibrated matrix A.\n*\n*  EQUED   (input or output) CHARACTER*1\n*          Specifies the form of equilibration that was done.\n*          = \'N\':  No equilibration (always true if FACT = \'N\').\n*          = \'R\':  Row equilibration, i.e., A has been premultiplied by\n*                  diag(R).\n*          = \'C\':  Column equilibration, i.e., A has been postmultiplied\n*                  by diag(C).\n*          = \'B\':  Both row and column equilibration, i.e., A has been\n*                  replaced by diag(R) * A * diag(C).\n*          EQUED is an input argument if FACT = \'F\'; otherwise, it is an\n*          output argument.\n*\n*  R       (input or output) REAL array, dimension (N)\n*          The row scale factors for A.  If EQUED = \'R\' or \'B\', A is\n*          multiplied on the left by diag(R); if EQUED = \'N\' or \'C\', R\n*          is not accessed.  R is an input argument if FACT = \'F\';\n*          otherwise, R is an output argument.  If FACT = \'F\' and\n*          EQUED = \'R\' or \'B\', each element of R must be positive.\n*\n*  C       (input or output) REAL array, dimension (N)\n*          The column scale factors for A.  If EQUED = \'C\' or \'B\', A is\n*          multiplied on the right by diag(C); if EQUED = \'N\' or \'R\', C\n*          is not accessed.  C is an input argument if FACT = \'F\';\n*          otherwise, C is an output argument.  If FACT = \'F\' and\n*          EQUED = \'C\' or \'B\', each element of C must be positive.\n*\n*  B       (input/output) REAL array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit,\n*          if EQUED = \'N\', B is not modified;\n*          if TRANS = \'N\' and EQUED = \'R\' or \'B\', B is overwritten by\n*          diag(R)*B;\n*          if TRANS = \'T\' or \'C\' and EQUED = \'C\' or \'B\', B is\n*          overwritten by diag(C)*B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (output) REAL array, dimension (LDX,NRHS)\n*          If INFO = 0 or INFO = N+1, the N-by-NRHS solution matrix X\n*          to the original system of equations.  Note that A and B are\n*          modified on exit if EQUED .ne. \'N\', and the solution to the\n*          equilibrated system is inv(diag(C))*X if TRANS = \'N\' and\n*          EQUED = \'C\' or \'B\', or inv(diag(R))*X if TRANS = \'T\' or \'C\'\n*          and EQUED = \'R\' or \'B\'.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  RCOND   (output) REAL\n*          The estimate of the reciprocal condition number of the matrix\n*          A after equilibration (if done).  If RCOND is less than the\n*          machine precision (in particular, if RCOND = 0), the matrix\n*          is singular to working precision.  This condition is\n*          indicated by a return code of INFO > 0.\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace/output) REAL array, dimension (3*N)\n*          On exit, WORK(1) contains the reciprocal pivot growth\n*          factor norm(A)/norm(U). The \"max absolute element\" norm is\n*          used. If WORK(1) is much less than 1, then the stability\n*          of the LU factorization of the (equilibrated) matrix A\n*          could be poor. This also means that the solution X, condition\n*          estimator RCOND, and forward error bound FERR could be\n*          unreliable. If factorization fails with 0<INFO<=N, then\n*          WORK(1) contains the reciprocal pivot growth factor for the\n*          leading INFO columns of A.\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is\n*                <= N:  U(i,i) is exactly zero.  The factorization\n*                       has been completed, but the factor U is exactly\n*                       singular, so the solution and error bounds\n*                       could not be computed. RCOND = 0 is returned.\n*                = N+1: U is nonsingular, but RCOND is less than machine\n*                       precision, meaning that the matrix is singular\n*                       to working precision.  Nevertheless, the\n*                       solution and error bounds are computed because\n*                       there are a number of situations where the\n*                       computed solution can be more accurate than the\n*\n*                       value of RCOND would suggest.\n'),(46,'dgbsvx_46.txt','      SUBROUTINE DGBSVX( FACT, TRANS, N, KL, KU, NRHS, AB, LDAB, AFB,\n     $                   LDAFB, IPIV, EQUED, R, C, B, LDB, X, LDX,\n     $                   RCOND, FERR, BERR, WORK, IWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          EQUED, FACT, TRANS\n      INTEGER            INFO, KL, KU, LDAB, LDAFB, LDB, LDX, N, NRHS\n      DOUBLE PRECISION   RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * ), IWORK( * )\n      DOUBLE PRECISION   AB( LDAB, * ), AFB( LDAFB, * ), B( LDB, * ),\n     $                   BERR( * ), C( * ), FERR( * ), R( * ),\n     $                   WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DGBSVX uses the LU factorization to compute the solution to a real\n*  system of linear equations A * X = B, A**T * X = B, or A**H * X = B,\n*  where A is a band matrix of order N with KL subdiagonals and KU\n*  superdiagonals, and X and B are N-by-NRHS matrices.\n*\n*  Error bounds on the solution and a condition estimate are also\n*  provided.\n*\n*  Description\n*  ===========\n*\n*  The following steps are performed by this subroutine:\n*\n*  1. If FACT = \'E\', real scaling factors are computed to equilibrate\n*     the system:\n*        TRANS = \'N\':  diag(R)*A*diag(C)     *inv(diag(C))*X = diag(R)*B\n*        TRANS = \'T\': (diag(R)*A*diag(C))**T *inv(diag(R))*X = diag(C)*B\n*        TRANS = \'C\': (diag(R)*A*diag(C))**H *inv(diag(R))*X = diag(C)*B\n*     Whether or not the system will be equilibrated depends on the\n*     scaling of the matrix A, but if equilibration is used, A is\n*     overwritten by diag(R)*A*diag(C) and B by diag(R)*B (if TRANS=\'N\')\n*     or diag(C)*B (if TRANS = \'T\' or \'C\').\n*\n*  2. If FACT = \'N\' or \'E\', the LU decomposition is used to factor the\n*     matrix A (after equilibration if FACT = \'E\') as\n*        A = L * U,\n*     where L is a product of permutation and unit lower triangular\n*     matrices with KL subdiagonals, and U is upper triangular with\n*     KL+KU superdiagonals.\n*\n*  3. If some U(i,i)=0, so that U is exactly singular, then the routine\n*     returns with INFO = i. Otherwise, the factored form of A is used\n*     to estimate the condition number of the matrix A.  If the\n*     reciprocal of the condition number is less than machine precision,\n*     INFO = N+1 is returned as a warning, but the routine still goes on\n*     to solve for X and compute error bounds as described below.\n*\n*  4. The system of equations is solved for X using the factored form\n*     of A.\n*\n*  5. Iterative refinement is applied to improve the computed solution\n*     matrix and calculate error bounds and backward error estimates\n*     for it.\n*\n*  6. If equilibration was used, the matrix X is premultiplied by\n*     diag(C) (if TRANS = \'N\') or diag(R) (if TRANS = \'T\' or \'C\') so\n*     that it solves the original system before equilibration.\n*\n*  Arguments\n*  =========\n*\n*  FACT    (input) CHARACTER*1\n*          Specifies whether or not the factored form of the matrix A is\n*          supplied on entry, and if not, whether the matrix A should be\n*          equilibrated before it is factored.\n*          = \'F\':  On entry, AFB and IPIV contain the factored form of\n*                  A.  If EQUED is not \'N\', the matrix A has been\n*                  equilibrated with scaling factors given by R and C.\n*                  AB, AFB, and IPIV are not modified.\n*          = \'N\':  The matrix A will be copied to AFB and factored.\n*          = \'E\':  The matrix A will be equilibrated if necessary, then\n*                  copied to AFB and factored.\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations.\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Transpose)\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  KL      (input) INTEGER\n*          The number of subdiagonals within the band of A.  KL >= 0.\n*\n*  KU      (input) INTEGER\n*          The number of superdiagonals within the band of A.  KU >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AB      (input/output) DOUBLE PRECISION array, dimension (LDAB,N)\n*          On entry, the matrix A in band storage, in rows 1 to KL+KU+1.\n*          The j-th column of A is stored in the j-th column of the\n*          array AB as follows:\n*          AB(KU+1+i-j,j) = A(i,j) for max(1,j-KU)<=i<=min(N,j+kl)\n*\n*          If FACT = \'F\' and EQUED is not \'N\', then A must have been\n*          equilibrated by the scaling factors in R and/or C.  AB is not\n*          modified if FACT = \'F\' or \'N\', or if FACT = \'E\' and\n*          EQUED = \'N\' on exit.\n*\n*          On exit, if EQUED .ne. \'N\', A is scaled as follows:\n*          EQUED = \'R\':  A := diag(R) * A\n*          EQUED = \'C\':  A := A * diag(C)\n*          EQUED = \'B\':  A := diag(R) * A * diag(C).\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KL+KU+1.\n*\n*  AFB     (input or output) DOUBLE PRECISION array, dimension (LDAFB,N)\n*          If FACT = \'F\', then AFB is an input argument and on entry\n*          contains details of the LU factorization of the band matrix\n*          A, as computed by DGBTRF.  U is stored as an upper triangular\n*          band matrix with KL+KU superdiagonals in rows 1 to KL+KU+1,\n*          and the multipliers used during the factorization are stored\n*          in rows KL+KU+2 to 2*KL+KU+1.  If EQUED .ne. \'N\', then AFB is\n*          the factored form of the equilibrated matrix A.\n*\n*          If FACT = \'N\', then AFB is an output argument and on exit\n*          returns details of the LU factorization of A.\n*\n*          If FACT = \'E\', then AFB is an output argument and on exit\n*          returns details of the LU factorization of the equilibrated\n*          matrix A (see the description of AB for the form of the\n*          equilibrated matrix).\n*\n*  LDAFB   (input) INTEGER\n*          The leading dimension of the array AFB.  LDAFB >= 2*KL+KU+1.\n*\n*  IPIV    (input or output) INTEGER array, dimension (N)\n*          If FACT = \'F\', then IPIV is an input argument and on entry\n*          contains the pivot indices from the factorization A = L*U\n*          as computed by DGBTRF; row i of the matrix was interchanged\n*          with row IPIV(i).\n*\n*          If FACT = \'N\', then IPIV is an output argument and on exit\n*          contains the pivot indices from the factorization A = L*U\n*          of the original matrix A.\n*\n*          If FACT = \'E\', then IPIV is an output argument and on exit\n*          contains the pivot indices from the factorization A = L*U\n*          of the equilibrated matrix A.\n*\n*  EQUED   (input or output) CHARACTER*1\n*          Specifies the form of equilibration that was done.\n*          = \'N\':  No equilibration (always true if FACT = \'N\').\n*          = \'R\':  Row equilibration, i.e., A has been premultiplied by\n*                  diag(R).\n*          = \'C\':  Column equilibration, i.e., A has been postmultiplied\n*                  by diag(C).\n*          = \'B\':  Both row and column equilibration, i.e., A has been\n*                  replaced by diag(R) * A * diag(C).\n*          EQUED is an input argument if FACT = \'F\'; otherwise, it is an\n*          output argument.\n*\n*  R       (input or output) DOUBLE PRECISION array, dimension (N)\n*          The row scale factors for A.  If EQUED = \'R\' or \'B\', A is\n*          multiplied on the left by diag(R); if EQUED = \'N\' or \'C\', R\n*          is not accessed.  R is an input argument if FACT = \'F\';\n*          otherwise, R is an output argument.  If FACT = \'F\' and\n*          EQUED = \'R\' or \'B\', each element of R must be positive.\n*\n*  C       (input or output) DOUBLE PRECISION array, dimension (N)\n*          The column scale factors for A.  If EQUED = \'C\' or \'B\', A is\n*          multiplied on the right by diag(C); if EQUED = \'N\' or \'R\', C\n*          is not accessed.  C is an input argument if FACT = \'F\';\n*          otherwise, C is an output argument.  If FACT = \'F\' and\n*          EQUED = \'C\' or \'B\', each element of C must be positive.\n*\n*  B       (input/output) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit,\n*          if EQUED = \'N\', B is not modified;\n*          if TRANS = \'N\' and EQUED = \'R\' or \'B\', B is overwritten by\n*          diag(R)*B;\n*          if TRANS = \'T\' or \'C\' and EQUED = \'C\' or \'B\', B is\n*          overwritten by diag(C)*B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (output) DOUBLE PRECISION array, dimension (LDX,NRHS)\n*          If INFO = 0 or INFO = N+1, the N-by-NRHS solution matrix X\n*          to the original system of equations.  Note that A and B are\n*          modified on exit if EQUED .ne. \'N\', and the solution to the\n*          equilibrated system is inv(diag(C))*X if TRANS = \'N\' and\n*          EQUED = \'C\' or \'B\', or inv(diag(R))*X if TRANS = \'T\' or \'C\'\n*          and EQUED = \'R\' or \'B\'.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The estimate of the reciprocal condition number of the matrix\n*          A after equilibration (if done).  If RCOND is less than the\n*          machine precision (in particular, if RCOND = 0), the matrix\n*          is singular to working precision.  This condition is\n*          indicated by a return code of INFO > 0.\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace/output) DOUBLE PRECISION array, dimension (3*N)\n*          On exit, WORK(1) contains the reciprocal pivot growth\n*          factor norm(A)/norm(U). The \"max absolute element\" norm is\n*          used. If WORK(1) is much less than 1, then the stability\n*          of the LU factorization of the (equilibrated) matrix A\n*          could be poor. This also means that the solution X, condition\n*          estimator RCOND, and forward error bound FERR could be\n*          unreliable. If factorization fails with 0<INFO<=N, then\n*          WORK(1) contains the reciprocal pivot growth factor for the\n*          leading INFO columns of A.\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is\n*                <= N:  U(i,i) is exactly zero.  The factorization\n*                       has been completed, but the factor U is exactly\n*                       singular, so the solution and error bounds\n*                       could not be computed. RCOND = 0 is returned.\n*                = N+1: U is nonsingular, but RCOND is less than machine\n*                       precision, meaning that the matrix is singular\n*                       to working precision.  Nevertheless, the\n*                       solution and error bounds are computed because\n*                       there are a number of situations where the\n*                       computed solution can be more accurate than the\n*                       value of RCOND would suggest.\n*\n'),(47,'cgbsvx_47.txt','      SUBROUTINE CGBSVX( FACT, TRANS, N, KL, KU, NRHS, AB, LDAB, AFB,\n     $                   LDAFB, IPIV, EQUED, R, C, B, LDB, X, LDX,\n     $                   RCOND, FERR, BERR, WORK, RWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          EQUED, FACT, TRANS\n      INTEGER            INFO, KL, KU, LDAB, LDAFB, LDB, LDX, N, NRHS\n      REAL               RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      REAL               BERR( * ), C( * ), FERR( * ), R( * ),\n     $                   RWORK( * )\n      COMPLEX            AB( LDAB, * ), AFB( LDAFB, * ), B( LDB, * ),\n     $                   WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CGBSVX uses the LU factorization to compute the solution to a complex\n*  system of linear equations A * X = B, A**T * X = B, or A**H * X = B,\n*  where A is a band matrix of order N with KL subdiagonals and KU\n*  superdiagonals, and X and B are N-by-NRHS matrices.\n*\n*  Error bounds on the solution and a condition estimate are also\n*  provided.\n*\n*  Description\n*  ===========\n*\n*  The following steps are performed by this subroutine:\n*\n*  1. If FACT = \'E\', real scaling factors are computed to equilibrate\n*     the system:\n*        TRANS = \'N\':  diag(R)*A*diag(C)     *inv(diag(C))*X = diag(R)*B\n*        TRANS = \'T\': (diag(R)*A*diag(C))**T *inv(diag(R))*X = diag(C)*B\n*        TRANS = \'C\': (diag(R)*A*diag(C))**H *inv(diag(R))*X = diag(C)*B\n*     Whether or not the system will be equilibrated depends on the\n*     scaling of the matrix A, but if equilibration is used, A is\n*     overwritten by diag(R)*A*diag(C) and B by diag(R)*B (if TRANS=\'N\')\n*     or diag(C)*B (if TRANS = \'T\' or \'C\').\n*\n*  2. If FACT = \'N\' or \'E\', the LU decomposition is used to factor the\n*     matrix A (after equilibration if FACT = \'E\') as\n*        A = L * U,\n*     where L is a product of permutation and unit lower triangular\n*     matrices with KL subdiagonals, and U is upper triangular with\n*     KL+KU superdiagonals.\n*\n*  3. If some U(i,i)=0, so that U is exactly singular, then the routine\n*     returns with INFO = i. Otherwise, the factored form of A is used\n*     to estimate the condition number of the matrix A.  If the\n*     reciprocal of the condition number is less than machine precision,\n*     INFO = N+1 is returned as a warning, but the routine still goes on\n*     to solve for X and compute error bounds as described below.\n*\n*  4. The system of equations is solved for X using the factored form\n*     of A.\n*\n*  5. Iterative refinement is applied to improve the computed solution\n*     matrix and calculate error bounds and backward error estimates\n*     for it.\n*\n*  6. If equilibration was used, the matrix X is premultiplied by\n*     diag(C) (if TRANS = \'N\') or diag(R) (if TRANS = \'T\' or \'C\') so\n*     that it solves the original system before equilibration.\n*\n*  Arguments\n*  =========\n*\n*  FACT    (input) CHARACTER*1\n*          Specifies whether or not the factored form of the matrix A is\n*          supplied on entry, and if not, whether the matrix A should be\n*          equilibrated before it is factored.\n*          = \'F\':  On entry, AFB and IPIV contain the factored form of\n*                  A.  If EQUED is not \'N\', the matrix A has been\n*                  equilibrated with scaling factors given by R and C.\n*                  AB, AFB, and IPIV are not modified.\n*          = \'N\':  The matrix A will be copied to AFB and factored.\n*          = \'E\':  The matrix A will be equilibrated if necessary, then\n*                  copied to AFB and factored.\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations.\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose)\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  KL      (input) INTEGER\n*          The number of subdiagonals within the band of A.  KL >= 0.\n*\n*  KU      (input) INTEGER\n*          The number of superdiagonals within the band of A.  KU >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AB      (input/output) COMPLEX array, dimension (LDAB,N)\n*          On entry, the matrix A in band storage, in rows 1 to KL+KU+1.\n*          The j-th column of A is stored in the j-th column of the\n*          array AB as follows:\n*          AB(KU+1+i-j,j) = A(i,j) for max(1,j-KU)<=i<=min(N,j+kl)\n*\n*          If FACT = \'F\' and EQUED is not \'N\', then A must have been\n*          equilibrated by the scaling factors in R and/or C.  AB is not\n*          modified if FACT = \'F\' or \'N\', or if FACT = \'E\' and\n*          EQUED = \'N\' on exit.\n*\n*          On exit, if EQUED .ne. \'N\', A is scaled as follows:\n*          EQUED = \'R\':  A := diag(R) * A\n*          EQUED = \'C\':  A := A * diag(C)\n*          EQUED = \'B\':  A := diag(R) * A * diag(C).\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KL+KU+1.\n*\n*  AFB     (input or output) COMPLEX array, dimension (LDAFB,N)\n*          If FACT = \'F\', then AFB is an input argument and on entry\n*          contains details of the LU factorization of the band matrix\n*          A, as computed by CGBTRF.  U is stored as an upper triangular\n*          band matrix with KL+KU superdiagonals in rows 1 to KL+KU+1,\n*          and the multipliers used during the factorization are stored\n*          in rows KL+KU+2 to 2*KL+KU+1.  If EQUED .ne. \'N\', then AFB is\n*          the factored form of the equilibrated matrix A.\n*\n*          If FACT = \'N\', then AFB is an output argument and on exit\n*          returns details of the LU factorization of A.\n*\n*          If FACT = \'E\', then AFB is an output argument and on exit\n*          returns details of the LU factorization of the equilibrated\n*          matrix A (see the description of AB for the form of the\n*          equilibrated matrix).\n*\n*  LDAFB   (input) INTEGER\n*          The leading dimension of the array AFB.  LDAFB >= 2*KL+KU+1.\n*\n*  IPIV    (input or output) INTEGER array, dimension (N)\n*          If FACT = \'F\', then IPIV is an input argument and on entry\n*          contains the pivot indices from the factorization A = L*U\n*          as computed by CGBTRF; row i of the matrix was interchanged\n*          with row IPIV(i).\n*\n*          If FACT = \'N\', then IPIV is an output argument and on exit\n*          contains the pivot indices from the factorization A = L*U\n*          of the original matrix A.\n*\n*          If FACT = \'E\', then IPIV is an output argument and on exit\n*          contains the pivot indices from the factorization A = L*U\n*          of the equilibrated matrix A.\n*\n*  EQUED   (input or output) CHARACTER*1\n*          Specifies the form of equilibration that was done.\n*          = \'N\':  No equilibration (always true if FACT = \'N\').\n*          = \'R\':  Row equilibration, i.e., A has been premultiplied by\n*                  diag(R).\n*          = \'C\':  Column equilibration, i.e., A has been postmultiplied\n*                  by diag(C).\n*          = \'B\':  Both row and column equilibration, i.e., A has been\n*                  replaced by diag(R) * A * diag(C).\n*          EQUED is an input argument if FACT = \'F\'; otherwise, it is an\n*          output argument.\n*\n*  R       (input or output) REAL array, dimension (N)\n*          The row scale factors for A.  If EQUED = \'R\' or \'B\', A is\n*          multiplied on the left by diag(R); if EQUED = \'N\' or \'C\', R\n*          is not accessed.  R is an input argument if FACT = \'F\';\n*          otherwise, R is an output argument.  If FACT = \'F\' and\n*          EQUED = \'R\' or \'B\', each element of R must be positive.\n*\n*  C       (input or output) REAL array, dimension (N)\n*          The column scale factors for A.  If EQUED = \'C\' or \'B\', A is\n*          multiplied on the right by diag(C); if EQUED = \'N\' or \'R\', C\n*          is not accessed.  C is an input argument if FACT = \'F\';\n*          otherwise, C is an output argument.  If FACT = \'F\' and\n*          EQUED = \'C\' or \'B\', each element of C must be positive.\n*\n*  B       (input/output) COMPLEX array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit,\n*          if EQUED = \'N\', B is not modified;\n*          if TRANS = \'N\' and EQUED = \'R\' or \'B\', B is overwritten by\n*          diag(R)*B;\n*          if TRANS = \'T\' or \'C\' and EQUED = \'C\' or \'B\', B is\n*          overwritten by diag(C)*B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (output) COMPLEX array, dimension (LDX,NRHS)\n*          If INFO = 0 or INFO = N+1, the N-by-NRHS solution matrix X\n*          to the original system of equations.  Note that A and B are\n*          modified on exit if EQUED .ne. \'N\', and the solution to the\n*          equilibrated system is inv(diag(C))*X if TRANS = \'N\' and\n*          EQUED = \'C\' or \'B\', or inv(diag(R))*X if TRANS = \'T\' or \'C\'\n*          and EQUED = \'R\' or \'B\'.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  RCOND   (output) REAL\n*          The estimate of the reciprocal condition number of the matrix\n*          A after equilibration (if done).  If RCOND is less than the\n*          machine precision (in particular, if RCOND = 0), the matrix\n*          is singular to working precision.  This condition is\n*          indicated by a return code of INFO > 0.\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX array, dimension (2*N)\n*\n*  RWORK   (workspace/output) REAL array, dimension (N)\n*          On exit, RWORK(1) contains the reciprocal pivot growth\n*          factor norm(A)/norm(U). The \"max absolute element\" norm is\n*          used. If RWORK(1) is much less than 1, then the stability\n*          of the LU factorization of the (equilibrated) matrix A\n*          could be poor. This also means that the solution X, condition\n*          estimator RCOND, and forward error bound FERR could be\n*          unreliable. If factorization fails with 0<INFO<=N, then\n*          RWORK(1) contains the reciprocal pivot growth factor for the\n*          leading INFO columns of A.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is\n*                <= N:  U(i,i) is exactly zero.  The factorization\n*                       has been completed, but the factor U is exactly\n*                       singular, so the solution and error bounds\n*                       could not be computed. RCOND = 0 is returned.\n*                = N+1: U is nonsingular, but RCOND is less than machine\n*                       precision, meaning that the matrix is singular\n*                       to working precision.  Nevertheless, the\n*                       solution and error bounds are computed because\n*                       there are a number of situations where the\n*                       computed solution can be more accurate than the\n*                       value of RCOND would suggest.\n*\n'),(48,'zgbsvx_48.txt','      SUBROUTINE ZGBSVX( FACT, TRANS, N, KL, KU, NRHS, AB, LDAB, AFB,\n     $                   LDAFB, IPIV, EQUED, R, C, B, LDB, X, LDX,\n     $                   RCOND, FERR, BERR, WORK, RWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          EQUED, FACT, TRANS\n      INTEGER            INFO, KL, KU, LDAB, LDAFB, LDB, LDX, N, NRHS\n      DOUBLE PRECISION   RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      DOUBLE PRECISION   BERR( * ), C( * ), FERR( * ), R( * ),\n     $                   RWORK( * )\n      COMPLEX*16         AB( LDAB, * ), AFB( LDAFB, * ), B( LDB, * ),\n     $                   WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZGBSVX uses the LU factorization to compute the solution to a complex\n*  system of linear equations A * X = B, A**T * X = B, or A**H * X = B,\n*  where A is a band matrix of order N with KL subdiagonals and KU\n*  superdiagonals, and X and B are N-by-NRHS matrices.\n*\n*  Error bounds on the solution and a condition estimate are also\n*  provided.\n*\n*  Description\n*  ===========\n*\n*  The following steps are performed by this subroutine:\n*\n*  1. If FACT = \'E\', real scaling factors are computed to equilibrate\n*     the system:\n*        TRANS = \'N\':  diag(R)*A*diag(C)     *inv(diag(C))*X = diag(R)*B\n*        TRANS = \'T\': (diag(R)*A*diag(C))**T *inv(diag(R))*X = diag(C)*B\n*        TRANS = \'C\': (diag(R)*A*diag(C))**H *inv(diag(R))*X = diag(C)*B\n*     Whether or not the system will be equilibrated depends on the\n*     scaling of the matrix A, but if equilibration is used, A is\n*     overwritten by diag(R)*A*diag(C) and B by diag(R)*B (if TRANS=\'N\')\n*     or diag(C)*B (if TRANS = \'T\' or \'C\').\n*\n*  2. If FACT = \'N\' or \'E\', the LU decomposition is used to factor the\n*     matrix A (after equilibration if FACT = \'E\') as\n*        A = L * U,\n*     where L is a product of permutation and unit lower triangular\n*     matrices with KL subdiagonals, and U is upper triangular with\n*     KL+KU superdiagonals.\n*\n*  3. If some U(i,i)=0, so that U is exactly singular, then the routine\n*     returns with INFO = i. Otherwise, the factored form of A is used\n*     to estimate the condition number of the matrix A.  If the\n*     reciprocal of the condition number is less than machine precision,\n*     INFO = N+1 is returned as a warning, but the routine still goes on\n*     to solve for X and compute error bounds as described below.\n*\n*  4. The system of equations is solved for X using the factored form\n*     of A.\n*\n*  5. Iterative refinement is applied to improve the computed solution\n*     matrix and calculate error bounds and backward error estimates\n*     for it.\n*\n*  6. If equilibration was used, the matrix X is premultiplied by\n*     diag(C) (if TRANS = \'N\') or diag(R) (if TRANS = \'T\' or \'C\') so\n*     that it solves the original system before equilibration.\n*\n*  Arguments\n*  =========\n*\n*  FACT    (input) CHARACTER*1\n*          Specifies whether or not the factored form of the matrix A is\n*          supplied on entry, and if not, whether the matrix A should be\n*          equilibrated before it is factored.\n*          = \'F\':  On entry, AFB and IPIV contain the factored form of\n*                  A.  If EQUED is not \'N\', the matrix A has been\n*                  equilibrated with scaling factors given by R and C.\n*                  AB, AFB, and IPIV are not modified.\n*          = \'N\':  The matrix A will be copied to AFB and factored.\n*          = \'E\':  The matrix A will be equilibrated if necessary, then\n*                  copied to AFB and factored.\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations.\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose)\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  KL      (input) INTEGER\n*          The number of subdiagonals within the band of A.  KL >= 0.\n*\n*  KU      (input) INTEGER\n*          The number of superdiagonals within the band of A.  KU >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AB      (input/output) COMPLEX*16 array, dimension (LDAB,N)\n*          On entry, the matrix A in band storage, in rows 1 to KL+KU+1.\n*          The j-th column of A is stored in the j-th column of the\n*          array AB as follows:\n*          AB(KU+1+i-j,j) = A(i,j) for max(1,j-KU)<=i<=min(N,j+kl)\n*\n*          If FACT = \'F\' and EQUED is not \'N\', then A must have been\n*          equilibrated by the scaling factors in R and/or C.  AB is not\n*          modified if FACT = \'F\' or \'N\', or if FACT = \'E\' and\n*          EQUED = \'N\' on exit.\n*\n*          On exit, if EQUED .ne. \'N\', A is scaled as follows:\n*          EQUED = \'R\':  A := diag(R) * A\n*          EQUED = \'C\':  A := A * diag(C)\n*          EQUED = \'B\':  A := diag(R) * A * diag(C).\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KL+KU+1.\n*\n*  AFB     (input or output) COMPLEX*16 array, dimension (LDAFB,N)\n*          If FACT = \'F\', then AFB is an input argument and on entry\n*          contains details of the LU factorization of the band matrix\n*          A, as computed by ZGBTRF.  U is stored as an upper triangular\n*          band matrix with KL+KU superdiagonals in rows 1 to KL+KU+1,\n*          and the multipliers used during the factorization are stored\n*          in rows KL+KU+2 to 2*KL+KU+1.  If EQUED .ne. \'N\', then AFB is\n*          the factored form of the equilibrated matrix A.\n*\n*          If FACT = \'N\', then AFB is an output argument and on exit\n*          returns details of the LU factorization of A.\n*\n*          If FACT = \'E\', then AFB is an output argument and on exit\n*          returns details of the LU factorization of the equilibrated\n*          matrix A (see the description of AB for the form of the\n*          equilibrated matrix).\n*\n*  LDAFB   (input) INTEGER\n*          The leading dimension of the array AFB.  LDAFB >= 2*KL+KU+1.\n*\n*  IPIV    (input or output) INTEGER array, dimension (N)\n*          If FACT = \'F\', then IPIV is an input argument and on entry\n*          contains the pivot indices from the factorization A = L*U\n*          as computed by ZGBTRF; row i of the matrix was interchanged\n*          with row IPIV(i).\n*\n*          If FACT = \'N\', then IPIV is an output argument and on exit\n*          contains the pivot indices from the factorization A = L*U\n*          of the original matrix A.\n*\n*          If FACT = \'E\', then IPIV is an output argument and on exit\n*          contains the pivot indices from the factorization A = L*U\n*          of the equilibrated matrix A.\n*\n*  EQUED   (input or output) CHARACTER*1\n*          Specifies the form of equilibration that was done.\n*          = \'N\':  No equilibration (always true if FACT = \'N\').\n*          = \'R\':  Row equilibration, i.e., A has been premultiplied by\n*                  diag(R).\n*          = \'C\':  Column equilibration, i.e., A has been postmultiplied\n*                  by diag(C).\n*          = \'B\':  Both row and column equilibration, i.e., A has been\n*                  replaced by diag(R) * A * diag(C).\n*          EQUED is an input argument if FACT = \'F\'; otherwise, it is an\n*          output argument.\n*\n*  R       (input or output) DOUBLE PRECISION array, dimension (N)\n*          The row scale factors for A.  If EQUED = \'R\' or \'B\', A is\n*          multiplied on the left by diag(R); if EQUED = \'N\' or \'C\', R\n*          is not accessed.  R is an input argument if FACT = \'F\';\n*          otherwise, R is an output argument.  If FACT = \'F\' and\n*          EQUED = \'R\' or \'B\', each element of R must be positive.\n*\n*  C       (input or output) DOUBLE PRECISION array, dimension (N)\n*          The column scale factors for A.  If EQUED = \'C\' or \'B\', A is\n*          multiplied on the right by diag(C); if EQUED = \'N\' or \'R\', C\n*          is not accessed.  C is an input argument if FACT = \'F\';\n*          otherwise, C is an output argument.  If FACT = \'F\' and\n*          EQUED = \'C\' or \'B\', each element of C must be positive.\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit,\n*          if EQUED = \'N\', B is not modified;\n*          if TRANS = \'N\' and EQUED = \'R\' or \'B\', B is overwritten by\n*          diag(R)*B;\n*          if TRANS = \'T\' or \'C\' and EQUED = \'C\' or \'B\', B is\n*          overwritten by diag(C)*B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (output) COMPLEX*16 array, dimension (LDX,NRHS)\n*          If INFO = 0 or INFO = N+1, the N-by-NRHS solution matrix X\n*          to the original system of equations.  Note that A and B are\n*          modified on exit if EQUED .ne. \'N\', and the solution to the\n*          equilibrated system is inv(diag(C))*X if TRANS = \'N\' and\n*          EQUED = \'C\' or \'B\', or inv(diag(R))*X if TRANS = \'T\' or \'C\'\n*          and EQUED = \'R\' or \'B\'.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The estimate of the reciprocal condition number of the matrix\n*          A after equilibration (if done).  If RCOND is less than the\n*          machine precision (in particular, if RCOND = 0), the matrix\n*          is singular to working precision.  This condition is\n*          indicated by a return code of INFO > 0.\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n*\n*  RWORK   (workspace/output) DOUBLE PRECISION array, dimension (N)\n*          On exit, RWORK(1) contains the reciprocal pivot growth\n*          factor norm(A)/norm(U). The \"max absolute element\" norm is\n*          used. If RWORK(1) is much less than 1, then the stability\n*          of the LU factorization of the (equilibrated) matrix A\n*          could be poor. This also means that the solution X, condition\n*          estimator RCOND, and forward error bound FERR could be\n*          unreliable. If factorization fails with 0<INFO<=N, then\n*          RWORK(1) contains the reciprocal pivot growth factor for the\n*          leading INFO columns of A.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is\n*                <= N:  U(i,i) is exactly zero.  The factorization\n*                       has been completed, but the factor U is exactly\n*                       singular, so the solution and error bounds\n*                       could not be computed. RCOND = 0 is returned.\n*                = N+1: U is nonsingular, but RCOND is less than machine\n*                       precision, meaning that the matrix is singular\n*                       to working precision.  Nevertheless, the\n*                       solution and error bounds are computed because\n*                       there are a number of situations where the\n*                       computed solution can be more accurate than the\n*                       value of RCOND would suggest.\n*\n'),(49,'sgtsvx_49.txt','      SUBROUTINE SGTSVX( FACT, TRANS, N, NRHS, DL, D, DU, DLF, DF, DUF,\n     $                   DU2, IPIV, B, LDB, X, LDX, RCOND, FERR, BERR,\n     $                   WORK, IWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          FACT, TRANS\n      INTEGER            INFO, LDB, LDX, N, NRHS\n      REAL               RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * ), IWORK( * )\n      REAL               B( LDB, * ), BERR( * ), D( * ), DF( * ),\n     $                   DL( * ), DLF( * ), DU( * ), DU2( * ), DUF( * ),\n     $                   FERR( * ), WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SGTSVX uses the LU factorization to compute the solution to a real\n*  system of linear equations A * X = B or A**T * X = B,\n*  where A is a tridiagonal matrix of order N and X and B are N-by-NRHS\n*  matrices.\n*\n*  Error bounds on the solution and a condition estimate are also\n*  provided.\n*\n*  Description\n*  ===========\n*\n*  The following steps are performed:\n*\n*  1. If FACT = \'N\', the LU decomposition is used to factor the matrix A\n*     as A = L * U, where L is a product of permutation and unit lower\n*     bidiagonal matrices and U is upper triangular with nonzeros in\n*     only the main diagonal and first two superdiagonals.\n*\n*  2. If some U(i,i)=0, so that U is exactly singular, then the routine\n*     returns with INFO = i. Otherwise, the factored form of A is used\n*     to estimate the condition number of the matrix A.  If the\n*     reciprocal of the condition number is less than machine precision,\n*     INFO = N+1 is returned as a warning, but the routine still goes on\n*     to solve for X and compute error bounds as described below.\n*\n*  3. The system of equations is solved for X using the factored form\n*     of A.\n*\n*  4. Iterative refinement is applied to improve the computed solution\n*     matrix and calculate error bounds and backward error estimates\n*     for it.\n*\n*  Arguments\n*  =========\n*\n*  FACT    (input) CHARACTER*1\n*          Specifies whether or not the factored form of A has been\n*          supplied on entry.\n*          = \'F\':  DLF, DF, DUF, DU2, and IPIV contain the factored\n*                  form of A; DL, D, DU, DLF, DF, DUF, DU2 and IPIV\n*                  will not be modified.\n*          = \'N\':  The matrix will be copied to DLF, DF, and DUF\n*                  and factored.\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose = Transpose)\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  DL      (input) REAL array, dimension (N-1)\n*          The (n-1) subdiagonal elements of A.\n*\n*  D       (input) REAL array, dimension (N)\n*          The n diagonal elements of A.\n*\n*  DU      (input) REAL array, dimension (N-1)\n*          The (n-1) superdiagonal elements of A.\n*\n*  DLF     (input or output) REAL array, dimension (N-1)\n*          If FACT = \'F\', then DLF is an input argument and on entry\n*          contains the (n-1) multipliers that define the matrix L from\n*          the LU factorization of A as computed by SGTTRF.\n*\n*          If FACT = \'N\', then DLF is an output argument and on exit\n*          contains the (n-1) multipliers that define the matrix L from\n*          the LU factorization of A.\n*\n*  DF      (input or output) REAL array, dimension (N)\n*          If FACT = \'F\', then DF is an input argument and on entry\n*          contains the n diagonal elements of the upper triangular\n*          matrix U from the LU factorization of A.\n*\n*          If FACT = \'N\', then DF is an output argument and on exit\n*          contains the n diagonal elements of the upper triangular\n*          matrix U from the LU factorization of A.\n*\n*  DUF     (input or output) REAL array, dimension (N-1)\n*          If FACT = \'F\', then DUF is an input argument and on entry\n*          contains the (n-1) elements of the first superdiagonal of U.\n*\n*          If FACT = \'N\', then DUF is an output argument and on exit\n*          contains the (n-1) elements of the first superdiagonal of U.\n*\n*  DU2     (input or output) REAL array, dimension (N-2)\n*          If FACT = \'F\', then DU2 is an input argument and on entry\n*          contains the (n-2) elements of the second superdiagonal of\n*          U.\n*\n*          If FACT = \'N\', then DU2 is an output argument and on exit\n*          contains the (n-2) elements of the second superdiagonal of\n*          U.\n*\n*  IPIV    (input or output) INTEGER array, dimension (N)\n*          If FACT = \'F\', then IPIV is an input argument and on entry\n*          contains the pivot indices from the LU factorization of A as\n*          computed by SGTTRF.\n*\n*          If FACT = \'N\', then IPIV is an output argument and on exit\n*          contains the pivot indices from the LU factorization of A;\n*          row i of the matrix was interchanged with row IPIV(i).\n*          IPIV(i) will always be either i or i+1; IPIV(i) = i indicates\n*          a row interchange was not required.\n*\n*  B       (input) REAL array, dimension (LDB,NRHS)\n*          The N-by-NRHS right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (output) REAL array, dimension (LDX,NRHS)\n*          If INFO = 0 or INFO = N+1, the N-by-NRHS solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  RCOND   (output) REAL\n*          The estimate of the reciprocal condition number of the matrix\n*          A.  If RCOND is less than the machine precision (in\n*          particular, if RCOND = 0), the matrix is singular to working\n*          precision.  This condition is indicated by a return code of\n*          INFO > 0.\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) REAL array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is\n*                <= N:  U(i,i) is exactly zero.  The factorization\n*                       has not been completed unless i = N, but the\n*                       factor U is exactly singular, so the solution\n*                       and error bounds could not be computed.\n*                       RCOND = 0 is returned.\n*                = N+1: U is nonsingular, but RCOND is less than machine\n*                       precision, meaning that the matrix is singular\n*                       to working precision.  Nevertheless, the\n*                       solution and error bounds are computed because\n*                       there are a number of situations where the\n*                       computed solution can be more accurate than the\n*                       value of RCOND would suggest.\n*\n'),(50,'dgtsvx_50.txt','      SUBROUTINE DGTSVX( FACT, TRANS, N, NRHS, DL, D, DU, DLF, DF, DUF,\n     $                   DU2, IPIV, B, LDB, X, LDX, RCOND, FERR, BERR,\n     $                   WORK, IWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          FACT, TRANS\n      INTEGER            INFO, LDB, LDX, N, NRHS\n      DOUBLE PRECISION   RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * ), IWORK( * )\n      DOUBLE PRECISION   B( LDB, * ), BERR( * ), D( * ), DF( * ),\n     $                   DL( * ), DLF( * ), DU( * ), DU2( * ), DUF( * ),\n     $                   FERR( * ), WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DGTSVX uses the LU factorization to compute the solution to a real\n*  system of linear equations A * X = B or A**T * X = B,\n*  where A is a tridiagonal matrix of order N and X and B are N-by-NRHS\n*  matrices.\n*\n*  Error bounds on the solution and a condition estimate are also\n*  provided.\n*\n*  Description\n*  ===========\n*\n*  The following steps are performed:\n*\n*  1. If FACT = \'N\', the LU decomposition is used to factor the matrix A\n*     as A = L * U, where L is a product of permutation and unit lower\n*     bidiagonal matrices and U is upper triangular with nonzeros in\n*     only the main diagonal and first two superdiagonals.\n*\n*  2. If some U(i,i)=0, so that U is exactly singular, then the routine\n*     returns with INFO = i. Otherwise, the factored form of A is used\n*     to estimate the condition number of the matrix A.  If the\n*     reciprocal of the condition number is less than machine precision,\n*     INFO = N+1 is returned as a warning, but the routine still goes on\n*     to solve for X and compute error bounds as described below.\n*\n*  3. The system of equations is solved for X using the factored form\n*     of A.\n*\n*  4. Iterative refinement is applied to improve the computed solution\n*     matrix and calculate error bounds and backward error estimates\n*     for it.\n*\n*  Arguments\n*  =========\n*\n*  FACT    (input) CHARACTER*1\n*          Specifies whether or not the factored form of A has been\n*          supplied on entry.\n*          = \'F\':  DLF, DF, DUF, DU2, and IPIV contain the factored\n*                  form of A; DL, D, DU, DLF, DF, DUF, DU2 and IPIV\n*                  will not be modified.\n*          = \'N\':  The matrix will be copied to DLF, DF, and DUF\n*                  and factored.\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose = Transpose)\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  DL      (input) DOUBLE PRECISION array, dimension (N-1)\n*          The (n-1) subdiagonal elements of A.\n*\n*  D       (input) DOUBLE PRECISION array, dimension (N)\n*          The n diagonal elements of A.\n*\n*  DU      (input) DOUBLE PRECISION array, dimension (N-1)\n*          The (n-1) superdiagonal elements of A.\n*\n*  DLF     (input or output) DOUBLE PRECISION array, dimension (N-1)\n*          If FACT = \'F\', then DLF is an input argument and on entry\n*          contains the (n-1) multipliers that define the matrix L from\n*          the LU factorization of A as computed by DGTTRF.\n*\n*          If FACT = \'N\', then DLF is an output argument and on exit\n*          contains the (n-1) multipliers that define the matrix L from\n*          the LU factorization of A.\n*\n*  DF      (input or output) DOUBLE PRECISION array, dimension (N)\n*          If FACT = \'F\', then DF is an input argument and on entry\n*          contains the n diagonal elements of the upper triangular\n*          matrix U from the LU factorization of A.\n*\n*          If FACT = \'N\', then DF is an output argument and on exit\n*          contains the n diagonal elements of the upper triangular\n*          matrix U from the LU factorization of A.\n*\n*  DUF     (input or output) DOUBLE PRECISION array, dimension (N-1)\n*          If FACT = \'F\', then DUF is an input argument and on entry\n*          contains the (n-1) elements of the first superdiagonal of U.\n*\n*          If FACT = \'N\', then DUF is an output argument and on exit\n*          contains the (n-1) elements of the first superdiagonal of U.\n*\n*  DU2     (input or output) DOUBLE PRECISION array, dimension (N-2)\n*          If FACT = \'F\', then DU2 is an input argument and on entry\n*          contains the (n-2) elements of the second superdiagonal of\n*          U.\n*\n*          If FACT = \'N\', then DU2 is an output argument and on exit\n*          contains the (n-2) elements of the second superdiagonal of\n*          U.\n*\n*  IPIV    (input or output) INTEGER array, dimension (N)\n*          If FACT = \'F\', then IPIV is an input argument and on entry\n*          contains the pivot indices from the LU factorization of A as\n*          computed by DGTTRF.\n*\n*          If FACT = \'N\', then IPIV is an output argument and on exit\n*          contains the pivot indices from the LU factorization of A;\n*          row i of the matrix was interchanged with row IPIV(i).\n*          IPIV(i) will always be either i or i+1; IPIV(i) = i indicates\n*          a row interchange was not required.\n*\n*  B       (input) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          The N-by-NRHS right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (output) DOUBLE PRECISION array, dimension (LDX,NRHS)\n*          If INFO = 0 or INFO = N+1, the N-by-NRHS solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The estimate of the reciprocal condition number of the matrix\n*          A.  If RCOND is less than the machine precision (in\n*          particular, if RCOND = 0), the matrix is singular to working\n*          precision.  This condition is indicated by a return code of\n*          INFO > 0.\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) DOUBLE PRECISION array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is\n*                <= N:  U(i,i) is exactly zero.  The factorization\n*                       has not been completed unless i = N, but the\n*                       factor U is exactly singular, so the solution\n*                       and error bounds could not be computed.\n*                       RCOND = 0 is returned.\n*                = N+1: U is nonsingular, but RCOND is less than machine\n*                       precision, meaning that the matrix is singular\n*                       to working precision.  Nevertheless, the\n*                       solution and error bounds are computed because\n*                       there are a number of situations where the\n*                       computed solution can be more accurate than the\n*                       value of RCOND would suggest.\n*\n'),(51,'cgtsvx_51.txt','      SUBROUTINE CGTSVX( FACT, TRANS, N, NRHS, DL, D, DU, DLF, DF, DUF,\n     $                   DU2, IPIV, B, LDB, X, LDX, RCOND, FERR, BERR,\n     $                   WORK, RWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          FACT, TRANS\n      INTEGER            INFO, LDB, LDX, N, NRHS\n      REAL               RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      REAL               BERR( * ), FERR( * ), RWORK( * )\n      COMPLEX            B( LDB, * ), D( * ), DF( * ), DL( * ),\n     $                   DLF( * ), DU( * ), DU2( * ), DUF( * ),\n     $                   WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CGTSVX uses the LU factorization to compute the solution to a complex\n*  system of linear equations A * X = B, A**T * X = B, or A**H * X = B,\n*  where A is a tridiagonal matrix of order N and X and B are N-by-NRHS\n*  matrices.\n*\n*  Error bounds on the solution and a condition estimate are also\n*  provided.\n*\n*  Description\n*  ===========\n*\n*  The following steps are performed:\n*\n*  1. If FACT = \'N\', the LU decomposition is used to factor the matrix A\n*     as A = L * U, where L is a product of permutation and unit lower\n*     bidiagonal matrices and U is upper triangular with nonzeros in\n*     only the main diagonal and first two superdiagonals.\n*\n*  2. If some U(i,i)=0, so that U is exactly singular, then the routine\n*     returns with INFO = i. Otherwise, the factored form of A is used\n*     to estimate the condition number of the matrix A.  If the\n*     reciprocal of the condition number is less than machine precision,\n*     INFO = N+1 is returned as a warning, but the routine still goes on\n*     to solve for X and compute error bounds as described below.\n*\n*  3. The system of equations is solved for X using the factored form\n*     of A.\n*\n*  4. Iterative refinement is applied to improve the computed solution\n*     matrix and calculate error bounds and backward error estimates\n*     for it.\n*\n*  Arguments\n*  =========\n*\n*  FACT    (input) CHARACTER*1\n*          Specifies whether or not the factored form of A has been\n*          supplied on entry.\n*          = \'F\':  DLF, DF, DUF, DU2, and IPIV contain the factored form\n*                  of A; DL, D, DU, DLF, DF, DUF, DU2 and IPIV will not\n*                  be modified.\n*          = \'N\':  The matrix will be copied to DLF, DF, and DUF\n*                  and factored.\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose)\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  DL      (input) COMPLEX array, dimension (N-1)\n*          The (n-1) subdiagonal elements of A.\n*\n*  D       (input) COMPLEX array, dimension (N)\n*          The n diagonal elements of A.\n*\n*  DU      (input) COMPLEX array, dimension (N-1)\n*          The (n-1) superdiagonal elements of A.\n*\n*  DLF     (input or output) COMPLEX array, dimension (N-1)\n*          If FACT = \'F\', then DLF is an input argument and on entry\n*          contains the (n-1) multipliers that define the matrix L from\n*          the LU factorization of A as computed by CGTTRF.\n*\n*          If FACT = \'N\', then DLF is an output argument and on exit\n*          contains the (n-1) multipliers that define the matrix L from\n*          the LU factorization of A.\n*\n*  DF      (input or output) COMPLEX array, dimension (N)\n*          If FACT = \'F\', then DF is an input argument and on entry\n*          contains the n diagonal elements of the upper triangular\n*          matrix U from the LU factorization of A.\n*\n*          If FACT = \'N\', then DF is an output argument and on exit\n*          contains the n diagonal elements of the upper triangular\n*          matrix U from the LU factorization of A.\n*\n*  DUF     (input or output) COMPLEX array, dimension (N-1)\n*          If FACT = \'F\', then DUF is an input argument and on entry\n*          contains the (n-1) elements of the first superdiagonal of U.\n*\n*          If FACT = \'N\', then DUF is an output argument and on exit\n*          contains the (n-1) elements of the first superdiagonal of U.\n*\n*  DU2     (input or output) COMPLEX array, dimension (N-2)\n*          If FACT = \'F\', then DU2 is an input argument and on entry\n*          contains the (n-2) elements of the second superdiagonal of\n*          U.\n*\n*          If FACT = \'N\', then DU2 is an output argument and on exit\n*          contains the (n-2) elements of the second superdiagonal of\n*          U.\n*\n*  IPIV    (input or output) INTEGER array, dimension (N)\n*          If FACT = \'F\', then IPIV is an input argument and on entry\n*          contains the pivot indices from the LU factorization of A as\n*          computed by CGTTRF.\n*\n*          If FACT = \'N\', then IPIV is an output argument and on exit\n*          contains the pivot indices from the LU factorization of A;\n*          row i of the matrix was interchanged with row IPIV(i).\n*          IPIV(i) will always be either i or i+1; IPIV(i) = i indicates\n*          a row interchange was not required.\n*\n*  B       (input) COMPLEX array, dimension (LDB,NRHS)\n*          The N-by-NRHS right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (output) COMPLEX array, dimension (LDX,NRHS)\n*          If INFO = 0 or INFO = N+1, the N-by-NRHS solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  RCOND   (output) REAL\n*          The estimate of the reciprocal condition number of the matrix\n*          A.  If RCOND is less than the machine precision (in\n*          particular, if RCOND = 0), the matrix is singular to working\n*          precision.  This condition is indicated by a return code of\n*          INFO > 0.\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX array, dimension (2*N)\n*\n*  RWORK   (workspace) REAL array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is\n*                <= N:  U(i,i) is exactly zero.  The factorization\n*                       has not been completed unless i = N, but the\n*                       factor U is exactly singular, so the solution\n*                       and error bounds could not be computed.\n*                       RCOND = 0 is returned.\n*                = N+1: U is nonsingular, but RCOND is less than machine\n*                       precision, meaning that the matrix is singular\n*                       to working precision.  Nevertheless, the\n*                       solution and error bounds are computed because\n*                       there are a number of situations where the\n*                       computed solution can be more accurate than the\n*                       value of RCOND would suggest.\n*\n'),(52,'zgtsvx_52.txt','      SUBROUTINE ZGTSVX( FACT, TRANS, N, NRHS, DL, D, DU, DLF, DF, DUF,\n     $                   DU2, IPIV, B, LDB, X, LDX, RCOND, FERR, BERR,\n     $                   WORK, RWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          FACT, TRANS\n      INTEGER            INFO, LDB, LDX, N, NRHS\n      DOUBLE PRECISION   RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      DOUBLE PRECISION   BERR( * ), FERR( * ), RWORK( * )\n      COMPLEX*16         B( LDB, * ), D( * ), DF( * ), DL( * ),\n     $                   DLF( * ), DU( * ), DU2( * ), DUF( * ),\n     $                   WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZGTSVX uses the LU factorization to compute the solution to a complex\n*  system of linear equations A * X = B, A**T * X = B, or A**H * X = B,\n*  where A is a tridiagonal matrix of order N and X and B are N-by-NRHS\n*  matrices.\n*\n*  Error bounds on the solution and a condition estimate are also\n*  provided.\n*\n*  Description\n*  ===========\n*\n*  The following steps are performed:\n*\n*  1. If FACT = \'N\', the LU decomposition is used to factor the matrix A\n*     as A = L * U, where L is a product of permutation and unit lower\n*     bidiagonal matrices and U is upper triangular with nonzeros in\n*     only the main diagonal and first two superdiagonals.\n*\n*  2. If some U(i,i)=0, so that U is exactly singular, then the routine\n*     returns with INFO = i. Otherwise, the factored form of A is used\n*     to estimate the condition number of the matrix A.  If the\n*     reciprocal of the condition number is less than machine precision,\n*     INFO = N+1 is returned as a warning, but the routine still goes on\n*     to solve for X and compute error bounds as described below.\n*\n*  3. The system of equations is solved for X using the factored form\n*     of A.\n*\n*  4. Iterative refinement is applied to improve the computed solution\n*     matrix and calculate error bounds and backward error estimates\n*     for it.\n*\n*  Arguments\n*  =========\n*\n*  FACT    (input) CHARACTER*1\n*          Specifies whether or not the factored form of A has been\n*          supplied on entry.\n*          = \'F\':  DLF, DF, DUF, DU2, and IPIV contain the factored form\n*                  of A; DL, D, DU, DLF, DF, DUF, DU2 and IPIV will not\n*                  be modified.\n*          = \'N\':  The matrix will be copied to DLF, DF, and DUF\n*                  and factored.\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose)\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  DL      (input) COMPLEX*16 array, dimension (N-1)\n*          The (n-1) subdiagonal elements of A.\n*\n*  D       (input) COMPLEX*16 array, dimension (N)\n*          The n diagonal elements of A.\n*\n*  DU      (input) COMPLEX*16 array, dimension (N-1)\n*          The (n-1) superdiagonal elements of A.\n*\n*  DLF     (input or output) COMPLEX*16 array, dimension (N-1)\n*          If FACT = \'F\', then DLF is an input argument and on entry\n*          contains the (n-1) multipliers that define the matrix L from\n*          the LU factorization of A as computed by ZGTTRF.\n*\n*          If FACT = \'N\', then DLF is an output argument and on exit\n*          contains the (n-1) multipliers that define the matrix L from\n*          the LU factorization of A.\n*\n*  DF      (input or output) COMPLEX*16 array, dimension (N)\n*          If FACT = \'F\', then DF is an input argument and on entry\n*          contains the n diagonal elements of the upper triangular\n*          matrix U from the LU factorization of A.\n*\n*          If FACT = \'N\', then DF is an output argument and on exit\n*          contains the n diagonal elements of the upper triangular\n*          matrix U from the LU factorization of A.\n*\n*  DUF     (input or output) COMPLEX*16 array, dimension (N-1)\n*          If FACT = \'F\', then DUF is an input argument and on entry\n*          contains the (n-1) elements of the first superdiagonal of U.\n*\n*          If FACT = \'N\', then DUF is an output argument and on exit\n*          contains the (n-1) elements of the first superdiagonal of U.\n*\n*  DU2     (input or output) COMPLEX*16 array, dimension (N-2)\n*          If FACT = \'F\', then DU2 is an input argument and on entry\n*          contains the (n-2) elements of the second superdiagonal of\n*          U.\n*\n*          If FACT = \'N\', then DU2 is an output argument and on exit\n*          contains the (n-2) elements of the second superdiagonal of\n*          U.\n*\n*  IPIV    (input or output) INTEGER array, dimension (N)\n*          If FACT = \'F\', then IPIV is an input argument and on entry\n*          contains the pivot indices from the LU factorization of A as\n*          computed by ZGTTRF.\n*\n*          If FACT = \'N\', then IPIV is an output argument and on exit\n*          contains the pivot indices from the LU factorization of A;\n*          row i of the matrix was interchanged with row IPIV(i).\n*          IPIV(i) will always be either i or i+1; IPIV(i) = i indicates\n*          a row interchange was not required.\n*\n*  B       (input) COMPLEX*16 array, dimension (LDB,NRHS)\n*          The N-by-NRHS right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (output) COMPLEX*16 array, dimension (LDX,NRHS)\n*          If INFO = 0 or INFO = N+1, the N-by-NRHS solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The estimate of the reciprocal condition number of the matrix\n*          A.  If RCOND is less than the machine precision (in\n*          particular, if RCOND = 0), the matrix is singular to working\n*          precision.  This condition is indicated by a return code of\n*          INFO > 0.\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is\n*                <= N:  U(i,i) is exactly zero.  The factorization\n*                       has not been completed unless i = N, but the\n*                       factor U is exactly singular, so the solution\n*                       and error bounds could not be computed.\n*                       RCOND = 0 is returned.\n*                = N+1: U is nonsingular, but RCOND is less than machine\n*                       precision, meaning that the matrix is singular\n*                       to working precision.  Nevertheless, the\n*                       solution and error bounds are computed because\n*                       there are a number of situations where the\n*                       computed solution can be more accurate than the\n*                       value of RCOND would suggest.\n*\n'),(53,'chesvx_53.txt','      SUBROUTINE CHESVX( FACT, UPLO, N, NRHS, A, LDA, AF, LDAF, IPIV, B,\n     $                   LDB, X, LDX, RCOND, FERR, BERR, WORK, LWORK,\n     $                   RWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          FACT, UPLO\n      INTEGER            INFO, LDA, LDAF, LDB, LDX, LWORK, N, NRHS\n      REAL               RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      REAL               BERR( * ), FERR( * ), RWORK( * )\n      COMPLEX            A( LDA, * ), AF( LDAF, * ), B( LDB, * ),\n     $                   WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CHESVX uses the diagonal pivoting factorization to compute the\n*  solution to a complex system of linear equations A * X = B,\n*  where A is an N-by-N Hermitian matrix and X and B are N-by-NRHS\n*  matrices.\n*\n*  Error bounds on the solution and a condition estimate are also\n*  provided.\n*\n*  Description\n*  ===========\n*\n*  The following steps are performed:\n*\n*  1. If FACT = \'N\', the diagonal pivoting method is used to factor A.\n*     The form of the factorization is\n*        A = U * D * U**H,  if UPLO = \'U\', or\n*        A = L * D * L**H,  if UPLO = \'L\',\n*     where U (or L) is a product of permutation and unit upper (lower)\n*     triangular matrices, and D is Hermitian and block diagonal with\n*     1-by-1 and 2-by-2 diagonal blocks.\n*\n*  2. If some D(i,i)=0, so that D is exactly singular, then the routine\n*     returns with INFO = i. Otherwise, the factored form of A is used\n*     to estimate the condition number of the matrix A.  If the\n*     reciprocal of the condition number is less than machine precision,\n*     INFO = N+1 is returned as a warning, but the routine still goes on\n*     to solve for X and compute error bounds as described below.\n*\n*  3. The system of equations is solved for X using the factored form\n*     of A.\n*\n*  4. Iterative refinement is applied to improve the computed solution\n*     matrix and calculate error bounds and backward error estimates\n*     for it.\n*\n*  Arguments\n*  =========\n*\n*  FACT    (input) CHARACTER*1\n*          Specifies whether or not the factored form of A has been\n*          supplied on entry.\n*          = \'F\':  On entry, AF and IPIV contain the factored form\n*                  of A.  A, AF and IPIV will not be modified.\n*          = \'N\':  The matrix A will be copied to AF and factored.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  A       (input) COMPLEX array, dimension (LDA,N)\n*          The Hermitian matrix A.  If UPLO = \'U\', the leading N-by-N\n*          upper triangular part of A contains the upper triangular part\n*          of the matrix A, and the strictly lower triangular part of A\n*          is not referenced.  If UPLO = \'L\', the leading N-by-N lower\n*          triangular part of A contains the lower triangular part of\n*          the matrix A, and the strictly upper triangular part of A is\n*          not referenced.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  AF      (input or output) COMPLEX array, dimension (LDAF,N)\n*          If FACT = \'F\', then AF is an input argument and on entry\n*          contains the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L from the factorization\n*          A = U*D*U**H or A = L*D*L**H as computed by CHETRF.\n*\n*          If FACT = \'N\', then AF is an output argument and on exit\n*          returns the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L from the factorization\n*          A = U*D*U**H or A = L*D*L**H.\n*\n*  LDAF    (input) INTEGER\n*          The leading dimension of the array AF.  LDAF >= max(1,N).\n*\n*  IPIV    (input or output) INTEGER array, dimension (N)\n*          If FACT = \'F\', then IPIV is an input argument and on entry\n*          contains details of the interchanges and the block structure\n*          of D, as determined by CHETRF.\n*          If IPIV(k) > 0, then rows and columns k and IPIV(k) were\n*          interchanged and D(k,k) is a 1-by-1 diagonal block.\n*          If UPLO = \'U\' and IPIV(k) = IPIV(k-1) < 0, then rows and\n*          columns k-1 and -IPIV(k) were interchanged and D(k-1:k,k-1:k)\n*          is a 2-by-2 diagonal block.  If UPLO = \'L\' and IPIV(k) =\n*          IPIV(k+1) < 0, then rows and columns k+1 and -IPIV(k) were\n*          interchanged and D(k:k+1,k:k+1) is a 2-by-2 diagonal block.\n*\n*          If FACT = \'N\', then IPIV is an output argument and on exit\n*          contains details of the interchanges and the block structure\n*          of D, as determined by CHETRF.\n*\n*  B       (input) COMPLEX array, dimension (LDB,NRHS)\n*          The N-by-NRHS right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (output) COMPLEX array, dimension (LDX,NRHS)\n*          If INFO = 0 or INFO = N+1, the N-by-NRHS solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  RCOND   (output) REAL\n*          The estimate of the reciprocal condition number of the matrix\n*          A.  If RCOND is less than the machine precision (in\n*          particular, if RCOND = 0), the matrix is singular to working\n*          precision.  This condition is indicated by a return code of\n*          INFO > 0.\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace/output) COMPLEX array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The length of WORK.  LWORK >= max(1,2*N), and for best\n*          performance, when FACT = \'N\', LWORK >= max(1,2*N,N*NB), where\n*          NB is the optimal blocksize for CHETRF.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  RWORK   (workspace) REAL array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, and i is\n*                <= N:  D(i,i) is exactly zero.  The factorization\n*                       has been completed but the factor D is exactly\n*                       singular, so the solution and error bounds could\n*                       not be computed. RCOND = 0 is returned.\n*                = N+1: D is nonsingular, but RCOND is less than machine\n*                       precision, meaning that the matrix is singular\n*                       to working precision.  Nevertheless, the\n*                       solution and error bounds are computed because\n*                       there are a number of situations where the\n*                       computed solution can be more accurate than the\n*                       value of RCOND would suggest.\n*\n'),(54,'zhesvx_54.txt','      SUBROUTINE ZHESVX( FACT, UPLO, N, NRHS, A, LDA, AF, LDAF, IPIV, B,\n     $                   LDB, X, LDX, RCOND, FERR, BERR, WORK, LWORK,\n     $                   RWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          FACT, UPLO\n      INTEGER            INFO, LDA, LDAF, LDB, LDX, LWORK, N, NRHS\n      DOUBLE PRECISION   RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      DOUBLE PRECISION   BERR( * ), FERR( * ), RWORK( * )\n      COMPLEX*16         A( LDA, * ), AF( LDAF, * ), B( LDB, * ),\n     $                   WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZHESVX uses the diagonal pivoting factorization to compute the\n*  solution to a complex system of linear equations A * X = B,\n*  where A is an N-by-N Hermitian matrix and X and B are N-by-NRHS\n*  matrices.\n*\n*  Error bounds on the solution and a condition estimate are also\n*  provided.\n*\n*  Description\n*  ===========\n*\n*  The following steps are performed:\n*\n*  1. If FACT = \'N\', the diagonal pivoting method is used to factor A.\n*     The form of the factorization is\n*        A = U * D * U**H,  if UPLO = \'U\', or\n*        A = L * D * L**H,  if UPLO = \'L\',\n*     where U (or L) is a product of permutation and unit upper (lower)\n*     triangular matrices, and D is Hermitian and block diagonal with\n*     1-by-1 and 2-by-2 diagonal blocks.\n*\n*  2. If some D(i,i)=0, so that D is exactly singular, then the routine\n*     returns with INFO = i. Otherwise, the factored form of A is used\n*     to estimate the condition number of the matrix A.  If the\n*     reciprocal of the condition number is less than machine precision,\n*     INFO = N+1 is returned as a warning, but the routine still goes on\n*     to solve for X and compute error bounds as described below.\n*\n*  3. The system of equations is solved for X using the factored form\n*     of A.\n*\n*  4. Iterative refinement is applied to improve the computed solution\n*     matrix and calculate error bounds and backward error estimates\n*     for it.\n*\n*  Arguments\n*  =========\n*\n*  FACT    (input) CHARACTER*1\n*          Specifies whether or not the factored form of A has been\n*          supplied on entry.\n*          = \'F\':  On entry, AF and IPIV contain the factored form\n*                  of A.  A, AF and IPIV will not be modified.\n*          = \'N\':  The matrix A will be copied to AF and factored.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  A       (input) COMPLEX*16 array, dimension (LDA,N)\n*          The Hermitian matrix A.  If UPLO = \'U\', the leading N-by-N\n*          upper triangular part of A contains the upper triangular part\n*          of the matrix A, and the strictly lower triangular part of A\n*          is not referenced.  If UPLO = \'L\', the leading N-by-N lower\n*          triangular part of A contains the lower triangular part of\n*          the matrix A, and the strictly upper triangular part of A is\n*          not referenced.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  AF      (input or output) COMPLEX*16 array, dimension (LDAF,N)\n*          If FACT = \'F\', then AF is an input argument and on entry\n*          contains the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L from the factorization\n*          A = U*D*U**H or A = L*D*L**H as computed by ZHETRF.\n*\n*          If FACT = \'N\', then AF is an output argument and on exit\n*          returns the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L from the factorization\n*          A = U*D*U**H or A = L*D*L**H.\n*\n*  LDAF    (input) INTEGER\n*          The leading dimension of the array AF.  LDAF >= max(1,N).\n*\n*  IPIV    (input or output) INTEGER array, dimension (N)\n*          If FACT = \'F\', then IPIV is an input argument and on entry\n*          contains details of the interchanges and the block structure\n*          of D, as determined by ZHETRF.\n*          If IPIV(k) > 0, then rows and columns k and IPIV(k) were\n*          interchanged and D(k,k) is a 1-by-1 diagonal block.\n*          If UPLO = \'U\' and IPIV(k) = IPIV(k-1) < 0, then rows and\n*          columns k-1 and -IPIV(k) were interchanged and D(k-1:k,k-1:k)\n*          is a 2-by-2 diagonal block.  If UPLO = \'L\' and IPIV(k) =\n*          IPIV(k+1) < 0, then rows and columns k+1 and -IPIV(k) were\n*          interchanged and D(k:k+1,k:k+1) is a 2-by-2 diagonal block.\n*\n*          If FACT = \'N\', then IPIV is an output argument and on exit\n*          contains details of the interchanges and the block structure\n*          of D, as determined by ZHETRF.\n*\n*  B       (input) COMPLEX*16 array, dimension (LDB,NRHS)\n*          The N-by-NRHS right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (output) COMPLEX*16 array, dimension (LDX,NRHS)\n*          If INFO = 0 or INFO = N+1, the N-by-NRHS solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The estimate of the reciprocal condition number of the matrix\n*          A.  If RCOND is less than the machine precision (in\n*          particular, if RCOND = 0), the matrix is singular to working\n*          precision.  This condition is indicated by a return code of\n*          INFO > 0.\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace/output) COMPLEX*16 array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The length of WORK.  LWORK >= max(1,2*N), and for best\n*          performance, when FACT = \'N\', LWORK >= max(1,2*N,N*NB), where\n*          NB is the optimal blocksize for ZHETRF.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, and i is\n*                <= N:  D(i,i) is exactly zero.  The factorization\n*                       has been completed but the factor D is exactly\n*                       singular, so the solution and error bounds could\n*                       not be computed. RCOND = 0 is returned.\n*                = N+1: D is nonsingular, but RCOND is less than machine\n*                       precision, meaning that the matrix is singular\n*                       to working precision.  Nevertheless, the\n*                       solution and error bounds are computed because\n*                       there are a number of situations where the\n*                       computed solution can be more accurate than the\n*                       value of RCOND would suggest.\n*\n'),(55,'chpsvx_55.txt','      SUBROUTINE CHPSVX( FACT, UPLO, N, NRHS, AP, AFP, IPIV, B, LDB, X,\n     $                   LDX, RCOND, FERR, BERR, WORK, RWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          FACT, UPLO\n      INTEGER            INFO, LDB, LDX, N, NRHS\n      REAL               RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      REAL               BERR( * ), FERR( * ), RWORK( * )\n      COMPLEX            AFP( * ), AP( * ), B( LDB, * ), WORK( * ),\n     $                   X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CHPSVX uses the diagonal pivoting factorization A = U*D*U**H or\n*  A = L*D*L**H to compute the solution to a complex system of linear\n*  equations A * X = B, where A is an N-by-N Hermitian matrix stored\n*  in packed format and X and B are N-by-NRHS matrices.\n*\n*  Error bounds on the solution and a condition estimate are also\n*  provided.\n*\n*  Description\n*  ===========\n*\n*  The following steps are performed:\n*\n*  1. If FACT = \'N\', the diagonal pivoting method is used to factor A as\n*        A = U * D * U**H,  if UPLO = \'U\', or\n*        A = L * D * L**H,  if UPLO = \'L\',\n*     where U (or L) is a product of permutation and unit upper (lower)\n*     triangular matrices and D is Hermitian and block diagonal with\n*     1-by-1 and 2-by-2 diagonal blocks.\n*\n*  2. If some D(i,i)=0, so that D is exactly singular, then the routine\n*     returns with INFO = i. Otherwise, the factored form of A is used\n*     to estimate the condition number of the matrix A.  If the\n*     reciprocal of the condition number is less than machine precision,\n*     INFO = N+1 is returned as a warning, but the routine still goes on\n*     to solve for X and compute error bounds as described below.\n*\n*  3. The system of equations is solved for X using the factored form\n*     of A.\n*\n*  4. Iterative refinement is applied to improve the computed solution\n*     matrix and calculate error bounds and backward error estimates\n*     for it.\n*\n*  Arguments\n*  =========\n*\n*  FACT    (input) CHARACTER*1\n*          Specifies whether or not the factored form of A has been\n*          supplied on entry.\n*          = \'F\':  On entry, AFP and IPIV contain the factored form of\n*                  A.  AFP and IPIV will not be modified.\n*          = \'N\':  The matrix A will be copied to AFP and factored.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AP      (input) COMPLEX array, dimension (N*(N+1)/2)\n*          The upper or lower triangle of the Hermitian matrix A, packed\n*          columnwise in a linear array.  The j-th column of A is stored\n*          in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*          See below for further details.\n*\n*  AFP     (input or output) COMPLEX array, dimension (N*(N+1)/2)\n*          If FACT = \'F\', then AFP is an input argument and on entry\n*          contains the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L from the factorization\n*          A = U*D*U**H or A = L*D*L**H as computed by CHPTRF, stored as\n*          a packed triangular matrix in the same storage format as A.\n*\n*          If FACT = \'N\', then AFP is an output argument and on exit\n*          contains the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L from the factorization\n*          A = U*D*U**H or A = L*D*L**H as computed by CHPTRF, stored as\n*          a packed triangular matrix in the same storage format as A.\n*\n*  IPIV    (input or output) INTEGER array, dimension (N)\n*          If FACT = \'F\', then IPIV is an input argument and on entry\n*          contains details of the interchanges and the block structure\n*          of D, as determined by CHPTRF.\n*          If IPIV(k) > 0, then rows and columns k and IPIV(k) were\n*          interchanged and D(k,k) is a 1-by-1 diagonal block.\n*          If UPLO = \'U\' and IPIV(k) = IPIV(k-1) < 0, then rows and\n*          columns k-1 and -IPIV(k) were interchanged and D(k-1:k,k-1:k)\n*          is a 2-by-2 diagonal block.  If UPLO = \'L\' and IPIV(k) =\n*          IPIV(k+1) < 0, then rows and columns k+1 and -IPIV(k) were\n*          interchanged and D(k:k+1,k:k+1) is a 2-by-2 diagonal block.\n*\n*          If FACT = \'N\', then IPIV is an output argument and on exit\n*          contains details of the interchanges and the block structure\n*          of D, as determined by CHPTRF.\n*\n*  B       (input) COMPLEX array, dimension (LDB,NRHS)\n*          The N-by-NRHS right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (output) COMPLEX array, dimension (LDX,NRHS)\n*          If INFO = 0 or INFO = N+1, the N-by-NRHS solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  RCOND   (output) REAL\n*          The estimate of the reciprocal condition number of the matrix\n*          A.  If RCOND is less than the machine precision (in\n*          particular, if RCOND = 0), the matrix is singular to working\n*          precision.  This condition is indicated by a return code of\n*          INFO > 0.\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX array, dimension (2*N)\n*\n*  RWORK   (workspace) REAL array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is\n*                <= N:  D(i,i) is exactly zero.  The factorization\n*                       has been completed but the factor D is exactly\n*                       singular, so the solution and error bounds could\n*                       not be computed. RCOND = 0 is returned.\n*                = N+1: D is nonsingular, but RCOND is less than machine\n*                       precision, meaning that the matrix is singular\n*                       to working precision.  Nevertheless, the\n*                       solution and error bounds are computed because\n*                       there are a number of situations where the\n*                       computed solution can be more accurate than the\n*                       value of RCOND would suggest.\n*\n'),(56,'zhpsvx_56.txt','      SUBROUTINE ZHPSVX( FACT, UPLO, N, NRHS, AP, AFP, IPIV, B, LDB, X,\n     $                   LDX, RCOND, FERR, BERR, WORK, RWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          FACT, UPLO\n      INTEGER            INFO, LDB, LDX, N, NRHS\n      DOUBLE PRECISION   RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      DOUBLE PRECISION   BERR( * ), FERR( * ), RWORK( * )\n      COMPLEX*16         AFP( * ), AP( * ), B( LDB, * ), WORK( * ),\n     $                   X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZHPSVX uses the diagonal pivoting factorization A = U*D*U**H or\n*  A = L*D*L**H to compute the solution to a complex system of linear\n*  equations A * X = B, where A is an N-by-N Hermitian matrix stored\n*  in packed format and X and B are N-by-NRHS matrices.\n*\n*  Error bounds on the solution and a condition estimate are also\n*  provided.\n*\n*  Description\n*  ===========\n*\n*  The following steps are performed:\n*\n*  1. If FACT = \'N\', the diagonal pivoting method is used to factor A as\n*        A = U * D * U**H,  if UPLO = \'U\', or\n*        A = L * D * L**H,  if UPLO = \'L\',\n*     where U (or L) is a product of permutation and unit upper (lower)\n*     triangular matrices and D is Hermitian and block diagonal with\n*     1-by-1 and 2-by-2 diagonal blocks.\n*\n*  2. If some D(i,i)=0, so that D is exactly singular, then the routine\n*     returns with INFO = i. Otherwise, the factored form of A is used\n*     to estimate the condition number of the matrix A.  If the\n*     reciprocal of the condition number is less than machine precision,\n*     INFO = N+1 is returned as a warning, but the routine still goes on\n*     to solve for X and compute error bounds as described below.\n*\n*  3. The system of equations is solved for X using the factored form\n*     of A.\n*\n*  4. Iterative refinement is applied to improve the computed solution\n*     matrix and calculate error bounds and backward error estimates\n*     for it.\n*\n*  Arguments\n*  =========\n*\n*  FACT    (input) CHARACTER*1\n*          Specifies whether or not the factored form of A has been\n*          supplied on entry.\n*          = \'F\':  On entry, AFP and IPIV contain the factored form of\n*                  A.  AFP and IPIV will not be modified.\n*          = \'N\':  The matrix A will be copied to AFP and factored.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AP      (input) COMPLEX*16 array, dimension (N*(N+1)/2)\n*          The upper or lower triangle of the Hermitian matrix A, packed\n*          columnwise in a linear array.  The j-th column of A is stored\n*          in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*          See below for further details.\n*\n*  AFP     (input or output) COMPLEX*16 array, dimension (N*(N+1)/2)\n*          If FACT = \'F\', then AFP is an input argument and on entry\n*          contains the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L from the factorization\n*          A = U*D*U**H or A = L*D*L**H as computed by ZHPTRF, stored as\n*          a packed triangular matrix in the same storage format as A.\n*\n*          If FACT = \'N\', then AFP is an output argument and on exit\n*          contains the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L from the factorization\n*          A = U*D*U**H or A = L*D*L**H as computed by ZHPTRF, stored as\n*          a packed triangular matrix in the same storage format as A.\n*\n*  IPIV    (input or output) INTEGER array, dimension (N)\n*          If FACT = \'F\', then IPIV is an input argument and on entry\n*          contains details of the interchanges and the block structure\n*          of D, as determined by ZHPTRF.\n*          If IPIV(k) > 0, then rows and columns k and IPIV(k) were\n*          interchanged and D(k,k) is a 1-by-1 diagonal block.\n*          If UPLO = \'U\' and IPIV(k) = IPIV(k-1) < 0, then rows and\n*          columns k-1 and -IPIV(k) were interchanged and D(k-1:k,k-1:k)\n*          is a 2-by-2 diagonal block.  If UPLO = \'L\' and IPIV(k) =\n*          IPIV(k+1) < 0, then rows and columns k+1 and -IPIV(k) were\n*          interchanged and D(k:k+1,k:k+1) is a 2-by-2 diagonal block.\n*\n*          If FACT = \'N\', then IPIV is an output argument and on exit\n*          contains details of the interchanges and the block structure\n*          of D, as determined by ZHPTRF.\n*\n*  B       (input) COMPLEX*16 array, dimension (LDB,NRHS)\n*          The N-by-NRHS right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (output) COMPLEX*16 array, dimension (LDX,NRHS)\n*          If INFO = 0 or INFO = N+1, the N-by-NRHS solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The estimate of the reciprocal condition number of the matrix\n*          A.  If RCOND is less than the machine precision (in\n*          particular, if RCOND = 0), the matrix is singular to working\n*          precision.  This condition is indicated by a return code of\n*          INFO > 0.\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is\n*                <= N:  D(i,i) is exactly zero.  The factorization\n*                       has been completed but the factor D is exactly\n*                       singular, so the solution and error bounds could\n*                       not be computed. RCOND = 0 is returned.\n*                = N+1: D is nonsingular, but RCOND is less than machine\n*                       precision, meaning that the matrix is singular\n*                       to working precision.  Nevertheless, the\n*                       solution and error bounds are computed because\n*                       there are a number of situations where the\n*                       computed solution can be more accurate than the\n*                       value of RCOND would suggest.\n*\n'),(57,'sposvx_57.txt','      SUBROUTINE SPOSVX( FACT, UPLO, N, NRHS, A, LDA, AF, LDAF, EQUED,\n     $                   S, B, LDB, X, LDX, RCOND, FERR, BERR, WORK,\n     $                   IWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          EQUED, FACT, UPLO\n      INTEGER            INFO, LDA, LDAF, LDB, LDX, N, NRHS\n      REAL               RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      REAL               A( LDA, * ), AF( LDAF, * ), B( LDB, * ),\n     $                   BERR( * ), FERR( * ), S( * ), WORK( * ),\n     $                   X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SPOSVX uses the Cholesky factorization A = U**T*U or A = L*L**T to\n*  compute the solution to a real system of linear equations\n*     A * X = B,\n*  where A is an N-by-N symmetric positive definite matrix and X and B\n*  are N-by-NRHS matrices.\n*\n*  Error bounds on the solution and a condition estimate are also\n*  provided.\n*\n*  Description\n*  ===========\n*\n*  The following steps are performed:\n*\n*  1. If FACT = \'E\', real scaling factors are computed to equilibrate\n*     the system:\n*        diag(S) * A * diag(S) * inv(diag(S)) * X = diag(S) * B\n*     Whether or not the system will be equilibrated depends on the\n*     scaling of the matrix A, but if equilibration is used, A is\n*     overwritten by diag(S)*A*diag(S) and B by diag(S)*B.\n*\n*  2. If FACT = \'N\' or \'E\', the Cholesky decomposition is used to\n*     factor the matrix A (after equilibration if FACT = \'E\') as\n*        A = U**T* U,  if UPLO = \'U\', or\n*        A = L * L**T,  if UPLO = \'L\',\n*     where U is an upper triangular matrix and L is a lower triangular\n*     matrix.\n*\n*  3. If the leading i-by-i principal minor is not positive definite,\n*     then the routine returns with INFO = i. Otherwise, the factored\n*     form of A is used to estimate the condition number of the matrix\n*     A.  If the reciprocal of the condition number is less than machine\n*     precision, INFO = N+1 is returned as a warning, but the routine\n*     still goes on to solve for X and compute error bounds as\n*     described below.\n*\n*  4. The system of equations is solved for X using the factored form\n*     of A.\n*\n*  5. Iterative refinement is applied to improve the computed solution\n*     matrix and calculate error bounds and backward error estimates\n*     for it.\n*\n*  6. If equilibration was used, the matrix X is premultiplied by\n*     diag(S) so that it solves the original system before\n*     equilibration.\n*\n*  Arguments\n*  =========\n*\n*  FACT    (input) CHARACTER*1\n*          Specifies whether or not the factored form of the matrix A is\n*          supplied on entry, and if not, whether the matrix A should be\n*          equilibrated before it is factored.\n*          = \'F\':  On entry, AF contains the factored form of A.\n*                  If EQUED = \'Y\', the matrix A has been equilibrated\n*                  with scaling factors given by S.  A and AF will not\n*                  be modified.\n*          = \'N\':  The matrix A will be copied to AF and factored.\n*          = \'E\':  The matrix A will be equilibrated if necessary, then\n*                  copied to AF and factored.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  A       (input/output) REAL array, dimension (LDA,N)\n*          On entry, the symmetric matrix A, except if FACT = \'F\' and\n*          EQUED = \'Y\', then A must contain the equilibrated matrix\n*          diag(S)*A*diag(S).  If UPLO = \'U\', the leading\n*          N-by-N upper triangular part of A contains the upper\n*          triangular part of the matrix A, and the strictly lower\n*          triangular part of A is not referenced.  If UPLO = \'L\', the\n*          leading N-by-N lower triangular part of A contains the lower\n*          triangular part of the matrix A, and the strictly upper\n*          triangular part of A is not referenced.  A is not modified if\n*          FACT = \'F\' or \'N\', or if FACT = \'E\' and EQUED = \'N\' on exit.\n*\n*          On exit, if FACT = \'E\' and EQUED = \'Y\', A is overwritten by\n*          diag(S)*A*diag(S).\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  AF      (input or output) REAL array, dimension (LDAF,N)\n*          If FACT = \'F\', then AF is an input argument and on entry\n*          contains the triangular factor U or L from the Cholesky\n*          factorization A = U**T*U or A = L*L**T, in the same storage\n*          format as A.  If EQUED .ne. \'N\', then AF is the factored form\n*          of the equilibrated matrix diag(S)*A*diag(S).\n*\n*          If FACT = \'N\', then AF is an output argument and on exit\n*          returns the triangular factor U or L from the Cholesky\n*          factorization A = U**T*U or A = L*L**T of the original\n*          matrix A.\n*\n*          If FACT = \'E\', then AF is an output argument and on exit\n*          returns the triangular factor U or L from the Cholesky\n*          factorization A = U**T*U or A = L*L**T of the equilibrated\n*          matrix A (see the description of A for the form of the\n*          equilibrated matrix).\n*\n*  LDAF    (input) INTEGER\n*          The leading dimension of the array AF.  LDAF >= max(1,N).\n*\n*  EQUED   (input or output) CHARACTER*1\n*          Specifies the form of equilibration that was done.\n*          = \'N\':  No equilibration (always true if FACT = \'N\').\n*          = \'Y\':  Equilibration was done, i.e., A has been replaced by\n*                  diag(S) * A * diag(S).\n*          EQUED is an input argument if FACT = \'F\'; otherwise, it is an\n*          output argument.\n*\n*  S       (input or output) REAL array, dimension (N)\n*          The scale factors for A; not accessed if EQUED = \'N\'.  S is\n*          an input argument if FACT = \'F\'; otherwise, S is an output\n*          argument.  If FACT = \'F\' and EQUED = \'Y\', each element of S\n*          must be positive.\n*\n*  B       (input/output) REAL array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if EQUED = \'N\', B is not modified; if EQUED = \'Y\',\n*          B is overwritten by diag(S) * B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (output) REAL array, dimension (LDX,NRHS)\n*          If INFO = 0 or INFO = N+1, the N-by-NRHS solution matrix X to\n*          the original system of equations.  Note that if EQUED = \'Y\',\n*          A and B are modified on exit, and the solution to the\n*          equilibrated system is inv(diag(S))*X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  RCOND   (output) REAL\n*          The estimate of the reciprocal condition number of the matrix\n*          A after equilibration (if done).  If RCOND is less than the\n*          machine precision (in particular, if RCOND = 0), the matrix\n*          is singular to working precision.  This condition is\n*          indicated by a return code of INFO > 0.\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) REAL array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, and i is\n*                <= N:  the leading minor of order i of A is\n*                       not positive definite, so the factorization\n*                       could not be completed, and the solution has not\n*                       been computed. RCOND = 0 is returned.\n*                = N+1: U is nonsingular, but RCOND is less than machine\n*                       precision, meaning that the matrix is singular\n*                       to working precision.  Nevertheless, the\n*                       solution and error bounds are computed because\n*                       there are a number of situations where the\n*                       computed solution can be more accurate than the\n*                       value of RCOND would suggest.\n*\n'),(58,'dposvx_58.txt','      SUBROUTINE DPOSVX( FACT, UPLO, N, NRHS, A, LDA, AF, LDAF, EQUED,\n     $                   S, B, LDB, X, LDX, RCOND, FERR, BERR, WORK,\n     $                   IWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          EQUED, FACT, UPLO\n      INTEGER            INFO, LDA, LDAF, LDB, LDX, N, NRHS\n      DOUBLE PRECISION   RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      DOUBLE PRECISION   A( LDA, * ), AF( LDAF, * ), B( LDB, * ),\n     $                   BERR( * ), FERR( * ), S( * ), WORK( * ),\n     $                   X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DPOSVX uses the Cholesky factorization A = U**T*U or A = L*L**T to\n*  compute the solution to a real system of linear equations\n*     A * X = B,\n*  where A is an N-by-N symmetric positive definite matrix and X and B\n*  are N-by-NRHS matrices.\n*\n*  Error bounds on the solution and a condition estimate are also\n*  provided.\n*\n*  Description\n*  ===========\n*\n*  The following steps are performed:\n*\n*  1. If FACT = \'E\', real scaling factors are computed to equilibrate\n*     the system:\n*        diag(S) * A * diag(S) * inv(diag(S)) * X = diag(S) * B\n*     Whether or not the system will be equilibrated depends on the\n*     scaling of the matrix A, but if equilibration is used, A is\n*     overwritten by diag(S)*A*diag(S) and B by diag(S)*B.\n*\n*  2. If FACT = \'N\' or \'E\', the Cholesky decomposition is used to\n*     factor the matrix A (after equilibration if FACT = \'E\') as\n*        A = U**T* U,  if UPLO = \'U\', or\n*        A = L * L**T,  if UPLO = \'L\',\n*     where U is an upper triangular matrix and L is a lower triangular\n*     matrix.\n*\n*  3. If the leading i-by-i principal minor is not positive definite,\n*     then the routine returns with INFO = i. Otherwise, the factored\n*     form of A is used to estimate the condition number of the matrix\n*     A.  If the reciprocal of the condition number is less than machine\n*     precision, INFO = N+1 is returned as a warning, but the routine\n*     still goes on to solve for X and compute error bounds as\n*     described below.\n*\n*  4. The system of equations is solved for X using the factored form\n*     of A.\n*\n*  5. Iterative refinement is applied to improve the computed solution\n*     matrix and calculate error bounds and backward error estimates\n*     for it.\n*\n*  6. If equilibration was used, the matrix X is premultiplied by\n*     diag(S) so that it solves the original system before\n*     equilibration.\n*\n*  Arguments\n*  =========\n*\n*  FACT    (input) CHARACTER*1\n*          Specifies whether or not the factored form of the matrix A is\n*          supplied on entry, and if not, whether the matrix A should be\n*          equilibrated before it is factored.\n*          = \'F\':  On entry, AF contains the factored form of A.\n*                  If EQUED = \'Y\', the matrix A has been equilibrated\n*                  with scaling factors given by S.  A and AF will not\n*                  be modified.\n*          = \'N\':  The matrix A will be copied to AF and factored.\n*          = \'E\':  The matrix A will be equilibrated if necessary, then\n*                  copied to AF and factored.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  A       (input/output) DOUBLE PRECISION array, dimension (LDA,N)\n*          On entry, the symmetric matrix A, except if FACT = \'F\' and\n*          EQUED = \'Y\', then A must contain the equilibrated matrix\n*          diag(S)*A*diag(S).  If UPLO = \'U\', the leading\n*          N-by-N upper triangular part of A contains the upper\n*          triangular part of the matrix A, and the strictly lower\n*          triangular part of A is not referenced.  If UPLO = \'L\', the\n*          leading N-by-N lower triangular part of A contains the lower\n*          triangular part of the matrix A, and the strictly upper\n*          triangular part of A is not referenced.  A is not modified if\n*          FACT = \'F\' or \'N\', or if FACT = \'E\' and EQUED = \'N\' on exit.\n*\n*          On exit, if FACT = \'E\' and EQUED = \'Y\', A is overwritten by\n*          diag(S)*A*diag(S).\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  AF      (input or output) DOUBLE PRECISION array, dimension (LDAF,N)\n*          If FACT = \'F\', then AF is an input argument and on entry\n*          contains the triangular factor U or L from the Cholesky\n*          factorization A = U**T*U or A = L*L**T, in the same storage\n*          format as A.  If EQUED .ne. \'N\', then AF is the factored form\n*          of the equilibrated matrix diag(S)*A*diag(S).\n*\n*          If FACT = \'N\', then AF is an output argument and on exit\n*          returns the triangular factor U or L from the Cholesky\n*          factorization A = U**T*U or A = L*L**T of the original\n*          matrix A.\n*\n*          If FACT = \'E\', then AF is an output argument and on exit\n*          returns the triangular factor U or L from the Cholesky\n*          factorization A = U**T*U or A = L*L**T of the equilibrated\n*          matrix A (see the description of A for the form of the\n*          equilibrated matrix).\n*\n*  LDAF    (input) INTEGER\n*          The leading dimension of the array AF.  LDAF >= max(1,N).\n*\n*  EQUED   (input or output) CHARACTER*1\n*          Specifies the form of equilibration that was done.\n*          = \'N\':  No equilibration (always true if FACT = \'N\').\n*          = \'Y\':  Equilibration was done, i.e., A has been replaced by\n*                  diag(S) * A * diag(S).\n*          EQUED is an input argument if FACT = \'F\'; otherwise, it is an\n*          output argument.\n*\n*  S       (input or output) DOUBLE PRECISION array, dimension (N)\n*          The scale factors for A; not accessed if EQUED = \'N\'.  S is\n*          an input argument if FACT = \'F\'; otherwise, S is an output\n*          argument.  If FACT = \'F\' and EQUED = \'Y\', each element of S\n*          must be positive.\n*\n*  B       (input/output) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if EQUED = \'N\', B is not modified; if EQUED = \'Y\',\n*          B is overwritten by diag(S) * B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (output) DOUBLE PRECISION array, dimension (LDX,NRHS)\n*          If INFO = 0 or INFO = N+1, the N-by-NRHS solution matrix X to\n*          the original system of equations.  Note that if EQUED = \'Y\',\n*          A and B are modified on exit, and the solution to the\n*          equilibrated system is inv(diag(S))*X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The estimate of the reciprocal condition number of the matrix\n*          A after equilibration (if done).  If RCOND is less than the\n*          machine precision (in particular, if RCOND = 0), the matrix\n*          is singular to working precision.  This condition is\n*          indicated by a return code of INFO > 0.\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) DOUBLE PRECISION array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, and i is\n*                <= N:  the leading minor of order i of A is\n*                       not positive definite, so the factorization\n*                       could not be completed, and the solution has not\n*                       been computed. RCOND = 0 is returned.\n*                = N+1: U is nonsingular, but RCOND is less than machine\n*                       precision, meaning that the matrix is singular\n*                       to working precision.  Nevertheless, the\n*                       solution and error bounds are computed because\n*                       there are a number of situations where the\n*                       computed solution can be more accurate than the\n*                       value of RCOND would suggest.\n*\n'),(59,'cposvx_59.txt','      SUBROUTINE CPOSVX( FACT, UPLO, N, NRHS, A, LDA, AF, LDAF, EQUED,\n     $                   S, B, LDB, X, LDX, RCOND, FERR, BERR, WORK,\n     $                   RWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          EQUED, FACT, UPLO\n      INTEGER            INFO, LDA, LDAF, LDB, LDX, N, NRHS\n      REAL               RCOND\n*     ..\n*     .. Array Arguments ..\n      REAL               BERR( * ), FERR( * ), RWORK( * ), S( * )\n      COMPLEX            A( LDA, * ), AF( LDAF, * ), B( LDB, * ),\n     $                   WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CPOSVX uses the Cholesky factorization A = U**H*U or A = L*L**H to\n*  compute the solution to a complex system of linear equations\n*     A * X = B,\n*  where A is an N-by-N Hermitian positive definite matrix and X and B\n*  are N-by-NRHS matrices.\n*\n*  Error bounds on the solution and a condition estimate are also\n*  provided.\n*\n*  Description\n*  ===========\n*\n*  The following steps are performed:\n*\n*  1. If FACT = \'E\', real scaling factors are computed to equilibrate\n*     the system:\n*        diag(S) * A * diag(S) * inv(diag(S)) * X = diag(S) * B\n*     Whether or not the system will be equilibrated depends on the\n*     scaling of the matrix A, but if equilibration is used, A is\n*     overwritten by diag(S)*A*diag(S) and B by diag(S)*B.\n*\n*  2. If FACT = \'N\' or \'E\', the Cholesky decomposition is used to\n*     factor the matrix A (after equilibration if FACT = \'E\') as\n*        A = U**H* U,  if UPLO = \'U\', or\n*        A = L * L**H,  if UPLO = \'L\',\n*     where U is an upper triangular matrix and L is a lower triangular\n*     matrix.\n*\n*  3. If the leading i-by-i principal minor is not positive definite,\n*     then the routine returns with INFO = i. Otherwise, the factored\n*     form of A is used to estimate the condition number of the matrix\n*     A.  If the reciprocal of the condition number is less than machine\n*     precision, INFO = N+1 is returned as a warning, but the routine\n*     still goes on to solve for X and compute error bounds as\n*     described below.\n*\n*  4. The system of equations is solved for X using the factored form\n*     of A.\n*\n*  5. Iterative refinement is applied to improve the computed solution\n*     matrix and calculate error bounds and backward error estimates\n*     for it.\n*\n*  6. If equilibration was used, the matrix X is premultiplied by\n*     diag(S) so that it solves the original system before\n*     equilibration.\n*\n*  Arguments\n*  =========\n*\n*  FACT    (input) CHARACTER*1\n*          Specifies whether or not the factored form of the matrix A is\n*          supplied on entry, and if not, whether the matrix A should be\n*          equilibrated before it is factored.\n*          = \'F\':  On entry, AF contains the factored form of A.\n*                  If EQUED = \'Y\', the matrix A has been equilibrated\n*                  with scaling factors given by S.  A and AF will not\n*                  be modified.\n*          = \'N\':  The matrix A will be copied to AF and factored.\n*          = \'E\':  The matrix A will be equilibrated if necessary, then\n*                  copied to AF and factored.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  A       (input/output) COMPLEX array, dimension (LDA,N)\n*          On entry, the Hermitian matrix A, except if FACT = \'F\' and\n*          EQUED = \'Y\', then A must contain the equilibrated matrix\n*          diag(S)*A*diag(S).  If UPLO = \'U\', the leading\n*          N-by-N upper triangular part of A contains the upper\n*          triangular part of the matrix A, and the strictly lower\n*          triangular part of A is not referenced.  If UPLO = \'L\', the\n*          leading N-by-N lower triangular part of A contains the lower\n*          triangular part of the matrix A, and the strictly upper\n*          triangular part of A is not referenced.  A is not modified if\n*          FACT = \'F\' or \'N\', or if FACT = \'E\' and EQUED = \'N\' on exit.\n*\n*          On exit, if FACT = \'E\' and EQUED = \'Y\', A is overwritten by\n*          diag(S)*A*diag(S).\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  AF      (input or output) COMPLEX array, dimension (LDAF,N)\n*          If FACT = \'F\', then AF is an input argument and on entry\n*          contains the triangular factor U or L from the Cholesky\n*          factorization A = U**H*U or A = L*L**H, in the same storage\n*          format as A.  If EQUED .ne. \'N\', then AF is the factored form\n*          of the equilibrated matrix diag(S)*A*diag(S).\n*\n*          If FACT = \'N\', then AF is an output argument and on exit\n*          returns the triangular factor U or L from the Cholesky\n*          factorization A = U**H*U or A = L*L**H of the original\n*          matrix A.\n*\n*          If FACT = \'E\', then AF is an output argument and on exit\n*          returns the triangular factor U or L from the Cholesky\n*          factorization A = U**H*U or A = L*L**H of the equilibrated\n*          matrix A (see the description of A for the form of the\n*          equilibrated matrix).\n*\n*  LDAF    (input) INTEGER\n*          The leading dimension of the array AF.  LDAF >= max(1,N).\n*\n*  EQUED   (input or output) CHARACTER*1\n*          Specifies the form of equilibration that was done.\n*          = \'N\':  No equilibration (always true if FACT = \'N\').\n*          = \'Y\':  Equilibration was done, i.e., A has been replaced by\n*                  diag(S) * A * diag(S).\n*          EQUED is an input argument if FACT = \'F\'; otherwise, it is an\n*          output argument.\n*\n*  S       (input or output) REAL array, dimension (N)\n*          The scale factors for A; not accessed if EQUED = \'N\'.  S is\n*          an input argument if FACT = \'F\'; otherwise, S is an output\n*          argument.  If FACT = \'F\' and EQUED = \'Y\', each element of S\n*          must be positive.\n*\n*  B       (input/output) COMPLEX array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS righthand side matrix B.\n*          On exit, if EQUED = \'N\', B is not modified; if EQUED = \'Y\',\n*          B is overwritten by diag(S) * B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (output) COMPLEX array, dimension (LDX,NRHS)\n*          If INFO = 0 or INFO = N+1, the N-by-NRHS solution matrix X to\n*          the original system of equations.  Note that if EQUED = \'Y\',\n*          A and B are modified on exit, and the solution to the\n*          equilibrated system is inv(diag(S))*X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  RCOND   (output) REAL\n*          The estimate of the reciprocal condition number of the matrix\n*          A after equilibration (if done).  If RCOND is less than the\n*          machine precision (in particular, if RCOND = 0), the matrix\n*          is singular to working precision.  This condition is\n*          indicated by a return code of INFO > 0.\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX array, dimension (2*N)\n*\n*  RWORK   (workspace) REAL array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, and i is\n*                <= N:  the leading minor of order i of A is\n*                       not positive definite, so the factorization\n*                       could not be completed, and the solution has not\n*                       been computed. RCOND = 0 is returned.\n*                = N+1: U is nonsingular, but RCOND is less than machine\n*                       precision, meaning that the matrix is singular\n*                       to working precision.  Nevertheless, the\n*                       solution and error bounds are computed because\n*                       there are a number of situations where the\n*                       computed solution can be more accurate than the\n*                       value of RCOND would suggest.\n*\n'),(60,'zposvx_60.txt','      SUBROUTINE ZPOSVX( FACT, UPLO, N, NRHS, A, LDA, AF, LDAF, EQUED,\n     $                   S, B, LDB, X, LDX, RCOND, FERR, BERR, WORK,\n     $                   RWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          EQUED, FACT, UPLO\n      INTEGER            INFO, LDA, LDAF, LDB, LDX, N, NRHS\n      DOUBLE PRECISION   RCOND\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   BERR( * ), FERR( * ), RWORK( * ), S( * )\n      COMPLEX*16         A( LDA, * ), AF( LDAF, * ), B( LDB, * ),\n     $                   WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZPOSVX uses the Cholesky factorization A = U**H*U or A = L*L**H to\n*  compute the solution to a complex system of linear equations\n*     A * X = B,\n*  where A is an N-by-N Hermitian positive definite matrix and X and B\n*  are N-by-NRHS matrices.\n*\n*  Error bounds on the solution and a condition estimate are also\n*  provided.\n*\n*  Description\n*  ===========\n*\n*  The following steps are performed:\n*\n*  1. If FACT = \'E\', real scaling factors are computed to equilibrate\n*     the system:\n*        diag(S) * A * diag(S) * inv(diag(S)) * X = diag(S) * B\n*     Whether or not the system will be equilibrated depends on the\n*     scaling of the matrix A, but if equilibration is used, A is\n*     overwritten by diag(S)*A*diag(S) and B by diag(S)*B.\n*\n*  2. If FACT = \'N\' or \'E\', the Cholesky decomposition is used to\n*     factor the matrix A (after equilibration if FACT = \'E\') as\n*        A = U**H* U,  if UPLO = \'U\', or\n*        A = L * L**H,  if UPLO = \'L\',\n*     where U is an upper triangular matrix and L is a lower triangular\n*     matrix.\n*\n*  3. If the leading i-by-i principal minor is not positive definite,\n*     then the routine returns with INFO = i. Otherwise, the factored\n*     form of A is used to estimate the condition number of the matrix\n*     A.  If the reciprocal of the condition number is less than machine\n*     precision, INFO = N+1 is returned as a warning, but the routine\n*     still goes on to solve for X and compute error bounds as\n*     described below.\n*\n*  4. The system of equations is solved for X using the factored form\n*     of A.\n*\n*  5. Iterative refinement is applied to improve the computed solution\n*     matrix and calculate error bounds and backward error estimates\n*     for it.\n*\n*  6. If equilibration was used, the matrix X is premultiplied by\n*     diag(S) so that it solves the original system before\n*     equilibration.\n*\n*  Arguments\n*  =========\n*\n*  FACT    (input) CHARACTER*1\n*          Specifies whether or not the factored form of the matrix A is\n*          supplied on entry, and if not, whether the matrix A should be\n*          equilibrated before it is factored.\n*          = \'F\':  On entry, AF contains the factored form of A.\n*                  If EQUED = \'Y\', the matrix A has been equilibrated\n*                  with scaling factors given by S.  A and AF will not\n*                  be modified.\n*          = \'N\':  The matrix A will be copied to AF and factored.\n*          = \'E\':  The matrix A will be equilibrated if necessary, then\n*                  copied to AF and factored.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  A       (input/output) COMPLEX*16 array, dimension (LDA,N)\n*          On entry, the Hermitian matrix A, except if FACT = \'F\' and\n*          EQUED = \'Y\', then A must contain the equilibrated matrix\n*          diag(S)*A*diag(S).  If UPLO = \'U\', the leading\n*          N-by-N upper triangular part of A contains the upper\n*          triangular part of the matrix A, and the strictly lower\n*          triangular part of A is not referenced.  If UPLO = \'L\', the\n*          leading N-by-N lower triangular part of A contains the lower\n*          triangular part of the matrix A, and the strictly upper\n*          triangular part of A is not referenced.  A is not modified if\n*          FACT = \'F\' or \'N\', or if FACT = \'E\' and EQUED = \'N\' on exit.\n*\n*          On exit, if FACT = \'E\' and EQUED = \'Y\', A is overwritten by\n*          diag(S)*A*diag(S).\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  AF      (input or output) COMPLEX*16 array, dimension (LDAF,N)\n*          If FACT = \'F\', then AF is an input argument and on entry\n*          contains the triangular factor U or L from the Cholesky\n*          factorization A = U**H *U or A = L*L**H, in the same storage\n*          format as A.  If EQUED .ne. \'N\', then AF is the factored form\n*          of the equilibrated matrix diag(S)*A*diag(S).\n*\n*          If FACT = \'N\', then AF is an output argument and on exit\n*          returns the triangular factor U or L from the Cholesky\n*          factorization A = U**H *U or A = L*L**H of the original\n*          matrix A.\n*\n*          If FACT = \'E\', then AF is an output argument and on exit\n*          returns the triangular factor U or L from the Cholesky\n*          factorization A = U**H *U or A = L*L**H of the equilibrated\n*          matrix A (see the description of A for the form of the\n*          equilibrated matrix).\n*\n*  LDAF    (input) INTEGER\n*          The leading dimension of the array AF.  LDAF >= max(1,N).\n*\n*  EQUED   (input or output) CHARACTER*1\n*          Specifies the form of equilibration that was done.\n*          = \'N\':  No equilibration (always true if FACT = \'N\').\n*          = \'Y\':  Equilibration was done, i.e., A has been replaced by\n*                  diag(S) * A * diag(S).\n*          EQUED is an input argument if FACT = \'F\'; otherwise, it is an\n*          output argument.\n*\n*  S       (input or output) DOUBLE PRECISION array, dimension (N)\n*          The scale factors for A; not accessed if EQUED = \'N\'.  S is\n*          an input argument if FACT = \'F\'; otherwise, S is an output\n*          argument.  If FACT = \'F\' and EQUED = \'Y\', each element of S\n*          must be positive.\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS righthand side matrix B.\n*          On exit, if EQUED = \'N\', B is not modified; if EQUED = \'Y\',\n*          B is overwritten by diag(S) * B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (output) COMPLEX*16 array, dimension (LDX,NRHS)\n*          If INFO = 0 or INFO = N+1, the N-by-NRHS solution matrix X to\n*          the original system of equations.  Note that if EQUED = \'Y\',\n*          A and B are modified on exit, and the solution to the\n*          equilibrated system is inv(diag(S))*X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The estimate of the reciprocal condition number of the matrix\n*          A after equilibration (if done).  If RCOND is less than the\n*          machine precision (in particular, if RCOND = 0), the matrix\n*          is singular to working precision.  This condition is\n*          indicated by a return code of INFO > 0.\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, and i is\n*                <= N:  the leading minor of order i of A is\n*                       not positive definite, so the factorization\n*                       could not be completed, and the solution has not\n*                       been computed. RCOND = 0 is returned.\n*                = N+1: U is nonsingular, but RCOND is less than machine\n*                       precision, meaning that the matrix is singular\n*                       to working precision.  Nevertheless, the\n*                       solution and error bounds are computed because\n*                       there are a number of situations where the\n*                       computed solution can be more accurate than the\n*                       value of RCOND would suggest.\n*\n'),(61,'spbsvx_61.txt','      SUBROUTINE SPBSVX( FACT, UPLO, N, KD, NRHS, AB, LDAB, AFB, LDAFB,\n     $                   EQUED, S, B, LDB, X, LDX, RCOND, FERR, BERR,\n     $                   WORK, IWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          EQUED, FACT, UPLO\n      INTEGER            INFO, KD, LDAB, LDAFB, LDB, LDX, N, NRHS\n      REAL               RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      REAL               AB( LDAB, * ), AFB( LDAFB, * ), B( LDB, * ),\n     $                   BERR( * ), FERR( * ), S( * ), WORK( * ),\n     $                   X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SPBSVX uses the Cholesky factorization A = U**T*U or A = L*L**T to\n*  compute the solution to a real system of linear equations\n*     A * X = B,\n*  where A is an N-by-N symmetric positive definite band matrix and X\n*  and B are N-by-NRHS matrices.\n*\n*  Error bounds on the solution and a condition estimate are also\n*  provided.\n*\n*  Description\n*  ===========\n*\n*  The following steps are performed:\n*\n*  1. If FACT = \'E\', real scaling factors are computed to equilibrate\n*     the system:\n*        diag(S) * A * diag(S) * inv(diag(S)) * X = diag(S) * B\n*     Whether or not the system will be equilibrated depends on the\n*     scaling of the matrix A, but if equilibration is used, A is\n*     overwritten by diag(S)*A*diag(S) and B by diag(S)*B.\n*\n*  2. If FACT = \'N\' or \'E\', the Cholesky decomposition is used to\n*     factor the matrix A (after equilibration if FACT = \'E\') as\n*        A = U**T * U,  if UPLO = \'U\', or\n*        A = L * L**T,  if UPLO = \'L\',\n*     where U is an upper triangular band matrix, and L is a lower\n*     triangular band matrix.\n*\n*  3. If the leading i-by-i principal minor is not positive definite,\n*     then the routine returns with INFO = i. Otherwise, the factored\n*     form of A is used to estimate the condition number of the matrix\n*     A.  If the reciprocal of the condition number is less than machine\n*     precision, INFO = N+1 is returned as a warning, but the routine\n*     still goes on to solve for X and compute error bounds as\n*     described below.\n*\n*  4. The system of equations is solved for X using the factored form\n*     of A.\n*\n*  5. Iterative refinement is applied to improve the computed solution\n*     matrix and calculate error bounds and backward error estimates\n*     for it.\n*\n*  6. If equilibration was used, the matrix X is premultiplied by\n*     diag(S) so that it solves the original system before\n*     equilibration.\n*\n*  Arguments\n*  =========\n*\n*  FACT    (input) CHARACTER*1\n*          Specifies whether or not the factored form of the matrix A is\n*          supplied on entry, and if not, whether the matrix A should be\n*          equilibrated before it is factored.\n*          = \'F\':  On entry, AFB contains the factored form of A.\n*                  If EQUED = \'Y\', the matrix A has been equilibrated\n*                  with scaling factors given by S.  AB and AFB will not\n*                  be modified.\n*          = \'N\':  The matrix A will be copied to AFB and factored.\n*          = \'E\':  The matrix A will be equilibrated if necessary, then\n*                  copied to AFB and factored.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KD >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right-hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AB      (input/output) REAL array, dimension (LDAB,N)\n*          On entry, the upper or lower triangle of the symmetric band\n*          matrix A, stored in the first KD+1 rows of the array, except\n*          if FACT = \'F\' and EQUED = \'Y\', then A must contain the\n*          equilibrated matrix diag(S)*A*diag(S).  The j-th column of A\n*          is stored in the j-th column of the array AB as follows:\n*          if UPLO = \'U\', AB(KD+1+i-j,j) = A(i,j) for max(1,j-KD)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(N,j+KD).\n*          See below for further details.\n*\n*          On exit, if FACT = \'E\' and EQUED = \'Y\', A is overwritten by\n*          diag(S)*A*diag(S).\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array A.  LDAB >= KD+1.\n*\n*  AFB     (input or output) REAL array, dimension (LDAFB,N)\n*          If FACT = \'F\', then AFB is an input argument and on entry\n*          contains the triangular factor U or L from the Cholesky\n*          factorization A = U**T*U or A = L*L**T of the band matrix\n*          A, in the same storage format as A (see AB).  If EQUED = \'Y\',\n*          then AFB is the factored form of the equilibrated matrix A.\n*\n*          If FACT = \'N\', then AFB is an output argument and on exit\n*          returns the triangular factor U or L from the Cholesky\n*          factorization A = U**T*U or A = L*L**T.\n*\n*          If FACT = \'E\', then AFB is an output argument and on exit\n*          returns the triangular factor U or L from the Cholesky\n*          factorization A = U**T*U or A = L*L**T of the equilibrated\n*          matrix A (see the description of A for the form of the\n*          equilibrated matrix).\n*\n*  LDAFB   (input) INTEGER\n*          The leading dimension of the array AFB.  LDAFB >= KD+1.\n*\n*  EQUED   (input or output) CHARACTER*1\n*          Specifies the form of equilibration that was done.\n*          = \'N\':  No equilibration (always true if FACT = \'N\').\n*          = \'Y\':  Equilibration was done, i.e., A has been replaced by\n*                  diag(S) * A * diag(S).\n*          EQUED is an input argument if FACT = \'F\'; otherwise, it is an\n*          output argument.\n*\n*  S       (input or output) REAL array, dimension (N)\n*          The scale factors for A; not accessed if EQUED = \'N\'.  S is\n*          an input argument if FACT = \'F\'; otherwise, S is an output\n*          argument.  If FACT = \'F\' and EQUED = \'Y\', each element of S\n*          must be positive.\n*\n*  B       (input/output) REAL array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if EQUED = \'N\', B is not modified; if EQUED = \'Y\',\n*          B is overwritten by diag(S) * B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (output) REAL array, dimension (LDX,NRHS)\n*          If INFO = 0 or INFO = N+1, the N-by-NRHS solution matrix X to\n*          the original system of equations.  Note that if EQUED = \'Y\',\n*          A and B are modified on exit, and the solution to the\n*          equilibrated system is inv(diag(S))*X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  RCOND   (output) REAL\n*          The estimate of the reciprocal condition number of the matrix\n*          A after equilibration (if done).  If RCOND is less than the\n*          machine precision (in particular, if RCOND = 0), the matrix\n*          is singular to working precision.  This condition is\n*          indicated by a return code of INFO > 0.\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) REAL array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is\n*                <= N:  the leading minor of order i of A is\n*                       not positive definite, so the factorization\n*                       could not be completed, and the solution has not\n*                       been computed. RCOND = 0 is returned.\n*                = N+1: U is nonsingular, but RCOND is less than machine\n*                       precision, meaning that the matrix is singular\n*                       to working precision.  Nevertheless, the\n*                       solution and error bounds are computed because\n*                       there are a number of situations where the\n*                       computed solution can be more accurate than the\n*                       value of RCOND would suggest.\n*\n'),(62,'dpbsvx_62.txt','      SUBROUTINE DPBSVX( FACT, UPLO, N, KD, NRHS, AB, LDAB, AFB, LDAFB,\n     $                   EQUED, S, B, LDB, X, LDX, RCOND, FERR, BERR,\n     $                   WORK, IWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          EQUED, FACT, UPLO\n      INTEGER            INFO, KD, LDAB, LDAFB, LDB, LDX, N, NRHS\n      DOUBLE PRECISION   RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      DOUBLE PRECISION   AB( LDAB, * ), AFB( LDAFB, * ), B( LDB, * ),\n     $                   BERR( * ), FERR( * ), S( * ), WORK( * ),\n     $                   X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DPBSVX uses the Cholesky factorization A = U**T*U or A = L*L**T to\n*  compute the solution to a real system of linear equations\n*     A * X = B,\n*  where A is an N-by-N symmetric positive definite band matrix and X\n*  and B are N-by-NRHS matrices.\n*\n*  Error bounds on the solution and a condition estimate are also\n*  provided.\n*\n*  Description\n*  ===========\n*\n*  The following steps are performed:\n*\n*  1. If FACT = \'E\', real scaling factors are computed to equilibrate\n*     the system:\n*        diag(S) * A * diag(S) * inv(diag(S)) * X = diag(S) * B\n*     Whether or not the system will be equilibrated depends on the\n*     scaling of the matrix A, but if equilibration is used, A is\n*     overwritten by diag(S)*A*diag(S) and B by diag(S)*B.\n*\n*  2. If FACT = \'N\' or \'E\', the Cholesky decomposition is used to\n*     factor the matrix A (after equilibration if FACT = \'E\') as\n*        A = U**T * U,  if UPLO = \'U\', or\n*        A = L * L**T,  if UPLO = \'L\',\n*     where U is an upper triangular band matrix, and L is a lower\n*     triangular band matrix.\n*\n*  3. If the leading i-by-i principal minor is not positive definite,\n*     then the routine returns with INFO = i. Otherwise, the factored\n*     form of A is used to estimate the condition number of the matrix\n*     A.  If the reciprocal of the condition number is less than machine\n*     precision, INFO = N+1 is returned as a warning, but the routine\n*     still goes on to solve for X and compute error bounds as\n*     described below.\n*\n*  4. The system of equations is solved for X using the factored form\n*     of A.\n*\n*  5. Iterative refinement is applied to improve the computed solution\n*     matrix and calculate error bounds and backward error estimates\n*     for it.\n*\n*  6. If equilibration was used, the matrix X is premultiplied by\n*     diag(S) so that it solves the original system before\n*     equilibration.\n*\n*  Arguments\n*  =========\n*\n*  FACT    (input) CHARACTER*1\n*          Specifies whether or not the factored form of the matrix A is\n*          supplied on entry, and if not, whether the matrix A should be\n*          equilibrated before it is factored.\n*          = \'F\':  On entry, AFB contains the factored form of A.\n*                  If EQUED = \'Y\', the matrix A has been equilibrated\n*                  with scaling factors given by S.  AB and AFB will not\n*                  be modified.\n*          = \'N\':  The matrix A will be copied to AFB and factored.\n*          = \'E\':  The matrix A will be equilibrated if necessary, then\n*                  copied to AFB and factored.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KD >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right-hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AB      (input/output) DOUBLE PRECISION array, dimension (LDAB,N)\n*          On entry, the upper or lower triangle of the symmetric band\n*          matrix A, stored in the first KD+1 rows of the array, except\n*          if FACT = \'F\' and EQUED = \'Y\', then A must contain the\n*          equilibrated matrix diag(S)*A*diag(S).  The j-th column of A\n*          is stored in the j-th column of the array AB as follows:\n*          if UPLO = \'U\', AB(KD+1+i-j,j) = A(i,j) for max(1,j-KD)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(N,j+KD).\n*          See below for further details.\n*\n*          On exit, if FACT = \'E\' and EQUED = \'Y\', A is overwritten by\n*          diag(S)*A*diag(S).\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array A.  LDAB >= KD+1.\n*\n*  AFB     (input or output) DOUBLE PRECISION array, dimension (LDAFB,N)\n*          If FACT = \'F\', then AFB is an input argument and on entry\n*          contains the triangular factor U or L from the Cholesky\n*          factorization A = U**T*U or A = L*L**T of the band matrix\n*          A, in the same storage format as A (see AB).  If EQUED = \'Y\',\n*          then AFB is the factored form of the equilibrated matrix A.\n*\n*          If FACT = \'N\', then AFB is an output argument and on exit\n*          returns the triangular factor U or L from the Cholesky\n*          factorization A = U**T*U or A = L*L**T.\n*\n*          If FACT = \'E\', then AFB is an output argument and on exit\n*          returns the triangular factor U or L from the Cholesky\n*          factorization A = U**T*U or A = L*L**T of the equilibrated\n*          matrix A (see the description of A for the form of the\n*          equilibrated matrix).\n*\n*  LDAFB   (input) INTEGER\n*          The leading dimension of the array AFB.  LDAFB >= KD+1.\n*\n*  EQUED   (input or output) CHARACTER*1\n*          Specifies the form of equilibration that was done.\n*          = \'N\':  No equilibration (always true if FACT = \'N\').\n*          = \'Y\':  Equilibration was done, i.e., A has been replaced by\n*                  diag(S) * A * diag(S).\n*          EQUED is an input argument if FACT = \'F\'; otherwise, it is an\n*          output argument.\n*\n*  S       (input or output) DOUBLE PRECISION array, dimension (N)\n*          The scale factors for A; not accessed if EQUED = \'N\'.  S is\n*          an input argument if FACT = \'F\'; otherwise, S is an output\n*          argument.  If FACT = \'F\' and EQUED = \'Y\', each element of S\n*          must be positive.\n*\n*  B       (input/output) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if EQUED = \'N\', B is not modified; if EQUED = \'Y\',\n*          B is overwritten by diag(S) * B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (output) DOUBLE PRECISION array, dimension (LDX,NRHS)\n*          If INFO = 0 or INFO = N+1, the N-by-NRHS solution matrix X to\n*          the original system of equations.  Note that if EQUED = \'Y\',\n*          A and B are modified on exit, and the solution to the\n*          equilibrated system is inv(diag(S))*X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The estimate of the reciprocal condition number of the matrix\n*          A after equilibration (if done).  If RCOND is less than the\n*          machine precision (in particular, if RCOND = 0), the matrix\n*          is singular to working precision.  This condition is\n*          indicated by a return code of INFO > 0.\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) DOUBLE PRECISION array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is\n*                <= N:  the leading minor of order i of A is\n*                       not positive definite, so the factorization\n*                       could not be completed, and the solution has not\n*                       been computed. RCOND = 0 is returned.\n*                = N+1: U is nonsingular, but RCOND is less than machine\n*                       precision, meaning that the matrix is singular\n*                       to working precision.  Nevertheless, the\n*                       solution and error bounds are computed because\n*                       there are a number of situations where the\n*                       computed solution can be more accurate than the\n*                       value of RCOND would suggest.\n*\n'),(63,'cpbsvx_63.txt','      SUBROUTINE CPBSVX( FACT, UPLO, N, KD, NRHS, AB, LDAB, AFB, LDAFB,\n     $                   EQUED, S, B, LDB, X, LDX, RCOND, FERR, BERR,\n     $                   WORK, RWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          EQUED, FACT, UPLO\n      INTEGER            INFO, KD, LDAB, LDAFB, LDB, LDX, N, NRHS\n      REAL               RCOND\n*     ..\n*     .. Array Arguments ..\n      REAL               BERR( * ), FERR( * ), RWORK( * ), S( * )\n      COMPLEX            AB( LDAB, * ), AFB( LDAFB, * ), B( LDB, * ),\n     $                   WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CPBSVX uses the Cholesky factorization A = U**H*U or A = L*L**H to\n*  compute the solution to a complex system of linear equations\n*     A * X = B,\n*  where A is an N-by-N Hermitian positive definite band matrix and X\n*  and B are N-by-NRHS matrices.\n*\n*  Error bounds on the solution and a condition estimate are also\n*  provided.\n*\n*  Description\n*  ===========\n*\n*  The following steps are performed:\n*\n*  1. If FACT = \'E\', real scaling factors are computed to equilibrate\n*     the system:\n*        diag(S) * A * diag(S) * inv(diag(S)) * X = diag(S) * B\n*     Whether or not the system will be equilibrated depends on the\n*     scaling of the matrix A, but if equilibration is used, A is\n*     overwritten by diag(S)*A*diag(S) and B by diag(S)*B.\n*\n*  2. If FACT = \'N\' or \'E\', the Cholesky decomposition is used to\n*     factor the matrix A (after equilibration if FACT = \'E\') as\n*        A = U**H * U,  if UPLO = \'U\', or\n*        A = L * L**H,  if UPLO = \'L\',\n*     where U is an upper triangular band matrix, and L is a lower\n*     triangular band matrix.\n*\n*  3. If the leading i-by-i principal minor is not positive definite,\n*     then the routine returns with INFO = i. Otherwise, the factored\n*     form of A is used to estimate the condition number of the matrix\n*     A.  If the reciprocal of the condition number is less than machine\n*     precision, INFO = N+1 is returned as a warning, but the routine\n*     still goes on to solve for X and compute error bounds as\n*     described below.\n*\n*  4. The system of equations is solved for X using the factored form\n*     of A.\n*\n*  5. Iterative refinement is applied to improve the computed solution\n*     matrix and calculate error bounds and backward error estimates\n*     for it.\n*\n*  6. If equilibration was used, the matrix X is premultiplied by\n*     diag(S) so that it solves the original system before\n*     equilibration.\n*\n*  Arguments\n*  =========\n*\n*  FACT    (input) CHARACTER*1\n*          Specifies whether or not the factored form of the matrix A is\n*          supplied on entry, and if not, whether the matrix A should be\n*          equilibrated before it is factored.\n*          = \'F\':  On entry, AFB contains the factored form of A.\n*                  If EQUED = \'Y\', the matrix A has been equilibrated\n*                  with scaling factors given by S.  AB and AFB will not\n*                  be modified.\n*          = \'N\':  The matrix A will be copied to AFB and factored.\n*          = \'E\':  The matrix A will be equilibrated if necessary, then\n*                  copied to AFB and factored.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KD >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right-hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AB      (input/output) COMPLEX array, dimension (LDAB,N)\n*          On entry, the upper or lower triangle of the Hermitian band\n*          matrix A, stored in the first KD+1 rows of the array, except\n*          if FACT = \'F\' and EQUED = \'Y\', then A must contain the\n*          equilibrated matrix diag(S)*A*diag(S).  The j-th column of A\n*          is stored in the j-th column of the array AB as follows:\n*          if UPLO = \'U\', AB(KD+1+i-j,j) = A(i,j) for max(1,j-KD)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(N,j+KD).\n*          See below for further details.\n*\n*          On exit, if FACT = \'E\' and EQUED = \'Y\', A is overwritten by\n*          diag(S)*A*diag(S).\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array A.  LDAB >= KD+1.\n*\n*  AFB     (input or output) COMPLEX array, dimension (LDAFB,N)\n*          If FACT = \'F\', then AFB is an input argument and on entry\n*          contains the triangular factor U or L from the Cholesky\n*          factorization A = U**H*U or A = L*L**H of the band matrix\n*          A, in the same storage format as A (see AB).  If EQUED = \'Y\',\n*          then AFB is the factored form of the equilibrated matrix A.\n*\n*          If FACT = \'N\', then AFB is an output argument and on exit\n*          returns the triangular factor U or L from the Cholesky\n*          factorization A = U**H*U or A = L*L**H.\n*\n*          If FACT = \'E\', then AFB is an output argument and on exit\n*          returns the triangular factor U or L from the Cholesky\n*          factorization A = U**H*U or A = L*L**H of the equilibrated\n*          matrix A (see the description of A for the form of the\n*          equilibrated matrix).\n*\n*  LDAFB   (input) INTEGER\n*          The leading dimension of the array AFB.  LDAFB >= KD+1.\n*\n*  EQUED   (input or output) CHARACTER*1\n*          Specifies the form of equilibration that was done.\n*          = \'N\':  No equilibration (always true if FACT = \'N\').\n*          = \'Y\':  Equilibration was done, i.e., A has been replaced by\n*                  diag(S) * A * diag(S).\n*          EQUED is an input argument if FACT = \'F\'; otherwise, it is an\n*          output argument.\n*\n*  S       (input or output) REAL array, dimension (N)\n*          The scale factors for A; not accessed if EQUED = \'N\'.  S is\n*          an input argument if FACT = \'F\'; otherwise, S is an output\n*          argument.  If FACT = \'F\' and EQUED = \'Y\', each element of S\n*          must be positive.\n*\n*  B       (input/output) COMPLEX array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if EQUED = \'N\', B is not modified; if EQUED = \'Y\',\n*          B is overwritten by diag(S) * B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (output) COMPLEX array, dimension (LDX,NRHS)\n*          If INFO = 0 or INFO = N+1, the N-by-NRHS solution matrix X to\n*          the original system of equations.  Note that if EQUED = \'Y\',\n*          A and B are modified on exit, and the solution to the\n*          equilibrated system is inv(diag(S))*X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  RCOND   (output) REAL\n*          The estimate of the reciprocal condition number of the matrix\n*          A after equilibration (if done).  If RCOND is less than the\n*          machine precision (in particular, if RCOND = 0), the matrix\n*          is singular to working precision.  This condition is\n*          indicated by a return code of INFO > 0.\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX array, dimension (2*N)\n*\n*  RWORK   (workspace) REAL array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, and i is\n*                <= N:  the leading minor of order i of A is\n*                       not positive definite, so the factorization\n*                       could not be completed, and the solution has not\n*                       been computed. RCOND = 0 is returned.\n*                = N+1: U is nonsingular, but RCOND is less than machine\n*                       precision, meaning that the matrix is singular\n*                       to working precision.  Nevertheless, the\n*                       solution and error bounds are computed because\n*                       there are a number of situations where the\n*                       computed solution can be more accurate than the\n*                       value of RCOND would suggest.\n*\n'),(64,'zpbsvx_64.txt','      SUBROUTINE ZPBSVX( FACT, UPLO, N, KD, NRHS, AB, LDAB, AFB, LDAFB,\n     $                   EQUED, S, B, LDB, X, LDX, RCOND, FERR, BERR,\n     $                   WORK, RWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          EQUED, FACT, UPLO\n      INTEGER            INFO, KD, LDAB, LDAFB, LDB, LDX, N, NRHS\n      DOUBLE PRECISION   RCOND\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   BERR( * ), FERR( * ), RWORK( * ), S( * )\n      COMPLEX*16         AB( LDAB, * ), AFB( LDAFB, * ), B( LDB, * ),\n     $                   WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZPBSVX uses the Cholesky factorization A = U**H*U or A = L*L**H to\n*  compute the solution to a complex system of linear equations\n*     A * X = B,\n*  where A is an N-by-N Hermitian positive definite band matrix and X\n*  and B are N-by-NRHS matrices.\n*\n*  Error bounds on the solution and a condition estimate are also\n*  provided.\n*\n*  Description\n*  ===========\n*\n*  The following steps are performed:\n*\n*  1. If FACT = \'E\', real scaling factors are computed to equilibrate\n*     the system:\n*        diag(S) * A * diag(S) * inv(diag(S)) * X = diag(S) * B\n*     Whether or not the system will be equilibrated depends on the\n*     scaling of the matrix A, but if equilibration is used, A is\n*     overwritten by diag(S)*A*diag(S) and B by diag(S)*B.\n*\n*  2. If FACT = \'N\' or \'E\', the Cholesky decomposition is used to\n*     factor the matrix A (after equilibration if FACT = \'E\') as\n*        A = U**H * U,  if UPLO = \'U\', or\n*        A = L * L**H,  if UPLO = \'L\',\n*     where U is an upper triangular band matrix, and L is a lower\n*     triangular band matrix.\n*\n*  3. If the leading i-by-i principal minor is not positive definite,\n*     then the routine returns with INFO = i. Otherwise, the factored\n*     form of A is used to estimate the condition number of the matrix\n*     A.  If the reciprocal of the condition number is less than machine\n*     precision, INFO = N+1 is returned as a warning, but the routine\n*     still goes on to solve for X and compute error bounds as\n*     described below.\n*\n*  4. The system of equations is solved for X using the factored form\n*     of A.\n*\n*  5. Iterative refinement is applied to improve the computed solution\n*     matrix and calculate error bounds and backward error estimates\n*     for it.\n*\n*  6. If equilibration was used, the matrix X is premultiplied by\n*     diag(S) so that it solves the original system before\n*     equilibration.\n*\n*  Arguments\n*  =========\n*\n*  FACT    (input) CHARACTER*1\n*          Specifies whether or not the factored form of the matrix A is\n*          supplied on entry, and if not, whether the matrix A should be\n*          equilibrated before it is factored.\n*          = \'F\':  On entry, AFB contains the factored form of A.\n*                  If EQUED = \'Y\', the matrix A has been equilibrated\n*                  with scaling factors given by S.  AB and AFB will not\n*                  be modified.\n*          = \'N\':  The matrix A will be copied to AFB and factored.\n*          = \'E\':  The matrix A will be equilibrated if necessary, then\n*                  copied to AFB and factored.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KD >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right-hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AB      (input/output) COMPLEX*16 array, dimension (LDAB,N)\n*          On entry, the upper or lower triangle of the Hermitian band\n*          matrix A, stored in the first KD+1 rows of the array, except\n*          if FACT = \'F\' and EQUED = \'Y\', then A must contain the\n*          equilibrated matrix diag(S)*A*diag(S).  The j-th column of A\n*          is stored in the j-th column of the array AB as follows:\n*          if UPLO = \'U\', AB(KD+1+i-j,j) = A(i,j) for max(1,j-KD)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(N,j+KD).\n*          See below for further details.\n*\n*          On exit, if FACT = \'E\' and EQUED = \'Y\', A is overwritten by\n*          diag(S)*A*diag(S).\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array A.  LDAB >= KD+1.\n*\n*  AFB     (input or output) COMPLEX*16 array, dimension (LDAFB,N)\n*          If FACT = \'F\', then AFB is an input argument and on entry\n*          contains the triangular factor U or L from the Cholesky\n*          factorization A = U**H *U or A = L*L**H of the band matrix\n*          A, in the same storage format as A (see AB).  If EQUED = \'Y\',\n*          then AFB is the factored form of the equilibrated matrix A.\n*\n*          If FACT = \'N\', then AFB is an output argument and on exit\n*          returns the triangular factor U or L from the Cholesky\n*          factorization A = U**H *U or A = L*L**H.\n*\n*          If FACT = \'E\', then AFB is an output argument and on exit\n*          returns the triangular factor U or L from the Cholesky\n*          factorization A = U**H *U or A = L*L**H of the equilibrated\n*          matrix A (see the description of A for the form of the\n*          equilibrated matrix).\n*\n*  LDAFB   (input) INTEGER\n*          The leading dimension of the array AFB.  LDAFB >= KD+1.\n*\n*  EQUED   (input or output) CHARACTER*1\n*          Specifies the form of equilibration that was done.\n*          = \'N\':  No equilibration (always true if FACT = \'N\').\n*          = \'Y\':  Equilibration was done, i.e., A has been replaced by\n*                  diag(S) * A * diag(S).\n*          EQUED is an input argument if FACT = \'F\'; otherwise, it is an\n*          output argument.\n*\n*  S       (input or output) DOUBLE PRECISION array, dimension (N)\n*          The scale factors for A; not accessed if EQUED = \'N\'.  S is\n*          an input argument if FACT = \'F\'; otherwise, S is an output\n*          argument.  If FACT = \'F\' and EQUED = \'Y\', each element of S\n*          must be positive.\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if EQUED = \'N\', B is not modified; if EQUED = \'Y\',\n*          B is overwritten by diag(S) * B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (output) COMPLEX*16 array, dimension (LDX,NRHS)\n*          If INFO = 0 or INFO = N+1, the N-by-NRHS solution matrix X to\n*          the original system of equations.  Note that if EQUED = \'Y\',\n*          A and B are modified on exit, and the solution to the\n*          equilibrated system is inv(diag(S))*X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The estimate of the reciprocal condition number of the matrix\n*          A after equilibration (if done).  If RCOND is less than the\n*          machine precision (in particular, if RCOND = 0), the matrix\n*          is singular to working precision.  This condition is\n*          indicated by a return code of INFO > 0.\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, and i is\n*                <= N:  the leading minor of order i of A is\n*                       not positive definite, so the factorization\n*                       could not be completed, and the solution has not\n*                       been computed. RCOND = 0 is returned.\n*                = N+1: U is nonsingular, but RCOND is less than machine\n*                       precision, meaning that the matrix is singular\n*                       to working precision.  Nevertheless, the\n*                       solution and error bounds are computed because\n*                       there are a number of situations where the\n*                       computed solution can be more accurate than the\n*                       value of RCOND would suggest.\n*\n'),(65,'sppsvx_65.txt','      SUBROUTINE SPPSVX( FACT, UPLO, N, NRHS, AP, AFP, EQUED, S, B, LDB,\n     $                   X, LDX, RCOND, FERR, BERR, WORK, IWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          EQUED, FACT, UPLO\n      INTEGER            INFO, LDB, LDX, N, NRHS\n      REAL               RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      REAL               AFP( * ), AP( * ), B( LDB, * ), BERR( * ),\n     $                   FERR( * ), S( * ), WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SPPSVX uses the Cholesky factorization A = U**T*U or A = L*L**T to\n*  compute the solution to a real system of linear equations\n*     A * X = B,\n*  where A is an N-by-N symmetric positive definite matrix stored in\n*  packed format and X and B are N-by-NRHS matrices.\n*\n*  Error bounds on the solution and a condition estimate are also\n*  provided.\n*\n*  Description\n*  ===========\n*\n*  The following steps are performed:\n*\n*  1. If FACT = \'E\', real scaling factors are computed to equilibrate\n*     the system:\n*        diag(S) * A * diag(S) * inv(diag(S)) * X = diag(S) * B\n*     Whether or not the system will be equilibrated depends on the\n*     scaling of the matrix A, but if equilibration is used, A is\n*     overwritten by diag(S)*A*diag(S) and B by diag(S)*B.\n*\n*  2. If FACT = \'N\' or \'E\', the Cholesky decomposition is used to\n*     factor the matrix A (after equilibration if FACT = \'E\') as\n*        A = U**T* U,  if UPLO = \'U\', or\n*        A = L * L**T,  if UPLO = \'L\',\n*     where U is an upper triangular matrix and L is a lower triangular\n*     matrix.\n*\n*  3. If the leading i-by-i principal minor is not positive definite,\n*     then the routine returns with INFO = i. Otherwise, the factored\n*     form of A is used to estimate the condition number of the matrix\n*     A.  If the reciprocal of the condition number is less than machine\n*     precision, INFO = N+1 is returned as a warning, but the routine\n*     still goes on to solve for X and compute error bounds as\n*     described below.\n*\n*  4. The system of equations is solved for X using the factored form\n*     of A.\n*\n*  5. Iterative refinement is applied to improve the computed solution\n*     matrix and calculate error bounds and backward error estimates\n*     for it.\n*\n*  6. If equilibration was used, the matrix X is premultiplied by\n*     diag(S) so that it solves the original system before\n*     equilibration.\n*\n*  Arguments\n*  =========\n*\n*  FACT    (input) CHARACTER*1\n*          Specifies whether or not the factored form of the matrix A is\n*          supplied on entry, and if not, whether the matrix A should be\n*          equilibrated before it is factored.\n*          = \'F\':  On entry, AFP contains the factored form of A.\n*                  If EQUED = \'Y\', the matrix A has been equilibrated\n*                  with scaling factors given by S.  AP and AFP will not\n*                  be modified.\n*          = \'N\':  The matrix A will be copied to AFP and factored.\n*          = \'E\':  The matrix A will be equilibrated if necessary, then\n*                  copied to AFP and factored.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AP      (input/output) REAL array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the symmetric matrix\n*          A, packed columnwise in a linear array, except if FACT = \'F\'\n*          and EQUED = \'Y\', then A must contain the equilibrated matrix\n*          diag(S)*A*diag(S).  The j-th column of A is stored in the\n*          array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = A(i,j) for j<=i<=n.\n*          See below for further details.  A is not modified if\n*          FACT = \'F\' or \'N\', or if FACT = \'E\' and EQUED = \'N\' on exit.\n*\n*          On exit, if FACT = \'E\' and EQUED = \'Y\', A is overwritten by\n*          diag(S)*A*diag(S).\n*\n*  AFP     (input or output) REAL array, dimension\n*                            (N*(N+1)/2)\n*          If FACT = \'F\', then AFP is an input argument and on entry\n*          contains the triangular factor U or L from the Cholesky\n*          factorization A = U**T*U or A = L*L**T, in the same storage\n*          format as A.  If EQUED .ne. \'N\', then AFP is the factored\n*          form of the equilibrated matrix A.\n*\n*          If FACT = \'N\', then AFP is an output argument and on exit\n*          returns the triangular factor U or L from the Cholesky\n*          factorization A = U**T * U or A = L * L**T of the original\n*          matrix A.\n*\n*          If FACT = \'E\', then AFP is an output argument and on exit\n*          returns the triangular factor U or L from the Cholesky\n*          factorization A = U**T * U or A = L * L**T of the equilibrated\n*          matrix A (see the description of AP for the form of the\n*          equilibrated matrix).\n*\n*  EQUED   (input or output) CHARACTER*1\n*          Specifies the form of equilibration that was done.\n*          = \'N\':  No equilibration (always true if FACT = \'N\').\n*          = \'Y\':  Equilibration was done, i.e., A has been replaced by\n*                  diag(S) * A * diag(S).\n*          EQUED is an input argument if FACT = \'F\'; otherwise, it is an\n*          output argument.\n*\n*  S       (input or output) REAL array, dimension (N)\n*          The scale factors for A; not accessed if EQUED = \'N\'.  S is\n*          an input argument if FACT = \'F\'; otherwise, S is an output\n*          argument.  If FACT = \'F\' and EQUED = \'Y\', each element of S\n*          must be positive.\n*\n*  B       (input/output) REAL array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if EQUED = \'N\', B is not modified; if EQUED = \'Y\',\n*          B is overwritten by diag(S) * B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (output) REAL array, dimension (LDX,NRHS)\n*          If INFO = 0 or INFO = N+1, the N-by-NRHS solution matrix X to\n*          the original system of equations.  Note that if EQUED = \'Y\',\n*          A and B are modified on exit, and the solution to the\n*          equilibrated system is inv(diag(S))*X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  RCOND   (output) REAL\n*          The estimate of the reciprocal condition number of the matrix\n*          A after equilibration (if done).  If RCOND is less than the\n*          machine precision (in particular, if RCOND = 0), the matrix\n*          is singular to working precision.  This condition is\n*          indicated by a return code of INFO > 0.\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) REAL array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is\n*                <= N:  the leading minor of order i of A is\n*                       not positive definite, so the factorization\n*                       could not be completed, and the solution has not\n*                       been computed. RCOND = 0 is returned.\n*                = N+1: U is nonsingular, but RCOND is less than machine\n*                       precision, meaning that the matrix is singular\n*                       to working precision.  Nevertheless, the\n*                       solution and error bounds are computed because\n*                       there are a number of situations where the\n*                       computed solution can be more accurate than the\n*                       value of RCOND would suggest.\n*\n'),(66,'dppsvx_66.txt','      SUBROUTINE DPPSVX( FACT, UPLO, N, NRHS, AP, AFP, EQUED, S, B, LDB,\n     $                   X, LDX, RCOND, FERR, BERR, WORK, IWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          EQUED, FACT, UPLO\n      INTEGER            INFO, LDB, LDX, N, NRHS\n      DOUBLE PRECISION   RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      DOUBLE PRECISION   AFP( * ), AP( * ), B( LDB, * ), BERR( * ),\n     $                   FERR( * ), S( * ), WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DPPSVX uses the Cholesky factorization A = U**T*U or A = L*L**T to\n*  compute the solution to a real system of linear equations\n*     A * X = B,\n*  where A is an N-by-N symmetric positive definite matrix stored in\n*  packed format and X and B are N-by-NRHS matrices.\n*\n*  Error bounds on the solution and a condition estimate are also\n*  provided.\n*\n*  Description\n*  ===========\n*\n*  The following steps are performed:\n*\n*  1. If FACT = \'E\', real scaling factors are computed to equilibrate\n*     the system:\n*        diag(S) * A * diag(S) * inv(diag(S)) * X = diag(S) * B\n*     Whether or not the system will be equilibrated depends on the\n*     scaling of the matrix A, but if equilibration is used, A is\n*     overwritten by diag(S)*A*diag(S) and B by diag(S)*B.\n*\n*  2. If FACT = \'N\' or \'E\', the Cholesky decomposition is used to\n*     factor the matrix A (after equilibration if FACT = \'E\') as\n*        A = U**T* U,  if UPLO = \'U\', or\n*        A = L * L**T,  if UPLO = \'L\',\n*     where U is an upper triangular matrix and L is a lower triangular\n*     matrix.\n*\n*  3. If the leading i-by-i principal minor is not positive definite,\n*     then the routine returns with INFO = i. Otherwise, the factored\n*     form of A is used to estimate the condition number of the matrix\n*     A.  If the reciprocal of the condition number is less than machine\n*     precision, INFO = N+1 is returned as a warning, but the routine\n*     still goes on to solve for X and compute error bounds as\n*     described below.\n*\n*  4. The system of equations is solved for X using the factored form\n*     of A.\n*\n*  5. Iterative refinement is applied to improve the computed solution\n*     matrix and calculate error bounds and backward error estimates\n*     for it.\n*\n*  6. If equilibration was used, the matrix X is premultiplied by\n*     diag(S) so that it solves the original system before\n*     equilibration.\n*\n*  Arguments\n*  =========\n*\n*  FACT    (input) CHARACTER*1\n*          Specifies whether or not the factored form of the matrix A is\n*          supplied on entry, and if not, whether the matrix A should be\n*          equilibrated before it is factored.\n*          = \'F\':  On entry, AFP contains the factored form of A.\n*                  If EQUED = \'Y\', the matrix A has been equilibrated\n*                  with scaling factors given by S.  AP and AFP will not\n*                  be modified.\n*          = \'N\':  The matrix A will be copied to AFP and factored.\n*          = \'E\':  The matrix A will be equilibrated if necessary, then\n*                  copied to AFP and factored.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AP      (input/output) DOUBLE PRECISION array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the symmetric matrix\n*          A, packed columnwise in a linear array, except if FACT = \'F\'\n*          and EQUED = \'Y\', then A must contain the equilibrated matrix\n*          diag(S)*A*diag(S).  The j-th column of A is stored in the\n*          array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = A(i,j) for j<=i<=n.\n*          See below for further details.  A is not modified if\n*          FACT = \'F\' or \'N\', or if FACT = \'E\' and EQUED = \'N\' on exit.\n*\n*          On exit, if FACT = \'E\' and EQUED = \'Y\', A is overwritten by\n*          diag(S)*A*diag(S).\n*\n*  AFP     (input or output) DOUBLE PRECISION array, dimension\n*                            (N*(N+1)/2)\n*          If FACT = \'F\', then AFP is an input argument and on entry\n*          contains the triangular factor U or L from the Cholesky\n*          factorization A = U**T*U or A = L*L**T, in the same storage\n*          format as A.  If EQUED .ne. \'N\', then AFP is the factored\n*          form of the equilibrated matrix A.\n*\n*          If FACT = \'N\', then AFP is an output argument and on exit\n*          returns the triangular factor U or L from the Cholesky\n*          factorization A = U**T * U or A = L * L**T of the original\n*          matrix A.\n*\n*          If FACT = \'E\', then AFP is an output argument and on exit\n*          returns the triangular factor U or L from the Cholesky\n*          factorization A = U**T * U or A = L * L**T of the equilibrated\n*          matrix A (see the description of AP for the form of the\n*          equilibrated matrix).\n*\n*  EQUED   (input or output) CHARACTER*1\n*          Specifies the form of equilibration that was done.\n*          = \'N\':  No equilibration (always true if FACT = \'N\').\n*          = \'Y\':  Equilibration was done, i.e., A has been replaced by\n*                  diag(S) * A * diag(S).\n*          EQUED is an input argument if FACT = \'F\'; otherwise, it is an\n*          output argument.\n*\n*  S       (input or output) DOUBLE PRECISION array, dimension (N)\n*          The scale factors for A; not accessed if EQUED = \'N\'.  S is\n*          an input argument if FACT = \'F\'; otherwise, S is an output\n*          argument.  If FACT = \'F\' and EQUED = \'Y\', each element of S\n*          must be positive.\n*\n*  B       (input/output) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if EQUED = \'N\', B is not modified; if EQUED = \'Y\',\n*          B is overwritten by diag(S) * B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (output) DOUBLE PRECISION array, dimension (LDX,NRHS)\n*          If INFO = 0 or INFO = N+1, the N-by-NRHS solution matrix X to\n*          the original system of equations.  Note that if EQUED = \'Y\',\n*          A and B are modified on exit, and the solution to the\n*          equilibrated system is inv(diag(S))*X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The estimate of the reciprocal condition number of the matrix\n*          A after equilibration (if done).  If RCOND is less than the\n*          machine precision (in particular, if RCOND = 0), the matrix\n*          is singular to working precision.  This condition is\n*          indicated by a return code of INFO > 0.\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) DOUBLE PRECISION array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is\n*                <= N:  the leading minor of order i of A is\n*                       not positive definite, so the factorization\n*                       could not be completed, and the solution has not\n*                       been computed. RCOND = 0 is returned.\n*                = N+1: U is nonsingular, but RCOND is less than machine\n*                       precision, meaning that the matrix is singular\n*                       to working precision.  Nevertheless, the\n*                       solution and error bounds are computed because\n*                       there are a number of situations where the\n*                       computed solution can be more accurate than the\n*                       value of RCOND would suggest.\n*\n'),(67,'cppsvx_67.txt','      SUBROUTINE CPPSVX( FACT, UPLO, N, NRHS, AP, AFP, EQUED, S, B, LDB,\n     $                   X, LDX, RCOND, FERR, BERR, WORK, RWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          EQUED, FACT, UPLO\n      INTEGER            INFO, LDB, LDX, N, NRHS\n      REAL               RCOND\n*     ..\n*     .. Array Arguments ..\n      REAL               BERR( * ), FERR( * ), RWORK( * ), S( * )\n      COMPLEX            AFP( * ), AP( * ), B( LDB, * ), WORK( * ),\n     $                   X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CPPSVX uses the Cholesky factorization A = U**H*U or A = L*L**H to\n*  compute the solution to a complex system of linear equations\n*     A * X = B,\n*  where A is an N-by-N Hermitian positive definite matrix stored in\n*  packed format and X and B are N-by-NRHS matrices.\n*\n*  Error bounds on the solution and a condition estimate are also\n*  provided.\n*\n*  Description\n*  ===========\n*\n*  The following steps are performed:\n*\n*  1. If FACT = \'E\', real scaling factors are computed to equilibrate\n*     the system:\n*        diag(S) * A * diag(S) * inv(diag(S)) * X = diag(S) * B\n*     Whether or not the system will be equilibrated depends on the\n*     scaling of the matrix A, but if equilibration is used, A is\n*     overwritten by diag(S)*A*diag(S) and B by diag(S)*B.\n*\n*  2. If FACT = \'N\' or \'E\', the Cholesky decomposition is used to\n*     factor the matrix A (after equilibration if FACT = \'E\') as\n*        A = U**H * U ,  if UPLO = \'U\', or\n*        A = L * L**H,  if UPLO = \'L\',\n*     where U is an upper triangular matrix, L is a lower triangular\n*     matrix, and **H indicates conjugate transpose.\n*\n*  3. If the leading i-by-i principal minor is not positive definite,\n*     then the routine returns with INFO = i. Otherwise, the factored\n*     form of A is used to estimate the condition number of the matrix\n*     A.  If the reciprocal of the condition number is less than machine\n*     precision, INFO = N+1 is returned as a warning, but the routine\n*     still goes on to solve for X and compute error bounds as\n*     described below.\n*\n*  4. The system of equations is solved for X using the factored form\n*     of A.\n*\n*  5. Iterative refinement is applied to improve the computed solution\n*     matrix and calculate error bounds and backward error estimates\n*     for it.\n*\n*  6. If equilibration was used, the matrix X is premultiplied by\n*     diag(S) so that it solves the original system before\n*     equilibration.\n*\n*  Arguments\n*  =========\n*\n*  FACT    (input) CHARACTER*1\n*          Specifies whether or not the factored form of the matrix A is\n*          supplied on entry, and if not, whether the matrix A should be\n*          equilibrated before it is factored.\n*          = \'F\':  On entry, AFP contains the factored form of A.\n*                  If EQUED = \'Y\', the matrix A has been equilibrated\n*                  with scaling factors given by S.  AP and AFP will not\n*                  be modified.\n*          = \'N\':  The matrix A will be copied to AFP and factored.\n*          = \'E\':  The matrix A will be equilibrated if necessary, then\n*                  copied to AFP and factored.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AP      (input/output) COMPLEX array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the Hermitian matrix\n*          A, packed columnwise in a linear array, except if FACT = \'F\'\n*          and EQUED = \'Y\', then A must contain the equilibrated matrix\n*          diag(S)*A*diag(S).  The j-th column of A is stored in the\n*          array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = A(i,j) for j<=i<=n.\n*          See below for further details.  A is not modified if\n*          FACT = \'F\' or \'N\', or if FACT = \'E\' and EQUED = \'N\' on exit.\n*\n*          On exit, if FACT = \'E\' and EQUED = \'Y\', A is overwritten by\n*          diag(S)*A*diag(S).\n*\n*  AFP     (input or output) COMPLEX array, dimension (N*(N+1)/2)\n*          If FACT = \'F\', then AFP is an input argument and on entry\n*          contains the triangular factor U or L from the Cholesky\n*          factorization A = U**H*U or A = L*L**H, in the same storage\n*          format as A.  If EQUED .ne. \'N\', then AFP is the factored\n*          form of the equilibrated matrix A.\n*\n*          If FACT = \'N\', then AFP is an output argument and on exit\n*          returns the triangular factor U or L from the Cholesky\n*          factorization A = U**H * U or A = L * L**H of the original\n*          matrix A.\n*\n*          If FACT = \'E\', then AFP is an output argument and on exit\n*          returns the triangular factor U or L from the Cholesky\n*          factorization A = U**H*U or A = L*L**H of the equilibrated\n*          matrix A (see the description of AP for the form of the\n*          equilibrated matrix).\n*\n*  EQUED   (input or output) CHARACTER*1\n*          Specifies the form of equilibration that was done.\n*          = \'N\':  No equilibration (always true if FACT = \'N\').\n*          = \'Y\':  Equilibration was done, i.e., A has been replaced by\n*                  diag(S) * A * diag(S).\n*          EQUED is an input argument if FACT = \'F\'; otherwise, it is an\n*          output argument.\n*\n*  S       (input or output) REAL array, dimension (N)\n*          The scale factors for A; not accessed if EQUED = \'N\'.  S is\n*          an input argument if FACT = \'F\'; otherwise, S is an output\n*          argument.  If FACT = \'F\' and EQUED = \'Y\', each element of S\n*          must be positive.\n*\n*  B       (input/output) COMPLEX array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if EQUED = \'N\', B is not modified; if EQUED = \'Y\',\n*          B is overwritten by diag(S) * B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (output) COMPLEX array, dimension (LDX,NRHS)\n*          If INFO = 0 or INFO = N+1, the N-by-NRHS solution matrix X to\n*          the original system of equations.  Note that if EQUED = \'Y\',\n*          A and B are modified on exit, and the solution to the\n*          equilibrated system is inv(diag(S))*X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  RCOND   (output) REAL\n*          The estimate of the reciprocal condition number of the matrix\n*          A after equilibration (if done).  If RCOND is less than the\n*          machine precision (in particular, if RCOND = 0), the matrix\n*          is singular to working precision.  This condition is\n*          indicated by a return code of INFO > 0.\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX array, dimension (2*N)\n*\n*  RWORK   (workspace) REAL array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is\n*                <= N:  the leading minor of order i of A is\n*                       not positive definite, so the factorization\n*                       could not be completed, and the solution has not\n*                       been computed. RCOND = 0 is returned.\n*                = N+1: U is nonsingular, but RCOND is less than machine\n*                       precision, meaning that the matrix is singular\n*                       to working precision.  Nevertheless, the\n*                       solution and error bounds are computed because\n*                       there are a number of situations where the\n*                       computed solution can be more accurate than the\n*                       value of RCOND would suggest.\n*\n'),(68,'zppsvx_68.txt','      SUBROUTINE ZPPSVX( FACT, UPLO, N, NRHS, AP, AFP, EQUED, S, B, LDB,\n     $                   X, LDX, RCOND, FERR, BERR, WORK, RWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          EQUED, FACT, UPLO\n      INTEGER            INFO, LDB, LDX, N, NRHS\n      DOUBLE PRECISION   RCOND\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   BERR( * ), FERR( * ), RWORK( * ), S( * )\n      COMPLEX*16         AFP( * ), AP( * ), B( LDB, * ), WORK( * ),\n     $                   X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZPPSVX uses the Cholesky factorization A = U**H * U or A = L * L**H to\n*  compute the solution to a complex system of linear equations\n*     A * X = B,\n*  where A is an N-by-N Hermitian positive definite matrix stored in\n*  packed format and X and B are N-by-NRHS matrices.\n*\n*  Error bounds on the solution and a condition estimate are also\n*  provided.\n*\n*  Description\n*  ===========\n*\n*  The following steps are performed:\n*\n*  1. If FACT = \'E\', real scaling factors are computed to equilibrate\n*     the system:\n*        diag(S) * A * diag(S) * inv(diag(S)) * X = diag(S) * B\n*     Whether or not the system will be equilibrated depends on the\n*     scaling of the matrix A, but if equilibration is used, A is\n*     overwritten by diag(S)*A*diag(S) and B by diag(S)*B.\n*\n*  2. If FACT = \'N\' or \'E\', the Cholesky decomposition is used to\n*     factor the matrix A (after equilibration if FACT = \'E\') as\n*        A = U**H * U ,  if UPLO = \'U\', or\n*        A = L * L**H,  if UPLO = \'L\',\n*     where U is an upper triangular matrix, L is a lower triangular\n*     matrix, and **H indicates conjugate transpose.\n*\n*  3. If the leading i-by-i principal minor is not positive definite,\n*     then the routine returns with INFO = i. Otherwise, the factored\n*     form of A is used to estimate the condition number of the matrix\n*     A.  If the reciprocal of the condition number is less than machine\n*     precision, INFO = N+1 is returned as a warning, but the routine\n*     still goes on to solve for X and compute error bounds as\n*     described below.\n*\n*  4. The system of equations is solved for X using the factored form\n*     of A.\n*\n*  5. Iterative refinement is applied to improve the computed solution\n*     matrix and calculate error bounds and backward error estimates\n*     for it.\n*\n*  6. If equilibration was used, the matrix X is premultiplied by\n*     diag(S) so that it solves the original system before\n*     equilibration.\n*\n*  Arguments\n*  =========\n*\n*  FACT    (input) CHARACTER*1\n*          Specifies whether or not the factored form of the matrix A is\n*          supplied on entry, and if not, whether the matrix A should be\n*          equilibrated before it is factored.\n*          = \'F\':  On entry, AFP contains the factored form of A.\n*                  If EQUED = \'Y\', the matrix A has been equilibrated\n*                  with scaling factors given by S.  AP and AFP will not\n*                  be modified.\n*          = \'N\':  The matrix A will be copied to AFP and factored.\n*          = \'E\':  The matrix A will be equilibrated if necessary, then\n*                  copied to AFP and factored.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AP      (input/output) COMPLEX*16 array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the Hermitian matrix\n*          A, packed columnwise in a linear array, except if FACT = \'F\'\n*          and EQUED = \'Y\', then A must contain the equilibrated matrix\n*          diag(S)*A*diag(S).  The j-th column of A is stored in the\n*          array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = A(i,j) for j<=i<=n.\n*          See below for further details.  A is not modified if\n*          FACT = \'F\' or \'N\', or if FACT = \'E\' and EQUED = \'N\' on exit.\n*\n*          On exit, if FACT = \'E\' and EQUED = \'Y\', A is overwritten by\n*          diag(S)*A*diag(S).\n*\n*  AFP     (input or output) COMPLEX*16 array, dimension (N*(N+1)/2)\n*          If FACT = \'F\', then AFP is an input argument and on entry\n*          contains the triangular factor U or L from the Cholesky\n*          factorization A = U**H*U or A = L*L**H, in the same storage\n*          format as A.  If EQUED .ne. \'N\', then AFP is the factored\n*          form of the equilibrated matrix A.\n*\n*          If FACT = \'N\', then AFP is an output argument and on exit\n*          returns the triangular factor U or L from the Cholesky\n*          factorization A = U**H * U or A = L * L**H of the original\n*          matrix A.\n*\n*          If FACT = \'E\', then AFP is an output argument and on exit\n*          returns the triangular factor U or L from the Cholesky\n*          factorization A = U**H * U or A = L * L**H of the equilibrated\n*          matrix A (see the description of AP for the form of the\n*          equilibrated matrix).\n*\n*  EQUED   (input or output) CHARACTER*1\n*          Specifies the form of equilibration that was done.\n*          = \'N\':  No equilibration (always true if FACT = \'N\').\n*          = \'Y\':  Equilibration was done, i.e., A has been replaced by\n*                  diag(S) * A * diag(S).\n*          EQUED is an input argument if FACT = \'F\'; otherwise, it is an\n*          output argument.\n*\n*  S       (input or output) DOUBLE PRECISION array, dimension (N)\n*          The scale factors for A; not accessed if EQUED = \'N\'.  S is\n*          an input argument if FACT = \'F\'; otherwise, S is an output\n*          argument.  If FACT = \'F\' and EQUED = \'Y\', each element of S\n*          must be positive.\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB,NRHS)\n*          On entry, the N-by-NRHS right hand side matrix B.\n*          On exit, if EQUED = \'N\', B is not modified; if EQUED = \'Y\',\n*          B is overwritten by diag(S) * B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (output) COMPLEX*16 array, dimension (LDX,NRHS)\n*          If INFO = 0 or INFO = N+1, the N-by-NRHS solution matrix X to\n*          the original system of equations.  Note that if EQUED = \'Y\',\n*          A and B are modified on exit, and the solution to the\n*          equilibrated system is inv(diag(S))*X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The estimate of the reciprocal condition number of the matrix\n*          A after equilibration (if done).  If RCOND is less than the\n*          machine precision (in particular, if RCOND = 0), the matrix\n*          is singular to working precision.  This condition is\n*          indicated by a return code of INFO > 0.\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is\n*                <= N:  the leading minor of order i of A is\n*                       not positive definite, so the factorization\n*                       could not be completed, and the solution has not\n*                       been computed. RCOND = 0 is returned.\n*                = N+1: U is nonsingular, but RCOND is less than machine\n*                       precision, meaning that the matrix is singular\n*                       to working precision.  Nevertheless, the\n*                       solution and error bounds are computed because\n*                       there are a number of situations where the\n*                       computed solution can be more accurate than the\n*                       value of RCOND would suggest.\n*\n'),(69,'sptsvx_69.txt','      SUBROUTINE SPTSVX( FACT, N, NRHS, D, E, DF, EF, B, LDB, X, LDX,\n     $                   RCOND, FERR, BERR, WORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          FACT\n      INTEGER            INFO, LDB, LDX, N, NRHS\n      REAL               RCOND\n*     ..\n*     .. Array Arguments ..\n      REAL               B( LDB, * ), BERR( * ), D( * ), DF( * ),\n     $                   E( * ), EF( * ), FERR( * ), WORK( * ),\n     $                   X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SPTSVX uses the factorization A = L*D*L**T to compute the solution\n*  to a real system of linear equations A*X = B, where A is an N-by-N\n*  symmetric positive definite tridiagonal matrix and X and B are\n*  N-by-NRHS matrices.\n*\n*  Error bounds on the solution and a condition estimate are also\n*  provided.\n*\n*  Description\n*  ===========\n*\n*  The following steps are performed:\n*\n*  1. If FACT = \'N\', the matrix A is factored as A = L*D*L**T, where L\n*     is a unit lower bidiagonal matrix and D is diagonal.  The\n*     factorization can also be regarded as having the form\n*     A = U**T*D*U.\n*\n*  2. If the leading i-by-i principal minor is not positive definite,\n*     then the routine returns with INFO = i. Otherwise, the factored\n*     form of A is used to estimate the condition number of the matrix\n*     A.  If the reciprocal of the condition number is less than machine\n*     precision, INFO = N+1 is returned as a warning, but the routine\n*     still goes on to solve for X and compute error bounds as\n*     described below.\n*\n*  3. The system of equations is solved for X using the factored form\n*     of A.\n*\n*  4. Iterative refinement is applied to improve the computed solution\n*     matrix and calculate error bounds and backward error estimates\n*     for it.\n*\n*  Arguments\n*  =========\n*\n*  FACT    (input) CHARACTER*1\n*          Specifies whether or not the factored form of A has been\n*          supplied on entry.\n*          = \'F\':  On entry, DF and EF contain the factored form of A.\n*                  D, E, DF, and EF will not be modified.\n*          = \'N\':  The matrix A will be copied to DF and EF and\n*                  factored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  D       (input) REAL array, dimension (N)\n*          The n diagonal elements of the tridiagonal matrix A.\n*\n*  E       (input) REAL array, dimension (N-1)\n*          The (n-1) subdiagonal elements of the tridiagonal matrix A.\n*\n*  DF      (input or output) REAL array, dimension (N)\n*          If FACT = \'F\', then DF is an input argument and on entry\n*          contains the n diagonal elements of the diagonal matrix D\n*          from the L*D*L**T factorization of A.\n*          If FACT = \'N\', then DF is an output argument and on exit\n*          contains the n diagonal elements of the diagonal matrix D\n*          from the L*D*L**T factorization of A.\n*\n*  EF      (input or output) REAL array, dimension (N-1)\n*          If FACT = \'F\', then EF is an input argument and on entry\n*          contains the (n-1) subdiagonal elements of the unit\n*          bidiagonal factor L from the L*D*L**T factorization of A.\n*          If FACT = \'N\', then EF is an output argument and on exit\n*          contains the (n-1) subdiagonal elements of the unit\n*          bidiagonal factor L from the L*D*L**T factorization of A.\n*\n*  B       (input) REAL array, dimension (LDB,NRHS)\n*          The N-by-NRHS right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (output) REAL array, dimension (LDX,NRHS)\n*          If INFO = 0 of INFO = N+1, the N-by-NRHS solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  RCOND   (output) REAL\n*          The reciprocal condition number of the matrix A.  If RCOND\n*          is less than the machine precision (in particular, if\n*          RCOND = 0), the matrix is singular to working precision.\n*          This condition is indicated by a return code of INFO > 0.\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in any\n*          element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) REAL array, dimension (2*N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is\n*                <= N:  the leading minor of order i of A is\n*                       not positive definite, so the factorization\n*                       could not be completed, and the solution has not\n*                       been computed. RCOND = 0 is returned.\n*                = N+1: U is nonsingular, but RCOND is less than machine\n*                       precision, meaning that the matrix is singular\n*                       to working precision.  Nevertheless, the\n*                       solution and error bounds are computed because\n*                       there are a number of situations where the\n*                       computed solution can be more accurate than the\n*                       value of RCOND would suggest.\n*\n'),(70,'dptsvx_70.txt','      SUBROUTINE DPTSVX( FACT, N, NRHS, D, E, DF, EF, B, LDB, X, LDX,\n     $                   RCOND, FERR, BERR, WORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          FACT\n      INTEGER            INFO, LDB, LDX, N, NRHS\n      DOUBLE PRECISION   RCOND\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   B( LDB, * ), BERR( * ), D( * ), DF( * ),\n     $                   E( * ), EF( * ), FERR( * ), WORK( * ),\n     $                   X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DPTSVX uses the factorization A = L*D*L**T to compute the solution\n*  to a real system of linear equations A*X = B, where A is an N-by-N\n*  symmetric positive definite tridiagonal matrix and X and B are\n*  N-by-NRHS matrices.\n*\n*  Error bounds on the solution and a condition estimate are also\n*  provided.\n*\n*  Description\n*  ===========\n*\n*  The following steps are performed:\n*\n*  1. If FACT = \'N\', the matrix A is factored as A = L*D*L**T, where L\n*     is a unit lower bidiagonal matrix and D is diagonal.  The\n*     factorization can also be regarded as having the form\n*     A = U**T*D*U.\n*\n*  2. If the leading i-by-i principal minor is not positive definite,\n*     then the routine returns with INFO = i. Otherwise, the factored\n*     form of A is used to estimate the condition number of the matrix\n*     A.  If the reciprocal of the condition number is less than machine\n*     precision, INFO = N+1 is returned as a warning, but the routine\n*     still goes on to solve for X and compute error bounds as\n*     described below.\n*\n*  3. The system of equations is solved for X using the factored form\n*     of A.\n*\n*  4. Iterative refinement is applied to improve the computed solution\n*     matrix and calculate error bounds and backward error estimates\n*     for it.\n*\n*  Arguments\n*  =========\n*\n*  FACT    (input) CHARACTER*1\n*          Specifies whether or not the factored form of A has been\n*          supplied on entry.\n*          = \'F\':  On entry, DF and EF contain the factored form of A.\n*                  D, E, DF, and EF will not be modified.\n*          = \'N\':  The matrix A will be copied to DF and EF and\n*                  factored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  D       (input) DOUBLE PRECISION array, dimension (N)\n*          The n diagonal elements of the tridiagonal matrix A.\n*\n*  E       (input) DOUBLE PRECISION array, dimension (N-1)\n*          The (n-1) subdiagonal elements of the tridiagonal matrix A.\n*\n*  DF      (input or output) DOUBLE PRECISION array, dimension (N)\n*          If FACT = \'F\', then DF is an input argument and on entry\n*          contains the n diagonal elements of the diagonal matrix D\n*          from the L*D*L**T factorization of A.\n*          If FACT = \'N\', then DF is an output argument and on exit\n*          contains the n diagonal elements of the diagonal matrix D\n*          from the L*D*L**T factorization of A.\n*\n*  EF      (input or output) DOUBLE PRECISION array, dimension (N-1)\n*          If FACT = \'F\', then EF is an input argument and on entry\n*          contains the (n-1) subdiagonal elements of the unit\n*          bidiagonal factor L from the L*D*L**T factorization of A.\n*          If FACT = \'N\', then EF is an output argument and on exit\n*          contains the (n-1) subdiagonal elements of the unit\n*          bidiagonal factor L from the L*D*L**T factorization of A.\n*\n*  B       (input) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          The N-by-NRHS right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (output) DOUBLE PRECISION array, dimension (LDX,NRHS)\n*          If INFO = 0 of INFO = N+1, the N-by-NRHS solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The reciprocal condition number of the matrix A.  If RCOND\n*          is less than the machine precision (in particular, if\n*          RCOND = 0), the matrix is singular to working precision.\n*          This condition is indicated by a return code of INFO > 0.\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in any\n*          element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) DOUBLE PRECISION array, dimension (2*N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is\n*                <= N:  the leading minor of order i of A is\n*                       not positive definite, so the factorization\n*                       could not be completed, and the solution has not\n*                       been computed. RCOND = 0 is returned.\n*                = N+1: U is nonsingular, but RCOND is less than machine\n*                       precision, meaning that the matrix is singular\n*                       to working precision.  Nevertheless, the\n*                       solution and error bounds are computed because\n*                       there are a number of situations where the\n*                       computed solution can be more accurate than the\n*                       value of RCOND would suggest.\n*\n'),(71,'cptsvx_71.txt','      SUBROUTINE CPTSVX( FACT, N, NRHS, D, E, DF, EF, B, LDB, X, LDX,\n     $                   RCOND, FERR, BERR, WORK, RWORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          FACT\n      INTEGER            INFO, LDB, LDX, N, NRHS\n      REAL               RCOND\n*     ..\n*     .. Array Arguments ..\n      REAL               BERR( * ), D( * ), DF( * ), FERR( * ),\n     $                   RWORK( * )\n      COMPLEX            B( LDB, * ), E( * ), EF( * ), WORK( * ),\n     $                   X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CPTSVX uses the factorization A = L*D*L**H to compute the solution\n*  to a complex system of linear equations A*X = B, where A is an\n*  N-by-N Hermitian positive definite tridiagonal matrix and X and B\n*  are N-by-NRHS matrices.\n*\n*  Error bounds on the solution and a condition estimate are also\n*  provided.\n*\n*  Description\n*  ===========\n*\n*  The following steps are performed:\n*\n*  1. If FACT = \'N\', the matrix A is factored as A = L*D*L**H, where L\n*     is a unit lower bidiagonal matrix and D is diagonal.  The\n*     factorization can also be regarded as having the form\n*     A = U**H*D*U.\n*\n*  2. If the leading i-by-i principal minor is not positive definite,\n*     then the routine returns with INFO = i. Otherwise, the factored\n*     form of A is used to estimate the condition number of the matrix\n*     A.  If the reciprocal of the condition number is less than machine\n*     precision, INFO = N+1 is returned as a warning, but the routine\n*     still goes on to solve for X and compute error bounds as\n*     described below.\n*\n*  3. The system of equations is solved for X using the factored form\n*     of A.\n*\n*  4. Iterative refinement is applied to improve the computed solution\n*     matrix and calculate error bounds and backward error estimates\n*     for it.\n*\n*  Arguments\n*  =========\n*\n*  FACT    (input) CHARACTER*1\n*          Specifies whether or not the factored form of the matrix\n*          A is supplied on entry.\n*          = \'F\':  On entry, DF and EF contain the factored form of A.\n*                  D, E, DF, and EF will not be modified.\n*          = \'N\':  The matrix A will be copied to DF and EF and\n*                  factored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  D       (input) REAL array, dimension (N)\n*          The n diagonal elements of the tridiagonal matrix A.\n*\n*  E       (input) COMPLEX array, dimension (N-1)\n*          The (n-1) subdiagonal elements of the tridiagonal matrix A.\n*\n*  DF      (input or output) REAL array, dimension (N)\n*          If FACT = \'F\', then DF is an input argument and on entry\n*          contains the n diagonal elements of the diagonal matrix D\n*          from the L*D*L**H factorization of A.\n*          If FACT = \'N\', then DF is an output argument and on exit\n*          contains the n diagonal elements of the diagonal matrix D\n*          from the L*D*L**H factorization of A.\n*\n*  EF      (input or output) COMPLEX array, dimension (N-1)\n*          If FACT = \'F\', then EF is an input argument and on entry\n*          contains the (n-1) subdiagonal elements of the unit\n*          bidiagonal factor L from the L*D*L**H factorization of A.\n*          If FACT = \'N\', then EF is an output argument and on exit\n*          contains the (n-1) subdiagonal elements of the unit\n*          bidiagonal factor L from the L*D*L**H factorization of A.\n*\n*  B       (input) COMPLEX array, dimension (LDB,NRHS)\n*          The N-by-NRHS right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (output) COMPLEX array, dimension (LDX,NRHS)\n*          If INFO = 0 or INFO = N+1, the N-by-NRHS solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  RCOND   (output) REAL\n*          The reciprocal condition number of the matrix A.  If RCOND\n*          is less than the machine precision (in particular, if\n*          RCOND = 0), the matrix is singular to working precision.\n*          This condition is indicated by a return code of INFO > 0.\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in any\n*          element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX array, dimension (N)\n*\n*  RWORK   (workspace) REAL array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is\n*                <= N:  the leading minor of order i of A is\n*                       not positive definite, so the factorization\n*                       could not be completed, and the solution has not\n*                       been computed. RCOND = 0 is returned.\n*                = N+1: U is nonsingular, but RCOND is less than machine\n*                       precision, meaning that the matrix is singular\n*                       to working precision.  Nevertheless, the\n*                       solution and error bounds are computed because\n*                       there are a number of situations where the\n*                       computed solution can be more accurate than the\n*                       value of RCOND would suggest.\n*\n'),(72,'zptsvx_72.txt','      SUBROUTINE ZPTSVX( FACT, N, NRHS, D, E, DF, EF, B, LDB, X, LDX,\n     $                   RCOND, FERR, BERR, WORK, RWORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          FACT\n      INTEGER            INFO, LDB, LDX, N, NRHS\n      DOUBLE PRECISION   RCOND\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   BERR( * ), D( * ), DF( * ), FERR( * ),\n     $                   RWORK( * )\n      COMPLEX*16         B( LDB, * ), E( * ), EF( * ), WORK( * ),\n     $                   X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZPTSVX uses the factorization A = L*D*L**H to compute the solution\n*  to a complex system of linear equations A*X = B, where A is an\n*  N-by-N Hermitian positive definite tridiagonal matrix and X and B\n*  are N-by-NRHS matrices.\n*\n*  Error bounds on the solution and a condition estimate are also\n*  provided.\n*\n*  Description\n*  ===========\n*\n*  The following steps are performed:\n*\n*  1. If FACT = \'N\', the matrix A is factored as A = L*D*L**H, where L\n*     is a unit lower bidiagonal matrix and D is diagonal.  The\n*     factorization can also be regarded as having the form\n*     A = U**H*D*U.\n*\n*  2. If the leading i-by-i principal minor is not positive definite,\n*     then the routine returns with INFO = i. Otherwise, the factored\n*     form of A is used to estimate the condition number of the matrix\n*     A.  If the reciprocal of the condition number is less than machine\n*     precision, INFO = N+1 is returned as a warning, but the routine\n*     still goes on to solve for X and compute error bounds as\n*     described below.\n*\n*  3. The system of equations is solved for X using the factored form\n*     of A.\n*\n*  4. Iterative refinement is applied to improve the computed solution\n*     matrix and calculate error bounds and backward error estimates\n*     for it.\n*\n*  Arguments\n*  =========\n*\n*  FACT    (input) CHARACTER*1\n*          Specifies whether or not the factored form of the matrix\n*          A is supplied on entry.\n*          = \'F\':  On entry, DF and EF contain the factored form of A.\n*                  D, E, DF, and EF will not be modified.\n*          = \'N\':  The matrix A will be copied to DF and EF and\n*                  factored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  D       (input) DOUBLE PRECISION array, dimension (N)\n*          The n diagonal elements of the tridiagonal matrix A.\n*\n*  E       (input) COMPLEX*16 array, dimension (N-1)\n*          The (n-1) subdiagonal elements of the tridiagonal matrix A.\n*\n*  DF      (input or output) DOUBLE PRECISION array, dimension (N)\n*          If FACT = \'F\', then DF is an input argument and on entry\n*          contains the n diagonal elements of the diagonal matrix D\n*          from the L*D*L**H factorization of A.\n*          If FACT = \'N\', then DF is an output argument and on exit\n*          contains the n diagonal elements of the diagonal matrix D\n*          from the L*D*L**H factorization of A.\n*\n*  EF      (input or output) COMPLEX*16 array, dimension (N-1)\n*          If FACT = \'F\', then EF is an input argument and on entry\n*          contains the (n-1) subdiagonal elements of the unit\n*          bidiagonal factor L from the L*D*L**H factorization of A.\n*          If FACT = \'N\', then EF is an output argument and on exit\n*          contains the (n-1) subdiagonal elements of the unit\n*          bidiagonal factor L from the L*D*L**H factorization of A.\n*\n*  B       (input) COMPLEX*16 array, dimension (LDB,NRHS)\n*          The N-by-NRHS right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (output) COMPLEX*16 array, dimension (LDX,NRHS)\n*          If INFO = 0 or INFO = N+1, the N-by-NRHS solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The reciprocal condition number of the matrix A.  If RCOND\n*          is less than the machine precision (in particular, if\n*          RCOND = 0), the matrix is singular to working precision.\n*          This condition is indicated by a return code of INFO > 0.\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in any\n*          element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (N)\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is\n*                <= N:  the leading minor of order i of A is\n*                       not positive definite, so the factorization\n*                       could not be completed, and the solution has not\n*                       been computed. RCOND = 0 is returned.\n*                = N+1: U is nonsingular, but RCOND is less than machine\n*                       precision, meaning that the matrix is singular\n*                       to working precision.  Nevertheless, the\n*                       solution and error bounds are computed because\n*                       there are a number of situations where the\n*                       computed solution can be more accurate than the\n*                       value of RCOND would suggest.\n*\n'),(73,'ssysvx_73.txt','      SUBROUTINE SSYSVX( FACT, UPLO, N, NRHS, A, LDA, AF, LDAF, IPIV, B,\n     $                   LDB, X, LDX, RCOND, FERR, BERR, WORK, LWORK,\n     $                   IWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          FACT, UPLO\n      INTEGER            INFO, LDA, LDAF, LDB, LDX, LWORK, N, NRHS\n      REAL               RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * ), IWORK( * )\n      REAL               A( LDA, * ), AF( LDAF, * ), B( LDB, * ),\n     $                   BERR( * ), FERR( * ), WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SSYSVX uses the diagonal pivoting factorization to compute the\n*  solution to a real system of linear equations A * X = B,\n*  where A is an N-by-N symmetric matrix and X and B are N-by-NRHS\n*  matrices.\n*\n*  Error bounds on the solution and a condition estimate are also\n*  provided.\n*\n*  Description\n*  ===========\n*\n*  The following steps are performed:\n*\n*  1. If FACT = \'N\', the diagonal pivoting method is used to factor A.\n*     The form of the factorization is\n*        A = U * D * U**T,  if UPLO = \'U\', or\n*        A = L * D * L**T,  if UPLO = \'L\',\n*     where U (or L) is a product of permutation and unit upper (lower)\n*     triangular matrices, and D is symmetric and block diagonal with\n*     1-by-1 and 2-by-2 diagonal blocks.\n*\n*  2. If some D(i,i)=0, so that D is exactly singular, then the routine\n*     returns with INFO = i. Otherwise, the factored form of A is used\n*     to estimate the condition number of the matrix A.  If the\n*     reciprocal of the condition number is less than machine precision,\n*     INFO = N+1 is returned as a warning, but the routine still goes on\n*     to solve for X and compute error bounds as described below.\n*\n*  3. The system of equations is solved for X using the factored form\n*     of A.\n*\n*  4. Iterative refinement is applied to improve the computed solution\n*     matrix and calculate error bounds and backward error estimates\n*     for it.\n*\n*  Arguments\n*  =========\n*\n*  FACT    (input) CHARACTER*1\n*          Specifies whether or not the factored form of A has been\n*          supplied on entry.\n*          = \'F\':  On entry, AF and IPIV contain the factored form of\n*                  A.  AF and IPIV will not be modified.\n*          = \'N\':  The matrix A will be copied to AF and factored.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  A       (input) REAL array, dimension (LDA,N)\n*          The symmetric matrix A.  If UPLO = \'U\', the leading N-by-N\n*          upper triangular part of A contains the upper triangular part\n*          of the matrix A, and the strictly lower triangular part of A\n*          is not referenced.  If UPLO = \'L\', the leading N-by-N lower\n*          triangular part of A contains the lower triangular part of\n*          the matrix A, and the strictly upper triangular part of A is\n*          not referenced.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  AF      (input or output) REAL array, dimension (LDAF,N)\n*          If FACT = \'F\', then AF is an input argument and on entry\n*          contains the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L from the factorization\n*          A = U*D*U**T or A = L*D*L**T as computed by SSYTRF.\n*\n*          If FACT = \'N\', then AF is an output argument and on exit\n*          returns the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L from the factorization\n*          A = U*D*U**T or A = L*D*L**T.\n*\n*  LDAF    (input) INTEGER\n*          The leading dimension of the array AF.  LDAF >= max(1,N).\n*\n*  IPIV    (input or output) INTEGER array, dimension (N)\n*          If FACT = \'F\', then IPIV is an input argument and on entry\n*          contains details of the interchanges and the block structure\n*          of D, as determined by SSYTRF.\n*          If IPIV(k) > 0, then rows and columns k and IPIV(k) were\n*          interchanged and D(k,k) is a 1-by-1 diagonal block.\n*          If UPLO = \'U\' and IPIV(k) = IPIV(k-1) < 0, then rows and\n*          columns k-1 and -IPIV(k) were interchanged and D(k-1:k,k-1:k)\n*          is a 2-by-2 diagonal block.  If UPLO = \'L\' and IPIV(k) =\n*          IPIV(k+1) < 0, then rows and columns k+1 and -IPIV(k) were\n*          interchanged and D(k:k+1,k:k+1) is a 2-by-2 diagonal block.\n*\n*          If FACT = \'N\', then IPIV is an output argument and on exit\n*          contains details of the interchanges and the block structure\n*          of D, as determined by SSYTRF.\n*\n*  B       (input) REAL array, dimension (LDB,NRHS)\n*          The N-by-NRHS right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (output) REAL array, dimension (LDX,NRHS)\n*          If INFO = 0 or INFO = N+1, the N-by-NRHS solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  RCOND   (output) REAL\n*          The estimate of the reciprocal condition number of the matrix\n*          A.  If RCOND is less than the machine precision (in\n*          particular, if RCOND = 0), the matrix is singular to working\n*          precision.  This condition is indicated by a return code of\n*          INFO > 0.\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace/output) REAL array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The length of WORK.  LWORK >= max(1,3*N), and for best\n*          performance, when FACT = \'N\', LWORK >= max(1,3*N,N*NB), where\n*          NB is the optimal blocksize for SSYTRF.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, and i is\n*                <= N:  D(i,i) is exactly zero.  The factorization\n*                       has been completed but the factor D is exactly\n*                       singular, so the solution and error bounds could\n*                       not be computed. RCOND = 0 is returned.\n*                = N+1: D is nonsingular, but RCOND is less than machine\n*                       precision, meaning that the matrix is singular\n*                       to working precision.  Nevertheless, the\n*                       solution and error bounds are computed because\n*                       there are a number of situations where the\n*                       computed solution can be more accurate than the\n*                       value of RCOND would suggest.\n*\n'),(74,'dsysvx_74.txt','      SUBROUTINE DSYSVX( FACT, UPLO, N, NRHS, A, LDA, AF, LDAF, IPIV, B,\n     $                   LDB, X, LDX, RCOND, FERR, BERR, WORK, LWORK,\n     $                   IWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          FACT, UPLO\n      INTEGER            INFO, LDA, LDAF, LDB, LDX, LWORK, N, NRHS\n      DOUBLE PRECISION   RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * ), IWORK( * )\n      DOUBLE PRECISION   A( LDA, * ), AF( LDAF, * ), B( LDB, * ),\n     $                   BERR( * ), FERR( * ), WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DSYSVX uses the diagonal pivoting factorization to compute the\n*  solution to a real system of linear equations A * X = B,\n*  where A is an N-by-N symmetric matrix and X and B are N-by-NRHS\n*  matrices.\n*\n*  Error bounds on the solution and a condition estimate are also\n*  provided.\n*\n*  Description\n*  ===========\n*\n*  The following steps are performed:\n*\n*  1. If FACT = \'N\', the diagonal pivoting method is used to factor A.\n*     The form of the factorization is\n*        A = U * D * U**T,  if UPLO = \'U\', or\n*        A = L * D * L**T,  if UPLO = \'L\',\n*     where U (or L) is a product of permutation and unit upper (lower)\n*     triangular matrices, and D is symmetric and block diagonal with\n*     1-by-1 and 2-by-2 diagonal blocks.\n*\n*  2. If some D(i,i)=0, so that D is exactly singular, then the routine\n*     returns with INFO = i. Otherwise, the factored form of A is used\n*     to estimate the condition number of the matrix A.  If the\n*     reciprocal of the condition number is less than machine precision,\n*     INFO = N+1 is returned as a warning, but the routine still goes on\n*     to solve for X and compute error bounds as described below.\n*\n*  3. The system of equations is solved for X using the factored form\n*     of A.\n*\n*  4. Iterative refinement is applied to improve the computed solution\n*     matrix and calculate error bounds and backward error estimates\n*     for it.\n*\n*  Arguments\n*  =========\n*\n*  FACT    (input) CHARACTER*1\n*          Specifies whether or not the factored form of A has been\n*          supplied on entry.\n*          = \'F\':  On entry, AF and IPIV contain the factored form of\n*                  A.  AF and IPIV will not be modified.\n*          = \'N\':  The matrix A will be copied to AF and factored.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  A       (input) DOUBLE PRECISION array, dimension (LDA,N)\n*          The symmetric matrix A.  If UPLO = \'U\', the leading N-by-N\n*          upper triangular part of A contains the upper triangular part\n*          of the matrix A, and the strictly lower triangular part of A\n*          is not referenced.  If UPLO = \'L\', the leading N-by-N lower\n*          triangular part of A contains the lower triangular part of\n*          the matrix A, and the strictly upper triangular part of A is\n*          not referenced.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  AF      (input or output) DOUBLE PRECISION array, dimension (LDAF,N)\n*          If FACT = \'F\', then AF is an input argument and on entry\n*          contains the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L from the factorization\n*          A = U*D*U**T or A = L*D*L**T as computed by DSYTRF.\n*\n*          If FACT = \'N\', then AF is an output argument and on exit\n*          returns the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L from the factorization\n*          A = U*D*U**T or A = L*D*L**T.\n*\n*  LDAF    (input) INTEGER\n*          The leading dimension of the array AF.  LDAF >= max(1,N).\n*\n*  IPIV    (input or output) INTEGER array, dimension (N)\n*          If FACT = \'F\', then IPIV is an input argument and on entry\n*          contains details of the interchanges and the block structure\n*          of D, as determined by DSYTRF.\n*          If IPIV(k) > 0, then rows and columns k and IPIV(k) were\n*          interchanged and D(k,k) is a 1-by-1 diagonal block.\n*          If UPLO = \'U\' and IPIV(k) = IPIV(k-1) < 0, then rows and\n*          columns k-1 and -IPIV(k) were interchanged and D(k-1:k,k-1:k)\n*          is a 2-by-2 diagonal block.  If UPLO = \'L\' and IPIV(k) =\n*          IPIV(k+1) < 0, then rows and columns k+1 and -IPIV(k) were\n*          interchanged and D(k:k+1,k:k+1) is a 2-by-2 diagonal block.\n*\n*          If FACT = \'N\', then IPIV is an output argument and on exit\n*          contains details of the interchanges and the block structure\n*          of D, as determined by DSYTRF.\n*\n*  B       (input) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          The N-by-NRHS right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (output) DOUBLE PRECISION array, dimension (LDX,NRHS)\n*          If INFO = 0 or INFO = N+1, the N-by-NRHS solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The estimate of the reciprocal condition number of the matrix\n*          A.  If RCOND is less than the machine precision (in\n*          particular, if RCOND = 0), the matrix is singular to working\n*          precision.  This condition is indicated by a return code of\n*          INFO > 0.\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace/output) DOUBLE PRECISION array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The length of WORK.  LWORK >= max(1,3*N), and for best\n*          performance, when FACT = \'N\', LWORK >= max(1,3*N,N*NB), where\n*          NB is the optimal blocksize for DSYTRF.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, and i is\n*                <= N:  D(i,i) is exactly zero.  The factorization\n*                       has been completed but the factor D is exactly\n*                       singular, so the solution and error bounds could\n*                       not be computed. RCOND = 0 is returned.\n*                = N+1: D is nonsingular, but RCOND is less than machine\n*                       precision, meaning that the matrix is singular\n*                       to working precision.  Nevertheless, the\n*                       solution and error bounds are computed because\n*                       there are a number of situations where the\n*                       computed solution can be more accurate than the\n*                       value of RCOND would suggest.\n*\n'),(75,'csysvx_75.txt','      SUBROUTINE CSYSVX( FACT, UPLO, N, NRHS, A, LDA, AF, LDAF, IPIV, B,\n     $                   LDB, X, LDX, RCOND, FERR, BERR, WORK, LWORK,\n     $                   RWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          FACT, UPLO\n      INTEGER            INFO, LDA, LDAF, LDB, LDX, LWORK, N, NRHS\n      REAL               RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      REAL               BERR( * ), FERR( * ), RWORK( * )\n      COMPLEX            A( LDA, * ), AF( LDAF, * ), B( LDB, * ),\n     $                   WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CSYSVX uses the diagonal pivoting factorization to compute the\n*  solution to a complex system of linear equations A * X = B,\n*  where A is an N-by-N symmetric matrix and X and B are N-by-NRHS\n*  matrices.\n*\n*  Error bounds on the solution and a condition estimate are also\n*  provided.\n*\n*  Description\n*  ===========\n*\n*  The following steps are performed:\n*\n*  1. If FACT = \'N\', the diagonal pivoting method is used to factor A.\n*     The form of the factorization is\n*        A = U * D * U**T,  if UPLO = \'U\', or\n*        A = L * D * L**T,  if UPLO = \'L\',\n*     where U (or L) is a product of permutation and unit upper (lower)\n*     triangular matrices, and D is symmetric and block diagonal with\n*     1-by-1 and 2-by-2 diagonal blocks.\n*\n*  2. If some D(i,i)=0, so that D is exactly singular, then the routine\n*     returns with INFO = i. Otherwise, the factored form of A is used\n*     to estimate the condition number of the matrix A.  If the\n*     reciprocal of the condition number is less than machine precision,\n*     INFO = N+1 is returned as a warning, but the routine still goes on\n*     to solve for X and compute error bounds as described below.\n*\n*  3. The system of equations is solved for X using the factored form\n*     of A.\n*\n*  4. Iterative refinement is applied to improve the computed solution\n*     matrix and calculate error bounds and backward error estimates\n*     for it.\n*\n*  Arguments\n*  =========\n*\n*  FACT    (input) CHARACTER*1\n*          Specifies whether or not the factored form of A has been\n*          supplied on entry.\n*          = \'F\':  On entry, AF and IPIV contain the factored form\n*                  of A.  A, AF and IPIV will not be modified.\n*          = \'N\':  The matrix A will be copied to AF and factored.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  A       (input) COMPLEX array, dimension (LDA,N)\n*          The symmetric matrix A.  If UPLO = \'U\', the leading N-by-N\n*          upper triangular part of A contains the upper triangular part\n*          of the matrix A, and the strictly lower triangular part of A\n*          is not referenced.  If UPLO = \'L\', the leading N-by-N lower\n*          triangular part of A contains the lower triangular part of\n*          the matrix A, and the strictly upper triangular part of A is\n*          not referenced.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  AF      (input or output) COMPLEX array, dimension (LDAF,N)\n*          If FACT = \'F\', then AF is an input argument and on entry\n*          contains the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L from the factorization\n*          A = U*D*U**T or A = L*D*L**T as computed by CSYTRF.\n*\n*          If FACT = \'N\', then AF is an output argument and on exit\n*          returns the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L from the factorization\n*          A = U*D*U**T or A = L*D*L**T.\n*\n*  LDAF    (input) INTEGER\n*          The leading dimension of the array AF.  LDAF >= max(1,N).\n*\n*  IPIV    (input or output) INTEGER array, dimension (N)\n*          If FACT = \'F\', then IPIV is an input argument and on entry\n*          contains details of the interchanges and the block structure\n*          of D, as determined by CSYTRF.\n*          If IPIV(k) > 0, then rows and columns k and IPIV(k) were\n*          interchanged and D(k,k) is a 1-by-1 diagonal block.\n*          If UPLO = \'U\' and IPIV(k) = IPIV(k-1) < 0, then rows and\n*          columns k-1 and -IPIV(k) were interchanged and D(k-1:k,k-1:k)\n*          is a 2-by-2 diagonal block.  If UPLO = \'L\' and IPIV(k) =\n*          IPIV(k+1) < 0, then rows and columns k+1 and -IPIV(k) were\n*          interchanged and D(k:k+1,k:k+1) is a 2-by-2 diagonal block.\n*\n*          If FACT = \'N\', then IPIV is an output argument and on exit\n*          contains details of the interchanges and the block structure\n*          of D, as determined by CSYTRF.\n*\n*  B       (input) COMPLEX array, dimension (LDB,NRHS)\n*          The N-by-NRHS right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (output) COMPLEX array, dimension (LDX,NRHS)\n*          If INFO = 0 or INFO = N+1, the N-by-NRHS solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  RCOND   (output) REAL\n*          The estimate of the reciprocal condition number of the matrix\n*          A.  If RCOND is less than the machine precision (in\n*          particular, if RCOND = 0), the matrix is singular to working\n*          precision.  This condition is indicated by a return code of\n*          INFO > 0.\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace/output) COMPLEX array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The length of WORK.  LWORK >= max(1,2*N), and for best\n*          performance, when FACT = \'N\', LWORK >= max(1,2*N,N*NB), where\n*          NB is the optimal blocksize for CSYTRF.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  RWORK   (workspace) REAL array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, and i is\n*                <= N:  D(i,i) is exactly zero.  The factorization\n*                       has been completed but the factor D is exactly\n*                       singular, so the solution and error bounds could\n*                       not be computed. RCOND = 0 is returned.\n*                = N+1: D is nonsingular, but RCOND is less than machine\n*                       precision, meaning that the matrix is singular\n*                       to working precision.  Nevertheless, the\n*                       solution and error bounds are computed because\n*                       there are a number of situations where the\n*                       computed solution can be more accurate than the\n*                       value of RCOND would suggest.\n*\n'),(76,'zsysvx_76.txt','      SUBROUTINE ZSYSVX( FACT, UPLO, N, NRHS, A, LDA, AF, LDAF, IPIV, B,\n     $                   LDB, X, LDX, RCOND, FERR, BERR, WORK, LWORK,\n     $                   RWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          FACT, UPLO\n      INTEGER            INFO, LDA, LDAF, LDB, LDX, LWORK, N, NRHS\n      DOUBLE PRECISION   RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      DOUBLE PRECISION   BERR( * ), FERR( * ), RWORK( * )\n      COMPLEX*16         A( LDA, * ), AF( LDAF, * ), B( LDB, * ),\n     $                   WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZSYSVX uses the diagonal pivoting factorization to compute the\n*  solution to a complex system of linear equations A * X = B,\n*  where A is an N-by-N symmetric matrix and X and B are N-by-NRHS\n*  matrices.\n*\n*  Error bounds on the solution and a condition estimate are also\n*  provided.\n*\n*  Description\n*  ===========\n*\n*  The following steps are performed:\n*\n*  1. If FACT = \'N\', the diagonal pivoting method is used to factor A.\n*     The form of the factorization is\n*        A = U * D * U**T,  if UPLO = \'U\', or\n*        A = L * D * L**T,  if UPLO = \'L\',\n*     where U (or L) is a product of permutation and unit upper (lower)\n*     triangular matrices, and D is symmetric and block diagonal with\n*     1-by-1 and 2-by-2 diagonal blocks.\n*\n*  2. If some D(i,i)=0, so that D is exactly singular, then the routine\n*     returns with INFO = i. Otherwise, the factored form of A is used\n*     to estimate the condition number of the matrix A.  If the\n*     reciprocal of the condition number is less than machine precision,\n*     INFO = N+1 is returned as a warning, but the routine still goes on\n*     to solve for X and compute error bounds as described below.\n*\n*  3. The system of equations is solved for X using the factored form\n*     of A.\n*\n*  4. Iterative refinement is applied to improve the computed solution\n*     matrix and calculate error bounds and backward error estimates\n*     for it.\n*\n*  Arguments\n*  =========\n*\n*  FACT    (input) CHARACTER*1\n*          Specifies whether or not the factored form of A has been\n*          supplied on entry.\n*          = \'F\':  On entry, AF and IPIV contain the factored form\n*                  of A.  A, AF and IPIV will not be modified.\n*          = \'N\':  The matrix A will be copied to AF and factored.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  A       (input) COMPLEX*16 array, dimension (LDA,N)\n*          The symmetric matrix A.  If UPLO = \'U\', the leading N-by-N\n*          upper triangular part of A contains the upper triangular part\n*          of the matrix A, and the strictly lower triangular part of A\n*          is not referenced.  If UPLO = \'L\', the leading N-by-N lower\n*          triangular part of A contains the lower triangular part of\n*          the matrix A, and the strictly upper triangular part of A is\n*          not referenced.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  AF      (input or output) COMPLEX*16 array, dimension (LDAF,N)\n*          If FACT = \'F\', then AF is an input argument and on entry\n*          contains the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L from the factorization\n*          A = U*D*U**T or A = L*D*L**T as computed by ZSYTRF.\n*\n*          If FACT = \'N\', then AF is an output argument and on exit\n*          returns the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L from the factorization\n*          A = U*D*U**T or A = L*D*L**T.\n*\n*  LDAF    (input) INTEGER\n*          The leading dimension of the array AF.  LDAF >= max(1,N).\n*\n*  IPIV    (input or output) INTEGER array, dimension (N)\n*          If FACT = \'F\', then IPIV is an input argument and on entry\n*          contains details of the interchanges and the block structure\n*          of D, as determined by ZSYTRF.\n*          If IPIV(k) > 0, then rows and columns k and IPIV(k) were\n*          interchanged and D(k,k) is a 1-by-1 diagonal block.\n*          If UPLO = \'U\' and IPIV(k) = IPIV(k-1) < 0, then rows and\n*          columns k-1 and -IPIV(k) were interchanged and D(k-1:k,k-1:k)\n*          is a 2-by-2 diagonal block.  If UPLO = \'L\' and IPIV(k) =\n*          IPIV(k+1) < 0, then rows and columns k+1 and -IPIV(k) were\n*          interchanged and D(k:k+1,k:k+1) is a 2-by-2 diagonal block.\n*\n*          If FACT = \'N\', then IPIV is an output argument and on exit\n*          contains details of the interchanges and the block structure\n*          of D, as determined by ZSYTRF.\n*\n*  B       (input) COMPLEX*16 array, dimension (LDB,NRHS)\n*          The N-by-NRHS right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (output) COMPLEX*16 array, dimension (LDX,NRHS)\n*          If INFO = 0 or INFO = N+1, the N-by-NRHS solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The estimate of the reciprocal condition number of the matrix\n*          A.  If RCOND is less than the machine precision (in\n*          particular, if RCOND = 0), the matrix is singular to working\n*          precision.  This condition is indicated by a return code of\n*          INFO > 0.\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace/output) COMPLEX*16 array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The length of WORK.  LWORK >= max(1,2*N), and for best\n*          performance, when FACT = \'N\', LWORK >= max(1,2*N,N*NB), where\n*          NB is the optimal blocksize for ZSYTRF.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, and i is\n*                <= N:  D(i,i) is exactly zero.  The factorization\n*                       has been completed but the factor D is exactly\n*                       singular, so the solution and error bounds could\n*                       not be computed. RCOND = 0 is returned.\n*                = N+1: D is nonsingular, but RCOND is less than machine\n*                       precision, meaning that the matrix is singular\n*                       to working precision.  Nevertheless, the\n*                       solution and error bounds are computed because\n*                       there are a number of situations where the\n*                       computed solution can be more accurate than the\n*                       value of RCOND would suggest.\n*\n'),(77,'sspsvx_77.txt','      SUBROUTINE SSPSVX( FACT, UPLO, N, NRHS, AP, AFP, IPIV, B, LDB, X,\n     $                   LDX, RCOND, FERR, BERR, WORK, IWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          FACT, UPLO\n      INTEGER            INFO, LDB, LDX, N, NRHS\n      REAL               RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * ), IWORK( * )\n      REAL               AFP( * ), AP( * ), B( LDB, * ), BERR( * ),\n     $                   FERR( * ), WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SSPSVX uses the diagonal pivoting factorization A = U*D*U**T or\n*  A = L*D*L**T to compute the solution to a real system of linear\n*  equations A * X = B, where A is an N-by-N symmetric matrix stored\n*  in packed format and X and B are N-by-NRHS matrices.\n*\n*  Error bounds on the solution and a condition estimate are also\n*  provided.\n*\n*  Description\n*  ===========\n*\n*  The following steps are performed:\n*\n*  1. If FACT = \'N\', the diagonal pivoting method is used to factor A as\n*        A = U * D * U**T,  if UPLO = \'U\', or\n*        A = L * D * L**T,  if UPLO = \'L\',\n*     where U (or L) is a product of permutation and unit upper (lower)\n*     triangular matrices and D is symmetric and block diagonal with\n*     1-by-1 and 2-by-2 diagonal blocks.\n*\n*  2. If some D(i,i)=0, so that D is exactly singular, then the routine\n*     returns with INFO = i. Otherwise, the factored form of A is used\n*     to estimate the condition number of the matrix A.  If the\n*     reciprocal of the condition number is less than machine precision,\n*     INFO = N+1 is returned as a warning, but the routine still goes on\n*     to solve for X and compute error bounds as described below.\n*\n*  3. The system of equations is solved for X using the factored form\n*     of A.\n*\n*  4. Iterative refinement is applied to improve the computed solution\n*     matrix and calculate error bounds and backward error estimates\n*     for it.\n*\n*  Arguments\n*  =========\n*\n*  FACT    (input) CHARACTER*1\n*          Specifies whether or not the factored form of A has been\n*          supplied on entry.\n*          = \'F\':  On entry, AFP and IPIV contain the factored form of\n*                  A.  AP, AFP and IPIV will not be modified.\n*          = \'N\':  The matrix A will be copied to AFP and factored.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AP      (input) REAL array, dimension (N*(N+1)/2)\n*          The upper or lower triangle of the symmetric matrix A, packed\n*          columnwise in a linear array.  The j-th column of A is stored\n*          in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*          See below for further details.\n*\n*  AFP     (input or output) REAL array, dimension\n*                            (N*(N+1)/2)\n*          If FACT = \'F\', then AFP is an input argument and on entry\n*          contains the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L from the factorization\n*          A = U*D*U**T or A = L*D*L**T as computed by SSPTRF, stored as\n*          a packed triangular matrix in the same storage format as A.\n*\n*          If FACT = \'N\', then AFP is an output argument and on exit\n*          contains the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L from the factorization\n*          A = U*D*U**T or A = L*D*L**T as computed by SSPTRF, stored as\n*          a packed triangular matrix in the same storage format as A.\n*\n*  IPIV    (input or output) INTEGER array, dimension (N)\n*          If FACT = \'F\', then IPIV is an input argument and on entry\n*          contains details of the interchanges and the block structure\n*          of D, as determined by SSPTRF.\n*          If IPIV(k) > 0, then rows and columns k and IPIV(k) were\n*          interchanged and D(k,k) is a 1-by-1 diagonal block.\n*          If UPLO = \'U\' and IPIV(k) = IPIV(k-1) < 0, then rows and\n*          columns k-1 and -IPIV(k) were interchanged and D(k-1:k,k-1:k)\n*          is a 2-by-2 diagonal block.  If UPLO = \'L\' and IPIV(k) =\n*          IPIV(k+1) < 0, then rows and columns k+1 and -IPIV(k) were\n*          interchanged and D(k:k+1,k:k+1) is a 2-by-2 diagonal block.\n*\n*          If FACT = \'N\', then IPIV is an output argument and on exit\n*          contains details of the interchanges and the block structure\n*          of D, as determined by SSPTRF.\n*\n*  B       (input) REAL array, dimension (LDB,NRHS)\n*          The N-by-NRHS right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (output) REAL array, dimension (LDX,NRHS)\n*          If INFO = 0 or INFO = N+1, the N-by-NRHS solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  RCOND   (output) REAL\n*          The estimate of the reciprocal condition number of the matrix\n*          A.  If RCOND is less than the machine precision (in\n*          particular, if RCOND = 0), the matrix is singular to working\n*          precision.  This condition is indicated by a return code of\n*          INFO > 0.\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) REAL array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is\n*                <= N:  D(i,i) is exactly zero.  The factorization\n*                       has been completed but the factor D is exactly\n*                       singular, so the solution and error bounds could\n*                       not be computed. RCOND = 0 is returned.\n*                = N+1: D is nonsingular, but RCOND is less than machine\n*                       precision, meaning that the matrix is singular\n*                       to working precision.  Nevertheless, the\n*                       solution and error bounds are computed because\n*                       there are a number of situations where the\n*                       computed solution can be more accurate than the\n*                       value of RCOND would suggest.\n*\n'),(78,'dspsvx_78.txt','      SUBROUTINE DSPSVX( FACT, UPLO, N, NRHS, AP, AFP, IPIV, B, LDB, X,\n     $                   LDX, RCOND, FERR, BERR, WORK, IWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          FACT, UPLO\n      INTEGER            INFO, LDB, LDX, N, NRHS\n      DOUBLE PRECISION   RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * ), IWORK( * )\n      DOUBLE PRECISION   AFP( * ), AP( * ), B( LDB, * ), BERR( * ),\n     $                   FERR( * ), WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DSPSVX uses the diagonal pivoting factorization A = U*D*U**T or\n*  A = L*D*L**T to compute the solution to a real system of linear\n*  equations A * X = B, where A is an N-by-N symmetric matrix stored\n*  in packed format and X and B are N-by-NRHS matrices.\n*\n*  Error bounds on the solution and a condition estimate are also\n*  provided.\n*\n*  Description\n*  ===========\n*\n*  The following steps are performed:\n*\n*  1. If FACT = \'N\', the diagonal pivoting method is used to factor A as\n*        A = U * D * U**T,  if UPLO = \'U\', or\n*        A = L * D * L**T,  if UPLO = \'L\',\n*     where U (or L) is a product of permutation and unit upper (lower)\n*     triangular matrices and D is symmetric and block diagonal with\n*     1-by-1 and 2-by-2 diagonal blocks.\n*\n*  2. If some D(i,i)=0, so that D is exactly singular, then the routine\n*     returns with INFO = i. Otherwise, the factored form of A is used\n*     to estimate the condition number of the matrix A.  If the\n*     reciprocal of the condition number is less than machine precision,\n*     INFO = N+1 is returned as a warning, but the routine still goes on\n*     to solve for X and compute error bounds as described below.\n*\n*  3. The system of equations is solved for X using the factored form\n*     of A.\n*\n*  4. Iterative refinement is applied to improve the computed solution\n*     matrix and calculate error bounds and backward error estimates\n*     for it.\n*\n*  Arguments\n*  =========\n*\n*  FACT    (input) CHARACTER*1\n*          Specifies whether or not the factored form of A has been\n*          supplied on entry.\n*          = \'F\':  On entry, AFP and IPIV contain the factored form of\n*                  A.  AP, AFP and IPIV will not be modified.\n*          = \'N\':  The matrix A will be copied to AFP and factored.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AP      (input) DOUBLE PRECISION array, dimension (N*(N+1)/2)\n*          The upper or lower triangle of the symmetric matrix A, packed\n*          columnwise in a linear array.  The j-th column of A is stored\n*          in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*          See below for further details.\n*\n*  AFP     (input or output) DOUBLE PRECISION array, dimension\n*                            (N*(N+1)/2)\n*          If FACT = \'F\', then AFP is an input argument and on entry\n*          contains the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L from the factorization\n*          A = U*D*U**T or A = L*D*L**T as computed by DSPTRF, stored as\n*          a packed triangular matrix in the same storage format as A.\n*\n*          If FACT = \'N\', then AFP is an output argument and on exit\n*          contains the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L from the factorization\n*          A = U*D*U**T or A = L*D*L**T as computed by DSPTRF, stored as\n*          a packed triangular matrix in the same storage format as A.\n*\n*  IPIV    (input or output) INTEGER array, dimension (N)\n*          If FACT = \'F\', then IPIV is an input argument and on entry\n*          contains details of the interchanges and the block structure\n*          of D, as determined by DSPTRF.\n*          If IPIV(k) > 0, then rows and columns k and IPIV(k) were\n*          interchanged and D(k,k) is a 1-by-1 diagonal block.\n*          If UPLO = \'U\' and IPIV(k) = IPIV(k-1) < 0, then rows and\n*          columns k-1 and -IPIV(k) were interchanged and D(k-1:k,k-1:k)\n*          is a 2-by-2 diagonal block.  If UPLO = \'L\' and IPIV(k) =\n*          IPIV(k+1) < 0, then rows and columns k+1 and -IPIV(k) were\n*          interchanged and D(k:k+1,k:k+1) is a 2-by-2 diagonal block.\n*\n*          If FACT = \'N\', then IPIV is an output argument and on exit\n*          contains details of the interchanges and the block structure\n*          of D, as determined by DSPTRF.\n*\n*  B       (input) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          The N-by-NRHS right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (output) DOUBLE PRECISION array, dimension (LDX,NRHS)\n*          If INFO = 0 or INFO = N+1, the N-by-NRHS solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The estimate of the reciprocal condition number of the matrix\n*          A.  If RCOND is less than the machine precision (in\n*          particular, if RCOND = 0), the matrix is singular to working\n*          precision.  This condition is indicated by a return code of\n*          INFO > 0.\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) DOUBLE PRECISION array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is\n*                <= N:  D(i,i) is exactly zero.  The factorization\n*                       has been completed but the factor D is exactly\n*                       singular, so the solution and error bounds could\n*                       not be computed. RCOND = 0 is returned.\n*                = N+1: D is nonsingular, but RCOND is less than machine\n*                       precision, meaning that the matrix is singular\n*                       to working precision.  Nevertheless, the\n*                       solution and error bounds are computed because\n*                       there are a number of situations where the\n*                       computed solution can be more accurate than the\n*                       value of RCOND would suggest.\n*\n'),(79,'cspsvx_79.txt','      SUBROUTINE CSPSVX( FACT, UPLO, N, NRHS, AP, AFP, IPIV, B, LDB, X,\n     $                   LDX, RCOND, FERR, BERR, WORK, RWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          FACT, UPLO\n      INTEGER            INFO, LDB, LDX, N, NRHS\n      REAL               RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      REAL               BERR( * ), FERR( * ), RWORK( * )\n      COMPLEX            AFP( * ), AP( * ), B( LDB, * ), WORK( * ),\n     $                   X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CSPSVX uses the diagonal pivoting factorization A = U*D*U**T or\n*  A = L*D*L**T to compute the solution to a complex system of linear\n*  equations A * X = B, where A is an N-by-N symmetric matrix stored\n*  in packed format and X and B are N-by-NRHS matrices.\n*\n*  Error bounds on the solution and a condition estimate are also\n*  provided.\n*\n*  Description\n*  ===========\n*\n*  The following steps are performed:\n*\n*  1. If FACT = \'N\', the diagonal pivoting method is used to factor A as\n*        A = U * D * U**T,  if UPLO = \'U\', or\n*        A = L * D * L**T,  if UPLO = \'L\',\n*     where U (or L) is a product of permutation and unit upper (lower)\n*     triangular matrices and D is symmetric and block diagonal with\n*     1-by-1 and 2-by-2 diagonal blocks.\n*\n*  2. If some D(i,i)=0, so that D is exactly singular, then the routine\n*     returns with INFO = i. Otherwise, the factored form of A is used\n*     to estimate the condition number of the matrix A.  If the\n*     reciprocal of the condition number is less than machine precision,\n*     INFO = N+1 is returned as a warning, but the routine still goes on\n*     to solve for X and compute error bounds as described below.\n*\n*  3. The system of equations is solved for X using the factored form\n*     of A.\n*\n*  4. Iterative refinement is applied to improve the computed solution\n*     matrix and calculate error bounds and backward error estimates\n*     for it.\n*\n*  Arguments\n*  =========\n*\n*  FACT    (input) CHARACTER*1\n*          Specifies whether or not the factored form of A has been\n*          supplied on entry.\n*          = \'F\':  On entry, AFP and IPIV contain the factored form\n*                  of A.  AP, AFP and IPIV will not be modified.\n*          = \'N\':  The matrix A will be copied to AFP and factored.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AP      (input) COMPLEX array, dimension (N*(N+1)/2)\n*          The upper or lower triangle of the symmetric matrix A, packed\n*          columnwise in a linear array.  The j-th column of A is stored\n*          in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*          See below for further details.\n*\n*  AFP     (input or output) COMPLEX array, dimension (N*(N+1)/2)\n*          If FACT = \'F\', then AFP is an input argument and on entry\n*          contains the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L from the factorization\n*          A = U*D*U**T or A = L*D*L**T as computed by CSPTRF, stored as\n*          a packed triangular matrix in the same storage format as A.\n*\n*          If FACT = \'N\', then AFP is an output argument and on exit\n*          contains the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L from the factorization\n*          A = U*D*U**T or A = L*D*L**T as computed by CSPTRF, stored as\n*          a packed triangular matrix in the same storage format as A.\n*\n*  IPIV    (input or output) INTEGER array, dimension (N)\n*          If FACT = \'F\', then IPIV is an input argument and on entry\n*          contains details of the interchanges and the block structure\n*          of D, as determined by CSPTRF.\n*          If IPIV(k) > 0, then rows and columns k and IPIV(k) were\n*          interchanged and D(k,k) is a 1-by-1 diagonal block.\n*          If UPLO = \'U\' and IPIV(k) = IPIV(k-1) < 0, then rows and\n*          columns k-1 and -IPIV(k) were interchanged and D(k-1:k,k-1:k)\n*          is a 2-by-2 diagonal block.  If UPLO = \'L\' and IPIV(k) =\n*          IPIV(k+1) < 0, then rows and columns k+1 and -IPIV(k) were\n*          interchanged and D(k:k+1,k:k+1) is a 2-by-2 diagonal block.\n*\n*          If FACT = \'N\', then IPIV is an output argument and on exit\n*          contains details of the interchanges and the block structure\n*          of D, as determined by CSPTRF.\n*\n*  B       (input) COMPLEX array, dimension (LDB,NRHS)\n*          The N-by-NRHS right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (output) COMPLEX array, dimension (LDX,NRHS)\n*          If INFO = 0 or INFO = N+1, the N-by-NRHS solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  RCOND   (output) REAL\n*          The estimate of the reciprocal condition number of the matrix\n*          A.  If RCOND is less than the machine precision (in\n*          particular, if RCOND = 0), the matrix is singular to working\n*          precision.  This condition is indicated by a return code of\n*          INFO > 0.\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX array, dimension (2*N)\n*\n*  RWORK   (workspace) REAL array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is\n*                <= N:  D(i,i) is exactly zero.  The factorization\n*                       has been completed but the factor D is exactly\n*                       singular, so the solution and error bounds could\n*                       not be computed. RCOND = 0 is returned.\n*                = N+1: D is nonsingular, but RCOND is less than machine\n*                       precision, meaning that the matrix is singular\n*                       to working precision.  Nevertheless, the\n*                       solution and error bounds are computed because\n*                       there are a number of situations where the\n*                       computed solution can be more accurate than the\n*                       value of RCOND would suggest.\n*\n'),(80,'zspsvx_80.txt','      SUBROUTINE ZSPSVX( FACT, UPLO, N, NRHS, AP, AFP, IPIV, B, LDB, X,\n     $                   LDX, RCOND, FERR, BERR, WORK, RWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          FACT, UPLO\n      INTEGER            INFO, LDB, LDX, N, NRHS\n      DOUBLE PRECISION   RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      DOUBLE PRECISION   BERR( * ), FERR( * ), RWORK( * )\n      COMPLEX*16         AFP( * ), AP( * ), B( LDB, * ), WORK( * ),\n     $                   X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZSPSVX uses the diagonal pivoting factorization A = U*D*U**T or\n*  A = L*D*L**T to compute the solution to a complex system of linear\n*  equations A * X = B, where A is an N-by-N symmetric matrix stored\n*  in packed format and X and B are N-by-NRHS matrices.\n*\n*  Error bounds on the solution and a condition estimate are also\n*  provided.\n*\n*  Description\n*  ===========\n*\n*  The following steps are performed:\n*\n*  1. If FACT = \'N\', the diagonal pivoting method is used to factor A as\n*        A = U * D * U**T,  if UPLO = \'U\', or\n*        A = L * D * L**T,  if UPLO = \'L\',\n*     where U (or L) is a product of permutation and unit upper (lower)\n*     triangular matrices and D is symmetric and block diagonal with\n*     1-by-1 and 2-by-2 diagonal blocks.\n*\n*  2. If some D(i,i)=0, so that D is exactly singular, then the routine\n*     returns with INFO = i. Otherwise, the factored form of A is used\n*     to estimate the condition number of the matrix A.  If the\n*     reciprocal of the condition number is less than machine precision,\n*     INFO = N+1 is returned as a warning, but the routine still goes on\n*     to solve for X and compute error bounds as described below.\n*\n*  3. The system of equations is solved for X using the factored form\n*     of A.\n*\n*  4. Iterative refinement is applied to improve the computed solution\n*     matrix and calculate error bounds and backward error estimates\n*     for it.\n*\n*  Arguments\n*  =========\n*\n*  FACT    (input) CHARACTER*1\n*          Specifies whether or not the factored form of A has been\n*          supplied on entry.\n*          = \'F\':  On entry, AFP and IPIV contain the factored form\n*                  of A.  AP, AFP and IPIV will not be modified.\n*          = \'N\':  The matrix A will be copied to AFP and factored.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The number of linear equations, i.e., the order of the\n*          matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AP      (input) COMPLEX*16 array, dimension (N*(N+1)/2)\n*          The upper or lower triangle of the symmetric matrix A, packed\n*          columnwise in a linear array.  The j-th column of A is stored\n*          in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*          See below for further details.\n*\n*  AFP     (input or output) COMPLEX*16 array, dimension (N*(N+1)/2)\n*          If FACT = \'F\', then AFP is an input argument and on entry\n*          contains the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L from the factorization\n*          A = U*D*U**T or A = L*D*L**T as computed by ZSPTRF, stored as\n*          a packed triangular matrix in the same storage format as A.\n*\n*          If FACT = \'N\', then AFP is an output argument and on exit\n*          contains the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L from the factorization\n*          A = U*D*U**T or A = L*D*L**T as computed by ZSPTRF, stored as\n*          a packed triangular matrix in the same storage format as A.\n*\n*  IPIV    (input or output) INTEGER array, dimension (N)\n*          If FACT = \'F\', then IPIV is an input argument and on entry\n*          contains details of the interchanges and the block structure\n*          of D, as determined by ZSPTRF.\n*          If IPIV(k) > 0, then rows and columns k and IPIV(k) were\n*          interchanged and D(k,k) is a 1-by-1 diagonal block.\n*          If UPLO = \'U\' and IPIV(k) = IPIV(k-1) < 0, then rows and\n*          columns k-1 and -IPIV(k) were interchanged and D(k-1:k,k-1:k)\n*          is a 2-by-2 diagonal block.  If UPLO = \'L\' and IPIV(k) =\n*          IPIV(k+1) < 0, then rows and columns k+1 and -IPIV(k) were\n*          interchanged and D(k:k+1,k:k+1) is a 2-by-2 diagonal block.\n*\n*          If FACT = \'N\', then IPIV is an output argument and on exit\n*          contains details of the interchanges and the block structure\n*          of D, as determined by ZSPTRF.\n*\n*  B       (input) COMPLEX*16 array, dimension (LDB,NRHS)\n*          The N-by-NRHS right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (output) COMPLEX*16 array, dimension (LDX,NRHS)\n*          If INFO = 0 or INFO = N+1, the N-by-NRHS solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The estimate of the reciprocal condition number of the matrix\n*          A.  If RCOND is less than the machine precision (in\n*          particular, if RCOND = 0), the matrix is singular to working\n*          precision.  This condition is indicated by a return code of\n*          INFO > 0.\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is\n*                <= N:  D(i,i) is exactly zero.  The factorization\n*                       has been completed but the factor D is exactly\n*                       singular, so the solution and error bounds could\n*                       not be computed. RCOND = 0 is returned.\n*                = N+1: D is nonsingular, but RCOND is less than machine\n*                       precision, meaning that the matrix is singular\n*                       to working precision.  Nevertheless, the\n*                       solution and error bounds are computed because\n*                       there are a number of situations where the\n*                       computed solution can be more accurate than the\n*                       value of RCOND would suggest.\n*\n'),(81,'sgels_81.txt','      SUBROUTINE SGELS( TRANS, M, N, NRHS, A, LDA, B, LDB, WORK, LWORK,\n     $                  INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          TRANS\n      INTEGER            INFO, LDA, LDB, LWORK, M, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      REAL               A( LDA, * ), B( LDB, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SGELS solves overdetermined or underdetermined real linear systems\n*  involving an M-by-N matrix A, or its transpose, using a QR or LQ\n*  factorization of A.  It is assumed that A has full rank.\n*\n*  The following options are provided: \n*\n*  1. If TRANS = \'N\' and m >= n:  find the least squares solution of\n*     an overdetermined system, i.e., solve the least squares problem\n*                  minimize || B - A*X ||.\n*\n*  2. If TRANS = \'N\' and m < n:  find the minimum norm solution of\n*     an underdetermined system A * X = B.\n*\n*  3. If TRANS = \'T\' and m >= n:  find the minimum norm solution of\n*     an undetermined system A**T * X = B.\n*\n*  4. If TRANS = \'T\' and m < n:  find the least squares solution of\n*     an overdetermined system, i.e., solve the least squares problem\n*                  minimize || B - A**T * X ||.\n*\n*  Several right hand side vectors b and solution vectors x can be \n*  handled in a single call; they are stored as the columns of the\n*  M-by-NRHS right hand side matrix B and the N-by-NRHS solution \n*  matrix X.\n*\n*  Arguments\n*  =========\n*\n*  TRANS   (input) CHARACTER*1\n*          = \'N\': the linear system involves A;\n*          = \'T\': the linear system involves A**T. \n*\n*  M       (input) INTEGER\n*          The number of rows of the matrix A.  M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of\n*          columns of the matrices B and X. NRHS >=0.\n*\n*  A       (input/output) REAL array, dimension (LDA,N)\n*          On entry, the M-by-N matrix A.\n*          On exit,\n*            if M >= N, A is overwritten by details of its QR\n*                       factorization as returned by SGEQRF;\n*            if M <  N, A is overwritten by details of its LQ\n*                       factorization as returned by SGELQF.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,M).\n*\n*  B       (input/output) REAL array, dimension (LDB,NRHS)\n*          On entry, the matrix B of right hand side vectors, stored\n*          columnwise; B is M-by-NRHS if TRANS = \'N\', or N-by-NRHS\n*          if TRANS = \'T\'.  \n*          On exit, if INFO = 0, B is overwritten by the solution\n*          vectors, stored columnwise:\n*          if TRANS = \'N\' and m >= n, rows 1 to n of B contain the least\n*          squares solution vectors; the residual sum of squares for the\n*          solution in each column is given by the sum of squares of\n*          elements N+1 to M in that column;\n*          if TRANS = \'N\' and m < n, rows 1 to N of B contain the\n*          minimum norm solution vectors;\n*          if TRANS = \'T\' and m >= n, rows 1 to M of B contain the\n*          minimum norm solution vectors;\n*          if TRANS = \'T\' and m < n, rows 1 to M of B contain the\n*          least squares solution vectors; the residual sum of squares\n*          for the solution in each column is given by the sum of\n*          squares of elements M+1 to N in that column.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B. LDB >= MAX(1,M,N).\n*\n*  WORK    (workspace/output) REAL array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.\n*          LWORK >= max( 1, MN + max( MN, NRHS ) ).\n*          For optimal performance,\n*          LWORK >= max( 1, MN + max( MN, NRHS )*NB ).\n*          where MN = min(M,N) and NB is the optimum block size.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO =  i, the i-th diagonal element of the\n*                triangular factor of A is zero, so that A does not have\n*                full rank; the least squares solution could not be\n*                computed.\n*\n'),(82,'dgels_82.txt','      SUBROUTINE DGELS( TRANS, M, N, NRHS, A, LDA, B, LDB, WORK, LWORK,\n     $                  INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          TRANS\n      INTEGER            INFO, LDA, LDB, LWORK, M, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   A( LDA, * ), B( LDB, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DGELS solves overdetermined or underdetermined real linear systems\n*  involving an M-by-N matrix A, or its transpose, using a QR or LQ\n*  factorization of A.  It is assumed that A has full rank.\n*\n*  The following options are provided:\n*\n*  1. If TRANS = \'N\' and m >= n:  find the least squares solution of\n*     an overdetermined system, i.e., solve the least squares problem\n*                  minimize || B - A*X ||.\n*\n*  2. If TRANS = \'N\' and m < n:  find the minimum norm solution of\n*     an underdetermined system A * X = B.\n*\n*  3. If TRANS = \'T\' and m >= n:  find the minimum norm solution of\n*     an undetermined system A**T * X = B.\n*\n*  4. If TRANS = \'T\' and m < n:  find the least squares solution of\n*     an overdetermined system, i.e., solve the least squares problem\n*                  minimize || B - A**T * X ||.\n*\n*  Several right hand side vectors b and solution vectors x can be\n*  handled in a single call; they are stored as the columns of the\n*  M-by-NRHS right hand side matrix B and the N-by-NRHS solution\n*  matrix X.\n*\n*  Arguments\n*  =========\n*\n*  TRANS   (input) CHARACTER*1\n*          = \'N\': the linear system involves A;\n*          = \'T\': the linear system involves A**T.\n*\n*  M       (input) INTEGER\n*          The number of rows of the matrix A.  M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of\n*          columns of the matrices B and X. NRHS >=0.\n*\n*  A       (input/output) DOUBLE PRECISION array, dimension (LDA,N)\n*          On entry, the M-by-N matrix A.\n*          On exit,\n*            if M >= N, A is overwritten by details of its QR\n*                       factorization as returned by DGEQRF;\n*            if M <  N, A is overwritten by details of its LQ\n*                       factorization as returned by DGELQF.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,M).\n*\n*  B       (input/output) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          On entry, the matrix B of right hand side vectors, stored\n*          columnwise; B is M-by-NRHS if TRANS = \'N\', or N-by-NRHS\n*          if TRANS = \'T\'.\n*          On exit, if INFO = 0, B is overwritten by the solution\n*          vectors, stored columnwise:\n*          if TRANS = \'N\' and m >= n, rows 1 to n of B contain the least\n*          squares solution vectors; the residual sum of squares for the\n*          solution in each column is given by the sum of squares of\n*          elements N+1 to M in that column;\n*          if TRANS = \'N\' and m < n, rows 1 to N of B contain the\n*          minimum norm solution vectors;\n*          if TRANS = \'T\' and m >= n, rows 1 to M of B contain the\n*          minimum norm solution vectors;\n*          if TRANS = \'T\' and m < n, rows 1 to M of B contain the\n*          least squares solution vectors; the residual sum of squares\n*          for the solution in each column is given by the sum of\n*          squares of elements M+1 to N in that column.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B. LDB >= MAX(1,M,N).\n*\n*  WORK    (workspace/output) DOUBLE PRECISION array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.\n*          LWORK >= max( 1, MN + max( MN, NRHS ) ).\n*          For optimal performance,\n*          LWORK >= max( 1, MN + max( MN, NRHS )*NB ).\n*          where MN = min(M,N) and NB is the optimum block size.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO =  i, the i-th diagonal element of the\n*                triangular factor of A is zero, so that A does not have\n*                full rank; the least squares solution could not be\n*                computed.\n*\n'),(83,'cgels_83.txt','      SUBROUTINE CGELS( TRANS, M, N, NRHS, A, LDA, B, LDB, WORK, LWORK,\n     $                  INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          TRANS\n      INTEGER            INFO, LDA, LDB, LWORK, M, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      COMPLEX            A( LDA, * ), B( LDB, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CGELS solves overdetermined or underdetermined complex linear systems\n*  involving an M-by-N matrix A, or its conjugate-transpose, using a QR\n*  or LQ factorization of A.  It is assumed that A has full rank.\n*\n*  The following options are provided:\n*\n*  1. If TRANS = \'N\' and m >= n:  find the least squares solution of\n*     an overdetermined system, i.e., solve the least squares problem\n*                  minimize || B - A*X ||.\n*\n*  2. If TRANS = \'N\' and m < n:  find the minimum norm solution of\n*     an underdetermined system A * X = B.\n*\n*  3. If TRANS = \'C\' and m >= n:  find the minimum norm solution of\n*     an undetermined system A**H * X = B.\n*\n*  4. If TRANS = \'C\' and m < n:  find the least squares solution of\n*     an overdetermined system, i.e., solve the least squares problem\n*                  minimize || B - A**H * X ||.\n*\n*  Several right hand side vectors b and solution vectors x can be\n*  handled in a single call; they are stored as the columns of the\n*  M-by-NRHS right hand side matrix B and the N-by-NRHS solution\n*  matrix X.\n*\n*  Arguments\n*  =========\n*\n*  TRANS   (input) CHARACTER*1\n*          = \'N\': the linear system involves A;\n*          = \'C\': the linear system involves A**H.\n*\n*  M       (input) INTEGER\n*          The number of rows of the matrix A.  M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of\n*          columns of the matrices B and X. NRHS >= 0.\n*\n*  A       (input/output) COMPLEX array, dimension (LDA,N)\n*          On entry, the M-by-N matrix A.\n*            if M >= N, A is overwritten by details of its QR\n*                       factorization as returned by CGEQRF;\n*            if M <  N, A is overwritten by details of its LQ\n*                       factorization as returned by CGELQF.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,M).\n*\n*  B       (input/output) COMPLEX array, dimension (LDB,NRHS)\n*          On entry, the matrix B of right hand side vectors, stored\n*          columnwise; B is M-by-NRHS if TRANS = \'N\', or N-by-NRHS\n*          if TRANS = \'C\'.\n*          On exit, if INFO = 0, B is overwritten by the solution\n*          vectors, stored columnwise:\n*          if TRANS = \'N\' and m >= n, rows 1 to n of B contain the least\n*          squares solution vectors; the residual sum of squares for the\n*          solution in each column is given by the sum of squares of the\n*          modulus of elements N+1 to M in that column;\n*          if TRANS = \'N\' and m < n, rows 1 to N of B contain the\n*          minimum norm solution vectors;\n*          if TRANS = \'C\' and m >= n, rows 1 to M of B contain the\n*          minimum norm solution vectors;\n*          if TRANS = \'C\' and m < n, rows 1 to M of B contain the\n*          least squares solution vectors; the residual sum of squares\n*          for the solution in each column is given by the sum of\n*          squares of the modulus of elements M+1 to N in that column.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B. LDB >= MAX(1,M,N).\n*\n*  WORK    (workspace/output) COMPLEX array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.\n*          LWORK >= max( 1, MN + max( MN, NRHS ) ).\n*          For optimal performance,\n*          LWORK >= max( 1, MN + max( MN, NRHS )*NB ).\n*          where MN = min(M,N) and NB is the optimum block size.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO =  i, the i-th diagonal element of the\n*                triangular factor of A is zero, so that A does not have\n*                full rank; the least squares solution could not be\n*                computed.\n*\n'),(84,'zgels_84.txt','      SUBROUTINE ZGELS( TRANS, M, N, NRHS, A, LDA, B, LDB, WORK, LWORK,\n     $                  INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          TRANS\n      INTEGER            INFO, LDA, LDB, LWORK, M, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      COMPLEX*16         A( LDA, * ), B( LDB, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZGELS solves overdetermined or underdetermined complex linear systems\n*  involving an M-by-N matrix A, or its conjugate-transpose, using a QR\n*  or LQ factorization of A.  It is assumed that A has full rank.\n*\n*  The following options are provided:\n*\n*  1. If TRANS = \'N\' and m >= n:  find the least squares solution of\n*     an overdetermined system, i.e., solve the least squares problem\n*                  minimize || B - A*X ||.\n*\n*  2. If TRANS = \'N\' and m < n:  find the minimum norm solution of\n*     an underdetermined system A * X = B.\n*\n*  3. If TRANS = \'C\' and m >= n:  find the minimum norm solution of\n*     an undetermined system A**H * X = B.\n*\n*  4. If TRANS = \'C\' and m < n:  find the least squares solution of\n*     an overdetermined system, i.e., solve the least squares problem\n*                  minimize || B - A**H * X ||.\n*\n*  Several right hand side vectors b and solution vectors x can be\n*  handled in a single call; they are stored as the columns of the\n*  M-by-NRHS right hand side matrix B and the N-by-NRHS solution\n*  matrix X.\n*\n*  Arguments\n*  =========\n*\n*  TRANS   (input) CHARACTER*1\n*          = \'N\': the linear system involves A;\n*          = \'C\': the linear system involves A**H.\n*\n*  M       (input) INTEGER\n*          The number of rows of the matrix A.  M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of\n*          columns of the matrices B and X. NRHS >= 0.\n*\n*  A       (input/output) COMPLEX*16 array, dimension (LDA,N)\n*          On entry, the M-by-N matrix A.\n*            if M >= N, A is overwritten by details of its QR\n*                       factorization as returned by ZGEQRF;\n*            if M <  N, A is overwritten by details of its LQ\n*                       factorization as returned by ZGELQF.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,M).\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB,NRHS)\n*          On entry, the matrix B of right hand side vectors, stored\n*          columnwise; B is M-by-NRHS if TRANS = \'N\', or N-by-NRHS\n*          if TRANS = \'C\'.\n*          On exit, if INFO = 0, B is overwritten by the solution\n*          vectors, stored columnwise:\n*          if TRANS = \'N\' and m >= n, rows 1 to n of B contain the least\n*          squares solution vectors; the residual sum of squares for the\n*          solution in each column is given by the sum of squares of the\n*          modulus of elements N+1 to M in that column;\n*          if TRANS = \'N\' and m < n, rows 1 to N of B contain the\n*          minimum norm solution vectors;\n*          if TRANS = \'C\' and m >= n, rows 1 to M of B contain the\n*          minimum norm solution vectors;\n*          if TRANS = \'C\' and m < n, rows 1 to M of B contain the\n*          least squares solution vectors; the residual sum of squares\n*          for the solution in each column is given by the sum of\n*          squares of the modulus of elements M+1 to N in that column.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B. LDB >= MAX(1,M,N).\n*\n*  WORK    (workspace/output) COMPLEX*16 array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.\n*          LWORK >= max( 1, MN + max( MN, NRHS ) ).\n*          For optimal performance,\n*          LWORK >= max( 1, MN + max( MN, NRHS )*NB ).\n*          where MN = min(M,N) and NB is the optimum block size.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO =  i, the i-th diagonal element of the\n*                triangular factor of A is zero, so that A does not have\n*                full rank; the least squares solution could not be\n*                computed.\n*\n'),(85,'sgelsy_85.txt','      SUBROUTINE SGELSY( M, N, NRHS, A, LDA, B, LDB, JPVT, RCOND, RANK,\n     $                   WORK, LWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDA, LDB, LWORK, M, N, NRHS, RANK\n      REAL               RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            JPVT( * )\n      REAL               A( LDA, * ), B( LDB, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SGELSY computes the minimum-norm solution to a real linear least\n*  squares problem:\n*      minimize || A * X - B ||\n*  using a complete orthogonal factorization of A.  A is an M-by-N\n*  matrix which may be rank-deficient.\n*\n*  Several right hand side vectors b and solution vectors x can be\n*  handled in a single call; they are stored as the columns of the\n*  M-by-NRHS right hand side matrix B and the N-by-NRHS solution\n*  matrix X.\n*\n*  The routine first computes a QR factorization with column pivoting:\n*      A * P = Q * [ R11 R12 ]\n*                  [  0  R22 ]\n*  with R11 defined as the largest leading submatrix whose estimated\n*  condition number is less than 1/RCOND.  The order of R11, RANK,\n*  is the effective rank of A.\n*\n*  Then, R22 is considered to be negligible, and R12 is annihilated\n*  by orthogonal transformations from the right, arriving at the\n*  complete orthogonal factorization:\n*     A * P = Q * [ T11 0 ] * Z\n*                 [  0  0 ]\n*  The minimum-norm solution is then\n*     X = P * Z**T [ inv(T11)*Q1**T*B ]\n*                  [        0         ]\n*  where Q1 consists of the first RANK columns of Q.\n*\n*  This routine is basically identical to the original xGELSX except\n*  three differences:\n*    o The call to the subroutine xGEQPF has been substituted by the\n*      the call to the subroutine xGEQP3. This subroutine is a Blas-3\n*      version of the QR factorization with column pivoting.\n*    o Matrix B (the right hand side) is updated with Blas-3.\n*    o The permutation of matrix B (the right hand side) is faster and\n*      more simple.\n*\n*  Arguments\n*  =========\n*\n*  M       (input) INTEGER\n*          The number of rows of the matrix A.  M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of\n*          columns of matrices B and X. NRHS >= 0.\n*\n*  A       (input/output) REAL array, dimension (LDA,N)\n*          On entry, the M-by-N matrix A.\n*          On exit, A has been overwritten by details of its\n*          complete orthogonal factorization.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,M).\n*\n*  B       (input/output) REAL array, dimension (LDB,NRHS)\n*          On entry, the M-by-NRHS right hand side matrix B.\n*          On exit, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B. LDB >= max(1,M,N).\n*\n*  JPVT    (input/output) INTEGER array, dimension (N)\n*          On entry, if JPVT(i) .ne. 0, the i-th column of A is permuted\n*          to the front of AP, otherwise column i is a free column.\n*          On exit, if JPVT(i) = k, then the i-th column of AP\n*          was the k-th column of A.\n*\n*  RCOND   (input) REAL\n*          RCOND is used to determine the effective rank of A, which\n*          is defined as the order of the largest leading triangular\n*          submatrix R11 in the QR factorization with pivoting of A,\n*          whose estimated condition number < 1/RCOND.\n*\n*  RANK    (output) INTEGER\n*          The effective rank of A, i.e., the order of the submatrix\n*          R11.  This is the same as the order of the submatrix T11\n*          in the complete orthogonal factorization of A.\n*\n*  WORK    (workspace/output) REAL array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.\n*          The unblocked strategy requires that:\n*             LWORK >= MAX( MN+3*N+1, 2*MN+NRHS ),\n*          where MN = min( M, N ).\n*          The block algorithm requires that:\n*             LWORK >= MAX( MN+2*N+NB*(N+1), 2*MN+NB*NRHS ),\n*          where NB is an upper bound on the blocksize returned\n*          by ILAENV for the routines SGEQP3, STZRZF, STZRQF, SORMQR,\n*          and SORMRZ.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: If INFO = -i, the i-th argument had an illegal value.\n*\n'),(86,'dgelsy_86.txt','      SUBROUTINE DGELSY( M, N, NRHS, A, LDA, B, LDB, JPVT, RCOND, RANK,\n     $                   WORK, LWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDA, LDB, LWORK, M, N, NRHS, RANK\n      DOUBLE PRECISION   RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            JPVT( * )\n      DOUBLE PRECISION   A( LDA, * ), B( LDB, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DGELSY computes the minimum-norm solution to a real linear least\n*  squares problem:\n*      minimize || A * X - B ||\n*  using a complete orthogonal factorization of A.  A is an M-by-N\n*  matrix which may be rank-deficient.\n*\n*  Several right hand side vectors b and solution vectors x can be\n*  handled in a single call; they are stored as the columns of the\n*  M-by-NRHS right hand side matrix B and the N-by-NRHS solution\n*  matrix X.\n*\n*  The routine first computes a QR factorization with column pivoting:\n*      A * P = Q * [ R11 R12 ]\n*                  [  0  R22 ]\n*  with R11 defined as the largest leading submatrix whose estimated\n*  condition number is less than 1/RCOND.  The order of R11, RANK,\n*  is the effective rank of A.\n*\n*  Then, R22 is considered to be negligible, and R12 is annihilated\n*  by orthogonal transformations from the right, arriving at the\n*  complete orthogonal factorization:\n*     A * P = Q * [ T11 0 ] * Z\n*                 [  0  0 ]\n*  The minimum-norm solution is then\n*     X = P * Z**T [ inv(T11)*Q1**T*B ]\n*                  [        0         ]\n*  where Q1 consists of the first RANK columns of Q.\n*\n*  This routine is basically identical to the original xGELSX except\n*  three differences:\n*    o The call to the subroutine xGEQPF has been substituted by the\n*      the call to the subroutine xGEQP3. This subroutine is a Blas-3\n*      version of the QR factorization with column pivoting.\n*    o Matrix B (the right hand side) is updated with Blas-3.\n*    o The permutation of matrix B (the right hand side) is faster and\n*      more simple.\n*\n*  Arguments\n*  =========\n*\n*  M       (input) INTEGER\n*          The number of rows of the matrix A.  M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of\n*          columns of matrices B and X. NRHS >= 0.\n*\n*  A       (input/output) DOUBLE PRECISION array, dimension (LDA,N)\n*          On entry, the M-by-N matrix A.\n*          On exit, A has been overwritten by details of its\n*          complete orthogonal factorization.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,M).\n*\n*  B       (input/output) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          On entry, the M-by-NRHS right hand side matrix B.\n*          On exit, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B. LDB >= max(1,M,N).\n*\n*  JPVT    (input/output) INTEGER array, dimension (N)\n*          On entry, if JPVT(i) .ne. 0, the i-th column of A is permuted\n*          to the front of AP, otherwise column i is a free column.\n*          On exit, if JPVT(i) = k, then the i-th column of AP\n*          was the k-th column of A.\n*\n*  RCOND   (input) DOUBLE PRECISION\n*          RCOND is used to determine the effective rank of A, which\n*          is defined as the order of the largest leading triangular\n*          submatrix R11 in the QR factorization with pivoting of A,\n*          whose estimated condition number < 1/RCOND.\n*\n*  RANK    (output) INTEGER\n*          The effective rank of A, i.e., the order of the submatrix\n*          R11.  This is the same as the order of the submatrix T11\n*          in the complete orthogonal factorization of A.\n*\n*  WORK    (workspace/output) DOUBLE PRECISION array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.\n*          The unblocked strategy requires that:\n*             LWORK >= MAX( MN+3*N+1, 2*MN+NRHS ),\n*          where MN = min( M, N ).\n*          The block algorithm requires that:\n*             LWORK >= MAX( MN+2*N+NB*(N+1), 2*MN+NB*NRHS ),\n*          where NB is an upper bound on the blocksize returned\n*          by ILAENV for the routines DGEQP3, DTZRZF, STZRQF, DORMQR,\n*          and DORMRZ.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: If INFO = -i, the i-th argument had an illegal value.\n*\n'),(87,'cgelsy_87.txt','      SUBROUTINE CGELSY( M, N, NRHS, A, LDA, B, LDB, JPVT, RCOND, RANK,\n     $                   WORK, LWORK, RWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDA, LDB, LWORK, M, N, NRHS, RANK\n      REAL               RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            JPVT( * )\n      REAL               RWORK( * )\n      COMPLEX            A( LDA, * ), B( LDB, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CGELSY computes the minimum-norm solution to a complex linear least\n*  squares problem:\n*      minimize || A * X - B ||\n*  using a complete orthogonal factorization of A.  A is an M-by-N\n*  matrix which may be rank-deficient.\n*\n*  Several right hand side vectors b and solution vectors x can be\n*  handled in a single call; they are stored as the columns of the\n*  M-by-NRHS right hand side matrix B and the N-by-NRHS solution\n*  matrix X.\n*\n*  The routine first computes a QR factorization with column pivoting:\n*      A * P = Q * [ R11 R12 ]\n*                  [  0  R22 ]\n*  with R11 defined as the largest leading submatrix whose estimated\n*  condition number is less than 1/RCOND.  The order of R11, RANK,\n*  is the effective rank of A.\n*\n*  Then, R22 is considered to be negligible, and R12 is annihilated\n*  by unitary transformations from the right, arriving at the\n*  complete orthogonal factorization:\n*     A * P = Q * [ T11 0 ] * Z\n*                 [  0  0 ]\n*  The minimum-norm solution is then\n*     X = P * Z**H [ inv(T11)*Q1**H*B ]\n*                  [        0         ]\n*  where Q1 consists of the first RANK columns of Q.\n*\n*  This routine is basically identical to the original xGELSX except\n*  three differences:\n*    o The permutation of matrix B (the right hand side) is faster and\n*      more simple.\n*    o The call to the subroutine xGEQPF has been substituted by the\n*      the call to the subroutine xGEQP3. This subroutine is a Blas-3\n*      version of the QR factorization with column pivoting.\n*    o Matrix B (the right hand side) is updated with Blas-3.\n*\n*  Arguments\n*  =========\n*\n*  M       (input) INTEGER\n*          The number of rows of the matrix A.  M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of\n*          columns of matrices B and X. NRHS >= 0.\n*\n*  A       (input/output) COMPLEX array, dimension (LDA,N)\n*          On entry, the M-by-N matrix A.\n*          On exit, A has been overwritten by details of its\n*          complete orthogonal factorization.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,M).\n*\n*  B       (input/output) COMPLEX array, dimension (LDB,NRHS)\n*          On entry, the M-by-NRHS right hand side matrix B.\n*          On exit, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B. LDB >= max(1,M,N).\n*\n*  JPVT    (input/output) INTEGER array, dimension (N)\n*          On entry, if JPVT(i) .ne. 0, the i-th column of A is permuted\n*          to the front of AP, otherwise column i is a free column.\n*          On exit, if JPVT(i) = k, then the i-th column of A*P\n*          was the k-th column of A.\n*\n*  RCOND   (input) REAL\n*          RCOND is used to determine the effective rank of A, which\n*          is defined as the order of the largest leading triangular\n*          submatrix R11 in the QR factorization with pivoting of A,\n*          whose estimated condition number < 1/RCOND.\n*\n*  RANK    (output) INTEGER\n*          The effective rank of A, i.e., the order of the submatrix\n*          R11.  This is the same as the order of the submatrix T11\n*          in the complete orthogonal factorization of A.\n*\n*  WORK    (workspace/output) COMPLEX array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.\n*          The unblocked strategy requires that:\n*            LWORK >= MN + MAX( 2*MN, N+1, MN+NRHS )\n*          where MN = min(M,N).\n*          The block algorithm requires that:\n*            LWORK >= MN + MAX( 2*MN, NB*(N+1), MN+MN*NB, MN+NB*NRHS )\n*          where NB is an upper bound on the blocksize returned\n*          by ILAENV for the routines CGEQP3, CTZRZF, CTZRQF, CUNMQR,\n*          and CUNMRZ.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  RWORK   (workspace) REAL array, dimension (2*N)\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*\n'),(88,'zgelsy_88.txt','      SUBROUTINE ZGELSY( M, N, NRHS, A, LDA, B, LDB, JPVT, RCOND, RANK,\n     $                   WORK, LWORK, RWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDA, LDB, LWORK, M, N, NRHS, RANK\n      DOUBLE PRECISION   RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            JPVT( * )\n      DOUBLE PRECISION   RWORK( * )\n      COMPLEX*16         A( LDA, * ), B( LDB, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZGELSY computes the minimum-norm solution to a complex linear least\n*  squares problem:\n*      minimize || A * X - B ||\n*  using a complete orthogonal factorization of A.  A is an M-by-N\n*  matrix which may be rank-deficient.\n*\n*  Several right hand side vectors b and solution vectors x can be\n*  handled in a single call; they are stored as the columns of the\n*  M-by-NRHS right hand side matrix B and the N-by-NRHS solution\n*  matrix X.\n*\n*  The routine first computes a QR factorization with column pivoting:\n*      A * P = Q * [ R11 R12 ]\n*                  [  0  R22 ]\n*  with R11 defined as the largest leading submatrix whose estimated\n*  condition number is less than 1/RCOND.  The order of R11, RANK,\n*  is the effective rank of A.\n*\n*  Then, R22 is considered to be negligible, and R12 is annihilated\n*  by unitary transformations from the right, arriving at the\n*  complete orthogonal factorization:\n*     A * P = Q * [ T11 0 ] * Z\n*                 [  0  0 ]\n*  The minimum-norm solution is then\n*     X = P * Z**H [ inv(T11)*Q1**H*B ]\n*                  [        0         ]\n*  where Q1 consists of the first RANK columns of Q.\n*\n*  This routine is basically identical to the original xGELSX except\n*  three differences:\n*    o The permutation of matrix B (the right hand side) is faster and\n*      more simple.\n*    o The call to the subroutine xGEQPF has been substituted by the\n*      the call to the subroutine xGEQP3. This subroutine is a Blas-3\n*      version of the QR factorization with column pivoting.\n*    o Matrix B (the right hand side) is updated with Blas-3.\n*\n*  Arguments\n*  =========\n*\n*  M       (input) INTEGER\n*          The number of rows of the matrix A.  M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of\n*          columns of matrices B and X. NRHS >= 0.\n*\n*  A       (input/output) COMPLEX*16 array, dimension (LDA,N)\n*          On entry, the M-by-N matrix A.\n*          On exit, A has been overwritten by details of its\n*          complete orthogonal factorization.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,M).\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB,NRHS)\n*          On entry, the M-by-NRHS right hand side matrix B.\n*          On exit, the N-by-NRHS solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B. LDB >= max(1,M,N).\n*\n*  JPVT    (input/output) INTEGER array, dimension (N)\n*          On entry, if JPVT(i) .ne. 0, the i-th column of A is permuted\n*          to the front of AP, otherwise column i is a free column.\n*          On exit, if JPVT(i) = k, then the i-th column of A*P\n*          was the k-th column of A.\n*\n*  RCOND   (input) DOUBLE PRECISION\n*          RCOND is used to determine the effective rank of A, which\n*          is defined as the order of the largest leading triangular\n*          submatrix R11 in the QR factorization with pivoting of A,\n*          whose estimated condition number < 1/RCOND.\n*\n*  RANK    (output) INTEGER\n*          The effective rank of A, i.e., the order of the submatrix\n*          R11.  This is the same as the order of the submatrix T11\n*          in the complete orthogonal factorization of A.\n*\n*  WORK    (workspace/output) COMPLEX*16 array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.\n*          The unblocked strategy requires that:\n*            LWORK >= MN + MAX( 2*MN, N+1, MN+NRHS )\n*          where MN = min(M,N).\n*          The block algorithm requires that:\n*            LWORK >= MN + MAX( 2*MN, NB*(N+1), MN+MN*NB, MN+NB*NRHS )\n*          where NB is an upper bound on the blocksize returned\n*          by ILAENV for the routines ZGEQP3, ZTZRZF, CTZRQF, ZUNMQR,\n*          and ZUNMRZ.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (2*N)\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*\n'),(89,'sgelsd_89.txt','      SUBROUTINE SGELSD( M, N, NRHS, A, LDA, B, LDB, S, RCOND,\n     $                   RANK, WORK, LWORK, IWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDA, LDB, LWORK, M, N, NRHS, RANK\n      REAL               RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      REAL               A( LDA, * ), B( LDB, * ), S( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SGELSD computes the minimum-norm solution to a real linear least\n*  squares problem:\n*      minimize 2-norm(| b - A*x |)\n*  using the singular value decomposition (SVD) of A. A is an M-by-N\n*  matrix which may be rank-deficient.\n*\n*  Several right hand side vectors b and solution vectors x can be\n*  handled in a single call; they are stored as the columns of the\n*  M-by-NRHS right hand side matrix B and the N-by-NRHS solution\n*  matrix X.\n*\n*  The problem is solved in three steps:\n*  (1) Reduce the coefficient matrix A to bidiagonal form with\n*      Householder transformations, reducing the original problem\n*      into a \"bidiagonal least squares problem\" (BLS)\n*  (2) Solve the BLS using a divide and conquer approach.\n*  (3) Apply back all the Householder tranformations to solve\n*      the original least squares problem.\n*\n*  The effective rank of A is determined by treating as zero those\n*  singular values which are less than RCOND times the largest singular\n*  value.\n*\n*  The divide and conquer algorithm makes very mild assumptions about\n*  floating point arithmetic. It will work on machines with a guard\n*  digit in add/subtract, or on those binary machines without guard\n*  digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\n*  Cray-2. It could conceivably fail on hexadecimal or decimal machines\n*  without guard digits, but we know of none.\n*\n*  Arguments\n*  =========\n*\n*  M       (input) INTEGER\n*          The number of rows of A. M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of A. N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X. NRHS >= 0.\n*\n*  A       (input) REAL array, dimension (LDA,N)\n*          On entry, the M-by-N matrix A.\n*          On exit, A has been destroyed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,M).\n*\n*  B       (input/output) REAL array, dimension (LDB,NRHS)\n*          On entry, the M-by-NRHS right hand side matrix B.\n*          On exit, B is overwritten by the N-by-NRHS solution\n*          matrix X.  If m >= n and RANK = n, the residual\n*          sum-of-squares for the solution in the i-th column is given\n*          by the sum of squares of elements n+1:m in that column.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B. LDB >= max(1,max(M,N)).\n*\n*  S       (output) REAL array, dimension (min(M,N))\n*          The singular values of A in decreasing order.\n*          The condition number of A in the 2-norm = S(1)/S(min(m,n)).\n*\n*  RCOND   (input) REAL\n*          RCOND is used to determine the effective rank of A.\n*          Singular values S(i) <= RCOND*S(1) are treated as zero.\n*          If RCOND < 0, machine precision is used instead.\n*\n*  RANK    (output) INTEGER\n*          The effective rank of A, i.e., the number of singular values\n*          which are greater than RCOND*S(1).\n*\n*  WORK    (workspace/output) REAL array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK. LWORK must be at least 1.\n*          The exact minimum amount of workspace needed depends on M,\n*          N and NRHS. As long as LWORK is at least\n*              12*N + 2*N*SMLSIZ + 8*N*NLVL + N*NRHS + (SMLSIZ+1)**2,\n*          if M is greater than or equal to N or\n*              12*M + 2*M*SMLSIZ + 8*M*NLVL + M*NRHS + (SMLSIZ+1)**2,\n*          if M is less than N, the code will execute correctly.\n*          SMLSIZ is returned by ILAENV and is equal to the maximum\n*          size of the subproblems at the bottom of the computation\n*          tree (usually about 25), and\n*             NLVL = MAX( 0, INT( LOG_2( MIN( M,N )/(SMLSIZ+1) ) ) + 1 )\n*          For good performance, LWORK should generally be larger.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the array WORK and the\n*          minimum size of the array IWORK, and returns these values as\n*          the first entries of the WORK and IWORK arrays, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  IWORK   (workspace) INTEGER array, dimension (MAX(1,LIWORK))\n*          LIWORK >= max(1, 3*MINMN*NLVL + 11*MINMN),\n*          where MINMN = MIN( M,N ).\n*          On exit, if INFO = 0, IWORK(1) returns the minimum LIWORK.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  the algorithm for computing the SVD failed to converge;\n*                if INFO = i, i off-diagonal elements of an intermediate\n*                bidiagonal form did not converge to zero.\n*\n'),(90,'dgelsd_90.txt','      SUBROUTINE DGELSD( M, N, NRHS, A, LDA, B, LDB, S, RCOND, RANK,\n     $                   WORK, LWORK, IWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     June 2010\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDA, LDB, LWORK, M, N, NRHS, RANK\n      DOUBLE PRECISION   RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      DOUBLE PRECISION   A( LDA, * ), B( LDB, * ), S( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DGELSD computes the minimum-norm solution to a real linear least\n*  squares problem:\n*      minimize 2-norm(| b - A*x |)\n*  using the singular value decomposition (SVD) of A. A is an M-by-N\n*  matrix which may be rank-deficient.\n*\n*  Several right hand side vectors b and solution vectors x can be\n*  handled in a single call; they are stored as the columns of the\n*  M-by-NRHS right hand side matrix B and the N-by-NRHS solution\n*  matrix X.\n*\n*  The problem is solved in three steps:\n*  (1) Reduce the coefficient matrix A to bidiagonal form with\n*      Householder transformations, reducing the original problem\n*      into a \"bidiagonal least squares problem\" (BLS)\n*  (2) Solve the BLS using a divide and conquer approach.\n*  (3) Apply back all the Householder tranformations to solve\n*      the original least squares problem.\n*\n*  The effective rank of A is determined by treating as zero those\n*  singular values which are less than RCOND times the largest singular\n*  value.\n*\n*  The divide and conquer algorithm makes very mild assumptions about\n*  floating point arithmetic. It will work on machines with a guard\n*  digit in add/subtract, or on those binary machines without guard\n*  digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\n*  Cray-2. It could conceivably fail on hexadecimal or decimal machines\n*  without guard digits, but we know of none.\n*\n*  Arguments\n*  =========\n*\n*  M       (input) INTEGER\n*          The number of rows of A. M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of A. N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X. NRHS >= 0.\n*\n*  A       (input) DOUBLE PRECISION array, dimension (LDA,N)\n*          On entry, the M-by-N matrix A.\n*          On exit, A has been destroyed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,M).\n*\n*  B       (input/output) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          On entry, the M-by-NRHS right hand side matrix B.\n*          On exit, B is overwritten by the N-by-NRHS solution\n*          matrix X.  If m >= n and RANK = n, the residual\n*          sum-of-squares for the solution in the i-th column is given\n*          by the sum of squares of elements n+1:m in that column.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B. LDB >= max(1,max(M,N)).\n*\n*  S       (output) DOUBLE PRECISION array, dimension (min(M,N))\n*          The singular values of A in decreasing order.\n*          The condition number of A in the 2-norm = S(1)/S(min(m,n)).\n*\n*  RCOND   (input) DOUBLE PRECISION\n*          RCOND is used to determine the effective rank of A.\n*          Singular values S(i) <= RCOND*S(1) are treated as zero.\n*          If RCOND < 0, machine precision is used instead.\n*\n*  RANK    (output) INTEGER\n*          The effective rank of A, i.e., the number of singular values\n*          which are greater than RCOND*S(1).\n*\n*  WORK    (workspace/output) DOUBLE PRECISION array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK. LWORK must be at least 1.\n*          The exact minimum amount of workspace needed depends on M,\n*          N and NRHS. As long as LWORK is at least\n*              12*N + 2*N*SMLSIZ + 8*N*NLVL + N*NRHS + (SMLSIZ+1)**2,\n*          if M is greater than or equal to N or\n*              12*M + 2*M*SMLSIZ + 8*M*NLVL + M*NRHS + (SMLSIZ+1)**2,\n*          if M is less than N, the code will execute correctly.\n*          SMLSIZ is returned by ILAENV and is equal to the maximum\n*          size of the subproblems at the bottom of the computation\n*          tree (usually about 25), and\n*             NLVL = MAX( 0, INT( LOG_2( MIN( M,N )/(SMLSIZ+1) ) ) + 1 )\n*          For good performance, LWORK should generally be larger.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  IWORK   (workspace) INTEGER array, dimension (MAX(1,LIWORK))\n*          LIWORK >= max(1, 3 * MINMN * NLVL + 11 * MINMN),\n*          where MINMN = MIN( M,N ).\n*          On exit, if INFO = 0, IWORK(1) returns the minimum LIWORK.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  the algorithm for computing the SVD failed to converge;\n*                if INFO = i, i off-diagonal elements of an intermediate\n*                bidiagonal form did not converge to zero.\n*\n'),(91,'cgelsd_91.txt','      SUBROUTINE CGELSD( M, N, NRHS, A, LDA, B, LDB, S, RCOND, RANK,\n     $                   WORK, LWORK, RWORK, IWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDA, LDB, LWORK, M, N, NRHS, RANK\n      REAL               RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      REAL               RWORK( * ), S( * )\n      COMPLEX            A( LDA, * ), B( LDB, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CGELSD computes the minimum-norm solution to a real linear least\n*  squares problem:\n*      minimize 2-norm(| b - A*x |)\n*  using the singular value decomposition (SVD) of A. A is an M-by-N\n*  matrix which may be rank-deficient.\n*\n*  Several right hand side vectors b and solution vectors x can be\n*  handled in a single call; they are stored as the columns of the\n*  M-by-NRHS right hand side matrix B and the N-by-NRHS solution\n*  matrix X.\n*\n*  The problem is solved in three steps:\n*  (1) Reduce the coefficient matrix A to bidiagonal form with\n*      Householder tranformations, reducing the original problem\n*      into a \"bidiagonal least squares problem\" (BLS)\n*  (2) Solve the BLS using a divide and conquer approach.\n*  (3) Apply back all the Householder tranformations to solve\n*      the original least squares problem.\n*\n*  The effective rank of A is determined by treating as zero those\n*  singular values which are less than RCOND times the largest singular\n*  value.\n*\n*  The divide and conquer algorithm makes very mild assumptions about\n*  floating point arithmetic. It will work on machines with a guard\n*  digit in add/subtract, or on those binary machines without guard\n*  digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\n*  Cray-2. It could conceivably fail on hexadecimal or decimal machines\n*  without guard digits, but we know of none.\n*\n*  Arguments\n*  =========\n*\n*  M       (input) INTEGER\n*          The number of rows of the matrix A. M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the matrix A. N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X. NRHS >= 0.\n*\n*  A       (input/output) COMPLEX array, dimension (LDA,N)\n*          On entry, the M-by-N matrix A.\n*          On exit, A has been destroyed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A. LDA >= max(1,M).\n*\n*  B       (input/output) COMPLEX array, dimension (LDB,NRHS)\n*          On entry, the M-by-NRHS right hand side matrix B.\n*          On exit, B is overwritten by the N-by-NRHS solution matrix X.\n*          If m >= n and RANK = n, the residual sum-of-squares for\n*          the solution in the i-th column is given by the sum of\n*          squares of the modulus of elements n+1:m in that column.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,M,N).\n*\n*  S       (output) REAL array, dimension (min(M,N))\n*          The singular values of A in decreasing order.\n*          The condition number of A in the 2-norm = S(1)/S(min(m,n)).\n*\n*  RCOND   (input) REAL\n*          RCOND is used to determine the effective rank of A.\n*          Singular values S(i) <= RCOND*S(1) are treated as zero.\n*          If RCOND < 0, machine precision is used instead.\n*\n*  RANK    (output) INTEGER\n*          The effective rank of A, i.e., the number of singular values\n*          which are greater than RCOND*S(1).\n*\n*  WORK    (workspace/output) COMPLEX array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK. LWORK must be at least 1.\n*          The exact minimum amount of workspace needed depends on M,\n*          N and NRHS. As long as LWORK is at least\n*              2 * N + N * NRHS\n*          if M is greater than or equal to N or\n*              2 * M + M * NRHS\n*          if M is less than N, the code will execute correctly.\n*          For good performance, LWORK should generally be larger.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the array WORK and the\n*          minimum sizes of the arrays RWORK and IWORK, and returns\n*          these values as the first entries of the WORK, RWORK and\n*          IWORK arrays, and no error message related to LWORK is issued\n*          by XERBLA.\n*\n*  RWORK   (workspace) REAL array, dimension (MAX(1,LRWORK))\n*          LRWORK >=\n*             10*N + 2*N*SMLSIZ + 8*N*NLVL + 3*SMLSIZ*NRHS +\n*             MAX( (SMLSIZ+1)**2, N*(1+NRHS) + 2*NRHS )\n*          if M is greater than or equal to N or\n*             10*M + 2*M*SMLSIZ + 8*M*NLVL + 3*SMLSIZ*NRHS +\n*             MAX( (SMLSIZ+1)**2, N*(1+NRHS) + 2*NRHS )\n*          if M is less than N, the code will execute correctly.\n*          SMLSIZ is returned by ILAENV and is equal to the maximum\n*          size of the subproblems at the bottom of the computation\n*          tree (usually about 25), and\n*             NLVL = MAX( 0, INT( LOG_2( MIN( M,N )/(SMLSIZ+1) ) ) + 1 )\n*          On exit, if INFO = 0, RWORK(1) returns the minimum LRWORK.\n*\n*  IWORK   (workspace) INTEGER array, dimension (MAX(1,LIWORK))\n*          LIWORK >= max(1, 3*MINMN*NLVL + 11*MINMN),\n*          where MINMN = MIN( M,N ).\n*          On exit, if INFO = 0, IWORK(1) returns the minimum LIWORK.\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  the algorithm for computing the SVD failed to converge;\n*                if INFO = i, i off-diagonal elements of an intermediate\n*                bidiagonal form did not converge to zero.\n*\n'),(92,'zgelsd_92.txt','      SUBROUTINE ZGELSD( M, N, NRHS, A, LDA, B, LDB, S, RCOND, RANK,\n     $                   WORK, LWORK, RWORK, IWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDA, LDB, LWORK, M, N, NRHS, RANK\n      DOUBLE PRECISION   RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      DOUBLE PRECISION   RWORK( * ), S( * )\n      COMPLEX*16         A( LDA, * ), B( LDB, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZGELSD computes the minimum-norm solution to a real linear least\n*  squares problem:\n*      minimize 2-norm(| b - A*x |)\n*  using the singular value decomposition (SVD) of A. A is an M-by-N\n*  matrix which may be rank-deficient.\n*\n*  Several right hand side vectors b and solution vectors x can be\n*  handled in a single call; they are stored as the columns of the\n*  M-by-NRHS right hand side matrix B and the N-by-NRHS solution\n*  matrix X.\n*\n*  The problem is solved in three steps:\n*  (1) Reduce the coefficient matrix A to bidiagonal form with\n*      Householder tranformations, reducing the original problem\n*      into a \"bidiagonal least squares problem\" (BLS)\n*  (2) Solve the BLS using a divide and conquer approach.\n*  (3) Apply back all the Householder tranformations to solve\n*      the original least squares problem.\n*\n*  The effective rank of A is determined by treating as zero those\n*  singular values which are less than RCOND times the largest singular\n*  value.\n*\n*  The divide and conquer algorithm makes very mild assumptions about\n*  floating point arithmetic. It will work on machines with a guard\n*  digit in add/subtract, or on those binary machines without guard\n*  digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\n*  Cray-2. It could conceivably fail on hexadecimal or decimal machines\n*  without guard digits, but we know of none.\n*\n*  Arguments\n*  =========\n*\n*  M       (input) INTEGER\n*          The number of rows of the matrix A. M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the matrix A. N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X. NRHS >= 0.\n*\n*  A       (input) COMPLEX*16 array, dimension (LDA,N)\n*          On entry, the M-by-N matrix A.\n*          On exit, A has been destroyed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A. LDA >= max(1,M).\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB,NRHS)\n*          On entry, the M-by-NRHS right hand side matrix B.\n*          On exit, B is overwritten by the N-by-NRHS solution matrix X.\n*          If m >= n and RANK = n, the residual sum-of-squares for\n*          the solution in the i-th column is given by the sum of\n*          squares of the modulus of elements n+1:m in that column.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,M,N).\n*\n*  S       (output) DOUBLE PRECISION array, dimension (min(M,N))\n*          The singular values of A in decreasing order.\n*          The condition number of A in the 2-norm = S(1)/S(min(m,n)).\n*\n*  RCOND   (input) DOUBLE PRECISION\n*          RCOND is used to determine the effective rank of A.\n*          Singular values S(i) <= RCOND*S(1) are treated as zero.\n*          If RCOND < 0, machine precision is used instead.\n*\n*  RANK    (output) INTEGER\n*          The effective rank of A, i.e., the number of singular values\n*          which are greater than RCOND*S(1).\n*\n*  WORK    (workspace/output) COMPLEX*16 array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK. LWORK must be at least 1.\n*          The exact minimum amount of workspace needed depends on M,\n*          N and NRHS. As long as LWORK is at least\n*              2*N + N*NRHS\n*          if M is greater than or equal to N or\n*              2*M + M*NRHS\n*          if M is less than N, the code will execute correctly.\n*          For good performance, LWORK should generally be larger.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the array WORK and the\n*          minimum sizes of the arrays RWORK and IWORK, and returns\n*          these values as the first entries of the WORK, RWORK and\n*          IWORK arrays, and no error message related to LWORK is issued\n*          by XERBLA.\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (MAX(1,LRWORK))\n*          LRWORK >=\n*             10*N + 2*N*SMLSIZ + 8*N*NLVL + 3*SMLSIZ*NRHS +\n*             MAX( (SMLSIZ+1)**2, N*(1+NRHS) + 2*NRHS )\n*          if M is greater than or equal to N or\n*             10*M + 2*M*SMLSIZ + 8*M*NLVL + 3*SMLSIZ*NRHS +\n*             MAX( (SMLSIZ+1)**2, N*(1+NRHS) + 2*NRHS )\n*          if M is less than N, the code will execute correctly.\n*          SMLSIZ is returned by ILAENV and is equal to the maximum\n*          size of the subproblems at the bottom of the computation\n*          tree (usually about 25), and\n*             NLVL = MAX( 0, INT( LOG_2( MIN( M,N )/(SMLSIZ+1) ) ) + 1 )\n*          On exit, if INFO = 0, RWORK(1) returns the minimum LRWORK.\n*\n*  IWORK   (workspace) INTEGER array, dimension (MAX(1,LIWORK))\n*          LIWORK >= max(1, 3*MINMN*NLVL + 11*MINMN),\n*          where MINMN = MIN( M,N ).\n*          On exit, if INFO = 0, IWORK(1) returns the minimum LIWORK.\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  the algorithm for computing the SVD failed to converge;\n*                if INFO = i, i off-diagonal elements of an intermediate\n*                bidiagonal form did not converge to zero.\n*\n'),(93,'sgelss_93.txt','      SUBROUTINE SGELSS( M, N, NRHS, A, LDA, B, LDB, S, RCOND, RANK,\n     $                   WORK, LWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDA, LDB, LWORK, M, N, NRHS, RANK\n      REAL               RCOND\n*     ..\n*     .. Array Arguments ..\n      REAL               A( LDA, * ), B( LDB, * ), S( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SGELSS computes the minimum norm solution to a real linear least\n*  squares problem:\n*\n*  Minimize 2-norm(| b - A*x |).\n*\n*  using the singular value decomposition (SVD) of A. A is an M-by-N\n*  matrix which may be rank-deficient.\n*\n*  Several right hand side vectors b and solution vectors x can be\n*  handled in a single call; they are stored as the columns of the\n*  M-by-NRHS right hand side matrix B and the N-by-NRHS solution matrix\n*  X.\n*\n*  The effective rank of A is determined by treating as zero those\n*  singular values which are less than RCOND times the largest singular\n*  value.\n*\n*  Arguments\n*  =========\n*\n*  M       (input) INTEGER\n*          The number of rows of the matrix A. M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the matrix A. N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X. NRHS >= 0.\n*\n*  A       (input/output) REAL array, dimension (LDA,N)\n*          On entry, the M-by-N matrix A.\n*          On exit, the first min(m,n) rows of A are overwritten with\n*          its right singular vectors, stored rowwise.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,M).\n*\n*  B       (input/output) REAL array, dimension (LDB,NRHS)\n*          On entry, the M-by-NRHS right hand side matrix B.\n*          On exit, B is overwritten by the N-by-NRHS solution\n*          matrix X.  If m >= n and RANK = n, the residual\n*          sum-of-squares for the solution in the i-th column is given\n*          by the sum of squares of elements n+1:m in that column.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B. LDB >= max(1,max(M,N)).\n*\n*  S       (output) REAL array, dimension (min(M,N))\n*          The singular values of A in decreasing order.\n*          The condition number of A in the 2-norm = S(1)/S(min(m,n)).\n*\n*  RCOND   (input) REAL\n*          RCOND is used to determine the effective rank of A.\n*          Singular values S(i) <= RCOND*S(1) are treated as zero.\n*          If RCOND < 0, machine precision is used instead.\n*\n*  RANK    (output) INTEGER\n*          The effective rank of A, i.e., the number of singular values\n*          which are greater than RCOND*S(1).\n*\n*  WORK    (workspace/output) REAL array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK. LWORK >= 1, and also:\n*          LWORK >= 3*min(M,N) + max( 2*min(M,N), max(M,N), NRHS )\n*          For good performance, LWORK should generally be larger.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  the algorithm for computing the SVD failed to converge;\n*                if INFO = i, i off-diagonal elements of an intermediate\n*                bidiagonal form did not converge to zero.\n*\n'),(94,'dgelss_94.txt','      SUBROUTINE DGELSS( M, N, NRHS, A, LDA, B, LDB, S, RCOND, RANK,\n     $                   WORK, LWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     June 2010\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDA, LDB, LWORK, M, N, NRHS, RANK\n      DOUBLE PRECISION   RCOND\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   A( LDA, * ), B( LDB, * ), S( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DGELSS computes the minimum norm solution to a real linear least\n*  squares problem:\n*\n*  Minimize 2-norm(| b - A*x |).\n*\n*  using the singular value decomposition (SVD) of A. A is an M-by-N\n*  matrix which may be rank-deficient.\n*\n*  Several right hand side vectors b and solution vectors x can be\n*  handled in a single call; they are stored as the columns of the\n*  M-by-NRHS right hand side matrix B and the N-by-NRHS solution matrix\n*  X.\n*\n*  The effective rank of A is determined by treating as zero those\n*  singular values which are less than RCOND times the largest singular\n*  value.\n*\n*  Arguments\n*  =========\n*\n*  M       (input) INTEGER\n*          The number of rows of the matrix A. M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the matrix A. N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X. NRHS >= 0.\n*\n*  A       (input/output) DOUBLE PRECISION array, dimension (LDA,N)\n*          On entry, the M-by-N matrix A.\n*          On exit, the first min(m,n) rows of A are overwritten with\n*          its right singular vectors, stored rowwise.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,M).\n*\n*  B       (input/output) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          On entry, the M-by-NRHS right hand side matrix B.\n*          On exit, B is overwritten by the N-by-NRHS solution\n*          matrix X.  If m >= n and RANK = n, the residual\n*          sum-of-squares for the solution in the i-th column is given\n*          by the sum of squares of elements n+1:m in that column.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B. LDB >= max(1,max(M,N)).\n*\n*  S       (output) DOUBLE PRECISION array, dimension (min(M,N))\n*          The singular values of A in decreasing order.\n*          The condition number of A in the 2-norm = S(1)/S(min(m,n)).\n*\n*  RCOND   (input) DOUBLE PRECISION\n*          RCOND is used to determine the effective rank of A.\n*          Singular values S(i) <= RCOND*S(1) are treated as zero.\n*          If RCOND < 0, machine precision is used instead.\n*\n*  RANK    (output) INTEGER\n*          The effective rank of A, i.e., the number of singular values\n*          which are greater than RCOND*S(1).\n*\n*  WORK    (workspace/output) DOUBLE PRECISION array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK. LWORK >= 1, and also:\n*          LWORK >= 3*min(M,N) + max( 2*min(M,N), max(M,N), NRHS )\n*          For good performance, LWORK should generally be larger.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  the algorithm for computing the SVD failed to converge;\n*                if INFO = i, i off-diagonal elements of an intermediate\n*                bidiagonal form did not converge to zero.\n*\n'),(95,'cgelss_95.txt','      SUBROUTINE CGELSS( M, N, NRHS, A, LDA, B, LDB, S, RCOND, RANK,\n     $                   WORK, LWORK, RWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDA, LDB, LWORK, M, N, NRHS, RANK\n      REAL               RCOND\n*     ..\n*     .. Array Arguments ..\n      REAL               RWORK( * ), S( * )\n      COMPLEX            A( LDA, * ), B( LDB, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CGELSS computes the minimum norm solution to a complex linear\n*  least squares problem:\n*\n*  Minimize 2-norm(| b - A*x |).\n*\n*  using the singular value decomposition (SVD) of A. A is an M-by-N\n*  matrix which may be rank-deficient.\n*\n*  Several right hand side vectors b and solution vectors x can be\n*  handled in a single call; they are stored as the columns of the\n*  M-by-NRHS right hand side matrix B and the N-by-NRHS solution matrix\n*  X.\n*\n*  The effective rank of A is determined by treating as zero those\n*  singular values which are less than RCOND times the largest singular\n*  value.\n*\n*  Arguments\n*  =========\n*\n*  M       (input) INTEGER\n*          The number of rows of the matrix A. M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the matrix A. N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X. NRHS >= 0.\n*\n*  A       (input/output) COMPLEX array, dimension (LDA,N)\n*          On entry, the M-by-N matrix A.\n*          On exit, the first min(m,n) rows of A are overwritten with\n*          its right singular vectors, stored rowwise.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A. LDA >= max(1,M).\n*\n*  B       (input/output) COMPLEX array, dimension (LDB,NRHS)\n*          On entry, the M-by-NRHS right hand side matrix B.\n*          On exit, B is overwritten by the N-by-NRHS solution matrix X.\n*          If m >= n and RANK = n, the residual sum-of-squares for\n*          the solution in the i-th column is given by the sum of\n*          squares of the modulus of elements n+1:m in that column.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,M,N).\n*\n*  S       (output) REAL array, dimension (min(M,N))\n*          The singular values of A in decreasing order.\n*          The condition number of A in the 2-norm = S(1)/S(min(m,n)).\n*\n*  RCOND   (input) REAL\n*          RCOND is used to determine the effective rank of A.\n*          Singular values S(i) <= RCOND*S(1) are treated as zero.\n*          If RCOND < 0, machine precision is used instead.\n*\n*  RANK    (output) INTEGER\n*          The effective rank of A, i.e., the number of singular values\n*          which are greater than RCOND*S(1).\n*\n*  WORK    (workspace/output) COMPLEX array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK. LWORK >= 1, and also:\n*          LWORK >=  2*min(M,N) + max(M,N,NRHS)\n*          For good performance, LWORK should generally be larger.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  RWORK   (workspace) REAL array, dimension (5*min(M,N))\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  the algorithm for computing the SVD failed to converge;\n*                if INFO = i, i off-diagonal elements of an intermediate\n*                bidiagonal form did not converge to zero.\n*\n'),(96,'zgelss_96.txt','      SUBROUTINE ZGELSS( M, N, NRHS, A, LDA, B, LDB, S, RCOND, RANK,\n     $                   WORK, LWORK, RWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDA, LDB, LWORK, M, N, NRHS, RANK\n      DOUBLE PRECISION   RCOND\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   RWORK( * ), S( * )\n      COMPLEX*16         A( LDA, * ), B( LDB, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZGELSS computes the minimum norm solution to a complex linear\n*  least squares problem:\n*\n*  Minimize 2-norm(| b - A*x |).\n*\n*  using the singular value decomposition (SVD) of A. A is an M-by-N\n*  matrix which may be rank-deficient.\n*\n*  Several right hand side vectors b and solution vectors x can be\n*  handled in a single call; they are stored as the columns of the\n*  M-by-NRHS right hand side matrix B and the N-by-NRHS solution matrix\n*  X.\n*\n*  The effective rank of A is determined by treating as zero those\n*  singular values which are less than RCOND times the largest singular\n*  value.\n*\n*  Arguments\n*  =========\n*\n*  M       (input) INTEGER\n*          The number of rows of the matrix A. M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the matrix A. N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X. NRHS >= 0.\n*\n*  A       (input/output) COMPLEX*16 array, dimension (LDA,N)\n*          On entry, the M-by-N matrix A.\n*          On exit, the first min(m,n) rows of A are overwritten with\n*          its right singular vectors, stored rowwise.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A. LDA >= max(1,M).\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB,NRHS)\n*          On entry, the M-by-NRHS right hand side matrix B.\n*          On exit, B is overwritten by the N-by-NRHS solution matrix X.\n*          If m >= n and RANK = n, the residual sum-of-squares for\n*          the solution in the i-th column is given by the sum of\n*          squares of the modulus of elements n+1:m in that column.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,M,N).\n*\n*  S       (output) DOUBLE PRECISION array, dimension (min(M,N))\n*          The singular values of A in decreasing order.\n*          The condition number of A in the 2-norm = S(1)/S(min(m,n)).\n*\n*  RCOND   (input) DOUBLE PRECISION\n*          RCOND is used to determine the effective rank of A.\n*          Singular values S(i) <= RCOND*S(1) are treated as zero.\n*          If RCOND < 0, machine precision is used instead.\n*\n*  RANK    (output) INTEGER\n*          The effective rank of A, i.e., the number of singular values\n*          which are greater than RCOND*S(1).\n*\n*  WORK    (workspace/output) COMPLEX*16 array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK. LWORK >= 1, and also:\n*          LWORK >=  2*min(M,N) + max(M,N,NRHS)\n*          For good performance, LWORK should generally be larger.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (5*min(M,N))\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  the algorithm for computing the SVD failed to converge;\n*                if INFO = i, i off-diagonal elements of an intermediate\n*                bidiagonal form did not converge to zero.\n*\n'),(97,'sgglse_97.txt','      SUBROUTINE SGGLSE( M, N, P, A, LDA, B, LDB, C, D, X, WORK, LWORK,\n     $                   INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDA, LDB, LWORK, M, N, P\n*     ..\n*     .. Array Arguments ..\n      REAL               A( LDA, * ), B( LDB, * ), C( * ), D( * ),\n     $                   WORK( * ), X( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SGGLSE solves the linear equality-constrained least squares (LSE)\n*  problem:\n*\n*          minimize || c - A*x ||_2   subject to   B*x = d\n*\n*  where A is an M-by-N matrix, B is a P-by-N matrix, c is a given\n*  M-vector, and d is a given P-vector. It is assumed that\n*  P <= N <= M+P, and\n*\n*           rank(B) = P and  rank( (A) ) = N.\n*                                ( (B) )\n*\n*  These conditions ensure that the LSE problem has a unique solution,\n*  which is obtained using a generalized RQ factorization of the\n*  matrices (B, A) given by\n*\n*     B = (0 R)*Q,   A = Z*T*Q.\n*\n*  Arguments\n*  =========\n*\n*  M       (input) INTEGER\n*          The number of rows of the matrix A.  M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the matrices A and B. N >= 0.\n*\n*  P       (input) INTEGER\n*          The number of rows of the matrix B. 0 <= P <= N <= M+P.\n*\n*  A       (input/output) REAL array, dimension (LDA,N)\n*          On entry, the M-by-N matrix A.\n*          On exit, the elements on and above the diagonal of the array\n*          contain the min(M,N)-by-N upper trapezoidal matrix T.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A. LDA >= max(1,M).\n*\n*  B       (input/output) REAL array, dimension (LDB,N)\n*          On entry, the P-by-N matrix B.\n*          On exit, the upper triangle of the subarray B(1:P,N-P+1:N)\n*          contains the P-by-P upper triangular matrix R.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B. LDB >= max(1,P).\n*\n*  C       (input/output) REAL array, dimension (M)\n*          On entry, C contains the right hand side vector for the\n*          least squares part of the LSE problem.\n*          On exit, the residual sum of squares for the solution\n*          is given by the sum of squares of elements N-P+1 to M of\n*          vector C.\n*\n*  D       (input/output) REAL array, dimension (P)\n*          On entry, D contains the right hand side vector for the\n*          constrained equation.\n*          On exit, D is destroyed.\n*\n*  X       (output) REAL array, dimension (N)\n*          On exit, X is the solution of the LSE problem.\n*\n*  WORK    (workspace/output) REAL array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK. LWORK >= max(1,M+N+P).\n*          For optimum performance LWORK >= P+min(M,N)+max(M,N)*NB,\n*          where NB is an upper bound for the optimal blocksizes for\n*          SGEQRF, SGERQF, SORMQR and SORMRQ.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit.\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          = 1:  the upper triangular factor R associated with B in the\n*                generalized RQ factorization of the pair (B, A) is\n*                singular, so that rank(B) < P; the least squares\n*                solution could not be computed.\n*          = 2:  the (N-P) by (N-P) part of the upper trapezoidal factor\n*                T associated with A in the generalized RQ factorization\n*                of the pair (B, A) is singular, so that\n*                rank( (A) ) < N; the least squares solution could not\n*                    ( (B) )\n*                be computed.\n*\n'),(98,'dgglse_98.txt','      SUBROUTINE DGGLSE( M, N, P, A, LDA, B, LDB, C, D, X, WORK, LWORK,\n     $                   INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDA, LDB, LWORK, M, N, P\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   A( LDA, * ), B( LDB, * ), C( * ), D( * ),\n     $                   WORK( * ), X( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DGGLSE solves the linear equality-constrained least squares (LSE)\n*  problem:\n*\n*          minimize || c - A*x ||_2   subject to   B*x = d\n*\n*  where A is an M-by-N matrix, B is a P-by-N matrix, c is a given\n*  M-vector, and d is a given P-vector. It is assumed that\n*  P <= N <= M+P, and\n*\n*           rank(B) = P and  rank( (A) ) = N.\n*                                ( (B) )\n*\n*  These conditions ensure that the LSE problem has a unique solution,\n*  which is obtained using a generalized RQ factorization of the\n*  matrices (B, A) given by\n*\n*     B = (0 R)*Q,   A = Z*T*Q.\n*\n*  Arguments\n*  =========\n*\n*  M       (input) INTEGER\n*          The number of rows of the matrix A.  M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the matrices A and B. N >= 0.\n*\n*  P       (input) INTEGER\n*          The number of rows of the matrix B. 0 <= P <= N <= M+P.\n*\n*  A       (input/output) DOUBLE PRECISION array, dimension (LDA,N)\n*          On entry, the M-by-N matrix A.\n*          On exit, the elements on and above the diagonal of the array\n*          contain the min(M,N)-by-N upper trapezoidal matrix T.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A. LDA >= max(1,M).\n*\n*  B       (input/output) DOUBLE PRECISION array, dimension (LDB,N)\n*          On entry, the P-by-N matrix B.\n*          On exit, the upper triangle of the subarray B(1:P,N-P+1:N)\n*          contains the P-by-P upper triangular matrix R.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B. LDB >= max(1,P).\n*\n*  C       (input/output) DOUBLE PRECISION array, dimension (M)\n*          On entry, C contains the right hand side vector for the\n*          least squares part of the LSE problem.\n*          On exit, the residual sum of squares for the solution\n*          is given by the sum of squares of elements N-P+1 to M of\n*          vector C.\n*\n*  D       (input/output) DOUBLE PRECISION array, dimension (P)\n*          On entry, D contains the right hand side vector for the\n*          constrained equation.\n*          On exit, D is destroyed.\n*\n*  X       (output) DOUBLE PRECISION array, dimension (N)\n*          On exit, X is the solution of the LSE problem.\n*\n*  WORK    (workspace/output) DOUBLE PRECISION array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK. LWORK >= max(1,M+N+P).\n*          For optimum performance LWORK >= P+min(M,N)+max(M,N)*NB,\n*          where NB is an upper bound for the optimal blocksizes for\n*          DGEQRF, SGERQF, DORMQR and SORMRQ.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit.\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          = 1:  the upper triangular factor R associated with B in the\n*                generalized RQ factorization of the pair (B, A) is\n*                singular, so that rank(B) < P; the least squares\n*                solution could not be computed.\n*          = 2:  the (N-P) by (N-P) part of the upper trapezoidal factor\n*                T associated with A in the generalized RQ factorization\n*                of the pair (B, A) is singular, so that\n*                rank( (A) ) < N; the least squares solution could not\n*                    ( (B) )\n*                be computed.\n*\n'),(99,'cgglse_99.txt','      SUBROUTINE CGGLSE( M, N, P, A, LDA, B, LDB, C, D, X, WORK, LWORK,\n     $                   INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDA, LDB, LWORK, M, N, P\n*     ..\n*     .. Array Arguments ..\n      COMPLEX            A( LDA, * ), B( LDB, * ), C( * ), D( * ),\n     $                   WORK( * ), X( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CGGLSE solves the linear equality-constrained least squares (LSE)\n*  problem:\n*\n*          minimize || c - A*x ||_2   subject to   B*x = d\n*\n*  where A is an M-by-N matrix, B is a P-by-N matrix, c is a given\n*  M-vector, and d is a given P-vector. It is assumed that\n*  P <= N <= M+P, and\n*\n*           rank(B) = P and  rank( (A) ) = N.\n*                                ( (B) )\n*\n*  These conditions ensure that the LSE problem has a unique solution,\n*  which is obtained using a generalized RQ factorization of the\n*  matrices (B, A) given by\n*\n*     B = (0 R)*Q,   A = Z*T*Q.\n*\n*  Arguments\n*  =========\n*\n*  M       (input) INTEGER\n*          The number of rows of the matrix A.  M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the matrices A and B. N >= 0.\n*\n*  P       (input) INTEGER\n*          The number of rows of the matrix B. 0 <= P <= N <= M+P.\n*\n*  A       (input/output) COMPLEX array, dimension (LDA,N)\n*          On entry, the M-by-N matrix A.\n*          On exit, the elements on and above the diagonal of the array\n*          contain the min(M,N)-by-N upper trapezoidal matrix T.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A. LDA >= max(1,M).\n*\n*  B       (input/output) COMPLEX array, dimension (LDB,N)\n*          On entry, the P-by-N matrix B.\n*          On exit, the upper triangle of the subarray B(1:P,N-P+1:N)\n*          contains the P-by-P upper triangular matrix R.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B. LDB >= max(1,P).\n*\n*  C       (input/output) COMPLEX array, dimension (M)\n*          On entry, C contains the right hand side vector for the\n*          least squares part of the LSE problem.\n*          On exit, the residual sum of squares for the solution\n*          is given by the sum of squares of elements N-P+1 to M of\n*          vector C.\n*\n*  D       (input/output) COMPLEX array, dimension (P)\n*          On entry, D contains the right hand side vector for the\n*          constrained equation.\n*          On exit, D is destroyed.\n*\n*  X       (output) COMPLEX array, dimension (N)\n*          On exit, X is the solution of the LSE problem.\n*\n*  WORK    (workspace/output) COMPLEX array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK. LWORK >= max(1,M+N+P).\n*          For optimum performance LWORK >= P+min(M,N)+max(M,N)*NB,\n*          where NB is an upper bound for the optimal blocksizes for\n*          CGEQRF, CGERQF, CUNMQR and CUNMRQ.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit.\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          = 1:  the upper triangular factor R associated with B in the\n*                generalized RQ factorization of the pair (B, A) is\n*                singular, so that rank(B) < P; the least squares\n*                solution could not be computed.\n*          = 2:  the (N-P) by (N-P) part of the upper trapezoidal factor\n*                T associated with A in the generalized RQ factorization\n*                of the pair (B, A) is singular, so that\n*                rank( (A) ) < N; the least squares solution could not\n*                    ( (B) )\n*                be computed.\n*\n'),(100,'zgglse_100.txt','      SUBROUTINE ZGGLSE( M, N, P, A, LDA, B, LDB, C, D, X, WORK, LWORK,\n     $                   INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDA, LDB, LWORK, M, N, P\n*     ..\n*     .. Array Arguments ..\n      COMPLEX*16         A( LDA, * ), B( LDB, * ), C( * ), D( * ),\n     $                   WORK( * ), X( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZGGLSE solves the linear equality-constrained least squares (LSE)\n*  problem:\n*\n*          minimize || c - A*x ||_2   subject to   B*x = d\n*\n*  where A is an M-by-N matrix, B is a P-by-N matrix, c is a given\n*  M-vector, and d is a given P-vector. It is assumed that\n*  P <= N <= M+P, and\n*\n*           rank(B) = P and  rank( (A) ) = N.\n*                                ( (B) )\n*\n*  These conditions ensure that the LSE problem has a unique solution,\n*  which is obtained using a generalized RQ factorization of the\n*  matrices (B, A) given by\n*\n*     B = (0 R)*Q,   A = Z*T*Q.\n*\n*  Arguments\n*  =========\n*\n*  M       (input) INTEGER\n*          The number of rows of the matrix A.  M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the matrices A and B. N >= 0.\n*\n*  P       (input) INTEGER\n*          The number of rows of the matrix B. 0 <= P <= N <= M+P.\n*\n*  A       (input/output) COMPLEX*16 array, dimension (LDA,N)\n*          On entry, the M-by-N matrix A.\n*          On exit, the elements on and above the diagonal of the array\n*          contain the min(M,N)-by-N upper trapezoidal matrix T.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A. LDA >= max(1,M).\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB,N)\n*          On entry, the P-by-N matrix B.\n*          On exit, the upper triangle of the subarray B(1:P,N-P+1:N)\n*          contains the P-by-P upper triangular matrix R.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B. LDB >= max(1,P).\n*\n*  C       (input/output) COMPLEX*16 array, dimension (M)\n*          On entry, C contains the right hand side vector for the\n*          least squares part of the LSE problem.\n*          On exit, the residual sum of squares for the solution\n*          is given by the sum of squares of elements N-P+1 to M of\n*          vector C.\n*\n*  D       (input/output) COMPLEX*16 array, dimension (P)\n*          On entry, D contains the right hand side vector for the\n*          constrained equation.\n*          On exit, D is destroyed.\n*\n*  X       (output) COMPLEX*16 array, dimension (N)\n*          On exit, X is the solution of the LSE problem.\n*\n*  WORK    (workspace/output) COMPLEX*16 array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK. LWORK >= max(1,M+N+P).\n*          For optimum performance LWORK >= P+min(M,N)+max(M,N)*NB,\n*          where NB is an upper bound for the optimal blocksizes for\n*          ZGEQRF, CGERQF, ZUNMQR and CUNMRQ.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit.\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          = 1:  the upper triangular factor R associated with B in the\n*                generalized RQ factorization of the pair (B, A) is\n*                singular, so that rank(B) < P; the least squares\n*                solution could not be computed.\n*          = 2:  the (N-P) by (N-P) part of the upper trapezoidal factor\n*                T associated with A in the generalized RQ factorization\n*                of the pair (B, A) is singular, so that\n*                rank( (A) ) < N; the least squares solution could not\n*                    ( (B) )\n*                be computed.\n*\n'),(101,'sggglm_101.txt','      SUBROUTINE SGGGLM( N, M, P, A, LDA, B, LDB, D, X, Y, WORK, LWORK,\n     $                   INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDA, LDB, LWORK, M, N, P\n*     ..\n*     .. Array Arguments ..\n      REAL               A( LDA, * ), B( LDB, * ), D( * ), WORK( * ),\n     $                   X( * ), Y( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SGGGLM solves a general Gauss-Markov linear model (GLM) problem:\n*\n*          minimize || y ||_2   subject to   d = A*x + B*y\n*              x\n*\n*  where A is an N-by-M matrix, B is an N-by-P matrix, and d is a\n*  given N-vector. It is assumed that M <= N <= M+P, and\n*\n*             rank(A) = M    and    rank( A B ) = N.\n*\n*  Under these assumptions, the constrained equation is always\n*  consistent, and there is a unique solution x and a minimal 2-norm\n*  solution y, which is obtained using a generalized QR factorization\n*  of the matrices (A, B) given by\n*\n*     A = Q*(R),   B = Q*T*Z.\n*           (0)\n*\n*  In particular, if matrix B is square nonsingular, then the problem\n*  GLM is equivalent to the following weighted linear least squares\n*  problem\n*\n*               minimize || inv(B)*(d-A*x) ||_2\n*                   x\n*\n*  where inv(B) denotes the inverse of B.\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The number of rows of the matrices A and B.  N >= 0.\n*\n*  M       (input) INTEGER\n*          The number of columns of the matrix A.  0 <= M <= N.\n*\n*  P       (input) INTEGER\n*          The number of columns of the matrix B.  P >= N-M.\n*\n*  A       (input/output) REAL array, dimension (LDA,M)\n*          On entry, the N-by-M matrix A.\n*          On exit, the upper triangular part of the array A contains\n*          the M-by-M upper triangular matrix R.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A. LDA >= max(1,N).\n*\n*  B       (input/output) REAL array, dimension (LDB,P)\n*          On entry, the N-by-P matrix B.\n*          On exit, if N <= P, the upper triangle of the subarray\n*          B(1:N,P-N+1:P) contains the N-by-N upper triangular matrix T;\n*          if N > P, the elements on and above the (N-P)th subdiagonal\n*          contain the N-by-P upper trapezoidal matrix T.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B. LDB >= max(1,N).\n*\n*  D       (input/output) REAL array, dimension (N)\n*          On entry, D is the left hand side of the GLM equation.\n*          On exit, D is destroyed.\n*\n*  X       (output) REAL array, dimension (M)\n*  Y       (output) REAL array, dimension (P)\n*          On exit, X and Y are the solutions of the GLM problem.\n*\n*  WORK    (workspace/output) REAL array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK. LWORK >= max(1,N+M+P).\n*          For optimum performance, LWORK >= M+min(N,P)+max(N,P)*NB,\n*          where NB is an upper bound for the optimal blocksizes for\n*          SGEQRF, SGERQF, SORMQR and SORMRQ.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit.\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          = 1:  the upper triangular factor R associated with A in the\n*                generalized QR factorization of the pair (A, B) is\n*                singular, so that rank(A) < M; the least squares\n*                solution could not be computed.\n*          = 2:  the bottom (N-M) by (N-M) part of the upper trapezoidal\n*                factor T associated with B in the generalized QR\n*                factorization of the pair (A, B) is singular, so that\n*                rank( A B ) < N; the least squares solution could not\n*                be computed.\n*\n'),(102,'dggglm_102.txt','      SUBROUTINE DGGGLM( N, M, P, A, LDA, B, LDB, D, X, Y, WORK, LWORK,\n     $                   INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDA, LDB, LWORK, M, N, P\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   A( LDA, * ), B( LDB, * ), D( * ), WORK( * ),\n     $                   X( * ), Y( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DGGGLM solves a general Gauss-Markov linear model (GLM) problem:\n*\n*          minimize || y ||_2   subject to   d = A*x + B*y\n*              x\n*\n*  where A is an N-by-M matrix, B is an N-by-P matrix, and d is a\n*  given N-vector. It is assumed that M <= N <= M+P, and\n*\n*             rank(A) = M    and    rank( A B ) = N.\n*\n*  Under these assumptions, the constrained equation is always\n*  consistent, and there is a unique solution x and a minimal 2-norm\n*  solution y, which is obtained using a generalized QR factorization\n*  of the matrices (A, B) given by\n*\n*     A = Q*(R),   B = Q*T*Z.\n*           (0)\n*\n*  In particular, if matrix B is square nonsingular, then the problem\n*  GLM is equivalent to the following weighted linear least squares\n*  problem\n*\n*               minimize || inv(B)*(d-A*x) ||_2\n*                   x\n*\n*  where inv(B) denotes the inverse of B.\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The number of rows of the matrices A and B.  N >= 0.\n*\n*  M       (input) INTEGER\n*          The number of columns of the matrix A.  0 <= M <= N.\n*\n*  P       (input) INTEGER\n*          The number of columns of the matrix B.  P >= N-M.\n*\n*  A       (input/output) DOUBLE PRECISION array, dimension (LDA,M)\n*          On entry, the N-by-M matrix A.\n*          On exit, the upper triangular part of the array A contains\n*          the M-by-M upper triangular matrix R.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A. LDA >= max(1,N).\n*\n*  B       (input/output) DOUBLE PRECISION array, dimension (LDB,P)\n*          On entry, the N-by-P matrix B.\n*          On exit, if N <= P, the upper triangle of the subarray\n*          B(1:N,P-N+1:P) contains the N-by-N upper triangular matrix T;\n*          if N > P, the elements on and above the (N-P)th subdiagonal\n*          contain the N-by-P upper trapezoidal matrix T.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B. LDB >= max(1,N).\n*\n*  D       (input/output) DOUBLE PRECISION array, dimension (N)\n*          On entry, D is the left hand side of the GLM equation.\n*          On exit, D is destroyed.\n*\n*  X       (output) DOUBLE PRECISION array, dimension (M)\n*  Y       (output) DOUBLE PRECISION array, dimension (P)\n*          On exit, X and Y are the solutions of the GLM problem.\n*\n*  WORK    (workspace/output) DOUBLE PRECISION array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK. LWORK >= max(1,N+M+P).\n*          For optimum performance, LWORK >= M+min(N,P)+max(N,P)*NB,\n*          where NB is an upper bound for the optimal blocksizes for\n*          DGEQRF, SGERQF, DORMQR and SORMRQ.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit.\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          = 1:  the upper triangular factor R associated with A in the\n*                generalized QR factorization of the pair (A, B) is\n*                singular, so that rank(A) < M; the least squares\n*                solution could not be computed.\n*          = 2:  the bottom (N-M) by (N-M) part of the upper trapezoidal\n*                factor T associated with B in the generalized QR\n*                factorization of the pair (A, B) is singular, so that\n*                rank( A B ) < N; the least squares solution could not\n*                be computed.\n*\n'),(103,'cggglm_103.txt','      SUBROUTINE CGGGLM( N, M, P, A, LDA, B, LDB, D, X, Y, WORK, LWORK,\n     $                   INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDA, LDB, LWORK, M, N, P\n*     ..\n*     .. Array Arguments ..\n      COMPLEX            A( LDA, * ), B( LDB, * ), D( * ), WORK( * ),\n     $                   X( * ), Y( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CGGGLM solves a general Gauss-Markov linear model (GLM) problem:\n*\n*          minimize || y ||_2   subject to   d = A*x + B*y\n*              x\n*\n*  where A is an N-by-M matrix, B is an N-by-P matrix, and d is a\n*  given N-vector. It is assumed that M <= N <= M+P, and\n*\n*             rank(A) = M    and    rank( A B ) = N.\n*\n*  Under these assumptions, the constrained equation is always\n*  consistent, and there is a unique solution x and a minimal 2-norm\n*  solution y, which is obtained using a generalized QR factorization\n*  of the matrices (A, B) given by\n*\n*     A = Q*(R),   B = Q*T*Z.\n*           (0)\n*\n*  In particular, if matrix B is square nonsingular, then the problem\n*  GLM is equivalent to the following weighted linear least squares\n*  problem\n*\n*               minimize || inv(B)*(d-A*x) ||_2\n*                   x\n*\n*  where inv(B) denotes the inverse of B.\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The number of rows of the matrices A and B.  N >= 0.\n*\n*  M       (input) INTEGER\n*          The number of columns of the matrix A.  0 <= M <= N.\n*\n*  P       (input) INTEGER\n*          The number of columns of the matrix B.  P >= N-M.\n*\n*  A       (input/output) COMPLEX array, dimension (LDA,M)\n*          On entry, the N-by-M matrix A.\n*          On exit, the upper triangular part of the array A contains\n*          the M-by-M upper triangular matrix R.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A. LDA >= max(1,N).\n*\n*  B       (input/output) COMPLEX array, dimension (LDB,P)\n*          On entry, the N-by-P matrix B.\n*          On exit, if N <= P, the upper triangle of the subarray\n*          B(1:N,P-N+1:P) contains the N-by-N upper triangular matrix T;\n*          if N > P, the elements on and above the (N-P)th subdiagonal\n*          contain the N-by-P upper trapezoidal matrix T.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B. LDB >= max(1,N).\n*\n*  D       (input/output) COMPLEX array, dimension (N)\n*          On entry, D is the left hand side of the GLM equation.\n*          On exit, D is destroyed.\n*\n*  X       (output) COMPLEX array, dimension (M)\n*  Y       (output) COMPLEX array, dimension (P)\n*          On exit, X and Y are the solutions of the GLM problem.\n*\n*  WORK    (workspace/output) COMPLEX array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK. LWORK >= max(1,N+M+P).\n*          For optimum performance, LWORK >= M+min(N,P)+max(N,P)*NB,\n*          where NB is an upper bound for the optimal blocksizes for\n*          CGEQRF, CGERQF, CUNMQR and CUNMRQ.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit.\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          = 1:  the upper triangular factor R associated with A in the\n*                generalized QR factorization of the pair (A, B) is\n*                singular, so that rank(A) < M; the least squares\n*                solution could not be computed.\n*          = 2:  the bottom (N-M) by (N-M) part of the upper trapezoidal\n*                factor T associated with B in the generalized QR\n*                factorization of the pair (A, B) is singular, so that\n*                rank( A B ) < N; the least squares solution could not\n*                be computed.\n*\n'),(104,'zggglm_104.txt','      SUBROUTINE ZGGGLM( N, M, P, A, LDA, B, LDB, D, X, Y, WORK, LWORK,\n     $                   INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDA, LDB, LWORK, M, N, P\n*     ..\n*     .. Array Arguments ..\n      COMPLEX*16         A( LDA, * ), B( LDB, * ), D( * ), WORK( * ),\n     $                   X( * ), Y( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZGGGLM solves a general Gauss-Markov linear model (GLM) problem:\n*\n*          minimize || y ||_2   subject to   d = A*x + B*y\n*              x\n*\n*  where A is an N-by-M matrix, B is an N-by-P matrix, and d is a\n*  given N-vector. It is assumed that M <= N <= M+P, and\n*\n*             rank(A) = M    and    rank( A B ) = N.\n*\n*  Under these assumptions, the constrained equation is always\n*  consistent, and there is a unique solution x and a minimal 2-norm\n*  solution y, which is obtained using a generalized QR factorization\n*  of the matrices (A, B) given by\n*\n*     A = Q*(R),   B = Q*T*Z.\n*           (0)\n*\n*  In particular, if matrix B is square nonsingular, then the problem\n*  GLM is equivalent to the following weighted linear least squares\n*  problem\n*\n*               minimize || inv(B)*(d-A*x) ||_2\n*                   x\n*\n*  where inv(B) denotes the inverse of B.\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The number of rows of the matrices A and B.  N >= 0.\n*\n*  M       (input) INTEGER\n*          The number of columns of the matrix A.  0 <= M <= N.\n*\n*  P       (input) INTEGER\n*          The number of columns of the matrix B.  P >= N-M.\n*\n*  A       (input/output) COMPLEX*16 array, dimension (LDA,M)\n*          On entry, the N-by-M matrix A.\n*          On exit, the upper triangular part of the array A contains\n*          the M-by-M upper triangular matrix R.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A. LDA >= max(1,N).\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB,P)\n*          On entry, the N-by-P matrix B.\n*          On exit, if N <= P, the upper triangle of the subarray\n*          B(1:N,P-N+1:P) contains the N-by-N upper triangular matrix T;\n*          if N > P, the elements on and above the (N-P)th subdiagonal\n*          contain the N-by-P upper trapezoidal matrix T.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B. LDB >= max(1,N).\n*\n*  D       (input/output) COMPLEX*16 array, dimension (N)\n*          On entry, D is the left hand side of the GLM equation.\n*          On exit, D is destroyed.\n*\n*  X       (output) COMPLEX*16 array, dimension (M)\n*  Y       (output) COMPLEX*16 array, dimension (P)\n*          On exit, X and Y are the solutions of the GLM problem.\n*\n*  WORK    (workspace/output) COMPLEX*16 array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK. LWORK >= max(1,N+M+P).\n*          For optimum performance, LWORK >= M+min(N,P)+max(N,P)*NB,\n*          where NB is an upper bound for the optimal blocksizes for\n*          ZGEQRF, ZGERQF, ZUNMQR and ZUNMRQ.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit.\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          = 1:  the upper triangular factor R associated with A in the\n*                generalized QR factorization of the pair (A, B) is\n*                singular, so that rank(A) < M; the least squares\n*                solution could not be computed.\n*          = 2:  the bottom (N-M) by (N-M) part of the upper trapezoidal\n*                factor T associated with B in the generalized QR\n*                factorization of the pair (A, B) is singular, so that\n*                rank( A B ) < N; the least squares solution could not\n*                be computed.\n*\n'),(105,'cheev_105.txt','      SUBROUTINE CHEEV( JOBZ, UPLO, N, A, LDA, W, WORK, LWORK, RWORK,\n     $                  INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, LDA, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      REAL               RWORK( * ), W( * )\n      COMPLEX            A( LDA, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CHEEV computes all eigenvalues and, optionally, eigenvectors of a\n*  complex Hermitian matrix A.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) COMPLEX array, dimension (LDA, N)\n*          On entry, the Hermitian matrix A.  If UPLO = \'U\', the\n*          leading N-by-N upper triangular part of A contains the\n*          upper triangular part of the matrix A.  If UPLO = \'L\',\n*          the leading N-by-N lower triangular part of A contains\n*          the lower triangular part of the matrix A.\n*          On exit, if JOBZ = \'V\', then if INFO = 0, A contains the\n*          orthonormal eigenvectors of the matrix A.\n*          If JOBZ = \'N\', then on exit the lower triangle (if UPLO=\'L\')\n*          or the upper triangle (if UPLO=\'U\') of A, including the\n*          diagonal, is destroyed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  W       (output) REAL array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  WORK    (workspace/output) COMPLEX array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The length of the array WORK.  LWORK >= max(1,2*N-1).\n*          For optimal efficiency, LWORK >= (NB+1)*N,\n*          where NB is the blocksize for CHETRD returned by ILAENV.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  RWORK   (workspace) REAL array, dimension (max(1, 3*N-2))\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the algorithm failed to converge; i\n*                off-diagonal elements of an intermediate tridiagonal\n*                form did not converge to zero.\n*\n'),(106,'zheev_106.txt','      SUBROUTINE ZHEEV( JOBZ, UPLO, N, A, LDA, W, WORK, LWORK, RWORK,\n     $                  INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, LDA, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   RWORK( * ), W( * )\n      COMPLEX*16         A( LDA, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZHEEV computes all eigenvalues and, optionally, eigenvectors of a\n*  complex Hermitian matrix A.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) COMPLEX*16 array, dimension (LDA, N)\n*          On entry, the Hermitian matrix A.  If UPLO = \'U\', the\n*          leading N-by-N upper triangular part of A contains the\n*          upper triangular part of the matrix A.  If UPLO = \'L\',\n*          the leading N-by-N lower triangular part of A contains\n*          the lower triangular part of the matrix A.\n*          On exit, if JOBZ = \'V\', then if INFO = 0, A contains the\n*          orthonormal eigenvectors of the matrix A.\n*          If JOBZ = \'N\', then on exit the lower triangle (if UPLO=\'L\')\n*          or the upper triangle (if UPLO=\'U\') of A, including the\n*          diagonal, is destroyed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  W       (output) DOUBLE PRECISION array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  WORK    (workspace/output) COMPLEX*16 array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The length of the array WORK.  LWORK >= max(1,2*N-1).\n*          For optimal efficiency, LWORK >= (NB+1)*N,\n*          where NB is the blocksize for ZHETRD returned by ILAENV.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (max(1, 3*N-2))\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the algorithm failed to converge; i\n*                off-diagonal elements of an intermediate tridiagonal\n*                form did not converge to zero.\n*\n'),(107,'chbev_107.txt','      SUBROUTINE CHBEV( JOBZ, UPLO, N, KD, AB, LDAB, W, Z, LDZ, WORK,\n     $                  RWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, KD, LDAB, LDZ, N\n*     ..\n*     .. Array Arguments ..\n      REAL               RWORK( * ), W( * )\n      COMPLEX            AB( LDAB, * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CHBEV computes all the eigenvalues and, optionally, eigenvectors of\n*  a complex Hermitian band matrix A.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KD >= 0.\n*\n*  AB      (input/output) COMPLEX array, dimension (LDAB, N)\n*          On entry, the upper or lower triangle of the Hermitian band\n*          matrix A, stored in the first KD+1 rows of the array.  The\n*          j-th column of A is stored in the j-th column of the array AB\n*          as follows:\n*          if UPLO = \'U\', AB(kd+1+i-j,j) = A(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+kd).\n*\n*          On exit, AB is overwritten by values generated during the\n*          reduction to tridiagonal form.  If UPLO = \'U\', the first\n*          superdiagonal and the diagonal of the tridiagonal matrix T\n*          are returned in rows KD and KD+1 of AB, and if UPLO = \'L\',\n*          the diagonal and first subdiagonal of T are returned in the\n*          first two rows of AB.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD + 1.\n*\n*  W       (output) REAL array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  Z       (output) COMPLEX array, dimension (LDZ, N)\n*          If JOBZ = \'V\', then if INFO = 0, Z contains the orthonormal\n*          eigenvectors of the matrix A, with the i-th column of Z\n*          holding the eigenvector associated with W(i).\n*          If JOBZ = \'N\', then Z is not referenced.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace) COMPLEX array, dimension (N)\n*\n*  RWORK   (workspace) REAL array, dimension (max(1,3*N-2))\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit.\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  if INFO = i, the algorithm failed to converge; i\n*                off-diagonal elements of an intermediate tridiagonal\n*                form did not converge to zero.\n*\n'),(108,'zhbev_108.txt','      SUBROUTINE ZHBEV( JOBZ, UPLO, N, KD, AB, LDAB, W, Z, LDZ, WORK,\n     $                  RWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, KD, LDAB, LDZ, N\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   RWORK( * ), W( * )\n      COMPLEX*16         AB( LDAB, * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZHBEV computes all the eigenvalues and, optionally, eigenvectors of\n*  a complex Hermitian band matrix A.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KD >= 0.\n*\n*  AB      (input/output) COMPLEX*16 array, dimension (LDAB, N)\n*          On entry, the upper or lower triangle of the Hermitian band\n*          matrix A, stored in the first KD+1 rows of the array.  The\n*          j-th column of A is stored in the j-th column of the array AB\n*          as follows:\n*          if UPLO = \'U\', AB(kd+1+i-j,j) = A(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+kd).\n*\n*          On exit, AB is overwritten by values generated during the\n*          reduction to tridiagonal form.  If UPLO = \'U\', the first\n*          superdiagonal and the diagonal of the tridiagonal matrix T\n*          are returned in rows KD and KD+1 of AB, and if UPLO = \'L\',\n*          the diagonal and first subdiagonal of T are returned in the\n*          first two rows of AB.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD + 1.\n*\n*  W       (output) DOUBLE PRECISION array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  Z       (output) COMPLEX*16 array, dimension (LDZ, N)\n*          If JOBZ = \'V\', then if INFO = 0, Z contains the orthonormal\n*          eigenvectors of the matrix A, with the i-th column of Z\n*          holding the eigenvector associated with W(i).\n*          If JOBZ = \'N\', then Z is not referenced.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (N)\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (max(1,3*N-2))\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit.\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  if INFO = i, the algorithm failed to converge; i\n*                off-diagonal elements of an intermediate tridiagonal\n*                form did not converge to zero.\n*\n'),(109,'chpev_109.txt','      SUBROUTINE CHPEV( JOBZ, UPLO, N, AP, W, Z, LDZ, WORK, RWORK,\n     $                  INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, LDZ, N\n*     ..\n*     .. Array Arguments ..\n      REAL               RWORK( * ), W( * )\n      COMPLEX            AP( * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CHPEV computes all the eigenvalues and, optionally, eigenvectors of a\n*  complex Hermitian matrix in packed storage.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input/output) COMPLEX array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the Hermitian matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*\n*          On exit, AP is overwritten by values generated during the\n*          reduction to tridiagonal form.  If UPLO = \'U\', the diagonal\n*          and first superdiagonal of the tridiagonal matrix T overwrite\n*          the corresponding elements of A, and if UPLO = \'L\', the\n*          diagonal and first subdiagonal of T overwrite the\n*          corresponding elements of A.\n*\n*  W       (output) REAL array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  Z       (output) COMPLEX array, dimension (LDZ, N)\n*          If JOBZ = \'V\', then if INFO = 0, Z contains the orthonormal\n*          eigenvectors of the matrix A, with the i-th column of Z\n*          holding the eigenvector associated with W(i).\n*          If JOBZ = \'N\', then Z is not referenced.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace) COMPLEX array, dimension (max(1, 2*N-1))\n*\n*  RWORK   (workspace) REAL array, dimension (max(1, 3*N-2))\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit.\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  if INFO = i, the algorithm failed to converge; i\n*                off-diagonal elements of an intermediate tridiagonal\n*                form did not converge to zero.\n*\n'),(110,'zhpev_110.txt','      SUBROUTINE ZHPEV( JOBZ, UPLO, N, AP, W, Z, LDZ, WORK, RWORK,\n     $                  INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, LDZ, N\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   RWORK( * ), W( * )\n      COMPLEX*16         AP( * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZHPEV computes all the eigenvalues and, optionally, eigenvectors of a\n*  complex Hermitian matrix in packed storage.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input/output) COMPLEX*16 array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the Hermitian matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*\n*          On exit, AP is overwritten by values generated during the\n*          reduction to tridiagonal form.  If UPLO = \'U\', the diagonal\n*          and first superdiagonal of the tridiagonal matrix T overwrite\n*          the corresponding elements of A, and if UPLO = \'L\', the\n*          diagonal and first subdiagonal of T overwrite the\n*          corresponding elements of A.\n*\n*  W       (output) DOUBLE PRECISION array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  Z       (output) COMPLEX*16 array, dimension (LDZ, N)\n*          If JOBZ = \'V\', then if INFO = 0, Z contains the orthonormal\n*          eigenvectors of the matrix A, with the i-th column of Z\n*          holding the eigenvector associated with W(i).\n*          If JOBZ = \'N\', then Z is not referenced.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (max(1, 2*N-1))\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (max(1, 3*N-2))\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit.\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  if INFO = i, the algorithm failed to converge; i\n*                off-diagonal elements of an intermediate tridiagonal\n*                form did not converge to zero.\n*\n'),(111,'ssyev_111.txt','      SUBROUTINE SSYEV( JOBZ, UPLO, N, A, LDA, W, WORK, LWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, LDA, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      REAL               A( LDA, * ), W( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SSYEV computes all eigenvalues and, optionally, eigenvectors of a\n*  real symmetric matrix A.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) REAL array, dimension (LDA, N)\n*          On entry, the symmetric matrix A.  If UPLO = \'U\', the\n*          leading N-by-N upper triangular part of A contains the\n*          upper triangular part of the matrix A.  If UPLO = \'L\',\n*          the leading N-by-N lower triangular part of A contains\n*          the lower triangular part of the matrix A.\n*          On exit, if JOBZ = \'V\', then if INFO = 0, A contains the\n*          orthonormal eigenvectors of the matrix A.\n*          If JOBZ = \'N\', then on exit the lower triangle (if UPLO=\'L\')\n*          or the upper triangle (if UPLO=\'U\') of A, including the\n*          diagonal, is destroyed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  W       (output) REAL array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  WORK    (workspace/output) REAL array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The length of the array WORK.  LWORK >= max(1,3*N-1).\n*          For optimal efficiency, LWORK >= (NB+2)*N,\n*          where NB is the blocksize for SSYTRD returned by ILAENV.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the algorithm failed to converge; i\n*                off-diagonal elements of an intermediate tridiagonal\n*                form did not converge to zero.\n*\n'),(112,'dsyev_112.txt','      SUBROUTINE DSYEV( JOBZ, UPLO, N, A, LDA, W, WORK, LWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, LDA, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   A( LDA, * ), W( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DSYEV computes all eigenvalues and, optionally, eigenvectors of a\n*  real symmetric matrix A.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) DOUBLE PRECISION array, dimension (LDA, N)\n*          On entry, the symmetric matrix A.  If UPLO = \'U\', the\n*          leading N-by-N upper triangular part of A contains the\n*          upper triangular part of the matrix A.  If UPLO = \'L\',\n*          the leading N-by-N lower triangular part of A contains\n*          the lower triangular part of the matrix A.\n*          On exit, if JOBZ = \'V\', then if INFO = 0, A contains the\n*          orthonormal eigenvectors of the matrix A.\n*          If JOBZ = \'N\', then on exit the lower triangle (if UPLO=\'L\')\n*          or the upper triangle (if UPLO=\'U\') of A, including the\n*          diagonal, is destroyed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  W       (output) DOUBLE PRECISION array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  WORK    (workspace/output) DOUBLE PRECISION array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The length of the array WORK.  LWORK >= max(1,3*N-1).\n*          For optimal efficiency, LWORK >= (NB+2)*N,\n*          where NB is the blocksize for DSYTRD returned by ILAENV.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the algorithm failed to converge; i\n*                off-diagonal elements of an intermediate tridiagonal\n*                form did not converge to zero.\n*\n'),(113,'ssbev_113.txt','      SUBROUTINE SSBEV( JOBZ, UPLO, N, KD, AB, LDAB, W, Z, LDZ, WORK,\n     $                  INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, KD, LDAB, LDZ, N\n*     ..\n*     .. Array Arguments ..\n      REAL               AB( LDAB, * ), W( * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SSBEV computes all the eigenvalues and, optionally, eigenvectors of\n*  a real symmetric band matrix A.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KD >= 0.\n*\n*  AB      (input/output) REAL array, dimension (LDAB, N)\n*          On entry, the upper or lower triangle of the symmetric band\n*          matrix A, stored in the first KD+1 rows of the array.  The\n*          j-th column of A is stored in the j-th column of the array AB\n*          as follows:\n*          if UPLO = \'U\', AB(kd+1+i-j,j) = A(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+kd).\n*\n*          On exit, AB is overwritten by values generated during the\n*          reduction to tridiagonal form.  If UPLO = \'U\', the first\n*          superdiagonal and the diagonal of the tridiagonal matrix T\n*          are returned in rows KD and KD+1 of AB, and if UPLO = \'L\',\n*          the diagonal and first subdiagonal of T are returned in the\n*          first two rows of AB.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD + 1.\n*\n*  W       (output) REAL array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  Z       (output) REAL array, dimension (LDZ, N)\n*          If JOBZ = \'V\', then if INFO = 0, Z contains the orthonormal\n*          eigenvectors of the matrix A, with the i-th column of Z\n*          holding the eigenvector associated with W(i).\n*          If JOBZ = \'N\', then Z is not referenced.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace) REAL array, dimension (max(1,3*N-2))\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the algorithm failed to converge; i\n*                off-diagonal elements of an intermediate tridiagonal\n*                form did not converge to zero.\n*\n'),(114,'dsbev_114.txt','      SUBROUTINE DSBEV( JOBZ, UPLO, N, KD, AB, LDAB, W, Z, LDZ, WORK,\n     $                  INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, KD, LDAB, LDZ, N\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   AB( LDAB, * ), W( * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DSBEV computes all the eigenvalues and, optionally, eigenvectors of\n*  a real symmetric band matrix A.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KD >= 0.\n*\n*  AB      (input/output) DOUBLE PRECISION array, dimension (LDAB, N)\n*          On entry, the upper or lower triangle of the symmetric band\n*          matrix A, stored in the first KD+1 rows of the array.  The\n*          j-th column of A is stored in the j-th column of the array AB\n*          as follows:\n*          if UPLO = \'U\', AB(kd+1+i-j,j) = A(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+kd).\n*\n*          On exit, AB is overwritten by values generated during the\n*          reduction to tridiagonal form.  If UPLO = \'U\', the first\n*          superdiagonal and the diagonal of the tridiagonal matrix T\n*          are returned in rows KD and KD+1 of AB, and if UPLO = \'L\',\n*          the diagonal and first subdiagonal of T are returned in the\n*          first two rows of AB.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD + 1.\n*\n*  W       (output) DOUBLE PRECISION array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  Z       (output) DOUBLE PRECISION array, dimension (LDZ, N)\n*          If JOBZ = \'V\', then if INFO = 0, Z contains the orthonormal\n*          eigenvectors of the matrix A, with the i-th column of Z\n*          holding the eigenvector associated with W(i).\n*          If JOBZ = \'N\', then Z is not referenced.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace) DOUBLE PRECISION array, dimension (max(1,3*N-2))\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the algorithm failed to converge; i\n*                off-diagonal elements of an intermediate tridiagonal\n*                form did not converge to zero.\n*\n'),(115,'sspev_115.txt','      SUBROUTINE SSPEV( JOBZ, UPLO, N, AP, W, Z, LDZ, WORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, LDZ, N\n*     ..\n*     .. Array Arguments ..\n      REAL               AP( * ), W( * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SSPEV computes all the eigenvalues and, optionally, eigenvectors of a\n*  real symmetric matrix A in packed storage.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input/output) REAL array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the symmetric matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*\n*          On exit, AP is overwritten by values generated during the\n*          reduction to tridiagonal form.  If UPLO = \'U\', the diagonal\n*          and first superdiagonal of the tridiagonal matrix T overwrite\n*          the corresponding elements of A, and if UPLO = \'L\', the\n*          diagonal and first subdiagonal of T overwrite the\n*          corresponding elements of A.\n*\n*  W       (output) REAL array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  Z       (output) REAL array, dimension (LDZ, N)\n*          If JOBZ = \'V\', then if INFO = 0, Z contains the orthonormal\n*          eigenvectors of the matrix A, with the i-th column of Z\n*          holding the eigenvector associated with W(i).\n*          If JOBZ = \'N\', then Z is not referenced.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace) REAL array, dimension (3*N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit.\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  if INFO = i, the algorithm failed to converge; i\n*                off-diagonal elements of an intermediate tridiagonal\n*                form did not converge to zero.\n*\n'),(116,'dspev_116.txt','      SUBROUTINE DSPEV( JOBZ, UPLO, N, AP, W, Z, LDZ, WORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, LDZ, N\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   AP( * ), W( * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DSPEV computes all the eigenvalues and, optionally, eigenvectors of a\n*  real symmetric matrix A in packed storage.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input/output) DOUBLE PRECISION array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the symmetric matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*\n*          On exit, AP is overwritten by values generated during the\n*          reduction to tridiagonal form.  If UPLO = \'U\', the diagonal\n*          and first superdiagonal of the tridiagonal matrix T overwrite\n*          the corresponding elements of A, and if UPLO = \'L\', the\n*          diagonal and first subdiagonal of T overwrite the\n*          corresponding elements of A.\n*\n*  W       (output) DOUBLE PRECISION array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  Z       (output) DOUBLE PRECISION array, dimension (LDZ, N)\n*          If JOBZ = \'V\', then if INFO = 0, Z contains the orthonormal\n*          eigenvectors of the matrix A, with the i-th column of Z\n*          holding the eigenvector associated with W(i).\n*          If JOBZ = \'N\', then Z is not referenced.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace) DOUBLE PRECISION array, dimension (3*N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit.\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  if INFO = i, the algorithm failed to converge; i\n*                off-diagonal elements of an intermediate tridiagonal\n*                form did not converge to zero.\n*\n'),(117,'sstev_117.txt','      SUBROUTINE SSTEV( JOBZ, N, D, E, Z, LDZ, WORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ\n      INTEGER            INFO, LDZ, N\n*     ..\n*     .. Array Arguments ..\n      REAL               D( * ), E( * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SSTEV computes all eigenvalues and, optionally, eigenvectors of a\n*  real symmetric tridiagonal matrix A.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  N       (input) INTEGER\n*          The order of the matrix.  N >= 0.\n*\n*  D       (input/output) REAL array, dimension (N)\n*          On entry, the n diagonal elements of the tridiagonal matrix\n*          A.\n*          On exit, if INFO = 0, the eigenvalues in ascending order.\n*\n*  E       (input/output) REAL array, dimension (N-1)\n*          On entry, the (n-1) subdiagonal elements of the tridiagonal\n*          matrix A, stored in elements 1 to N-1 of E.\n*          On exit, the contents of E are destroyed.\n*\n*  Z       (output) REAL array, dimension (LDZ, N)\n*          If JOBZ = \'V\', then if INFO = 0, Z contains the orthonormal\n*          eigenvectors of the matrix A, with the i-th column of Z\n*          holding the eigenvector associated with D(i).\n*          If JOBZ = \'N\', then Z is not referenced.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace) REAL array, dimension (max(1,2*N-2))\n*          If JOBZ = \'N\', WORK is not referenced.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the algorithm failed to converge; i\n*                off-diagonal elements of E did not converge to zero.\n*\n'),(118,'dstev_118.txt','      SUBROUTINE DSTEV( JOBZ, N, D, E, Z, LDZ, WORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ\n      INTEGER            INFO, LDZ, N\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   D( * ), E( * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DSTEV computes all eigenvalues and, optionally, eigenvectors of a\n*  real symmetric tridiagonal matrix A.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  N       (input) INTEGER\n*          The order of the matrix.  N >= 0.\n*\n*  D       (input/output) DOUBLE PRECISION array, dimension (N)\n*          On entry, the n diagonal elements of the tridiagonal matrix\n*          A.\n*          On exit, if INFO = 0, the eigenvalues in ascending order.\n*\n*  E       (input/output) DOUBLE PRECISION array, dimension (N-1)\n*          On entry, the (n-1) subdiagonal elements of the tridiagonal\n*          matrix A, stored in elements 1 to N-1 of E.\n*          On exit, the contents of E are destroyed.\n*\n*  Z       (output) DOUBLE PRECISION array, dimension (LDZ, N)\n*          If JOBZ = \'V\', then if INFO = 0, Z contains the orthonormal\n*          eigenvectors of the matrix A, with the i-th column of Z\n*          holding the eigenvector associated with D(i).\n*          If JOBZ = \'N\', then Z is not referenced.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace) DOUBLE PRECISION array, dimension (max(1,2*N-2))\n*          If JOBZ = \'N\', WORK is not referenced.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the algorithm failed to converge; i\n*                off-diagonal elements of E did not converge to zero.\n*\n'),(119,'cheevx_119.txt','      SUBROUTINE CHEEVX( JOBZ, RANGE, UPLO, N, A, LDA, VL, VU, IL, IU,\n     $                   ABSTOL, M, W, Z, LDZ, WORK, LWORK, RWORK,\n     $                   IWORK, IFAIL, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n* @generated c\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, RANGE, UPLO\n      INTEGER            IL, INFO, IU, LDA, LDZ, LWORK, M, N\n      REAL               ABSTOL, VL, VU\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IFAIL( * ), IWORK( * )\n      REAL               RWORK( * ), W( * )\n      COMPLEX            A( LDA, * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CHEEVX computes selected eigenvalues and, optionally, eigenvectors\n*  of a complex Hermitian matrix A.  Eigenvalues and eigenvectors can\n*  be selected by specifying either a range of values or a range of\n*  indices for the desired eigenvalues.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  RANGE   (input) CHARACTER*1\n*          = \'A\': all eigenvalues will be found.\n*          = \'V\': all eigenvalues in the half-open interval (VL,VU]\n*                 will be found.\n*          = \'I\': the IL-th through IU-th eigenvalues will be found.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) COMPLEX array, dimension (LDA, N)\n*          On entry, the Hermitian matrix A.  If UPLO = \'U\', the\n*          leading N-by-N upper triangular part of A contains the\n*          upper triangular part of the matrix A.  If UPLO = \'L\',\n*          the leading N-by-N lower triangular part of A contains\n*          the lower triangular part of the matrix A.\n*          On exit, the lower triangle (if UPLO=\'L\') or the upper\n*          triangle (if UPLO=\'U\') of A, including the diagonal, is\n*          destroyed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  VL      (input) REAL\n*  VU      (input) REAL\n*          If RANGE=\'V\', the lower and upper bounds of the interval to\n*          be searched for eigenvalues. VL < VU.\n*          Not referenced if RANGE = \'A\' or \'I\'.\n*\n*  IL      (input) INTEGER\n*  IU      (input) INTEGER\n*          If RANGE=\'I\', the indices (in ascending order) of the\n*          smallest and largest eigenvalues to be returned.\n*          1 <= IL <= IU <= N, if N > 0; IL = 1 and IU = 0 if N = 0.\n*          Not referenced if RANGE = \'A\' or \'V\'.\n*\n*  ABSTOL  (input) REAL\n*          The absolute error tolerance for the eigenvalues.\n*          An approximate eigenvalue is accepted as converged\n*          when it is determined to lie in an interval [a,b]\n*          of width less than or equal to\n*\n*                  ABSTOL + EPS *   max( |a|,|b| ) ,\n*\n*          where EPS is the machine precision.  If ABSTOL is less than\n*          or equal to zero, then  EPS*|T|  will be used in its place,\n*          where |T| is the 1-norm of the tridiagonal matrix obtained\n*          by reducing A to tridiagonal form.\n*\n*          Eigenvalues will be computed most accurately when ABSTOL is\n*          set to twice the underflow threshold 2*SLAMCH(\'S\'), not zero.\n*          If this routine returns with INFO>0, indicating that some\n*          eigenvectors did not converge, try setting ABSTOL to\n*          2*SLAMCH(\'S\').\n*\n*          See \"Computing Small Singular Values of Bidiagonal Matrices\n*          with Guaranteed High Relative Accuracy,\" by Demmel and\n*          Kahan, LAPACK Working Note #3.\n*\n*  M       (output) INTEGER\n*          The total number of eigenvalues found.  0 <= M <= N.\n*          If RANGE = \'A\', M = N, and if RANGE = \'I\', M = IU-IL+1.\n*\n*  W       (output) REAL array, dimension (N)\n*          On normal exit, the first M elements contain the selected\n*          eigenvalues in ascending order.\n*\n*  Z       (output) COMPLEX array, dimension (LDZ, max(1,M))\n*          If JOBZ = \'V\', then if INFO = 0, the first M columns of Z\n*          contain the orthonormal eigenvectors of the matrix A\n*          corresponding to the selected eigenvalues, with the i-th\n*          column of Z holding the eigenvector associated with W(i).\n*          If an eigenvector fails to converge, then that column of Z\n*          contains the latest approximation to the eigenvector, and the\n*          index of the eigenvector is returned in IFAIL.\n*          If JOBZ = \'N\', then Z is not referenced.\n*          Note: the user must ensure that at least max(1,M) columns are\n*          supplied in the array Z; if RANGE = \'V\', the exact value of M\n*          is not known in advance and an upper bound must be used.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace/output) COMPLEX array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The length of the array WORK.  LWORK >= 1, when N <= 1;\n*          otherwise 2*N.\n*          For optimal efficiency, LWORK >= (NB+1)*N,\n*          where NB is the max of the blocksize for CHETRD and for\n*          CUNMTR as returned by ILAENV.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  RWORK   (workspace) REAL array, dimension (7*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (5*N)\n*\n*  IFAIL   (output) INTEGER array, dimension (N)\n*          If JOBZ = \'V\', then if INFO = 0, the first M elements of\n*          IFAIL are zero.  If INFO > 0, then IFAIL contains the\n*          indices of the eigenvectors that failed to converge.\n*          If JOBZ = \'N\', then IFAIL is not referenced.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, then i eigenvectors failed to converge.\n*                Their indices are stored in array IFAIL.\n*\n'),(120,'zheevx_120.txt','      SUBROUTINE ZHEEVX( JOBZ, RANGE, UPLO, N, A, LDA, VL, VU, IL, IU,\n     $                   ABSTOL, M, W, Z, LDZ, WORK, LWORK, RWORK,\n     $                   IWORK, IFAIL, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n* @precisions normal z -> c\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, RANGE, UPLO\n      INTEGER            IL, INFO, IU, LDA, LDZ, LWORK, M, N\n      DOUBLE PRECISION   ABSTOL, VL, VU\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IFAIL( * ), IWORK( * )\n      DOUBLE PRECISION   RWORK( * ), W( * )\n      COMPLEX*16         A( LDA, * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZHEEVX computes selected eigenvalues and, optionally, eigenvectors\n*  of a complex Hermitian matrix A.  Eigenvalues and eigenvectors can\n*  be selected by specifying either a range of values or a range of\n*  indices for the desired eigenvalues.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  RANGE   (input) CHARACTER*1\n*          = \'A\': all eigenvalues will be found.\n*          = \'V\': all eigenvalues in the half-open interval (VL,VU]\n*                 will be found.\n*          = \'I\': the IL-th through IU-th eigenvalues will be found.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) COMPLEX*16 array, dimension (LDA, N)\n*          On entry, the Hermitian matrix A.  If UPLO = \'U\', the\n*          leading N-by-N upper triangular part of A contains the\n*          upper triangular part of the matrix A.  If UPLO = \'L\',\n*          the leading N-by-N lower triangular part of A contains\n*          the lower triangular part of the matrix A.\n*          On exit, the lower triangle (if UPLO=\'L\') or the upper\n*          triangle (if UPLO=\'U\') of A, including the diagonal, is\n*          destroyed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  VL      (input) DOUBLE PRECISION\n*  VU      (input) DOUBLE PRECISION\n*          If RANGE=\'V\', the lower and upper bounds of the interval to\n*          be searched for eigenvalues. VL < VU.\n*          Not referenced if RANGE = \'A\' or \'I\'.\n*\n*  IL      (input) INTEGER\n*  IU      (input) INTEGER\n*          If RANGE=\'I\', the indices (in ascending order) of the\n*          smallest and largest eigenvalues to be returned.\n*          1 <= IL <= IU <= N, if N > 0; IL = 1 and IU = 0 if N = 0.\n*          Not referenced if RANGE = \'A\' or \'V\'.\n*\n*  ABSTOL  (input) DOUBLE PRECISION\n*          The absolute error tolerance for the eigenvalues.\n*          An approximate eigenvalue is accepted as converged\n*          when it is determined to lie in an interval [a,b]\n*          of width less than or equal to\n*\n*                  ABSTOL + EPS *   max( |a|,|b| ) ,\n*\n*          where EPS is the machine precision.  If ABSTOL is less than\n*          or equal to zero, then  EPS*|T|  will be used in its place,\n*          where |T| is the 1-norm of the tridiagonal matrix obtained\n*          by reducing A to tridiagonal form.\n*\n*          Eigenvalues will be computed most accurately when ABSTOL is\n*          set to twice the underflow threshold 2*DLAMCH(\'S\'), not zero.\n*          If this routine returns with INFO>0, indicating that some\n*          eigenvectors did not converge, try setting ABSTOL to\n*          2*DLAMCH(\'S\').\n*\n*          See \"Computing Small Singular Values of Bidiagonal Matrices\n*          with Guaranteed High Relative Accuracy,\" by Demmel and\n*          Kahan, LAPACK Working Note #3.\n*\n*  M       (output) INTEGER\n*          The total number of eigenvalues found.  0 <= M <= N.\n*          If RANGE = \'A\', M = N, and if RANGE = \'I\', M = IU-IL+1.\n*\n*  W       (output) DOUBLE PRECISION array, dimension (N)\n*          On normal exit, the first M elements contain the selected\n*          eigenvalues in ascending order.\n*\n*  Z       (output) COMPLEX*16 array, dimension (LDZ, max(1,M))\n*          If JOBZ = \'V\', then if INFO = 0, the first M columns of Z\n*          contain the orthonormal eigenvectors of the matrix A\n*          corresponding to the selected eigenvalues, with the i-th\n*          column of Z holding the eigenvector associated with W(i).\n*          If an eigenvector fails to converge, then that column of Z\n*          contains the latest approximation to the eigenvector, and the\n*          index of the eigenvector is returned in IFAIL.\n*          If JOBZ = \'N\', then Z is not referenced.\n*          Note: the user must ensure that at least max(1,M) columns are\n*          supplied in the array Z; if RANGE = \'V\', the exact value of M\n*          is not known in advance and an upper bound must be used.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace/output) COMPLEX*16 array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The length of the array WORK.  LWORK >= 1, when N <= 1;\n*          otherwise 2*N.\n*          For optimal efficiency, LWORK >= (NB+1)*N,\n*          where NB is the max of the blocksize for ZHETRD and for\n*          ZUNMTR as returned by ILAENV.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (7*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (5*N)\n*\n*  IFAIL   (output) INTEGER array, dimension (N)\n*          If JOBZ = \'V\', then if INFO = 0, the first M elements of\n*          IFAIL are zero.  If INFO > 0, then IFAIL contains the\n*          indices of the eigenvectors that failed to converge.\n*          If JOBZ = \'N\', then IFAIL is not referenced.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, then i eigenvectors failed to converge.\n*                Their indices are stored in array IFAIL.\n*\n'),(121,'chbevx_121.txt','      SUBROUTINE CHBEVX( JOBZ, RANGE, UPLO, N, KD, AB, LDAB, Q, LDQ, VL,\n     $                   VU, IL, IU, ABSTOL, M, W, Z, LDZ, WORK, RWORK,\n     $                   IWORK, IFAIL, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, RANGE, UPLO\n      INTEGER            IL, INFO, IU, KD, LDAB, LDQ, LDZ, M, N\n      REAL               ABSTOL, VL, VU\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IFAIL( * ), IWORK( * )\n      REAL               RWORK( * ), W( * )\n      COMPLEX            AB( LDAB, * ), Q( LDQ, * ), WORK( * ),\n     $                   Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CHBEVX computes selected eigenvalues and, optionally, eigenvectors\n*  of a complex Hermitian band matrix A.  Eigenvalues and eigenvectors\n*  can be selected by specifying either a range of values or a range of\n*  indices for the desired eigenvalues.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  RANGE   (input) CHARACTER*1\n*          = \'A\': all eigenvalues will be found;\n*          = \'V\': all eigenvalues in the half-open interval (VL,VU]\n*                 will be found;\n*          = \'I\': the IL-th through IU-th eigenvalues will be found.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KD >= 0.\n*\n*  AB      (input/output) COMPLEX array, dimension (LDAB, N)\n*          On entry, the upper or lower triangle of the Hermitian band\n*          matrix A, stored in the first KD+1 rows of the array.  The\n*          j-th column of A is stored in the j-th column of the array AB\n*          as follows:\n*          if UPLO = \'U\', AB(kd+1+i-j,j) = A(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+kd).\n*\n*          On exit, AB is overwritten by values generated during the\n*          reduction to tridiagonal form.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD + 1.\n*\n*  Q       (output) COMPLEX array, dimension (LDQ, N)\n*          If JOBZ = \'V\', the N-by-N unitary matrix used in the\n*                          reduction to tridiagonal form.\n*          If JOBZ = \'N\', the array Q is not referenced.\n*\n*  LDQ     (input) INTEGER\n*          The leading dimension of the array Q.  If JOBZ = \'V\', then\n*          LDQ >= max(1,N).\n*\n*  VL      (input) REAL\n*  VU      (input) REAL\n*          If RANGE=\'V\', the lower and upper bounds of the interval to\n*          be searched for eigenvalues. VL < VU.\n*          Not referenced if RANGE = \'A\' or \'I\'.\n*\n*  IL      (input) INTEGER\n*  IU      (input) INTEGER\n*          If RANGE=\'I\', the indices (in ascending order) of the\n*          smallest and largest eigenvalues to be returned.\n*          1 <= IL <= IU <= N, if N > 0; IL = 1 and IU = 0 if N = 0.\n*          Not referenced if RANGE = \'A\' or \'V\'.\n*\n*  ABSTOL  (input) REAL\n*          The absolute error tolerance for the eigenvalues.\n*          An approximate eigenvalue is accepted as converged\n*          when it is determined to lie in an interval [a,b]\n*          of width less than or equal to\n*\n*                  ABSTOL + EPS *   max( |a|,|b| ) ,\n*\n*          where EPS is the machine precision.  If ABSTOL is less than\n*          or equal to zero, then  EPS*|T|  will be used in its place,\n*          where |T| is the 1-norm of the tridiagonal matrix obtained\n*          by reducing AB to tridiagonal form.\n*\n*          Eigenvalues will be computed most accurately when ABSTOL is\n*          set to twice the underflow threshold 2*SLAMCH(\'S\'), not zero.\n*          If this routine returns with INFO>0, indicating that some\n*          eigenvectors did not converge, try setting ABSTOL to\n*          2*SLAMCH(\'S\').\n*\n*          See \"Computing Small Singular Values of Bidiagonal Matrices\n*          with Guaranteed High Relative Accuracy,\" by Demmel and\n*          Kahan, LAPACK Working Note #3.\n*\n*  M       (output) INTEGER\n*          The total number of eigenvalues found.  0 <= M <= N.\n*          If RANGE = \'A\', M = N, and if RANGE = \'I\', M = IU-IL+1.\n*\n*  W       (output) REAL array, dimension (N)\n*          The first M elements contain the selected eigenvalues in\n*          ascending order.\n*\n*  Z       (output) COMPLEX array, dimension (LDZ, max(1,M))\n*          If JOBZ = \'V\', then if INFO = 0, the first M columns of Z\n*          contain the orthonormal eigenvectors of the matrix A\n*          corresponding to the selected eigenvalues, with the i-th\n*          column of Z holding the eigenvector associated with W(i).\n*          If an eigenvector fails to converge, then that column of Z\n*          contains the latest approximation to the eigenvector, and the\n*          index of the eigenvector is returned in IFAIL.\n*          If JOBZ = \'N\', then Z is not referenced.\n*          Note: the user must ensure that at least max(1,M) columns are\n*          supplied in the array Z; if RANGE = \'V\', the exact value of M\n*          is not known in advance and an upper bound must be used.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace) COMPLEX array, dimension (N)\n*\n*  RWORK   (workspace) REAL array, dimension (7*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (5*N)\n*\n*  IFAIL   (output) INTEGER array, dimension (N)\n*          If JOBZ = \'V\', then if INFO = 0, the first M elements of\n*          IFAIL are zero.  If INFO > 0, then IFAIL contains the\n*          indices of the eigenvectors that failed to converge.\n*          If JOBZ = \'N\', then IFAIL is not referenced.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, then i eigenvectors failed to converge.\n*                Their indices are stored in array IFAIL.\n*\n'),(122,'zhbevx_122.txt','      SUBROUTINE ZHBEVX( JOBZ, RANGE, UPLO, N, KD, AB, LDAB, Q, LDQ, VL,\n     $                   VU, IL, IU, ABSTOL, M, W, Z, LDZ, WORK, RWORK,\n     $                   IWORK, IFAIL, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, RANGE, UPLO\n      INTEGER            IL, INFO, IU, KD, LDAB, LDQ, LDZ, M, N\n      DOUBLE PRECISION   ABSTOL, VL, VU\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IFAIL( * ), IWORK( * )\n      DOUBLE PRECISION   RWORK( * ), W( * )\n      COMPLEX*16         AB( LDAB, * ), Q( LDQ, * ), WORK( * ),\n     $                   Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZHBEVX computes selected eigenvalues and, optionally, eigenvectors\n*  of a complex Hermitian band matrix A.  Eigenvalues and eigenvectors\n*  can be selected by specifying either a range of values or a range of\n*  indices for the desired eigenvalues.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  RANGE   (input) CHARACTER*1\n*          = \'A\': all eigenvalues will be found;\n*          = \'V\': all eigenvalues in the half-open interval (VL,VU]\n*                 will be found;\n*          = \'I\': the IL-th through IU-th eigenvalues will be found.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KD >= 0.\n*\n*  AB      (input/output) COMPLEX*16 array, dimension (LDAB, N)\n*          On entry, the upper or lower triangle of the Hermitian band\n*          matrix A, stored in the first KD+1 rows of the array.  The\n*          j-th column of A is stored in the j-th column of the array AB\n*          as follows:\n*          if UPLO = \'U\', AB(kd+1+i-j,j) = A(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+kd).\n*\n*          On exit, AB is overwritten by values generated during the\n*          reduction to tridiagonal form.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD + 1.\n*\n*  Q       (output) COMPLEX*16 array, dimension (LDQ, N)\n*          If JOBZ = \'V\', the N-by-N unitary matrix used in the\n*                          reduction to tridiagonal form.\n*          If JOBZ = \'N\', the array Q is not referenced.\n*\n*  LDQ     (input) INTEGER\n*          The leading dimension of the array Q.  If JOBZ = \'V\', then\n*          LDQ >= max(1,N).\n*\n*  VL      (input) DOUBLE PRECISION\n*  VU      (input) DOUBLE PRECISION\n*          If RANGE=\'V\', the lower and upper bounds of the interval to\n*          be searched for eigenvalues. VL < VU.\n*          Not referenced if RANGE = \'A\' or \'I\'.\n*\n*  IL      (input) INTEGER\n*  IU      (input) INTEGER\n*          If RANGE=\'I\', the indices (in ascending order) of the\n*          smallest and largest eigenvalues to be returned.\n*          1 <= IL <= IU <= N, if N > 0; IL = 1 and IU = 0 if N = 0.\n*          Not referenced if RANGE = \'A\' or \'V\'.\n*\n*  ABSTOL  (input) DOUBLE PRECISION\n*          The absolute error tolerance for the eigenvalues.\n*          An approximate eigenvalue is accepted as converged\n*          when it is determined to lie in an interval [a,b]\n*          of width less than or equal to\n*\n*                  ABSTOL + EPS *   max( |a|,|b| ) ,\n*\n*          where EPS is the machine precision.  If ABSTOL is less than\n*          or equal to zero, then  EPS*|T|  will be used in its place,\n*          where |T| is the 1-norm of the tridiagonal matrix obtained\n*          by reducing AB to tridiagonal form.\n*\n*          Eigenvalues will be computed most accurately when ABSTOL is\n*          set to twice the underflow threshold 2*DLAMCH(\'S\'), not zero.\n*          If this routine returns with INFO>0, indicating that some\n*          eigenvectors did not converge, try setting ABSTOL to\n*          2*DLAMCH(\'S\').\n*\n*          See \"Computing Small Singular Values of Bidiagonal Matrices\n*          with Guaranteed High Relative Accuracy,\" by Demmel and\n*          Kahan, LAPACK Working Note #3.\n*\n*  M       (output) INTEGER\n*          The total number of eigenvalues found.  0 <= M <= N.\n*          If RANGE = \'A\', M = N, and if RANGE = \'I\', M = IU-IL+1.\n*\n*  W       (output) DOUBLE PRECISION array, dimension (N)\n*          The first M elements contain the selected eigenvalues in\n*          ascending order.\n*\n*  Z       (output) COMPLEX*16 array, dimension (LDZ, max(1,M))\n*          If JOBZ = \'V\', then if INFO = 0, the first M columns of Z\n*          contain the orthonormal eigenvectors of the matrix A\n*          corresponding to the selected eigenvalues, with the i-th\n*          column of Z holding the eigenvector associated with W(i).\n*          If an eigenvector fails to converge, then that column of Z\n*          contains the latest approximation to the eigenvector, and the\n*          index of the eigenvector is returned in IFAIL.\n*          If JOBZ = \'N\', then Z is not referenced.\n*          Note: the user must ensure that at least max(1,M) columns are\n*          supplied in the array Z; if RANGE = \'V\', the exact value of M\n*          is not known in advance and an upper bound must be used.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (N)\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (7*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (5*N)\n*\n*  IFAIL   (output) INTEGER array, dimension (N)\n*          If JOBZ = \'V\', then if INFO = 0, the first M elements of\n*          IFAIL are zero.  If INFO > 0, then IFAIL contains the\n*          indices of the eigenvectors that failed to converge.\n*          If JOBZ = \'N\', then IFAIL is not referenced.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, then i eigenvectors failed to converge.\n*                Their indices are stored in array IFAIL.\n*\n'),(123,'chpevx_123.txt','      SUBROUTINE CHPEVX( JOBZ, RANGE, UPLO, N, AP, VL, VU, IL, IU,\n     $                   ABSTOL, M, W, Z, LDZ, WORK, RWORK, IWORK,\n     $                   IFAIL, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, RANGE, UPLO\n      INTEGER            IL, INFO, IU, LDZ, M, N\n      REAL               ABSTOL, VL, VU\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IFAIL( * ), IWORK( * )\n      REAL               RWORK( * ), W( * )\n      COMPLEX            AP( * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CHPEVX computes selected eigenvalues and, optionally, eigenvectors\n*  of a complex Hermitian matrix A in packed storage.\n*  Eigenvalues/vectors can be selected by specifying either a range of\n*  values or a range of indices for the desired eigenvalues.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  RANGE   (input) CHARACTER*1\n*          = \'A\': all eigenvalues will be found;\n*          = \'V\': all eigenvalues in the half-open interval (VL,VU]\n*                 will be found;\n*          = \'I\': the IL-th through IU-th eigenvalues will be found.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input/output) COMPLEX array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the Hermitian matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*\n*          On exit, AP is overwritten by values generated during the\n*          reduction to tridiagonal form.  If UPLO = \'U\', the diagonal\n*          and first superdiagonal of the tridiagonal matrix T overwrite\n*          the corresponding elements of A, and if UPLO = \'L\', the\n*          diagonal and first subdiagonal of T overwrite the\n*          corresponding elements of A.\n*\n*  VL      (input) REAL\n*  VU      (input) REAL\n*          If RANGE=\'V\', the lower and upper bounds of the interval to\n*          be searched for eigenvalues. VL < VU.\n*          Not referenced if RANGE = \'A\' or \'I\'.\n*\n*  IL      (input) INTEGER\n*  IU      (input) INTEGER\n*          If RANGE=\'I\', the indices (in ascending order) of the\n*          smallest and largest eigenvalues to be returned.\n*          1 <= IL <= IU <= N, if N > 0; IL = 1 and IU = 0 if N = 0.\n*          Not referenced if RANGE = \'A\' or \'V\'.\n*\n*  ABSTOL  (input) REAL\n*          The absolute error tolerance for the eigenvalues.\n*          An approximate eigenvalue is accepted as converged\n*          when it is determined to lie in an interval [a,b]\n*          of width less than or equal to\n*\n*                  ABSTOL + EPS *   max( |a|,|b| ) ,\n*\n*          where EPS is the machine precision.  If ABSTOL is less than\n*          or equal to zero, then  EPS*|T|  will be used in its place,\n*          where |T| is the 1-norm of the tridiagonal matrix obtained\n*          by reducing AP to tridiagonal form.\n*\n*          Eigenvalues will be computed most accurately when ABSTOL is\n*          set to twice the underflow threshold 2*SLAMCH(\'S\'), not zero.\n*          If this routine returns with INFO>0, indicating that some\n*          eigenvectors did not converge, try setting ABSTOL to\n*          2*SLAMCH(\'S\').\n*\n*          See \"Computing Small Singular Values of Bidiagonal Matrices\n*          with Guaranteed High Relative Accuracy,\" by Demmel and\n*          Kahan, LAPACK Working Note #3.\n*\n*  M       (output) INTEGER\n*          The total number of eigenvalues found.  0 <= M <= N.\n*          If RANGE = \'A\', M = N, and if RANGE = \'I\', M = IU-IL+1.\n*\n*  W       (output) REAL array, dimension (N)\n*          If INFO = 0, the selected eigenvalues in ascending order.\n*\n*  Z       (output) COMPLEX array, dimension (LDZ, max(1,M))\n*          If JOBZ = \'V\', then if INFO = 0, the first M columns of Z\n*          contain the orthonormal eigenvectors of the matrix A\n*          corresponding to the selected eigenvalues, with the i-th\n*          column of Z holding the eigenvector associated with W(i).\n*          If an eigenvector fails to converge, then that column of Z\n*          contains the latest approximation to the eigenvector, and\n*          the index of the eigenvector is returned in IFAIL.\n*          If JOBZ = \'N\', then Z is not referenced.\n*          Note: the user must ensure that at least max(1,M) columns are\n*          supplied in the array Z; if RANGE = \'V\', the exact value of M\n*          is not known in advance and an upper bound must be used.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace) COMPLEX array, dimension (2*N)\n*\n*  RWORK   (workspace) REAL array, dimension (7*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (5*N)\n*\n*  IFAIL   (output) INTEGER array, dimension (N)\n*          If JOBZ = \'V\', then if INFO = 0, the first M elements of\n*          IFAIL are zero.  If INFO > 0, then IFAIL contains the\n*          indices of the eigenvectors that failed to converge.\n*          If JOBZ = \'N\', then IFAIL is not referenced.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, then i eigenvectors failed to converge.\n*                Their indices are stored in array IFAIL.\n*\n'),(124,'zhpevx_124.txt','      SUBROUTINE ZHPEVX( JOBZ, RANGE, UPLO, N, AP, VL, VU, IL, IU,\n     $                   ABSTOL, M, W, Z, LDZ, WORK, RWORK, IWORK,\n     $                   IFAIL, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, RANGE, UPLO\n      INTEGER            IL, INFO, IU, LDZ, M, N\n      DOUBLE PRECISION   ABSTOL, VL, VU\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IFAIL( * ), IWORK( * )\n      DOUBLE PRECISION   RWORK( * ), W( * )\n      COMPLEX*16         AP( * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZHPEVX computes selected eigenvalues and, optionally, eigenvectors\n*  of a complex Hermitian matrix A in packed storage.\n*  Eigenvalues/vectors can be selected by specifying either a range of\n*  values or a range of indices for the desired eigenvalues.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  RANGE   (input) CHARACTER*1\n*          = \'A\': all eigenvalues will be found;\n*          = \'V\': all eigenvalues in the half-open interval (VL,VU]\n*                 will be found;\n*          = \'I\': the IL-th through IU-th eigenvalues will be found.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input/output) COMPLEX*16 array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the Hermitian matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*\n*          On exit, AP is overwritten by values generated during the\n*          reduction to tridiagonal form.  If UPLO = \'U\', the diagonal\n*          and first superdiagonal of the tridiagonal matrix T overwrite\n*          the corresponding elements of A, and if UPLO = \'L\', the\n*          diagonal and first subdiagonal of T overwrite the\n*          corresponding elements of A.\n*\n*  VL      (input) DOUBLE PRECISION\n*  VU      (input) DOUBLE PRECISION\n*          If RANGE=\'V\', the lower and upper bounds of the interval to\n*          be searched for eigenvalues. VL < VU.\n*          Not referenced if RANGE = \'A\' or \'I\'.\n*\n*  IL      (input) INTEGER\n*  IU      (input) INTEGER\n*          If RANGE=\'I\', the indices (in ascending order) of the\n*          smallest and largest eigenvalues to be returned.\n*          1 <= IL <= IU <= N, if N > 0; IL = 1 and IU = 0 if N = 0.\n*          Not referenced if RANGE = \'A\' or \'V\'.\n*\n*  ABSTOL  (input) DOUBLE PRECISION\n*          The absolute error tolerance for the eigenvalues.\n*          An approximate eigenvalue is accepted as converged\n*          when it is determined to lie in an interval [a,b]\n*          of width less than or equal to\n*\n*                  ABSTOL + EPS *   max( |a|,|b| ) ,\n*\n*          where EPS is the machine precision.  If ABSTOL is less than\n*          or equal to zero, then  EPS*|T|  will be used in its place,\n*          where |T| is the 1-norm of the tridiagonal matrix obtained\n*          by reducing AP to tridiagonal form.\n*\n*          Eigenvalues will be computed most accurately when ABSTOL is\n*          set to twice the underflow threshold 2*DLAMCH(\'S\'), not zero.\n*          If this routine returns with INFO>0, indicating that some\n*          eigenvectors did not converge, try setting ABSTOL to\n*          2*DLAMCH(\'S\').\n*\n*          See \"Computing Small Singular Values of Bidiagonal Matrices\n*          with Guaranteed High Relative Accuracy,\" by Demmel and\n*          Kahan, LAPACK Working Note #3.\n*\n*  M       (output) INTEGER\n*          The total number of eigenvalues found.  0 <= M <= N.\n*          If RANGE = \'A\', M = N, and if RANGE = \'I\', M = IU-IL+1.\n*\n*  W       (output) DOUBLE PRECISION array, dimension (N)\n*          If INFO = 0, the selected eigenvalues in ascending order.\n*\n*  Z       (output) COMPLEX*16 array, dimension (LDZ, max(1,M))\n*          If JOBZ = \'V\', then if INFO = 0, the first M columns of Z\n*          contain the orthonormal eigenvectors of the matrix A\n*          corresponding to the selected eigenvalues, with the i-th\n*          column of Z holding the eigenvector associated with W(i).\n*          If an eigenvector fails to converge, then that column of Z\n*          contains the latest approximation to the eigenvector, and\n*          the index of the eigenvector is returned in IFAIL.\n*          If JOBZ = \'N\', then Z is not referenced.\n*          Note: the user must ensure that at least max(1,M) columns are\n*          supplied in the array Z; if RANGE = \'V\', the exact value of M\n*          is not known in advance and an upper bound must be used.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (7*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (5*N)\n*\n*  IFAIL   (output) INTEGER array, dimension (N)\n*          If JOBZ = \'V\', then if INFO = 0, the first M elements of\n*          IFAIL are zero.  If INFO > 0, then IFAIL contains the\n*          indices of the eigenvectors that failed to converge.\n*          If JOBZ = \'N\', then IFAIL is not referenced.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, then i eigenvectors failed to converge.\n*                Their indices are stored in array IFAIL.\n*\n'),(125,'ssyevx_125.txt','      SUBROUTINE SSYEVX( JOBZ, RANGE, UPLO, N, A, LDA, VL, VU, IL, IU,\n     $                   ABSTOL, M, W, Z, LDZ, WORK, LWORK, IWORK,\n     $                   IFAIL, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, RANGE, UPLO\n      INTEGER            IL, INFO, IU, LDA, LDZ, LWORK, M, N\n      REAL               ABSTOL, VL, VU\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IFAIL( * ), IWORK( * )\n      REAL               A( LDA, * ), W( * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SSYEVX computes selected eigenvalues and, optionally, eigenvectors\n*  of a real symmetric matrix A.  Eigenvalues and eigenvectors can be\n*  selected by specifying either a range of values or a range of indices\n*  for the desired eigenvalues.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  RANGE   (input) CHARACTER*1\n*          = \'A\': all eigenvalues will be found.\n*          = \'V\': all eigenvalues in the half-open interval (VL,VU]\n*                 will be found.\n*          = \'I\': the IL-th through IU-th eigenvalues will be found.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) REAL array, dimension (LDA, N)\n*          On entry, the symmetric matrix A.  If UPLO = \'U\', the\n*          leading N-by-N upper triangular part of A contains the\n*          upper triangular part of the matrix A.  If UPLO = \'L\',\n*          the leading N-by-N lower triangular part of A contains\n*          the lower triangular part of the matrix A.\n*          On exit, the lower triangle (if UPLO=\'L\') or the upper\n*          triangle (if UPLO=\'U\') of A, including the diagonal, is\n*          destroyed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  VL      (input) REAL\n*  VU      (input) REAL\n*          If RANGE=\'V\', the lower and upper bounds of the interval to\n*          be searched for eigenvalues. VL < VU.\n*          Not referenced if RANGE = \'A\' or \'I\'.\n*\n*  IL      (input) INTEGER\n*  IU      (input) INTEGER\n*          If RANGE=\'I\', the indices (in ascending order) of the\n*          smallest and largest eigenvalues to be returned.\n*          1 <= IL <= IU <= N, if N > 0; IL = 1 and IU = 0 if N = 0.\n*          Not referenced if RANGE = \'A\' or \'V\'.\n*\n*  ABSTOL  (input) REAL\n*          The absolute error tolerance for the eigenvalues.\n*          An approximate eigenvalue is accepted as converged\n*          when it is determined to lie in an interval [a,b]\n*          of width less than or equal to\n*\n*                  ABSTOL + EPS *   max( |a|,|b| ) ,\n*\n*          where EPS is the machine precision.  If ABSTOL is less than\n*          or equal to zero, then  EPS*|T|  will be used in its place,\n*          where |T| is the 1-norm of the tridiagonal matrix obtained\n*          by reducing A to tridiagonal form.\n*\n*          Eigenvalues will be computed most accurately when ABSTOL is\n*          set to twice the underflow threshold 2*SLAMCH(\'S\'), not zero.\n*          If this routine returns with INFO>0, indicating that some\n*          eigenvectors did not converge, try setting ABSTOL to\n*          2*SLAMCH(\'S\').\n*\n*          See \"Computing Small Singular Values of Bidiagonal Matrices\n*          with Guaranteed High Relative Accuracy,\" by Demmel and\n*          Kahan, LAPACK Working Note #3.\n*\n*  M       (output) INTEGER\n*          The total number of eigenvalues found.  0 <= M <= N.\n*          If RANGE = \'A\', M = N, and if RANGE = \'I\', M = IU-IL+1.\n*\n*  W       (output) REAL array, dimension (N)\n*          On normal exit, the first M elements contain the selected\n*          eigenvalues in ascending order.\n*\n*  Z       (output) REAL array, dimension (LDZ, max(1,M))\n*          If JOBZ = \'V\', then if INFO = 0, the first M columns of Z\n*          contain the orthonormal eigenvectors of the matrix A\n*          corresponding to the selected eigenvalues, with the i-th\n*          column of Z holding the eigenvector associated with W(i).\n*          If an eigenvector fails to converge, then that column of Z\n*          contains the latest approximation to the eigenvector, and the\n*          index of the eigenvector is returned in IFAIL.\n*          If JOBZ = \'N\', then Z is not referenced.\n*          Note: the user must ensure that at least max(1,M) columns are\n*          supplied in the array Z; if RANGE = \'V\', the exact value of M\n*          is not known in advance and an upper bound must be used.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace/output) REAL array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The length of the array WORK.  LWORK >= 1, when N <= 1;\n*          otherwise 8*N.\n*          For optimal efficiency, LWORK >= (NB+3)*N,\n*          where NB is the max of the blocksize for SSYTRD and SORMTR\n*          returned by ILAENV.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  IWORK   (workspace) INTEGER array, dimension (5*N)\n*\n*  IFAIL   (output) INTEGER array, dimension (N)\n*          If JOBZ = \'V\', then if INFO = 0, the first M elements of\n*          IFAIL are zero.  If INFO > 0, then IFAIL contains the\n*          indices of the eigenvectors that failed to converge.\n*          If JOBZ = \'N\', then IFAIL is not referenced.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, then i eigenvectors failed to converge.\n*                Their indices are stored in array IFAIL.\n*\n'),(126,'dsyevx_126.txt','      SUBROUTINE DSYEVX( JOBZ, RANGE, UPLO, N, A, LDA, VL, VU, IL, IU,\n     $                   ABSTOL, M, W, Z, LDZ, WORK, LWORK, IWORK,\n     $                   IFAIL, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, RANGE, UPLO\n      INTEGER            IL, INFO, IU, LDA, LDZ, LWORK, M, N\n      DOUBLE PRECISION   ABSTOL, VL, VU\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IFAIL( * ), IWORK( * )\n      DOUBLE PRECISION   A( LDA, * ), W( * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DSYEVX computes selected eigenvalues and, optionally, eigenvectors\n*  of a real symmetric matrix A.  Eigenvalues and eigenvectors can be\n*  selected by specifying either a range of values or a range of indices\n*  for the desired eigenvalues.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  RANGE   (input) CHARACTER*1\n*          = \'A\': all eigenvalues will be found.\n*          = \'V\': all eigenvalues in the half-open interval (VL,VU]\n*                 will be found.\n*          = \'I\': the IL-th through IU-th eigenvalues will be found.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) DOUBLE PRECISION array, dimension (LDA, N)\n*          On entry, the symmetric matrix A.  If UPLO = \'U\', the\n*          leading N-by-N upper triangular part of A contains the\n*          upper triangular part of the matrix A.  If UPLO = \'L\',\n*          the leading N-by-N lower triangular part of A contains\n*          the lower triangular part of the matrix A.\n*          On exit, the lower triangle (if UPLO=\'L\') or the upper\n*          triangle (if UPLO=\'U\') of A, including the diagonal, is\n*          destroyed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  VL      (input) DOUBLE PRECISION\n*  VU      (input) DOUBLE PRECISION\n*          If RANGE=\'V\', the lower and upper bounds of the interval to\n*          be searched for eigenvalues. VL < VU.\n*          Not referenced if RANGE = \'A\' or \'I\'.\n*\n*  IL      (input) INTEGER\n*  IU      (input) INTEGER\n*          If RANGE=\'I\', the indices (in ascending order) of the\n*          smallest and largest eigenvalues to be returned.\n*          1 <= IL <= IU <= N, if N > 0; IL = 1 and IU = 0 if N = 0.\n*          Not referenced if RANGE = \'A\' or \'V\'.\n*\n*  ABSTOL  (input) DOUBLE PRECISION\n*          The absolute error tolerance for the eigenvalues.\n*          An approximate eigenvalue is accepted as converged\n*          when it is determined to lie in an interval [a,b]\n*          of width less than or equal to\n*\n*                  ABSTOL + EPS *   max( |a|,|b| ) ,\n*\n*          where EPS is the machine precision.  If ABSTOL is less than\n*          or equal to zero, then  EPS*|T|  will be used in its place,\n*          where |T| is the 1-norm of the tridiagonal matrix obtained\n*          by reducing A to tridiagonal form.\n*\n*          Eigenvalues will be computed most accurately when ABSTOL is\n*          set to twice the underflow threshold 2*DLAMCH(\'S\'), not zero.\n*          If this routine returns with INFO>0, indicating that some\n*          eigenvectors did not converge, try setting ABSTOL to\n*          2*DLAMCH(\'S\').\n*\n*          See \"Computing Small Singular Values of Bidiagonal Matrices\n*          with Guaranteed High Relative Accuracy,\" by Demmel and\n*          Kahan, LAPACK Working Note #3.\n*\n*  M       (output) INTEGER\n*          The total number of eigenvalues found.  0 <= M <= N.\n*          If RANGE = \'A\', M = N, and if RANGE = \'I\', M = IU-IL+1.\n*\n*  W       (output) DOUBLE PRECISION array, dimension (N)\n*          On normal exit, the first M elements contain the selected\n*          eigenvalues in ascending order.\n*\n*  Z       (output) DOUBLE PRECISION array, dimension (LDZ, max(1,M))\n*          If JOBZ = \'V\', then if INFO = 0, the first M columns of Z\n*          contain the orthonormal eigenvectors of the matrix A\n*          corresponding to the selected eigenvalues, with the i-th\n*          column of Z holding the eigenvector associated with W(i).\n*          If an eigenvector fails to converge, then that column of Z\n*          contains the latest approximation to the eigenvector, and the\n*          index of the eigenvector is returned in IFAIL.\n*          If JOBZ = \'N\', then Z is not referenced.\n*          Note: the user must ensure that at least max(1,M) columns are\n*          supplied in the array Z; if RANGE = \'V\', the exact value of M\n*          is not known in advance and an upper bound must be used.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace/output) DOUBLE PRECISION array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The length of the array WORK.  LWORK >= 1, when N <= 1;\n*          otherwise 8*N.\n*          For optimal efficiency, LWORK >= (NB+3)*N,\n*          where NB is the max of the blocksize for DSYTRD and DORMTR\n*          returned by ILAENV.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  IWORK   (workspace) INTEGER array, dimension (5*N)\n*\n*  IFAIL   (output) INTEGER array, dimension (N)\n*          If JOBZ = \'V\', then if INFO = 0, the first M elements of\n*          IFAIL are zero.  If INFO > 0, then IFAIL contains the\n*          indices of the eigenvectors that failed to converge.\n*          If JOBZ = \'N\', then IFAIL is not referenced.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, then i eigenvectors failed to converge.\n*                Their indices are stored in array IFAIL.\n*\n'),(127,'ssbevx_127.txt','      SUBROUTINE SSBEVX( JOBZ, RANGE, UPLO, N, KD, AB, LDAB, Q, LDQ, VL,\n     $                   VU, IL, IU, ABSTOL, M, W, Z, LDZ, WORK, IWORK,\n     $                   IFAIL, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, RANGE, UPLO\n      INTEGER            IL, INFO, IU, KD, LDAB, LDQ, LDZ, M, N\n      REAL               ABSTOL, VL, VU\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IFAIL( * ), IWORK( * )\n      REAL               AB( LDAB, * ), Q( LDQ, * ), W( * ), WORK( * ),\n     $                   Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SSBEVX computes selected eigenvalues and, optionally, eigenvectors\n*  of a real symmetric band matrix A.  Eigenvalues and eigenvectors can\n*  be selected by specifying either a range of values or a range of\n*  indices for the desired eigenvalues.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  RANGE   (input) CHARACTER*1\n*          = \'A\': all eigenvalues will be found;\n*          = \'V\': all eigenvalues in the half-open interval (VL,VU]\n*                 will be found;\n*          = \'I\': the IL-th through IU-th eigenvalues will be found.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KD >= 0.\n*\n*  AB      (input/output) REAL array, dimension (LDAB, N)\n*          On entry, the upper or lower triangle of the symmetric band\n*          matrix A, stored in the first KD+1 rows of the array.  The\n*          j-th column of A is stored in the j-th column of the array AB\n*          as follows:\n*          if UPLO = \'U\', AB(kd+1+i-j,j) = A(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+kd).\n*\n*          On exit, AB is overwritten by values generated during the\n*          reduction to tridiagonal form.  If UPLO = \'U\', the first\n*          superdiagonal and the diagonal of the tridiagonal matrix T\n*          are returned in rows KD and KD+1 of AB, and if UPLO = \'L\',\n*          the diagonal and first subdiagonal of T are returned in the\n*          first two rows of AB.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD + 1.\n*\n*  Q       (output) REAL array, dimension (LDQ, N)\n*          If JOBZ = \'V\', the N-by-N orthogonal matrix used in the\n*                         reduction to tridiagonal form.\n*          If JOBZ = \'N\', the array Q is not referenced.\n*\n*  LDQ     (input) INTEGER\n*          The leading dimension of the array Q.  If JOBZ = \'V\', then\n*          LDQ >= max(1,N).\n*\n*  VL      (input) REAL\n*  VU      (input) REAL\n*          If RANGE=\'V\', the lower and upper bounds of the interval to\n*          be searched for eigenvalues. VL < VU.\n*          Not referenced if RANGE = \'A\' or \'I\'.\n*\n*  IL      (input) INTEGER\n*  IU      (input) INTEGER\n*          If RANGE=\'I\', the indices (in ascending order) of the\n*          smallest and largest eigenvalues to be returned.\n*          1 <= IL <= IU <= N, if N > 0; IL = 1 and IU = 0 if N = 0.\n*          Not referenced if RANGE = \'A\' or \'V\'.\n*\n*  ABSTOL  (input) REAL\n*          The absolute error tolerance for the eigenvalues.\n*          An approximate eigenvalue is accepted as converged\n*          when it is determined to lie in an interval [a,b]\n*          of width less than or equal to\n*\n*                  ABSTOL + EPS *   max( |a|,|b| ) ,\n*\n*          where EPS is the machine precision.  If ABSTOL is less than\n*          or equal to zero, then  EPS*|T|  will be used in its place,\n*          where |T| is the 1-norm of the tridiagonal matrix obtained\n*          by reducing AB to tridiagonal form.\n*\n*          Eigenvalues will be computed most accurately when ABSTOL is\n*          set to twice the underflow threshold 2*SLAMCH(\'S\'), not zero.\n*          If this routine returns with INFO>0, indicating that some\n*          eigenvectors did not converge, try setting ABSTOL to\n*          2*SLAMCH(\'S\').\n*\n*          See \"Computing Small Singular Values of Bidiagonal Matrices\n*          with Guaranteed High Relative Accuracy,\" by Demmel and\n*          Kahan, LAPACK Working Note #3.\n*\n*  M       (output) INTEGER\n*          The total number of eigenvalues found.  0 <= M <= N.\n*          If RANGE = \'A\', M = N, and if RANGE = \'I\', M = IU-IL+1.\n*\n*  W       (output) REAL array, dimension (N)\n*          The first M elements contain the selected eigenvalues in\n*          ascending order.\n*\n*  Z       (output) REAL array, dimension (LDZ, max(1,M))\n*          If JOBZ = \'V\', then if INFO = 0, the first M columns of Z\n*          contain the orthonormal eigenvectors of the matrix A\n*          corresponding to the selected eigenvalues, with the i-th\n*          column of Z holding the eigenvector associated with W(i).\n*          If an eigenvector fails to converge, then that column of Z\n*          contains the latest approximation to the eigenvector, and the\n*          index of the eigenvector is returned in IFAIL.\n*          If JOBZ = \'N\', then Z is not referenced.\n*          Note: the user must ensure that at least max(1,M) columns are\n*          supplied in the array Z; if RANGE = \'V\', the exact value of M\n*          is not known in advance and an upper bound must be used.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace) REAL array, dimension (7*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (5*N)\n*\n*  IFAIL   (output) INTEGER array, dimension (N)\n*          If JOBZ = \'V\', then if INFO = 0, the first M elements of\n*          IFAIL are zero.  If INFO > 0, then IFAIL contains the\n*          indices of the eigenvectors that failed to converge.\n*          If JOBZ = \'N\', then IFAIL is not referenced.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit.\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  if INFO = i, then i eigenvectors failed to converge.\n*                Their indices are stored in array IFAIL.\n*\n'),(128,'dsbevx_128.txt','      SUBROUTINE DSBEVX( JOBZ, RANGE, UPLO, N, KD, AB, LDAB, Q, LDQ, VL,\n     $                   VU, IL, IU, ABSTOL, M, W, Z, LDZ, WORK, IWORK,\n     $                   IFAIL, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, RANGE, UPLO\n      INTEGER            IL, INFO, IU, KD, LDAB, LDQ, LDZ, M, N\n      DOUBLE PRECISION   ABSTOL, VL, VU\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IFAIL( * ), IWORK( * )\n      DOUBLE PRECISION   AB( LDAB, * ), Q( LDQ, * ), W( * ), WORK( * ),\n     $                   Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DSBEVX computes selected eigenvalues and, optionally, eigenvectors\n*  of a real symmetric band matrix A.  Eigenvalues and eigenvectors can\n*  be selected by specifying either a range of values or a range of\n*  indices for the desired eigenvalues.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  RANGE   (input) CHARACTER*1\n*          = \'A\': all eigenvalues will be found;\n*          = \'V\': all eigenvalues in the half-open interval (VL,VU]\n*                 will be found;\n*          = \'I\': the IL-th through IU-th eigenvalues will be found.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KD >= 0.\n*\n*  AB      (input/output) DOUBLE PRECISION array, dimension (LDAB, N)\n*          On entry, the upper or lower triangle of the symmetric band\n*          matrix A, stored in the first KD+1 rows of the array.  The\n*          j-th column of A is stored in the j-th column of the array AB\n*          as follows:\n*          if UPLO = \'U\', AB(kd+1+i-j,j) = A(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+kd).\n*\n*          On exit, AB is overwritten by values generated during the\n*          reduction to tridiagonal form.  If UPLO = \'U\', the first\n*          superdiagonal and the diagonal of the tridiagonal matrix T\n*          are returned in rows KD and KD+1 of AB, and if UPLO = \'L\',\n*          the diagonal and first subdiagonal of T are returned in the\n*          first two rows of AB.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD + 1.\n*\n*  Q       (output) DOUBLE PRECISION array, dimension (LDQ, N)\n*          If JOBZ = \'V\', the N-by-N orthogonal matrix used in the\n*                         reduction to tridiagonal form.\n*          If JOBZ = \'N\', the array Q is not referenced.\n*\n*  LDQ     (input) INTEGER\n*          The leading dimension of the array Q.  If JOBZ = \'V\', then\n*          LDQ >= max(1,N).\n*\n*  VL      (input) DOUBLE PRECISION\n*  VU      (input) DOUBLE PRECISION\n*          If RANGE=\'V\', the lower and upper bounds of the interval to\n*          be searched for eigenvalues. VL < VU.\n*          Not referenced if RANGE = \'A\' or \'I\'.\n*\n*  IL      (input) INTEGER\n*  IU      (input) INTEGER\n*          If RANGE=\'I\', the indices (in ascending order) of the\n*          smallest and largest eigenvalues to be returned.\n*          1 <= IL <= IU <= N, if N > 0; IL = 1 and IU = 0 if N = 0.\n*          Not referenced if RANGE = \'A\' or \'V\'.\n*\n*  ABSTOL  (input) DOUBLE PRECISION\n*          The absolute error tolerance for the eigenvalues.\n*          An approximate eigenvalue is accepted as converged\n*          when it is determined to lie in an interval [a,b]\n*          of width less than or equal to\n*\n*                  ABSTOL + EPS *   max( |a|,|b| ) ,\n*\n*          where EPS is the machine precision.  If ABSTOL is less than\n*          or equal to zero, then  EPS*|T|  will be used in its place,\n*          where |T| is the 1-norm of the tridiagonal matrix obtained\n*          by reducing AB to tridiagonal form.\n*\n*          Eigenvalues will be computed most accurately when ABSTOL is\n*          set to twice the underflow threshold 2*DLAMCH(\'S\'), not zero.\n*          If this routine returns with INFO>0, indicating that some\n*          eigenvectors did not converge, try setting ABSTOL to\n*          2*DLAMCH(\'S\').\n*\n*          See \"Computing Small Singular Values of Bidiagonal Matrices\n*          with Guaranteed High Relative Accuracy,\" by Demmel and\n*          Kahan, LAPACK Working Note #3.\n*\n*  M       (output) INTEGER\n*          The total number of eigenvalues found.  0 <= M <= N.\n*          If RANGE = \'A\', M = N, and if RANGE = \'I\', M = IU-IL+1.\n*\n*  W       (output) DOUBLE PRECISION array, dimension (N)\n*          The first M elements contain the selected eigenvalues in\n*          ascending order.\n*\n*  Z       (output) DOUBLE PRECISION array, dimension (LDZ, max(1,M))\n*          If JOBZ = \'V\', then if INFO = 0, the first M columns of Z\n*          contain the orthonormal eigenvectors of the matrix A\n*          corresponding to the selected eigenvalues, with the i-th\n*          column of Z holding the eigenvector associated with W(i).\n*          If an eigenvector fails to converge, then that column of Z\n*          contains the latest approximation to the eigenvector, and the\n*          index of the eigenvector is returned in IFAIL.\n*          If JOBZ = \'N\', then Z is not referenced.\n*          Note: the user must ensure that at least max(1,M) columns are\n*          supplied in the array Z; if RANGE = \'V\', the exact value of M\n*          is not known in advance and an upper bound must be used.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace) DOUBLE PRECISION array, dimension (7*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (5*N)\n*\n*  IFAIL   (output) INTEGER array, dimension (N)\n*          If JOBZ = \'V\', then if INFO = 0, the first M elements of\n*          IFAIL are zero.  If INFO > 0, then IFAIL contains the\n*          indices of the eigenvectors that failed to converge.\n*          If JOBZ = \'N\', then IFAIL is not referenced.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit.\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  if INFO = i, then i eigenvectors failed to converge.\n*                Their indices are stored in array IFAIL.\n*\n'),(129,'sspevx_129.txt','      SUBROUTINE SSPEVX( JOBZ, RANGE, UPLO, N, AP, VL, VU, IL, IU,\n     $                   ABSTOL, M, W, Z, LDZ, WORK, IWORK, IFAIL,\n     $                   INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, RANGE, UPLO\n      INTEGER            IL, INFO, IU, LDZ, M, N\n      REAL               ABSTOL, VL, VU\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IFAIL( * ), IWORK( * )\n      REAL               AP( * ), W( * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SSPEVX computes selected eigenvalues and, optionally, eigenvectors\n*  of a real symmetric matrix A in packed storage.  Eigenvalues/vectors\n*  can be selected by specifying either a range of values or a range of\n*  indices for the desired eigenvalues.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  RANGE   (input) CHARACTER*1\n*          = \'A\': all eigenvalues will be found;\n*          = \'V\': all eigenvalues in the half-open interval (VL,VU]\n*                 will be found;\n*          = \'I\': the IL-th through IU-th eigenvalues will be found.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input/output) REAL array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the symmetric matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*\n*          On exit, AP is overwritten by values generated during the\n*          reduction to tridiagonal form.  If UPLO = \'U\', the diagonal\n*          and first superdiagonal of the tridiagonal matrix T overwrite\n*          the corresponding elements of A, and if UPLO = \'L\', the\n*          diagonal and first subdiagonal of T overwrite the\n*          corresponding elements of A.\n*\n*  VL      (input) REAL\n*  VU      (input) REAL\n*          If RANGE=\'V\', the lower and upper bounds of the interval to\n*          be searched for eigenvalues. VL < VU.\n*          Not referenced if RANGE = \'A\' or \'I\'.\n*\n*  IL      (input) INTEGER\n*  IU      (input) INTEGER\n*          If RANGE=\'I\', the indices (in ascending order) of the\n*          smallest and largest eigenvalues to be returned.\n*          1 <= IL <= IU <= N, if N > 0; IL = 1 and IU = 0 if N = 0.\n*          Not referenced if RANGE = \'A\' or \'V\'.\n*\n*  ABSTOL  (input) REAL\n*          The absolute error tolerance for the eigenvalues.\n*          An approximate eigenvalue is accepted as converged\n*          when it is determined to lie in an interval [a,b]\n*          of width less than or equal to\n*\n*                  ABSTOL + EPS *   max( |a|,|b| ) ,\n*\n*          where EPS is the machine precision.  If ABSTOL is less than\n*          or equal to zero, then  EPS*|T|  will be used in its place,\n*          where |T| is the 1-norm of the tridiagonal matrix obtained\n*          by reducing AP to tridiagonal form.\n*\n*          Eigenvalues will be computed most accurately when ABSTOL is\n*          set to twice the underflow threshold 2*SLAMCH(\'S\'), not zero.\n*          If this routine returns with INFO>0, indicating that some\n*          eigenvectors did not converge, try setting ABSTOL to\n*          2*SLAMCH(\'S\').\n*\n*          See \"Computing Small Singular Values of Bidiagonal Matrices\n*          with Guaranteed High Relative Accuracy,\" by Demmel and\n*          Kahan, LAPACK Working Note #3.\n*\n*  M       (output) INTEGER\n*          The total number of eigenvalues found.  0 <= M <= N.\n*          If RANGE = \'A\', M = N, and if RANGE = \'I\', M = IU-IL+1.\n*\n*  W       (output) REAL array, dimension (N)\n*          If INFO = 0, the selected eigenvalues in ascending order.\n*\n*  Z       (output) REAL array, dimension (LDZ, max(1,M))\n*          If JOBZ = \'V\', then if INFO = 0, the first M columns of Z\n*          contain the orthonormal eigenvectors of the matrix A\n*          corresponding to the selected eigenvalues, with the i-th\n*          column of Z holding the eigenvector associated with W(i).\n*          If an eigenvector fails to converge, then that column of Z\n*          contains the latest approximation to the eigenvector, and the\n*          index of the eigenvector is returned in IFAIL.\n*          If JOBZ = \'N\', then Z is not referenced.\n*          Note: the user must ensure that at least max(1,M) columns are\n*          supplied in the array Z; if RANGE = \'V\', the exact value of M\n*          is not known in advance and an upper bound must be used.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace) REAL array, dimension (8*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (5*N)\n*\n*  IFAIL   (output) INTEGER array, dimension (N)\n*          If JOBZ = \'V\', then if INFO = 0, the first M elements of\n*          IFAIL are zero.  If INFO > 0, then IFAIL contains the\n*          indices of the eigenvectors that failed to converge.\n*          If JOBZ = \'N\', then IFAIL is not referenced.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, then i eigenvectors failed to converge.\n*                Their indices are stored in array IFAIL.\n*\n'),(130,'dspevx_130.txt','      SUBROUTINE DSPEVX( JOBZ, RANGE, UPLO, N, AP, VL, VU, IL, IU,\n     $                   ABSTOL, M, W, Z, LDZ, WORK, IWORK, IFAIL,\n     $                   INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, RANGE, UPLO\n      INTEGER            IL, INFO, IU, LDZ, M, N\n      DOUBLE PRECISION   ABSTOL, VL, VU\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IFAIL( * ), IWORK( * )\n      DOUBLE PRECISION   AP( * ), W( * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DSPEVX computes selected eigenvalues and, optionally, eigenvectors\n*  of a real symmetric matrix A in packed storage.  Eigenvalues/vectors\n*  can be selected by specifying either a range of values or a range of\n*  indices for the desired eigenvalues.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  RANGE   (input) CHARACTER*1\n*          = \'A\': all eigenvalues will be found;\n*          = \'V\': all eigenvalues in the half-open interval (VL,VU]\n*                 will be found;\n*          = \'I\': the IL-th through IU-th eigenvalues will be found.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input/output) DOUBLE PRECISION array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the symmetric matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*\n*          On exit, AP is overwritten by values generated during the\n*          reduction to tridiagonal form.  If UPLO = \'U\', the diagonal\n*          and first superdiagonal of the tridiagonal matrix T overwrite\n*          the corresponding elements of A, and if UPLO = \'L\', the\n*          diagonal and first subdiagonal of T overwrite the\n*          corresponding elements of A.\n*\n*  VL      (input) DOUBLE PRECISION\n*  VU      (input) DOUBLE PRECISION\n*          If RANGE=\'V\', the lower and upper bounds of the interval to\n*          be searched for eigenvalues. VL < VU.\n*          Not referenced if RANGE = \'A\' or \'I\'.\n*\n*  IL      (input) INTEGER\n*  IU      (input) INTEGER\n*          If RANGE=\'I\', the indices (in ascending order) of the\n*          smallest and largest eigenvalues to be returned.\n*          1 <= IL <= IU <= N, if N > 0; IL = 1 and IU = 0 if N = 0.\n*          Not referenced if RANGE = \'A\' or \'V\'.\n*\n*  ABSTOL  (input) DOUBLE PRECISION\n*          The absolute error tolerance for the eigenvalues.\n*          An approximate eigenvalue is accepted as converged\n*          when it is determined to lie in an interval [a,b]\n*          of width less than or equal to\n*\n*                  ABSTOL + EPS *   max( |a|,|b| ) ,\n*\n*          where EPS is the machine precision.  If ABSTOL is less than\n*          or equal to zero, then  EPS*|T|  will be used in its place,\n*          where |T| is the 1-norm of the tridiagonal matrix obtained\n*          by reducing AP to tridiagonal form.\n*\n*          Eigenvalues will be computed most accurately when ABSTOL is\n*          set to twice the underflow threshold 2*DLAMCH(\'S\'), not zero.\n*          If this routine returns with INFO>0, indicating that some\n*          eigenvectors did not converge, try setting ABSTOL to\n*          2*DLAMCH(\'S\').\n*\n*          See \"Computing Small Singular Values of Bidiagonal Matrices\n*          with Guaranteed High Relative Accuracy,\" by Demmel and\n*          Kahan, LAPACK Working Note #3.\n*\n*  M       (output) INTEGER\n*          The total number of eigenvalues found.  0 <= M <= N.\n*          If RANGE = \'A\', M = N, and if RANGE = \'I\', M = IU-IL+1.\n*\n*  W       (output) DOUBLE PRECISION array, dimension (N)\n*          If INFO = 0, the selected eigenvalues in ascending order.\n*\n*  Z       (output) DOUBLE PRECISION array, dimension (LDZ, max(1,M))\n*          If JOBZ = \'V\', then if INFO = 0, the first M columns of Z\n*          contain the orthonormal eigenvectors of the matrix A\n*          corresponding to the selected eigenvalues, with the i-th\n*          column of Z holding the eigenvector associated with W(i).\n*          If an eigenvector fails to converge, then that column of Z\n*          contains the latest approximation to the eigenvector, and the\n*          index of the eigenvector is returned in IFAIL.\n*          If JOBZ = \'N\', then Z is not referenced.\n*          Note: the user must ensure that at least max(1,M) columns are\n*          supplied in the array Z; if RANGE = \'V\', the exact value of M\n*          is not known in advance and an upper bound must be used.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace) DOUBLE PRECISION array, dimension (8*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (5*N)\n*\n*  IFAIL   (output) INTEGER array, dimension (N)\n*          If JOBZ = \'V\', then if INFO = 0, the first M elements of\n*          IFAIL are zero.  If INFO > 0, then IFAIL contains the\n*          indices of the eigenvectors that failed to converge.\n*          If JOBZ = \'N\', then IFAIL is not referenced.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, then i eigenvectors failed to converge.\n*                Their indices are stored in array IFAIL.\n*\n'),(131,'sstevx_131.txt','      SUBROUTINE SSTEVX( JOBZ, RANGE, N, D, E, VL, VU, IL, IU, ABSTOL,\n     $                   M, W, Z, LDZ, WORK, IWORK, IFAIL, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, RANGE\n      INTEGER            IL, INFO, IU, LDZ, M, N\n      REAL               ABSTOL, VL, VU\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IFAIL( * ), IWORK( * )\n      REAL               D( * ), E( * ), W( * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SSTEVX computes selected eigenvalues and, optionally, eigenvectors\n*  of a real symmetric tridiagonal matrix A.  Eigenvalues and\n*  eigenvectors can be selected by specifying either a range of values\n*  or a range of indices for the desired eigenvalues.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  RANGE   (input) CHARACTER*1\n*          = \'A\': all eigenvalues will be found.\n*          = \'V\': all eigenvalues in the half-open interval (VL,VU]\n*                 will be found.\n*          = \'I\': the IL-th through IU-th eigenvalues will be found.\n*\n*  N       (input) INTEGER\n*          The order of the matrix.  N >= 0.\n*\n*  D       (input/output) REAL array, dimension (N)\n*          On entry, the n diagonal elements of the tridiagonal matrix\n*          A.\n*          On exit, D may be multiplied by a constant factor chosen\n*          to avoid over/underflow in computing the eigenvalues.\n*\n*  E       (input/output) REAL array, dimension (max(1,N-1))\n*          On entry, the (n-1) subdiagonal elements of the tridiagonal\n*          matrix A in elements 1 to N-1 of E.\n*          On exit, E may be multiplied by a constant factor chosen\n*          to avoid over/underflow in computing the eigenvalues.\n*\n*  VL      (input) REAL\n*  VU      (input) REAL\n*          If RANGE=\'V\', the lower and upper bounds of the interval to\n*          be searched for eigenvalues. VL < VU.\n*          Not referenced if RANGE = \'A\' or \'I\'.\n*\n*  IL      (input) INTEGER\n*  IU      (input) INTEGER\n*          If RANGE=\'I\', the indices (in ascending order) of the\n*          smallest and largest eigenvalues to be returned.\n*          1 <= IL <= IU <= N, if N > 0; IL = 1 and IU = 0 if N = 0.\n*          Not referenced if RANGE = \'A\' or \'V\'.\n*\n*  ABSTOL  (input) REAL\n*          The absolute error tolerance for the eigenvalues.\n*          An approximate eigenvalue is accepted as converged\n*          when it is determined to lie in an interval [a,b]\n*          of width less than or equal to\n*\n*                  ABSTOL + EPS *   max( |a|,|b| ) ,\n*\n*          where EPS is the machine precision.  If ABSTOL is less\n*          than or equal to zero, then  EPS*|T|  will be used in\n*          its place, where |T| is the 1-norm of the tridiagonal\n*          matrix.\n*\n*          Eigenvalues will be computed most accurately when ABSTOL is\n*          set to twice the underflow threshold 2*SLAMCH(\'S\'), not zero.\n*          If this routine returns with INFO>0, indicating that some\n*          eigenvectors did not converge, try setting ABSTOL to\n*          2*SLAMCH(\'S\').\n*\n*          See \"Computing Small Singular Values of Bidiagonal Matrices\n*          with Guaranteed High Relative Accuracy,\" by Demmel and\n*          Kahan, LAPACK Working Note #3.\n*\n*  M       (output) INTEGER\n*          The total number of eigenvalues found.  0 <= M <= N.\n*          If RANGE = \'A\', M = N, and if RANGE = \'I\', M = IU-IL+1.\n*\n*  W       (output) REAL array, dimension (N)\n*          The first M elements contain the selected eigenvalues in\n*          ascending order.\n*\n*  Z       (output) REAL array, dimension (LDZ, max(1,M) )\n*          If JOBZ = \'V\', then if INFO = 0, the first M columns of Z\n*          contain the orthonormal eigenvectors of the matrix A\n*          corresponding to the selected eigenvalues, with the i-th\n*          column of Z holding the eigenvector associated with W(i).\n*          If an eigenvector fails to converge (INFO > 0), then that\n*          column of Z contains the latest approximation to the\n*          eigenvector, and the index of the eigenvector is returned\n*          in IFAIL.  If JOBZ = \'N\', then Z is not referenced.\n*          Note: the user must ensure that at least max(1,M) columns are\n*          supplied in the array Z; if RANGE = \'V\', the exact value of M\n*          is not known in advance and an upper bound must be used.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace) REAL array, dimension (5*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (5*N)\n*\n*  IFAIL   (output) INTEGER array, dimension (N)\n*          If JOBZ = \'V\', then if INFO = 0, the first M elements of\n*          IFAIL are zero.  If INFO > 0, then IFAIL contains the\n*          indices of the eigenvectors that failed to converge.\n*          If JOBZ = \'N\', then IFAIL is not referenced.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, then i eigenvectors failed to converge.\n*                Their indices are stored in array IFAIL.\n*\n'),(132,'dstevx_132.txt','      SUBROUTINE DSTEVX( JOBZ, RANGE, N, D, E, VL, VU, IL, IU, ABSTOL,\n     $                   M, W, Z, LDZ, WORK, IWORK, IFAIL, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, RANGE\n      INTEGER            IL, INFO, IU, LDZ, M, N\n      DOUBLE PRECISION   ABSTOL, VL, VU\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IFAIL( * ), IWORK( * )\n      DOUBLE PRECISION   D( * ), E( * ), W( * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DSTEVX computes selected eigenvalues and, optionally, eigenvectors\n*  of a real symmetric tridiagonal matrix A.  Eigenvalues and\n*  eigenvectors can be selected by specifying either a range of values\n*  or a range of indices for the desired eigenvalues.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  RANGE   (input) CHARACTER*1\n*          = \'A\': all eigenvalues will be found.\n*          = \'V\': all eigenvalues in the half-open interval (VL,VU]\n*                 will be found.\n*          = \'I\': the IL-th through IU-th eigenvalues will be found.\n*\n*  N       (input) INTEGER\n*          The order of the matrix.  N >= 0.\n*\n*  D       (input/output) DOUBLE PRECISION array, dimension (N)\n*          On entry, the n diagonal elements of the tridiagonal matrix\n*          A.\n*          On exit, D may be multiplied by a constant factor chosen\n*          to avoid over/underflow in computing the eigenvalues.\n*\n*  E       (input/output) DOUBLE PRECISION array, dimension (max(1,N-1))\n*          On entry, the (n-1) subdiagonal elements of the tridiagonal\n*          matrix A in elements 1 to N-1 of E.\n*          On exit, E may be multiplied by a constant factor chosen\n*          to avoid over/underflow in computing the eigenvalues.\n*\n*  VL      (input) DOUBLE PRECISION\n*  VU      (input) DOUBLE PRECISION\n*          If RANGE=\'V\', the lower and upper bounds of the interval to\n*          be searched for eigenvalues. VL < VU.\n*          Not referenced if RANGE = \'A\' or \'I\'.\n*\n*  IL      (input) INTEGER\n*  IU      (input) INTEGER\n*          If RANGE=\'I\', the indices (in ascending order) of the\n*          smallest and largest eigenvalues to be returned.\n*          1 <= IL <= IU <= N, if N > 0; IL = 1 and IU = 0 if N = 0.\n*          Not referenced if RANGE = \'A\' or \'V\'.\n*\n*  ABSTOL  (input) DOUBLE PRECISION\n*          The absolute error tolerance for the eigenvalues.\n*          An approximate eigenvalue is accepted as converged\n*          when it is determined to lie in an interval [a,b]\n*          of width less than or equal to\n*\n*                  ABSTOL + EPS *   max( |a|,|b| ) ,\n*\n*          where EPS is the machine precision.  If ABSTOL is less\n*          than or equal to zero, then  EPS*|T|  will be used in\n*          its place, where |T| is the 1-norm of the tridiagonal\n*          matrix.\n*\n*          Eigenvalues will be computed most accurately when ABSTOL is\n*          set to twice the underflow threshold 2*DLAMCH(\'S\'), not zero.\n*          If this routine returns with INFO>0, indicating that some\n*          eigenvectors did not converge, try setting ABSTOL to\n*          2*DLAMCH(\'S\').\n*\n*          See \"Computing Small Singular Values of Bidiagonal Matrices\n*          with Guaranteed High Relative Accuracy,\" by Demmel and\n*          Kahan, LAPACK Working Note #3.\n*\n*  M       (output) INTEGER\n*          The total number of eigenvalues found.  0 <= M <= N.\n*          If RANGE = \'A\', M = N, and if RANGE = \'I\', M = IU-IL+1.\n*\n*  W       (output) DOUBLE PRECISION array, dimension (N)\n*          The first M elements contain the selected eigenvalues in\n*          ascending order.\n*\n*  Z       (output) DOUBLE PRECISION array, dimension (LDZ, max(1,M) )\n*          If JOBZ = \'V\', then if INFO = 0, the first M columns of Z\n*          contain the orthonormal eigenvectors of the matrix A\n*          corresponding to the selected eigenvalues, with the i-th\n*          column of Z holding the eigenvector associated with W(i).\n*          If an eigenvector fails to converge (INFO > 0), then that\n*          column of Z contains the latest approximation to the\n*          eigenvector, and the index of the eigenvector is returned\n*          in IFAIL.  If JOBZ = \'N\', then Z is not referenced.\n*          Note: the user must ensure that at least max(1,M) columns are\n*          supplied in the array Z; if RANGE = \'V\', the exact value of M\n*          is not known in advance and an upper bound must be used.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace) DOUBLE PRECISION array, dimension (5*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (5*N)\n*\n*  IFAIL   (output) INTEGER array, dimension (N)\n*          If JOBZ = \'V\', then if INFO = 0, the first M elements of\n*          IFAIL are zero.  If INFO > 0, then IFAIL contains the\n*          indices of the eigenvectors that failed to converge.\n*          If JOBZ = \'N\', then IFAIL is not referenced.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, then i eigenvectors failed to converge.\n*                Their indices are stored in array IFAIL.\n*\n'),(133,'cheevd_133.txt','      SUBROUTINE CHEEVD( JOBZ, UPLO, N, A, LDA, W, WORK, LWORK, RWORK,\n     $                   LRWORK, IWORK, LIWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, LDA, LIWORK, LRWORK, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      REAL               RWORK( * ), W( * )\n      COMPLEX            A( LDA, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CHEEVD computes all eigenvalues and, optionally, eigenvectors of a\n*  complex Hermitian matrix A.  If eigenvectors are desired, it uses a\n*  divide and conquer algorithm.\n*\n*  The divide and conquer algorithm makes very mild assumptions about\n*  floating point arithmetic. It will work on machines with a guard\n*  digit in add/subtract, or on those binary machines without guard\n*  digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\n*  Cray-2. It could conceivably fail on hexadecimal or decimal machines\n*  without guard digits, but we know of none.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) COMPLEX array, dimension (LDA, N)\n*          On entry, the Hermitian matrix A.  If UPLO = \'U\', the\n*          leading N-by-N upper triangular part of A contains the\n*          upper triangular part of the matrix A.  If UPLO = \'L\',\n*          the leading N-by-N lower triangular part of A contains\n*          the lower triangular part of the matrix A.\n*          On exit, if JOBZ = \'V\', then if INFO = 0, A contains the\n*          orthonormal eigenvectors of the matrix A.\n*          If JOBZ = \'N\', then on exit the lower triangle (if UPLO=\'L\')\n*          or the upper triangle (if UPLO=\'U\') of A, including the\n*          diagonal, is destroyed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  W       (output) REAL array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  WORK    (workspace/output) COMPLEX array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The length of the array WORK.\n*          If N <= 1,                LWORK must be at least 1.\n*          If JOBZ  = \'N\' and N > 1, LWORK must be at least N + 1.\n*          If JOBZ  = \'V\' and N > 1, LWORK must be at least 2*N + N**2.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal sizes of the WORK, RWORK and\n*          IWORK arrays, returns these values as the first entries of\n*          the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  RWORK   (workspace/output) REAL array,\n*                                         dimension (LRWORK)\n*          On exit, if INFO = 0, RWORK(1) returns the optimal LRWORK.\n*\n*  LRWORK  (input) INTEGER\n*          The dimension of the array RWORK.\n*          If N <= 1,                LRWORK must be at least 1.\n*          If JOBZ  = \'N\' and N > 1, LRWORK must be at least N.\n*          If JOBZ  = \'V\' and N > 1, LRWORK must be at least\n*                         1 + 5*N + 2*N**2.\n*\n*          If LRWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the optimal sizes of the WORK, RWORK\n*          and IWORK arrays, returns these values as the first entries\n*          of the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (MAX(1,LIWORK))\n*          On exit, if INFO = 0, IWORK(1) returns the optimal LIWORK.\n*\n*  LIWORK  (input) INTEGER\n*          The dimension of the array IWORK.\n*          If N <= 1,                LIWORK must be at least 1.\n*          If JOBZ  = \'N\' and N > 1, LIWORK must be at least 1.\n*          If JOBZ  = \'V\' and N > 1, LIWORK must be at least 3 + 5*N.\n*\n*          If LIWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the optimal sizes of the WORK, RWORK\n*          and IWORK arrays, returns these values as the first entries\n*          of the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i and JOBZ = \'N\', then the algorithm failed\n*                to converge; i off-diagonal elements of an intermediate\n*                tridiagonal form did not converge to zero;\n*                if INFO = i and JOBZ = \'V\', then the algorithm failed\n*                to compute an eigenvalue while working on the submatrix\n*                lying in rows and columns INFO/(N+1) through\n*                mod(INFO,N+1).\n*\n'),(134,'zheevd_134.txt','      SUBROUTINE ZHEEVD( JOBZ, UPLO, N, A, LDA, W, WORK, LWORK, RWORK,\n     $                   LRWORK, IWORK, LIWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, LDA, LIWORK, LRWORK, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      DOUBLE PRECISION   RWORK( * ), W( * )\n      COMPLEX*16         A( LDA, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZHEEVD computes all eigenvalues and, optionally, eigenvectors of a\n*  complex Hermitian matrix A.  If eigenvectors are desired, it uses a\n*  divide and conquer algorithm.\n*\n*  The divide and conquer algorithm makes very mild assumptions about\n*  floating point arithmetic. It will work on machines with a guard\n*  digit in add/subtract, or on those binary machines without guard\n*  digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\n*  Cray-2. It could conceivably fail on hexadecimal or decimal machines\n*  without guard digits, but we know of none.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) COMPLEX*16 array, dimension (LDA, N)\n*          On entry, the Hermitian matrix A.  If UPLO = \'U\', the\n*          leading N-by-N upper triangular part of A contains the\n*          upper triangular part of the matrix A.  If UPLO = \'L\',\n*          the leading N-by-N lower triangular part of A contains\n*          the lower triangular part of the matrix A.\n*          On exit, if JOBZ = \'V\', then if INFO = 0, A contains the\n*          orthonormal eigenvectors of the matrix A.\n*          If JOBZ = \'N\', then on exit the lower triangle (if UPLO=\'L\')\n*          or the upper triangle (if UPLO=\'U\') of A, including the\n*          diagonal, is destroyed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  W       (output) DOUBLE PRECISION array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  WORK    (workspace/output) COMPLEX*16 array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The length of the array WORK.\n*          If N <= 1,                LWORK must be at least 1.\n*          If JOBZ  = \'N\' and N > 1, LWORK must be at least N + 1.\n*          If JOBZ  = \'V\' and N > 1, LWORK must be at least 2*N + N**2.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal sizes of the WORK, RWORK and\n*          IWORK arrays, returns these values as the first entries of\n*          the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  RWORK   (workspace/output) DOUBLE PRECISION array,\n*                                         dimension (LRWORK)\n*          On exit, if INFO = 0, RWORK(1) returns the optimal LRWORK.\n*\n*  LRWORK  (input) INTEGER\n*          The dimension of the array RWORK.\n*          If N <= 1,                LRWORK must be at least 1.\n*          If JOBZ  = \'N\' and N > 1, LRWORK must be at least N.\n*          If JOBZ  = \'V\' and N > 1, LRWORK must be at least\n*                         1 + 5*N + 2*N**2.\n*\n*          If LRWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the optimal sizes of the WORK, RWORK\n*          and IWORK arrays, returns these values as the first entries\n*          of the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (MAX(1,LIWORK))\n*          On exit, if INFO = 0, IWORK(1) returns the optimal LIWORK.\n*\n*  LIWORK  (input) INTEGER\n*          The dimension of the array IWORK.\n*          If N <= 1,                LIWORK must be at least 1.\n*          If JOBZ  = \'N\' and N > 1, LIWORK must be at least 1.\n*          If JOBZ  = \'V\' and N > 1, LIWORK must be at least 3 + 5*N.\n*\n*          If LIWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the optimal sizes of the WORK, RWORK\n*          and IWORK arrays, returns these values as the first entries\n*          of the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i and JOBZ = \'N\', then the algorithm failed\n*                to converge; i off-diagonal elements of an intermediate\n*                tridiagonal form did not converge to zero;\n*                if INFO = i and JOBZ = \'V\', then the algorithm failed\n*                to compute an eigenvalue while working on the submatrix\n*                lying in rows and columns INFO/(N+1) through\n*                mod(INFO,N+1).\n*\n'),(135,'chbevd_135.txt','      SUBROUTINE CHBEVD( JOBZ, UPLO, N, KD, AB, LDAB, W, Z, LDZ, WORK,\n     $                   LWORK, RWORK, LRWORK, IWORK, LIWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, KD, LDAB, LDZ, LIWORK, LRWORK, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      REAL               RWORK( * ), W( * )\n      COMPLEX            AB( LDAB, * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CHBEVD computes all the eigenvalues and, optionally, eigenvectors of\n*  a complex Hermitian band matrix A.  If eigenvectors are desired, it\n*  uses a divide and conquer algorithm.\n*\n*  The divide and conquer algorithm makes very mild assumptions about\n*  floating point arithmetic. It will work on machines with a guard\n*  digit in add/subtract, or on those binary machines without guard\n*  digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\n*  Cray-2. It could conceivably fail on hexadecimal or decimal machines\n*  without guard digits, but we know of none.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KD >= 0.\n*\n*  AB      (input/output) COMPLEX array, dimension (LDAB, N)\n*          On entry, the upper or lower triangle of the Hermitian band\n*          matrix A, stored in the first KD+1 rows of the array.  The\n*          j-th column of A is stored in the j-th column of the array AB\n*          as follows:\n*          if UPLO = \'U\', AB(kd+1+i-j,j) = A(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+kd).\n*\n*          On exit, AB is overwritten by values generated during the\n*          reduction to tridiagonal form.  If UPLO = \'U\', the first\n*          superdiagonal and the diagonal of the tridiagonal matrix T\n*          are returned in rows KD and KD+1 of AB, and if UPLO = \'L\',\n*          the diagonal and first subdiagonal of T are returned in the\n*          first two rows of AB.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD + 1.\n*\n*  W       (output) REAL array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  Z       (output) COMPLEX array, dimension (LDZ, N)\n*          If JOBZ = \'V\', then if INFO = 0, Z contains the orthonormal\n*          eigenvectors of the matrix A, with the i-th column of Z\n*          holding the eigenvector associated with W(i).\n*          If JOBZ = \'N\', then Z is not referenced.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace/output) COMPLEX array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.\n*          If N <= 1,               LWORK must be at least 1.\n*          If JOBZ = \'N\' and N > 1, LWORK must be at least N.\n*          If JOBZ = \'V\' and N > 1, LWORK must be at least 2*N**2.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal sizes of the WORK, RWORK and\n*          IWORK arrays, returns these values as the first entries of\n*          the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  RWORK   (workspace/output) REAL array,\n*                                         dimension (LRWORK)\n*          On exit, if INFO = 0, RWORK(1) returns the optimal LRWORK.\n*\n*  LRWORK  (input) INTEGER\n*          The dimension of array RWORK.\n*          If N <= 1,               LRWORK must be at least 1.\n*          If JOBZ = \'N\' and N > 1, LRWORK must be at least N.\n*          If JOBZ = \'V\' and N > 1, LRWORK must be at least\n*                        1 + 5*N + 2*N**2.\n*\n*          If LRWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the optimal sizes of the WORK, RWORK\n*          and IWORK arrays, returns these values as the first entries\n*          of the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (MAX(1,LIWORK))\n*          On exit, if INFO = 0, IWORK(1) returns the optimal LIWORK.\n*\n*  LIWORK  (input) INTEGER\n*          The dimension of array IWORK.\n*          If JOBZ = \'N\' or N <= 1, LIWORK must be at least 1.\n*          If JOBZ = \'V\' and N > 1, LIWORK must be at least 3 + 5*N .\n*\n*          If LIWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the optimal sizes of the WORK, RWORK\n*          and IWORK arrays, returns these values as the first entries\n*          of the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit.\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  if INFO = i, the algorithm failed to converge; i\n*                off-diagonal elements of an intermediate tridiagonal\n*                form did not converge to zero.\n*\n'),(136,'zhbevd_136.txt','      SUBROUTINE ZHBEVD( JOBZ, UPLO, N, KD, AB, LDAB, W, Z, LDZ, WORK,\n     $                   LWORK, RWORK, LRWORK, IWORK, LIWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, KD, LDAB, LDZ, LIWORK, LRWORK, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      DOUBLE PRECISION   RWORK( * ), W( * )\n      COMPLEX*16         AB( LDAB, * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZHBEVD computes all the eigenvalues and, optionally, eigenvectors of\n*  a complex Hermitian band matrix A.  If eigenvectors are desired, it\n*  uses a divide and conquer algorithm.\n*\n*  The divide and conquer algorithm makes very mild assumptions about\n*  floating point arithmetic. It will work on machines with a guard\n*  digit in add/subtract, or on those binary machines without guard\n*  digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\n*  Cray-2. It could conceivably fail on hexadecimal or decimal machines\n*  without guard digits, but we know of none.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KD >= 0.\n*\n*  AB      (input/output) COMPLEX*16 array, dimension (LDAB, N)\n*          On entry, the upper or lower triangle of the Hermitian band\n*          matrix A, stored in the first KD+1 rows of the array.  The\n*          j-th column of A is stored in the j-th column of the array AB\n*          as follows:\n*          if UPLO = \'U\', AB(kd+1+i-j,j) = A(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+kd).\n*\n*          On exit, AB is overwritten by values generated during the\n*          reduction to tridiagonal form.  If UPLO = \'U\', the first\n*          superdiagonal and the diagonal of the tridiagonal matrix T\n*          are returned in rows KD and KD+1 of AB, and if UPLO = \'L\',\n*          the diagonal and first subdiagonal of T are returned in the\n*          first two rows of AB.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD + 1.\n*\n*  W       (output) DOUBLE PRECISION array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  Z       (output) COMPLEX*16 array, dimension (LDZ, N)\n*          If JOBZ = \'V\', then if INFO = 0, Z contains the orthonormal\n*          eigenvectors of the matrix A, with the i-th column of Z\n*          holding the eigenvector associated with W(i).\n*          If JOBZ = \'N\', then Z is not referenced.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace/output) COMPLEX*16 array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.\n*          If N <= 1,               LWORK must be at least 1.\n*          If JOBZ = \'N\' and N > 1, LWORK must be at least N.\n*          If JOBZ = \'V\' and N > 1, LWORK must be at least 2*N**2.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal sizes of the WORK, RWORK and\n*          IWORK arrays, returns these values as the first entries of\n*          the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  RWORK   (workspace/output) DOUBLE PRECISION array,\n*                                         dimension (LRWORK)\n*          On exit, if INFO = 0, RWORK(1) returns the optimal LRWORK.\n*\n*  LRWORK  (input) INTEGER\n*          The dimension of array RWORK.\n*          If N <= 1,               LRWORK must be at least 1.\n*          If JOBZ = \'N\' and N > 1, LRWORK must be at least N.\n*          If JOBZ = \'V\' and N > 1, LRWORK must be at least\n*                        1 + 5*N + 2*N**2.\n*\n*          If LRWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the optimal sizes of the WORK, RWORK\n*          and IWORK arrays, returns these values as the first entries\n*          of the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (MAX(1,LIWORK))\n*          On exit, if INFO = 0, IWORK(1) returns the optimal LIWORK.\n*\n*  LIWORK  (input) INTEGER\n*          The dimension of array IWORK.\n*          If JOBZ = \'N\' or N <= 1, LIWORK must be at least 1.\n*          If JOBZ = \'V\' and N > 1, LIWORK must be at least 3 + 5*N .\n*\n*          If LIWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the optimal sizes of the WORK, RWORK\n*          and IWORK arrays, returns these values as the first entries\n*          of the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit.\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  if INFO = i, the algorithm failed to converge; i\n*                off-diagonal elements of an intermediate tridiagonal\n*                form did not converge to zero.\n*\n'),(137,'chpevd_137.txt','      SUBROUTINE CHPEVD( JOBZ, UPLO, N, AP, W, Z, LDZ, WORK, LWORK,\n     $                   RWORK, LRWORK, IWORK, LIWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, LDZ, LIWORK, LRWORK, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      REAL               RWORK( * ), W( * )\n      COMPLEX            AP( * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CHPEVD computes all the eigenvalues and, optionally, eigenvectors of\n*  a complex Hermitian matrix A in packed storage.  If eigenvectors are\n*  desired, it uses a divide and conquer algorithm.\n*\n*  The divide and conquer algorithm makes very mild assumptions about\n*  floating point arithmetic. It will work on machines with a guard\n*  digit in add/subtract, or on those binary machines without guard\n*  digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\n*  Cray-2. It could conceivably fail on hexadecimal or decimal machines\n*  without guard digits, but we know of none.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input/output) COMPLEX array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the Hermitian matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*\n*          On exit, AP is overwritten by values generated during the\n*          reduction to tridiagonal form.  If UPLO = \'U\', the diagonal\n*          and first superdiagonal of the tridiagonal matrix T overwrite\n*          the corresponding elements of A, and if UPLO = \'L\', the\n*          diagonal and first subdiagonal of T overwrite the\n*          corresponding elements of A.\n*\n*  W       (output) REAL array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  Z       (output) COMPLEX array, dimension (LDZ, N)\n*          If JOBZ = \'V\', then if INFO = 0, Z contains the orthonormal\n*          eigenvectors of the matrix A, with the i-th column of Z\n*          holding the eigenvector associated with W(i).\n*          If JOBZ = \'N\', then Z is not referenced.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace/output) COMPLEX array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the required LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of array WORK.\n*          If N <= 1,               LWORK must be at least 1.\n*          If JOBZ = \'N\' and N > 1, LWORK must be at least N.\n*          If JOBZ = \'V\' and N > 1, LWORK must be at least 2*N.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the required sizes of the WORK, RWORK and\n*          IWORK arrays, returns these values as the first entries of\n*          the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  RWORK   (workspace/output) REAL array, dimension (MAX(1,LRWORK))\n*          On exit, if INFO = 0, RWORK(1) returns the required LRWORK.\n*\n*  LRWORK  (input) INTEGER\n*          The dimension of array RWORK.\n*          If N <= 1,               LRWORK must be at least 1.\n*          If JOBZ = \'N\' and N > 1, LRWORK must be at least N.\n*          If JOBZ = \'V\' and N > 1, LRWORK must be at least\n*                    1 + 5*N + 2*N**2.\n*\n*          If LRWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the required sizes of the WORK, RWORK\n*          and IWORK arrays, returns these values as the first entries\n*          of the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (MAX(1,LIWORK))\n*          On exit, if INFO = 0, IWORK(1) returns the required LIWORK.\n*\n*  LIWORK  (input) INTEGER\n*          The dimension of array IWORK.\n*          If JOBZ  = \'N\' or N <= 1, LIWORK must be at least 1.\n*          If JOBZ  = \'V\' and N > 1, LIWORK must be at least 3 + 5*N.\n*\n*          If LIWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the required sizes of the WORK, RWORK\n*          and IWORK arrays, returns these values as the first entries\n*          of the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  if INFO = i, the algorithm failed to converge; i\n*                off-diagonal elements of an intermediate tridiagonal\n*                form did not converge to zero.\n*\n'),(138,'zhpevd_138.txt','      SUBROUTINE ZHPEVD( JOBZ, UPLO, N, AP, W, Z, LDZ, WORK, LWORK,\n     $                   RWORK, LRWORK, IWORK, LIWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, LDZ, LIWORK, LRWORK, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      DOUBLE PRECISION   RWORK( * ), W( * )\n      COMPLEX*16         AP( * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZHPEVD computes all the eigenvalues and, optionally, eigenvectors of\n*  a complex Hermitian matrix A in packed storage.  If eigenvectors are\n*  desired, it uses a divide and conquer algorithm.\n*\n*  The divide and conquer algorithm makes very mild assumptions about\n*  floating point arithmetic. It will work on machines with a guard\n*  digit in add/subtract, or on those binary machines without guard\n*  digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\n*  Cray-2. It could conceivably fail on hexadecimal or decimal machines\n*  without guard digits, but we know of none.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input/output) COMPLEX*16 array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the Hermitian matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*\n*          On exit, AP is overwritten by values generated during the\n*          reduction to tridiagonal form.  If UPLO = \'U\', the diagonal\n*          and first superdiagonal of the tridiagonal matrix T overwrite\n*          the corresponding elements of A, and if UPLO = \'L\', the\n*          diagonal and first subdiagonal of T overwrite the\n*          corresponding elements of A.\n*\n*  W       (output) DOUBLE PRECISION array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  Z       (output) COMPLEX*16 array, dimension (LDZ, N)\n*          If JOBZ = \'V\', then if INFO = 0, Z contains the orthonormal\n*          eigenvectors of the matrix A, with the i-th column of Z\n*          holding the eigenvector associated with W(i).\n*          If JOBZ = \'N\', then Z is not referenced.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace/output) COMPLEX*16 array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the required LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of array WORK.\n*          If N <= 1,               LWORK must be at least 1.\n*          If JOBZ = \'N\' and N > 1, LWORK must be at least N.\n*          If JOBZ = \'V\' and N > 1, LWORK must be at least 2*N.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the required sizes of the WORK, RWORK and\n*          IWORK arrays, returns these values as the first entries of\n*          the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  RWORK   (workspace/output) DOUBLE PRECISION array,\n*                                         dimension (LRWORK)\n*          On exit, if INFO = 0, RWORK(1) returns the required LRWORK.\n*\n*  LRWORK  (input) INTEGER\n*          The dimension of array RWORK.\n*          If N <= 1,               LRWORK must be at least 1.\n*          If JOBZ = \'N\' and N > 1, LRWORK must be at least N.\n*          If JOBZ = \'V\' and N > 1, LRWORK must be at least\n*                    1 + 5*N + 2*N**2.\n*\n*          If LRWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the required sizes of the WORK, RWORK\n*          and IWORK arrays, returns these values as the first entries\n*          of the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (MAX(1,LIWORK))\n*          On exit, if INFO = 0, IWORK(1) returns the required LIWORK.\n*\n*  LIWORK  (input) INTEGER\n*          The dimension of array IWORK.\n*          If JOBZ  = \'N\' or N <= 1, LIWORK must be at least 1.\n*          If JOBZ  = \'V\' and N > 1, LIWORK must be at least 3 + 5*N.\n*\n*          If LIWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the required sizes of the WORK, RWORK\n*          and IWORK arrays, returns these values as the first entries\n*          of the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  if INFO = i, the algorithm failed to converge; i\n*                off-diagonal elements of an intermediate tridiagonal\n*                form did not converge to zero.\n*\n'),(139,'ssyevd_139.txt','      SUBROUTINE SSYEVD( JOBZ, UPLO, N, A, LDA, W, WORK, LWORK, IWORK,\n     $                   LIWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, LDA, LIWORK, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      REAL               A( LDA, * ), W( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SSYEVD computes all eigenvalues and, optionally, eigenvectors of a\n*  real symmetric matrix A. If eigenvectors are desired, it uses a\n*  divide and conquer algorithm.\n*\n*  The divide and conquer algorithm makes very mild assumptions about\n*  floating point arithmetic. It will work on machines with a guard\n*  digit in add/subtract, or on those binary machines without guard\n*  digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\n*  Cray-2. It could conceivably fail on hexadecimal or decimal machines\n*  without guard digits, but we know of none.\n*\n*  Because of large use of BLAS of level 3, SSYEVD needs N**2 more\n*  workspace than SSYEVX.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) REAL array, dimension (LDA, N)\n*          On entry, the symmetric matrix A.  If UPLO = \'U\', the\n*          leading N-by-N upper triangular part of A contains the\n*          upper triangular part of the matrix A.  If UPLO = \'L\',\n*          the leading N-by-N lower triangular part of A contains\n*          the lower triangular part of the matrix A.\n*          On exit, if JOBZ = \'V\', then if INFO = 0, A contains the\n*          orthonormal eigenvectors of the matrix A.\n*          If JOBZ = \'N\', then on exit the lower triangle (if UPLO=\'L\')\n*          or the upper triangle (if UPLO=\'U\') of A, including the\n*          diagonal, is destroyed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  W       (output) REAL array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  WORK    (workspace/output) REAL array,\n*                                         dimension (LWORK)\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.\n*          If N <= 1,               LWORK must be at least 1.\n*          If JOBZ = \'N\' and N > 1, LWORK must be at least 2*N+1.\n*          If JOBZ = \'V\' and N > 1, LWORK must be at least \n*                                                1 + 6*N + 2*N**2.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal sizes of the WORK and IWORK\n*          arrays, returns these values as the first entries of the WORK\n*          and IWORK arrays, and no error message related to LWORK or\n*          LIWORK is issued by XERBLA.\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (MAX(1,LIWORK))\n*          On exit, if INFO = 0, IWORK(1) returns the optimal LIWORK.\n*\n*  LIWORK  (input) INTEGER\n*          The dimension of the array IWORK.\n*          If N <= 1,                LIWORK must be at least 1.\n*          If JOBZ  = \'N\' and N > 1, LIWORK must be at least 1.\n*          If JOBZ  = \'V\' and N > 1, LIWORK must be at least 3 + 5*N.\n*\n*          If LIWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the optimal sizes of the WORK and\n*          IWORK arrays, returns these values as the first entries of\n*          the WORK and IWORK arrays, and no error message related to\n*          LWORK or LIWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i and JOBZ = \'N\', then the algorithm failed\n*                to converge; i off-diagonal elements of an intermediate\n*                tridiagonal form did not converge to zero;\n*                if INFO = i and JOBZ = \'V\', then the algorithm failed\n*                to compute an eigenvalue while working on the submatrix\n*                lying in rows and columns INFO/(N+1) through\n*                mod(INFO,N+1).\n*\n'),(140,'dsyevd_140.txt','      SUBROUTINE DSYEVD( JOBZ, UPLO, N, A, LDA, W, WORK, LWORK, IWORK,\n     $                   LIWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, LDA, LIWORK, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      DOUBLE PRECISION   A( LDA, * ), W( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DSYEVD computes all eigenvalues and, optionally, eigenvectors of a\n*  real symmetric matrix A. If eigenvectors are desired, it uses a\n*  divide and conquer algorithm.\n*\n*  The divide and conquer algorithm makes very mild assumptions about\n*  floating point arithmetic. It will work on machines with a guard\n*  digit in add/subtract, or on those binary machines without guard\n*  digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\n*  Cray-2. It could conceivably fail on hexadecimal or decimal machines\n*  without guard digits, but we know of none.\n*\n*  Because of large use of BLAS of level 3, DSYEVD needs N**2 more\n*  workspace than DSYEVX.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) DOUBLE PRECISION array, dimension (LDA, N)\n*          On entry, the symmetric matrix A.  If UPLO = \'U\', the\n*          leading N-by-N upper triangular part of A contains the\n*          upper triangular part of the matrix A.  If UPLO = \'L\',\n*          the leading N-by-N lower triangular part of A contains\n*          the lower triangular part of the matrix A.\n*          On exit, if JOBZ = \'V\', then if INFO = 0, A contains the\n*          orthonormal eigenvectors of the matrix A.\n*          If JOBZ = \'N\', then on exit the lower triangle (if UPLO=\'L\')\n*          or the upper triangle (if UPLO=\'U\') of A, including the\n*          diagonal, is destroyed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  W       (output) DOUBLE PRECISION array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  WORK    (workspace/output) DOUBLE PRECISION array,\n*                                         dimension (LWORK)\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.\n*          If N <= 1,               LWORK must be at least 1.\n*          If JOBZ = \'N\' and N > 1, LWORK must be at least 2*N+1.\n*          If JOBZ = \'V\' and N > 1, LWORK must be at least\n*                                                1 + 6*N + 2*N**2.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal sizes of the WORK and IWORK\n*          arrays, returns these values as the first entries of the WORK\n*          and IWORK arrays, and no error message related to LWORK or\n*          LIWORK is issued by XERBLA.\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (MAX(1,LIWORK))\n*          On exit, if INFO = 0, IWORK(1) returns the optimal LIWORK.\n*\n*  LIWORK  (input) INTEGER\n*          The dimension of the array IWORK.\n*          If N <= 1,                LIWORK must be at least 1.\n*          If JOBZ  = \'N\' and N > 1, LIWORK must be at least 1.\n*          If JOBZ  = \'V\' and N > 1, LIWORK must be at least 3 + 5*N.\n*\n*          If LIWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the optimal sizes of the WORK and\n*          IWORK arrays, returns these values as the first entries of\n*          the WORK and IWORK arrays, and no error message related to\n*          LWORK or LIWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i and JOBZ = \'N\', then the algorithm failed\n*                to converge; i off-diagonal elements of an intermediate\n*                tridiagonal form did not converge to zero;\n*                if INFO = i and JOBZ = \'V\', then the algorithm failed\n*                to compute an eigenvalue while working on the submatrix\n*                lying in rows and columns INFO/(N+1) through\n*                mod(INFO,N+1).\n*\n'),(141,'ssbevd_141.txt','      SUBROUTINE SSBEVD( JOBZ, UPLO, N, KD, AB, LDAB, W, Z, LDZ, WORK,\n     $                   LWORK, IWORK, LIWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, KD, LDAB, LDZ, LIWORK, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      REAL               AB( LDAB, * ), W( * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SSBEVD computes all the eigenvalues and, optionally, eigenvectors of\n*  a real symmetric band matrix A. If eigenvectors are desired, it uses\n*  a divide and conquer algorithm.\n*\n*  The divide and conquer algorithm makes very mild assumptions about\n*  floating point arithmetic. It will work on machines with a guard\n*  digit in add/subtract, or on those binary machines without guard\n*  digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\n*  Cray-2. It could conceivably fail on hexadecimal or decimal machines\n*  without guard digits, but we know of none.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KD >= 0.\n*\n*  AB      (input/output) REAL array, dimension (LDAB, N)\n*          On entry, the upper or lower triangle of the symmetric band\n*          matrix A, stored in the first KD+1 rows of the array.  The\n*          j-th column of A is stored in the j-th column of the array AB\n*          as follows:\n*          if UPLO = \'U\', AB(kd+1+i-j,j) = A(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+kd).\n*\n*          On exit, AB is overwritten by values generated during the\n*          reduction to tridiagonal form.  If UPLO = \'U\', the first\n*          superdiagonal and the diagonal of the tridiagonal matrix T\n*          are returned in rows KD and KD+1 of AB, and if UPLO = \'L\',\n*          the diagonal and first subdiagonal of T are returned in the\n*          first two rows of AB.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD + 1.\n*\n*  W       (output) REAL array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  Z       (output) REAL array, dimension (LDZ, N)\n*          If JOBZ = \'V\', then if INFO = 0, Z contains the orthonormal\n*          eigenvectors of the matrix A, with the i-th column of Z\n*          holding the eigenvector associated with W(i).\n*          If JOBZ = \'N\', then Z is not referenced.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace/output) REAL array,\n*                                         dimension (LWORK)\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.\n*          IF N <= 1,                LWORK must be at least 1.\n*          If JOBZ  = \'N\' and N > 2, LWORK must be at least 2*N.\n*          If JOBZ  = \'V\' and N > 2, LWORK must be at least\n*                         ( 1 + 5*N + 2*N**2 ).\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal sizes of the WORK and IWORK\n*          arrays, returns these values as the first entries of the WORK\n*          and IWORK arrays, and no error message related to LWORK or\n*          LIWORK is issued by XERBLA.\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (MAX(1,LIWORK))\n*          On exit, if INFO = 0, IWORK(1) returns the optimal LIWORK.\n*\n*  LIWORK  (input) INTEGER\n*          The dimension of the array LIWORK.\n*          If JOBZ  = \'N\' or N <= 1, LIWORK must be at least 1.\n*          If JOBZ  = \'V\' and N > 2, LIWORK must be at least 3 + 5*N.\n*\n*          If LIWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the optimal sizes of the WORK and\n*          IWORK arrays, returns these values as the first entries of\n*          the WORK and IWORK arrays, and no error message related to\n*          LWORK or LIWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the algorithm failed to converge; i\n*                off-diagonal elements of an intermediate tridiagonal\n*                form did not converge to zero.\n*\n'),(142,'dsbevd_142.txt','      SUBROUTINE DSBEVD( JOBZ, UPLO, N, KD, AB, LDAB, W, Z, LDZ, WORK,\n     $                   LWORK, IWORK, LIWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, KD, LDAB, LDZ, LIWORK, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      DOUBLE PRECISION   AB( LDAB, * ), W( * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DSBEVD computes all the eigenvalues and, optionally, eigenvectors of\n*  a real symmetric band matrix A. If eigenvectors are desired, it uses\n*  a divide and conquer algorithm.\n*\n*  The divide and conquer algorithm makes very mild assumptions about\n*  floating point arithmetic. It will work on machines with a guard\n*  digit in add/subtract, or on those binary machines without guard\n*  digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\n*  Cray-2. It could conceivably fail on hexadecimal or decimal machines\n*  without guard digits, but we know of none.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KD >= 0.\n*\n*  AB      (input/output) DOUBLE PRECISION array, dimension (LDAB, N)\n*          On entry, the upper or lower triangle of the symmetric band\n*          matrix A, stored in the first KD+1 rows of the array.  The\n*          j-th column of A is stored in the j-th column of the array AB\n*          as follows:\n*          if UPLO = \'U\', AB(kd+1+i-j,j) = A(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+kd).\n*\n*          On exit, AB is overwritten by values generated during the\n*          reduction to tridiagonal form.  If UPLO = \'U\', the first\n*          superdiagonal and the diagonal of the tridiagonal matrix T\n*          are returned in rows KD and KD+1 of AB, and if UPLO = \'L\',\n*          the diagonal and first subdiagonal of T are returned in the\n*          first two rows of AB.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD + 1.\n*\n*  W       (output) DOUBLE PRECISION array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  Z       (output) DOUBLE PRECISION array, dimension (LDZ, N)\n*          If JOBZ = \'V\', then if INFO = 0, Z contains the orthonormal\n*          eigenvectors of the matrix A, with the i-th column of Z\n*          holding the eigenvector associated with W(i).\n*          If JOBZ = \'N\', then Z is not referenced.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace/output) DOUBLE PRECISION array,\n*                                         dimension (LWORK)\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.\n*          IF N <= 1,                LWORK must be at least 1.\n*          If JOBZ  = \'N\' and N > 2, LWORK must be at least 2*N.\n*          If JOBZ  = \'V\' and N > 2, LWORK must be at least\n*                         ( 1 + 5*N + 2*N**2 ).\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal sizes of the WORK and IWORK\n*          arrays, returns these values as the first entries of the WORK\n*          and IWORK arrays, and no error message related to LWORK or\n*          LIWORK is issued by XERBLA.\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (MAX(1,LIWORK))\n*          On exit, if INFO = 0, IWORK(1) returns the optimal LIWORK.\n*\n*  LIWORK  (input) INTEGER\n*          The dimension of the array LIWORK.\n*          If JOBZ  = \'N\' or N <= 1, LIWORK must be at least 1.\n*          If JOBZ  = \'V\' and N > 2, LIWORK must be at least 3 + 5*N.\n*\n*          If LIWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the optimal sizes of the WORK and\n*          IWORK arrays, returns these values as the first entries of\n*          the WORK and IWORK arrays, and no error message related to\n*          LWORK or LIWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the algorithm failed to converge; i\n*                off-diagonal elements of an intermediate tridiagonal\n*                form did not converge to zero.\n*\n'),(143,'sspevd_143.txt','      SUBROUTINE SSPEVD( JOBZ, UPLO, N, AP, W, Z, LDZ, WORK, LWORK,\n     $                   IWORK, LIWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, LDZ, LIWORK, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      REAL               AP( * ), W( * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SSPEVD computes all the eigenvalues and, optionally, eigenvectors\n*  of a real symmetric matrix A in packed storage. If eigenvectors are\n*  desired, it uses a divide and conquer algorithm.\n*\n*  The divide and conquer algorithm makes very mild assumptions about\n*  floating point arithmetic. It will work on machines with a guard\n*  digit in add/subtract, or on those binary machines without guard\n*  digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\n*  Cray-2. It could conceivably fail on hexadecimal or decimal machines\n*  without guard digits, but we know of none.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input/output) REAL array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the symmetric matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*\n*          On exit, AP is overwritten by values generated during the\n*          reduction to tridiagonal form.  If UPLO = \'U\', the diagonal\n*          and first superdiagonal of the tridiagonal matrix T overwrite\n*          the corresponding elements of A, and if UPLO = \'L\', the\n*          diagonal and first subdiagonal of T overwrite the\n*          corresponding elements of A.\n*\n*  W       (output) REAL array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  Z       (output) REAL array, dimension (LDZ, N)\n*          If JOBZ = \'V\', then if INFO = 0, Z contains the orthonormal\n*          eigenvectors of the matrix A, with the i-th column of Z\n*          holding the eigenvector associated with W(i).\n*          If JOBZ = \'N\', then Z is not referenced.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace/output) REAL array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the required LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.\n*          If N <= 1,               LWORK must be at least 1.\n*          If JOBZ = \'N\' and N > 1, LWORK must be at least 2*N.\n*          If JOBZ = \'V\' and N > 1, LWORK must be at least\n*                                                 1 + 6*N + N**2.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the required sizes of the WORK and IWORK\n*          arrays, returns these values as the first entries of the WORK\n*          and IWORK arrays, and no error message related to LWORK or\n*          LIWORK is issued by XERBLA.\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (MAX(1,LIWORK))\n*          On exit, if INFO = 0, IWORK(1) returns the required LIWORK.\n*\n*  LIWORK  (input) INTEGER\n*          The dimension of the array IWORK.\n*          If JOBZ  = \'N\' or N <= 1, LIWORK must be at least 1.\n*          If JOBZ  = \'V\' and N > 1, LIWORK must be at least 3 + 5*N.\n*\n*          If LIWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the required sizes of the WORK and\n*          IWORK arrays, returns these values as the first entries of\n*          the WORK and IWORK arrays, and no error message related to\n*          LWORK or LIWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  if INFO = i, the algorithm failed to converge; i\n*                off-diagonal elements of an intermediate tridiagonal\n*                form did not converge to zero.\n*\n'),(144,'dspevd_144.txt','      SUBROUTINE DSPEVD( JOBZ, UPLO, N, AP, W, Z, LDZ, WORK, LWORK,\n     $                   IWORK, LIWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, LDZ, LIWORK, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      DOUBLE PRECISION   AP( * ), W( * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DSPEVD computes all the eigenvalues and, optionally, eigenvectors\n*  of a real symmetric matrix A in packed storage. If eigenvectors are\n*  desired, it uses a divide and conquer algorithm.\n*\n*  The divide and conquer algorithm makes very mild assumptions about\n*  floating point arithmetic. It will work on machines with a guard\n*  digit in add/subtract, or on those binary machines without guard\n*  digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\n*  Cray-2. It could conceivably fail on hexadecimal or decimal machines\n*  without guard digits, but we know of none.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input/output) DOUBLE PRECISION array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the symmetric matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*\n*          On exit, AP is overwritten by values generated during the\n*          reduction to tridiagonal form.  If UPLO = \'U\', the diagonal\n*          and first superdiagonal of the tridiagonal matrix T overwrite\n*          the corresponding elements of A, and if UPLO = \'L\', the\n*          diagonal and first subdiagonal of T overwrite the\n*          corresponding elements of A.\n*\n*  W       (output) DOUBLE PRECISION array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  Z       (output) DOUBLE PRECISION array, dimension (LDZ, N)\n*          If JOBZ = \'V\', then if INFO = 0, Z contains the orthonormal\n*          eigenvectors of the matrix A, with the i-th column of Z\n*          holding the eigenvector associated with W(i).\n*          If JOBZ = \'N\', then Z is not referenced.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace/output) DOUBLE PRECISION array,\n*                                         dimension (LWORK)\n*          On exit, if INFO = 0, WORK(1) returns the required LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.\n*          If N <= 1,               LWORK must be at least 1.\n*          If JOBZ = \'N\' and N > 1, LWORK must be at least 2*N.\n*          If JOBZ = \'V\' and N > 1, LWORK must be at least\n*                                                 1 + 6*N + N**2.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the required sizes of the WORK and IWORK\n*          arrays, returns these values as the first entries of the WORK\n*          and IWORK arrays, and no error message related to LWORK or\n*          LIWORK is issued by XERBLA.\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (MAX(1,LIWORK))\n*          On exit, if INFO = 0, IWORK(1) returns the required LIWORK.\n*\n*  LIWORK  (input) INTEGER\n*          The dimension of the array IWORK.\n*          If JOBZ  = \'N\' or N <= 1, LIWORK must be at least 1.\n*          If JOBZ  = \'V\' and N > 1, LIWORK must be at least 3 + 5*N.\n*\n*          If LIWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the required sizes of the WORK and\n*          IWORK arrays, returns these values as the first entries of\n*          the WORK and IWORK arrays, and no error message related to\n*          LWORK or LIWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  if INFO = i, the algorithm failed to converge; i\n*                off-diagonal elements of an intermediate tridiagonal\n*                form did not converge to zero.\n*\n'),(145,'sstevd_145.txt','      SUBROUTINE SSTEVD( JOBZ, N, D, E, Z, LDZ, WORK, LWORK, IWORK,\n     $                   LIWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ\n      INTEGER            INFO, LDZ, LIWORK, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      REAL               D( * ), E( * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SSTEVD computes all eigenvalues and, optionally, eigenvectors of a\n*  real symmetric tridiagonal matrix. If eigenvectors are desired, it\n*  uses a divide and conquer algorithm.\n*\n*  The divide and conquer algorithm makes very mild assumptions about\n*  floating point arithmetic. It will work on machines with a guard\n*  digit in add/subtract, or on those binary machines without guard\n*  digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\n*  Cray-2. It could conceivably fail on hexadecimal or decimal machines\n*  without guard digits, but we know of none.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  N       (input) INTEGER\n*          The order of the matrix.  N >= 0.\n*\n*  D       (input/output) REAL array, dimension (N)\n*          On entry, the n diagonal elements of the tridiagonal matrix\n*          A.\n*          On exit, if INFO = 0, the eigenvalues in ascending order.\n*\n*  E       (input/output) REAL array, dimension (N-1)\n*          On entry, the (n-1) subdiagonal elements of the tridiagonal\n*          matrix A, stored in elements 1 to N-1 of E.\n*          On exit, the contents of E are destroyed.\n*\n*  Z       (output) REAL array, dimension (LDZ, N)\n*          If JOBZ = \'V\', then if INFO = 0, Z contains the orthonormal\n*          eigenvectors of the matrix A, with the i-th column of Z\n*          holding the eigenvector associated with D(i).\n*          If JOBZ = \'N\', then Z is not referenced.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace/output) REAL array,\n*                                         dimension (LWORK)\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.\n*          If JOBZ  = \'N\' or N <= 1 then LWORK must be at least 1.\n*          If JOBZ  = \'V\' and N > 1 then LWORK must be at least\n*                         ( 1 + 4*N + N**2 ).\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal sizes of the WORK and IWORK\n*          arrays, returns these values as the first entries of the WORK\n*          and IWORK arrays, and no error message related to LWORK or\n*          LIWORK is issued by XERBLA.\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (MAX(1,LIWORK))\n*          On exit, if INFO = 0, IWORK(1) returns the optimal LIWORK.\n*\n*  LIWORK  (input) INTEGER\n*          The dimension of the array IWORK.\n*          If JOBZ  = \'N\' or N <= 1 then LIWORK must be at least 1.\n*          If JOBZ  = \'V\' and N > 1 then LIWORK must be at least 3+5*N.\n*\n*          If LIWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the optimal sizes of the WORK and\n*          IWORK arrays, returns these values as the first entries of\n*          the WORK and IWORK arrays, and no error message related to\n*          LWORK or LIWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the algorithm failed to converge; i\n*                off-diagonal elements of E did not converge to zero.\n*\n'),(146,'dstevd_146.txt','      SUBROUTINE DSTEVD( JOBZ, N, D, E, Z, LDZ, WORK, LWORK, IWORK,\n     $                   LIWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ\n      INTEGER            INFO, LDZ, LIWORK, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      DOUBLE PRECISION   D( * ), E( * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DSTEVD computes all eigenvalues and, optionally, eigenvectors of a\n*  real symmetric tridiagonal matrix. If eigenvectors are desired, it\n*  uses a divide and conquer algorithm.\n*\n*  The divide and conquer algorithm makes very mild assumptions about\n*  floating point arithmetic. It will work on machines with a guard\n*  digit in add/subtract, or on those binary machines without guard\n*  digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\n*  Cray-2. It could conceivably fail on hexadecimal or decimal machines\n*  without guard digits, but we know of none.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  N       (input) INTEGER\n*          The order of the matrix.  N >= 0.\n*\n*  D       (input/output) DOUBLE PRECISION array, dimension (N)\n*          On entry, the n diagonal elements of the tridiagonal matrix\n*          A.\n*          On exit, if INFO = 0, the eigenvalues in ascending order.\n*\n*  E       (input/output) DOUBLE PRECISION array, dimension (N-1)\n*          On entry, the (n-1) subdiagonal elements of the tridiagonal\n*          matrix A, stored in elements 1 to N-1 of E.\n*          On exit, the contents of E are destroyed.\n*\n*  Z       (output) DOUBLE PRECISION array, dimension (LDZ, N)\n*          If JOBZ = \'V\', then if INFO = 0, Z contains the orthonormal\n*          eigenvectors of the matrix A, with the i-th column of Z\n*          holding the eigenvector associated with D(i).\n*          If JOBZ = \'N\', then Z is not referenced.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace/output) DOUBLE PRECISION array,\n*                                         dimension (LWORK)\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.\n*          If JOBZ  = \'N\' or N <= 1 then LWORK must be at least 1.\n*          If JOBZ  = \'V\' and N > 1 then LWORK must be at least\n*                         ( 1 + 4*N + N**2 ).\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal sizes of the WORK and IWORK\n*          arrays, returns these values as the first entries of the WORK\n*          and IWORK arrays, and no error message related to LWORK or\n*          LIWORK is issued by XERBLA.\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (MAX(1,LIWORK))\n*          On exit, if INFO = 0, IWORK(1) returns the optimal LIWORK.\n*\n*  LIWORK  (input) INTEGER\n*          The dimension of the array IWORK.\n*          If JOBZ  = \'N\' or N <= 1 then LIWORK must be at least 1.\n*          If JOBZ  = \'V\' and N > 1 then LIWORK must be at least 3+5*N.\n*\n*          If LIWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the optimal sizes of the WORK and\n*          IWORK arrays, returns these values as the first entries of\n*          the WORK and IWORK arrays, and no error message related to\n*          LWORK or LIWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the algorithm failed to converge; i\n*                off-diagonal elements of E did not converge to zero.\n*\n'),(147,'cheevr_147.txt','      SUBROUTINE CHEEVR( JOBZ, RANGE, UPLO, N, A, LDA, VL, VU, IL, IU,\n     $                   ABSTOL, M, W, Z, LDZ, ISUPPZ, WORK, LWORK,\n     $                   RWORK, LRWORK, IWORK, LIWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     June 2010\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, RANGE, UPLO\n      INTEGER            IL, INFO, IU, LDA, LDZ, LIWORK, LRWORK, LWORK,\n     $                   M, N\n      REAL               ABSTOL, VL, VU\n*     ..\n*     .. Array Arguments ..\n      INTEGER            ISUPPZ( * ), IWORK( * )\n      REAL               RWORK( * ), W( * )\n      COMPLEX            A( LDA, * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CHEEVR computes selected eigenvalues and, optionally, eigenvectors\n*  of a complex Hermitian matrix A.  Eigenvalues and eigenvectors can\n*  be selected by specifying either a range of values or a range of\n*  indices for the desired eigenvalues.\n*\n*  CHEEVR first reduces the matrix A to tridiagonal form T with a call\n*  to CHETRD.  Then, whenever possible, CHEEVR calls CSTEMR to compute\n*  the eigenspectrum using Relatively Robust Representations.  CSTEMR\n*  computes eigenvalues by the dqds algorithm, while orthogonal\n*  eigenvectors are computed from various \"good\" L D L^T representations\n*  (also known as Relatively Robust Representations). Gram-Schmidt\n*  orthogonalization is avoided as far as possible. More specifically,\n*  the various steps of the algorithm are as follows.\n*\n*  For each unreduced block (submatrix) of T,\n*     (a) Compute T - sigma I  = L D L^T, so that L and D\n*         define all the wanted eigenvalues to high relative accuracy.\n*         This means that small relative changes in the entries of D and L\n*         cause only small relative changes in the eigenvalues and\n*         eigenvectors. The standard (unfactored) representation of the\n*         tridiagonal matrix T does not have this property in general.\n*     (b) Compute the eigenvalues to suitable accuracy.\n*         If the eigenvectors are desired, the algorithm attains full\n*         accuracy of the computed eigenvalues only right before\n*         the corresponding vectors have to be computed, see steps c) and d).\n*     (c) For each cluster of close eigenvalues, select a new\n*         shift close to the cluster, find a new factorization, and refine\n*         the shifted eigenvalues to suitable accuracy.\n*     (d) For each eigenvalue with a large enough relative separation compute\n*         the corresponding eigenvector by forming a rank revealing twisted\n*         factorization. Go back to (c) for any clusters that remain.\n*\n*  The desired accuracy of the output can be specified by the input\n*  parameter ABSTOL.\n*\n*  For more details, see DSTEMR\'s documentation and:\n*  - Inderjit S. Dhillon and Beresford N. Parlett: \"Multiple representations\n*    to compute orthogonal eigenvectors of symmetric tridiagonal matrices,\"\n*    Linear Algebra and its Applications, 387(1), pp. 1-28, August 2004.\n*  - Inderjit Dhillon and Beresford Parlett: \"Orthogonal Eigenvectors and\n*    Relative Gaps,\" SIAM Journal on Matrix Analysis and Applications, Vol. 25,\n*    2004.  Also LAPACK Working Note 154.\n*  - Inderjit Dhillon: \"A new O(n^2) algorithm for the symmetric\n*    tridiagonal eigenvalue/eigenvector problem\",\n*    Computer Science Division Technical Report No. UCB/CSD-97-971,\n*    UC Berkeley, May 1997.\n*\n*\n*  Note 1 : CHEEVR calls CSTEMR when the full spectrum is requested\n*  on machines which conform to the ieee-754 floating point standard.\n*  CHEEVR calls SSTEBZ and CSTEIN on non-ieee machines and\n*  when partial spectrum requests are made.\n*\n*  Normal execution of CSTEMR may create NaNs and infinities and\n*  hence may abort due to a floating point exception in environments\n*  which do not handle NaNs and infinities in the ieee standard default\n*  manner.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  RANGE   (input) CHARACTER*1\n*          = \'A\': all eigenvalues will be found.\n*          = \'V\': all eigenvalues in the half-open interval (VL,VU]\n*                 will be found.\n*          = \'I\': the IL-th through IU-th eigenvalues will be found.\n********** For RANGE = \'V\' or \'I\' and IU - IL < N - 1, SSTEBZ and\n********** CSTEIN are called\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) COMPLEX array, dimension (LDA, N)\n*          On entry, the Hermitian matrix A.  If UPLO = \'U\', the\n*          leading N-by-N upper triangular part of A contains the\n*          upper triangular part of the matrix A.  If UPLO = \'L\',\n*          the leading N-by-N lower triangular part of A contains\n*          the lower triangular part of the matrix A.\n*          On exit, the lower triangle (if UPLO=\'L\') or the upper\n*          triangle (if UPLO=\'U\') of A, including the diagonal, is\n*          destroyed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  VL      (input) REAL\n*  VU      (input) REAL\n*          If RANGE=\'V\', the lower and upper bounds of the interval to\n*          be searched for eigenvalues. VL < VU.\n*          Not referenced if RANGE = \'A\' or \'I\'.\n*\n*  IL      (input) INTEGER\n*  IU      (input) INTEGER\n*          If RANGE=\'I\', the indices (in ascending order) of the\n*          smallest and largest eigenvalues to be returned.\n*          1 <= IL <= IU <= N, if N > 0; IL = 1 and IU = 0 if N = 0.\n*          Not referenced if RANGE = \'A\' or \'V\'.\n*\n*  ABSTOL  (input) REAL\n*          The absolute error tolerance for the eigenvalues.\n*          An approximate eigenvalue is accepted as converged\n*          when it is determined to lie in an interval [a,b]\n*          of width less than or equal to\n*\n*                  ABSTOL + EPS *   max( |a|,|b| ) ,\n*\n*          where EPS is the machine precision.  If ABSTOL is less than\n*          or equal to zero, then  EPS*|T|  will be used in its place,\n*          where |T| is the 1-norm of the tridiagonal matrix obtained\n*          by reducing A to tridiagonal form.\n*\n*          See \"Computing Small Singular Values of Bidiagonal Matrices\n*          with Guaranteed High Relative Accuracy,\" by Demmel and\n*          Kahan, LAPACK Working Note #3.\n*\n*          If high relative accuracy is important, set ABSTOL to\n*          SLAMCH( \'Safe minimum\' ).  Doing so will guarantee that\n*          eigenvalues are computed to high relative accuracy when\n*          possible in future releases.  The current code does not\n*          make any guarantees about high relative accuracy, but\n*          furutre releases will. See J. Barlow and J. Demmel,\n*          \"Computing Accurate Eigensystems of Scaled Diagonally\n*          Dominant Matrices\", LAPACK Working Note #7, for a discussion\n*          of which matrices define their eigenvalues to high relative\n*          accuracy.\n*\n*  M       (output) INTEGER\n*          The total number of eigenvalues found.  0 <= M <= N.\n*          If RANGE = \'A\', M = N, and if RANGE = \'I\', M = IU-IL+1.\n*\n*  W       (output) REAL array, dimension (N)\n*          The first M elements contain the selected eigenvalues in\n*          ascending order.\n*\n*  Z       (output) COMPLEX array, dimension (LDZ, max(1,M))\n*          If JOBZ = \'V\', then if INFO = 0, the first M columns of Z\n*          contain the orthonormal eigenvectors of the matrix A\n*          corresponding to the selected eigenvalues, with the i-th\n*          column of Z holding the eigenvector associated with W(i).\n*          If JOBZ = \'N\', then Z is not referenced.\n*          Note: the user must ensure that at least max(1,M) columns are\n*          supplied in the array Z; if RANGE = \'V\', the exact value of M\n*          is not known in advance and an upper bound must be used.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  ISUPPZ  (output) INTEGER array, dimension ( 2*max(1,M) )\n*          The support of the eigenvectors in Z, i.e., the indices\n*          indicating the nonzero elements in Z. The i-th eigenvector\n*          is nonzero only in elements ISUPPZ( 2*i-1 ) through\n*          ISUPPZ( 2*i ).\n********** Implemented only for RANGE = \'A\' or \'I\' and IU - IL = N - 1\n*\n*  WORK    (workspace/output) COMPLEX array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The length of the array WORK.  LWORK >= max(1,2*N).\n*          For optimal efficiency, LWORK >= (NB+1)*N,\n*          where NB is the max of the blocksize for CHETRD and for\n*          CUNMTR as returned by ILAENV.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal sizes of the WORK, RWORK and\n*          IWORK arrays, returns these values as the first entries of\n*          the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  RWORK   (workspace/output) REAL array, dimension (MAX(1,LRWORK))\n*          On exit, if INFO = 0, RWORK(1) returns the optimal\n*          (and minimal) LRWORK.\n*\n* LRWORK   (input) INTEGER\n*          The length of the array RWORK.  LRWORK >= max(1,24*N).\n*\n*          If LRWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the optimal sizes of the WORK, RWORK\n*          and IWORK arrays, returns these values as the first entries\n*          of the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (MAX(1,LIWORK))\n*          On exit, if INFO = 0, IWORK(1) returns the optimal\n*          (and minimal) LIWORK.\n*\n* LIWORK   (input) INTEGER\n*          The dimension of the array IWORK.  LIWORK >= max(1,10*N).\n*\n*          If LIWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the optimal sizes of the WORK, RWORK\n*          and IWORK arrays, returns these values as the first entries\n*          of the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  Internal error\n*\n'),(148,'zheevr_148.txt','      SUBROUTINE ZHEEVR( JOBZ, RANGE, UPLO, N, A, LDA, VL, VU, IL, IU,\n     $                   ABSTOL, M, W, Z, LDZ, ISUPPZ, WORK, LWORK,\n     $                   RWORK, LRWORK, IWORK, LIWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, RANGE, UPLO\n      INTEGER            IL, INFO, IU, LDA, LDZ, LIWORK, LRWORK, LWORK,\n     $                   M, N\n      DOUBLE PRECISION   ABSTOL, VL, VU\n*     ..\n*     .. Array Arguments ..\n      INTEGER            ISUPPZ( * ), IWORK( * )\n      DOUBLE PRECISION   RWORK( * ), W( * )\n      COMPLEX*16         A( LDA, * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZHEEVR computes selected eigenvalues and, optionally, eigenvectors\n*  of a complex Hermitian matrix A.  Eigenvalues and eigenvectors can\n*  be selected by specifying either a range of values or a range of\n*  indices for the desired eigenvalues.\n*\n*  ZHEEVR first reduces the matrix A to tridiagonal form T with a call\n*  to ZHETRD.  Then, whenever possible, ZHEEVR calls ZSTEMR to compute\n*  eigenspectrum using Relatively Robust Representations.  ZSTEMR\n*  computes eigenvalues by the dqds algorithm, while orthogonal\n*  eigenvectors are computed from various \"good\" L D L^T representations\n*  (also known as Relatively Robust Representations). Gram-Schmidt\n*  orthogonalization is avoided as far as possible. More specifically,\n*  the various steps of the algorithm are as follows.\n*\n*  For each unreduced block (submatrix) of T,\n*     (a) Compute T - sigma I  = L D L^T, so that L and D\n*         define all the wanted eigenvalues to high relative accuracy.\n*         This means that small relative changes in the entries of D and L\n*         cause only small relative changes in the eigenvalues and\n*         eigenvectors. The standard (unfactored) representation of the\n*         tridiagonal matrix T does not have this property in general.\n*     (b) Compute the eigenvalues to suitable accuracy.\n*         If the eigenvectors are desired, the algorithm attains full\n*         accuracy of the computed eigenvalues only right before\n*         the corresponding vectors have to be computed, see steps c) and d).\n*     (c) For each cluster of close eigenvalues, select a new\n*         shift close to the cluster, find a new factorization, and refine\n*         the shifted eigenvalues to suitable accuracy.\n*     (d) For each eigenvalue with a large enough relative separation compute\n*         the corresponding eigenvector by forming a rank revealing twisted\n*         factorization. Go back to (c) for any clusters that remain.\n*\n*  The desired accuracy of the output can be specified by the input\n*  parameter ABSTOL.\n*\n*  For more details, see DSTEMR\'s documentation and:\n*  - Inderjit S. Dhillon and Beresford N. Parlett: \"Multiple representations\n*    to compute orthogonal eigenvectors of symmetric tridiagonal matrices,\"\n*    Linear Algebra and its Applications, 387(1), pp. 1-28, August 2004.\n*  - Inderjit Dhillon and Beresford Parlett: \"Orthogonal Eigenvectors and\n*    Relative Gaps,\" SIAM Journal on Matrix Analysis and Applications, Vol. 25,\n*    2004.  Also LAPACK Working Note 154.\n*  - Inderjit Dhillon: \"A new O(n^2) algorithm for the symmetric\n*    tridiagonal eigenvalue/eigenvector problem\",\n*    Computer Science Division Technical Report No. UCB/CSD-97-971,\n*    UC Berkeley, May 1997.\n*\n*\n*  Note 1 : ZHEEVR calls ZSTEMR when the full spectrum is requested\n*  on machines which conform to the ieee-754 floating point standard.\n*  ZHEEVR calls DSTEBZ and ZSTEIN on non-ieee machines and\n*  when partial spectrum requests are made.\n*\n*  Normal execution of ZSTEMR may create NaNs and infinities and\n*  hence may abort due to a floating point exception in environments\n*  which do not handle NaNs and infinities in the ieee standard default\n*  manner.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  RANGE   (input) CHARACTER*1\n*          = \'A\': all eigenvalues will be found.\n*          = \'V\': all eigenvalues in the half-open interval (VL,VU]\n*                 will be found.\n*          = \'I\': the IL-th through IU-th eigenvalues will be found.\n*          For RANGE = \'V\' or \'I\' and IU - IL < N - 1, DSTEBZ and\n*          ZSTEIN are called\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) COMPLEX*16 array, dimension (LDA, N)\n*          On entry, the Hermitian matrix A.  If UPLO = \'U\', the\n*          leading N-by-N upper triangular part of A contains the\n*          upper triangular part of the matrix A.  If UPLO = \'L\',\n*          the leading N-by-N lower triangular part of A contains\n*          the lower triangular part of the matrix A.\n*          On exit, the lower triangle (if UPLO=\'L\') or the upper\n*          triangle (if UPLO=\'U\') of A, including the diagonal, is\n*          destroyed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  VL      (input) DOUBLE PRECISION\n*  VU      (input) DOUBLE PRECISION\n*          If RANGE=\'V\', the lower and upper bounds of the interval to\n*          be searched for eigenvalues. VL < VU.\n*          Not referenced if RANGE = \'A\' or \'I\'.\n*\n*  IL      (input) INTEGER\n*  IU      (input) INTEGER\n*          If RANGE=\'I\', the indices (in ascending order) of the\n*          smallest and largest eigenvalues to be returned.\n*          1 <= IL <= IU <= N, if N > 0; IL = 1 and IU = 0 if N = 0.\n*          Not referenced if RANGE = \'A\' or \'V\'.\n*\n*  ABSTOL  (input) DOUBLE PRECISION\n*          The absolute error tolerance for the eigenvalues.\n*          An approximate eigenvalue is accepted as converged\n*          when it is determined to lie in an interval [a,b]\n*          of width less than or equal to\n*\n*                  ABSTOL + EPS *   max( |a|,|b| ) ,\n*\n*          where EPS is the machine precision.  If ABSTOL is less than\n*          or equal to zero, then  EPS*|T|  will be used in its place,\n*          where |T| is the 1-norm of the tridiagonal matrix obtained\n*          by reducing A to tridiagonal form.\n*\n*          See \"Computing Small Singular Values of Bidiagonal Matrices\n*          with Guaranteed High Relative Accuracy,\" by Demmel and\n*          Kahan, LAPACK Working Note #3.\n*\n*          If high relative accuracy is important, set ABSTOL to\n*          DLAMCH( \'Safe minimum\' ).  Doing so will guarantee that\n*          eigenvalues are computed to high relative accuracy when\n*          possible in future releases.  The current code does not\n*          make any guarantees about high relative accuracy, but\n*          furutre releases will. See J. Barlow and J. Demmel,\n*          \"Computing Accurate Eigensystems of Scaled Diagonally\n*          Dominant Matrices\", LAPACK Working Note #7, for a discussion\n*          of which matrices define their eigenvalues to high relative\n*          accuracy.\n*\n*  M       (output) INTEGER\n*          The total number of eigenvalues found.  0 <= M <= N.\n*          If RANGE = \'A\', M = N, and if RANGE = \'I\', M = IU-IL+1.\n*\n*  W       (output) DOUBLE PRECISION array, dimension (N)\n*          The first M elements contain the selected eigenvalues in\n*          ascending order.\n*\n*  Z       (output) COMPLEX*16 array, dimension (LDZ, max(1,M))\n*          If JOBZ = \'V\', then if INFO = 0, the first M columns of Z\n*          contain the orthonormal eigenvectors of the matrix A\n*          corresponding to the selected eigenvalues, with the i-th\n*          column of Z holding the eigenvector associated with W(i).\n*          If JOBZ = \'N\', then Z is not referenced.\n*          Note: the user must ensure that at least max(1,M) columns are\n*          supplied in the array Z; if RANGE = \'V\', the exact value of M\n*          is not known in advance and an upper bound must be used.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  ISUPPZ  (output) INTEGER array, dimension ( 2*max(1,M) )\n*          The support of the eigenvectors in Z, i.e., the indices\n*          indicating the nonzero elements in Z. The i-th eigenvector\n*          is nonzero only in elements ISUPPZ( 2*i-1 ) through\n*          ISUPPZ( 2*i ).\n*          Implemented only for RANGE = \'A\' or \'I\' and IU - IL = N - 1\n*\n*  WORK    (workspace/output) COMPLEX*16 array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The length of the array WORK.  LWORK >= max(1,2*N).\n*          For optimal efficiency, LWORK >= (NB+1)*N,\n*          where NB is the max of the blocksize for ZHETRD and for\n*          ZUNMTR as returned by ILAENV.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal sizes of the WORK, RWORK and\n*          IWORK arrays, returns these values as the first entries of\n*          the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  RWORK   (workspace/output) DOUBLE PRECISION array, dimension (MAX(1,LRWORK))\n*          On exit, if INFO = 0, RWORK(1) returns the optimal\n*          (and minimal) LRWORK.\n*\n*  LRWORK   (input) INTEGER\n*          The length of the array RWORK.  LRWORK >= max(1,24*N).\n*\n*          If LRWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the optimal sizes of the WORK, RWORK\n*          and IWORK arrays, returns these values as the first entries\n*          of the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (MAX(1,LIWORK))\n*          On exit, if INFO = 0, IWORK(1) returns the optimal\n*          (and minimal) LIWORK.\n*\n*  LIWORK   (input) INTEGER\n*          The dimension of the array IWORK.  LIWORK >= max(1,10*N).\n*\n*          If LIWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the optimal sizes of the WORK, RWORK\n*          and IWORK arrays, returns these values as the first entries\n*          of the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  Internal error\n*\n'),(149,'ssyevr_149.txt','      SUBROUTINE SSYEVR( JOBZ, RANGE, UPLO, N, A, LDA, VL, VU, IL, IU,\n     $                   ABSTOL, M, W, Z, LDZ, ISUPPZ, WORK, LWORK,\n     $                   IWORK, LIWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     June 2010\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, RANGE, UPLO\n      INTEGER            IL, INFO, IU, LDA, LDZ, LIWORK, LWORK, M, N\n      REAL               ABSTOL, VL, VU\n*     ..\n*     .. Array Arguments ..\n      INTEGER            ISUPPZ( * ), IWORK( * )\n      REAL               A( LDA, * ), W( * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SSYEVR computes selected eigenvalues and, optionally, eigenvectors\n*  of a real symmetric matrix A.  Eigenvalues and eigenvectors can be\n*  selected by specifying either a range of values or a range of\n*  indices for the desired eigenvalues.\n*\n*  SSYEVR first reduces the matrix A to tridiagonal form T with a call\n*  to SSYTRD.  Then, whenever possible, SSYEVR calls SSTEMR to compute\n*  the eigenspectrum using Relatively Robust Representations.  SSTEMR\n*  computes eigenvalues by the dqds algorithm, while orthogonal\n*  eigenvectors are computed from various \"good\" L D L^T representations\n*  (also known as Relatively Robust Representations). Gram-Schmidt\n*  orthogonalization is avoided as far as possible. More specifically,\n*  the various steps of the algorithm are as follows.\n*\n*  For each unreduced block (submatrix) of T,\n*     (a) Compute T - sigma I  = L D L^T, so that L and D\n*         define all the wanted eigenvalues to high relative accuracy.\n*         This means that small relative changes in the entries of D and L\n*         cause only small relative changes in the eigenvalues and\n*         eigenvectors. The standard (unfactored) representation of the\n*         tridiagonal matrix T does not have this property in general.\n*     (b) Compute the eigenvalues to suitable accuracy.\n*         If the eigenvectors are desired, the algorithm attains full\n*         accuracy of the computed eigenvalues only right before\n*         the corresponding vectors have to be computed, see steps c) and d).\n*     (c) For each cluster of close eigenvalues, select a new\n*         shift close to the cluster, find a new factorization, and refine\n*         the shifted eigenvalues to suitable accuracy.\n*     (d) For each eigenvalue with a large enough relative separation compute\n*         the corresponding eigenvector by forming a rank revealing twisted\n*         factorization. Go back to (c) for any clusters that remain.\n*\n*  The desired accuracy of the output can be specified by the input\n*  parameter ABSTOL.\n*\n*  For more details, see SSTEMR\'s documentation and:\n*  - Inderjit S. Dhillon and Beresford N. Parlett: \"Multiple representations\n*    to compute orthogonal eigenvectors of symmetric tridiagonal matrices,\"\n*    Linear Algebra and its Applications, 387(1), pp. 1-28, August 2004.\n*  - Inderjit Dhillon and Beresford Parlett: \"Orthogonal Eigenvectors and\n*    Relative Gaps,\" SIAM Journal on Matrix Analysis and Applications, Vol. 25,\n*    2004.  Also LAPACK Working Note 154.\n*  - Inderjit Dhillon: \"A new O(n^2) algorithm for the symmetric\n*    tridiagonal eigenvalue/eigenvector problem\",\n*    Computer Science Division Technical Report No. UCB/CSD-97-971,\n*    UC Berkeley, May 1997.\n*\n*\n*  Note 1 : SSYEVR calls SSTEMR when the full spectrum is requested\n*  on machines which conform to the ieee-754 floating point standard.\n*  SSYEVR calls SSTEBZ and SSTEIN on non-ieee machines and\n*  when partial spectrum requests are made.\n*\n*  Normal execution of SSTEMR may create NaNs and infinities and\n*  hence may abort due to a floating point exception in environments\n*  which do not handle NaNs and infinities in the ieee standard default\n*  manner.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  RANGE   (input) CHARACTER*1\n*          = \'A\': all eigenvalues will be found.\n*          = \'V\': all eigenvalues in the half-open interval (VL,VU]\n*                 will be found.\n*          = \'I\': the IL-th through IU-th eigenvalues will be found.\n********** For RANGE = \'V\' or \'I\' and IU - IL < N - 1, SSTEBZ and\n********** SSTEIN are called\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) REAL array, dimension (LDA, N)\n*          On entry, the symmetric matrix A.  If UPLO = \'U\', the\n*          leading N-by-N upper triangular part of A contains the\n*          upper triangular part of the matrix A.  If UPLO = \'L\',\n*          the leading N-by-N lower triangular part of A contains\n*          the lower triangular part of the matrix A.\n*          On exit, the lower triangle (if UPLO=\'L\') or the upper\n*          triangle (if UPLO=\'U\') of A, including the diagonal, is\n*          destroyed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  VL      (input) REAL\n*  VU      (input) REAL\n*          If RANGE=\'V\', the lower and upper bounds of the interval to\n*          be searched for eigenvalues. VL < VU.\n*          Not referenced if RANGE = \'A\' or \'I\'.\n*\n*  IL      (input) INTEGER\n*  IU      (input) INTEGER\n*          If RANGE=\'I\', the indices (in ascending order) of the\n*          smallest and largest eigenvalues to be returned.\n*          1 <= IL <= IU <= N, if N > 0; IL = 1 and IU = 0 if N = 0.\n*          Not referenced if RANGE = \'A\' or \'V\'.\n*\n*  ABSTOL  (input) REAL\n*          The absolute error tolerance for the eigenvalues.\n*          An approximate eigenvalue is accepted as converged\n*          when it is determined to lie in an interval [a,b]\n*          of width less than or equal to\n*\n*                  ABSTOL + EPS *   max( |a|,|b| ) ,\n*\n*          where EPS is the machine precision.  If ABSTOL is less than\n*          or equal to zero, then  EPS*|T|  will be used in its place,\n*          where |T| is the 1-norm of the tridiagonal matrix obtained\n*          by reducing A to tridiagonal form.\n*\n*          See \"Computing Small Singular Values of Bidiagonal Matrices\n*          with Guaranteed High Relative Accuracy,\" by Demmel and\n*          Kahan, LAPACK Working Note #3.\n*\n*          If high relative accuracy is important, set ABSTOL to\n*          SLAMCH( \'Safe minimum\' ).  Doing so will guarantee that\n*          eigenvalues are computed to high relative accuracy when\n*          possible in future releases.  The current code does not\n*          make any guarantees about high relative accuracy, but\n*          future releases will. See J. Barlow and J. Demmel,\n*          \"Computing Accurate Eigensystems of Scaled Diagonally\n*          Dominant Matrices\", LAPACK Working Note #7, for a discussion\n*          of which matrices define their eigenvalues to high relative\n*          accuracy.\n*\n*  M       (output) INTEGER\n*          The total number of eigenvalues found.  0 <= M <= N.\n*          If RANGE = \'A\', M = N, and if RANGE = \'I\', M = IU-IL+1.\n*\n*  W       (output) REAL array, dimension (N)\n*          The first M elements contain the selected eigenvalues in\n*          ascending order.\n*\n*  Z       (output) REAL array, dimension (LDZ, max(1,M))\n*          If JOBZ = \'V\', then if INFO = 0, the first M columns of Z\n*          contain the orthonormal eigenvectors of the matrix A\n*          corresponding to the selected eigenvalues, with the i-th\n*          column of Z holding the eigenvector associated with W(i).\n*          If JOBZ = \'N\', then Z is not referenced.\n*          Note: the user must ensure that at least max(1,M) columns are\n*          supplied in the array Z; if RANGE = \'V\', the exact value of M\n*          is not known in advance and an upper bound must be used.\n*          Supplying N columns is always safe.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  ISUPPZ  (output) INTEGER array, dimension ( 2*max(1,M) )\n*          The support of the eigenvectors in Z, i.e., the indices\n*          indicating the nonzero elements in Z. The i-th eigenvector\n*          is nonzero only in elements ISUPPZ( 2*i-1 ) through\n*          ISUPPZ( 2*i ).\n********** Implemented only for RANGE = \'A\' or \'I\' and IU - IL = N - 1\n*\n*  WORK    (workspace/output) REAL array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.  LWORK >= max(1,26*N).\n*          For optimal efficiency, LWORK >= (NB+6)*N,\n*          where NB is the max of the blocksize for SSYTRD and SORMTR\n*          returned by ILAENV.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal sizes of the WORK and IWORK\n*          arrays, returns these values as the first entries of the WORK\n*          and IWORK arrays, and no error message related to LWORK or\n*          LIWORK is issued by XERBLA.\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (MAX(1,LIWORK))\n*          On exit, if INFO = 0, IWORK(1) returns the optimal LWORK.\n*\n*  LIWORK  (input) INTEGER\n*          The dimension of the array IWORK.  LIWORK >= max(1,10*N).\n*\n*          If LIWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the optimal sizes of the WORK and\n*          IWORK arrays, returns these values as the first entries of\n*          the WORK and IWORK arrays, and no error message related to\n*          LWORK or LIWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  Internal error\n*\n'),(150,'dsyevr_150.txt','      SUBROUTINE DSYEVR( JOBZ, RANGE, UPLO, N, A, LDA, VL, VU, IL, IU,\n     $                   ABSTOL, M, W, Z, LDZ, ISUPPZ, WORK, LWORK,\n     $                   IWORK, LIWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     June 2010\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, RANGE, UPLO\n      INTEGER            IL, INFO, IU, LDA, LDZ, LIWORK, LWORK, M, N\n      DOUBLE PRECISION   ABSTOL, VL, VU\n*     ..\n*     .. Array Arguments ..\n      INTEGER            ISUPPZ( * ), IWORK( * )\n      DOUBLE PRECISION   A( LDA, * ), W( * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DSYEVR computes selected eigenvalues and, optionally, eigenvectors\n*  of a real symmetric matrix A.  Eigenvalues and eigenvectors can be\n*  selected by specifying either a range of values or a range of\n*  indices for the desired eigenvalues.\n*\n*  DSYEVR first reduces the matrix A to tridiagonal form T with a call\n*  to DSYTRD.  Then, whenever possible, DSYEVR calls DSTEMR to compute\n*  the eigenspectrum using Relatively Robust Representations.  DSTEMR\n*  computes eigenvalues by the dqds algorithm, while orthogonal\n*  eigenvectors are computed from various \"good\" L D L^T representations\n*  (also known as Relatively Robust Representations). Gram-Schmidt\n*  orthogonalization is avoided as far as possible. More specifically,\n*  the various steps of the algorithm are as follows.\n*\n*  For each unreduced block (submatrix) of T,\n*     (a) Compute T - sigma I  = L D L^T, so that L and D\n*         define all the wanted eigenvalues to high relative accuracy.\n*         This means that small relative changes in the entries of D and L\n*         cause only small relative changes in the eigenvalues and\n*         eigenvectors. The standard (unfactored) representation of the\n*         tridiagonal matrix T does not have this property in general.\n*     (b) Compute the eigenvalues to suitable accuracy.\n*         If the eigenvectors are desired, the algorithm attains full\n*         accuracy of the computed eigenvalues only right before\n*         the corresponding vectors have to be computed, see steps c) and d).\n*     (c) For each cluster of close eigenvalues, select a new\n*         shift close to the cluster, find a new factorization, and refine\n*         the shifted eigenvalues to suitable accuracy.\n*     (d) For each eigenvalue with a large enough relative separation compute\n*         the corresponding eigenvector by forming a rank revealing twisted\n*         factorization. Go back to (c) for any clusters that remain.\n*\n*  The desired accuracy of the output can be specified by the input\n*  parameter ABSTOL.\n*\n*  For more details, see DSTEMR\'s documentation and:\n*  - Inderjit S. Dhillon and Beresford N. Parlett: \"Multiple representations\n*    to compute orthogonal eigenvectors of symmetric tridiagonal matrices,\"\n*    Linear Algebra and its Applications, 387(1), pp. 1-28, August 2004.\n*  - Inderjit Dhillon and Beresford Parlett: \"Orthogonal Eigenvectors and\n*    Relative Gaps,\" SIAM Journal on Matrix Analysis and Applications, Vol. 25,\n*    2004.  Also LAPACK Working Note 154.\n*  - Inderjit Dhillon: \"A new O(n^2) algorithm for the symmetric\n*    tridiagonal eigenvalue/eigenvector problem\",\n*    Computer Science Division Technical Report No. UCB/CSD-97-971,\n*    UC Berkeley, May 1997.\n*\n*\n*  Note 1 : DSYEVR calls DSTEMR when the full spectrum is requested\n*  on machines which conform to the ieee-754 floating point standard.\n*  DSYEVR calls DSTEBZ and SSTEIN on non-ieee machines and\n*  when partial spectrum requests are made.\n*\n*  Normal execution of DSTEMR may create NaNs and infinities and\n*  hence may abort due to a floating point exception in environments\n*  which do not handle NaNs and infinities in the ieee standard default\n*  manner.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  RANGE   (input) CHARACTER*1\n*          = \'A\': all eigenvalues will be found.\n*          = \'V\': all eigenvalues in the half-open interval (VL,VU]\n*                 will be found.\n*          = \'I\': the IL-th through IU-th eigenvalues will be found.\n********** For RANGE = \'V\' or \'I\' and IU - IL < N - 1, DSTEBZ and\n********** DSTEIN are called\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) DOUBLE PRECISION array, dimension (LDA, N)\n*          On entry, the symmetric matrix A.  If UPLO = \'U\', the\n*          leading N-by-N upper triangular part of A contains the\n*          upper triangular part of the matrix A.  If UPLO = \'L\',\n*          the leading N-by-N lower triangular part of A contains\n*          the lower triangular part of the matrix A.\n*          On exit, the lower triangle (if UPLO=\'L\') or the upper\n*          triangle (if UPLO=\'U\') of A, including the diagonal, is\n*          destroyed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  VL      (input) DOUBLE PRECISION\n*  VU      (input) DOUBLE PRECISION\n*          If RANGE=\'V\', the lower and upper bounds of the interval to\n*          be searched for eigenvalues. VL < VU.\n*          Not referenced if RANGE = \'A\' or \'I\'.\n*\n*  IL      (input) INTEGER\n*  IU      (input) INTEGER\n*          If RANGE=\'I\', the indices (in ascending order) of the\n*          smallest and largest eigenvalues to be returned.\n*          1 <= IL <= IU <= N, if N > 0; IL = 1 and IU = 0 if N = 0.\n*          Not referenced if RANGE = \'A\' or \'V\'.\n*\n*  ABSTOL  (input) DOUBLE PRECISION\n*          The absolute error tolerance for the eigenvalues.\n*          An approximate eigenvalue is accepted as converged\n*          when it is determined to lie in an interval [a,b]\n*          of width less than or equal to\n*\n*                  ABSTOL + EPS *   max( |a|,|b| ) ,\n*\n*          where EPS is the machine precision.  If ABSTOL is less than\n*          or equal to zero, then  EPS*|T|  will be used in its place,\n*          where |T| is the 1-norm of the tridiagonal matrix obtained\n*          by reducing A to tridiagonal form.\n*\n*          See \"Computing Small Singular Values of Bidiagonal Matrices\n*          with Guaranteed High Relative Accuracy,\" by Demmel and\n*          Kahan, LAPACK Working Note #3.\n*\n*          If high relative accuracy is important, set ABSTOL to\n*          DLAMCH( \'Safe minimum\' ).  Doing so will guarantee that\n*          eigenvalues are computed to high relative accuracy when\n*          possible in future releases.  The current code does not\n*          make any guarantees about high relative accuracy, but\n*          future releases will. See J. Barlow and J. Demmel,\n*          \"Computing Accurate Eigensystems of Scaled Diagonally\n*          Dominant Matrices\", LAPACK Working Note #7, for a discussion\n*          of which matrices define their eigenvalues to high relative\n*          accuracy.\n*\n*  M       (output) INTEGER\n*          The total number of eigenvalues found.  0 <= M <= N.\n*          If RANGE = \'A\', M = N, and if RANGE = \'I\', M = IU-IL+1.\n*\n*  W       (output) DOUBLE PRECISION array, dimension (N)\n*          The first M elements contain the selected eigenvalues in\n*          ascending order.\n*\n*  Z       (output) DOUBLE PRECISION array, dimension (LDZ, max(1,M))\n*          If JOBZ = \'V\', then if INFO = 0, the first M columns of Z\n*          contain the orthonormal eigenvectors of the matrix A\n*          corresponding to the selected eigenvalues, with the i-th\n*          column of Z holding the eigenvector associated with W(i).\n*          If JOBZ = \'N\', then Z is not referenced.\n*          Note: the user must ensure that at least max(1,M) columns are\n*          supplied in the array Z; if RANGE = \'V\', the exact value of M\n*          is not known in advance and an upper bound must be used.\n*          Supplying N columns is always safe.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  ISUPPZ  (output) INTEGER array, dimension ( 2*max(1,M) )\n*          The support of the eigenvectors in Z, i.e., the indices\n*          indicating the nonzero elements in Z. The i-th eigenvector\n*          is nonzero only in elements ISUPPZ( 2*i-1 ) through\n*          ISUPPZ( 2*i ).\n********** Implemented only for RANGE = \'A\' or \'I\' and IU - IL = N - 1\n*\n*  WORK    (workspace/output) DOUBLE PRECISION array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.  LWORK >= max(1,26*N).\n*          For optimal efficiency, LWORK >= (NB+6)*N,\n*          where NB is the max of the blocksize for DSYTRD and DORMTR\n*          returned by ILAENV.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (MAX(1,LIWORK))\n*          On exit, if INFO = 0, IWORK(1) returns the optimal LWORK.\n*\n*  LIWORK  (input) INTEGER\n*          The dimension of the array IWORK.  LIWORK >= max(1,10*N).\n*\n*          If LIWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the optimal size of the IWORK array,\n*          returns this value as the first entry of the IWORK array, and\n*          no error message related to LIWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  Internal error\n*\n'),(151,'sstevr_151.txt','      SUBROUTINE SSTEVR( JOBZ, RANGE, N, D, E, VL, VU, IL, IU, ABSTOL,\n     $                   M, W, Z, LDZ, ISUPPZ, WORK, LWORK, IWORK,\n     $                   LIWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, RANGE\n      INTEGER            IL, INFO, IU, LDZ, LIWORK, LWORK, M, N\n      REAL               ABSTOL, VL, VU\n*     ..\n*     .. Array Arguments ..\n      INTEGER            ISUPPZ( * ), IWORK( * )\n      REAL               D( * ), E( * ), W( * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SSTEVR computes selected eigenvalues and, optionally, eigenvectors\n*  of a real symmetric tridiagonal matrix T.  Eigenvalues and\n*  eigenvectors can be selected by specifying either a range of values\n*  or a range of indices for the desired eigenvalues.\n*\n*  Whenever possible, SSTEVR calls SSTEMR to compute the\n*  eigenspectrum using Relatively Robust Representations.  SSTEMR\n*  computes eigenvalues by the dqds algorithm, while orthogonal\n*  eigenvectors are computed from various \"good\" L D L^T representations\n*  (also known as Relatively Robust Representations). Gram-Schmidt\n*  orthogonalization is avoided as far as possible. More specifically,\n*  the various steps of the algorithm are as follows. For the i-th\n*  unreduced block of T,\n*     (a) Compute T - sigma_i = L_i D_i L_i^T, such that L_i D_i L_i^T\n*          is a relatively robust representation,\n*     (b) Compute the eigenvalues, lambda_j, of L_i D_i L_i^T to high\n*         relative accuracy by the dqds algorithm,\n*     (c) If there is a cluster of close eigenvalues, \"choose\" sigma_i\n*         close to the cluster, and go to step (a),\n*     (d) Given the approximate eigenvalue lambda_j of L_i D_i L_i^T,\n*         compute the corresponding eigenvector by forming a\n*         rank-revealing twisted factorization.\n*  The desired accuracy of the output can be specified by the input\n*  parameter ABSTOL.\n*\n*  For more details, see \"A new O(n^2) algorithm for the symmetric\n*  tridiagonal eigenvalue/eigenvector problem\", by Inderjit Dhillon,\n*  Computer Science Division Technical Report No. UCB//CSD-97-971,\n*  UC Berkeley, May 1997.\n*\n*\n*  Note 1 : SSTEVR calls SSTEMR when the full spectrum is requested\n*  on machines which conform to the ieee-754 floating point standard.\n*  SSTEVR calls SSTEBZ and SSTEIN on non-ieee machines and\n*  when partial spectrum requests are made.\n*\n*  Normal execution of SSTEMR may create NaNs and infinities and\n*  hence may abort due to a floating point exception in environments\n*  which do not handle NaNs and infinities in the ieee standard default\n*  manner.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  RANGE   (input) CHARACTER*1\n*          = \'A\': all eigenvalues will be found.\n*          = \'V\': all eigenvalues in the half-open interval (VL,VU]\n*                 will be found.\n*          = \'I\': the IL-th through IU-th eigenvalues will be found.\n********** For RANGE = \'V\' or \'I\' and IU - IL < N - 1, SSTEBZ and\n********** SSTEIN are called\n*\n*  N       (input) INTEGER\n*          The order of the matrix.  N >= 0.\n*\n*  D       (input/output) REAL array, dimension (N)\n*          On entry, the n diagonal elements of the tridiagonal matrix\n*          A.\n*          On exit, D may be multiplied by a constant factor chosen\n*          to avoid over/underflow in computing the eigenvalues.\n*\n*  E       (input/output) REAL array, dimension (max(1,N-1))\n*          On entry, the (n-1) subdiagonal elements of the tridiagonal\n*          matrix A in elements 1 to N-1 of E.\n*          On exit, E may be multiplied by a constant factor chosen\n*          to avoid over/underflow in computing the eigenvalues.\n*\n*  VL      (input) REAL\n*  VU      (input) REAL\n*          If RANGE=\'V\', the lower and upper bounds of the interval to\n*          be searched for eigenvalues. VL < VU.\n*          Not referenced if RANGE = \'A\' or \'I\'.\n*\n*  IL      (input) INTEGER\n*  IU      (input) INTEGER\n*          If RANGE=\'I\', the indices (in ascending order) of the\n*          smallest and largest eigenvalues to be returned.\n*          1 <= IL <= IU <= N, if N > 0; IL = 1 and IU = 0 if N = 0.\n*          Not referenced if RANGE = \'A\' or \'V\'.\n*\n*  ABSTOL  (input) REAL\n*          The absolute error tolerance for the eigenvalues.\n*          An approximate eigenvalue is accepted as converged\n*          when it is determined to lie in an interval [a,b]\n*          of width less than or equal to\n*\n*                  ABSTOL + EPS *   max( |a|,|b| ) ,\n*\n*          where EPS is the machine precision.  If ABSTOL is less than\n*          or equal to zero, then  EPS*|T|  will be used in its place,\n*          where |T| is the 1-norm of the tridiagonal matrix obtained\n*          by reducing A to tridiagonal form.\n*\n*          See \"Computing Small Singular Values of Bidiagonal Matrices\n*          with Guaranteed High Relative Accuracy,\" by Demmel and\n*          Kahan, LAPACK Working Note #3.\n*\n*          If high relative accuracy is important, set ABSTOL to\n*          SLAMCH( \'Safe minimum\' ).  Doing so will guarantee that\n*          eigenvalues are computed to high relative accuracy when\n*          possible in future releases.  The current code does not\n*          make any guarantees about high relative accuracy, but\n*          future releases will. See J. Barlow and J. Demmel,\n*          \"Computing Accurate Eigensystems of Scaled Diagonally\n*          Dominant Matrices\", LAPACK Working Note #7, for a discussion\n*          of which matrices define their eigenvalues to high relative\n*          accuracy.\n*\n*  M       (output) INTEGER\n*          The total number of eigenvalues found.  0 <= M <= N.\n*          If RANGE = \'A\', M = N, and if RANGE = \'I\', M = IU-IL+1.\n*\n*  W       (output) REAL array, dimension (N)\n*          The first M elements contain the selected eigenvalues in\n*          ascending order.\n*\n*  Z       (output) REAL array, dimension (LDZ, max(1,M) )\n*          If JOBZ = \'V\', then if INFO = 0, the first M columns of Z\n*          contain the orthonormal eigenvectors of the matrix A\n*          corresponding to the selected eigenvalues, with the i-th\n*          column of Z holding the eigenvector associated with W(i).\n*          Note: the user must ensure that at least max(1,M) columns are\n*          supplied in the array Z; if RANGE = \'V\', the exact value of M\n*          is not known in advance and an upper bound must be used.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  ISUPPZ  (output) INTEGER array, dimension ( 2*max(1,M) )\n*          The support of the eigenvectors in Z, i.e., the indices\n*          indicating the nonzero elements in Z. The i-th eigenvector\n*          is nonzero only in elements ISUPPZ( 2*i-1 ) through\n*          ISUPPZ( 2*i ).\n********** Implemented only for RANGE = \'A\' or \'I\' and IU - IL = N - 1\n*\n*  WORK    (workspace/output) REAL array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal (and\n*          minimal) LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.  LWORK >= 20*N.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal sizes of the WORK and IWORK\n*          arrays, returns these values as the first entries of the WORK\n*          and IWORK arrays, and no error message related to LWORK or\n*          LIWORK is issued by XERBLA.\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (MAX(1,LIWORK))\n*          On exit, if INFO = 0, IWORK(1) returns the optimal (and\n*          minimal) LIWORK.\n*\n*  LIWORK  (input) INTEGER\n*          The dimension of the array IWORK.  LIWORK >= 10*N.\n*\n*          If LIWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the optimal sizes of the WORK and\n*          IWORK arrays, returns these values as the first entries of\n*          the WORK and IWORK arrays, and no error message related to\n*          LWORK or LIWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  Internal error\n*\n'),(152,'dstevr_152.txt','      SUBROUTINE DSTEVR( JOBZ, RANGE, N, D, E, VL, VU, IL, IU, ABSTOL,\n     $                   M, W, Z, LDZ, ISUPPZ, WORK, LWORK, IWORK,\n     $                   LIWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, RANGE\n      INTEGER            IL, INFO, IU, LDZ, LIWORK, LWORK, M, N\n      DOUBLE PRECISION   ABSTOL, VL, VU\n*     ..\n*     .. Array Arguments ..\n      INTEGER            ISUPPZ( * ), IWORK( * )\n      DOUBLE PRECISION   D( * ), E( * ), W( * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DSTEVR computes selected eigenvalues and, optionally, eigenvectors\n*  of a real symmetric tridiagonal matrix T.  Eigenvalues and\n*  eigenvectors can be selected by specifying either a range of values\n*  or a range of indices for the desired eigenvalues.\n*\n*  Whenever possible, DSTEVR calls DSTEMR to compute the\n*  eigenspectrum using Relatively Robust Representations.  DSTEMR\n*  computes eigenvalues by the dqds algorithm, while orthogonal\n*  eigenvectors are computed from various \"good\" L D L^T representations\n*  (also known as Relatively Robust Representations). Gram-Schmidt\n*  orthogonalization is avoided as far as possible. More specifically,\n*  the various steps of the algorithm are as follows. For the i-th\n*  unreduced block of T,\n*     (a) Compute T - sigma_i = L_i D_i L_i^T, such that L_i D_i L_i^T\n*          is a relatively robust representation,\n*     (b) Compute the eigenvalues, lambda_j, of L_i D_i L_i^T to high\n*         relative accuracy by the dqds algorithm,\n*     (c) If there is a cluster of close eigenvalues, \"choose\" sigma_i\n*         close to the cluster, and go to step (a),\n*     (d) Given the approximate eigenvalue lambda_j of L_i D_i L_i^T,\n*         compute the corresponding eigenvector by forming a\n*         rank-revealing twisted factorization.\n*  The desired accuracy of the output can be specified by the input\n*  parameter ABSTOL.\n*\n*  For more details, see \"A new O(n^2) algorithm for the symmetric\n*  tridiagonal eigenvalue/eigenvector problem\", by Inderjit Dhillon,\n*  Computer Science Division Technical Report No. UCB//CSD-97-971,\n*  UC Berkeley, May 1997.\n*\n*\n*  Note 1 : DSTEVR calls DSTEMR when the full spectrum is requested\n*  on machines which conform to the ieee-754 floating point standard.\n*  DSTEVR calls DSTEBZ and DSTEIN on non-ieee machines and\n*  when partial spectrum requests are made.\n*\n*  Normal execution of DSTEMR may create NaNs and infinities and\n*  hence may abort due to a floating point exception in environments\n*  which do not handle NaNs and infinities in the ieee standard default\n*  manner.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  RANGE   (input) CHARACTER*1\n*          = \'A\': all eigenvalues will be found.\n*          = \'V\': all eigenvalues in the half-open interval (VL,VU]\n*                 will be found.\n*          = \'I\': the IL-th through IU-th eigenvalues will be found.\n********** For RANGE = \'V\' or \'I\' and IU - IL < N - 1, DSTEBZ and\n********** DSTEIN are called\n*\n*  N       (input) INTEGER\n*          The order of the matrix.  N >= 0.\n*\n*  D       (input/output) DOUBLE PRECISION array, dimension (N)\n*          On entry, the n diagonal elements of the tridiagonal matrix\n*          A.\n*          On exit, D may be multiplied by a constant factor chosen\n*          to avoid over/underflow in computing the eigenvalues.\n*\n*  E       (input/output) DOUBLE PRECISION array, dimension (max(1,N-1))\n*          On entry, the (n-1) subdiagonal elements of the tridiagonal\n*          matrix A in elements 1 to N-1 of E.\n*          On exit, E may be multiplied by a constant factor chosen\n*          to avoid over/underflow in computing the eigenvalues.\n*\n*  VL      (input) DOUBLE PRECISION\n*  VU      (input) DOUBLE PRECISION\n*          If RANGE=\'V\', the lower and upper bounds of the interval to\n*          be searched for eigenvalues. VL < VU.\n*          Not referenced if RANGE = \'A\' or \'I\'.\n*\n*  IL      (input) INTEGER\n*  IU      (input) INTEGER\n*          If RANGE=\'I\', the indices (in ascending order) of the\n*          smallest and largest eigenvalues to be returned.\n*          1 <= IL <= IU <= N, if N > 0; IL = 1 and IU = 0 if N = 0.\n*          Not referenced if RANGE = \'A\' or \'V\'.\n*\n*  ABSTOL  (input) DOUBLE PRECISION\n*          The absolute error tolerance for the eigenvalues.\n*          An approximate eigenvalue is accepted as converged\n*          when it is determined to lie in an interval [a,b]\n*          of width less than or equal to\n*\n*                  ABSTOL + EPS *   max( |a|,|b| ) ,\n*\n*          where EPS is the machine precision.  If ABSTOL is less than\n*          or equal to zero, then  EPS*|T|  will be used in its place,\n*          where |T| is the 1-norm of the tridiagonal matrix obtained\n*          by reducing A to tridiagonal form.\n*\n*          See \"Computing Small Singular Values of Bidiagonal Matrices\n*          with Guaranteed High Relative Accuracy,\" by Demmel and\n*          Kahan, LAPACK Working Note #3.\n*\n*          If high relative accuracy is important, set ABSTOL to\n*          DLAMCH( \'Safe minimum\' ).  Doing so will guarantee that\n*          eigenvalues are computed to high relative accuracy when\n*          possible in future releases.  The current code does not\n*          make any guarantees about high relative accuracy, but\n*          future releases will. See J. Barlow and J. Demmel,\n*          \"Computing Accurate Eigensystems of Scaled Diagonally\n*          Dominant Matrices\", LAPACK Working Note #7, for a discussion\n*          of which matrices define their eigenvalues to high relative\n*          accuracy.\n*\n*  M       (output) INTEGER\n*          The total number of eigenvalues found.  0 <= M <= N.\n*          If RANGE = \'A\', M = N, and if RANGE = \'I\', M = IU-IL+1.\n*\n*  W       (output) DOUBLE PRECISION array, dimension (N)\n*          The first M elements contain the selected eigenvalues in\n*          ascending order.\n*\n*  Z       (output) DOUBLE PRECISION array, dimension (LDZ, max(1,M) )\n*          If JOBZ = \'V\', then if INFO = 0, the first M columns of Z\n*          contain the orthonormal eigenvectors of the matrix A\n*          corresponding to the selected eigenvalues, with the i-th\n*          column of Z holding the eigenvector associated with W(i).\n*          Note: the user must ensure that at least max(1,M) columns are\n*          supplied in the array Z; if RANGE = \'V\', the exact value of M\n*          is not known in advance and an upper bound must be used.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  ISUPPZ  (output) INTEGER array, dimension ( 2*max(1,M) )\n*          The support of the eigenvectors in Z, i.e., the indices\n*          indicating the nonzero elements in Z. The i-th eigenvector\n*          is nonzero only in elements ISUPPZ( 2*i-1 ) through\n*          ISUPPZ( 2*i ).\n********** Implemented only for RANGE = \'A\' or \'I\' and IU - IL = N - 1\n*\n*  WORK    (workspace/output) DOUBLE PRECISION array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal (and\n*          minimal) LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.  LWORK >= max(1,20*N).\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal sizes of the WORK and IWORK\n*          arrays, returns these values as the first entries of the WORK\n*          and IWORK arrays, and no error message related to LWORK or\n*          LIWORK is issued by XERBLA.\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (MAX(1,LIWORK))\n*          On exit, if INFO = 0, IWORK(1) returns the optimal (and\n*          minimal) LIWORK.\n*\n*  LIWORK  (input) INTEGER\n*          The dimension of the array IWORK.  LIWORK >= max(1,10*N).\n*\n*          If LIWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the optimal sizes of the WORK and\n*          IWORK arrays, returns these values as the first entries of\n*          the WORK and IWORK arrays, and no error message related to\n*          LWORK or LIWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  Internal error\n*\n'),(153,'chegv_153.txt','      SUBROUTINE CHEGV( ITYPE, JOBZ, UPLO, N, A, LDA, B, LDB, W, WORK,\n     $                  LWORK, RWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, ITYPE, LDA, LDB, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      REAL               RWORK( * ), W( * )\n      COMPLEX            A( LDA, * ), B( LDB, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CHEGV computes all the eigenvalues, and optionally, the eigenvectors\n*  of a complex generalized Hermitian-definite eigenproblem, of the form\n*  A*x=(lambda)*B*x,  A*Bx=(lambda)*x,  or B*A*x=(lambda)*x.\n*  Here A and B are assumed to be Hermitian and B is also\n*  positive definite.\n*\n*  Arguments\n*  =========\n*\n*  ITYPE   (input) INTEGER\n*          Specifies the problem type to be solved:\n*          = 1:  A*x = (lambda)*B*x\n*          = 2:  A*B*x = (lambda)*x\n*          = 3:  B*A*x = (lambda)*x\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangles of A and B are stored;\n*          = \'L\':  Lower triangles of A and B are stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A and B.  N >= 0.\n*\n*  A       (input/output) COMPLEX array, dimension (LDA, N)\n*          On entry, the Hermitian matrix A.  If UPLO = \'U\', the\n*          leading N-by-N upper triangular part of A contains the\n*          upper triangular part of the matrix A.  If UPLO = \'L\',\n*          the leading N-by-N lower triangular part of A contains\n*          the lower triangular part of the matrix A.\n*\n*          On exit, if JOBZ = \'V\', then if INFO = 0, A contains the\n*          matrix Z of eigenvectors.  The eigenvectors are normalized\n*          as follows:\n*          if ITYPE = 1 or 2, Z**H*B*Z = I;\n*          if ITYPE = 3, Z**H*inv(B)*Z = I.\n*          If JOBZ = \'N\', then on exit the upper triangle (if UPLO=\'U\')\n*          or the lower triangle (if UPLO=\'L\') of A, including the\n*          diagonal, is destroyed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  B       (input/output) COMPLEX array, dimension (LDB, N)\n*          On entry, the Hermitian positive definite matrix B.\n*          If UPLO = \'U\', the leading N-by-N upper triangular part of B\n*          contains the upper triangular part of the matrix B.\n*          If UPLO = \'L\', the leading N-by-N lower triangular part of B\n*          contains the lower triangular part of the matrix B.\n*\n*          On exit, if INFO <= N, the part of B containing the matrix is\n*          overwritten by the triangular factor U or L from the Cholesky\n*          factorization B = U**H*U or B = L*L**H.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  W       (output) REAL array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  WORK    (workspace/output) COMPLEX array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The length of the array WORK.  LWORK >= max(1,2*N-1).\n*          For optimal efficiency, LWORK >= (NB+1)*N,\n*          where NB is the blocksize for CHETRD returned by ILAENV.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  RWORK   (workspace) REAL array, dimension (max(1, 3*N-2))\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  CPOTRF or CHEEV returned an error code:\n*             <= N:  if INFO = i, CHEEV failed to converge;\n*                    i off-diagonal elements of an intermediate\n*                    tridiagonal form did not converge to zero;\n*             > N:   if INFO = N + i, for 1 <= i <= N, then the leading\n*                    minor of order i of B is not positive definite.\n*                    The factorization of B could not be completed and\n*                    no eigenvalues or eigenvectors were computed.\n*\n'),(154,'zhegv_154.txt','      SUBROUTINE ZHEGV( ITYPE, JOBZ, UPLO, N, A, LDA, B, LDB, W, WORK,\n     $                  LWORK, RWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, ITYPE, LDA, LDB, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   RWORK( * ), W( * )\n      COMPLEX*16         A( LDA, * ), B( LDB, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZHEGV computes all the eigenvalues, and optionally, the eigenvectors\n*  of a complex generalized Hermitian-definite eigenproblem, of the form\n*  A*x=(lambda)*B*x,  A*Bx=(lambda)*x,  or B*A*x=(lambda)*x.\n*  Here A and B are assumed to be Hermitian and B is also\n*  positive definite.\n*\n*  Arguments\n*  =========\n*\n*  ITYPE   (input) INTEGER\n*          Specifies the problem type to be solved:\n*          = 1:  A*x = (lambda)*B*x\n*          = 2:  A*B*x = (lambda)*x\n*          = 3:  B*A*x = (lambda)*x\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangles of A and B are stored;\n*          = \'L\':  Lower triangles of A and B are stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A and B.  N >= 0.\n*\n*  A       (input/output) COMPLEX*16 array, dimension (LDA, N)\n*          On entry, the Hermitian matrix A.  If UPLO = \'U\', the\n*          leading N-by-N upper triangular part of A contains the\n*          upper triangular part of the matrix A.  If UPLO = \'L\',\n*          the leading N-by-N lower triangular part of A contains\n*          the lower triangular part of the matrix A.\n*\n*          On exit, if JOBZ = \'V\', then if INFO = 0, A contains the\n*          matrix Z of eigenvectors.  The eigenvectors are normalized\n*          as follows:\n*          if ITYPE = 1 or 2, Z**H*B*Z = I;\n*          if ITYPE = 3, Z**H*inv(B)*Z = I.\n*          If JOBZ = \'N\', then on exit the upper triangle (if UPLO=\'U\')\n*          or the lower triangle (if UPLO=\'L\') of A, including the\n*          diagonal, is destroyed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB, N)\n*          On entry, the Hermitian positive definite matrix B.\n*          If UPLO = \'U\', the leading N-by-N upper triangular part of B\n*          contains the upper triangular part of the matrix B.\n*          If UPLO = \'L\', the leading N-by-N lower triangular part of B\n*          contains the lower triangular part of the matrix B.\n*\n*          On exit, if INFO <= N, the part of B containing the matrix is\n*          overwritten by the triangular factor U or L from the Cholesky\n*          factorization B = U**H*U or B = L*L**H.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  W       (output) DOUBLE PRECISION array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  WORK    (workspace/output) COMPLEX*16 array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The length of the array WORK.  LWORK >= max(1,2*N-1).\n*          For optimal efficiency, LWORK >= (NB+1)*N,\n*          where NB is the blocksize for ZHETRD returned by ILAENV.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (max(1, 3*N-2))\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  ZPOTRF or ZHEEV returned an error code:\n*             <= N:  if INFO = i, ZHEEV failed to converge;\n*                    i off-diagonal elements of an intermediate\n*                    tridiagonal form did not converge to zero;\n*             > N:   if INFO = N + i, for 1 <= i <= N, then the leading\n*                    minor of order i of B is not positive definite.\n*                    The factorization of B could not be completed and\n*                    no eigenvalues or eigenvectors were computed.\n*\n'),(155,'chbgv_155.txt','      SUBROUTINE CHBGV( JOBZ, UPLO, N, KA, KB, AB, LDAB, BB, LDBB, W, Z,\n     $                  LDZ, WORK, RWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, KA, KB, LDAB, LDBB, LDZ, N\n*     ..\n*     .. Array Arguments ..\n      REAL               RWORK( * ), W( * )\n      COMPLEX            AB( LDAB, * ), BB( LDBB, * ), WORK( * ),\n     $                   Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CHBGV computes all the eigenvalues, and optionally, the eigenvectors\n*  of a complex generalized Hermitian-definite banded eigenproblem, of\n*  the form A*x=(lambda)*B*x. Here A and B are assumed to be Hermitian\n*  and banded, and B is also positive definite.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangles of A and B are stored;\n*          = \'L\':  Lower triangles of A and B are stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A and B.  N >= 0.\n*\n*  KA      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'. KA >= 0.\n*\n*  KB      (input) INTEGER\n*          The number of superdiagonals of the matrix B if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'. KB >= 0.\n*\n*  AB      (input/output) COMPLEX array, dimension (LDAB, N)\n*          On entry, the upper or lower triangle of the Hermitian band\n*          matrix A, stored in the first ka+1 rows of the array.  The\n*          j-th column of A is stored in the j-th column of the array AB\n*          as follows:\n*          if UPLO = \'U\', AB(ka+1+i-j,j) = A(i,j) for max(1,j-ka)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+ka).\n*\n*          On exit, the contents of AB are destroyed.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KA+1.\n*\n*  BB      (input/output) COMPLEX array, dimension (LDBB, N)\n*          On entry, the upper or lower triangle of the Hermitian band\n*          matrix B, stored in the first kb+1 rows of the array.  The\n*          j-th column of B is stored in the j-th column of the array BB\n*          as follows:\n*          if UPLO = \'U\', BB(kb+1+i-j,j) = B(i,j) for max(1,j-kb)<=i<=j;\n*          if UPLO = \'L\', BB(1+i-j,j)    = B(i,j) for j<=i<=min(n,j+kb).\n*\n*          On exit, the factor S from the split Cholesky factorization\n*          B = S**H*S, as returned by CPBSTF.\n*\n*  LDBB    (input) INTEGER\n*          The leading dimension of the array BB.  LDBB >= KB+1.\n*\n*  W       (output) REAL array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  Z       (output) COMPLEX array, dimension (LDZ, N)\n*          If JOBZ = \'V\', then if INFO = 0, Z contains the matrix Z of\n*          eigenvectors, with the i-th column of Z holding the\n*          eigenvector associated with W(i). The eigenvectors are\n*          normalized so that Z**H*B*Z = I.\n*          If JOBZ = \'N\', then Z is not referenced.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= N.\n*\n*  WORK    (workspace) COMPLEX array, dimension (N)\n*\n*  RWORK   (workspace) REAL array, dimension (3*N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is:\n*             <= N:  the algorithm failed to converge:\n*                    i off-diagonal elements of an intermediate\n*                    tridiagonal form did not converge to zero;\n*             > N:   if INFO = N + i, for 1 <= i <= N, then CPBSTF\n*                    returned INFO = i: B is not positive definite.\n*                    The factorization of B could not be completed and\n*                    no eigenvalues or eigenvectors were computed.\n*\n'),(156,'zhbgv_156.txt','      SUBROUTINE ZHBGV( JOBZ, UPLO, N, KA, KB, AB, LDAB, BB, LDBB, W, Z,\n     $                  LDZ, WORK, RWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, KA, KB, LDAB, LDBB, LDZ, N\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   RWORK( * ), W( * )\n      COMPLEX*16         AB( LDAB, * ), BB( LDBB, * ), WORK( * ),\n     $                   Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZHBGV computes all the eigenvalues, and optionally, the eigenvectors\n*  of a complex generalized Hermitian-definite banded eigenproblem, of\n*  the form A*x=(lambda)*B*x. Here A and B are assumed to be Hermitian\n*  and banded, and B is also positive definite.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangles of A and B are stored;\n*          = \'L\':  Lower triangles of A and B are stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A and B.  N >= 0.\n*\n*  KA      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'. KA >= 0.\n*\n*  KB      (input) INTEGER\n*          The number of superdiagonals of the matrix B if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'. KB >= 0.\n*\n*  AB      (input/output) COMPLEX*16 array, dimension (LDAB, N)\n*          On entry, the upper or lower triangle of the Hermitian band\n*          matrix A, stored in the first ka+1 rows of the array.  The\n*          j-th column of A is stored in the j-th column of the array AB\n*          as follows:\n*          if UPLO = \'U\', AB(ka+1+i-j,j) = A(i,j) for max(1,j-ka)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+ka).\n*\n*          On exit, the contents of AB are destroyed.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KA+1.\n*\n*  BB      (input/output) COMPLEX*16 array, dimension (LDBB, N)\n*          On entry, the upper or lower triangle of the Hermitian band\n*          matrix B, stored in the first kb+1 rows of the array.  The\n*          j-th column of B is stored in the j-th column of the array BB\n*          as follows:\n*          if UPLO = \'U\', BB(kb+1+i-j,j) = B(i,j) for max(1,j-kb)<=i<=j;\n*          if UPLO = \'L\', BB(1+i-j,j)    = B(i,j) for j<=i<=min(n,j+kb).\n*\n*          On exit, the factor S from the split Cholesky factorization\n*          B = S**H*S, as returned by ZPBSTF.\n*\n*  LDBB    (input) INTEGER\n*          The leading dimension of the array BB.  LDBB >= KB+1.\n*\n*  W       (output) DOUBLE PRECISION array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  Z       (output) COMPLEX*16 array, dimension (LDZ, N)\n*          If JOBZ = \'V\', then if INFO = 0, Z contains the matrix Z of\n*          eigenvectors, with the i-th column of Z holding the\n*          eigenvector associated with W(i). The eigenvectors are\n*          normalized so that Z**H*B*Z = I.\n*          If JOBZ = \'N\', then Z is not referenced.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= N.\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (N)\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (3*N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is:\n*             <= N:  the algorithm failed to converge:\n*                    i off-diagonal elements of an intermediate\n*                    tridiagonal form did not converge to zero;\n*             > N:   if INFO = N + i, for 1 <= i <= N, then ZPBSTF\n*                    returned INFO = i: B is not positive definite.\n*                    The factorization of B could not be completed and\n*                    no eigenvalues or eigenvectors were computed.\n*\n'),(157,'chpgv_157.txt','      SUBROUTINE CHPGV( ITYPE, JOBZ, UPLO, N, AP, BP, W, Z, LDZ, WORK,\n     $                  RWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, ITYPE, LDZ, N\n*     ..\n*     .. Array Arguments ..\n      REAL               RWORK( * ), W( * )\n      COMPLEX            AP( * ), BP( * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CHPGV computes all the eigenvalues and, optionally, the eigenvectors\n*  of a complex generalized Hermitian-definite eigenproblem, of the form\n*  A*x=(lambda)*B*x,  A*Bx=(lambda)*x,  or B*A*x=(lambda)*x.\n*  Here A and B are assumed to be Hermitian, stored in packed format,\n*  and B is also positive definite.\n*\n*  Arguments\n*  =========\n*\n*  ITYPE   (input) INTEGER\n*          Specifies the problem type to be solved:\n*          = 1:  A*x = (lambda)*B*x\n*          = 2:  A*B*x = (lambda)*x\n*          = 3:  B*A*x = (lambda)*x\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangles of A and B are stored;\n*          = \'L\':  Lower triangles of A and B are stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A and B.  N >= 0.\n*\n*  AP      (input/output) COMPLEX array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the Hermitian matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*\n*          On exit, the contents of AP are destroyed.\n*\n*  BP      (input/output) COMPLEX array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the Hermitian matrix\n*          B, packed columnwise in a linear array.  The j-th column of B\n*          is stored in the array BP as follows:\n*          if UPLO = \'U\', BP(i + (j-1)*j/2) = B(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', BP(i + (j-1)*(2*n-j)/2) = B(i,j) for j<=i<=n.\n*\n*          On exit, the triangular factor U or L from the Cholesky\n*          factorization B = U**H*U or B = L*L**H, in the same storage\n*          format as B.\n*\n*  W       (output) REAL array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  Z       (output) COMPLEX array, dimension (LDZ, N)\n*          If JOBZ = \'V\', then if INFO = 0, Z contains the matrix Z of\n*          eigenvectors.  The eigenvectors are normalized as follows:\n*          if ITYPE = 1 or 2, Z**H*B*Z = I;\n*          if ITYPE = 3, Z**H*inv(B)*Z = I.\n*          If JOBZ = \'N\', then Z is not referenced.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace) COMPLEX array, dimension (max(1, 2*N-1))\n*\n*  RWORK   (workspace) REAL array, dimension (max(1, 3*N-2))\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  CPPTRF or CHPEV returned an error code:\n*             <= N:  if INFO = i, CHPEV failed to converge;\n*                    i off-diagonal elements of an intermediate\n*                    tridiagonal form did not convergeto zero;\n*             > N:   if INFO = N + i, for 1 <= i <= n, then the leading\n*                    minor of order i of B is not positive definite.\n*                    The factorization of B could not be completed and\n*                    no eigenvalues or eigenvectors were computed.\n*\n'),(158,'zhpgv_158.txt','      SUBROUTINE ZHPGV( ITYPE, JOBZ, UPLO, N, AP, BP, W, Z, LDZ, WORK,\n     $                  RWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, ITYPE, LDZ, N\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   RWORK( * ), W( * )\n      COMPLEX*16         AP( * ), BP( * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZHPGV computes all the eigenvalues and, optionally, the eigenvectors\n*  of a complex generalized Hermitian-definite eigenproblem, of the form\n*  A*x=(lambda)*B*x,  A*Bx=(lambda)*x,  or B*A*x=(lambda)*x.\n*  Here A and B are assumed to be Hermitian, stored in packed format,\n*  and B is also positive definite.\n*\n*  Arguments\n*  =========\n*\n*  ITYPE   (input) INTEGER\n*          Specifies the problem type to be solved:\n*          = 1:  A*x = (lambda)*B*x\n*          = 2:  A*B*x = (lambda)*x\n*          = 3:  B*A*x = (lambda)*x\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangles of A and B are stored;\n*          = \'L\':  Lower triangles of A and B are stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A and B.  N >= 0.\n*\n*  AP      (input/output) COMPLEX*16 array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the Hermitian matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*\n*          On exit, the contents of AP are destroyed.\n*\n*  BP      (input/output) COMPLEX*16 array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the Hermitian matrix\n*          B, packed columnwise in a linear array.  The j-th column of B\n*          is stored in the array BP as follows:\n*          if UPLO = \'U\', BP(i + (j-1)*j/2) = B(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', BP(i + (j-1)*(2*n-j)/2) = B(i,j) for j<=i<=n.\n*\n*          On exit, the triangular factor U or L from the Cholesky\n*          factorization B = U**H*U or B = L*L**H, in the same storage\n*          format as B.\n*\n*  W       (output) DOUBLE PRECISION array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  Z       (output) COMPLEX*16 array, dimension (LDZ, N)\n*          If JOBZ = \'V\', then if INFO = 0, Z contains the matrix Z of\n*          eigenvectors.  The eigenvectors are normalized as follows:\n*          if ITYPE = 1 or 2, Z**H*B*Z = I;\n*          if ITYPE = 3, Z**H*inv(B)*Z = I.\n*          If JOBZ = \'N\', then Z is not referenced.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (max(1, 2*N-1))\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (max(1, 3*N-2))\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  ZPPTRF or ZHPEV returned an error code:\n*             <= N:  if INFO = i, ZHPEV failed to converge;\n*                    i off-diagonal elements of an intermediate\n*                    tridiagonal form did not convergeto zero;\n*             > N:   if INFO = N + i, for 1 <= i <= n, then the leading\n*                    minor of order i of B is not positive definite.\n*                    The factorization of B could not be completed and\n*                    no eigenvalues or eigenvectors were computed.\n*\n'),(159,'ssygv_159.txt','      SUBROUTINE SSYGV( ITYPE, JOBZ, UPLO, N, A, LDA, B, LDB, W, WORK,\n     $                  LWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, ITYPE, LDA, LDB, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      REAL               A( LDA, * ), B( LDB, * ), W( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SSYGV computes all the eigenvalues, and optionally, the eigenvectors\n*  of a real generalized symmetric-definite eigenproblem, of the form\n*  A*x=(lambda)*B*x,  A*Bx=(lambda)*x,  or B*A*x=(lambda)*x.\n*  Here A and B are assumed to be symmetric and B is also\n*  positive definite.\n*\n*  Arguments\n*  =========\n*\n*  ITYPE   (input) INTEGER\n*          Specifies the problem type to be solved:\n*          = 1:  A*x = (lambda)*B*x\n*          = 2:  A*B*x = (lambda)*x\n*          = 3:  B*A*x = (lambda)*x\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangles of A and B are stored;\n*          = \'L\':  Lower triangles of A and B are stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A and B.  N >= 0.\n*\n*  A       (input/output) REAL array, dimension (LDA, N)\n*          On entry, the symmetric matrix A.  If UPLO = \'U\', the\n*          leading N-by-N upper triangular part of A contains the\n*          upper triangular part of the matrix A.  If UPLO = \'L\',\n*          the leading N-by-N lower triangular part of A contains\n*          the lower triangular part of the matrix A.\n*\n*          On exit, if JOBZ = \'V\', then if INFO = 0, A contains the\n*          matrix Z of eigenvectors.  The eigenvectors are normalized\n*          as follows:\n*          if ITYPE = 1 or 2, Z**T*B*Z = I;\n*          if ITYPE = 3, Z**T*inv(B)*Z = I.\n*          If JOBZ = \'N\', then on exit the upper triangle (if UPLO=\'U\')\n*          or the lower triangle (if UPLO=\'L\') of A, including the\n*          diagonal, is destroyed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  B       (input/output) REAL array, dimension (LDB, N)\n*          On entry, the symmetric positive definite matrix B.\n*          If UPLO = \'U\', the leading N-by-N upper triangular part of B\n*          contains the upper triangular part of the matrix B.\n*          If UPLO = \'L\', the leading N-by-N lower triangular part of B\n*          contains the lower triangular part of the matrix B.\n*\n*          On exit, if INFO <= N, the part of B containing the matrix is\n*          overwritten by the triangular factor U or L from the Cholesky\n*          factorization B = U**T*U or B = L*L**T.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  W       (output) REAL array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  WORK    (workspace/output) REAL array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The length of the array WORK.  LWORK >= max(1,3*N-1).\n*          For optimal efficiency, LWORK >= (NB+2)*N,\n*          where NB is the blocksize for SSYTRD returned by ILAENV.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  SPOTRF or SSYEV returned an error code:\n*             <= N:  if INFO = i, SSYEV failed to converge;\n*                    i off-diagonal elements of an intermediate\n*                    tridiagonal form did not converge to zero;\n*             > N:   if INFO = N + i, for 1 <= i <= N, then the leading\n*                    minor of order i of B is not positive definite.\n*                    The factorization of B could not be completed and\n*                    no eigenvalues or eigenvectors were computed.\n*\n'),(160,'dsygv_160.txt','      SUBROUTINE DSYGV( ITYPE, JOBZ, UPLO, N, A, LDA, B, LDB, W, WORK,\n     $                  LWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, ITYPE, LDA, LDB, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   A( LDA, * ), B( LDB, * ), W( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DSYGV computes all the eigenvalues, and optionally, the eigenvectors\n*  of a real generalized symmetric-definite eigenproblem, of the form\n*  A*x=(lambda)*B*x,  A*Bx=(lambda)*x,  or B*A*x=(lambda)*x.\n*  Here A and B are assumed to be symmetric and B is also\n*  positive definite.\n*\n*  Arguments\n*  =========\n*\n*  ITYPE   (input) INTEGER\n*          Specifies the problem type to be solved:\n*          = 1:  A*x = (lambda)*B*x\n*          = 2:  A*B*x = (lambda)*x\n*          = 3:  B*A*x = (lambda)*x\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangles of A and B are stored;\n*          = \'L\':  Lower triangles of A and B are stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A and B.  N >= 0.\n*\n*  A       (input/output) DOUBLE PRECISION array, dimension (LDA, N)\n*          On entry, the symmetric matrix A.  If UPLO = \'U\', the\n*          leading N-by-N upper triangular part of A contains the\n*          upper triangular part of the matrix A.  If UPLO = \'L\',\n*          the leading N-by-N lower triangular part of A contains\n*          the lower triangular part of the matrix A.\n*\n*          On exit, if JOBZ = \'V\', then if INFO = 0, A contains the\n*          matrix Z of eigenvectors.  The eigenvectors are normalized\n*          as follows:\n*          if ITYPE = 1 or 2, Z**T*B*Z = I;\n*          if ITYPE = 3, Z**T*inv(B)*Z = I.\n*          If JOBZ = \'N\', then on exit the upper triangle (if UPLO=\'U\')\n*          or the lower triangle (if UPLO=\'L\') of A, including the\n*          diagonal, is destroyed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  B       (input/output) DOUBLE PRECISION array, dimension (LDB, N)\n*          On entry, the symmetric positive definite matrix B.\n*          If UPLO = \'U\', the leading N-by-N upper triangular part of B\n*          contains the upper triangular part of the matrix B.\n*          If UPLO = \'L\', the leading N-by-N lower triangular part of B\n*          contains the lower triangular part of the matrix B.\n*\n*          On exit, if INFO <= N, the part of B containing the matrix is\n*          overwritten by the triangular factor U or L from the Cholesky\n*          factorization B = U**T*U or B = L*L**T.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  W       (output) DOUBLE PRECISION array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  WORK    (workspace/output) DOUBLE PRECISION array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The length of the array WORK.  LWORK >= max(1,3*N-1).\n*          For optimal efficiency, LWORK >= (NB+2)*N,\n*          where NB is the blocksize for DSYTRD returned by ILAENV.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  DPOTRF or DSYEV returned an error code:\n*             <= N:  if INFO = i, DSYEV failed to converge;\n*                    i off-diagonal elements of an intermediate\n*                    tridiagonal form did not converge to zero;\n*             > N:   if INFO = N + i, for 1 <= i <= N, then the leading\n*                    minor of order i of B is not positive definite.\n*                    The factorization of B could not be completed and\n*                    no eigenvalues or eigenvectors were computed.\n*\n'),(161,'ssbgv_161.txt','      SUBROUTINE SSBGV( JOBZ, UPLO, N, KA, KB, AB, LDAB, BB, LDBB, W, Z,\n     $                  LDZ, WORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, KA, KB, LDAB, LDBB, LDZ, N\n*     ..\n*     .. Array Arguments ..\n      REAL               AB( LDAB, * ), BB( LDBB, * ), W( * ),\n     $                   WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SSBGV computes all the eigenvalues, and optionally, the eigenvectors\n*  of a real generalized symmetric-definite banded eigenproblem, of\n*  the form A*x=(lambda)*B*x. Here A and B are assumed to be symmetric\n*  and banded, and B is also positive definite.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangles of A and B are stored;\n*          = \'L\':  Lower triangles of A and B are stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A and B.  N >= 0.\n*\n*  KA      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'. KA >= 0.\n*\n*  KB      (input) INTEGER\n*          The number of superdiagonals of the matrix B if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'. KB >= 0.\n*\n*  AB      (input/output) REAL array, dimension (LDAB, N)\n*          On entry, the upper or lower triangle of the symmetric band\n*          matrix A, stored in the first ka+1 rows of the array.  The\n*          j-th column of A is stored in the j-th column of the array AB\n*          as follows:\n*          if UPLO = \'U\', AB(ka+1+i-j,j) = A(i,j) for max(1,j-ka)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+ka).\n*\n*          On exit, the contents of AB are destroyed.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KA+1.\n*\n*  BB      (input/output) REAL array, dimension (LDBB, N)\n*          On entry, the upper or lower triangle of the symmetric band\n*          matrix B, stored in the first kb+1 rows of the array.  The\n*          j-th column of B is stored in the j-th column of the array BB\n*          as follows:\n*          if UPLO = \'U\', BB(kb+1+i-j,j) = B(i,j) for max(1,j-kb)<=i<=j;\n*          if UPLO = \'L\', BB(1+i-j,j)    = B(i,j) for j<=i<=min(n,j+kb).\n*\n*          On exit, the factor S from the split Cholesky factorization\n*          B = S**T*S, as returned by SPBSTF.\n*\n*  LDBB    (input) INTEGER\n*          The leading dimension of the array BB.  LDBB >= KB+1.\n*\n*  W       (output) REAL array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  Z       (output) REAL array, dimension (LDZ, N)\n*          If JOBZ = \'V\', then if INFO = 0, Z contains the matrix Z of\n*          eigenvectors, with the i-th column of Z holding the\n*          eigenvector associated with W(i). The eigenvectors are\n*          normalized so that Z**T*B*Z = I.\n*          If JOBZ = \'N\', then Z is not referenced.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= N.\n*\n*  WORK    (workspace) REAL array, dimension (3*N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is:\n*             <= N:  the algorithm failed to converge:\n*                    i off-diagonal elements of an intermediate\n*                    tridiagonal form did not converge to zero;\n*             > N:   if INFO = N + i, for 1 <= i <= N, then SPBSTF\n*                    returned INFO = i: B is not positive definite.\n*                    The factorization of B could not be completed and\n*                    no eigenvalues or eigenvectors were computed.\n*\n'),(162,'dsbgv_162.txt','      SUBROUTINE DSBGV( JOBZ, UPLO, N, KA, KB, AB, LDAB, BB, LDBB, W, Z,\n     $                  LDZ, WORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, KA, KB, LDAB, LDBB, LDZ, N\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   AB( LDAB, * ), BB( LDBB, * ), W( * ),\n     $                   WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DSBGV computes all the eigenvalues, and optionally, the eigenvectors\n*  of a real generalized symmetric-definite banded eigenproblem, of\n*  the form A*x=(lambda)*B*x. Here A and B are assumed to be symmetric\n*  and banded, and B is also positive definite.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangles of A and B are stored;\n*          = \'L\':  Lower triangles of A and B are stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A and B.  N >= 0.\n*\n*  KA      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'. KA >= 0.\n*\n*  KB      (input) INTEGER\n*          The number of superdiagonals of the matrix B if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'. KB >= 0.\n*\n*  AB      (input/output) DOUBLE PRECISION array, dimension (LDAB, N)\n*          On entry, the upper or lower triangle of the symmetric band\n*          matrix A, stored in the first ka+1 rows of the array.  The\n*          j-th column of A is stored in the j-th column of the array AB\n*          as follows:\n*          if UPLO = \'U\', AB(ka+1+i-j,j) = A(i,j) for max(1,j-ka)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+ka).\n*\n*          On exit, the contents of AB are destroyed.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KA+1.\n*\n*  BB      (input/output) DOUBLE PRECISION array, dimension (LDBB, N)\n*          On entry, the upper or lower triangle of the symmetric band\n*          matrix B, stored in the first kb+1 rows of the array.  The\n*          j-th column of B is stored in the j-th column of the array BB\n*          as follows:\n*          if UPLO = \'U\', BB(kb+1+i-j,j) = B(i,j) for max(1,j-kb)<=i<=j;\n*          if UPLO = \'L\', BB(1+i-j,j)    = B(i,j) for j<=i<=min(n,j+kb).\n*\n*          On exit, the factor S from the split Cholesky factorization\n*          B = S**T*S, as returned by DPBSTF.\n*\n*  LDBB    (input) INTEGER\n*          The leading dimension of the array BB.  LDBB >= KB+1.\n*\n*  W       (output) DOUBLE PRECISION array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  Z       (output) DOUBLE PRECISION array, dimension (LDZ, N)\n*          If JOBZ = \'V\', then if INFO = 0, Z contains the matrix Z of\n*          eigenvectors, with the i-th column of Z holding the\n*          eigenvector associated with W(i). The eigenvectors are\n*          normalized so that Z**T*B*Z = I.\n*          If JOBZ = \'N\', then Z is not referenced.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= N.\n*\n*  WORK    (workspace) DOUBLE PRECISION array, dimension (3*N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is:\n*             <= N:  the algorithm failed to converge:\n*                    i off-diagonal elements of an intermediate\n*                    tridiagonal form did not converge to zero;\n*             > N:   if INFO = N + i, for 1 <= i <= N, then DPBSTF\n*                    returned INFO = i: B is not positive definite.\n*                    The factorization of B could not be completed and\n*                    no eigenvalues or eigenvectors were computed.\n*\n'),(163,'sspgv_163.txt','      SUBROUTINE SSPGV( ITYPE, JOBZ, UPLO, N, AP, BP, W, Z, LDZ, WORK,\n     $                  INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, ITYPE, LDZ, N\n*     ..\n*     .. Array Arguments ..\n      REAL               AP( * ), BP( * ), W( * ), WORK( * ),\n     $                   Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SSPGV computes all the eigenvalues and, optionally, the eigenvectors\n*  of a real generalized symmetric-definite eigenproblem, of the form\n*  A*x=(lambda)*B*x,  A*Bx=(lambda)*x,  or B*A*x=(lambda)*x.\n*  Here A and B are assumed to be symmetric, stored in packed format,\n*  and B is also positive definite.\n*\n*  Arguments\n*  =========\n*\n*  ITYPE   (input) INTEGER\n*          Specifies the problem type to be solved:\n*          = 1:  A*x = (lambda)*B*x\n*          = 2:  A*B*x = (lambda)*x\n*          = 3:  B*A*x = (lambda)*x\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangles of A and B are stored;\n*          = \'L\':  Lower triangles of A and B are stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A and B.  N >= 0.\n*\n*  AP      (input/output) REAL array, dimension\n*                            (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the symmetric matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*\n*          On exit, the contents of AP are destroyed.\n*\n*  BP      (input/output) REAL array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the symmetric matrix\n*          B, packed columnwise in a linear array.  The j-th column of B\n*          is stored in the array BP as follows:\n*          if UPLO = \'U\', BP(i + (j-1)*j/2) = B(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', BP(i + (j-1)*(2*n-j)/2) = B(i,j) for j<=i<=n.\n*\n*          On exit, the triangular factor U or L from the Cholesky\n*          factorization B = U**T*U or B = L*L**T, in the same storage\n*          format as B.\n*\n*  W       (output) REAL array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  Z       (output) REAL array, dimension (LDZ, N)\n*          If JOBZ = \'V\', then if INFO = 0, Z contains the matrix Z of\n*          eigenvectors.  The eigenvectors are normalized as follows:\n*          if ITYPE = 1 or 2, Z**T*B*Z = I;\n*          if ITYPE = 3, Z**T*inv(B)*Z = I.\n*          If JOBZ = \'N\', then Z is not referenced.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace) REAL array, dimension (3*N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  SPPTRF or SSPEV returned an error code:\n*             <= N:  if INFO = i, SSPEV failed to converge;\n*                    i off-diagonal elements of an intermediate\n*                    tridiagonal form did not converge to zero.\n*             > N:   if INFO = n + i, for 1 <= i <= n, then the leading\n*                    minor of order i of B is not positive definite.\n*                    The factorization of B could not be completed and\n*                    no eigenvalues or eigenvectors were computed.\n*\n'),(164,'dspgv_164.txt','      SUBROUTINE DSPGV( ITYPE, JOBZ, UPLO, N, AP, BP, W, Z, LDZ, WORK,\n     $                  INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, ITYPE, LDZ, N\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   AP( * ), BP( * ), W( * ), WORK( * ),\n     $                   Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DSPGV computes all the eigenvalues and, optionally, the eigenvectors\n*  of a real generalized symmetric-definite eigenproblem, of the form\n*  A*x=(lambda)*B*x,  A*Bx=(lambda)*x,  or B*A*x=(lambda)*x.\n*  Here A and B are assumed to be symmetric, stored in packed format,\n*  and B is also positive definite.\n*\n*  Arguments\n*  =========\n*\n*  ITYPE   (input) INTEGER\n*          Specifies the problem type to be solved:\n*          = 1:  A*x = (lambda)*B*x\n*          = 2:  A*B*x = (lambda)*x\n*          = 3:  B*A*x = (lambda)*x\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangles of A and B are stored;\n*          = \'L\':  Lower triangles of A and B are stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A and B.  N >= 0.\n*\n*  AP      (input/output) DOUBLE PRECISION array, dimension\n*                            (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the symmetric matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*\n*          On exit, the contents of AP are destroyed.\n*\n*  BP      (input/output) DOUBLE PRECISION array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the symmetric matrix\n*          B, packed columnwise in a linear array.  The j-th column of B\n*          is stored in the array BP as follows:\n*          if UPLO = \'U\', BP(i + (j-1)*j/2) = B(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', BP(i + (j-1)*(2*n-j)/2) = B(i,j) for j<=i<=n.\n*\n*          On exit, the triangular factor U or L from the Cholesky\n*          factorization B = U**T*U or B = L*L**T, in the same storage\n*          format as B.\n*\n*  W       (output) DOUBLE PRECISION array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  Z       (output) DOUBLE PRECISION array, dimension (LDZ, N)\n*          If JOBZ = \'V\', then if INFO = 0, Z contains the matrix Z of\n*          eigenvectors.  The eigenvectors are normalized as follows:\n*          if ITYPE = 1 or 2, Z**T*B*Z = I;\n*          if ITYPE = 3, Z**T*inv(B)*Z = I.\n*          If JOBZ = \'N\', then Z is not referenced.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace) DOUBLE PRECISION array, dimension (3*N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  DPPTRF or DSPEV returned an error code:\n*             <= N:  if INFO = i, DSPEV failed to converge;\n*                    i off-diagonal elements of an intermediate\n*                    tridiagonal form did not converge to zero.\n*             > N:   if INFO = n + i, for 1 <= i <= n, then the leading\n*                    minor of order i of B is not positive definite.\n*                    The factorization of B could not be completed and\n*                    no eigenvalues or eigenvectors were computed.\n*\n'),(165,'chegvx_165.txt','      SUBROUTINE CHEGVX( ITYPE, JOBZ, RANGE, UPLO, N, A, LDA, B, LDB,\n     $                   VL, VU, IL, IU, ABSTOL, M, W, Z, LDZ, WORK,\n     $                   LWORK, RWORK, IWORK, IFAIL, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, RANGE, UPLO\n      INTEGER            IL, INFO, ITYPE, IU, LDA, LDB, LDZ, LWORK, M, N\n      REAL               ABSTOL, VL, VU\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IFAIL( * ), IWORK( * )\n      REAL               RWORK( * ), W( * )\n      COMPLEX            A( LDA, * ), B( LDB, * ), WORK( * ),\n     $                   Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CHEGVX computes selected eigenvalues, and optionally, eigenvectors\n*  of a complex generalized Hermitian-definite eigenproblem, of the form\n*  A*x=(lambda)*B*x,  A*Bx=(lambda)*x,  or B*A*x=(lambda)*x.  Here A and\n*  B are assumed to be Hermitian and B is also positive definite.\n*  Eigenvalues and eigenvectors can be selected by specifying either a\n*  range of values or a range of indices for the desired eigenvalues.\n*\n*  Arguments\n*  =========\n*\n*  ITYPE   (input) INTEGER\n*          Specifies the problem type to be solved:\n*          = 1:  A*x = (lambda)*B*x\n*          = 2:  A*B*x = (lambda)*x\n*          = 3:  B*A*x = (lambda)*x\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  RANGE   (input) CHARACTER*1\n*          = \'A\': all eigenvalues will be found.\n*          = \'V\': all eigenvalues in the half-open interval (VL,VU]\n*                 will be found.\n*          = \'I\': the IL-th through IU-th eigenvalues will be found.\n**\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangles of A and B are stored;\n*          = \'L\':  Lower triangles of A and B are stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A and B.  N >= 0.\n*\n*  A       (input/output) COMPLEX array, dimension (LDA, N)\n*          On entry, the Hermitian matrix A.  If UPLO = \'U\', the\n*          leading N-by-N upper triangular part of A contains the\n*          upper triangular part of the matrix A.  If UPLO = \'L\',\n*          the leading N-by-N lower triangular part of A contains\n*          the lower triangular part of the matrix A.\n*\n*          On exit,  the lower triangle (if UPLO=\'L\') or the upper\n*          triangle (if UPLO=\'U\') of A, including the diagonal, is\n*          destroyed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  B       (input/output) COMPLEX array, dimension (LDB, N)\n*          On entry, the Hermitian matrix B.  If UPLO = \'U\', the\n*          leading N-by-N upper triangular part of B contains the\n*          upper triangular part of the matrix B.  If UPLO = \'L\',\n*          the leading N-by-N lower triangular part of B contains\n*          the lower triangular part of the matrix B.\n*\n*          On exit, if INFO <= N, the part of B containing the matrix is\n*          overwritten by the triangular factor U or L from the Cholesky\n*          factorization B = U**H*U or B = L*L**H.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  VL      (input) REAL\n*  VU      (input) REAL\n*          If RANGE=\'V\', the lower and upper bounds of the interval to\n*          be searched for eigenvalues. VL < VU.\n*          Not referenced if RANGE = \'A\' or \'I\'.\n*\n*  IL      (input) INTEGER\n*  IU      (input) INTEGER\n*          If RANGE=\'I\', the indices (in ascending order) of the\n*          smallest and largest eigenvalues to be returned.\n*          1 <= IL <= IU <= N, if N > 0; IL = 1 and IU = 0 if N = 0.\n*          Not referenced if RANGE = \'A\' or \'V\'.\n*\n*  ABSTOL  (input) REAL\n*          The absolute error tolerance for the eigenvalues.\n*          An approximate eigenvalue is accepted as converged\n*          when it is determined to lie in an interval [a,b]\n*          of width less than or equal to\n*\n*                  ABSTOL + EPS *   max( |a|,|b| ) ,\n*\n*          where EPS is the machine precision.  If ABSTOL is less than\n*          or equal to zero, then  EPS*|T|  will be used in its place,\n*          where |T| is the 1-norm of the tridiagonal matrix obtained\n*          by reducing A to tridiagonal form.\n*\n*          Eigenvalues will be computed most accurately when ABSTOL is\n*          set to twice the underflow threshold 2*SLAMCH(\'S\'), not zero.\n*          If this routine returns with INFO>0, indicating that some\n*          eigenvectors did not converge, try setting ABSTOL to\n*          2*SLAMCH(\'S\').\n*\n*  M       (output) INTEGER\n*          The total number of eigenvalues found.  0 <= M <= N.\n*          If RANGE = \'A\', M = N, and if RANGE = \'I\', M = IU-IL+1.\n*\n*  W       (output) REAL array, dimension (N)\n*          The first M elements contain the selected\n*          eigenvalues in ascending order.\n*\n*  Z       (output) COMPLEX array, dimension (LDZ, max(1,M))\n*          If JOBZ = \'N\', then Z is not referenced.\n*          If JOBZ = \'V\', then if INFO = 0, the first M columns of Z\n*          contain the orthonormal eigenvectors of the matrix A\n*          corresponding to the selected eigenvalues, with the i-th\n*          column of Z holding the eigenvector associated with W(i).\n*          The eigenvectors are normalized as follows:\n*          if ITYPE = 1 or 2, Z**T*B*Z = I;\n*          if ITYPE = 3, Z**T*inv(B)*Z = I.\n*\n*          If an eigenvector fails to converge, then that column of Z\n*          contains the latest approximation to the eigenvector, and the\n*          index of the eigenvector is returned in IFAIL.\n*          Note: the user must ensure that at least max(1,M) columns are\n*          supplied in the array Z; if RANGE = \'V\', the exact value of M\n*          is not known in advance and an upper bound must be used.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace/output) COMPLEX array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The length of the array WORK.  LWORK >= max(1,2*N).\n*          For optimal efficiency, LWORK >= (NB+1)*N,\n*          where NB is the blocksize for CHETRD returned by ILAENV.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  RWORK   (workspace) REAL array, dimension (7*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (5*N)\n*\n*  IFAIL   (output) INTEGER array, dimension (N)\n*          If JOBZ = \'V\', then if INFO = 0, the first M elements of\n*          IFAIL are zero.  If INFO > 0, then IFAIL contains the\n*          indices of the eigenvectors that failed to converge.\n*          If JOBZ = \'N\', then IFAIL is not referenced.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  CPOTRF or CHEEVX returned an error code:\n*             <= N:  if INFO = i, CHEEVX failed to converge;\n*                    i eigenvectors failed to converge.  Their indices\n*                    are stored in array IFAIL.\n*             > N:   if INFO = N + i, for 1 <= i <= N, then the leading\n*                    minor of order i of B is not positive definite.\n*                    The factorization of B could not be completed and\n*                    no eigenvalues or eigenvectors were computed.\n*\n'),(166,'zhegvx_166.txt','      SUBROUTINE ZHEGVX( ITYPE, JOBZ, RANGE, UPLO, N, A, LDA, B, LDB,\n     $                   VL, VU, IL, IU, ABSTOL, M, W, Z, LDZ, WORK,\n     $                   LWORK, RWORK, IWORK, IFAIL, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, RANGE, UPLO\n      INTEGER            IL, INFO, ITYPE, IU, LDA, LDB, LDZ, LWORK, M, N\n      DOUBLE PRECISION   ABSTOL, VL, VU\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IFAIL( * ), IWORK( * )\n      DOUBLE PRECISION   RWORK( * ), W( * )\n      COMPLEX*16         A( LDA, * ), B( LDB, * ), WORK( * ),\n     $                   Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZHEGVX computes selected eigenvalues, and optionally, eigenvectors\n*  of a complex generalized Hermitian-definite eigenproblem, of the form\n*  A*x=(lambda)*B*x,  A*Bx=(lambda)*x,  or B*A*x=(lambda)*x.  Here A and\n*  B are assumed to be Hermitian and B is also positive definite.\n*  Eigenvalues and eigenvectors can be selected by specifying either a\n*  range of values or a range of indices for the desired eigenvalues.\n*\n*  Arguments\n*  =========\n*\n*  ITYPE   (input) INTEGER\n*          Specifies the problem type to be solved:\n*          = 1:  A*x = (lambda)*B*x\n*          = 2:  A*B*x = (lambda)*x\n*          = 3:  B*A*x = (lambda)*x\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  RANGE   (input) CHARACTER*1\n*          = \'A\': all eigenvalues will be found.\n*          = \'V\': all eigenvalues in the half-open interval (VL,VU]\n*                 will be found.\n*          = \'I\': the IL-th through IU-th eigenvalues will be found.\n**\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangles of A and B are stored;\n*          = \'L\':  Lower triangles of A and B are stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A and B.  N >= 0.\n*\n*  A       (input/output) COMPLEX*16 array, dimension (LDA, N)\n*          On entry, the Hermitian matrix A.  If UPLO = \'U\', the\n*          leading N-by-N upper triangular part of A contains the\n*          upper triangular part of the matrix A.  If UPLO = \'L\',\n*          the leading N-by-N lower triangular part of A contains\n*          the lower triangular part of the matrix A.\n*\n*          On exit,  the lower triangle (if UPLO=\'L\') or the upper\n*          triangle (if UPLO=\'U\') of A, including the diagonal, is\n*          destroyed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB, N)\n*          On entry, the Hermitian matrix B.  If UPLO = \'U\', the\n*          leading N-by-N upper triangular part of B contains the\n*          upper triangular part of the matrix B.  If UPLO = \'L\',\n*          the leading N-by-N lower triangular part of B contains\n*          the lower triangular part of the matrix B.\n*\n*          On exit, if INFO <= N, the part of B containing the matrix is\n*          overwritten by the triangular factor U or L from the Cholesky\n*          factorization B = U**H*U or B = L*L**H.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  VL      (input) DOUBLE PRECISION\n*  VU      (input) DOUBLE PRECISION\n*          If RANGE=\'V\', the lower and upper bounds of the interval to\n*          be searched for eigenvalues. VL < VU.\n*          Not referenced if RANGE = \'A\' or \'I\'.\n*\n*  IL      (input) INTEGER\n*  IU      (input) INTEGER\n*          If RANGE=\'I\', the indices (in ascending order) of the\n*          smallest and largest eigenvalues to be returned.\n*          1 <= IL <= IU <= N, if N > 0; IL = 1 and IU = 0 if N = 0.\n*          Not referenced if RANGE = \'A\' or \'V\'.\n*\n*  ABSTOL  (input) DOUBLE PRECISION\n*          The absolute error tolerance for the eigenvalues.\n*          An approximate eigenvalue is accepted as converged\n*          when it is determined to lie in an interval [a,b]\n*          of width less than or equal to\n*\n*                  ABSTOL + EPS *   max( |a|,|b| ) ,\n*\n*          where EPS is the machine precision.  If ABSTOL is less than\n*          or equal to zero, then  EPS*|T|  will be used in its place,\n*          where |T| is the 1-norm of the tridiagonal matrix obtained\n*          by reducing A to tridiagonal form.\n*\n*          Eigenvalues will be computed most accurately when ABSTOL is\n*          set to twice the underflow threshold 2*DLAMCH(\'S\'), not zero.\n*          If this routine returns with INFO>0, indicating that some\n*          eigenvectors did not converge, try setting ABSTOL to\n*          2*DLAMCH(\'S\').\n*\n*  M       (output) INTEGER\n*          The total number of eigenvalues found.  0 <= M <= N.\n*          If RANGE = \'A\', M = N, and if RANGE = \'I\', M = IU-IL+1.\n*\n*  W       (output) DOUBLE PRECISION array, dimension (N)\n*          The first M elements contain the selected\n*          eigenvalues in ascending order.\n*\n*  Z       (output) COMPLEX*16 array, dimension (LDZ, max(1,M))\n*          If JOBZ = \'N\', then Z is not referenced.\n*          If JOBZ = \'V\', then if INFO = 0, the first M columns of Z\n*          contain the orthonormal eigenvectors of the matrix A\n*          corresponding to the selected eigenvalues, with the i-th\n*          column of Z holding the eigenvector associated with W(i).\n*          The eigenvectors are normalized as follows:\n*          if ITYPE = 1 or 2, Z**T*B*Z = I;\n*          if ITYPE = 3, Z**T*inv(B)*Z = I.\n*\n*          If an eigenvector fails to converge, then that column of Z\n*          contains the latest approximation to the eigenvector, and the\n*          index of the eigenvector is returned in IFAIL.\n*          Note: the user must ensure that at least max(1,M) columns are\n*          supplied in the array Z; if RANGE = \'V\', the exact value of M\n*          is not known in advance and an upper bound must be used.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace/output) COMPLEX*16 array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The length of the array WORK.  LWORK >= max(1,2*N).\n*          For optimal efficiency, LWORK >= (NB+1)*N,\n*          where NB is the blocksize for ZHETRD returned by ILAENV.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (7*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (5*N)\n*\n*  IFAIL   (output) INTEGER array, dimension (N)\n*          If JOBZ = \'V\', then if INFO = 0, the first M elements of\n*          IFAIL are zero.  If INFO > 0, then IFAIL contains the\n*          indices of the eigenvectors that failed to converge.\n*          If JOBZ = \'N\', then IFAIL is not referenced.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  ZPOTRF or ZHEEVX returned an error code:\n*             <= N:  if INFO = i, ZHEEVX failed to converge;\n*                    i eigenvectors failed to converge.  Their indices\n*                    are stored in array IFAIL.\n*             > N:   if INFO = N + i, for 1 <= i <= N, then the leading\n*                    minor of order i of B is not positive definite.\n*                    The factorization of B could not be completed and\n*                    no eigenvalues or eigenvectors were computed.\n*\n'),(167,'chbgvx_167.txt','      SUBROUTINE CHBGVX( JOBZ, RANGE, UPLO, N, KA, KB, AB, LDAB, BB,\n     $                   LDBB, Q, LDQ, VL, VU, IL, IU, ABSTOL, M, W, Z,\n     $                   LDZ, WORK, RWORK, IWORK, IFAIL, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, RANGE, UPLO\n      INTEGER            IL, INFO, IU, KA, KB, LDAB, LDBB, LDQ, LDZ, M,\n     $                   N\n      REAL               ABSTOL, VL, VU\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IFAIL( * ), IWORK( * )\n      REAL               RWORK( * ), W( * )\n      COMPLEX            AB( LDAB, * ), BB( LDBB, * ), Q( LDQ, * ),\n     $                   WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CHBGVX computes all the eigenvalues, and optionally, the eigenvectors\n*  of a complex generalized Hermitian-definite banded eigenproblem, of\n*  the form A*x=(lambda)*B*x. Here A and B are assumed to be Hermitian\n*  and banded, and B is also positive definite.  Eigenvalues and\n*  eigenvectors can be selected by specifying either all eigenvalues,\n*  a range of values or a range of indices for the desired eigenvalues.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  RANGE   (input) CHARACTER*1\n*          = \'A\': all eigenvalues will be found;\n*          = \'V\': all eigenvalues in the half-open interval (VL,VU]\n*                 will be found;\n*          = \'I\': the IL-th through IU-th eigenvalues will be found.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangles of A and B are stored;\n*          = \'L\':  Lower triangles of A and B are stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A and B.  N >= 0.\n*\n*  KA      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'. KA >= 0.\n*\n*  KB      (input) INTEGER\n*          The number of superdiagonals of the matrix B if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'. KB >= 0.\n*\n*  AB      (input/output) COMPLEX array, dimension (LDAB, N)\n*          On entry, the upper or lower triangle of the Hermitian band\n*          matrix A, stored in the first ka+1 rows of the array.  The\n*          j-th column of A is stored in the j-th column of the array AB\n*          as follows:\n*          if UPLO = \'U\', AB(ka+1+i-j,j) = A(i,j) for max(1,j-ka)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+ka).\n*\n*          On exit, the contents of AB are destroyed.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KA+1.\n*\n*  BB      (input/output) COMPLEX array, dimension (LDBB, N)\n*          On entry, the upper or lower triangle of the Hermitian band\n*          matrix B, stored in the first kb+1 rows of the array.  The\n*          j-th column of B is stored in the j-th column of the array BB\n*          as follows:\n*          if UPLO = \'U\', BB(kb+1+i-j,j) = B(i,j) for max(1,j-kb)<=i<=j;\n*          if UPLO = \'L\', BB(1+i-j,j)    = B(i,j) for j<=i<=min(n,j+kb).\n*\n*          On exit, the factor S from the split Cholesky factorization\n*          B = S**H*S, as returned by CPBSTF.\n*\n*  LDBB    (input) INTEGER\n*          The leading dimension of the array BB.  LDBB >= KB+1.\n*\n*  Q       (output) COMPLEX array, dimension (LDQ, N)\n*          If JOBZ = \'V\', the n-by-n matrix used in the reduction of\n*          A*x = (lambda)*B*x to standard form, i.e. C*x = (lambda)*x,\n*          and consequently C to tridiagonal form.\n*          If JOBZ = \'N\', the array Q is not referenced.\n*\n*  LDQ     (input) INTEGER\n*          The leading dimension of the array Q.  If JOBZ = \'N\',\n*          LDQ >= 1. If JOBZ = \'V\', LDQ >= max(1,N).\n*\n*  VL      (input) REAL\n*  VU      (input) REAL\n*          If RANGE=\'V\', the lower and upper bounds of the interval to\n*          be searched for eigenvalues. VL < VU.\n*          Not referenced if RANGE = \'A\' or \'I\'.\n*\n*  IL      (input) INTEGER\n*  IU      (input) INTEGER\n*          If RANGE=\'I\', the indices (in ascending order) of the\n*          smallest and largest eigenvalues to be returned.\n*          1 <= IL <= IU <= N, if N > 0; IL = 1 and IU = 0 if N = 0.\n*          Not referenced if RANGE = \'A\' or \'V\'.\n*\n*  ABSTOL  (input) REAL\n*          The absolute error tolerance for the eigenvalues.\n*          An approximate eigenvalue is accepted as converged\n*          when it is determined to lie in an interval [a,b]\n*          of width less than or equal to\n*\n*                  ABSTOL + EPS *   max( |a|,|b| ) ,\n*\n*          where EPS is the machine precision.  If ABSTOL is less than\n*          or equal to zero, then  EPS*|T|  will be used in its place,\n*          where |T| is the 1-norm of the tridiagonal matrix obtained\n*          by reducing AP to tridiagonal form.\n*\n*          Eigenvalues will be computed most accurately when ABSTOL is\n*          set to twice the underflow threshold 2*SLAMCH(\'S\'), not zero.\n*          If this routine returns with INFO>0, indicating that some\n*          eigenvectors did not converge, try setting ABSTOL to\n*          2*SLAMCH(\'S\').\n*\n*  M       (output) INTEGER\n*          The total number of eigenvalues found.  0 <= M <= N.\n*          If RANGE = \'A\', M = N, and if RANGE = \'I\', M = IU-IL+1.\n*\n*  W       (output) REAL array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  Z       (output) COMPLEX array, dimension (LDZ, N)\n*          If JOBZ = \'V\', then if INFO = 0, Z contains the matrix Z of\n*          eigenvectors, with the i-th column of Z holding the\n*          eigenvector associated with W(i). The eigenvectors are\n*          normalized so that Z**H*B*Z = I.\n*          If JOBZ = \'N\', then Z is not referenced.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= N.\n*\n*  WORK    (workspace) COMPLEX array, dimension (N)\n*\n*  RWORK   (workspace) REAL array, dimension (7*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (5*N)\n*\n*  IFAIL   (output) INTEGER array, dimension (N)\n*          If JOBZ = \'V\', then if INFO = 0, the first M elements of\n*          IFAIL are zero.  If INFO > 0, then IFAIL contains the\n*          indices of the eigenvectors that failed to converge.\n*          If JOBZ = \'N\', then IFAIL is not referenced.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is:\n*             <= N:  then i eigenvectors failed to converge.  Their\n*                    indices are stored in array IFAIL.\n*             > N:   if INFO = N + i, for 1 <= i <= N, then CPBSTF\n*                    returned INFO = i: B is not positive definite.\n*                    The factorization of B could not be completed and\n*                    no eigenvalues or eigenvectors were computed.\n*\n'),(168,'zhbgvx_168.txt','      SUBROUTINE ZHBGVX( JOBZ, RANGE, UPLO, N, KA, KB, AB, LDAB, BB,\n     $                   LDBB, Q, LDQ, VL, VU, IL, IU, ABSTOL, M, W, Z,\n     $                   LDZ, WORK, RWORK, IWORK, IFAIL, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, RANGE, UPLO\n      INTEGER            IL, INFO, IU, KA, KB, LDAB, LDBB, LDQ, LDZ, M,\n     $                   N\n      DOUBLE PRECISION   ABSTOL, VL, VU\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IFAIL( * ), IWORK( * )\n      DOUBLE PRECISION   RWORK( * ), W( * )\n      COMPLEX*16         AB( LDAB, * ), BB( LDBB, * ), Q( LDQ, * ),\n     $                   WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZHBGVX computes all the eigenvalues, and optionally, the eigenvectors\n*  of a complex generalized Hermitian-definite banded eigenproblem, of\n*  the form A*x=(lambda)*B*x. Here A and B are assumed to be Hermitian\n*  and banded, and B is also positive definite.  Eigenvalues and\n*  eigenvectors can be selected by specifying either all eigenvalues,\n*  a range of values or a range of indices for the desired eigenvalues.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  RANGE   (input) CHARACTER*1\n*          = \'A\': all eigenvalues will be found;\n*          = \'V\': all eigenvalues in the half-open interval (VL,VU]\n*                 will be found;\n*          = \'I\': the IL-th through IU-th eigenvalues will be found.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangles of A and B are stored;\n*          = \'L\':  Lower triangles of A and B are stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A and B.  N >= 0.\n*\n*  KA      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'. KA >= 0.\n*\n*  KB      (input) INTEGER\n*          The number of superdiagonals of the matrix B if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'. KB >= 0.\n*\n*  AB      (input/output) COMPLEX*16 array, dimension (LDAB, N)\n*          On entry, the upper or lower triangle of the Hermitian band\n*          matrix A, stored in the first ka+1 rows of the array.  The\n*          j-th column of A is stored in the j-th column of the array AB\n*          as follows:\n*          if UPLO = \'U\', AB(ka+1+i-j,j) = A(i,j) for max(1,j-ka)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+ka).\n*\n*          On exit, the contents of AB are destroyed.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KA+1.\n*\n*  BB      (input/output) COMPLEX*16 array, dimension (LDBB, N)\n*          On entry, the upper or lower triangle of the Hermitian band\n*          matrix B, stored in the first kb+1 rows of the array.  The\n*          j-th column of B is stored in the j-th column of the array BB\n*          as follows:\n*          if UPLO = \'U\', BB(kb+1+i-j,j) = B(i,j) for max(1,j-kb)<=i<=j;\n*          if UPLO = \'L\', BB(1+i-j,j)    = B(i,j) for j<=i<=min(n,j+kb).\n*\n*          On exit, the factor S from the split Cholesky factorization\n*          B = S**H*S, as returned by ZPBSTF.\n*\n*  LDBB    (input) INTEGER\n*          The leading dimension of the array BB.  LDBB >= KB+1.\n*\n*  Q       (output) COMPLEX*16 array, dimension (LDQ, N)\n*          If JOBZ = \'V\', the n-by-n matrix used in the reduction of\n*          A*x = (lambda)*B*x to standard form, i.e. C*x = (lambda)*x,\n*          and consequently C to tridiagonal form.\n*          If JOBZ = \'N\', the array Q is not referenced.\n*\n*  LDQ     (input) INTEGER\n*          The leading dimension of the array Q.  If JOBZ = \'N\',\n*          LDQ >= 1. If JOBZ = \'V\', LDQ >= max(1,N).\n*\n*  VL      (input) DOUBLE PRECISION\n*  VU      (input) DOUBLE PRECISION\n*          If RANGE=\'V\', the lower and upper bounds of the interval to\n*          be searched for eigenvalues. VL < VU.\n*          Not referenced if RANGE = \'A\' or \'I\'.\n*\n*  IL      (input) INTEGER\n*  IU      (input) INTEGER\n*          If RANGE=\'I\', the indices (in ascending order) of the\n*          smallest and largest eigenvalues to be returned.\n*          1 <= IL <= IU <= N, if N > 0; IL = 1 and IU = 0 if N = 0.\n*          Not referenced if RANGE = \'A\' or \'V\'.\n*\n*  ABSTOL  (input) DOUBLE PRECISION\n*          The absolute error tolerance for the eigenvalues.\n*          An approximate eigenvalue is accepted as converged\n*          when it is determined to lie in an interval [a,b]\n*          of width less than or equal to\n*\n*                  ABSTOL + EPS *   max( |a|,|b| ) ,\n*\n*          where EPS is the machine precision.  If ABSTOL is less than\n*          or equal to zero, then  EPS*|T|  will be used in its place,\n*          where |T| is the 1-norm of the tridiagonal matrix obtained\n*          by reducing AP to tridiagonal form.\n*\n*          Eigenvalues will be computed most accurately when ABSTOL is\n*          set to twice the underflow threshold 2*DLAMCH(\'S\'), not zero.\n*          If this routine returns with INFO>0, indicating that some\n*          eigenvectors did not converge, try setting ABSTOL to\n*          2*DLAMCH(\'S\').\n*\n*  M       (output) INTEGER\n*          The total number of eigenvalues found.  0 <= M <= N.\n*          If RANGE = \'A\', M = N, and if RANGE = \'I\', M = IU-IL+1.\n*\n*  W       (output) DOUBLE PRECISION array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  Z       (output) COMPLEX*16 array, dimension (LDZ, N)\n*          If JOBZ = \'V\', then if INFO = 0, Z contains the matrix Z of\n*          eigenvectors, with the i-th column of Z holding the\n*          eigenvector associated with W(i). The eigenvectors are\n*          normalized so that Z**H*B*Z = I.\n*          If JOBZ = \'N\', then Z is not referenced.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= N.\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (N)\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (7*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (5*N)\n*\n*  IFAIL   (output) INTEGER array, dimension (N)\n*          If JOBZ = \'V\', then if INFO = 0, the first M elements of\n*          IFAIL are zero.  If INFO > 0, then IFAIL contains the\n*          indices of the eigenvectors that failed to converge.\n*          If JOBZ = \'N\', then IFAIL is not referenced.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is:\n*             <= N:  then i eigenvectors failed to converge.  Their\n*                    indices are stored in array IFAIL.\n*             > N:   if INFO = N + i, for 1 <= i <= N, then ZPBSTF\n*                    returned INFO = i: B is not positive definite.\n*                    The factorization of B could not be completed and\n*                    no eigenvalues or eigenvectors were computed.\n*\n'),(169,'chpgvx_169.txt','      SUBROUTINE CHPGVX( ITYPE, JOBZ, RANGE, UPLO, N, AP, BP, VL, VU,\n     $                   IL, IU, ABSTOL, M, W, Z, LDZ, WORK, RWORK,\n     $                   IWORK, IFAIL, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, RANGE, UPLO\n      INTEGER            IL, INFO, ITYPE, IU, LDZ, M, N\n      REAL               ABSTOL, VL, VU\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IFAIL( * ), IWORK( * )\n      REAL               RWORK( * ), W( * )\n      COMPLEX            AP( * ), BP( * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CHPGVX computes selected eigenvalues and, optionally, eigenvectors\n*  of a complex generalized Hermitian-definite eigenproblem, of the form\n*  A*x=(lambda)*B*x,  A*Bx=(lambda)*x,  or B*A*x=(lambda)*x.  Here A and\n*  B are assumed to be Hermitian, stored in packed format, and B is also\n*  positive definite.  Eigenvalues and eigenvectors can be selected by\n*  specifying either a range of values or a range of indices for the\n*  desired eigenvalues.\n*\n*  Arguments\n*  =========\n*\n*  ITYPE   (input) INTEGER\n*          Specifies the problem type to be solved:\n*          = 1:  A*x = (lambda)*B*x\n*          = 2:  A*B*x = (lambda)*x\n*          = 3:  B*A*x = (lambda)*x\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  RANGE   (input) CHARACTER*1\n*          = \'A\': all eigenvalues will be found;\n*          = \'V\': all eigenvalues in the half-open interval (VL,VU]\n*                 will be found;\n*          = \'I\': the IL-th through IU-th eigenvalues will be found.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangles of A and B are stored;\n*          = \'L\':  Lower triangles of A and B are stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A and B.  N >= 0.\n*\n*  AP      (input/output) COMPLEX array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the Hermitian matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*\n*          On exit, the contents of AP are destroyed.\n*\n*  BP      (input/output) COMPLEX array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the Hermitian matrix\n*          B, packed columnwise in a linear array.  The j-th column of B\n*          is stored in the array BP as follows:\n*          if UPLO = \'U\', BP(i + (j-1)*j/2) = B(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', BP(i + (j-1)*(2*n-j)/2) = B(i,j) for j<=i<=n.\n*\n*          On exit, the triangular factor U or L from the Cholesky\n*          factorization B = U**H*U or B = L*L**H, in the same storage\n*          format as B.\n*\n*  VL      (input) REAL\n*  VU      (input) REAL\n*          If RANGE=\'V\', the lower and upper bounds of the interval to\n*          be searched for eigenvalues. VL < VU.\n*          Not referenced if RANGE = \'A\' or \'I\'.\n*\n*  IL      (input) INTEGER\n*  IU      (input) INTEGER\n*          If RANGE=\'I\', the indices (in ascending order) of the\n*          smallest and largest eigenvalues to be returned.\n*          1 <= IL <= IU <= N, if N > 0; IL = 1 and IU = 0 if N = 0.\n*          Not referenced if RANGE = \'A\' or \'V\'.\n*\n*  ABSTOL  (input) REAL\n*          The absolute error tolerance for the eigenvalues.\n*          An approximate eigenvalue is accepted as converged\n*          when it is determined to lie in an interval [a,b]\n*          of width less than or equal to\n*\n*                  ABSTOL + EPS *   max( |a|,|b| ) ,\n*\n*          where EPS is the machine precision.  If ABSTOL is less than\n*          or equal to zero, then  EPS*|T|  will be used in its place,\n*          where |T| is the 1-norm of the tridiagonal matrix obtained\n*          by reducing AP to tridiagonal form.\n*\n*          Eigenvalues will be computed most accurately when ABSTOL is\n*          set to twice the underflow threshold 2*SLAMCH(\'S\'), not zero.\n*          If this routine returns with INFO>0, indicating that some\n*          eigenvectors did not converge, try setting ABSTOL to\n*          2*SLAMCH(\'S\').\n*\n*  M       (output) INTEGER\n*          The total number of eigenvalues found.  0 <= M <= N.\n*          If RANGE = \'A\', M = N, and if RANGE = \'I\', M = IU-IL+1.\n*\n*  W       (output) REAL array, dimension (N)\n*          On normal exit, the first M elements contain the selected\n*          eigenvalues in ascending order.\n*\n*  Z       (output) COMPLEX array, dimension (LDZ, N)\n*          If JOBZ = \'N\', then Z is not referenced.\n*          If JOBZ = \'V\', then if INFO = 0, the first M columns of Z\n*          contain the orthonormal eigenvectors of the matrix A\n*          corresponding to the selected eigenvalues, with the i-th\n*          column of Z holding the eigenvector associated with W(i).\n*          The eigenvectors are normalized as follows:\n*          if ITYPE = 1 or 2, Z**H*B*Z = I;\n*          if ITYPE = 3, Z**H*inv(B)*Z = I.\n*\n*          If an eigenvector fails to converge, then that column of Z\n*          contains the latest approximation to the eigenvector, and the\n*          index of the eigenvector is returned in IFAIL.\n*          Note: the user must ensure that at least max(1,M) columns are\n*          supplied in the array Z; if RANGE = \'V\', the exact value of M\n*          is not known in advance and an upper bound must be used.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace) COMPLEX array, dimension (2*N)\n*\n*  RWORK   (workspace) REAL array, dimension (7*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (5*N)\n*\n*  IFAIL   (output) INTEGER array, dimension (N)\n*          If JOBZ = \'V\', then if INFO = 0, the first M elements of\n*          IFAIL are zero.  If INFO > 0, then IFAIL contains the\n*          indices of the eigenvectors that failed to converge.\n*          If JOBZ = \'N\', then IFAIL is not referenced.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  CPPTRF or CHPEVX returned an error code:\n*             <= N:  if INFO = i, CHPEVX failed to converge;\n*                    i eigenvectors failed to converge.  Their indices\n*                    are stored in array IFAIL.\n*             > N:   if INFO = N + i, for 1 <= i <= n, then the leading\n*                    minor of order i of B is not positive definite.\n*                    The factorization of B could not be completed and\n*                    no eigenvalues or eigenvectors were computed.\n*\n'),(170,'zhpgvx_170.txt','      SUBROUTINE ZHPGVX( ITYPE, JOBZ, RANGE, UPLO, N, AP, BP, VL, VU,\n     $                   IL, IU, ABSTOL, M, W, Z, LDZ, WORK, RWORK,\n     $                   IWORK, IFAIL, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, RANGE, UPLO\n      INTEGER            IL, INFO, ITYPE, IU, LDZ, M, N\n      DOUBLE PRECISION   ABSTOL, VL, VU\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IFAIL( * ), IWORK( * )\n      DOUBLE PRECISION   RWORK( * ), W( * )\n      COMPLEX*16         AP( * ), BP( * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZHPGVX computes selected eigenvalues and, optionally, eigenvectors\n*  of a complex generalized Hermitian-definite eigenproblem, of the form\n*  A*x=(lambda)*B*x,  A*Bx=(lambda)*x,  or B*A*x=(lambda)*x.  Here A and\n*  B are assumed to be Hermitian, stored in packed format, and B is also\n*  positive definite.  Eigenvalues and eigenvectors can be selected by\n*  specifying either a range of values or a range of indices for the\n*  desired eigenvalues.\n*\n*  Arguments\n*  =========\n*\n*  ITYPE   (input) INTEGER\n*          Specifies the problem type to be solved:\n*          = 1:  A*x = (lambda)*B*x\n*          = 2:  A*B*x = (lambda)*x\n*          = 3:  B*A*x = (lambda)*x\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  RANGE   (input) CHARACTER*1\n*          = \'A\': all eigenvalues will be found;\n*          = \'V\': all eigenvalues in the half-open interval (VL,VU]\n*                 will be found;\n*          = \'I\': the IL-th through IU-th eigenvalues will be found.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangles of A and B are stored;\n*          = \'L\':  Lower triangles of A and B are stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A and B.  N >= 0.\n*\n*  AP      (input/output) COMPLEX*16 array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the Hermitian matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*\n*          On exit, the contents of AP are destroyed.\n*\n*  BP      (input/output) COMPLEX*16 array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the Hermitian matrix\n*          B, packed columnwise in a linear array.  The j-th column of B\n*          is stored in the array BP as follows:\n*          if UPLO = \'U\', BP(i + (j-1)*j/2) = B(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', BP(i + (j-1)*(2*n-j)/2) = B(i,j) for j<=i<=n.\n*\n*          On exit, the triangular factor U or L from the Cholesky\n*          factorization B = U**H*U or B = L*L**H, in the same storage\n*          format as B.\n*\n*  VL      (input) DOUBLE PRECISION\n*  VU      (input) DOUBLE PRECISION\n*          If RANGE=\'V\', the lower and upper bounds of the interval to\n*          be searched for eigenvalues. VL < VU.\n*          Not referenced if RANGE = \'A\' or \'I\'.\n*\n*  IL      (input) INTEGER\n*  IU      (input) INTEGER\n*          If RANGE=\'I\', the indices (in ascending order) of the\n*          smallest and largest eigenvalues to be returned.\n*          1 <= IL <= IU <= N, if N > 0; IL = 1 and IU = 0 if N = 0.\n*          Not referenced if RANGE = \'A\' or \'V\'.\n*\n*  ABSTOL  (input) DOUBLE PRECISION\n*          The absolute error tolerance for the eigenvalues.\n*          An approximate eigenvalue is accepted as converged\n*          when it is determined to lie in an interval [a,b]\n*          of width less than or equal to\n*\n*                  ABSTOL + EPS *   max( |a|,|b| ) ,\n*\n*          where EPS is the machine precision.  If ABSTOL is less than\n*          or equal to zero, then  EPS*|T|  will be used in its place,\n*          where |T| is the 1-norm of the tridiagonal matrix obtained\n*          by reducing AP to tridiagonal form.\n*\n*          Eigenvalues will be computed most accurately when ABSTOL is\n*          set to twice the underflow threshold 2*DLAMCH(\'S\'), not zero.\n*          If this routine returns with INFO>0, indicating that some\n*          eigenvectors did not converge, try setting ABSTOL to\n*          2*DLAMCH(\'S\').\n*\n*  M       (output) INTEGER\n*          The total number of eigenvalues found.  0 <= M <= N.\n*          If RANGE = \'A\', M = N, and if RANGE = \'I\', M = IU-IL+1.\n*\n*  W       (output) DOUBLE PRECISION array, dimension (N)\n*          On normal exit, the first M elements contain the selected\n*          eigenvalues in ascending order.\n*\n*  Z       (output) COMPLEX*16 array, dimension (LDZ, N)\n*          If JOBZ = \'N\', then Z is not referenced.\n*          If JOBZ = \'V\', then if INFO = 0, the first M columns of Z\n*          contain the orthonormal eigenvectors of the matrix A\n*          corresponding to the selected eigenvalues, with the i-th\n*          column of Z holding the eigenvector associated with W(i).\n*          The eigenvectors are normalized as follows:\n*          if ITYPE = 1 or 2, Z**H*B*Z = I;\n*          if ITYPE = 3, Z**H*inv(B)*Z = I.\n*\n*          If an eigenvector fails to converge, then that column of Z\n*          contains the latest approximation to the eigenvector, and the\n*          index of the eigenvector is returned in IFAIL.\n*          Note: the user must ensure that at least max(1,M) columns are\n*          supplied in the array Z; if RANGE = \'V\', the exact value of M\n*          is not known in advance and an upper bound must be used.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (7*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (5*N)\n*\n*  IFAIL   (output) INTEGER array, dimension (N)\n*          If JOBZ = \'V\', then if INFO = 0, the first M elements of\n*          IFAIL are zero.  If INFO > 0, then IFAIL contains the\n*          indices of the eigenvectors that failed to converge.\n*          If JOBZ = \'N\', then IFAIL is not referenced.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  ZPPTRF or ZHPEVX returned an error code:\n*             <= N:  if INFO = i, ZHPEVX failed to converge;\n*                    i eigenvectors failed to converge.  Their indices\n*                    are stored in array IFAIL.\n*             > N:   if INFO = N + i, for 1 <= i <= n, then the leading\n*                    minor of order i of B is not positive definite.\n*                    The factorization of B could not be completed and\n*                    no eigenvalues or eigenvectors were computed.\n*\n'),(171,'ssygvx_171.txt','      SUBROUTINE SSYGVX( ITYPE, JOBZ, RANGE, UPLO, N, A, LDA, B, LDB,\n     $                   VL, VU, IL, IU, ABSTOL, M, W, Z, LDZ, WORK,\n     $                   LWORK, IWORK, IFAIL, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, RANGE, UPLO\n      INTEGER            IL, INFO, ITYPE, IU, LDA, LDB, LDZ, LWORK, M, N\n      REAL               ABSTOL, VL, VU\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IFAIL( * ), IWORK( * )\n      REAL               A( LDA, * ), B( LDB, * ), W( * ), WORK( * ),\n     $                   Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SSYGVX computes selected eigenvalues, and optionally, eigenvectors\n*  of a real generalized symmetric-definite eigenproblem, of the form\n*  A*x=(lambda)*B*x,  A*Bx=(lambda)*x,  or B*A*x=(lambda)*x.  Here A\n*  and B are assumed to be symmetric and B is also positive definite.\n*  Eigenvalues and eigenvectors can be selected by specifying either a\n*  range of values or a range of indices for the desired eigenvalues.\n*\n*  Arguments\n*  =========\n*\n*  ITYPE   (input) INTEGER\n*          Specifies the problem type to be solved:\n*          = 1:  A*x = (lambda)*B*x\n*          = 2:  A*B*x = (lambda)*x\n*          = 3:  B*A*x = (lambda)*x\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  RANGE   (input) CHARACTER*1\n*          = \'A\': all eigenvalues will be found.\n*          = \'V\': all eigenvalues in the half-open interval (VL,VU]\n*                 will be found.\n*          = \'I\': the IL-th through IU-th eigenvalues will be found.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A and B are stored;\n*          = \'L\':  Lower triangle of A and B are stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix pencil (A,B).  N >= 0.\n*\n*  A       (input/output) REAL array, dimension (LDA, N)\n*          On entry, the symmetric matrix A.  If UPLO = \'U\', the\n*          leading N-by-N upper triangular part of A contains the\n*          upper triangular part of the matrix A.  If UPLO = \'L\',\n*          the leading N-by-N lower triangular part of A contains\n*          the lower triangular part of the matrix A.\n*\n*          On exit, the lower triangle (if UPLO=\'L\') or the upper\n*          triangle (if UPLO=\'U\') of A, including the diagonal, is\n*          destroyed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  B       (input/output) REAL array, dimension (LDA, N)\n*          On entry, the symmetric matrix B.  If UPLO = \'U\', the\n*          leading N-by-N upper triangular part of B contains the\n*          upper triangular part of the matrix B.  If UPLO = \'L\',\n*          the leading N-by-N lower triangular part of B contains\n*          the lower triangular part of the matrix B.\n*\n*          On exit, if INFO <= N, the part of B containing the matrix is\n*          overwritten by the triangular factor U or L from the Cholesky\n*          factorization B = U**T*U or B = L*L**T.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  VL      (input) REAL\n*  VU      (input) REAL\n*          If RANGE=\'V\', the lower and upper bounds of the interval to\n*          be searched for eigenvalues. VL < VU.\n*          Not referenced if RANGE = \'A\' or \'I\'.\n*\n*  IL      (input) INTEGER\n*  IU      (input) INTEGER\n*          If RANGE=\'I\', the indices (in ascending order) of the\n*          smallest and largest eigenvalues to be returned.\n*          1 <= IL <= IU <= N, if N > 0; IL = 1 and IU = 0 if N = 0.\n*          Not referenced if RANGE = \'A\' or \'V\'.\n*\n*  ABSTOL  (input) REAL\n*          The absolute error tolerance for the eigenvalues.\n*          An approximate eigenvalue is accepted as converged\n*          when it is determined to lie in an interval [a,b]\n*          of width less than or equal to\n*\n*                  ABSTOL + EPS *   max( |a|,|b| ) ,\n*\n*          where EPS is the machine precision.  If ABSTOL is less than\n*          or equal to zero, then  EPS*|T|  will be used in its place,\n*          where |T| is the 1-norm of the tridiagonal matrix obtained\n*          by reducing A to tridiagonal form.\n*\n*          Eigenvalues will be computed most accurately when ABSTOL is\n*          set to twice the underflow threshold 2*DLAMCH(\'S\'), not zero.\n*          If this routine returns with INFO>0, indicating that some\n*          eigenvectors did not converge, try setting ABSTOL to\n*          2*SLAMCH(\'S\').\n*\n*  M       (output) INTEGER\n*          The total number of eigenvalues found.  0 <= M <= N.\n*          If RANGE = \'A\', M = N, and if RANGE = \'I\', M = IU-IL+1.\n*\n*  W       (output) REAL array, dimension (N)\n*          On normal exit, the first M elements contain the selected\n*          eigenvalues in ascending order.\n*\n*  Z       (output) REAL array, dimension (LDZ, max(1,M))\n*          If JOBZ = \'N\', then Z is not referenced.\n*          If JOBZ = \'V\', then if INFO = 0, the first M columns of Z\n*          contain the orthonormal eigenvectors of the matrix A\n*          corresponding to the selected eigenvalues, with the i-th\n*          column of Z holding the eigenvector associated with W(i).\n*          The eigenvectors are normalized as follows:\n*          if ITYPE = 1 or 2, Z**T*B*Z = I;\n*          if ITYPE = 3, Z**T*inv(B)*Z = I.\n*\n*          If an eigenvector fails to converge, then that column of Z\n*          contains the latest approximation to the eigenvector, and the\n*          index of the eigenvector is returned in IFAIL.\n*          Note: the user must ensure that at least max(1,M) columns are\n*          supplied in the array Z; if RANGE = \'V\', the exact value of M\n*          is not known in advance and an upper bound must be used.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace/output) REAL array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The length of the array WORK.  LWORK >= max(1,8*N).\n*          For optimal efficiency, LWORK >= (NB+3)*N,\n*          where NB is the blocksize for SSYTRD returned by ILAENV.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  IWORK   (workspace) INTEGER array, dimension (5*N)\n*\n*  IFAIL   (output) INTEGER array, dimension (N)\n*          If JOBZ = \'V\', then if INFO = 0, the first M elements of\n*          IFAIL are zero.  If INFO > 0, then IFAIL contains the\n*          indices of the eigenvectors that failed to converge.\n*          If JOBZ = \'N\', then IFAIL is not referenced.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  SPOTRF or SSYEVX returned an error code:\n*             <= N:  if INFO = i, SSYEVX failed to converge;\n*                    i eigenvectors failed to converge.  Their indices\n*                    are stored in array IFAIL.\n*             > N:   if INFO = N + i, for 1 <= i <= N, then the leading\n*                    minor of order i of B is not positive definite.\n*                    The factorization of B could not be completed and\n*                    no eigenvalues or eigenvectors were computed.\n*\n'),(172,'dsygvx_172.txt','      SUBROUTINE DSYGVX( ITYPE, JOBZ, RANGE, UPLO, N, A, LDA, B, LDB,\n     $                   VL, VU, IL, IU, ABSTOL, M, W, Z, LDZ, WORK,\n     $                   LWORK, IWORK, IFAIL, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, RANGE, UPLO\n      INTEGER            IL, INFO, ITYPE, IU, LDA, LDB, LDZ, LWORK, M, N\n      DOUBLE PRECISION   ABSTOL, VL, VU\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IFAIL( * ), IWORK( * )\n      DOUBLE PRECISION   A( LDA, * ), B( LDB, * ), W( * ), WORK( * ),\n     $                   Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DSYGVX computes selected eigenvalues, and optionally, eigenvectors\n*  of a real generalized symmetric-definite eigenproblem, of the form\n*  A*x=(lambda)*B*x,  A*Bx=(lambda)*x,  or B*A*x=(lambda)*x.  Here A\n*  and B are assumed to be symmetric and B is also positive definite.\n*  Eigenvalues and eigenvectors can be selected by specifying either a\n*  range of values or a range of indices for the desired eigenvalues.\n*\n*  Arguments\n*  =========\n*\n*  ITYPE   (input) INTEGER\n*          Specifies the problem type to be solved:\n*          = 1:  A*x = (lambda)*B*x\n*          = 2:  A*B*x = (lambda)*x\n*          = 3:  B*A*x = (lambda)*x\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  RANGE   (input) CHARACTER*1\n*          = \'A\': all eigenvalues will be found.\n*          = \'V\': all eigenvalues in the half-open interval (VL,VU]\n*                 will be found.\n*          = \'I\': the IL-th through IU-th eigenvalues will be found.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A and B are stored;\n*          = \'L\':  Lower triangle of A and B are stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix pencil (A,B).  N >= 0.\n*\n*  A       (input/output) DOUBLE PRECISION array, dimension (LDA, N)\n*          On entry, the symmetric matrix A.  If UPLO = \'U\', the\n*          leading N-by-N upper triangular part of A contains the\n*          upper triangular part of the matrix A.  If UPLO = \'L\',\n*          the leading N-by-N lower triangular part of A contains\n*          the lower triangular part of the matrix A.\n*\n*          On exit, the lower triangle (if UPLO=\'L\') or the upper\n*          triangle (if UPLO=\'U\') of A, including the diagonal, is\n*          destroyed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  B       (input/output) DOUBLE PRECISION array, dimension (LDB, N)\n*          On entry, the symmetric matrix B.  If UPLO = \'U\', the\n*          leading N-by-N upper triangular part of B contains the\n*          upper triangular part of the matrix B.  If UPLO = \'L\',\n*          the leading N-by-N lower triangular part of B contains\n*          the lower triangular part of the matrix B.\n*\n*          On exit, if INFO <= N, the part of B containing the matrix is\n*          overwritten by the triangular factor U or L from the Cholesky\n*          factorization B = U**T*U or B = L*L**T.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  VL      (input) DOUBLE PRECISION\n*  VU      (input) DOUBLE PRECISION\n*          If RANGE=\'V\', the lower and upper bounds of the interval to\n*          be searched for eigenvalues. VL < VU.\n*          Not referenced if RANGE = \'A\' or \'I\'.\n*\n*  IL      (input) INTEGER\n*  IU      (input) INTEGER\n*          If RANGE=\'I\', the indices (in ascending order) of the\n*          smallest and largest eigenvalues to be returned.\n*          1 <= IL <= IU <= N, if N > 0; IL = 1 and IU = 0 if N = 0.\n*          Not referenced if RANGE = \'A\' or \'V\'.\n*\n*  ABSTOL  (input) DOUBLE PRECISION\n*          The absolute error tolerance for the eigenvalues.\n*          An approximate eigenvalue is accepted as converged\n*          when it is determined to lie in an interval [a,b]\n*          of width less than or equal to\n*\n*                  ABSTOL + EPS *   max( |a|,|b| ) ,\n*\n*          where EPS is the machine precision.  If ABSTOL is less than\n*          or equal to zero, then  EPS*|T|  will be used in its place,\n*          where |T| is the 1-norm of the tridiagonal matrix obtained\n*          by reducing A to tridiagonal form.\n*\n*          Eigenvalues will be computed most accurately when ABSTOL is\n*          set to twice the underflow threshold 2*DLAMCH(\'S\'), not zero.\n*          If this routine returns with INFO>0, indicating that some\n*          eigenvectors did not converge, try setting ABSTOL to\n*          2*DLAMCH(\'S\').\n*\n*  M       (output) INTEGER\n*          The total number of eigenvalues found.  0 <= M <= N.\n*          If RANGE = \'A\', M = N, and if RANGE = \'I\', M = IU-IL+1.\n*\n*  W       (output) DOUBLE PRECISION array, dimension (N)\n*          On normal exit, the first M elements contain the selected\n*          eigenvalues in ascending order.\n*\n*  Z       (output) DOUBLE PRECISION array, dimension (LDZ, max(1,M))\n*          If JOBZ = \'N\', then Z is not referenced.\n*          If JOBZ = \'V\', then if INFO = 0, the first M columns of Z\n*          contain the orthonormal eigenvectors of the matrix A\n*          corresponding to the selected eigenvalues, with the i-th\n*          column of Z holding the eigenvector associated with W(i).\n*          The eigenvectors are normalized as follows:\n*          if ITYPE = 1 or 2, Z**T*B*Z = I;\n*          if ITYPE = 3, Z**T*inv(B)*Z = I.\n*\n*          If an eigenvector fails to converge, then that column of Z\n*          contains the latest approximation to the eigenvector, and the\n*          index of the eigenvector is returned in IFAIL.\n*          Note: the user must ensure that at least max(1,M) columns are\n*          supplied in the array Z; if RANGE = \'V\', the exact value of M\n*          is not known in advance and an upper bound must be used.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace/output) DOUBLE PRECISION array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The length of the array WORK.  LWORK >= max(1,8*N).\n*          For optimal efficiency, LWORK >= (NB+3)*N,\n*          where NB is the blocksize for DSYTRD returned by ILAENV.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  IWORK   (workspace) INTEGER array, dimension (5*N)\n*\n*  IFAIL   (output) INTEGER array, dimension (N)\n*          If JOBZ = \'V\', then if INFO = 0, the first M elements of\n*          IFAIL are zero.  If INFO > 0, then IFAIL contains the\n*          indices of the eigenvectors that failed to converge.\n*          If JOBZ = \'N\', then IFAIL is not referenced.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  DPOTRF or DSYEVX returned an error code:\n*             <= N:  if INFO = i, DSYEVX failed to converge;\n*                    i eigenvectors failed to converge.  Their indices\n*                    are stored in array IFAIL.\n*             > N:   if INFO = N + i, for 1 <= i <= N, then the leading\n*                    minor of order i of B is not positive definite.\n*                    The factorization of B could not be completed and\n*                    no eigenvalues or eigenvectors were computed.\n*\n'),(173,'ssbgvx_173.txt','      SUBROUTINE SSBGVX( JOBZ, RANGE, UPLO, N, KA, KB, AB, LDAB, BB,\n     $                   LDBB, Q, LDQ, VL, VU, IL, IU, ABSTOL, M, W, Z,\n     $                   LDZ, WORK, IWORK, IFAIL, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, RANGE, UPLO\n      INTEGER            IL, INFO, IU, KA, KB, LDAB, LDBB, LDQ, LDZ, M,\n     $                   N\n      REAL               ABSTOL, VL, VU\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IFAIL( * ), IWORK( * )\n      REAL               AB( LDAB, * ), BB( LDBB, * ), Q( LDQ, * ),\n     $                   W( * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SSBGVX computes selected eigenvalues, and optionally, eigenvectors\n*  of a real generalized symmetric-definite banded eigenproblem, of\n*  the form A*x=(lambda)*B*x.  Here A and B are assumed to be symmetric\n*  and banded, and B is also positive definite.  Eigenvalues and\n*  eigenvectors can be selected by specifying either all eigenvalues,\n*  a range of values or a range of indices for the desired eigenvalues.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  RANGE   (input) CHARACTER*1\n*          = \'A\': all eigenvalues will be found.\n*          = \'V\': all eigenvalues in the half-open interval (VL,VU]\n*                 will be found.\n*          = \'I\': the IL-th through IU-th eigenvalues will be found.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangles of A and B are stored;\n*          = \'L\':  Lower triangles of A and B are stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A and B.  N >= 0.\n*\n*  KA      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KA >= 0.\n*\n*  KB      (input) INTEGER\n*          The number of superdiagonals of the matrix B if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KB >= 0.\n*\n*  AB      (input/output) REAL array, dimension (LDAB, N)\n*          On entry, the upper or lower triangle of the symmetric band\n*          matrix A, stored in the first ka+1 rows of the array.  The\n*          j-th column of A is stored in the j-th column of the array AB\n*          as follows:\n*          if UPLO = \'U\', AB(ka+1+i-j,j) = A(i,j) for max(1,j-ka)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+ka).\n*\n*          On exit, the contents of AB are destroyed.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KA+1.\n*\n*  BB      (input/output) REAL array, dimension (LDBB, N)\n*          On entry, the upper or lower triangle of the symmetric band\n*          matrix B, stored in the first kb+1 rows of the array.  The\n*          j-th column of B is stored in the j-th column of the array BB\n*          as follows:\n*          if UPLO = \'U\', BB(ka+1+i-j,j) = B(i,j) for max(1,j-kb)<=i<=j;\n*          if UPLO = \'L\', BB(1+i-j,j)    = B(i,j) for j<=i<=min(n,j+kb).\n*\n*          On exit, the factor S from the split Cholesky factorization\n*          B = S**T*S, as returned by SPBSTF.\n*\n*  LDBB    (input) INTEGER\n*          The leading dimension of the array BB.  LDBB >= KB+1.\n*\n*  Q       (output) REAL array, dimension (LDQ, N)\n*          If JOBZ = \'V\', the n-by-n matrix used in the reduction of\n*          A*x = (lambda)*B*x to standard form, i.e. C*x = (lambda)*x,\n*          and consequently C to tridiagonal form.\n*          If JOBZ = \'N\', the array Q is not referenced.\n*\n*  LDQ     (input) INTEGER\n*          The leading dimension of the array Q.  If JOBZ = \'N\',\n*          LDQ >= 1. If JOBZ = \'V\', LDQ >= max(1,N).\n*\n*  VL      (input) REAL\n*  VU      (input) REAL\n*          If RANGE=\'V\', the lower and upper bounds of the interval to\n*          be searched for eigenvalues. VL < VU.\n*          Not referenced if RANGE = \'A\' or \'I\'.\n*\n*  IL      (input) INTEGER\n*  IU      (input) INTEGER\n*          If RANGE=\'I\', the indices (in ascending order) of the\n*          smallest and largest eigenvalues to be returned.\n*          1 <= IL <= IU <= N, if N > 0; IL = 1 and IU = 0 if N = 0.\n*          Not referenced if RANGE = \'A\' or \'V\'.\n*\n*  ABSTOL  (input) REAL\n*          The absolute error tolerance for the eigenvalues.\n*          An approximate eigenvalue is accepted as converged\n*          when it is determined to lie in an interval [a,b]\n*          of width less than or equal to\n*\n*                  ABSTOL + EPS *   max( |a|,|b| ) ,\n*\n*          where EPS is the machine precision.  If ABSTOL is less than\n*          or equal to zero, then  EPS*|T|  will be used in its place,\n*          where |T| is the 1-norm of the tridiagonal matrix obtained\n*          by reducing A to tridiagonal form.\n*\n*          Eigenvalues will be computed most accurately when ABSTOL is\n*          set to twice the underflow threshold 2*SLAMCH(\'S\'), not zero.\n*          If this routine returns with INFO>0, indicating that some\n*          eigenvectors did not converge, try setting ABSTOL to\n*          2*SLAMCH(\'S\').\n*\n*  M       (output) INTEGER\n*          The total number of eigenvalues found.  0 <= M <= N.\n*          If RANGE = \'A\', M = N, and if RANGE = \'I\', M = IU-IL+1.\n*\n*  W       (output) REAL array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  Z       (output) REAL array, dimension (LDZ, N)\n*          If JOBZ = \'V\', then if INFO = 0, Z contains the matrix Z of\n*          eigenvectors, with the i-th column of Z holding the\n*          eigenvector associated with W(i).  The eigenvectors are\n*          normalized so Z**T*B*Z = I.\n*          If JOBZ = \'N\', then Z is not referenced.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace/output) REAL array, dimension (7N)\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (5N)\n*\n*  IFAIL   (output) INTEGER array, dimension (M)\n*          If JOBZ = \'V\', then if INFO = 0, the first M elements of\n*          IFAIL are zero.  If INFO > 0, then IFAIL contains the\n*          indices of the eigenvalues that failed to converge.\n*          If JOBZ = \'N\', then IFAIL is not referenced.\n*\n*  INFO    (output) INTEGER\n*          = 0 : successful exit\n*          < 0 : if INFO = -i, the i-th argument had an illegal value\n*          <= N: if INFO = i, then i eigenvectors failed to converge.\n*                  Their indices are stored in IFAIL.\n*          > N : SPBSTF returned an error code; i.e.,\n*                if INFO = N + i, for 1 <= i <= N, then the leading\n*                minor of order i of B is not positive definite.\n*                The factorization of B could not be completed and\n*                no eigenvalues or eigenvectors were computed.\n*\n'),(174,'dsbgvx_174.txt','      SUBROUTINE DSBGVX( JOBZ, RANGE, UPLO, N, KA, KB, AB, LDAB, BB,\n     $                   LDBB, Q, LDQ, VL, VU, IL, IU, ABSTOL, M, W, Z,\n     $                   LDZ, WORK, IWORK, IFAIL, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, RANGE, UPLO\n      INTEGER            IL, INFO, IU, KA, KB, LDAB, LDBB, LDQ, LDZ, M,\n     $                   N\n      DOUBLE PRECISION   ABSTOL, VL, VU\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IFAIL( * ), IWORK( * )\n      DOUBLE PRECISION   AB( LDAB, * ), BB( LDBB, * ), Q( LDQ, * ),\n     $                   W( * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DSBGVX computes selected eigenvalues, and optionally, eigenvectors\n*  of a real generalized symmetric-definite banded eigenproblem, of\n*  the form A*x=(lambda)*B*x.  Here A and B are assumed to be symmetric\n*  and banded, and B is also positive definite.  Eigenvalues and\n*  eigenvectors can be selected by specifying either all eigenvalues,\n*  a range of values or a range of indices for the desired eigenvalues.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  RANGE   (input) CHARACTER*1\n*          = \'A\': all eigenvalues will be found.\n*          = \'V\': all eigenvalues in the half-open interval (VL,VU]\n*                 will be found.\n*          = \'I\': the IL-th through IU-th eigenvalues will be found.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangles of A and B are stored;\n*          = \'L\':  Lower triangles of A and B are stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A and B.  N >= 0.\n*\n*  KA      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KA >= 0.\n*\n*  KB      (input) INTEGER\n*          The number of superdiagonals of the matrix B if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KB >= 0.\n*\n*  AB      (input/output) DOUBLE PRECISION array, dimension (LDAB, N)\n*          On entry, the upper or lower triangle of the symmetric band\n*          matrix A, stored in the first ka+1 rows of the array.  The\n*          j-th column of A is stored in the j-th column of the array AB\n*          as follows:\n*          if UPLO = \'U\', AB(ka+1+i-j,j) = A(i,j) for max(1,j-ka)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+ka).\n*\n*          On exit, the contents of AB are destroyed.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KA+1.\n*\n*  BB      (input/output) DOUBLE PRECISION array, dimension (LDBB, N)\n*          On entry, the upper or lower triangle of the symmetric band\n*          matrix B, stored in the first kb+1 rows of the array.  The\n*          j-th column of B is stored in the j-th column of the array BB\n*          as follows:\n*          if UPLO = \'U\', BB(ka+1+i-j,j) = B(i,j) for max(1,j-kb)<=i<=j;\n*          if UPLO = \'L\', BB(1+i-j,j)    = B(i,j) for j<=i<=min(n,j+kb).\n*\n*          On exit, the factor S from the split Cholesky factorization\n*          B = S**T*S, as returned by DPBSTF.\n*\n*  LDBB    (input) INTEGER\n*          The leading dimension of the array BB.  LDBB >= KB+1.\n*\n*  Q       (output) DOUBLE PRECISION array, dimension (LDQ, N)\n*          If JOBZ = \'V\', the n-by-n matrix used in the reduction of\n*          A*x = (lambda)*B*x to standard form, i.e. C*x = (lambda)*x,\n*          and consequently C to tridiagonal form.\n*          If JOBZ = \'N\', the array Q is not referenced.\n*\n*  LDQ     (input) INTEGER\n*          The leading dimension of the array Q.  If JOBZ = \'N\',\n*          LDQ >= 1. If JOBZ = \'V\', LDQ >= max(1,N).\n*\n*  VL      (input) DOUBLE PRECISION\n*  VU      (input) DOUBLE PRECISION\n*          If RANGE=\'V\', the lower and upper bounds of the interval to\n*          be searched for eigenvalues. VL < VU.\n*          Not referenced if RANGE = \'A\' or \'I\'.\n*\n*  IL      (input) INTEGER\n*  IU      (input) INTEGER\n*          If RANGE=\'I\', the indices (in ascending order) of the\n*          smallest and largest eigenvalues to be returned.\n*          1 <= IL <= IU <= N, if N > 0; IL = 1 and IU = 0 if N = 0.\n*          Not referenced if RANGE = \'A\' or \'V\'.\n*\n*  ABSTOL  (input) DOUBLE PRECISION\n*          The absolute error tolerance for the eigenvalues.\n*          An approximate eigenvalue is accepted as converged\n*          when it is determined to lie in an interval [a,b]\n*          of width less than or equal to\n*\n*                  ABSTOL + EPS *   max( |a|,|b| ) ,\n*\n*          where EPS is the machine precision.  If ABSTOL is less than\n*          or equal to zero, then  EPS*|T|  will be used in its place,\n*          where |T| is the 1-norm of the tridiagonal matrix obtained\n*          by reducing A to tridiagonal form.\n*\n*          Eigenvalues will be computed most accurately when ABSTOL is\n*          set to twice the underflow threshold 2*DLAMCH(\'S\'), not zero.\n*          If this routine returns with INFO>0, indicating that some\n*          eigenvectors did not converge, try setting ABSTOL to\n*          2*DLAMCH(\'S\').\n*\n*  M       (output) INTEGER\n*          The total number of eigenvalues found.  0 <= M <= N.\n*          If RANGE = \'A\', M = N, and if RANGE = \'I\', M = IU-IL+1.\n*\n*  W       (output) DOUBLE PRECISION array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  Z       (output) DOUBLE PRECISION array, dimension (LDZ, N)\n*          If JOBZ = \'V\', then if INFO = 0, Z contains the matrix Z of\n*          eigenvectors, with the i-th column of Z holding the\n*          eigenvector associated with W(i).  The eigenvectors are\n*          normalized so Z**T*B*Z = I.\n*          If JOBZ = \'N\', then Z is not referenced.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace/output) DOUBLE PRECISION array, dimension (7*N)\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (5*N)\n*\n*  IFAIL   (output) INTEGER array, dimension (M)\n*          If JOBZ = \'V\', then if INFO = 0, the first M elements of\n*          IFAIL are zero.  If INFO > 0, then IFAIL contains the\n*          indices of the eigenvalues that failed to converge.\n*          If JOBZ = \'N\', then IFAIL is not referenced.\n*\n*  INFO    (output) INTEGER\n*          = 0 : successful exit\n*          < 0 : if INFO = -i, the i-th argument had an illegal value\n*          <= N: if INFO = i, then i eigenvectors failed to converge.\n*                  Their indices are stored in IFAIL.\n*          > N : DPBSTF returned an error code; i.e.,\n*                if INFO = N + i, for 1 <= i <= N, then the leading\n*                minor of order i of B is not positive definite.\n*                The factorization of B could not be completed and\n*                no eigenvalues or eigenvectors were computed.\n*\n'),(175,'sspgvx_175.txt','      SUBROUTINE SSPGVX( ITYPE, JOBZ, RANGE, UPLO, N, AP, BP, VL, VU,\n     $                   IL, IU, ABSTOL, M, W, Z, LDZ, WORK, IWORK,\n     $                   IFAIL, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, RANGE, UPLO\n      INTEGER            IL, INFO, ITYPE, IU, LDZ, M, N\n      REAL               ABSTOL, VL, VU\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IFAIL( * ), IWORK( * )\n      REAL               AP( * ), BP( * ), W( * ), WORK( * ),\n     $                   Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SSPGVX computes selected eigenvalues, and optionally, eigenvectors\n*  of a real generalized symmetric-definite eigenproblem, of the form\n*  A*x=(lambda)*B*x,  A*Bx=(lambda)*x,  or B*A*x=(lambda)*x.  Here A\n*  and B are assumed to be symmetric, stored in packed storage, and B\n*  is also positive definite.  Eigenvalues and eigenvectors can be\n*  selected by specifying either a range of values or a range of indices\n*  for the desired eigenvalues.\n*\n*  Arguments\n*  =========\n*\n*  ITYPE   (input) INTEGER\n*          Specifies the problem type to be solved:\n*          = 1:  A*x = (lambda)*B*x\n*          = 2:  A*B*x = (lambda)*x\n*          = 3:  B*A*x = (lambda)*x\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  RANGE   (input) CHARACTER*1\n*          = \'A\': all eigenvalues will be found.\n*          = \'V\': all eigenvalues in the half-open interval (VL,VU]\n*                 will be found.\n*          = \'I\': the IL-th through IU-th eigenvalues will be found.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A and B are stored;\n*          = \'L\':  Lower triangle of A and B are stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix pencil (A,B).  N >= 0.\n*\n*  AP      (input/output) REAL array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the symmetric matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*\n*          On exit, the contents of AP are destroyed.\n*\n*  BP      (input/output) REAL array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the symmetric matrix\n*          B, packed columnwise in a linear array.  The j-th column of B\n*          is stored in the array BP as follows:\n*          if UPLO = \'U\', BP(i + (j-1)*j/2) = B(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', BP(i + (j-1)*(2*n-j)/2) = B(i,j) for j<=i<=n.\n*\n*          On exit, the triangular factor U or L from the Cholesky\n*          factorization B = U**T*U or B = L*L**T, in the same storage\n*          format as B.\n*\n*  VL      (input) REAL\n*  VU      (input) REAL\n*          If RANGE=\'V\', the lower and upper bounds of the interval to\n*          be searched for eigenvalues. VL < VU.\n*          Not referenced if RANGE = \'A\' or \'I\'.\n*\n*  IL      (input) INTEGER\n*  IU      (input) INTEGER\n*          If RANGE=\'I\', the indices (in ascending order) of the\n*          smallest and largest eigenvalues to be returned.\n*          1 <= IL <= IU <= N, if N > 0; IL = 1 and IU = 0 if N = 0.\n*          Not referenced if RANGE = \'A\' or \'V\'.\n*\n*  ABSTOL  (input) REAL\n*          The absolute error tolerance for the eigenvalues.\n*          An approximate eigenvalue is accepted as converged\n*          when it is determined to lie in an interval [a,b]\n*          of width less than or equal to\n*\n*                  ABSTOL + EPS *   max( |a|,|b| ) ,\n*\n*          where EPS is the machine precision.  If ABSTOL is less than\n*          or equal to zero, then  EPS*|T|  will be used in its place,\n*          where |T| is the 1-norm of the tridiagonal matrix obtained\n*          by reducing A to tridiagonal form.\n*\n*          Eigenvalues will be computed most accurately when ABSTOL is\n*          set to twice the underflow threshold 2*SLAMCH(\'S\'), not zero.\n*          If this routine returns with INFO>0, indicating that some\n*          eigenvectors did not converge, try setting ABSTOL to\n*          2*SLAMCH(\'S\').\n*\n*  M       (output) INTEGER\n*          The total number of eigenvalues found.  0 <= M <= N.\n*          If RANGE = \'A\', M = N, and if RANGE = \'I\', M = IU-IL+1.\n*\n*  W       (output) REAL array, dimension (N)\n*          On normal exit, the first M elements contain the selected\n*          eigenvalues in ascending order.\n*\n*  Z       (output) REAL array, dimension (LDZ, max(1,M))\n*          If JOBZ = \'N\', then Z is not referenced.\n*          If JOBZ = \'V\', then if INFO = 0, the first M columns of Z\n*          contain the orthonormal eigenvectors of the matrix A\n*          corresponding to the selected eigenvalues, with the i-th\n*          column of Z holding the eigenvector associated with W(i).\n*          The eigenvectors are normalized as follows:\n*          if ITYPE = 1 or 2, Z**T*B*Z = I;\n*          if ITYPE = 3, Z**T*inv(B)*Z = I.\n*\n*          If an eigenvector fails to converge, then that column of Z\n*          contains the latest approximation to the eigenvector, and the\n*          index of the eigenvector is returned in IFAIL.\n*          Note: the user must ensure that at least max(1,M) columns are\n*          supplied in the array Z; if RANGE = \'V\', the exact value of M\n*          is not known in advance and an upper bound must be used.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace) REAL array, dimension (8*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (5*N)\n*\n*  IFAIL   (output) INTEGER array, dimension (N)\n*          If JOBZ = \'V\', then if INFO = 0, the first M elements of\n*          IFAIL are zero.  If INFO > 0, then IFAIL contains the\n*          indices of the eigenvectors that failed to converge.\n*          If JOBZ = \'N\', then IFAIL is not referenced.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  SPPTRF or SSPEVX returned an error code:\n*             <= N:  if INFO = i, SSPEVX failed to converge;\n*                    i eigenvectors failed to converge.  Their indices\n*                    are stored in array IFAIL.\n*             > N:   if INFO = N + i, for 1 <= i <= N, then the leading\n*                    minor of order i of B is not positive definite.\n*                    The factorization of B could not be completed and\n*                    no eigenvalues or eigenvectors were computed.\n*\n'),(176,'dspgvx_176.txt','      SUBROUTINE DSPGVX( ITYPE, JOBZ, RANGE, UPLO, N, AP, BP, VL, VU,\n     $                   IL, IU, ABSTOL, M, W, Z, LDZ, WORK, IWORK,\n     $                   IFAIL, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, RANGE, UPLO\n      INTEGER            IL, INFO, ITYPE, IU, LDZ, M, N\n      DOUBLE PRECISION   ABSTOL, VL, VU\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IFAIL( * ), IWORK( * )\n      DOUBLE PRECISION   AP( * ), BP( * ), W( * ), WORK( * ),\n     $                   Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DSPGVX computes selected eigenvalues, and optionally, eigenvectors\n*  of a real generalized symmetric-definite eigenproblem, of the form\n*  A*x=(lambda)*B*x,  A*Bx=(lambda)*x,  or B*A*x=(lambda)*x.  Here A\n*  and B are assumed to be symmetric, stored in packed storage, and B\n*  is also positive definite.  Eigenvalues and eigenvectors can be\n*  selected by specifying either a range of values or a range of indices\n*  for the desired eigenvalues.\n*\n*  Arguments\n*  =========\n*\n*  ITYPE   (input) INTEGER\n*          Specifies the problem type to be solved:\n*          = 1:  A*x = (lambda)*B*x\n*          = 2:  A*B*x = (lambda)*x\n*          = 3:  B*A*x = (lambda)*x\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  RANGE   (input) CHARACTER*1\n*          = \'A\': all eigenvalues will be found.\n*          = \'V\': all eigenvalues in the half-open interval (VL,VU]\n*                 will be found.\n*          = \'I\': the IL-th through IU-th eigenvalues will be found.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A and B are stored;\n*          = \'L\':  Lower triangle of A and B are stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix pencil (A,B).  N >= 0.\n*\n*  AP      (input/output) DOUBLE PRECISION array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the symmetric matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*\n*          On exit, the contents of AP are destroyed.\n*\n*  BP      (input/output) DOUBLE PRECISION array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the symmetric matrix\n*          B, packed columnwise in a linear array.  The j-th column of B\n*          is stored in the array BP as follows:\n*          if UPLO = \'U\', BP(i + (j-1)*j/2) = B(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', BP(i + (j-1)*(2*n-j)/2) = B(i,j) for j<=i<=n.\n*\n*          On exit, the triangular factor U or L from the Cholesky\n*          factorization B = U**T*U or B = L*L**T, in the same storage\n*          format as B.\n*\n*  VL      (input) DOUBLE PRECISION\n*  VU      (input) DOUBLE PRECISION\n*          If RANGE=\'V\', the lower and upper bounds of the interval to\n*          be searched for eigenvalues. VL < VU.\n*          Not referenced if RANGE = \'A\' or \'I\'.\n*\n*  IL      (input) INTEGER\n*  IU      (input) INTEGER\n*          If RANGE=\'I\', the indices (in ascending order) of the\n*          smallest and largest eigenvalues to be returned.\n*          1 <= IL <= IU <= N, if N > 0; IL = 1 and IU = 0 if N = 0.\n*          Not referenced if RANGE = \'A\' or \'V\'.\n*\n*  ABSTOL  (input) DOUBLE PRECISION\n*          The absolute error tolerance for the eigenvalues.\n*          An approximate eigenvalue is accepted as converged\n*          when it is determined to lie in an interval [a,b]\n*          of width less than or equal to\n*\n*                  ABSTOL + EPS *   max( |a|,|b| ) ,\n*\n*          where EPS is the machine precision.  If ABSTOL is less than\n*          or equal to zero, then  EPS*|T|  will be used in its place,\n*          where |T| is the 1-norm of the tridiagonal matrix obtained\n*          by reducing A to tridiagonal form.\n*\n*          Eigenvalues will be computed most accurately when ABSTOL is\n*          set to twice the underflow threshold 2*DLAMCH(\'S\'), not zero.\n*          If this routine returns with INFO>0, indicating that some\n*          eigenvectors did not converge, try setting ABSTOL to\n*          2*DLAMCH(\'S\').\n*\n*  M       (output) INTEGER\n*          The total number of eigenvalues found.  0 <= M <= N.\n*          If RANGE = \'A\', M = N, and if RANGE = \'I\', M = IU-IL+1.\n*\n*  W       (output) DOUBLE PRECISION array, dimension (N)\n*          On normal exit, the first M elements contain the selected\n*          eigenvalues in ascending order.\n*\n*  Z       (output) DOUBLE PRECISION array, dimension (LDZ, max(1,M))\n*          If JOBZ = \'N\', then Z is not referenced.\n*          If JOBZ = \'V\', then if INFO = 0, the first M columns of Z\n*          contain the orthonormal eigenvectors of the matrix A\n*          corresponding to the selected eigenvalues, with the i-th\n*          column of Z holding the eigenvector associated with W(i).\n*          The eigenvectors are normalized as follows:\n*          if ITYPE = 1 or 2, Z**T*B*Z = I;\n*          if ITYPE = 3, Z**T*inv(B)*Z = I.\n*\n*          If an eigenvector fails to converge, then that column of Z\n*          contains the latest approximation to the eigenvector, and the\n*          index of the eigenvector is returned in IFAIL.\n*          Note: the user must ensure that at least max(1,M) columns are\n*          supplied in the array Z; if RANGE = \'V\', the exact value of M\n*          is not known in advance and an upper bound must be used.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace) DOUBLE PRECISION array, dimension (8*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (5*N)\n*\n*  IFAIL   (output) INTEGER array, dimension (N)\n*          If JOBZ = \'V\', then if INFO = 0, the first M elements of\n*          IFAIL are zero.  If INFO > 0, then IFAIL contains the\n*          indices of the eigenvectors that failed to converge.\n*          If JOBZ = \'N\', then IFAIL is not referenced.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  DPPTRF or DSPEVX returned an error code:\n*             <= N:  if INFO = i, DSPEVX failed to converge;\n*                    i eigenvectors failed to converge.  Their indices\n*                    are stored in array IFAIL.\n*             > N:   if INFO = N + i, for 1 <= i <= N, then the leading\n*                    minor of order i of B is not positive definite.\n*                    The factorization of B could not be completed and\n*                    no eigenvalues or eigenvectors were computed.\n*\n'),(177,'chegvd_177.txt','      SUBROUTINE CHEGVD( ITYPE, JOBZ, UPLO, N, A, LDA, B, LDB, W, WORK,\n     $                   LWORK, RWORK, LRWORK, IWORK, LIWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, ITYPE, LDA, LDB, LIWORK, LRWORK, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      REAL               RWORK( * ), W( * )\n      COMPLEX            A( LDA, * ), B( LDB, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CHEGVD computes all the eigenvalues, and optionally, the eigenvectors\n*  of a complex generalized Hermitian-definite eigenproblem, of the form\n*  A*x=(lambda)*B*x,  A*Bx=(lambda)*x,  or B*A*x=(lambda)*x.  Here A and\n*  B are assumed to be Hermitian and B is also positive definite.\n*  If eigenvectors are desired, it uses a divide and conquer algorithm.\n*\n*  The divide and conquer algorithm makes very mild assumptions about\n*  floating point arithmetic. It will work on machines with a guard\n*  digit in add/subtract, or on those binary machines without guard\n*  digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\n*  Cray-2. It could conceivably fail on hexadecimal or decimal machines\n*  without guard digits, but we know of none.\n*\n*  Arguments\n*  =========\n*\n*  ITYPE   (input) INTEGER\n*          Specifies the problem type to be solved:\n*          = 1:  A*x = (lambda)*B*x\n*          = 2:  A*B*x = (lambda)*x\n*          = 3:  B*A*x = (lambda)*x\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangles of A and B are stored;\n*          = \'L\':  Lower triangles of A and B are stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A and B.  N >= 0.\n*\n*  A       (input/output) COMPLEX array, dimension (LDA, N)\n*          On entry, the Hermitian matrix A.  If UPLO = \'U\', the\n*          leading N-by-N upper triangular part of A contains the\n*          upper triangular part of the matrix A.  If UPLO = \'L\',\n*          the leading N-by-N lower triangular part of A contains\n*          the lower triangular part of the matrix A.\n*\n*          On exit, if JOBZ = \'V\', then if INFO = 0, A contains the\n*          matrix Z of eigenvectors.  The eigenvectors are normalized\n*          as follows:\n*          if ITYPE = 1 or 2, Z**H*B*Z = I;\n*          if ITYPE = 3, Z**H*inv(B)*Z = I.\n*          If JOBZ = \'N\', then on exit the upper triangle (if UPLO=\'U\')\n*          or the lower triangle (if UPLO=\'L\') of A, including the\n*          diagonal, is destroyed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  B       (input/output) COMPLEX array, dimension (LDB, N)\n*          On entry, the Hermitian matrix B.  If UPLO = \'U\', the\n*          leading N-by-N upper triangular part of B contains the\n*          upper triangular part of the matrix B.  If UPLO = \'L\',\n*          the leading N-by-N lower triangular part of B contains\n*          the lower triangular part of the matrix B.\n*\n*          On exit, if INFO <= N, the part of B containing the matrix is\n*          overwritten by the triangular factor U or L from the Cholesky\n*          factorization B = U**H*U or B = L*L**H.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  W       (output) REAL array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  WORK    (workspace/output) COMPLEX array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The length of the array WORK.\n*          If N <= 1,                LWORK >= 1.\n*          If JOBZ  = \'N\' and N > 1, LWORK >= N + 1.\n*          If JOBZ  = \'V\' and N > 1, LWORK >= 2*N + N**2.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal sizes of the WORK, RWORK and\n*          IWORK arrays, returns these values as the first entries of\n*          the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  RWORK   (workspace/output) REAL array, dimension (MAX(1,LRWORK))\n*          On exit, if INFO = 0, RWORK(1) returns the optimal LRWORK.\n*\n*  LRWORK  (input) INTEGER\n*          The dimension of the array RWORK.\n*          If N <= 1,                LRWORK >= 1.\n*          If JOBZ  = \'N\' and N > 1, LRWORK >= N.\n*          If JOBZ  = \'V\' and N > 1, LRWORK >= 1 + 5*N + 2*N**2.\n*\n*          If LRWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the optimal sizes of the WORK, RWORK\n*          and IWORK arrays, returns these values as the first entries\n*          of the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (MAX(1,LIWORK))\n*          On exit, if INFO = 0, IWORK(1) returns the optimal LIWORK.\n*\n*  LIWORK  (input) INTEGER\n*          The dimension of the array IWORK.\n*          If N <= 1,                LIWORK >= 1.\n*          If JOBZ  = \'N\' and N > 1, LIWORK >= 1.\n*          If JOBZ  = \'V\' and N > 1, LIWORK >= 3 + 5*N.\n*\n*          If LIWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the optimal sizes of the WORK, RWORK\n*          and IWORK arrays, returns these values as the first entries\n*          of the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  CPOTRF or CHEEVD returned an error code:\n*             <= N:  if INFO = i and JOBZ = \'N\', then the algorithm\n*                    failed to converge; i off-diagonal elements of an\n*                    intermediate tridiagonal form did not converge to\n*                    zero;\n*                    if INFO = i and JOBZ = \'V\', then the algorithm\n*                    failed to compute an eigenvalue while working on\n*                    the submatrix lying in rows and columns INFO/(N+1)\n*                    through mod(INFO,N+1);\n*             > N:   if INFO = N + i, for 1 <= i <= N, then the leading\n*                    minor of order i of B is not positive definite.\n*                    The factorization of B could not be completed and\n*                    no eigenvalues or eigenvectors were computed.\n*\n'),(178,'zhegvd_178.txt','      SUBROUTINE ZHEGVD( ITYPE, JOBZ, UPLO, N, A, LDA, B, LDB, W, WORK,\n     $                   LWORK, RWORK, LRWORK, IWORK, LIWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, ITYPE, LDA, LDB, LIWORK, LRWORK, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      DOUBLE PRECISION   RWORK( * ), W( * )\n      COMPLEX*16         A( LDA, * ), B( LDB, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZHEGVD computes all the eigenvalues, and optionally, the eigenvectors\n*  of a complex generalized Hermitian-definite eigenproblem, of the form\n*  A*x=(lambda)*B*x,  A*Bx=(lambda)*x,  or B*A*x=(lambda)*x.  Here A and\n*  B are assumed to be Hermitian and B is also positive definite.\n*  If eigenvectors are desired, it uses a divide and conquer algorithm.\n*\n*  The divide and conquer algorithm makes very mild assumptions about\n*  floating point arithmetic. It will work on machines with a guard\n*  digit in add/subtract, or on those binary machines without guard\n*  digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\n*  Cray-2. It could conceivably fail on hexadecimal or decimal machines\n*  without guard digits, but we know of none.\n*\n*  Arguments\n*  =========\n*\n*  ITYPE   (input) INTEGER\n*          Specifies the problem type to be solved:\n*          = 1:  A*x = (lambda)*B*x\n*          = 2:  A*B*x = (lambda)*x\n*          = 3:  B*A*x = (lambda)*x\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangles of A and B are stored;\n*          = \'L\':  Lower triangles of A and B are stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A and B.  N >= 0.\n*\n*  A       (input/output) COMPLEX*16 array, dimension (LDA, N)\n*          On entry, the Hermitian matrix A.  If UPLO = \'U\', the\n*          leading N-by-N upper triangular part of A contains the\n*          upper triangular part of the matrix A.  If UPLO = \'L\',\n*          the leading N-by-N lower triangular part of A contains\n*          the lower triangular part of the matrix A.\n*\n*          On exit, if JOBZ = \'V\', then if INFO = 0, A contains the\n*          matrix Z of eigenvectors.  The eigenvectors are normalized\n*          as follows:\n*          if ITYPE = 1 or 2, Z**H*B*Z = I;\n*          if ITYPE = 3, Z**H*inv(B)*Z = I.\n*          If JOBZ = \'N\', then on exit the upper triangle (if UPLO=\'U\')\n*          or the lower triangle (if UPLO=\'L\') of A, including the\n*          diagonal, is destroyed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB, N)\n*          On entry, the Hermitian matrix B.  If UPLO = \'U\', the\n*          leading N-by-N upper triangular part of B contains the\n*          upper triangular part of the matrix B.  If UPLO = \'L\',\n*          the leading N-by-N lower triangular part of B contains\n*          the lower triangular part of the matrix B.\n*\n*          On exit, if INFO <= N, the part of B containing the matrix is\n*          overwritten by the triangular factor U or L from the Cholesky\n*          factorization B = U**H*U or B = L*L**H.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  W       (output) DOUBLE PRECISION array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  WORK    (workspace/output) COMPLEX*16 array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The length of the array WORK.\n*          If N <= 1,                LWORK >= 1.\n*          If JOBZ  = \'N\' and N > 1, LWORK >= N + 1.\n*          If JOBZ  = \'V\' and N > 1, LWORK >= 2*N + N**2.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal sizes of the WORK, RWORK and\n*          IWORK arrays, returns these values as the first entries of\n*          the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  RWORK   (workspace/output) DOUBLE PRECISION array, dimension (MAX(1,LRWORK))\n*          On exit, if INFO = 0, RWORK(1) returns the optimal LRWORK.\n*\n*  LRWORK  (input) INTEGER\n*          The dimension of the array RWORK.\n*          If N <= 1,                LRWORK >= 1.\n*          If JOBZ  = \'N\' and N > 1, LRWORK >= N.\n*          If JOBZ  = \'V\' and N > 1, LRWORK >= 1 + 5*N + 2*N**2.\n*\n*          If LRWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the optimal sizes of the WORK, RWORK\n*          and IWORK arrays, returns these values as the first entries\n*          of the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (MAX(1,LIWORK))\n*          On exit, if INFO = 0, IWORK(1) returns the optimal LIWORK.\n*\n*  LIWORK  (input) INTEGER\n*          The dimension of the array IWORK.\n*          If N <= 1,                LIWORK >= 1.\n*          If JOBZ  = \'N\' and N > 1, LIWORK >= 1.\n*          If JOBZ  = \'V\' and N > 1, LIWORK >= 3 + 5*N.\n*\n*          If LIWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the optimal sizes of the WORK, RWORK\n*          and IWORK arrays, returns these values as the first entries\n*          of the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  ZPOTRF or ZHEEVD returned an error code:\n*             <= N:  if INFO = i and JOBZ = \'N\', then the algorithm\n*                    failed to converge; i off-diagonal elements of an\n*                    intermediate tridiagonal form did not converge to\n*                    zero;\n*                    if INFO = i and JOBZ = \'V\', then the algorithm\n*                    failed to compute an eigenvalue while working on\n*                    the submatrix lying in rows and columns INFO/(N+1)\n*                    through mod(INFO,N+1);\n*             > N:   if INFO = N + i, for 1 <= i <= N, then the leading\n*                    minor of order i of B is not positive definite.\n*                    The factorization of B could not be completed and\n*                    no eigenvalues or eigenvectors were computed.\n*\n');
INSERT INTO `Driver_routineinfo` VALUES (179,'chbgvd_179.txt','      SUBROUTINE CHBGVD( JOBZ, UPLO, N, KA, KB, AB, LDAB, BB, LDBB, W,\n     $                   Z, LDZ, WORK, LWORK, RWORK, LRWORK, IWORK,\n     $                   LIWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n* @generated c\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, KA, KB, LDAB, LDBB, LDZ, LIWORK, LRWORK,\n     $                   LWORK, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      REAL               RWORK( * ), W( * )\n      COMPLEX            AB( LDAB, * ), BB( LDBB, * ), WORK( * ),\n     $                   Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CHBGVD computes all the eigenvalues, and optionally, the eigenvectors\n*  of a complex generalized Hermitian-definite banded eigenproblem, of\n*  the form A*x=(lambda)*B*x. Here A and B are assumed to be Hermitian\n*  and banded, and B is also positive definite.  If eigenvectors are\n*  desired, it uses a divide and conquer algorithm.\n*\n*  The divide and conquer algorithm makes very mild assumptions about\n*  floating point arithmetic. It will work on machines with a guard\n*  digit in add/subtract, or on those binary machines without guard\n*  digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\n*  Cray-2. It could conceivably fail on hexadecimal or decimal machines\n*  without guard digits, but we know of none.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangles of A and B are stored;\n*          = \'L\':  Lower triangles of A and B are stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A and B.  N >= 0.\n*\n*  KA      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'. KA >= 0.\n*\n*  KB      (input) INTEGER\n*          The number of superdiagonals of the matrix B if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'. KB >= 0.\n*\n*  AB      (input/output) COMPLEX array, dimension (LDAB, N)\n*          On entry, the upper or lower triangle of the Hermitian band\n*          matrix A, stored in the first ka+1 rows of the array.  The\n*          j-th column of A is stored in the j-th column of the array AB\n*          as follows:\n*          if UPLO = \'U\', AB(ka+1+i-j,j) = A(i,j) for max(1,j-ka)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+ka).\n*\n*          On exit, the contents of AB are destroyed.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KA+1.\n*\n*  BB      (input/output) COMPLEX array, dimension (LDBB, N)\n*          On entry, the upper or lower triangle of the Hermitian band\n*          matrix B, stored in the first kb+1 rows of the array.  The\n*          j-th column of B is stored in the j-th column of the array BB\n*          as follows:\n*          if UPLO = \'U\', BB(kb+1+i-j,j) = B(i,j) for max(1,j-kb)<=i<=j;\n*          if UPLO = \'L\', BB(1+i-j,j)    = B(i,j) for j<=i<=min(n,j+kb).\n*\n*          On exit, the factor S from the split Cholesky factorization\n*          B = S**H*S, as returned by CPBSTF.\n*\n*  LDBB    (input) INTEGER\n*          The leading dimension of the array BB.  LDBB >= KB+1.\n*\n*  W       (output) REAL array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  Z       (output) COMPLEX array, dimension (LDZ, N)\n*          If JOBZ = \'V\', then if INFO = 0, Z contains the matrix Z of\n*          eigenvectors, with the i-th column of Z holding the\n*          eigenvector associated with W(i). The eigenvectors are\n*          normalized so that Z**H*B*Z = I.\n*          If JOBZ = \'N\', then Z is not referenced.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= N.\n*\n*  WORK    (workspace/output) COMPLEX array, dimension (MAX(1,LWORK))\n*          On exit, if INFO=0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.\n*          If N <= 1,               LWORK >= 1.\n*          If JOBZ = \'N\' and N > 1, LWORK >= N.\n*          If JOBZ = \'V\' and N > 1, LWORK >= 2*N**2.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal sizes of the WORK, RWORK and\n*          IWORK arrays, returns these values as the first entries of\n*          the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  RWORK   (workspace/output) REAL array, dimension (MAX(1,LRWORK))\n*          On exit, if INFO=0, RWORK(1) returns the optimal LRWORK.\n*\n*  LRWORK  (input) INTEGER\n*          The dimension of array RWORK.\n*          If N <= 1,               LRWORK >= 1.\n*          If JOBZ = \'N\' and N > 1, LRWORK >= N.\n*          If JOBZ = \'V\' and N > 1, LRWORK >= 1 + 5*N + 2*N**2.\n*\n*          If LRWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the optimal sizes of the WORK, RWORK\n*          and IWORK arrays, returns these values as the first entries\n*          of the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (MAX(1,LIWORK))\n*          On exit, if INFO=0, IWORK(1) returns the optimal LIWORK.\n*\n*  LIWORK  (input) INTEGER\n*          The dimension of array IWORK.\n*          If JOBZ = \'N\' or N <= 1, LIWORK >= 1.\n*          If JOBZ = \'V\' and N > 1, LIWORK >= 3 + 5*N.\n*\n*          If LIWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the optimal sizes of the WORK, RWORK\n*          and IWORK arrays, returns these values as the first entries\n*          of the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is:\n*             <= N:  the algorithm failed to converge:\n*                    i off-diagonal elements of an intermediate\n*                    tridiagonal form did not converge to zero;\n*             > N:   if INFO = N + i, for 1 <= i <= N, then CPBSTF\n*                    returned INFO = i: B is not positive definite.\n*                    The factorization of B could not be completed and\n*                    no eigenvalues or eigenvectors were computed.\n*\n'),(180,'zhbgvd_180.txt','      SUBROUTINE ZHBGVD( JOBZ, UPLO, N, KA, KB, AB, LDAB, BB, LDBB, W,\n     $                   Z, LDZ, WORK, LWORK, RWORK, LRWORK, IWORK,\n     $                   LIWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n* @precisions normal z -> c\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, KA, KB, LDAB, LDBB, LDZ, LIWORK, LRWORK,\n     $                   LWORK, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      DOUBLE PRECISION   RWORK( * ), W( * )\n      COMPLEX*16         AB( LDAB, * ), BB( LDBB, * ), WORK( * ),\n     $                   Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZHBGVD computes all the eigenvalues, and optionally, the eigenvectors\n*  of a complex generalized Hermitian-definite banded eigenproblem, of\n*  the form A*x=(lambda)*B*x. Here A and B are assumed to be Hermitian\n*  and banded, and B is also positive definite.  If eigenvectors are\n*  desired, it uses a divide and conquer algorithm.\n*\n*  The divide and conquer algorithm makes very mild assumptions about\n*  floating point arithmetic. It will work on machines with a guard\n*  digit in add/subtract, or on those binary machines without guard\n*  digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\n*  Cray-2. It could conceivably fail on hexadecimal or decimal machines\n*  without guard digits, but we know of none.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangles of A and B are stored;\n*          = \'L\':  Lower triangles of A and B are stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A and B.  N >= 0.\n*\n*  KA      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'. KA >= 0.\n*\n*  KB      (input) INTEGER\n*          The number of superdiagonals of the matrix B if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'. KB >= 0.\n*\n*  AB      (input/output) COMPLEX*16 array, dimension (LDAB, N)\n*          On entry, the upper or lower triangle of the Hermitian band\n*          matrix A, stored in the first ka+1 rows of the array.  The\n*          j-th column of A is stored in the j-th column of the array AB\n*          as follows:\n*          if UPLO = \'U\', AB(ka+1+i-j,j) = A(i,j) for max(1,j-ka)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+ka).\n*\n*          On exit, the contents of AB are destroyed.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KA+1.\n*\n*  BB      (input/output) COMPLEX*16 array, dimension (LDBB, N)\n*          On entry, the upper or lower triangle of the Hermitian band\n*          matrix B, stored in the first kb+1 rows of the array.  The\n*          j-th column of B is stored in the j-th column of the array BB\n*          as follows:\n*          if UPLO = \'U\', BB(kb+1+i-j,j) = B(i,j) for max(1,j-kb)<=i<=j;\n*          if UPLO = \'L\', BB(1+i-j,j)    = B(i,j) for j<=i<=min(n,j+kb).\n*\n*          On exit, the factor S from the split Cholesky factorization\n*          B = S**H*S, as returned by ZPBSTF.\n*\n*  LDBB    (input) INTEGER\n*          The leading dimension of the array BB.  LDBB >= KB+1.\n*\n*  W       (output) DOUBLE PRECISION array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  Z       (output) COMPLEX*16 array, dimension (LDZ, N)\n*          If JOBZ = \'V\', then if INFO = 0, Z contains the matrix Z of\n*          eigenvectors, with the i-th column of Z holding the\n*          eigenvector associated with W(i). The eigenvectors are\n*          normalized so that Z**H*B*Z = I.\n*          If JOBZ = \'N\', then Z is not referenced.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= N.\n*\n*  WORK    (workspace/output) COMPLEX*16 array, dimension (MAX(1,LWORK))\n*          On exit, if INFO=0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.\n*          If N <= 1,               LWORK >= 1.\n*          If JOBZ = \'N\' and N > 1, LWORK >= N.\n*          If JOBZ = \'V\' and N > 1, LWORK >= 2*N**2.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal sizes of the WORK, RWORK and\n*          IWORK arrays, returns these values as the first entries of\n*          the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  RWORK   (workspace/output) DOUBLE PRECISION array, dimension (MAX(1,LRWORK))\n*          On exit, if INFO=0, RWORK(1) returns the optimal LRWORK.\n*\n*  LRWORK  (input) INTEGER\n*          The dimension of array RWORK.\n*          If N <= 1,               LRWORK >= 1.\n*          If JOBZ = \'N\' and N > 1, LRWORK >= N.\n*          If JOBZ = \'V\' and N > 1, LRWORK >= 1 + 5*N + 2*N**2.\n*\n*          If LRWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the optimal sizes of the WORK, RWORK\n*          and IWORK arrays, returns these values as the first entries\n*          of the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (MAX(1,LIWORK))\n*          On exit, if INFO=0, IWORK(1) returns the optimal LIWORK.\n*\n*  LIWORK  (input) INTEGER\n*          The dimension of array IWORK.\n*          If JOBZ = \'N\' or N <= 1, LIWORK >= 1.\n*          If JOBZ = \'V\' and N > 1, LIWORK >= 3 + 5*N.\n*\n*          If LIWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the optimal sizes of the WORK, RWORK\n*          and IWORK arrays, returns these values as the first entries\n*          of the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is:\n*             <= N:  the algorithm failed to converge:\n*                    i off-diagonal elements of an intermediate\n*                    tridiagonal form did not converge to zero;\n*             > N:   if INFO = N + i, for 1 <= i <= N, then ZPBSTF\n*                    returned INFO = i: B is not positive definite.\n*                    The factorization of B could not be completed and\n*                    no eigenvalues or eigenvectors were computed.\n*\n'),(181,'chpgvd_181.txt','      SUBROUTINE CHPGVD( ITYPE, JOBZ, UPLO, N, AP, BP, W, Z, LDZ, WORK,\n     $                   LWORK, RWORK, LRWORK, IWORK, LIWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, ITYPE, LDZ, LIWORK, LRWORK, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      REAL               RWORK( * ), W( * )\n      COMPLEX            AP( * ), BP( * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CHPGVD computes all the eigenvalues and, optionally, the eigenvectors\n*  of a complex generalized Hermitian-definite eigenproblem, of the form\n*  A*x=(lambda)*B*x,  A*Bx=(lambda)*x,  or B*A*x=(lambda)*x.  Here A and\n*  B are assumed to be Hermitian, stored in packed format, and B is also\n*  positive definite.\n*  If eigenvectors are desired, it uses a divide and conquer algorithm.\n*\n*  The divide and conquer algorithm makes very mild assumptions about\n*  floating point arithmetic. It will work on machines with a guard\n*  digit in add/subtract, or on those binary machines without guard\n*  digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\n*  Cray-2. It could conceivably fail on hexadecimal or decimal machines\n*  without guard digits, but we know of none.\n*\n*  Arguments\n*  =========\n*\n*  ITYPE   (input) INTEGER\n*          Specifies the problem type to be solved:\n*          = 1:  A*x = (lambda)*B*x\n*          = 2:  A*B*x = (lambda)*x\n*          = 3:  B*A*x = (lambda)*x\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangles of A and B are stored;\n*          = \'L\':  Lower triangles of A and B are stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A and B.  N >= 0.\n*\n*  AP      (input/output) COMPLEX array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the Hermitian matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*\n*          On exit, the contents of AP are destroyed.\n*\n*  BP      (input/output) COMPLEX array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the Hermitian matrix\n*          B, packed columnwise in a linear array.  The j-th column of B\n*          is stored in the array BP as follows:\n*          if UPLO = \'U\', BP(i + (j-1)*j/2) = B(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', BP(i + (j-1)*(2*n-j)/2) = B(i,j) for j<=i<=n.\n*\n*          On exit, the triangular factor U or L from the Cholesky\n*          factorization B = U**H*U or B = L*L**H, in the same storage\n*          format as B.\n*\n*  W       (output) REAL array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  Z       (output) COMPLEX array, dimension (LDZ, N)\n*          If JOBZ = \'V\', then if INFO = 0, Z contains the matrix Z of\n*          eigenvectors.  The eigenvectors are normalized as follows:\n*          if ITYPE = 1 or 2, Z**H*B*Z = I;\n*          if ITYPE = 3, Z**H*inv(B)*Z = I.\n*          If JOBZ = \'N\', then Z is not referenced.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace) COMPLEX array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the required LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of array WORK.\n*          If N <= 1,               LWORK >= 1.\n*          If JOBZ = \'N\' and N > 1, LWORK >= N.\n*          If JOBZ = \'V\' and N > 1, LWORK >= 2*N.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the required sizes of the WORK, RWORK and\n*          IWORK arrays, returns these values as the first entries of\n*          the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  RWORK   (workspace) REAL array, dimension (MAX(1,LRWORK))\n*          On exit, if INFO = 0, RWORK(1) returns the required LRWORK.\n*\n*  LRWORK  (input) INTEGER\n*          The dimension of array RWORK.\n*          If N <= 1,               LRWORK >= 1.\n*          If JOBZ = \'N\' and N > 1, LRWORK >= N.\n*          If JOBZ = \'V\' and N > 1, LRWORK >= 1 + 5*N + 2*N**2.\n*\n*          If LRWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the required sizes of the WORK, RWORK\n*          and IWORK arrays, returns these values as the first entries\n*          of the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (MAX(1,LIWORK))\n*          On exit, if INFO = 0, IWORK(1) returns the required LIWORK.\n*\n*  LIWORK  (input) INTEGER\n*          The dimension of array IWORK.\n*          If JOBZ  = \'N\' or N <= 1, LIWORK >= 1.\n*          If JOBZ  = \'V\' and N > 1, LIWORK >= 3 + 5*N.\n*\n*          If LIWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the required sizes of the WORK, RWORK\n*          and IWORK arrays, returns these values as the first entries\n*          of the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  CPPTRF or CHPEVD returned an error code:\n*             <= N:  if INFO = i, CHPEVD failed to converge;\n*                    i off-diagonal elements of an intermediate\n*                    tridiagonal form did not convergeto zero;\n*             > N:   if INFO = N + i, for 1 <= i <= n, then the leading\n*                    minor of order i of B is not positive definite.\n*                    The factorization of B could not be completed and\n*                    no eigenvalues or eigenvectors were computed.\n*\n'),(182,'zhpgvd_182.txt','      SUBROUTINE ZHPGVD( ITYPE, JOBZ, UPLO, N, AP, BP, W, Z, LDZ, WORK,\n     $                   LWORK, RWORK, LRWORK, IWORK, LIWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, ITYPE, LDZ, LIWORK, LRWORK, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      DOUBLE PRECISION   RWORK( * ), W( * )\n      COMPLEX*16         AP( * ), BP( * ), WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZHPGVD computes all the eigenvalues and, optionally, the eigenvectors\n*  of a complex generalized Hermitian-definite eigenproblem, of the form\n*  A*x=(lambda)*B*x,  A*Bx=(lambda)*x,  or B*A*x=(lambda)*x.  Here A and\n*  B are assumed to be Hermitian, stored in packed format, and B is also\n*  positive definite.\n*  If eigenvectors are desired, it uses a divide and conquer algorithm.\n*\n*  The divide and conquer algorithm makes very mild assumptions about\n*  floating point arithmetic. It will work on machines with a guard\n*  digit in add/subtract, or on those binary machines without guard\n*  digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\n*  Cray-2. It could conceivably fail on hexadecimal or decimal machines\n*  without guard digits, but we know of none.\n*\n*  Arguments\n*  =========\n*\n*  ITYPE   (input) INTEGER\n*          Specifies the problem type to be solved:\n*          = 1:  A*x = (lambda)*B*x\n*          = 2:  A*B*x = (lambda)*x\n*          = 3:  B*A*x = (lambda)*x\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangles of A and B are stored;\n*          = \'L\':  Lower triangles of A and B are stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A and B.  N >= 0.\n*\n*  AP      (input/output) COMPLEX*16 array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the Hermitian matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*\n*          On exit, the contents of AP are destroyed.\n*\n*  BP      (input/output) COMPLEX*16 array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the Hermitian matrix\n*          B, packed columnwise in a linear array.  The j-th column of B\n*          is stored in the array BP as follows:\n*          if UPLO = \'U\', BP(i + (j-1)*j/2) = B(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', BP(i + (j-1)*(2*n-j)/2) = B(i,j) for j<=i<=n.\n*\n*          On exit, the triangular factor U or L from the Cholesky\n*          factorization B = U**H*U or B = L*L**H, in the same storage\n*          format as B.\n*\n*  W       (output) DOUBLE PRECISION array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  Z       (output) COMPLEX*16 array, dimension (LDZ, N)\n*          If JOBZ = \'V\', then if INFO = 0, Z contains the matrix Z of\n*          eigenvectors.  The eigenvectors are normalized as follows:\n*          if ITYPE = 1 or 2, Z**H*B*Z = I;\n*          if ITYPE = 3, Z**H*inv(B)*Z = I.\n*          If JOBZ = \'N\', then Z is not referenced.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the required LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.\n*          If N <= 1,               LWORK >= 1.\n*          If JOBZ = \'N\' and N > 1, LWORK >= N.\n*          If JOBZ = \'V\' and N > 1, LWORK >= 2*N.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the required sizes of the WORK, RWORK and\n*          IWORK arrays, returns these values as the first entries of\n*          the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (MAX(1,LRWORK))\n*          On exit, if INFO = 0, RWORK(1) returns the required LRWORK.\n*\n*  LRWORK  (input) INTEGER\n*          The dimension of array RWORK.\n*          If N <= 1,               LRWORK >= 1.\n*          If JOBZ = \'N\' and N > 1, LRWORK >= N.\n*          If JOBZ = \'V\' and N > 1, LRWORK >= 1 + 5*N + 2*N**2.\n*\n*          If LRWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the required sizes of the WORK, RWORK\n*          and IWORK arrays, returns these values as the first entries\n*          of the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (MAX(1,LIWORK))\n*          On exit, if INFO = 0, IWORK(1) returns the required LIWORK.\n*\n*  LIWORK  (input) INTEGER\n*          The dimension of array IWORK.\n*          If JOBZ  = \'N\' or N <= 1, LIWORK >= 1.\n*          If JOBZ  = \'V\' and N > 1, LIWORK >= 3 + 5*N.\n*\n*          If LIWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the required sizes of the WORK, RWORK\n*          and IWORK arrays, returns these values as the first entries\n*          of the WORK, RWORK and IWORK arrays, and no error message\n*          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  ZPPTRF or ZHPEVD returned an error code:\n*             <= N:  if INFO = i, ZHPEVD failed to converge;\n*                    i off-diagonal elements of an intermediate\n*                    tridiagonal form did not convergeto zero;\n*             > N:   if INFO = N + i, for 1 <= i <= n, then the leading\n*                    minor of order i of B is not positive definite.\n*                    The factorization of B could not be completed and\n*                    no eigenvalues or eigenvectors were computed.\n*\n'),(183,'ssygvd_183.txt','      SUBROUTINE SSYGVD( ITYPE, JOBZ, UPLO, N, A, LDA, B, LDB, W, WORK,\n     $                   LWORK, IWORK, LIWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, ITYPE, LDA, LDB, LIWORK, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      REAL               A( LDA, * ), B( LDB, * ), W( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SSYGVD computes all the eigenvalues, and optionally, the eigenvectors\n*  of a real generalized symmetric-definite eigenproblem, of the form\n*  A*x=(lambda)*B*x,  A*Bx=(lambda)*x,  or B*A*x=(lambda)*x.  Here A and\n*  B are assumed to be symmetric and B is also positive definite.\n*  If eigenvectors are desired, it uses a divide and conquer algorithm.\n*\n*  The divide and conquer algorithm makes very mild assumptions about\n*  floating point arithmetic. It will work on machines with a guard\n*  digit in add/subtract, or on those binary machines without guard\n*  digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\n*  Cray-2. It could conceivably fail on hexadecimal or decimal machines\n*  without guard digits, but we know of none.\n*\n*  Arguments\n*  =========\n*\n*  ITYPE   (input) INTEGER\n*          Specifies the problem type to be solved:\n*          = 1:  A*x = (lambda)*B*x\n*          = 2:  A*B*x = (lambda)*x\n*          = 3:  B*A*x = (lambda)*x\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangles of A and B are stored;\n*          = \'L\':  Lower triangles of A and B are stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A and B.  N >= 0.\n*\n*  A       (input/output) REAL array, dimension (LDA, N)\n*          On entry, the symmetric matrix A.  If UPLO = \'U\', the\n*          leading N-by-N upper triangular part of A contains the\n*          upper triangular part of the matrix A.  If UPLO = \'L\',\n*          the leading N-by-N lower triangular part of A contains\n*          the lower triangular part of the matrix A.\n*\n*          On exit, if JOBZ = \'V\', then if INFO = 0, A contains the\n*          matrix Z of eigenvectors.  The eigenvectors are normalized\n*          as follows:\n*          if ITYPE = 1 or 2, Z**T*B*Z = I;\n*          if ITYPE = 3, Z**T*inv(B)*Z = I.\n*          If JOBZ = \'N\', then on exit the upper triangle (if UPLO=\'U\')\n*          or the lower triangle (if UPLO=\'L\') of A, including the\n*          diagonal, is destroyed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  B       (input/output) REAL array, dimension (LDB, N)\n*          On entry, the symmetric matrix B.  If UPLO = \'U\', the\n*          leading N-by-N upper triangular part of B contains the\n*          upper triangular part of the matrix B.  If UPLO = \'L\',\n*          the leading N-by-N lower triangular part of B contains\n*          the lower triangular part of the matrix B.\n*\n*          On exit, if INFO <= N, the part of B containing the matrix is\n*          overwritten by the triangular factor U or L from the Cholesky\n*          factorization B = U**T*U or B = L*L**T.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  W       (output) REAL array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  WORK    (workspace/output) REAL array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.\n*          If N <= 1,               LWORK >= 1.\n*          If JOBZ = \'N\' and N > 1, LWORK >= 2*N+1.\n*          If JOBZ = \'V\' and N > 1, LWORK >= 1 + 6*N + 2*N**2.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal sizes of the WORK and IWORK\n*          arrays, returns these values as the first entries of the WORK\n*          and IWORK arrays, and no error message related to LWORK or\n*          LIWORK is issued by XERBLA.\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (MAX(1,LIWORK))\n*          On exit, if INFO = 0, IWORK(1) returns the optimal LIWORK.\n*\n*  LIWORK  (input) INTEGER\n*          The dimension of the array IWORK.\n*          If N <= 1,                LIWORK >= 1.\n*          If JOBZ  = \'N\' and N > 1, LIWORK >= 1.\n*          If JOBZ  = \'V\' and N > 1, LIWORK >= 3 + 5*N.\n*\n*          If LIWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the optimal sizes of the WORK and\n*          IWORK arrays, returns these values as the first entries of\n*          the WORK and IWORK arrays, and no error message related to\n*          LWORK or LIWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  SPOTRF or SSYEVD returned an error code:\n*             <= N:  if INFO = i and JOBZ = \'N\', then the algorithm\n*                    failed to converge; i off-diagonal elements of an\n*                    intermediate tridiagonal form did not converge to\n*                    zero;\n*                    if INFO = i and JOBZ = \'V\', then the algorithm\n*                    failed to compute an eigenvalue while working on\n*                    the submatrix lying in rows and columns INFO/(N+1)\n*                    through mod(INFO,N+1);\n*             > N:   if INFO = N + i, for 1 <= i <= N, then the leading\n*                    minor of order i of B is not positive definite.\n*                    The factorization of B could not be completed and\n*                    no eigenvalues or eigenvectors were computed.\n*\n'),(184,'dsygvd_184.txt','      SUBROUTINE DSYGVD( ITYPE, JOBZ, UPLO, N, A, LDA, B, LDB, W, WORK,\n     $                   LWORK, IWORK, LIWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, ITYPE, LDA, LDB, LIWORK, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      DOUBLE PRECISION   A( LDA, * ), B( LDB, * ), W( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DSYGVD computes all the eigenvalues, and optionally, the eigenvectors\n*  of a real generalized symmetric-definite eigenproblem, of the form\n*  A*x=(lambda)*B*x,  A*Bx=(lambda)*x,  or B*A*x=(lambda)*x.  Here A and\n*  B are assumed to be symmetric and B is also positive definite.\n*  If eigenvectors are desired, it uses a divide and conquer algorithm.\n*\n*  The divide and conquer algorithm makes very mild assumptions about\n*  floating point arithmetic. It will work on machines with a guard\n*  digit in add/subtract, or on those binary machines without guard\n*  digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\n*  Cray-2. It could conceivably fail on hexadecimal or decimal machines\n*  without guard digits, but we know of none.\n*\n*  Arguments\n*  =========\n*\n*  ITYPE   (input) INTEGER\n*          Specifies the problem type to be solved:\n*          = 1:  A*x = (lambda)*B*x\n*          = 2:  A*B*x = (lambda)*x\n*          = 3:  B*A*x = (lambda)*x\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangles of A and B are stored;\n*          = \'L\':  Lower triangles of A and B are stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A and B.  N >= 0.\n*\n*  A       (input/output) DOUBLE PRECISION array, dimension (LDA, N)\n*          On entry, the symmetric matrix A.  If UPLO = \'U\', the\n*          leading N-by-N upper triangular part of A contains the\n*          upper triangular part of the matrix A.  If UPLO = \'L\',\n*          the leading N-by-N lower triangular part of A contains\n*          the lower triangular part of the matrix A.\n*\n*          On exit, if JOBZ = \'V\', then if INFO = 0, A contains the\n*          matrix Z of eigenvectors.  The eigenvectors are normalized\n*          as follows:\n*          if ITYPE = 1 or 2, Z**T*B*Z = I;\n*          if ITYPE = 3, Z**T*inv(B)*Z = I.\n*          If JOBZ = \'N\', then on exit the upper triangle (if UPLO=\'U\')\n*          or the lower triangle (if UPLO=\'L\') of A, including the\n*          diagonal, is destroyed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  B       (input/output) DOUBLE PRECISION array, dimension (LDB, N)\n*          On entry, the symmetric matrix B.  If UPLO = \'U\', the\n*          leading N-by-N upper triangular part of B contains the\n*          upper triangular part of the matrix B.  If UPLO = \'L\',\n*          the leading N-by-N lower triangular part of B contains\n*          the lower triangular part of the matrix B.\n*\n*          On exit, if INFO <= N, the part of B containing the matrix is\n*          overwritten by the triangular factor U or L from the Cholesky\n*          factorization B = U**T*U or B = L*L**T.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  W       (output) DOUBLE PRECISION array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  WORK    (workspace/output) DOUBLE PRECISION array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.\n*          If N <= 1,               LWORK >= 1.\n*          If JOBZ = \'N\' and N > 1, LWORK >= 2*N+1.\n*          If JOBZ = \'V\' and N > 1, LWORK >= 1 + 6*N + 2*N**2.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal sizes of the WORK and IWORK\n*          arrays, returns these values as the first entries of the WORK\n*          and IWORK arrays, and no error message related to LWORK or\n*          LIWORK is issued by XERBLA.\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (MAX(1,LIWORK))\n*          On exit, if INFO = 0, IWORK(1) returns the optimal LIWORK.\n*\n*  LIWORK  (input) INTEGER\n*          The dimension of the array IWORK.\n*          If N <= 1,                LIWORK >= 1.\n*          If JOBZ  = \'N\' and N > 1, LIWORK >= 1.\n*          If JOBZ  = \'V\' and N > 1, LIWORK >= 3 + 5*N.\n*\n*          If LIWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the optimal sizes of the WORK and\n*          IWORK arrays, returns these values as the first entries of\n*          the WORK and IWORK arrays, and no error message related to\n*          LWORK or LIWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  DPOTRF or DSYEVD returned an error code:\n*             <= N:  if INFO = i and JOBZ = \'N\', then the algorithm\n*                    failed to converge; i off-diagonal elements of an\n*                    intermediate tridiagonal form did not converge to\n*                    zero;\n*                    if INFO = i and JOBZ = \'V\', then the algorithm\n*                    failed to compute an eigenvalue while working on\n*                    the submatrix lying in rows and columns INFO/(N+1)\n*                    through mod(INFO,N+1);\n*             > N:   if INFO = N + i, for 1 <= i <= N, then the leading\n*                    minor of order i of B is not positive definite.\n*                    The factorization of B could not be completed and\n*                    no eigenvalues or eigenvectors were computed.\n*\n'),(185,'ssbgvd_185.txt','      SUBROUTINE SSBGVD( JOBZ, UPLO, N, KA, KB, AB, LDAB, BB, LDBB, W,\n     $                   Z, LDZ, WORK, LWORK, IWORK, LIWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, KA, KB, LDAB, LDBB, LDZ, LIWORK, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      REAL               AB( LDAB, * ), BB( LDBB, * ), W( * ),\n     $                   WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SSBGVD computes all the eigenvalues, and optionally, the eigenvectors\n*  of a real generalized symmetric-definite banded eigenproblem, of the\n*  form A*x=(lambda)*B*x.  Here A and B are assumed to be symmetric and\n*  banded, and B is also positive definite.  If eigenvectors are\n*  desired, it uses a divide and conquer algorithm.\n*\n*  The divide and conquer algorithm makes very mild assumptions about\n*  floating point arithmetic. It will work on machines with a guard\n*  digit in add/subtract, or on those binary machines without guard\n*  digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\n*  Cray-2. It could conceivably fail on hexadecimal or decimal machines\n*  without guard digits, but we know of none.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangles of A and B are stored;\n*          = \'L\':  Lower triangles of A and B are stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A and B.  N >= 0.\n*\n*  KA      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KA >= 0.\n*\n*  KB      (input) INTEGER\n*          The number of superdiagonals of the matrix B if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KB >= 0.\n*\n*  AB      (input/output) REAL array, dimension (LDAB, N)\n*          On entry, the upper or lower triangle of the symmetric band\n*          matrix A, stored in the first ka+1 rows of the array.  The\n*          j-th column of A is stored in the j-th column of the array AB\n*          as follows:\n*          if UPLO = \'U\', AB(ka+1+i-j,j) = A(i,j) for max(1,j-ka)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+ka).\n*\n*          On exit, the contents of AB are destroyed.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KA+1.\n*\n*  BB      (input/output) REAL array, dimension (LDBB, N)\n*          On entry, the upper or lower triangle of the symmetric band\n*          matrix B, stored in the first kb+1 rows of the array.  The\n*          j-th column of B is stored in the j-th column of the array BB\n*          as follows:\n*          if UPLO = \'U\', BB(ka+1+i-j,j) = B(i,j) for max(1,j-kb)<=i<=j;\n*          if UPLO = \'L\', BB(1+i-j,j)    = B(i,j) for j<=i<=min(n,j+kb).\n*\n*          On exit, the factor S from the split Cholesky factorization\n*          B = S**T*S, as returned by SPBSTF.\n*\n*  LDBB    (input) INTEGER\n*          The leading dimension of the array BB.  LDBB >= KB+1.\n*\n*  W       (output) REAL array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  Z       (output) REAL array, dimension (LDZ, N)\n*          If JOBZ = \'V\', then if INFO = 0, Z contains the matrix Z of\n*          eigenvectors, with the i-th column of Z holding the\n*          eigenvector associated with W(i).  The eigenvectors are\n*          normalized so Z**T*B*Z = I.\n*          If JOBZ = \'N\', then Z is not referenced.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace/output) REAL array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.\n*          If N <= 1,               LWORK >= 1.\n*          If JOBZ = \'N\' and N > 1, LWORK >= 3*N.\n*          If JOBZ = \'V\' and N > 1, LWORK >= 1 + 5*N + 2*N**2.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal sizes of the WORK and IWORK\n*          arrays, returns these values as the first entries of the WORK\n*          and IWORK arrays, and no error message related to LWORK or\n*          LIWORK is issued by XERBLA.\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (MAX(1,LIWORK))\n*          On exit, if LIWORK > 0, IWORK(1) returns the optimal LIWORK.\n*\n*  LIWORK  (input) INTEGER\n*          The dimension of the array IWORK.\n*          If JOBZ  = \'N\' or N <= 1, LIWORK >= 1.\n*          If JOBZ  = \'V\' and N > 1, LIWORK >= 3 + 5*N.\n*\n*          If LIWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the optimal sizes of the WORK and\n*          IWORK arrays, returns these values as the first entries of\n*          the WORK and IWORK arrays, and no error message related to\n*          LWORK or LIWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is:\n*             <= N:  the algorithm failed to converge:\n*                    i off-diagonal elements of an intermediate\n*                    tridiagonal form did not converge to zero;\n*             > N:   if INFO = N + i, for 1 <= i <= N, then SPBSTF\n*                    returned INFO = i: B is not positive definite.\n*                    The factorization of B could not be completed and\n*                    no eigenvalues or eigenvectors were computed.\n*\n'),(186,'dsbgvd_186.txt','      SUBROUTINE DSBGVD( JOBZ, UPLO, N, KA, KB, AB, LDAB, BB, LDBB, W,\n     $                   Z, LDZ, WORK, LWORK, IWORK, LIWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, KA, KB, LDAB, LDBB, LDZ, LIWORK, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      DOUBLE PRECISION   AB( LDAB, * ), BB( LDBB, * ), W( * ),\n     $                   WORK( * ), Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DSBGVD computes all the eigenvalues, and optionally, the eigenvectors\n*  of a real generalized symmetric-definite banded eigenproblem, of the\n*  form A*x=(lambda)*B*x.  Here A and B are assumed to be symmetric and\n*  banded, and B is also positive definite.  If eigenvectors are\n*  desired, it uses a divide and conquer algorithm.\n*\n*  The divide and conquer algorithm makes very mild assumptions about\n*  floating point arithmetic. It will work on machines with a guard\n*  digit in add/subtract, or on those binary machines without guard\n*  digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\n*  Cray-2. It could conceivably fail on hexadecimal or decimal machines\n*  without guard digits, but we know of none.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangles of A and B are stored;\n*          = \'L\':  Lower triangles of A and B are stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A and B.  N >= 0.\n*\n*  KA      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KA >= 0.\n*\n*  KB      (input) INTEGER\n*          The number of superdiagonals of the matrix B if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KB >= 0.\n*\n*  AB      (input/output) DOUBLE PRECISION array, dimension (LDAB, N)\n*          On entry, the upper or lower triangle of the symmetric band\n*          matrix A, stored in the first ka+1 rows of the array.  The\n*          j-th column of A is stored in the j-th column of the array AB\n*          as follows:\n*          if UPLO = \'U\', AB(ka+1+i-j,j) = A(i,j) for max(1,j-ka)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+ka).\n*\n*          On exit, the contents of AB are destroyed.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KA+1.\n*\n*  BB      (input/output) DOUBLE PRECISION array, dimension (LDBB, N)\n*          On entry, the upper or lower triangle of the symmetric band\n*          matrix B, stored in the first kb+1 rows of the array.  The\n*          j-th column of B is stored in the j-th column of the array BB\n*          as follows:\n*          if UPLO = \'U\', BB(ka+1+i-j,j) = B(i,j) for max(1,j-kb)<=i<=j;\n*          if UPLO = \'L\', BB(1+i-j,j)    = B(i,j) for j<=i<=min(n,j+kb).\n*\n*          On exit, the factor S from the split Cholesky factorization\n*          B = S**T*S, as returned by DPBSTF.\n*\n*  LDBB    (input) INTEGER\n*          The leading dimension of the array BB.  LDBB >= KB+1.\n*\n*  W       (output) DOUBLE PRECISION array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  Z       (output) DOUBLE PRECISION array, dimension (LDZ, N)\n*          If JOBZ = \'V\', then if INFO = 0, Z contains the matrix Z of\n*          eigenvectors, with the i-th column of Z holding the\n*          eigenvector associated with W(i).  The eigenvectors are\n*          normalized so Z**T*B*Z = I.\n*          If JOBZ = \'N\', then Z is not referenced.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace/output) DOUBLE PRECISION array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.\n*          If N <= 1,               LWORK >= 1.\n*          If JOBZ = \'N\' and N > 1, LWORK >= 3*N.\n*          If JOBZ = \'V\' and N > 1, LWORK >= 1 + 5*N + 2*N**2.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal sizes of the WORK and IWORK\n*          arrays, returns these values as the first entries of the WORK\n*          and IWORK arrays, and no error message related to LWORK or\n*          LIWORK is issued by XERBLA.\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (MAX(1,LIWORK))\n*          On exit, if LIWORK > 0, IWORK(1) returns the optimal LIWORK.\n*\n*  LIWORK  (input) INTEGER\n*          The dimension of the array IWORK.\n*          If JOBZ  = \'N\' or N <= 1, LIWORK >= 1.\n*          If JOBZ  = \'V\' and N > 1, LIWORK >= 3 + 5*N.\n*\n*          If LIWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the optimal sizes of the WORK and\n*          IWORK arrays, returns these values as the first entries of\n*          the WORK and IWORK arrays, and no error message related to\n*          LWORK or LIWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is:\n*             <= N:  the algorithm failed to converge:\n*                    i off-diagonal elements of an intermediate\n*                    tridiagonal form did not converge to zero;\n*             > N:   if INFO = N + i, for 1 <= i <= N, then DPBSTF\n*                    returned INFO = i: B is not positive definite.\n*                    The factorization of B could not be completed and\n*                    no eigenvalues or eigenvectors were computed.\n*\n'),(187,'sspgvd_187.txt','      SUBROUTINE SSPGVD( ITYPE, JOBZ, UPLO, N, AP, BP, W, Z, LDZ, WORK,\n     $                   LWORK, IWORK, LIWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, ITYPE, LDZ, LIWORK, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      REAL               AP( * ), BP( * ), W( * ), WORK( * ),\n     $                   Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SSPGVD computes all the eigenvalues, and optionally, the eigenvectors\n*  of a real generalized symmetric-definite eigenproblem, of the form\n*  A*x=(lambda)*B*x,  A*Bx=(lambda)*x,  or B*A*x=(lambda)*x.  Here A and\n*  B are assumed to be symmetric, stored in packed format, and B is also\n*  positive definite.\n*  If eigenvectors are desired, it uses a divide and conquer algorithm.\n*\n*  The divide and conquer algorithm makes very mild assumptions about\n*  floating point arithmetic. It will work on machines with a guard\n*  digit in add/subtract, or on those binary machines without guard\n*  digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\n*  Cray-2. It could conceivably fail on hexadecimal or decimal machines\n*  without guard digits, but we know of none.\n*\n*  Arguments\n*  =========\n*\n*  ITYPE   (input) INTEGER\n*          Specifies the problem type to be solved:\n*          = 1:  A*x = (lambda)*B*x\n*          = 2:  A*B*x = (lambda)*x\n*          = 3:  B*A*x = (lambda)*x\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangles of A and B are stored;\n*          = \'L\':  Lower triangles of A and B are stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A and B.  N >= 0.\n*\n*  AP      (input/output) REAL array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the symmetric matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*\n*          On exit, the contents of AP are destroyed.\n*\n*  BP      (input/output) REAL array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the symmetric matrix\n*          B, packed columnwise in a linear array.  The j-th column of B\n*          is stored in the array BP as follows:\n*          if UPLO = \'U\', BP(i + (j-1)*j/2) = B(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', BP(i + (j-1)*(2*n-j)/2) = B(i,j) for j<=i<=n.\n*\n*          On exit, the triangular factor U or L from the Cholesky\n*          factorization B = U**T*U or B = L*L**T, in the same storage\n*          format as B.\n*\n*  W       (output) REAL array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  Z       (output) REAL array, dimension (LDZ, N)\n*          If JOBZ = \'V\', then if INFO = 0, Z contains the matrix Z of\n*          eigenvectors.  The eigenvectors are normalized as follows:\n*          if ITYPE = 1 or 2, Z**T*B*Z = I;\n*          if ITYPE = 3, Z**T*inv(B)*Z = I.\n*          If JOBZ = \'N\', then Z is not referenced.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace/output) REAL array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the required LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.\n*          If N <= 1,               LWORK >= 1.\n*          If JOBZ = \'N\' and N > 1, LWORK >= 2*N.\n*          If JOBZ = \'V\' and N > 1, LWORK >= 1 + 6*N + 2*N**2.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the required sizes of the WORK and IWORK\n*          arrays, returns these values as the first entries of the WORK\n*          and IWORK arrays, and no error message related to LWORK or\n*          LIWORK is issued by XERBLA.\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (MAX(1,LIWORK))\n*          On exit, if INFO = 0, IWORK(1) returns the required LIWORK.\n*\n*  LIWORK  (input) INTEGER\n*          The dimension of the array IWORK.\n*          If JOBZ  = \'N\' or N <= 1, LIWORK >= 1.\n*          If JOBZ  = \'V\' and N > 1, LIWORK >= 3 + 5*N.\n*\n*          If LIWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the required sizes of the WORK and\n*          IWORK arrays, returns these values as the first entries of\n*          the WORK and IWORK arrays, and no error message related to\n*          LWORK or LIWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  SPPTRF or SSPEVD returned an error code:\n*             <= N:  if INFO = i, SSPEVD failed to converge;\n*                    i off-diagonal elements of an intermediate\n*                    tridiagonal form did not converge to zero;\n*             > N:   if INFO = N + i, for 1 <= i <= N, then the leading\n*                    minor of order i of B is not positive definite.\n*                    The factorization of B could not be completed and\n*                    no eigenvalues or eigenvectors were computed.\n*\n'),(188,'dspgvd_188.txt','      SUBROUTINE DSPGVD( ITYPE, JOBZ, UPLO, N, AP, BP, W, Z, LDZ, WORK,\n     $                   LWORK, IWORK, LIWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ, UPLO\n      INTEGER            INFO, ITYPE, LDZ, LIWORK, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      DOUBLE PRECISION   AP( * ), BP( * ), W( * ), WORK( * ),\n     $                   Z( LDZ, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DSPGVD computes all the eigenvalues, and optionally, the eigenvectors\n*  of a real generalized symmetric-definite eigenproblem, of the form\n*  A*x=(lambda)*B*x,  A*Bx=(lambda)*x,  or B*A*x=(lambda)*x.  Here A and\n*  B are assumed to be symmetric, stored in packed format, and B is also\n*  positive definite.\n*  If eigenvectors are desired, it uses a divide and conquer algorithm.\n*\n*  The divide and conquer algorithm makes very mild assumptions about\n*  floating point arithmetic. It will work on machines with a guard\n*  digit in add/subtract, or on those binary machines without guard\n*  digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\n*  Cray-2. It could conceivably fail on hexadecimal or decimal machines\n*  without guard digits, but we know of none.\n*\n*  Arguments\n*  =========\n*\n*  ITYPE   (input) INTEGER\n*          Specifies the problem type to be solved:\n*          = 1:  A*x = (lambda)*B*x\n*          = 2:  A*B*x = (lambda)*x\n*          = 3:  B*A*x = (lambda)*x\n*\n*  JOBZ    (input) CHARACTER*1\n*          = \'N\':  Compute eigenvalues only;\n*          = \'V\':  Compute eigenvalues and eigenvectors.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangles of A and B are stored;\n*          = \'L\':  Lower triangles of A and B are stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A and B.  N >= 0.\n*\n*  AP      (input/output) DOUBLE PRECISION array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the symmetric matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*\n*          On exit, the contents of AP are destroyed.\n*\n*  BP      (input/output) DOUBLE PRECISION array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the symmetric matrix\n*          B, packed columnwise in a linear array.  The j-th column of B\n*          is stored in the array BP as follows:\n*          if UPLO = \'U\', BP(i + (j-1)*j/2) = B(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', BP(i + (j-1)*(2*n-j)/2) = B(i,j) for j<=i<=n.\n*\n*          On exit, the triangular factor U or L from the Cholesky\n*          factorization B = U**T*U or B = L*L**T, in the same storage\n*          format as B.\n*\n*  W       (output) DOUBLE PRECISION array, dimension (N)\n*          If INFO = 0, the eigenvalues in ascending order.\n*\n*  Z       (output) DOUBLE PRECISION array, dimension (LDZ, N)\n*          If JOBZ = \'V\', then if INFO = 0, Z contains the matrix Z of\n*          eigenvectors.  The eigenvectors are normalized as follows:\n*          if ITYPE = 1 or 2, Z**T*B*Z = I;\n*          if ITYPE = 3, Z**T*inv(B)*Z = I.\n*          If JOBZ = \'N\', then Z is not referenced.\n*\n*  LDZ     (input) INTEGER\n*          The leading dimension of the array Z.  LDZ >= 1, and if\n*          JOBZ = \'V\', LDZ >= max(1,N).\n*\n*  WORK    (workspace/output) DOUBLE PRECISION array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the required LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.\n*          If N <= 1,               LWORK >= 1.\n*          If JOBZ = \'N\' and N > 1, LWORK >= 2*N.\n*          If JOBZ = \'V\' and N > 1, LWORK >= 1 + 6*N + 2*N**2.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the required sizes of the WORK and IWORK\n*          arrays, returns these values as the first entries of the WORK\n*          and IWORK arrays, and no error message related to LWORK or\n*          LIWORK is issued by XERBLA.\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (MAX(1,LIWORK))\n*          On exit, if INFO = 0, IWORK(1) returns the required LIWORK.\n*\n*  LIWORK  (input) INTEGER\n*          The dimension of the array IWORK.\n*          If JOBZ  = \'N\' or N <= 1, LIWORK >= 1.\n*          If JOBZ  = \'V\' and N > 1, LIWORK >= 3 + 5*N.\n*\n*          If LIWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the required sizes of the WORK and\n*          IWORK arrays, returns these values as the first entries of\n*          the WORK and IWORK arrays, and no error message related to\n*          LWORK or LIWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  DPPTRF or DSPEVD returned an error code:\n*             <= N:  if INFO = i, DSPEVD failed to converge;\n*                    i off-diagonal elements of an intermediate\n*                    tridiagonal form did not converge to zero;\n*             > N:   if INFO = N + i, for 1 <= i <= N, then the leading\n*                    minor of order i of B is not positive definite.\n*                    The factorization of B could not be completed and\n*                    no eigenvalues or eigenvectors were computed.\n*\n'),(189,'sgeev_189.txt','      SUBROUTINE SGEEV( JOBVL, JOBVR, N, A, LDA, WR, WI, VL, LDVL, VR,\n     $                  LDVR, WORK, LWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBVL, JOBVR\n      INTEGER            INFO, LDA, LDVL, LDVR, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      REAL               A( LDA, * ), VL( LDVL, * ), VR( LDVR, * ),\n     $                   WI( * ), WORK( * ), WR( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SGEEV computes for an N-by-N real nonsymmetric matrix A, the\n*  eigenvalues and, optionally, the left and/or right eigenvectors.\n*\n*  The right eigenvector v(j) of A satisfies\n*                   A * v(j) = lambda(j) * v(j)\n*  where lambda(j) is its eigenvalue.\n*  The left eigenvector u(j) of A satisfies\n*                u(j)**T * A = lambda(j) * u(j)**T\n*  where u(j)**T denotes the transpose of u(j).\n*\n*  The computed eigenvectors are normalized to have Euclidean norm\n*  equal to 1 and largest component real.\n*\n*  Arguments\n*  =========\n*\n*  JOBVL   (input) CHARACTER*1\n*          = \'N\': left eigenvectors of A are not computed;\n*          = \'V\': left eigenvectors of A are computed.\n*\n*  JOBVR   (input) CHARACTER*1\n*          = \'N\': right eigenvectors of A are not computed;\n*          = \'V\': right eigenvectors of A are computed.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A. N >= 0.\n*\n*  A       (input/output) REAL array, dimension (LDA,N)\n*          On entry, the N-by-N matrix A.\n*          On exit, A has been overwritten.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  WR      (output) REAL array, dimension (N)\n*  WI      (output) REAL array, dimension (N)\n*          WR and WI contain the real and imaginary parts,\n*          respectively, of the computed eigenvalues.  Complex\n*          conjugate pairs of eigenvalues appear consecutively\n*          with the eigenvalue having the positive imaginary part\n*          first.\n*\n*  VL      (output) REAL array, dimension (LDVL,N)\n*          If JOBVL = \'V\', the left eigenvectors u(j) are stored one\n*          after another in the columns of VL, in the same order\n*          as their eigenvalues.\n*          If JOBVL = \'N\', VL is not referenced.\n*          If the j-th eigenvalue is real, then u(j) = VL(:,j),\n*          the j-th column of VL.\n*          If the j-th and (j+1)-st eigenvalues form a complex\n*          conjugate pair, then u(j) = VL(:,j) + i*VL(:,j+1) and\n*          u(j+1) = VL(:,j) - i*VL(:,j+1).\n*\n*  LDVL    (input) INTEGER\n*          The leading dimension of the array VL.  LDVL >= 1; if\n*          JOBVL = \'V\', LDVL >= N.\n*\n*  VR      (output) REAL array, dimension (LDVR,N)\n*          If JOBVR = \'V\', the right eigenvectors v(j) are stored one\n*          after another in the columns of VR, in the same order\n*          as their eigenvalues.\n*          If JOBVR = \'N\', VR is not referenced.\n*          If the j-th eigenvalue is real, then v(j) = VR(:,j),\n*          the j-th column of VR.\n*          If the j-th and (j+1)-st eigenvalues form a complex\n*          conjugate pair, then v(j) = VR(:,j) + i*VR(:,j+1) and\n*          v(j+1) = VR(:,j) - i*VR(:,j+1).\n*\n*  LDVR    (input) INTEGER\n*          The leading dimension of the array VR.  LDVR >= 1; if\n*          JOBVR = \'V\', LDVR >= N.\n*\n*  WORK    (workspace/output) REAL array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.  LWORK >= max(1,3*N), and\n*          if JOBVL = \'V\' or JOBVR = \'V\', LWORK >= 4*N.  For good\n*          performance, LWORK must generally be larger.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  if INFO = i, the QR algorithm failed to compute all the\n*                eigenvalues, and no eigenvectors have been computed;\n*                elements i+1:N of WR and WI contain eigenvalues which\n*                have converged.\n*\n'),(190,'dgeev_190.txt','      SUBROUTINE DGEEV( JOBVL, JOBVR, N, A, LDA, WR, WI, VL, LDVL, VR,\n     $                  LDVR, WORK, LWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBVL, JOBVR\n      INTEGER            INFO, LDA, LDVL, LDVR, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   A( LDA, * ), VL( LDVL, * ), VR( LDVR, * ),\n     $                   WI( * ), WORK( * ), WR( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DGEEV computes for an N-by-N real nonsymmetric matrix A, the\n*  eigenvalues and, optionally, the left and/or right eigenvectors.\n*\n*  The right eigenvector v(j) of A satisfies\n*                   A * v(j) = lambda(j) * v(j)\n*  where lambda(j) is its eigenvalue.\n*  The left eigenvector u(j) of A satisfies\n*                u(j)**T * A = lambda(j) * u(j)**T\n*  where u(j)**T denotes the transpose of u(j).\n*\n*  The computed eigenvectors are normalized to have Euclidean norm\n*  equal to 1 and largest component real.\n*\n*  Arguments\n*  =========\n*\n*  JOBVL   (input) CHARACTER*1\n*          = \'N\': left eigenvectors of A are not computed;\n*          = \'V\': left eigenvectors of A are computed.\n*\n*  JOBVR   (input) CHARACTER*1\n*          = \'N\': right eigenvectors of A are not computed;\n*          = \'V\': right eigenvectors of A are computed.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A. N >= 0.\n*\n*  A       (input/output) DOUBLE PRECISION array, dimension (LDA,N)\n*          On entry, the N-by-N matrix A.\n*          On exit, A has been overwritten.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  WR      (output) DOUBLE PRECISION array, dimension (N)\n*  WI      (output) DOUBLE PRECISION array, dimension (N)\n*          WR and WI contain the real and imaginary parts,\n*          respectively, of the computed eigenvalues.  Complex\n*          conjugate pairs of eigenvalues appear consecutively\n*          with the eigenvalue having the positive imaginary part\n*          first.\n*\n*  VL      (output) DOUBLE PRECISION array, dimension (LDVL,N)\n*          If JOBVL = \'V\', the left eigenvectors u(j) are stored one\n*          after another in the columns of VL, in the same order\n*          as their eigenvalues.\n*          If JOBVL = \'N\', VL is not referenced.\n*          If the j-th eigenvalue is real, then u(j) = VL(:,j),\n*          the j-th column of VL.\n*          If the j-th and (j+1)-st eigenvalues form a complex\n*          conjugate pair, then u(j) = VL(:,j) + i*VL(:,j+1) and\n*          u(j+1) = VL(:,j) - i*VL(:,j+1).\n*\n*  LDVL    (input) INTEGER\n*          The leading dimension of the array VL.  LDVL >= 1; if\n*          JOBVL = \'V\', LDVL >= N.\n*\n*  VR      (output) DOUBLE PRECISION array, dimension (LDVR,N)\n*          If JOBVR = \'V\', the right eigenvectors v(j) are stored one\n*          after another in the columns of VR, in the same order\n*          as their eigenvalues.\n*          If JOBVR = \'N\', VR is not referenced.\n*          If the j-th eigenvalue is real, then v(j) = VR(:,j),\n*          the j-th column of VR.\n*          If the j-th and (j+1)-st eigenvalues form a complex\n*          conjugate pair, then v(j) = VR(:,j) + i*VR(:,j+1) and\n*          v(j+1) = VR(:,j) - i*VR(:,j+1).\n*\n*  LDVR    (input) INTEGER\n*          The leading dimension of the array VR.  LDVR >= 1; if\n*          JOBVR = \'V\', LDVR >= N.\n*\n*  WORK    (workspace/output) DOUBLE PRECISION array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.  LWORK >= max(1,3*N), and\n*          if JOBVL = \'V\' or JOBVR = \'V\', LWORK >= 4*N.  For good\n*          performance, LWORK must generally be larger.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  if INFO = i, the QR algorithm failed to compute all the\n*                eigenvalues, and no eigenvectors have been computed;\n*                elements i+1:N of WR and WI contain eigenvalues which\n*                have converged.\n*\n'),(191,'cgeev_191.txt','      SUBROUTINE CGEEV( JOBVL, JOBVR, N, A, LDA, W, VL, LDVL, VR, LDVR,\n     $                  WORK, LWORK, RWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBVL, JOBVR\n      INTEGER            INFO, LDA, LDVL, LDVR, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      REAL               RWORK( * )\n      COMPLEX            A( LDA, * ), VL( LDVL, * ), VR( LDVR, * ),\n     $                   W( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CGEEV computes for an N-by-N complex nonsymmetric matrix A, the\n*  eigenvalues and, optionally, the left and/or right eigenvectors.\n*\n*  The right eigenvector v(j) of A satisfies\n*                   A * v(j) = lambda(j) * v(j)\n*  where lambda(j) is its eigenvalue.\n*  The left eigenvector u(j) of A satisfies\n*                u(j)**H * A = lambda(j) * u(j)**H\n*  where u(j)**H denotes the conjugate transpose of u(j).\n*\n*  The computed eigenvectors are normalized to have Euclidean norm\n*  equal to 1 and largest component real.\n*\n*  Arguments\n*  =========\n*\n*  JOBVL   (input) CHARACTER*1\n*          = \'N\': left eigenvectors of A are not computed;\n*          = \'V\': left eigenvectors of are computed.\n*\n*  JOBVR   (input) CHARACTER*1\n*          = \'N\': right eigenvectors of A are not computed;\n*          = \'V\': right eigenvectors of A are computed.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A. N >= 0.\n*\n*  A       (input/output) COMPLEX array, dimension (LDA,N)\n*          On entry, the N-by-N matrix A.\n*          On exit, A has been overwritten.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  W       (output) COMPLEX array, dimension (N)\n*          W contains the computed eigenvalues.\n*\n*  VL      (output) COMPLEX array, dimension (LDVL,N)\n*          If JOBVL = \'V\', the left eigenvectors u(j) are stored one\n*          after another in the columns of VL, in the same order\n*          as their eigenvalues.\n*          If JOBVL = \'N\', VL is not referenced.\n*          u(j) = VL(:,j), the j-th column of VL.\n*\n*  LDVL    (input) INTEGER\n*          The leading dimension of the array VL.  LDVL >= 1; if\n*          JOBVL = \'V\', LDVL >= N.\n*\n*  VR      (output) COMPLEX array, dimension (LDVR,N)\n*          If JOBVR = \'V\', the right eigenvectors v(j) are stored one\n*          after another in the columns of VR, in the same order\n*          as their eigenvalues.\n*          If JOBVR = \'N\', VR is not referenced.\n*          v(j) = VR(:,j), the j-th column of VR.\n*\n*  LDVR    (input) INTEGER\n*          The leading dimension of the array VR.  LDVR >= 1; if\n*          JOBVR = \'V\', LDVR >= N.\n*\n*  WORK    (workspace/output) COMPLEX array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.  LWORK >= max(1,2*N).\n*          For good performance, LWORK must generally be larger.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  RWORK   (workspace) REAL array, dimension (2*N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  if INFO = i, the QR algorithm failed to compute all the\n*                eigenvalues, and no eigenvectors have been computed;\n*                elements and i+1:N of W contain eigenvalues which have\n*                converged.\n*\n'),(192,'zgeev_192.txt','      SUBROUTINE ZGEEV( JOBVL, JOBVR, N, A, LDA, W, VL, LDVL, VR, LDVR,\n     $                  WORK, LWORK, RWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBVL, JOBVR\n      INTEGER            INFO, LDA, LDVL, LDVR, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   RWORK( * )\n      COMPLEX*16         A( LDA, * ), VL( LDVL, * ), VR( LDVR, * ),\n     $                   W( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZGEEV computes for an N-by-N complex nonsymmetric matrix A, the\n*  eigenvalues and, optionally, the left and/or right eigenvectors.\n*\n*  The right eigenvector v(j) of A satisfies\n*                   A * v(j) = lambda(j) * v(j)\n*  where lambda(j) is its eigenvalue.\n*  The left eigenvector u(j) of A satisfies\n*                u(j)**H * A = lambda(j) * u(j)**H\n*  where u(j)**H denotes the conjugate transpose of u(j).\n*\n*  The computed eigenvectors are normalized to have Euclidean norm\n*  equal to 1 and largest component real.\n*\n*  Arguments\n*  =========\n*\n*  JOBVL   (input) CHARACTER*1\n*          = \'N\': left eigenvectors of A are not computed;\n*          = \'V\': left eigenvectors of are computed.\n*\n*  JOBVR   (input) CHARACTER*1\n*          = \'N\': right eigenvectors of A are not computed;\n*          = \'V\': right eigenvectors of A are computed.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A. N >= 0.\n*\n*  A       (input/output) COMPLEX*16 array, dimension (LDA,N)\n*          On entry, the N-by-N matrix A.\n*          On exit, A has been overwritten.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  W       (output) COMPLEX*16 array, dimension (N)\n*          W contains the computed eigenvalues.\n*\n*  VL      (output) COMPLEX*16 array, dimension (LDVL,N)\n*          If JOBVL = \'V\', the left eigenvectors u(j) are stored one\n*          after another in the columns of VL, in the same order\n*          as their eigenvalues.\n*          If JOBVL = \'N\', VL is not referenced.\n*          u(j) = VL(:,j), the j-th column of VL.\n*\n*  LDVL    (input) INTEGER\n*          The leading dimension of the array VL.  LDVL >= 1; if\n*          JOBVL = \'V\', LDVL >= N.\n*\n*  VR      (output) COMPLEX*16 array, dimension (LDVR,N)\n*          If JOBVR = \'V\', the right eigenvectors v(j) are stored one\n*          after another in the columns of VR, in the same order\n*          as their eigenvalues.\n*          If JOBVR = \'N\', VR is not referenced.\n*          v(j) = VR(:,j), the j-th column of VR.\n*\n*  LDVR    (input) INTEGER\n*          The leading dimension of the array VR.  LDVR >= 1; if\n*          JOBVR = \'V\', LDVR >= N.\n*\n*  WORK    (workspace/output) COMPLEX*16 array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.  LWORK >= max(1,2*N).\n*          For good performance, LWORK must generally be larger.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (2*N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  if INFO = i, the QR algorithm failed to compute all the\n*                eigenvalues, and no eigenvectors have been computed;\n*                elements and i+1:N of W contain eigenvalues which have\n*                converged.\n*\n'),(193,'sgeevx_193.txt','      SUBROUTINE SGEEVX( BALANC, JOBVL, JOBVR, SENSE, N, A, LDA, WR, WI,\n     $                   VL, LDVL, VR, LDVR, ILO, IHI, SCALE, ABNRM,\n     $                   RCONDE, RCONDV, WORK, LWORK, IWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          BALANC, JOBVL, JOBVR, SENSE\n      INTEGER            IHI, ILO, INFO, LDA, LDVL, LDVR, LWORK, N\n      REAL               ABNRM\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      REAL               A( LDA, * ), RCONDE( * ), RCONDV( * ),\n     $                   SCALE( * ), VL( LDVL, * ), VR( LDVR, * ),\n     $                   WI( * ), WORK( * ), WR( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SGEEVX computes for an N-by-N real nonsymmetric matrix A, the\n*  eigenvalues and, optionally, the left and/or right eigenvectors.\n*\n*  Optionally also, it computes a balancing transformation to improve\n*  the conditioning of the eigenvalues and eigenvectors (ILO, IHI,\n*  SCALE, and ABNRM), reciprocal condition numbers for the eigenvalues\n*  (RCONDE), and reciprocal condition numbers for the right\n*  eigenvectors (RCONDV).\n*\n*  The right eigenvector v(j) of A satisfies\n*                   A * v(j) = lambda(j) * v(j)\n*  where lambda(j) is its eigenvalue.\n*  The left eigenvector u(j) of A satisfies\n*                u(j)**T * A = lambda(j) * u(j)**T\n*  where u(j)**T denotes the transpose of u(j).\n*\n*  The computed eigenvectors are normalized to have Euclidean norm\n*  equal to 1 and largest component real.\n*\n*  Balancing a matrix means permuting the rows and columns to make it\n*  more nearly upper triangular, and applying a diagonal similarity\n*  transformation D * A * D**(-1), where D is a diagonal matrix, to\n*  make its rows and columns closer in norm and the condition numbers\n*  of its eigenvalues and eigenvectors smaller.  The computed\n*  reciprocal condition numbers correspond to the balanced matrix.\n*  Permuting rows and columns will not change the condition numbers\n*  (in exact arithmetic) but diagonal scaling will.  For further\n*  explanation of balancing, see section 4.10.2 of the LAPACK\n*  Users\' Guide.\n*\n*  Arguments\n*  =========\n*\n*  BALANC  (input) CHARACTER*1\n*          Indicates how the input matrix should be diagonally scaled\n*          and/or permuted to improve the conditioning of its\n*          eigenvalues.\n*          = \'N\': Do not diagonally scale or permute;\n*          = \'P\': Perform permutations to make the matrix more nearly\n*                 upper triangular. Do not diagonally scale;\n*          = \'S\': Diagonally scale the matrix, i.e. replace A by\n*                 D*A*D**(-1), where D is a diagonal matrix chosen\n*                 to make the rows and columns of A more equal in\n*                 norm. Do not permute;\n*          = \'B\': Both diagonally scale and permute A.\n*\n*          Computed reciprocal condition numbers will be for the matrix\n*          after balancing and/or permuting. Permuting does not change\n*          condition numbers (in exact arithmetic), but balancing does.\n*\n*  JOBVL   (input) CHARACTER*1\n*          = \'N\': left eigenvectors of A are not computed;\n*          = \'V\': left eigenvectors of A are computed.\n*          If SENSE = \'E\' or \'B\', JOBVL must = \'V\'.\n*\n*  JOBVR   (input) CHARACTER*1\n*          = \'N\': right eigenvectors of A are not computed;\n*          = \'V\': right eigenvectors of A are computed.\n*          If SENSE = \'E\' or \'B\', JOBVR must = \'V\'.\n*\n*  SENSE   (input) CHARACTER*1\n*          Determines which reciprocal condition numbers are computed.\n*          = \'N\': None are computed;\n*          = \'E\': Computed for eigenvalues only;\n*          = \'V\': Computed for right eigenvectors only;\n*          = \'B\': Computed for eigenvalues and right eigenvectors.\n*\n*          If SENSE = \'E\' or \'B\', both left and right eigenvectors\n*          must also be computed (JOBVL = \'V\' and JOBVR = \'V\').\n*\n*  N       (input) INTEGER\n*          The order of the matrix A. N >= 0.\n*\n*  A       (input/output) REAL array, dimension (LDA,N)\n*          On entry, the N-by-N matrix A.\n*          On exit, A has been overwritten.  If JOBVL = \'V\' or\n*          JOBVR = \'V\', A contains the real Schur form of the balanced\n*          version of the input matrix A.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  WR      (output) REAL array, dimension (N)\n*  WI      (output) REAL array, dimension (N)\n*          WR and WI contain the real and imaginary parts,\n*          respectively, of the computed eigenvalues.  Complex\n*          conjugate pairs of eigenvalues will appear consecutively\n*          with the eigenvalue having the positive imaginary part\n*          first.\n*\n*  VL      (output) REAL array, dimension (LDVL,N)\n*          If JOBVL = \'V\', the left eigenvectors u(j) are stored one\n*          after another in the columns of VL, in the same order\n*          as their eigenvalues.\n*          If JOBVL = \'N\', VL is not referenced.\n*          If the j-th eigenvalue is real, then u(j) = VL(:,j),\n*          the j-th column of VL.\n*          If the j-th and (j+1)-st eigenvalues form a complex\n*          conjugate pair, then u(j) = VL(:,j) + i*VL(:,j+1) and\n*          u(j+1) = VL(:,j) - i*VL(:,j+1).\n*\n*  LDVL    (input) INTEGER\n*          The leading dimension of the array VL.  LDVL >= 1; if\n*          JOBVL = \'V\', LDVL >= N.\n*\n*  VR      (output) REAL array, dimension (LDVR,N)\n*          If JOBVR = \'V\', the right eigenvectors v(j) are stored one\n*          after another in the columns of VR, in the same order\n*          as their eigenvalues.\n*          If JOBVR = \'N\', VR is not referenced.\n*          If the j-th eigenvalue is real, then v(j) = VR(:,j),\n*          the j-th column of VR.\n*          If the j-th and (j+1)-st eigenvalues form a complex\n*          conjugate pair, then v(j) = VR(:,j) + i*VR(:,j+1) and\n*          v(j+1) = VR(:,j) - i*VR(:,j+1).\n*\n*  LDVR    (input) INTEGER\n*          The leading dimension of the array VR.  LDVR >= 1, and if\n*          JOBVR = \'V\', LDVR >= N.\n*\n*  ILO     (output) INTEGER\n*  IHI     (output) INTEGER\n*          ILO and IHI are integer values determined when A was\n*          balanced.  The balanced A(i,j) = 0 if I > J and \n*          J = 1,...,ILO-1 or I = IHI+1,...,N.\n*\n*  SCALE   (output) REAL array, dimension (N)\n*          Details of the permutations and scaling factors applied\n*          when balancing A.  If P(j) is the index of the row and column\n*          interchanged with row and column j, and D(j) is the scaling\n*          factor applied to row and column j, then\n*          SCALE(J) = P(J),    for J = 1,...,ILO-1\n*                   = D(J),    for J = ILO,...,IHI\n*                   = P(J)     for J = IHI+1,...,N.\n*          The order in which the interchanges are made is N to IHI+1,\n*          then 1 to ILO-1.\n*\n*  ABNRM   (output) REAL\n*          The one-norm of the balanced matrix (the maximum\n*          of the sum of absolute values of elements of any column).\n*\n*  RCONDE  (output) REAL array, dimension (N)\n*          RCONDE(j) is the reciprocal condition number of the j-th\n*          eigenvalue.\n*\n*  RCONDV  (output) REAL array, dimension (N)\n*          RCONDV(j) is the reciprocal condition number of the j-th\n*          right eigenvector.\n*\n*  WORK    (workspace/output) REAL array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.   If SENSE = \'N\' or \'E\',\n*          LWORK >= max(1,2*N), and if JOBVL = \'V\' or JOBVR = \'V\',\n*          LWORK >= 3*N.  If SENSE = \'V\' or \'B\', LWORK >= N*(N+6).\n*          For good performance, LWORK must generally be larger.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  IWORK   (workspace) INTEGER array, dimension (2*N-2)\n*          If SENSE = \'N\' or \'E\', not referenced.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  if INFO = i, the QR algorithm failed to compute all the\n*                eigenvalues, and no eigenvectors or condition numbers\n*                have been computed; elements 1:ILO-1 and i+1:N of WR\n*                and WI contain eigenvalues which have converged.\n*\n'),(194,'dgeevx_194.txt','      SUBROUTINE DGEEVX( BALANC, JOBVL, JOBVR, SENSE, N, A, LDA, WR, WI,\n     $                   VL, LDVL, VR, LDVR, ILO, IHI, SCALE, ABNRM,\n     $                   RCONDE, RCONDV, WORK, LWORK, IWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          BALANC, JOBVL, JOBVR, SENSE\n      INTEGER            IHI, ILO, INFO, LDA, LDVL, LDVR, LWORK, N\n      DOUBLE PRECISION   ABNRM\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      DOUBLE PRECISION   A( LDA, * ), RCONDE( * ), RCONDV( * ),\n     $                   SCALE( * ), VL( LDVL, * ), VR( LDVR, * ),\n     $                   WI( * ), WORK( * ), WR( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DGEEVX computes for an N-by-N real nonsymmetric matrix A, the\n*  eigenvalues and, optionally, the left and/or right eigenvectors.\n*\n*  Optionally also, it computes a balancing transformation to improve\n*  the conditioning of the eigenvalues and eigenvectors (ILO, IHI,\n*  SCALE, and ABNRM), reciprocal condition numbers for the eigenvalues\n*  (RCONDE), and reciprocal condition numbers for the right\n*  eigenvectors (RCONDV).\n*\n*  The right eigenvector v(j) of A satisfies\n*                   A * v(j) = lambda(j) * v(j)\n*  where lambda(j) is its eigenvalue.\n*  The left eigenvector u(j) of A satisfies\n*                u(j)**T * A = lambda(j) * u(j)**T\n*  where u(j)**T denotes the transpose of u(j).\n*\n*  The computed eigenvectors are normalized to have Euclidean norm\n*  equal to 1 and largest component real.\n*\n*  Balancing a matrix means permuting the rows and columns to make it\n*  more nearly upper triangular, and applying a diagonal similarity\n*  transformation D * A * D**(-1), where D is a diagonal matrix, to\n*  make its rows and columns closer in norm and the condition numbers\n*  of its eigenvalues and eigenvectors smaller.  The computed\n*  reciprocal condition numbers correspond to the balanced matrix.\n*  Permuting rows and columns will not change the condition numbers\n*  (in exact arithmetic) but diagonal scaling will.  For further\n*  explanation of balancing, see section 4.10.2 of the LAPACK\n*  Users\' Guide.\n*\n*  Arguments\n*  =========\n*\n*  BALANC  (input) CHARACTER*1\n*          Indicates how the input matrix should be diagonally scaled\n*          and/or permuted to improve the conditioning of its\n*          eigenvalues.\n*          = \'N\': Do not diagonally scale or permute;\n*          = \'P\': Perform permutations to make the matrix more nearly\n*                 upper triangular. Do not diagonally scale;\n*          = \'S\': Diagonally scale the matrix, i.e. replace A by\n*                 D*A*D**(-1), where D is a diagonal matrix chosen\n*                 to make the rows and columns of A more equal in\n*                 norm. Do not permute;\n*          = \'B\': Both diagonally scale and permute A.\n*\n*          Computed reciprocal condition numbers will be for the matrix\n*          after balancing and/or permuting. Permuting does not change\n*          condition numbers (in exact arithmetic), but balancing does.\n*\n*  JOBVL   (input) CHARACTER*1\n*          = \'N\': left eigenvectors of A are not computed;\n*          = \'V\': left eigenvectors of A are computed.\n*          If SENSE = \'E\' or \'B\', JOBVL must = \'V\'.\n*\n*  JOBVR   (input) CHARACTER*1\n*          = \'N\': right eigenvectors of A are not computed;\n*          = \'V\': right eigenvectors of A are computed.\n*          If SENSE = \'E\' or \'B\', JOBVR must = \'V\'.\n*\n*  SENSE   (input) CHARACTER*1\n*          Determines which reciprocal condition numbers are computed.\n*          = \'N\': None are computed;\n*          = \'E\': Computed for eigenvalues only;\n*          = \'V\': Computed for right eigenvectors only;\n*          = \'B\': Computed for eigenvalues and right eigenvectors.\n*\n*          If SENSE = \'E\' or \'B\', both left and right eigenvectors\n*          must also be computed (JOBVL = \'V\' and JOBVR = \'V\').\n*\n*  N       (input) INTEGER\n*          The order of the matrix A. N >= 0.\n*\n*  A       (input/output) DOUBLE PRECISION array, dimension (LDA,N)\n*          On entry, the N-by-N matrix A.\n*          On exit, A has been overwritten.  If JOBVL = \'V\' or\n*          JOBVR = \'V\', A contains the real Schur form of the balanced\n*          version of the input matrix A.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  WR      (output) DOUBLE PRECISION array, dimension (N)\n*  WI      (output) DOUBLE PRECISION array, dimension (N)\n*          WR and WI contain the real and imaginary parts,\n*          respectively, of the computed eigenvalues.  Complex\n*          conjugate pairs of eigenvalues will appear consecutively\n*          with the eigenvalue having the positive imaginary part\n*          first.\n*\n*  VL      (output) DOUBLE PRECISION array, dimension (LDVL,N)\n*          If JOBVL = \'V\', the left eigenvectors u(j) are stored one\n*          after another in the columns of VL, in the same order\n*          as their eigenvalues.\n*          If JOBVL = \'N\', VL is not referenced.\n*          If the j-th eigenvalue is real, then u(j) = VL(:,j),\n*          the j-th column of VL.\n*          If the j-th and (j+1)-st eigenvalues form a complex\n*          conjugate pair, then u(j) = VL(:,j) + i*VL(:,j+1) and\n*          u(j+1) = VL(:,j) - i*VL(:,j+1).\n*\n*  LDVL    (input) INTEGER\n*          The leading dimension of the array VL.  LDVL >= 1; if\n*          JOBVL = \'V\', LDVL >= N.\n*\n*  VR      (output) DOUBLE PRECISION array, dimension (LDVR,N)\n*          If JOBVR = \'V\', the right eigenvectors v(j) are stored one\n*          after another in the columns of VR, in the same order\n*          as their eigenvalues.\n*          If JOBVR = \'N\', VR is not referenced.\n*          If the j-th eigenvalue is real, then v(j) = VR(:,j),\n*          the j-th column of VR.\n*          If the j-th and (j+1)-st eigenvalues form a complex\n*          conjugate pair, then v(j) = VR(:,j) + i*VR(:,j+1) and\n*          v(j+1) = VR(:,j) - i*VR(:,j+1).\n*\n*  LDVR    (input) INTEGER\n*          The leading dimension of the array VR.  LDVR >= 1, and if\n*          JOBVR = \'V\', LDVR >= N.\n*\n*  ILO     (output) INTEGER\n*  IHI     (output) INTEGER\n*          ILO and IHI are integer values determined when A was\n*          balanced.  The balanced A(i,j) = 0 if I > J and\n*          J = 1,...,ILO-1 or I = IHI+1,...,N.\n*\n*  SCALE   (output) DOUBLE PRECISION array, dimension (N)\n*          Details of the permutations and scaling factors applied\n*          when balancing A.  If P(j) is the index of the row and column\n*          interchanged with row and column j, and D(j) is the scaling\n*          factor applied to row and column j, then\n*          SCALE(J) = P(J),    for J = 1,...,ILO-1\n*                   = D(J),    for J = ILO,...,IHI\n*                   = P(J)     for J = IHI+1,...,N.\n*          The order in which the interchanges are made is N to IHI+1,\n*          then 1 to ILO-1.\n*\n*  ABNRM   (output) DOUBLE PRECISION\n*          The one-norm of the balanced matrix (the maximum\n*          of the sum of absolute values of elements of any column).\n*\n*  RCONDE  (output) DOUBLE PRECISION array, dimension (N)\n*          RCONDE(j) is the reciprocal condition number of the j-th\n*          eigenvalue.\n*\n*  RCONDV  (output) DOUBLE PRECISION array, dimension (N)\n*          RCONDV(j) is the reciprocal condition number of the j-th\n*          right eigenvector.\n*\n*  WORK    (workspace/output) DOUBLE PRECISION array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.   If SENSE = \'N\' or \'E\',\n*          LWORK >= max(1,2*N), and if JOBVL = \'V\' or JOBVR = \'V\',\n*          LWORK >= 3*N.  If SENSE = \'V\' or \'B\', LWORK >= N*(N+6).\n*          For good performance, LWORK must generally be larger.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  IWORK   (workspace) INTEGER array, dimension (2*N-2)\n*          If SENSE = \'N\' or \'E\', not referenced.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  if INFO = i, the QR algorithm failed to compute all the\n*                eigenvalues, and no eigenvectors or condition numbers\n*                have been computed; elements 1:ILO-1 and i+1:N of WR\n*                and WI contain eigenvalues which have converged.\n*\n'),(195,'cgeevx_195.txt','      SUBROUTINE CGEEVX( BALANC, JOBVL, JOBVR, SENSE, N, A, LDA, W, VL,\n     $                   LDVL, VR, LDVR, ILO, IHI, SCALE, ABNRM, RCONDE,\n     $                   RCONDV, WORK, LWORK, RWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          BALANC, JOBVL, JOBVR, SENSE\n      INTEGER            IHI, ILO, INFO, LDA, LDVL, LDVR, LWORK, N\n      REAL               ABNRM\n*     ..\n*     .. Array Arguments ..\n      REAL               RCONDE( * ), RCONDV( * ), RWORK( * ),\n     $                   SCALE( * )\n      COMPLEX            A( LDA, * ), VL( LDVL, * ), VR( LDVR, * ),\n     $                   W( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CGEEVX computes for an N-by-N complex nonsymmetric matrix A, the\n*  eigenvalues and, optionally, the left and/or right eigenvectors.\n*\n*  Optionally also, it computes a balancing transformation to improve\n*  the conditioning of the eigenvalues and eigenvectors (ILO, IHI,\n*  SCALE, and ABNRM), reciprocal condition numbers for the eigenvalues\n*  (RCONDE), and reciprocal condition numbers for the right\n*  eigenvectors (RCONDV).\n*\n*  The right eigenvector v(j) of A satisfies\n*                   A * v(j) = lambda(j) * v(j)\n*  where lambda(j) is its eigenvalue.\n*  The left eigenvector u(j) of A satisfies\n*                u(j)**H * A = lambda(j) * u(j)**H\n*  where u(j)**H denotes the conjugate transpose of u(j).\n*\n*  The computed eigenvectors are normalized to have Euclidean norm\n*  equal to 1 and largest component real.\n*\n*  Balancing a matrix means permuting the rows and columns to make it\n*  more nearly upper triangular, and applying a diagonal similarity\n*  transformation D * A * D**(-1), where D is a diagonal matrix, to\n*  make its rows and columns closer in norm and the condition numbers\n*  of its eigenvalues and eigenvectors smaller.  The computed\n*  reciprocal condition numbers correspond to the balanced matrix.\n*  Permuting rows and columns will not change the condition numbers\n*  (in exact arithmetic) but diagonal scaling will.  For further\n*  explanation of balancing, see section 4.10.2 of the LAPACK\n*  Users\' Guide.\n*\n*  Arguments\n*  =========\n*\n*  BALANC  (input) CHARACTER*1\n*          Indicates how the input matrix should be diagonally scaled\n*          and/or permuted to improve the conditioning of its\n*          eigenvalues.\n*          = \'N\': Do not diagonally scale or permute;\n*          = \'P\': Perform permutations to make the matrix more nearly\n*                 upper triangular. Do not diagonally scale;\n*          = \'S\': Diagonally scale the matrix, ie. replace A by\n*                 D*A*D**(-1), where D is a diagonal matrix chosen\n*                 to make the rows and columns of A more equal in\n*                 norm. Do not permute;\n*          = \'B\': Both diagonally scale and permute A.\n*\n*          Computed reciprocal condition numbers will be for the matrix\n*          after balancing and/or permuting. Permuting does not change\n*          condition numbers (in exact arithmetic), but balancing does.\n*\n*  JOBVL   (input) CHARACTER*1\n*          = \'N\': left eigenvectors of A are not computed;\n*          = \'V\': left eigenvectors of A are computed.\n*          If SENSE = \'E\' or \'B\', JOBVL must = \'V\'.\n*\n*  JOBVR   (input) CHARACTER*1\n*          = \'N\': right eigenvectors of A are not computed;\n*          = \'V\': right eigenvectors of A are computed.\n*          If SENSE = \'E\' or \'B\', JOBVR must = \'V\'.\n*\n*  SENSE   (input) CHARACTER*1\n*          Determines which reciprocal condition numbers are computed.\n*          = \'N\': None are computed;\n*          = \'E\': Computed for eigenvalues only;\n*          = \'V\': Computed for right eigenvectors only;\n*          = \'B\': Computed for eigenvalues and right eigenvectors.\n*\n*          If SENSE = \'E\' or \'B\', both left and right eigenvectors\n*          must also be computed (JOBVL = \'V\' and JOBVR = \'V\').\n*\n*  N       (input) INTEGER\n*          The order of the matrix A. N >= 0.\n*\n*  A       (input/output) COMPLEX array, dimension (LDA,N)\n*          On entry, the N-by-N matrix A.\n*          On exit, A has been overwritten.  If JOBVL = \'V\' or\n*          JOBVR = \'V\', A contains the Schur form of the balanced \n*          version of the matrix A.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  W       (output) COMPLEX array, dimension (N)\n*          W contains the computed eigenvalues.\n*\n*  VL      (output) COMPLEX array, dimension (LDVL,N)\n*          If JOBVL = \'V\', the left eigenvectors u(j) are stored one\n*          after another in the columns of VL, in the same order\n*          as their eigenvalues.\n*          If JOBVL = \'N\', VL is not referenced.\n*          u(j) = VL(:,j), the j-th column of VL.\n*\n*  LDVL    (input) INTEGER\n*          The leading dimension of the array VL.  LDVL >= 1; if\n*          JOBVL = \'V\', LDVL >= N.\n*\n*  VR      (output) COMPLEX array, dimension (LDVR,N)\n*          If JOBVR = \'V\', the right eigenvectors v(j) are stored one\n*          after another in the columns of VR, in the same order\n*          as their eigenvalues.\n*          If JOBVR = \'N\', VR is not referenced.\n*          v(j) = VR(:,j), the j-th column of VR.\n*\n*  LDVR    (input) INTEGER\n*          The leading dimension of the array VR.  LDVR >= 1; if\n*          JOBVR = \'V\', LDVR >= N.\n*\n*  ILO     (output) INTEGER\n*  IHI     (output) INTEGER\n*          ILO and IHI are integer values determined when A was\n*          balanced.  The balanced A(i,j) = 0 if I > J and\n*          J = 1,...,ILO-1 or I = IHI+1,...,N.\n*\n*  SCALE   (output) REAL array, dimension (N)\n*          Details of the permutations and scaling factors applied\n*          when balancing A.  If P(j) is the index of the row and column\n*          interchanged with row and column j, and D(j) is the scaling\n*          factor applied to row and column j, then\n*          SCALE(J) = P(J),    for J = 1,...,ILO-1\n*                   = D(J),    for J = ILO,...,IHI\n*                   = P(J)     for J = IHI+1,...,N.\n*          The order in which the interchanges are made is N to IHI+1,\n*          then 1 to ILO-1.\n*\n*  ABNRM   (output) REAL\n*          The one-norm of the balanced matrix (the maximum\n*          of the sum of absolute values of elements of any column).\n*\n*  RCONDE  (output) REAL array, dimension (N)\n*          RCONDE(j) is the reciprocal condition number of the j-th\n*          eigenvalue.\n*\n*  RCONDV  (output) REAL array, dimension (N)\n*          RCONDV(j) is the reciprocal condition number of the j-th\n*          right eigenvector.\n*\n*  WORK    (workspace/output) COMPLEX array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.  If SENSE = \'N\' or \'E\',\n*          LWORK >= max(1,2*N), and if SENSE = \'V\' or \'B\',\n*          LWORK >= N*N+2*N.\n*          For good performance, LWORK must generally be larger.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  RWORK   (workspace) REAL array, dimension (2*N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  if INFO = i, the QR algorithm failed to compute all the\n*                eigenvalues, and no eigenvectors or condition numbers\n*                have been computed; elements 1:ILO-1 and i+1:N of W\n*                contain eigenvalues which have converged.\n*\n'),(196,'zgeevx_196.txt','      SUBROUTINE ZGEEVX( BALANC, JOBVL, JOBVR, SENSE, N, A, LDA, W, VL,\n     $                   LDVL, VR, LDVR, ILO, IHI, SCALE, ABNRM, RCONDE,\n     $                   RCONDV, WORK, LWORK, RWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          BALANC, JOBVL, JOBVR, SENSE\n      INTEGER            IHI, ILO, INFO, LDA, LDVL, LDVR, LWORK, N\n      DOUBLE PRECISION   ABNRM\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   RCONDE( * ), RCONDV( * ), RWORK( * ),\n     $                   SCALE( * )\n      COMPLEX*16         A( LDA, * ), VL( LDVL, * ), VR( LDVR, * ),\n     $                   W( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZGEEVX computes for an N-by-N complex nonsymmetric matrix A, the\n*  eigenvalues and, optionally, the left and/or right eigenvectors.\n*\n*  Optionally also, it computes a balancing transformation to improve\n*  the conditioning of the eigenvalues and eigenvectors (ILO, IHI,\n*  SCALE, and ABNRM), reciprocal condition numbers for the eigenvalues\n*  (RCONDE), and reciprocal condition numbers for the right\n*  eigenvectors (RCONDV).\n*\n*  The right eigenvector v(j) of A satisfies\n*                   A * v(j) = lambda(j) * v(j)\n*  where lambda(j) is its eigenvalue.\n*  The left eigenvector u(j) of A satisfies\n*                u(j)**H * A = lambda(j) * u(j)**H\n*  where u(j)**H denotes the conjugate transpose of u(j).\n*\n*  The computed eigenvectors are normalized to have Euclidean norm\n*  equal to 1 and largest component real.\n*\n*  Balancing a matrix means permuting the rows and columns to make it\n*  more nearly upper triangular, and applying a diagonal similarity\n*  transformation D * A * D**(-1), where D is a diagonal matrix, to\n*  make its rows and columns closer in norm and the condition numbers\n*  of its eigenvalues and eigenvectors smaller.  The computed\n*  reciprocal condition numbers correspond to the balanced matrix.\n*  Permuting rows and columns will not change the condition numbers\n*  (in exact arithmetic) but diagonal scaling will.  For further\n*  explanation of balancing, see section 4.10.2 of the LAPACK\n*  Users\' Guide.\n*\n*  Arguments\n*  =========\n*\n*  BALANC  (input) CHARACTER*1\n*          Indicates how the input matrix should be diagonally scaled\n*          and/or permuted to improve the conditioning of its\n*          eigenvalues.\n*          = \'N\': Do not diagonally scale or permute;\n*          = \'P\': Perform permutations to make the matrix more nearly\n*                 upper triangular. Do not diagonally scale;\n*          = \'S\': Diagonally scale the matrix, ie. replace A by\n*                 D*A*D**(-1), where D is a diagonal matrix chosen\n*                 to make the rows and columns of A more equal in\n*                 norm. Do not permute;\n*          = \'B\': Both diagonally scale and permute A.\n*\n*          Computed reciprocal condition numbers will be for the matrix\n*          after balancing and/or permuting. Permuting does not change\n*          condition numbers (in exact arithmetic), but balancing does.\n*\n*  JOBVL   (input) CHARACTER*1\n*          = \'N\': left eigenvectors of A are not computed;\n*          = \'V\': left eigenvectors of A are computed.\n*          If SENSE = \'E\' or \'B\', JOBVL must = \'V\'.\n*\n*  JOBVR   (input) CHARACTER*1\n*          = \'N\': right eigenvectors of A are not computed;\n*          = \'V\': right eigenvectors of A are computed.\n*          If SENSE = \'E\' or \'B\', JOBVR must = \'V\'.\n*\n*  SENSE   (input) CHARACTER*1\n*          Determines which reciprocal condition numbers are computed.\n*          = \'N\': None are computed;\n*          = \'E\': Computed for eigenvalues only;\n*          = \'V\': Computed for right eigenvectors only;\n*          = \'B\': Computed for eigenvalues and right eigenvectors.\n*\n*          If SENSE = \'E\' or \'B\', both left and right eigenvectors\n*          must also be computed (JOBVL = \'V\' and JOBVR = \'V\').\n*\n*  N       (input) INTEGER\n*          The order of the matrix A. N >= 0.\n*\n*  A       (input/output) COMPLEX*16 array, dimension (LDA,N)\n*          On entry, the N-by-N matrix A.\n*          On exit, A has been overwritten.  If JOBVL = \'V\' or\n*          JOBVR = \'V\', A contains the Schur form of the balanced\n*          version of the matrix A.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  W       (output) COMPLEX*16 array, dimension (N)\n*          W contains the computed eigenvalues.\n*\n*  VL      (output) COMPLEX*16 array, dimension (LDVL,N)\n*          If JOBVL = \'V\', the left eigenvectors u(j) are stored one\n*          after another in the columns of VL, in the same order\n*          as their eigenvalues.\n*          If JOBVL = \'N\', VL is not referenced.\n*          u(j) = VL(:,j), the j-th column of VL.\n*\n*  LDVL    (input) INTEGER\n*          The leading dimension of the array VL.  LDVL >= 1; if\n*          JOBVL = \'V\', LDVL >= N.\n*\n*  VR      (output) COMPLEX*16 array, dimension (LDVR,N)\n*          If JOBVR = \'V\', the right eigenvectors v(j) are stored one\n*          after another in the columns of VR, in the same order\n*          as their eigenvalues.\n*          If JOBVR = \'N\', VR is not referenced.\n*          v(j) = VR(:,j), the j-th column of VR.\n*\n*  LDVR    (input) INTEGER\n*          The leading dimension of the array VR.  LDVR >= 1; if\n*          JOBVR = \'V\', LDVR >= N.\n*\n*  ILO     (output) INTEGER\n*  IHI     (output) INTEGER\n*          ILO and IHI are integer values determined when A was\n*          balanced.  The balanced A(i,j) = 0 if I > J and\n*          J = 1,...,ILO-1 or I = IHI+1,...,N.\n*\n*  SCALE   (output) DOUBLE PRECISION array, dimension (N)\n*          Details of the permutations and scaling factors applied\n*          when balancing A.  If P(j) is the index of the row and column\n*          interchanged with row and column j, and D(j) is the scaling\n*          factor applied to row and column j, then\n*          SCALE(J) = P(J),    for J = 1,...,ILO-1\n*                   = D(J),    for J = ILO,...,IHI\n*                   = P(J)     for J = IHI+1,...,N.\n*          The order in which the interchanges are made is N to IHI+1,\n*          then 1 to ILO-1.\n*\n*  ABNRM   (output) DOUBLE PRECISION\n*          The one-norm of the balanced matrix (the maximum\n*          of the sum of absolute values of elements of any column).\n*\n*  RCONDE  (output) DOUBLE PRECISION array, dimension (N)\n*          RCONDE(j) is the reciprocal condition number of the j-th\n*          eigenvalue.\n*\n*  RCONDV  (output) DOUBLE PRECISION array, dimension (N)\n*          RCONDV(j) is the reciprocal condition number of the j-th\n*          right eigenvector.\n*\n*  WORK    (workspace/output) COMPLEX*16 array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.  If SENSE = \'N\' or \'E\',\n*          LWORK >= max(1,2*N), and if SENSE = \'V\' or \'B\',\n*          LWORK >= N*N+2*N.\n*          For good performance, LWORK must generally be larger.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (2*N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  if INFO = i, the QR algorithm failed to compute all the\n*                eigenvalues, and no eigenvectors or condition numbers\n*                have been computed; elements 1:ILO-1 and i+1:N of W\n*                contain eigenvalues which have converged.\n*\n'),(197,'sgees_197.txt','      SUBROUTINE SGEES( JOBVS, SORT, SELECT, N, A, LDA, SDIM, WR, WI,\n     $                  VS, LDVS, WORK, LWORK, BWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBVS, SORT\n      INTEGER            INFO, LDA, LDVS, LWORK, N, SDIM\n*     ..\n*     .. Array Arguments ..\n      LOGICAL            BWORK( * )\n      REAL               A( LDA, * ), VS( LDVS, * ), WI( * ), WORK( * ),\n     $                   WR( * )\n*     ..\n*     .. Function Arguments ..\n      LOGICAL            SELECT\n      EXTERNAL           SELECT\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SGEES computes for an N-by-N real nonsymmetric matrix A, the\n*  eigenvalues, the real Schur form T, and, optionally, the matrix of\n*  Schur vectors Z.  This gives the Schur factorization A = Z*T*(Z**T).\n*\n*  Optionally, it also orders the eigenvalues on the diagonal of the\n*  real Schur form so that selected eigenvalues are at the top left.\n*  The leading columns of Z then form an orthonormal basis for the\n*  invariant subspace corresponding to the selected eigenvalues.\n*\n*  A matrix is in real Schur form if it is upper quasi-triangular with\n*  1-by-1 and 2-by-2 blocks. 2-by-2 blocks will be standardized in the\n*  form\n*          [  a  b  ]\n*          [  c  a  ]\n*\n*  where b*c < 0. The eigenvalues of such a block are a +- sqrt(bc).\n*\n*  Arguments\n*  =========\n*\n*  JOBVS   (input) CHARACTER*1\n*          = \'N\': Schur vectors are not computed;\n*          = \'V\': Schur vectors are computed.\n*\n*  SORT    (input) CHARACTER*1\n*          Specifies whether or not to order the eigenvalues on the\n*          diagonal of the Schur form.\n*          = \'N\': Eigenvalues are not ordered;\n*          = \'S\': Eigenvalues are ordered (see SELECT).\n*\n*  SELECT  (external procedure) LOGICAL FUNCTION of two REAL arguments\n*          SELECT must be declared EXTERNAL in the calling subroutine.\n*          If SORT = \'S\', SELECT is used to select eigenvalues to sort\n*          to the top left of the Schur form.\n*          If SORT = \'N\', SELECT is not referenced.\n*          An eigenvalue WR(j)+sqrt(-1)*WI(j) is selected if\n*          SELECT(WR(j),WI(j)) is true; i.e., if either one of a complex\n*          conjugate pair of eigenvalues is selected, then both complex\n*          eigenvalues are selected.\n*          Note that a selected complex eigenvalue may no longer\n*          satisfy SELECT(WR(j),WI(j)) = .TRUE. after ordering, since\n*          ordering may change the value of complex eigenvalues\n*          (especially if the eigenvalue is ill-conditioned); in this\n*          case INFO is set to N+2 (see INFO below).\n*\n*  N       (input) INTEGER\n*          The order of the matrix A. N >= 0.\n*\n*  A       (input/output) REAL array, dimension (LDA,N)\n*          On entry, the N-by-N matrix A.\n*          On exit, A has been overwritten by its real Schur form T.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  SDIM    (output) INTEGER\n*          If SORT = \'N\', SDIM = 0.\n*          If SORT = \'S\', SDIM = number of eigenvalues (after sorting)\n*                         for which SELECT is true. (Complex conjugate\n*                         pairs for which SELECT is true for either\n*                         eigenvalue count as 2.)\n*\n*  WR      (output) REAL array, dimension (N)\n*  WI      (output) REAL array, dimension (N)\n*          WR and WI contain the real and imaginary parts,\n*          respectively, of the computed eigenvalues in the same order\n*          that they appear on the diagonal of the output Schur form T.\n*          Complex conjugate pairs of eigenvalues will appear\n*          consecutively with the eigenvalue having the positive\n*          imaginary part first.\n*\n*  VS      (output) REAL array, dimension (LDVS,N)\n*          If JOBVS = \'V\', VS contains the orthogonal matrix Z of Schur\n*          vectors.\n*          If JOBVS = \'N\', VS is not referenced.\n*\n*  LDVS    (input) INTEGER\n*          The leading dimension of the array VS.  LDVS >= 1; if\n*          JOBVS = \'V\', LDVS >= N.\n*\n*  WORK    (workspace/output) REAL array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) contains the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.  LWORK >= max(1,3*N).\n*          For good performance, LWORK must generally be larger.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  BWORK   (workspace) LOGICAL array, dimension (N)\n*          Not referenced if SORT = \'N\'.\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value.\n*          > 0: if INFO = i, and i is\n*             <= N: the QR algorithm failed to compute all the\n*                   eigenvalues; elements 1:ILO-1 and i+1:N of WR and WI\n*                   contain those eigenvalues which have converged; if\n*                   JOBVS = \'V\', VS contains the matrix which reduces A\n*                   to its partially converged Schur form.\n*             = N+1: the eigenvalues could not be reordered because some\n*                   eigenvalues were too close to separate (the problem\n*                   is very ill-conditioned);\n*             = N+2: after reordering, roundoff changed values of some\n*                   complex eigenvalues so that leading eigenvalues in\n*                   the Schur form no longer satisfy SELECT=.TRUE.  This\n*                   could also be caused by underflow due to scaling.\n*\n'),(198,'dgees_198.txt','      SUBROUTINE DGEES( JOBVS, SORT, SELECT, N, A, LDA, SDIM, WR, WI,\n     $                  VS, LDVS, WORK, LWORK, BWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBVS, SORT\n      INTEGER            INFO, LDA, LDVS, LWORK, N, SDIM\n*     ..\n*     .. Array Arguments ..\n      LOGICAL            BWORK( * )\n      DOUBLE PRECISION   A( LDA, * ), VS( LDVS, * ), WI( * ), WORK( * ),\n     $                   WR( * )\n*     ..\n*     .. Function Arguments ..\n      LOGICAL            SELECT\n      EXTERNAL           SELECT\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DGEES computes for an N-by-N real nonsymmetric matrix A, the\n*  eigenvalues, the real Schur form T, and, optionally, the matrix of\n*  Schur vectors Z.  This gives the Schur factorization A = Z*T*(Z**T).\n*\n*  Optionally, it also orders the eigenvalues on the diagonal of the\n*  real Schur form so that selected eigenvalues are at the top left.\n*  The leading columns of Z then form an orthonormal basis for the\n*  invariant subspace corresponding to the selected eigenvalues.\n*\n*  A matrix is in real Schur form if it is upper quasi-triangular with\n*  1-by-1 and 2-by-2 blocks. 2-by-2 blocks will be standardized in the\n*  form\n*          [  a  b  ]\n*          [  c  a  ]\n*\n*  where b*c < 0. The eigenvalues of such a block are a +- sqrt(bc).\n*\n*  Arguments\n*  =========\n*\n*  JOBVS   (input) CHARACTER*1\n*          = \'N\': Schur vectors are not computed;\n*          = \'V\': Schur vectors are computed.\n*\n*  SORT    (input) CHARACTER*1\n*          Specifies whether or not to order the eigenvalues on the\n*          diagonal of the Schur form.\n*          = \'N\': Eigenvalues are not ordered;\n*          = \'S\': Eigenvalues are ordered (see SELECT).\n*\n*  SELECT  (external procedure) LOGICAL FUNCTION of two DOUBLE PRECISION arguments\n*          SELECT must be declared EXTERNAL in the calling subroutine.\n*          If SORT = \'S\', SELECT is used to select eigenvalues to sort\n*          to the top left of the Schur form.\n*          If SORT = \'N\', SELECT is not referenced.\n*          An eigenvalue WR(j)+sqrt(-1)*WI(j) is selected if\n*          SELECT(WR(j),WI(j)) is true; i.e., if either one of a complex\n*          conjugate pair of eigenvalues is selected, then both complex\n*          eigenvalues are selected.\n*          Note that a selected complex eigenvalue may no longer\n*          satisfy SELECT(WR(j),WI(j)) = .TRUE. after ordering, since\n*          ordering may change the value of complex eigenvalues\n*          (especially if the eigenvalue is ill-conditioned); in this\n*          case INFO is set to N+2 (see INFO below).\n*\n*  N       (input) INTEGER\n*          The order of the matrix A. N >= 0.\n*\n*  A       (input/output) DOUBLE PRECISION array, dimension (LDA,N)\n*          On entry, the N-by-N matrix A.\n*          On exit, A has been overwritten by its real Schur form T.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  SDIM    (output) INTEGER\n*          If SORT = \'N\', SDIM = 0.\n*          If SORT = \'S\', SDIM = number of eigenvalues (after sorting)\n*                         for which SELECT is true. (Complex conjugate\n*                         pairs for which SELECT is true for either\n*                         eigenvalue count as 2.)\n*\n*  WR      (output) DOUBLE PRECISION array, dimension (N)\n*  WI      (output) DOUBLE PRECISION array, dimension (N)\n*          WR and WI contain the real and imaginary parts,\n*          respectively, of the computed eigenvalues in the same order\n*          that they appear on the diagonal of the output Schur form T.\n*          Complex conjugate pairs of eigenvalues will appear\n*          consecutively with the eigenvalue having the positive\n*          imaginary part first.\n*\n*  VS      (output) DOUBLE PRECISION array, dimension (LDVS,N)\n*          If JOBVS = \'V\', VS contains the orthogonal matrix Z of Schur\n*          vectors.\n*          If JOBVS = \'N\', VS is not referenced.\n*\n*  LDVS    (input) INTEGER\n*          The leading dimension of the array VS.  LDVS >= 1; if\n*          JOBVS = \'V\', LDVS >= N.\n*\n*  WORK    (workspace/output) DOUBLE PRECISION array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) contains the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.  LWORK >= max(1,3*N).\n*          For good performance, LWORK must generally be larger.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  BWORK   (workspace) LOGICAL array, dimension (N)\n*          Not referenced if SORT = \'N\'.\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value.\n*          > 0: if INFO = i, and i is\n*             <= N: the QR algorithm failed to compute all the\n*                   eigenvalues; elements 1:ILO-1 and i+1:N of WR and WI\n*                   contain those eigenvalues which have converged; if\n*                   JOBVS = \'V\', VS contains the matrix which reduces A\n*                   to its partially converged Schur form.\n*             = N+1: the eigenvalues could not be reordered because some\n*                   eigenvalues were too close to separate (the problem\n*                   is very ill-conditioned);\n*             = N+2: after reordering, roundoff changed values of some\n*                   complex eigenvalues so that leading eigenvalues in\n*                   the Schur form no longer satisfy SELECT=.TRUE.  This\n*                   could also be caused by underflow due to scaling.\n*\n'),(199,'cgees_199.txt','      SUBROUTINE CGEES( JOBVS, SORT, SELECT, N, A, LDA, SDIM, W, VS,\n     $                  LDVS, WORK, LWORK, RWORK, BWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBVS, SORT\n      INTEGER            INFO, LDA, LDVS, LWORK, N, SDIM\n*     ..\n*     .. Array Arguments ..\n      LOGICAL            BWORK( * )\n      REAL               RWORK( * )\n      COMPLEX            A( LDA, * ), VS( LDVS, * ), W( * ), WORK( * )\n*     ..\n*     .. Function Arguments ..\n      LOGICAL            SELECT\n      EXTERNAL           SELECT\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CGEES computes for an N-by-N complex nonsymmetric matrix A, the\n*  eigenvalues, the Schur form T, and, optionally, the matrix of Schur\n*  vectors Z.  This gives the Schur factorization A = Z*T*(Z**H).\n*\n*  Optionally, it also orders the eigenvalues on the diagonal of the\n*  Schur form so that selected eigenvalues are at the top left.\n*  The leading columns of Z then form an orthonormal basis for the\n*  invariant subspace corresponding to the selected eigenvalues.\n\n*  A complex matrix is in Schur form if it is upper triangular.\n*\n*  Arguments\n*  =========\n*\n*  JOBVS   (input) CHARACTER*1\n*          = \'N\': Schur vectors are not computed;\n*          = \'V\': Schur vectors are computed.\n*\n*  SORT    (input) CHARACTER*1\n*          Specifies whether or not to order the eigenvalues on the\n*          diagonal of the Schur form.\n*          = \'N\': Eigenvalues are not ordered:\n*          = \'S\': Eigenvalues are ordered (see SELECT).\n*\n*  SELECT  (external procedure) LOGICAL FUNCTION of one COMPLEX argument\n*          SELECT must be declared EXTERNAL in the calling subroutine.\n*          If SORT = \'S\', SELECT is used to select eigenvalues to order\n*          to the top left of the Schur form.\n*          IF SORT = \'N\', SELECT is not referenced.\n*          The eigenvalue W(j) is selected if SELECT(W(j)) is true.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A. N >= 0.\n*\n*  A       (input/output) COMPLEX array, dimension (LDA,N)\n*          On entry, the N-by-N matrix A.\n*          On exit, A has been overwritten by its Schur form T.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  SDIM    (output) INTEGER\n*          If SORT = \'N\', SDIM = 0.\n*          If SORT = \'S\', SDIM = number of eigenvalues for which\n*                         SELECT is true.\n*\n*  W       (output) COMPLEX array, dimension (N)\n*          W contains the computed eigenvalues, in the same order that\n*          they appear on the diagonal of the output Schur form T.\n*\n*  VS      (output) COMPLEX array, dimension (LDVS,N)\n*          If JOBVS = \'V\', VS contains the unitary matrix Z of Schur\n*          vectors.\n*          If JOBVS = \'N\', VS is not referenced.\n*\n*  LDVS    (input) INTEGER\n*          The leading dimension of the array VS.  LDVS >= 1; if\n*          JOBVS = \'V\', LDVS >= N.\n*\n*  WORK    (workspace/output) COMPLEX array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.  LWORK >= max(1,2*N).\n*          For good performance, LWORK must generally be larger.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  RWORK   (workspace) REAL array, dimension (N)\n*\n*  BWORK   (workspace) LOGICAL array, dimension (N)\n*          Not referenced if SORT = \'N\'.\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value.\n*          > 0: if INFO = i, and i is\n*               <= N:  the QR algorithm failed to compute all the\n*                      eigenvalues; elements 1:ILO-1 and i+1:N of W\n*                      contain those eigenvalues which have converged;\n*                      if JOBVS = \'V\', VS contains the matrix which\n*                      reduces A to its partially converged Schur form.\n*               = N+1: the eigenvalues could not be reordered because\n*                      some eigenvalues were too close to separate (the\n*                      problem is very ill-conditioned);\n*               = N+2: after reordering, roundoff changed values of\n*                      some complex eigenvalues so that leading\n*                      eigenvalues in the Schur form no longer satisfy\n*                      SELECT = .TRUE..  This could also be caused by\n*                      underflow due to scaling.\n*\n'),(200,'zgees_200.txt','      SUBROUTINE ZGEES( JOBVS, SORT, SELECT, N, A, LDA, SDIM, W, VS,\n     $                  LDVS, WORK, LWORK, RWORK, BWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBVS, SORT\n      INTEGER            INFO, LDA, LDVS, LWORK, N, SDIM\n*     ..\n*     .. Array Arguments ..\n      LOGICAL            BWORK( * )\n      DOUBLE PRECISION   RWORK( * )\n      COMPLEX*16         A( LDA, * ), VS( LDVS, * ), W( * ), WORK( * )\n*     ..\n*     .. Function Arguments ..\n      LOGICAL            SELECT\n      EXTERNAL           SELECT\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZGEES computes for an N-by-N complex nonsymmetric matrix A, the\n*  eigenvalues, the Schur form T, and, optionally, the matrix of Schur\n*  vectors Z.  This gives the Schur factorization A = Z*T*(Z**H).\n*\n*  Optionally, it also orders the eigenvalues on the diagonal of the\n*  Schur form so that selected eigenvalues are at the top left.\n*  The leading columns of Z then form an orthonormal basis for the\n*  invariant subspace corresponding to the selected eigenvalues.\n*\n*  A complex matrix is in Schur form if it is upper triangular.\n*\n*  Arguments\n*  =========\n*\n*  JOBVS   (input) CHARACTER*1\n*          = \'N\': Schur vectors are not computed;\n*          = \'V\': Schur vectors are computed.\n*\n*  SORT    (input) CHARACTER*1\n*          Specifies whether or not to order the eigenvalues on the\n*          diagonal of the Schur form.\n*          = \'N\': Eigenvalues are not ordered:\n*          = \'S\': Eigenvalues are ordered (see SELECT).\n*\n*  SELECT  (external procedure) LOGICAL FUNCTION of one COMPLEX*16 argument\n*          SELECT must be declared EXTERNAL in the calling subroutine.\n*          If SORT = \'S\', SELECT is used to select eigenvalues to order\n*          to the top left of the Schur form.\n*          IF SORT = \'N\', SELECT is not referenced.\n*          The eigenvalue W(j) is selected if SELECT(W(j)) is true.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A. N >= 0.\n*\n*  A       (input/output) COMPLEX*16 array, dimension (LDA,N)\n*          On entry, the N-by-N matrix A.\n*          On exit, A has been overwritten by its Schur form T.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  SDIM    (output) INTEGER\n*          If SORT = \'N\', SDIM = 0.\n*          If SORT = \'S\', SDIM = number of eigenvalues for which\n*                         SELECT is true.\n*\n*  W       (output) COMPLEX*16 array, dimension (N)\n*          W contains the computed eigenvalues, in the same order that\n*          they appear on the diagonal of the output Schur form T.\n*\n*  VS      (output) COMPLEX*16 array, dimension (LDVS,N)\n*          If JOBVS = \'V\', VS contains the unitary matrix Z of Schur\n*          vectors.\n*          If JOBVS = \'N\', VS is not referenced.\n*\n*  LDVS    (input) INTEGER\n*          The leading dimension of the array VS.  LDVS >= 1; if\n*          JOBVS = \'V\', LDVS >= N.\n*\n*  WORK    (workspace/output) COMPLEX*16 array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.  LWORK >= max(1,2*N).\n*          For good performance, LWORK must generally be larger.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (N)\n*\n*  BWORK   (workspace) LOGICAL array, dimension (N)\n*          Not referenced if SORT = \'N\'.\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value.\n*          > 0: if INFO = i, and i is\n*               <= N:  the QR algorithm failed to compute all the\n*                      eigenvalues; elements 1:ILO-1 and i+1:N of W\n*                      contain those eigenvalues which have converged;\n*                      if JOBVS = \'V\', VS contains the matrix which\n*                      reduces A to its partially converged Schur form.\n*               = N+1: the eigenvalues could not be reordered because\n*                      some eigenvalues were too close to separate (the\n*                      problem is very ill-conditioned);\n*               = N+2: after reordering, roundoff changed values of\n*                      some complex eigenvalues so that leading\n*                      eigenvalues in the Schur form no longer satisfy\n*                      SELECT = .TRUE..  This could also be caused by\n*                      underflow due to scaling.\n*\n'),(201,'sgeesx_201.txt','      SUBROUTINE SGEESX( JOBVS, SORT, SELECT, SENSE, N, A, LDA, SDIM,\n     $                   WR, WI, VS, LDVS, RCONDE, RCONDV, WORK, LWORK,\n     $                   IWORK, LIWORK, BWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     June 2010\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBVS, SENSE, SORT\n      INTEGER            INFO, LDA, LDVS, LIWORK, LWORK, N, SDIM\n      REAL               RCONDE, RCONDV\n*     ..\n*     .. Array Arguments ..\n      LOGICAL            BWORK( * )\n      INTEGER            IWORK( * )\n      REAL               A( LDA, * ), VS( LDVS, * ), WI( * ), WORK( * ),\n     $                   WR( * )\n*     ..\n*     .. Function Arguments ..\n      LOGICAL            SELECT\n      EXTERNAL           SELECT\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SGEESX computes for an N-by-N real nonsymmetric matrix A, the\n*  eigenvalues, the real Schur form T, and, optionally, the matrix of\n*  Schur vectors Z.  This gives the Schur factorization A = Z*T*(Z**T).\n*\n*  Optionally, it also orders the eigenvalues on the diagonal of the\n*  real Schur form so that selected eigenvalues are at the top left;\n*  computes a reciprocal condition number for the average of the\n*  selected eigenvalues (RCONDE); and computes a reciprocal condition\n*  number for the right invariant subspace corresponding to the\n*  selected eigenvalues (RCONDV).  The leading columns of Z form an\n*  orthonormal basis for this invariant subspace.\n*\n*  For further explanation of the reciprocal condition numbers RCONDE\n*  and RCONDV, see Section 4.10 of the LAPACK Users\' Guide (where\n*  these quantities are called s and sep respectively).\n*\n*  A real matrix is in real Schur form if it is upper quasi-triangular\n*  with 1-by-1 and 2-by-2 blocks. 2-by-2 blocks will be standardized in\n*  the form\n*            [  a  b  ]\n*            [  c  a  ]\n*\n*  where b*c < 0. The eigenvalues of such a block are a +- sqrt(bc).\n*\n*  Arguments\n*  =========\n*\n*  JOBVS   (input) CHARACTER*1\n*          = \'N\': Schur vectors are not computed;\n*          = \'V\': Schur vectors are computed.\n*\n*  SORT    (input) CHARACTER*1\n*          Specifies whether or not to order the eigenvalues on the\n*          diagonal of the Schur form.\n*          = \'N\': Eigenvalues are not ordered;\n*          = \'S\': Eigenvalues are ordered (see SELECT).\n*\n*  SELECT  (external procedure) LOGICAL FUNCTION of two REAL arguments\n*          SELECT must be declared EXTERNAL in the calling subroutine.\n*          If SORT = \'S\', SELECT is used to select eigenvalues to sort\n*          to the top left of the Schur form.\n*          If SORT = \'N\', SELECT is not referenced.\n*          An eigenvalue WR(j)+sqrt(-1)*WI(j) is selected if\n*          SELECT(WR(j),WI(j)) is true; i.e., if either one of a\n*          complex conjugate pair of eigenvalues is selected, then both\n*          are.  Note that a selected complex eigenvalue may no longer\n*          satisfy SELECT(WR(j),WI(j)) = .TRUE. after ordering, since\n*          ordering may change the value of complex eigenvalues\n*          (especially if the eigenvalue is ill-conditioned); in this\n*          case INFO may be set to N+3 (see INFO below).\n*\n*  SENSE   (input) CHARACTER*1\n*          Determines which reciprocal condition numbers are computed.\n*          = \'N\': None are computed;\n*          = \'E\': Computed for average of selected eigenvalues only;\n*          = \'V\': Computed for selected right invariant subspace only;\n*          = \'B\': Computed for both.\n*          If SENSE = \'E\', \'V\' or \'B\', SORT must equal \'S\'.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A. N >= 0.\n*\n*  A       (input/output) REAL array, dimension (LDA, N)\n*          On entry, the N-by-N matrix A.\n*          On exit, A is overwritten by its real Schur form T.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  SDIM    (output) INTEGER\n*          If SORT = \'N\', SDIM = 0.\n*          If SORT = \'S\', SDIM = number of eigenvalues (after sorting)\n*                         for which SELECT is true. (Complex conjugate\n*                         pairs for which SELECT is true for either\n*                         eigenvalue count as 2.)\n*\n*  WR      (output) REAL array, dimension (N)\n*  WI      (output) REAL array, dimension (N)\n*          WR and WI contain the real and imaginary parts, respectively,\n*          of the computed eigenvalues, in the same order that they\n*          appear on the diagonal of the output Schur form T.  Complex\n*          conjugate pairs of eigenvalues appear consecutively with the\n*          eigenvalue having the positive imaginary part first.\n*\n*  VS      (output) REAL array, dimension (LDVS,N)\n*          If JOBVS = \'V\', VS contains the orthogonal matrix Z of Schur\n*          vectors.\n*          If JOBVS = \'N\', VS is not referenced.\n*\n*  LDVS    (input) INTEGER\n*          The leading dimension of the array VS.  LDVS >= 1, and if\n*          JOBVS = \'V\', LDVS >= N.\n*\n*  RCONDE  (output) REAL\n*          If SENSE = \'E\' or \'B\', RCONDE contains the reciprocal\n*          condition number for the average of the selected eigenvalues.\n*          Not referenced if SENSE = \'N\' or \'V\'.\n*\n*  RCONDV  (output) REAL\n*          If SENSE = \'V\' or \'B\', RCONDV contains the reciprocal\n*          condition number for the selected right invariant subspace.\n*          Not referenced if SENSE = \'N\' or \'E\'.\n*\n*  WORK    (workspace/output) REAL array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.  LWORK >= max(1,3*N).\n*          Also, if SENSE = \'E\' or \'V\' or \'B\',\n*          LWORK >= N+2*SDIM*(N-SDIM), where SDIM is the number of\n*          selected eigenvalues computed by this routine.  Note that\n*          N+2*SDIM*(N-SDIM) <= N+N*N/2. Note also that an error is only\n*          returned if LWORK < max(1,3*N), but if SENSE = \'E\' or \'V\' or\n*          \'B\' this may not be large enough.\n*          For good performance, LWORK must generally be larger.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates upper bounds on the optimal sizes of the\n*          arrays WORK and IWORK, returns these values as the first\n*          entries of the WORK and IWORK arrays, and no error messages\n*          related to LWORK or LIWORK are issued by XERBLA.\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (MAX(1,LIWORK))\n*          On exit, if INFO = 0, IWORK(1) returns the optimal LIWORK.\n*\n*  LIWORK  (input) INTEGER\n*          The dimension of the array IWORK.\n*          LIWORK >= 1; if SENSE = \'V\' or \'B\', LIWORK >= SDIM*(N-SDIM).\n*          Note that SDIM*(N-SDIM) <= N*N/4. Note also that an error is\n*          only returned if LIWORK < 1, but if SENSE = \'V\' or \'B\' this\n*          may not be large enough.\n*\n*          If LIWORK = -1, then a workspace query is assumed; the\n*          routine only calculates upper bounds on the optimal sizes of\n*          the arrays WORK and IWORK, returns these values as the first\n*          entries of the WORK and IWORK arrays, and no error messages\n*          related to LWORK or LIWORK are issued by XERBLA.\n*\n*  BWORK   (workspace) LOGICAL array, dimension (N)\n*          Not referenced if SORT = \'N\'.\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value.\n*          > 0: if INFO = i, and i is\n*             <= N: the QR algorithm failed to compute all the\n*                   eigenvalues; elements 1:ILO-1 and i+1:N of WR and WI\n*                   contain those eigenvalues which have converged; if\n*                   JOBVS = \'V\', VS contains the transformation which\n*                   reduces A to its partially converged Schur form.\n*             = N+1: the eigenvalues could not be reordered because some\n*                   eigenvalues were too close to separate (the problem\n*                   is very ill-conditioned);\n*             = N+2: after reordering, roundoff changed values of some\n*                   complex eigenvalues so that leading eigenvalues in\n*                   the Schur form no longer satisfy SELECT=.TRUE.  This\n*                   could also be caused by underflow due to scaling.\n*\n'),(202,'dgeesx_202.txt','      SUBROUTINE DGEESX( JOBVS, SORT, SELECT, SENSE, N, A, LDA, SDIM,\n     $                   WR, WI, VS, LDVS, RCONDE, RCONDV, WORK, LWORK,\n     $                   IWORK, LIWORK, BWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     June 2010\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBVS, SENSE, SORT\n      INTEGER            INFO, LDA, LDVS, LIWORK, LWORK, N, SDIM\n      DOUBLE PRECISION   RCONDE, RCONDV\n*     ..\n*     .. Array Arguments ..\n      LOGICAL            BWORK( * )\n      INTEGER            IWORK( * )\n      DOUBLE PRECISION   A( LDA, * ), VS( LDVS, * ), WI( * ), WORK( * ),\n     $                   WR( * )\n*     ..\n*     .. Function Arguments ..\n      LOGICAL            SELECT\n      EXTERNAL           SELECT\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DGEESX computes for an N-by-N real nonsymmetric matrix A, the\n*  eigenvalues, the real Schur form T, and, optionally, the matrix of\n*  Schur vectors Z.  This gives the Schur factorization A = Z*T*(Z**T).\n*\n*  Optionally, it also orders the eigenvalues on the diagonal of the\n*  real Schur form so that selected eigenvalues are at the top left;\n*  computes a reciprocal condition number for the average of the\n*  selected eigenvalues (RCONDE); and computes a reciprocal condition\n*  number for the right invariant subspace corresponding to the\n*  selected eigenvalues (RCONDV).  The leading columns of Z form an\n*  orthonormal basis for this invariant subspace.\n*\n*  For further explanation of the reciprocal condition numbers RCONDE\n*  and RCONDV, see Section 4.10 of the LAPACK Users\' Guide (where\n*  these quantities are called s and sep respectively).\n*\n*  A real matrix is in real Schur form if it is upper quasi-triangular\n*  with 1-by-1 and 2-by-2 blocks. 2-by-2 blocks will be standardized in\n*  the form\n*            [  a  b  ]\n*            [  c  a  ]\n*\n*  where b*c < 0. The eigenvalues of such a block are a +- sqrt(bc).\n*\n*  Arguments\n*  =========\n*\n*  JOBVS   (input) CHARACTER*1\n*          = \'N\': Schur vectors are not computed;\n*          = \'V\': Schur vectors are computed.\n*\n*  SORT    (input) CHARACTER*1\n*          Specifies whether or not to order the eigenvalues on the\n*          diagonal of the Schur form.\n*          = \'N\': Eigenvalues are not ordered;\n*          = \'S\': Eigenvalues are ordered (see SELECT).\n*\n*  SELECT  (external procedure) LOGICAL FUNCTION of two DOUBLE PRECISION arguments\n*          SELECT must be declared EXTERNAL in the calling subroutine.\n*          If SORT = \'S\', SELECT is used to select eigenvalues to sort\n*          to the top left of the Schur form.\n*          If SORT = \'N\', SELECT is not referenced.\n*          An eigenvalue WR(j)+sqrt(-1)*WI(j) is selected if\n*          SELECT(WR(j),WI(j)) is true; i.e., if either one of a\n*          complex conjugate pair of eigenvalues is selected, then both\n*          are.  Note that a selected complex eigenvalue may no longer\n*          satisfy SELECT(WR(j),WI(j)) = .TRUE. after ordering, since\n*          ordering may change the value of complex eigenvalues\n*          (especially if the eigenvalue is ill-conditioned); in this\n*          case INFO may be set to N+3 (see INFO below).\n*\n*  SENSE   (input) CHARACTER*1\n*          Determines which reciprocal condition numbers are computed.\n*          = \'N\': None are computed;\n*          = \'E\': Computed for average of selected eigenvalues only;\n*          = \'V\': Computed for selected right invariant subspace only;\n*          = \'B\': Computed for both.\n*          If SENSE = \'E\', \'V\' or \'B\', SORT must equal \'S\'.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A. N >= 0.\n*\n*  A       (input/output) DOUBLE PRECISION array, dimension (LDA, N)\n*          On entry, the N-by-N matrix A.\n*          On exit, A is overwritten by its real Schur form T.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  SDIM    (output) INTEGER\n*          If SORT = \'N\', SDIM = 0.\n*          If SORT = \'S\', SDIM = number of eigenvalues (after sorting)\n*                         for which SELECT is true. (Complex conjugate\n*                         pairs for which SELECT is true for either\n*                         eigenvalue count as 2.)\n*\n*  WR      (output) DOUBLE PRECISION array, dimension (N)\n*  WI      (output) DOUBLE PRECISION array, dimension (N)\n*          WR and WI contain the real and imaginary parts, respectively,\n*          of the computed eigenvalues, in the same order that they\n*          appear on the diagonal of the output Schur form T.  Complex\n*          conjugate pairs of eigenvalues appear consecutively with the\n*          eigenvalue having the positive imaginary part first.\n*\n*  VS      (output) DOUBLE PRECISION array, dimension (LDVS,N)\n*          If JOBVS = \'V\', VS contains the orthogonal matrix Z of Schur\n*          vectors.\n*          If JOBVS = \'N\', VS is not referenced.\n*\n*  LDVS    (input) INTEGER\n*          The leading dimension of the array VS.  LDVS >= 1, and if\n*          JOBVS = \'V\', LDVS >= N.\n*\n*  RCONDE  (output) DOUBLE PRECISION\n*          If SENSE = \'E\' or \'B\', RCONDE contains the reciprocal\n*          condition number for the average of the selected eigenvalues.\n*          Not referenced if SENSE = \'N\' or \'V\'.\n*\n*  RCONDV  (output) DOUBLE PRECISION\n*          If SENSE = \'V\' or \'B\', RCONDV contains the reciprocal\n*          condition number for the selected right invariant subspace.\n*          Not referenced if SENSE = \'N\' or \'E\'.\n*\n*  WORK    (workspace/output) DOUBLE PRECISION array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.  LWORK >= max(1,3*N).\n*          Also, if SENSE = \'E\' or \'V\' or \'B\',\n*          LWORK >= N+2*SDIM*(N-SDIM), where SDIM is the number of\n*          selected eigenvalues computed by this routine.  Note that\n*          N+2*SDIM*(N-SDIM) <= N+N*N/2. Note also that an error is only\n*          returned if LWORK < max(1,3*N), but if SENSE = \'E\' or \'V\' or\n*          \'B\' this may not be large enough.\n*          For good performance, LWORK must generally be larger.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates upper bounds on the optimal sizes of the\n*          arrays WORK and IWORK, returns these values as the first\n*          entries of the WORK and IWORK arrays, and no error messages\n*          related to LWORK or LIWORK are issued by XERBLA.\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (MAX(1,LIWORK))\n*          On exit, if INFO = 0, IWORK(1) returns the optimal LIWORK.\n*\n*  LIWORK  (input) INTEGER\n*          The dimension of the array IWORK.\n*          LIWORK >= 1; if SENSE = \'V\' or \'B\', LIWORK >= SDIM*(N-SDIM).\n*          Note that SDIM*(N-SDIM) <= N*N/4. Note also that an error is\n*          only returned if LIWORK < 1, but if SENSE = \'V\' or \'B\' this\n*          may not be large enough.\n*\n*          If LIWORK = -1, then a workspace query is assumed; the\n*          routine only calculates upper bounds on the optimal sizes of\n*          the arrays WORK and IWORK, returns these values as the first\n*          entries of the WORK and IWORK arrays, and no error messages\n*          related to LWORK or LIWORK are issued by XERBLA.\n*\n*  BWORK   (workspace) LOGICAL array, dimension (N)\n*          Not referenced if SORT = \'N\'.\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value.\n*          > 0: if INFO = i, and i is\n*             <= N: the QR algorithm failed to compute all the\n*                   eigenvalues; elements 1:ILO-1 and i+1:N of WR and WI\n*                   contain those eigenvalues which have converged; if\n*                   JOBVS = \'V\', VS contains the transformation which\n*                   reduces A to its partially converged Schur form.\n*             = N+1: the eigenvalues could not be reordered because some\n*                   eigenvalues were too close to separate (the problem\n*                   is very ill-conditioned);\n*             = N+2: after reordering, roundoff changed values of some\n*                   complex eigenvalues so that leading eigenvalues in\n*                   the Schur form no longer satisfy SELECT=.TRUE.  This\n*                   could also be caused by underflow due to scaling.\n*\n'),(203,'cgeesx_203.txt','      SUBROUTINE CGEESX( JOBVS, SORT, SELECT, SENSE, N, A, LDA, SDIM, W,\n     $                   VS, LDVS, RCONDE, RCONDV, WORK, LWORK, RWORK,\n     $                   BWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     June 2010\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBVS, SENSE, SORT\n      INTEGER            INFO, LDA, LDVS, LWORK, N, SDIM\n      REAL               RCONDE, RCONDV\n*     ..\n*     .. Array Arguments ..\n      LOGICAL            BWORK( * )\n      REAL               RWORK( * )\n      COMPLEX            A( LDA, * ), VS( LDVS, * ), W( * ), WORK( * )\n*     ..\n*     .. Function Arguments ..\n      LOGICAL            SELECT\n      EXTERNAL           SELECT\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CGEESX computes for an N-by-N complex nonsymmetric matrix A, the\n*  eigenvalues, the Schur form T, and, optionally, the matrix of Schur\n*  vectors Z.  This gives the Schur factorization A = Z*T*(Z**H).\n*\n*  Optionally, it also orders the eigenvalues on the diagonal of the\n*  Schur form so that selected eigenvalues are at the top left;\n*  computes a reciprocal condition number for the average of the\n*  selected eigenvalues (RCONDE); and computes a reciprocal condition\n*  number for the right invariant subspace corresponding to the\n*  selected eigenvalues (RCONDV).  The leading columns of Z form an\n*  orthonormal basis for this invariant subspace.\n*\n*  For further explanation of the reciprocal condition numbers RCONDE\n*  and RCONDV, see Section 4.10 of the LAPACK Users\' Guide (where\n*  these quantities are called s and sep respectively).\n*\n*  A complex matrix is in Schur form if it is upper triangular.\n*\n*  Arguments\n*  =========\n*\n*  JOBVS   (input) CHARACTER*1\n*          = \'N\': Schur vectors are not computed;\n*          = \'V\': Schur vectors are computed.\n*\n*  SORT    (input) CHARACTER*1\n*          Specifies whether or not to order the eigenvalues on the\n*          diagonal of the Schur form.\n*          = \'N\': Eigenvalues are not ordered;\n*          = \'S\': Eigenvalues are ordered (see SELECT).\n*\n*  SELECT  (external procedure) LOGICAL FUNCTION of one COMPLEX argument\n*          SELECT must be declared EXTERNAL in the calling subroutine.\n*          If SORT = \'S\', SELECT is used to select eigenvalues to order\n*          to the top left of the Schur form.\n*          If SORT = \'N\', SELECT is not referenced.\n*          An eigenvalue W(j) is selected if SELECT(W(j)) is true.\n*\n*  SENSE   (input) CHARACTER*1\n*          Determines which reciprocal condition numbers are computed.\n*          = \'N\': None are computed;\n*          = \'E\': Computed for average of selected eigenvalues only;\n*          = \'V\': Computed for selected right invariant subspace only;\n*          = \'B\': Computed for both.\n*          If SENSE = \'E\', \'V\' or \'B\', SORT must equal \'S\'.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A. N >= 0.\n*\n*  A       (input/output) COMPLEX array, dimension (LDA, N)\n*          On entry, the N-by-N matrix A.\n*          On exit, A is overwritten by its Schur form T.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  SDIM    (output) INTEGER\n*          If SORT = \'N\', SDIM = 0.\n*          If SORT = \'S\', SDIM = number of eigenvalues for which\n*                         SELECT is true.\n*\n*  W       (output) COMPLEX array, dimension (N)\n*          W contains the computed eigenvalues, in the same order\n*          that they appear on the diagonal of the output Schur form T.\n*\n*  VS      (output) COMPLEX array, dimension (LDVS,N)\n*          If JOBVS = \'V\', VS contains the unitary matrix Z of Schur\n*          vectors.\n*          If JOBVS = \'N\', VS is not referenced.\n*\n*  LDVS    (input) INTEGER\n*          The leading dimension of the array VS.  LDVS >= 1, and if\n*          JOBVS = \'V\', LDVS >= N.\n*\n*  RCONDE  (output) REAL\n*          If SENSE = \'E\' or \'B\', RCONDE contains the reciprocal\n*          condition number for the average of the selected eigenvalues.\n*          Not referenced if SENSE = \'N\' or \'V\'.\n*\n*  RCONDV  (output) REAL\n*          If SENSE = \'V\' or \'B\', RCONDV contains the reciprocal\n*          condition number for the selected right invariant subspace.\n*          Not referenced if SENSE = \'N\' or \'E\'.\n*\n*  WORK    (workspace/output) COMPLEX array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.  LWORK >= max(1,2*N).\n*          Also, if SENSE = \'E\' or \'V\' or \'B\', LWORK >= 2*SDIM*(N-SDIM),\n*          where SDIM is the number of selected eigenvalues computed by\n*          this routine.  Note that 2*SDIM*(N-SDIM) <= N*N/2. Note also\n*          that an error is only returned if LWORK < max(1,2*N), but if\n*          SENSE = \'E\' or \'V\' or \'B\' this may not be large enough.\n*          For good performance, LWORK must generally be larger.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates upper bound on the optimal size of the\n*          array WORK, returns this value as the first entry of the WORK\n*          array, and no error message related to LWORK is issued by\n*          XERBLA.\n*\n*  RWORK   (workspace) REAL array, dimension (N)\n*\n*  BWORK   (workspace) LOGICAL array, dimension (N)\n*          Not referenced if SORT = \'N\'.\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value.\n*          > 0: if INFO = i, and i is\n*             <= N: the QR algorithm failed to compute all the\n*                   eigenvalues; elements 1:ILO-1 and i+1:N of W\n*                   contain those eigenvalues which have converged; if\n*                   JOBVS = \'V\', VS contains the transformation which\n*                   reduces A to its partially converged Schur form.\n*             = N+1: the eigenvalues could not be reordered because some\n*                   eigenvalues were too close to separate (the problem\n*                   is very ill-conditioned);\n*             = N+2: after reordering, roundoff changed values of some\n*                   complex eigenvalues so that leading eigenvalues in\n*                   the Schur form no longer satisfy SELECT=.TRUE.  This\n*                   could also be caused by underflow due to scaling.\n*\n'),(204,'zgeesx_204.txt','      SUBROUTINE ZGEESX( JOBVS, SORT, SELECT, SENSE, N, A, LDA, SDIM, W,\n     $                   VS, LDVS, RCONDE, RCONDV, WORK, LWORK, RWORK,\n     $                   BWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     June 2010\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBVS, SENSE, SORT\n      INTEGER            INFO, LDA, LDVS, LWORK, N, SDIM\n      DOUBLE PRECISION   RCONDE, RCONDV\n*     ..\n*     .. Array Arguments ..\n      LOGICAL            BWORK( * )\n      DOUBLE PRECISION   RWORK( * )\n      COMPLEX*16         A( LDA, * ), VS( LDVS, * ), W( * ), WORK( * )\n*     ..\n*     .. Function Arguments ..\n      LOGICAL            SELECT\n      EXTERNAL           SELECT\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZGEESX computes for an N-by-N complex nonsymmetric matrix A, the\n*  eigenvalues, the Schur form T, and, optionally, the matrix of Schur\n*  vectors Z.  This gives the Schur factorization A = Z*T*(Z**H).\n*\n*  Optionally, it also orders the eigenvalues on the diagonal of the\n*  Schur form so that selected eigenvalues are at the top left;\n*  computes a reciprocal condition number for the average of the\n*  selected eigenvalues (RCONDE); and computes a reciprocal condition\n*  number for the right invariant subspace corresponding to the\n*  selected eigenvalues (RCONDV).  The leading columns of Z form an\n*  orthonormal basis for this invariant subspace.\n*\n*  For further explanation of the reciprocal condition numbers RCONDE\n*  and RCONDV, see Section 4.10 of the LAPACK Users\' Guide (where\n*  these quantities are called s and sep respectively).\n*\n*  A complex matrix is in Schur form if it is upper triangular.\n*\n*  Arguments\n*  =========\n*\n*  JOBVS   (input) CHARACTER*1\n*          = \'N\': Schur vectors are not computed;\n*          = \'V\': Schur vectors are computed.\n*\n*  SORT    (input) CHARACTER*1\n*          Specifies whether or not to order the eigenvalues on the\n*          diagonal of the Schur form.\n*          = \'N\': Eigenvalues are not ordered;\n*          = \'S\': Eigenvalues are ordered (see SELECT).\n*\n*  SELECT  (external procedure) LOGICAL FUNCTION of one COMPLEX*16 argument\n*          SELECT must be declared EXTERNAL in the calling subroutine.\n*          If SORT = \'S\', SELECT is used to select eigenvalues to order\n*          to the top left of the Schur form.\n*          If SORT = \'N\', SELECT is not referenced.\n*          An eigenvalue W(j) is selected if SELECT(W(j)) is true.\n*\n*  SENSE   (input) CHARACTER*1\n*          Determines which reciprocal condition numbers are computed.\n*          = \'N\': None are computed;\n*          = \'E\': Computed for average of selected eigenvalues only;\n*          = \'V\': Computed for selected right invariant subspace only;\n*          = \'B\': Computed for both.\n*          If SENSE = \'E\', \'V\' or \'B\', SORT must equal \'S\'.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A. N >= 0.\n*\n*  A       (input/output) COMPLEX*16 array, dimension (LDA, N)\n*          On entry, the N-by-N matrix A.\n*          On exit, A is overwritten by its Schur form T.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  SDIM    (output) INTEGER\n*          If SORT = \'N\', SDIM = 0.\n*          If SORT = \'S\', SDIM = number of eigenvalues for which\n*                         SELECT is true.\n*\n*  W       (output) COMPLEX*16 array, dimension (N)\n*          W contains the computed eigenvalues, in the same order\n*          that they appear on the diagonal of the output Schur form T.\n*\n*  VS      (output) COMPLEX*16 array, dimension (LDVS,N)\n*          If JOBVS = \'V\', VS contains the unitary matrix Z of Schur\n*          vectors.\n*          If JOBVS = \'N\', VS is not referenced.\n*\n*  LDVS    (input) INTEGER\n*          The leading dimension of the array VS.  LDVS >= 1, and if\n*          JOBVS = \'V\', LDVS >= N.\n*\n*  RCONDE  (output) DOUBLE PRECISION\n*          If SENSE = \'E\' or \'B\', RCONDE contains the reciprocal\n*          condition number for the average of the selected eigenvalues.\n*          Not referenced if SENSE = \'N\' or \'V\'.\n*\n*  RCONDV  (output) DOUBLE PRECISION\n*          If SENSE = \'V\' or \'B\', RCONDV contains the reciprocal\n*          condition number for the selected right invariant subspace.\n*          Not referenced if SENSE = \'N\' or \'E\'.\n*\n*  WORK    (workspace/output) COMPLEX*16 array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.  LWORK >= max(1,2*N).\n*          Also, if SENSE = \'E\' or \'V\' or \'B\', LWORK >= 2*SDIM*(N-SDIM),\n*          where SDIM is the number of selected eigenvalues computed by\n*          this routine.  Note that 2*SDIM*(N-SDIM) <= N*N/2. Note also\n*          that an error is only returned if LWORK < max(1,2*N), but if\n*          SENSE = \'E\' or \'V\' or \'B\' this may not be large enough.\n*          For good performance, LWORK must generally be larger.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates upper bound on the optimal size of the\n*          array WORK, returns this value as the first entry of the WORK\n*          array, and no error message related to LWORK is issued by\n*          XERBLA.\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (N)\n*\n*  BWORK   (workspace) LOGICAL array, dimension (N)\n*          Not referenced if SORT = \'N\'.\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value.\n*          > 0: if INFO = i, and i is\n*             <= N: the QR algorithm failed to compute all the\n*                   eigenvalues; elements 1:ILO-1 and i+1:N of W\n*                   contain those eigenvalues which have converged; if\n*                   JOBVS = \'V\', VS contains the transformation which\n*                   reduces A to its partially converged Schur form.\n*             = N+1: the eigenvalues could not be reordered because some\n*                   eigenvalues were too close to separate (the problem\n*                   is very ill-conditioned);\n*             = N+2: after reordering, roundoff changed values of some\n*                   complex eigenvalues so that leading eigenvalues in\n*                   the Schur form no longer satisfy SELECT=.TRUE.  This\n*                   could also be caused by underflow due to scaling.\n*\n'),(205,'sggev_205.txt','      SUBROUTINE SGGEV( JOBVL, JOBVR, N, A, LDA, B, LDB, ALPHAR, ALPHAI,\n     $                  BETA, VL, LDVL, VR, LDVR, WORK, LWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBVL, JOBVR\n      INTEGER            INFO, LDA, LDB, LDVL, LDVR, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      REAL               A( LDA, * ), ALPHAI( * ), ALPHAR( * ),\n     $                   B( LDB, * ), BETA( * ), VL( LDVL, * ),\n     $                   VR( LDVR, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SGGEV computes for a pair of N-by-N real nonsymmetric matrices (A,B)\n*  the generalized eigenvalues, and optionally, the left and/or right\n*  generalized eigenvectors.\n*\n*  A generalized eigenvalue for a pair of matrices (A,B) is a scalar\n*  lambda or a ratio alpha/beta = lambda, such that A - lambda*B is\n*  singular. It is usually represented as the pair (alpha,beta), as\n*  there is a reasonable interpretation for beta=0, and even for both\n*  being zero.\n*\n*  The right eigenvector v(j) corresponding to the eigenvalue lambda(j)\n*  of (A,B) satisfies\n*\n*                   A * v(j) = lambda(j) * B * v(j).\n*\n*  The left eigenvector u(j) corresponding to the eigenvalue lambda(j)\n*  of (A,B) satisfies\n*\n*                   u(j)**H * A  = lambda(j) * u(j)**H * B .\n*\n*  where u(j)**H is the conjugate-transpose of u(j).\n*\n*\n*  Arguments\n*  =========\n*\n*  JOBVL   (input) CHARACTER*1\n*          = \'N\':  do not compute the left generalized eigenvectors;\n*          = \'V\':  compute the left generalized eigenvectors.\n*\n*  JOBVR   (input) CHARACTER*1\n*          = \'N\':  do not compute the right generalized eigenvectors;\n*          = \'V\':  compute the right generalized eigenvectors.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A, B, VL, and VR.  N >= 0.\n*\n*  A       (input/output) REAL array, dimension (LDA, N)\n*          On entry, the matrix A in the pair (A,B).\n*          On exit, A has been overwritten.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of A.  LDA >= max(1,N).\n*\n*  B       (input/output) REAL array, dimension (LDB, N)\n*          On entry, the matrix B in the pair (A,B).\n*          On exit, B has been overwritten.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of B.  LDB >= max(1,N).\n*\n*  ALPHAR  (output) REAL array, dimension (N)\n*  ALPHAI  (output) REAL array, dimension (N)\n*  BETA    (output) REAL array, dimension (N)\n*          On exit, (ALPHAR(j) + ALPHAI(j)*i)/BETA(j), j=1,...,N, will\n*          be the generalized eigenvalues.  If ALPHAI(j) is zero, then\n*          the j-th eigenvalue is real; if positive, then the j-th and\n*          (j+1)-st eigenvalues are a complex conjugate pair, with\n*          ALPHAI(j+1) negative.\n*\n*          Note: the quotients ALPHAR(j)/BETA(j) and ALPHAI(j)/BETA(j)\n*          may easily over- or underflow, and BETA(j) may even be zero.\n*          Thus, the user should avoid naively computing the ratio\n*          alpha/beta.  However, ALPHAR and ALPHAI will be always less\n*          than and usually comparable with norm(A) in magnitude, and\n*          BETA always less than and usually comparable with norm(B).\n*\n*  VL      (output) REAL array, dimension (LDVL,N)\n*          If JOBVL = \'V\', the left eigenvectors u(j) are stored one\n*          after another in the columns of VL, in the same order as\n*          their eigenvalues. If the j-th eigenvalue is real, then\n*          u(j) = VL(:,j), the j-th column of VL. If the j-th and\n*          (j+1)-th eigenvalues form a complex conjugate pair, then\n*          u(j) = VL(:,j)+i*VL(:,j+1) and u(j+1) = VL(:,j)-i*VL(:,j+1).\n*          Each eigenvector is scaled so the largest component has\n*          abs(real part)+abs(imag. part)=1.\n*          Not referenced if JOBVL = \'N\'.\n*\n*  LDVL    (input) INTEGER\n*          The leading dimension of the matrix VL. LDVL >= 1, and\n*          if JOBVL = \'V\', LDVL >= N.\n*\n*  VR      (output) REAL array, dimension (LDVR,N)\n*          If JOBVR = \'V\', the right eigenvectors v(j) are stored one\n*          after another in the columns of VR, in the same order as\n*          their eigenvalues. If the j-th eigenvalue is real, then\n*          v(j) = VR(:,j), the j-th column of VR. If the j-th and\n*          (j+1)-th eigenvalues form a complex conjugate pair, then\n*          v(j) = VR(:,j)+i*VR(:,j+1) and v(j+1) = VR(:,j)-i*VR(:,j+1).\n*          Each eigenvector is scaled so the largest component has\n*          abs(real part)+abs(imag. part)=1.\n*          Not referenced if JOBVR = \'N\'.\n*\n*  LDVR    (input) INTEGER\n*          The leading dimension of the matrix VR. LDVR >= 1, and\n*          if JOBVR = \'V\', LDVR >= N.\n*\n*  WORK    (workspace/output) REAL array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.  LWORK >= max(1,8*N).\n*          For good performance, LWORK must generally be larger.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          = 1,...,N:\n*                The QZ iteration failed.  No eigenvectors have been\n*                calculated, but ALPHAR(j), ALPHAI(j), and BETA(j)\n*                should be correct for j=INFO+1,...,N.\n*          > N:  =N+1: other than QZ iteration failed in SHGEQZ.\n*                =N+2: error return from STGEVC.\n*\n'),(206,'dggev_206.txt','      SUBROUTINE DGGEV( JOBVL, JOBVR, N, A, LDA, B, LDB, ALPHAR, ALPHAI,\n     $                  BETA, VL, LDVL, VR, LDVR, WORK, LWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBVL, JOBVR\n      INTEGER            INFO, LDA, LDB, LDVL, LDVR, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   A( LDA, * ), ALPHAI( * ), ALPHAR( * ),\n     $                   B( LDB, * ), BETA( * ), VL( LDVL, * ),\n     $                   VR( LDVR, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DGGEV computes for a pair of N-by-N real nonsymmetric matrices (A,B)\n*  the generalized eigenvalues, and optionally, the left and/or right\n*  generalized eigenvectors.\n*\n*  A generalized eigenvalue for a pair of matrices (A,B) is a scalar\n*  lambda or a ratio alpha/beta = lambda, such that A - lambda*B is\n*  singular. It is usually represented as the pair (alpha,beta), as\n*  there is a reasonable interpretation for beta=0, and even for both\n*  being zero.\n*\n*  The right eigenvector v(j) corresponding to the eigenvalue lambda(j)\n*  of (A,B) satisfies\n*\n*                   A * v(j) = lambda(j) * B * v(j).\n*\n*  The left eigenvector u(j) corresponding to the eigenvalue lambda(j)\n*  of (A,B) satisfies\n*\n*                   u(j)**H * A  = lambda(j) * u(j)**H * B .\n*\n*  where u(j)**H is the conjugate-transpose of u(j).\n*\n*\n*  Arguments\n*  =========\n*\n*  JOBVL   (input) CHARACTER*1\n*          = \'N\':  do not compute the left generalized eigenvectors;\n*          = \'V\':  compute the left generalized eigenvectors.\n*\n*  JOBVR   (input) CHARACTER*1\n*          = \'N\':  do not compute the right generalized eigenvectors;\n*          = \'V\':  compute the right generalized eigenvectors.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A, B, VL, and VR.  N >= 0.\n*\n*  A       (input/output) DOUBLE PRECISION array, dimension (LDA, N)\n*          On entry, the matrix A in the pair (A,B).\n*          On exit, A has been overwritten.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of A.  LDA >= max(1,N).\n*\n*  B       (input/output) DOUBLE PRECISION array, dimension (LDB, N)\n*          On entry, the matrix B in the pair (A,B).\n*          On exit, B has been overwritten.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of B.  LDB >= max(1,N).\n*\n*  ALPHAR  (output) DOUBLE PRECISION array, dimension (N)\n*  ALPHAI  (output) DOUBLE PRECISION array, dimension (N)\n*  BETA    (output) DOUBLE PRECISION array, dimension (N)\n*          On exit, (ALPHAR(j) + ALPHAI(j)*i)/BETA(j), j=1,...,N, will\n*          be the generalized eigenvalues.  If ALPHAI(j) is zero, then\n*          the j-th eigenvalue is real; if positive, then the j-th and\n*          (j+1)-st eigenvalues are a complex conjugate pair, with\n*          ALPHAI(j+1) negative.\n*\n*          Note: the quotients ALPHAR(j)/BETA(j) and ALPHAI(j)/BETA(j)\n*          may easily over- or underflow, and BETA(j) may even be zero.\n*          Thus, the user should avoid naively computing the ratio\n*          alpha/beta.  However, ALPHAR and ALPHAI will be always less\n*          than and usually comparable with norm(A) in magnitude, and\n*          BETA always less than and usually comparable with norm(B).\n*\n*  VL      (output) DOUBLE PRECISION array, dimension (LDVL,N)\n*          If JOBVL = \'V\', the left eigenvectors u(j) are stored one\n*          after another in the columns of VL, in the same order as\n*          their eigenvalues. If the j-th eigenvalue is real, then\n*          u(j) = VL(:,j), the j-th column of VL. If the j-th and\n*          (j+1)-th eigenvalues form a complex conjugate pair, then\n*          u(j) = VL(:,j)+i*VL(:,j+1) and u(j+1) = VL(:,j)-i*VL(:,j+1).\n*          Each eigenvector is scaled so the largest component has\n*          abs(real part)+abs(imag. part)=1.\n*          Not referenced if JOBVL = \'N\'.\n*\n*  LDVL    (input) INTEGER\n*          The leading dimension of the matrix VL. LDVL >= 1, and\n*          if JOBVL = \'V\', LDVL >= N.\n*\n*  VR      (output) DOUBLE PRECISION array, dimension (LDVR,N)\n*          If JOBVR = \'V\', the right eigenvectors v(j) are stored one\n*          after another in the columns of VR, in the same order as\n*          their eigenvalues. If the j-th eigenvalue is real, then\n*          v(j) = VR(:,j), the j-th column of VR. If the j-th and\n*          (j+1)-th eigenvalues form a complex conjugate pair, then\n*          v(j) = VR(:,j)+i*VR(:,j+1) and v(j+1) = VR(:,j)-i*VR(:,j+1).\n*          Each eigenvector is scaled so the largest component has\n*          abs(real part)+abs(imag. part)=1.\n*          Not referenced if JOBVR = \'N\'.\n*\n*  LDVR    (input) INTEGER\n*          The leading dimension of the matrix VR. LDVR >= 1, and\n*          if JOBVR = \'V\', LDVR >= N.\n*\n*  WORK    (workspace/output) DOUBLE PRECISION array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.  LWORK >= max(1,8*N).\n*          For good performance, LWORK must generally be larger.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          = 1,...,N:\n*                The QZ iteration failed.  No eigenvectors have been\n*                calculated, but ALPHAR(j), ALPHAI(j), and BETA(j)\n*                should be correct for j=INFO+1,...,N.\n*          > N:  =N+1: other than QZ iteration failed in DHGEQZ.\n*                =N+2: error return from DTGEVC.\n*\n'),(207,'cggev_207.txt','      SUBROUTINE CGGEV( JOBVL, JOBVR, N, A, LDA, B, LDB, ALPHA, BETA,\n     $                  VL, LDVL, VR, LDVR, WORK, LWORK, RWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBVL, JOBVR\n      INTEGER            INFO, LDA, LDB, LDVL, LDVR, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      REAL               RWORK( * )\n      COMPLEX            A( LDA, * ), ALPHA( * ), B( LDB, * ),\n     $                   BETA( * ), VL( LDVL, * ), VR( LDVR, * ),\n     $                   WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CGGEV computes for a pair of N-by-N complex nonsymmetric matrices\n*  (A,B), the generalized eigenvalues, and optionally, the left and/or\n*  right generalized eigenvectors.\n*\n*  A generalized eigenvalue for a pair of matrices (A,B) is a scalar\n*  lambda or a ratio alpha/beta = lambda, such that A - lambda*B is\n*  singular. It is usually represented as the pair (alpha,beta), as\n*  there is a reasonable interpretation for beta=0, and even for both\n*  being zero.\n*\n*  The right generalized eigenvector v(j) corresponding to the\n*  generalized eigenvalue lambda(j) of (A,B) satisfies\n*\n*               A * v(j) = lambda(j) * B * v(j).\n*\n*  The left generalized eigenvector u(j) corresponding to the\n*  generalized eigenvalues lambda(j) of (A,B) satisfies\n*\n*               u(j)**H * A = lambda(j) * u(j)**H * B\n*\n*  where u(j)**H is the conjugate-transpose of u(j).\n*\n*  Arguments\n*  =========\n*\n*  JOBVL   (input) CHARACTER*1\n*          = \'N\':  do not compute the left generalized eigenvectors;\n*          = \'V\':  compute the left generalized eigenvectors.\n*\n*  JOBVR   (input) CHARACTER*1\n*          = \'N\':  do not compute the right generalized eigenvectors;\n*          = \'V\':  compute the right generalized eigenvectors.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A, B, VL, and VR.  N >= 0.\n*\n*  A       (input/output) COMPLEX array, dimension (LDA, N)\n*          On entry, the matrix A in the pair (A,B).\n*          On exit, A has been overwritten.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of A.  LDA >= max(1,N).\n*\n*  B       (input/output) COMPLEX array, dimension (LDB, N)\n*          On entry, the matrix B in the pair (A,B).\n*          On exit, B has been overwritten.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of B.  LDB >= max(1,N).\n*\n*  ALPHA   (output) COMPLEX array, dimension (N)\n*  BETA    (output) COMPLEX array, dimension (N)\n*          On exit, ALPHA(j)/BETA(j), j=1,...,N, will be the\n*          generalized eigenvalues.\n*\n*          Note: the quotients ALPHA(j)/BETA(j) may easily over- or\n*          underflow, and BETA(j) may even be zero.  Thus, the user\n*          should avoid naively computing the ratio alpha/beta.\n*          However, ALPHA will be always less than and usually\n*          comparable with norm(A) in magnitude, and BETA always less\n*          than and usually comparable with norm(B).\n*\n*  VL      (output) COMPLEX array, dimension (LDVL,N)\n*          If JOBVL = \'V\', the left generalized eigenvectors u(j) are\n*          stored one after another in the columns of VL, in the same\n*          order as their eigenvalues.\n*          Each eigenvector is scaled so the largest component has\n*          abs(real part) + abs(imag. part) = 1.\n*          Not referenced if JOBVL = \'N\'.\n*\n*  LDVL    (input) INTEGER\n*          The leading dimension of the matrix VL. LDVL >= 1, and\n*          if JOBVL = \'V\', LDVL >= N.\n*\n*  VR      (output) COMPLEX array, dimension (LDVR,N)\n*          If JOBVR = \'V\', the right generalized eigenvectors v(j) are\n*          stored one after another in the columns of VR, in the same\n*          order as their eigenvalues.\n*          Each eigenvector is scaled so the largest component has\n*          abs(real part) + abs(imag. part) = 1.\n*          Not referenced if JOBVR = \'N\'.\n*\n*  LDVR    (input) INTEGER\n*          The leading dimension of the matrix VR. LDVR >= 1, and\n*          if JOBVR = \'V\', LDVR >= N.\n*\n*  WORK    (workspace/output) COMPLEX array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.  LWORK >= max(1,2*N).\n*          For good performance, LWORK must generally be larger.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  RWORK   (workspace/output) REAL array, dimension (8*N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          =1,...,N:\n*                The QZ iteration failed.  No eigenvectors have been\n*                calculated, but ALPHA(j) and BETA(j) should be\n*                correct for j=INFO+1,...,N.\n*          > N:  =N+1: other then QZ iteration failed in SHGEQZ,\n*                =N+2: error return from STGEVC.\n*\n'),(208,'zggev_208.txt','      SUBROUTINE ZGGEV( JOBVL, JOBVR, N, A, LDA, B, LDB, ALPHA, BETA,\n     $                  VL, LDVL, VR, LDVR, WORK, LWORK, RWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBVL, JOBVR\n      INTEGER            INFO, LDA, LDB, LDVL, LDVR, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   RWORK( * )\n      COMPLEX*16         A( LDA, * ), ALPHA( * ), B( LDB, * ),\n     $                   BETA( * ), VL( LDVL, * ), VR( LDVR, * ),\n     $                   WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZGGEV computes for a pair of N-by-N complex nonsymmetric matrices\n*  (A,B), the generalized eigenvalues, and optionally, the left and/or\n*  right generalized eigenvectors.\n*\n*  A generalized eigenvalue for a pair of matrices (A,B) is a scalar\n*  lambda or a ratio alpha/beta = lambda, such that A - lambda*B is\n*  singular. It is usually represented as the pair (alpha,beta), as\n*  there is a reasonable interpretation for beta=0, and even for both\n*  being zero.\n*\n*  The right generalized eigenvector v(j) corresponding to the\n*  generalized eigenvalue lambda(j) of (A,B) satisfies\n*\n*               A * v(j) = lambda(j) * B * v(j).\n*\n*  The left generalized eigenvector u(j) corresponding to the\n*  generalized eigenvalues lambda(j) of (A,B) satisfies\n*\n*               u(j)**H * A = lambda(j) * u(j)**H * B\n*\n*  where u(j)**H is the conjugate-transpose of u(j).\n*\n*  Arguments\n*  =========\n*\n*  JOBVL   (input) CHARACTER*1\n*          = \'N\':  do not compute the left generalized eigenvectors;\n*          = \'V\':  compute the left generalized eigenvectors.\n*\n*  JOBVR   (input) CHARACTER*1\n*          = \'N\':  do not compute the right generalized eigenvectors;\n*          = \'V\':  compute the right generalized eigenvectors.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A, B, VL, and VR.  N >= 0.\n*\n*  A       (input/output) COMPLEX*16 array, dimension (LDA, N)\n*          On entry, the matrix A in the pair (A,B).\n*          On exit, A has been overwritten.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of A.  LDA >= max(1,N).\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB, N)\n*          On entry, the matrix B in the pair (A,B).\n*          On exit, B has been overwritten.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of B.  LDB >= max(1,N).\n*\n*  ALPHA   (output) COMPLEX*16 array, dimension (N)\n*  BETA    (output) COMPLEX*16 array, dimension (N)\n*          On exit, ALPHA(j)/BETA(j), j=1,...,N, will be the\n*          generalized eigenvalues.\n*\n*          Note: the quotients ALPHA(j)/BETA(j) may easily over- or\n*          underflow, and BETA(j) may even be zero.  Thus, the user\n*          should avoid naively computing the ratio alpha/beta.\n*          However, ALPHA will be always less than and usually\n*          comparable with norm(A) in magnitude, and BETA always less\n*          than and usually comparable with norm(B).\n*\n*  VL      (output) COMPLEX*16 array, dimension (LDVL,N)\n*          If JOBVL = \'V\', the left generalized eigenvectors u(j) are\n*          stored one after another in the columns of VL, in the same\n*          order as their eigenvalues.\n*          Each eigenvector is scaled so the largest component has\n*          abs(real part) + abs(imag. part) = 1.\n*          Not referenced if JOBVL = \'N\'.\n*\n*  LDVL    (input) INTEGER\n*          The leading dimension of the matrix VL. LDVL >= 1, and\n*          if JOBVL = \'V\', LDVL >= N.\n*\n*  VR      (output) COMPLEX*16 array, dimension (LDVR,N)\n*          If JOBVR = \'V\', the right generalized eigenvectors v(j) are\n*          stored one after another in the columns of VR, in the same\n*          order as their eigenvalues.\n*          Each eigenvector is scaled so the largest component has\n*          abs(real part) + abs(imag. part) = 1.\n*          Not referenced if JOBVR = \'N\'.\n*\n*  LDVR    (input) INTEGER\n*          The leading dimension of the matrix VR. LDVR >= 1, and\n*          if JOBVR = \'V\', LDVR >= N.\n*\n*  WORK    (workspace/output) COMPLEX*16 array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.  LWORK >= max(1,2*N).\n*          For good performance, LWORK must generally be larger.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  RWORK   (workspace/output) DOUBLE PRECISION array, dimension (8*N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          =1,...,N:\n*                The QZ iteration failed.  No eigenvectors have been\n*                calculated, but ALPHA(j) and BETA(j) should be\n*                correct for j=INFO+1,...,N.\n*          > N:  =N+1: other then QZ iteration failed in DHGEQZ,\n*                =N+2: error return from DTGEVC.\n*\n'),(209,'sggevx_209.txt','      SUBROUTINE SGGEVX( BALANC, JOBVL, JOBVR, SENSE, N, A, LDA, B, LDB,\n     $                   ALPHAR, ALPHAI, BETA, VL, LDVL, VR, LDVR, ILO,\n     $                   IHI, LSCALE, RSCALE, ABNRM, BBNRM, RCONDE,\n     $                   RCONDV, WORK, LWORK, IWORK, BWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          BALANC, JOBVL, JOBVR, SENSE\n      INTEGER            IHI, ILO, INFO, LDA, LDB, LDVL, LDVR, LWORK, N\n      REAL               ABNRM, BBNRM\n*     ..\n*     .. Array Arguments ..\n      LOGICAL            BWORK( * )\n      INTEGER            IWORK( * )\n      REAL               A( LDA, * ), ALPHAI( * ), ALPHAR( * ),\n     $                   B( LDB, * ), BETA( * ), LSCALE( * ),\n     $                   RCONDE( * ), RCONDV( * ), RSCALE( * ),\n     $                   VL( LDVL, * ), VR( LDVR, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SGGEVX computes for a pair of N-by-N real nonsymmetric matrices (A,B)\n*  the generalized eigenvalues, and optionally, the left and/or right\n*  generalized eigenvectors.\n*\n*  Optionally also, it computes a balancing transformation to improve\n*  the conditioning of the eigenvalues and eigenvectors (ILO, IHI,\n*  LSCALE, RSCALE, ABNRM, and BBNRM), reciprocal condition numbers for\n*  the eigenvalues (RCONDE), and reciprocal condition numbers for the\n*  right eigenvectors (RCONDV).\n*\n*  A generalized eigenvalue for a pair of matrices (A,B) is a scalar\n*  lambda or a ratio alpha/beta = lambda, such that A - lambda*B is\n*  singular. It is usually represented as the pair (alpha,beta), as\n*  there is a reasonable interpretation for beta=0, and even for both\n*  being zero.\n*\n*  The right eigenvector v(j) corresponding to the eigenvalue lambda(j)\n*  of (A,B) satisfies\n*\n*                   A * v(j) = lambda(j) * B * v(j) .\n*\n*  The left eigenvector u(j) corresponding to the eigenvalue lambda(j)\n*  of (A,B) satisfies\n*\n*                   u(j)**H * A  = lambda(j) * u(j)**H * B.\n*\n*  where u(j)**H is the conjugate-transpose of u(j).\n*\n*\n*  Arguments\n*  =========\n*\n*  BALANC  (input) CHARACTER*1\n*          Specifies the balance option to be performed.\n*          = \'N\':  do not diagonally scale or permute;\n*          = \'P\':  permute only;\n*          = \'S\':  scale only;\n*          = \'B\':  both permute and scale.\n*          Computed reciprocal condition numbers will be for the\n*          matrices after permuting and/or balancing. Permuting does\n*          not change condition numbers (in exact arithmetic), but\n*          balancing does.\n*\n*  JOBVL   (input) CHARACTER*1\n*          = \'N\':  do not compute the left generalized eigenvectors;\n*          = \'V\':  compute the left generalized eigenvectors.\n*\n*  JOBVR   (input) CHARACTER*1\n*          = \'N\':  do not compute the right generalized eigenvectors;\n*          = \'V\':  compute the right generalized eigenvectors.\n*\n*  SENSE   (input) CHARACTER*1\n*          Determines which reciprocal condition numbers are computed.\n*          = \'N\': none are computed;\n*          = \'E\': computed for eigenvalues only;\n*          = \'V\': computed for eigenvectors only;\n*          = \'B\': computed for eigenvalues and eigenvectors.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A, B, VL, and VR.  N >= 0.\n*\n*  A       (input/output) REAL array, dimension (LDA, N)\n*          On entry, the matrix A in the pair (A,B).\n*          On exit, A has been overwritten. If JOBVL=\'V\' or JOBVR=\'V\'\n*          or both, then A contains the first part of the real Schur\n*          form of the \"balanced\" versions of the input A and B.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of A.  LDA >= max(1,N).\n*\n*  B       (input/output) REAL array, dimension (LDB, N)\n*          On entry, the matrix B in the pair (A,B).\n*          On exit, B has been overwritten. If JOBVL=\'V\' or JOBVR=\'V\'\n*          or both, then B contains the second part of the real Schur\n*          form of the \"balanced\" versions of the input A and B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of B.  LDB >= max(1,N).\n*\n*  ALPHAR  (output) REAL array, dimension (N)\n*  ALPHAI  (output) REAL array, dimension (N)\n*  BETA    (output) REAL array, dimension (N)\n*          On exit, (ALPHAR(j) + ALPHAI(j)*i)/BETA(j), j=1,...,N, will\n*          be the generalized eigenvalues.  If ALPHAI(j) is zero, then\n*          the j-th eigenvalue is real; if positive, then the j-th and\n*          (j+1)-st eigenvalues are a complex conjugate pair, with\n*          ALPHAI(j+1) negative.\n*\n*          Note: the quotients ALPHAR(j)/BETA(j) and ALPHAI(j)/BETA(j)\n*          may easily over- or underflow, and BETA(j) may even be zero.\n*          Thus, the user should avoid naively computing the ratio\n*          ALPHA/BETA. However, ALPHAR and ALPHAI will be always less\n*          than and usually comparable with norm(A) in magnitude, and\n*          BETA always less than and usually comparable with norm(B).\n*\n*  VL      (output) REAL array, dimension (LDVL,N)\n*          If JOBVL = \'V\', the left eigenvectors u(j) are stored one\n*          after another in the columns of VL, in the same order as\n*          their eigenvalues. If the j-th eigenvalue is real, then\n*          u(j) = VL(:,j), the j-th column of VL. If the j-th and\n*          (j+1)-th eigenvalues form a complex conjugate pair, then\n*          u(j) = VL(:,j)+i*VL(:,j+1) and u(j+1) = VL(:,j)-i*VL(:,j+1).\n*          Each eigenvector will be scaled so the largest component have\n*          abs(real part) + abs(imag. part) = 1.\n*          Not referenced if JOBVL = \'N\'.\n*\n*  LDVL    (input) INTEGER\n*          The leading dimension of the matrix VL. LDVL >= 1, and\n*          if JOBVL = \'V\', LDVL >= N.\n*\n*  VR      (output) REAL array, dimension (LDVR,N)\n*          If JOBVR = \'V\', the right eigenvectors v(j) are stored one\n*          after another in the columns of VR, in the same order as\n*          their eigenvalues. If the j-th eigenvalue is real, then\n*          v(j) = VR(:,j), the j-th column of VR. If the j-th and\n*          (j+1)-th eigenvalues form a complex conjugate pair, then\n*          v(j) = VR(:,j)+i*VR(:,j+1) and v(j+1) = VR(:,j)-i*VR(:,j+1).\n*          Each eigenvector will be scaled so the largest component have\n*          abs(real part) + abs(imag. part) = 1.\n*          Not referenced if JOBVR = \'N\'.\n*\n*  LDVR    (input) INTEGER\n*          The leading dimension of the matrix VR. LDVR >= 1, and\n*          if JOBVR = \'V\', LDVR >= N.\n*\n*  ILO     (output) INTEGER\n*  IHI     (output) INTEGER\n*          ILO and IHI are integer values such that on exit\n*          A(i,j) = 0 and B(i,j) = 0 if i > j and\n*          j = 1,...,ILO-1 or i = IHI+1,...,N.\n*          If BALANC = \'N\' or \'S\', ILO = 1 and IHI = N.\n*\n*  LSCALE  (output) REAL array, dimension (N)\n*          Details of the permutations and scaling factors applied\n*          to the left side of A and B.  If PL(j) is the index of the\n*          row interchanged with row j, and DL(j) is the scaling\n*          factor applied to row j, then\n*            LSCALE(j) = PL(j)  for j = 1,...,ILO-1\n*                      = DL(j)  for j = ILO,...,IHI\n*                      = PL(j)  for j = IHI+1,...,N.\n*          The order in which the interchanges are made is N to IHI+1,\n*          then 1 to ILO-1.\n*\n*  RSCALE  (output) REAL array, dimension (N)\n*          Details of the permutations and scaling factors applied\n*          to the right side of A and B.  If PR(j) is the index of the\n*          column interchanged with column j, and DR(j) is the scaling\n*          factor applied to column j, then\n*            RSCALE(j) = PR(j)  for j = 1,...,ILO-1\n*                      = DR(j)  for j = ILO,...,IHI\n*                      = PR(j)  for j = IHI+1,...,N\n*          The order in which the interchanges are made is N to IHI+1,\n*          then 1 to ILO-1.\n*\n*  ABNRM   (output) REAL\n*          The one-norm of the balanced matrix A.\n*\n*  BBNRM   (output) REAL\n*          The one-norm of the balanced matrix B.\n*\n*  RCONDE  (output) REAL array, dimension (N)\n*          If SENSE = \'E\' or \'B\', the reciprocal condition numbers of\n*          the eigenvalues, stored in consecutive elements of the array.\n*          For a complex conjugate pair of eigenvalues two consecutive\n*          elements of RCONDE are set to the same value. Thus RCONDE(j),\n*          RCONDV(j), and the j-th columns of VL and VR all correspond\n*          to the j-th eigenpair.\n*          If SENSE = \'N\' or \'V\', RCONDE is not referenced.\n*\n*  RCONDV  (output) REAL array, dimension (N)\n*          If SENSE = \'V\' or \'B\', the estimated reciprocal condition\n*          numbers of the eigenvectors, stored in consecutive elements\n*          of the array. For a complex eigenvector two consecutive\n*          elements of RCONDV are set to the same value. If the\n*          eigenvalues cannot be reordered to compute RCONDV(j),\n*          RCONDV(j) is set to 0; this can only occur when the true\n*          value would be very small anyway.\n*          If SENSE = \'N\' or \'E\', RCONDV is not referenced.\n*\n*  WORK    (workspace/output) REAL array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK. LWORK >= max(1,2*N).\n*          If BALANC = \'S\' or \'B\', or JOBVL = \'V\', or JOBVR = \'V\',\n*          LWORK >= max(1,6*N).\n*          If SENSE = \'E\', LWORK >= max(1,10*N).\n*          If SENSE = \'V\' or \'B\', LWORK >= 2*N*N+8*N+16.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  IWORK   (workspace) INTEGER array, dimension (N+6)\n*          If SENSE = \'E\', IWORK is not referenced.\n*\n*  BWORK   (workspace) LOGICAL array, dimension (N)\n*          If SENSE = \'N\', BWORK is not referenced.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          = 1,...,N:\n*                The QZ iteration failed.  No eigenvectors have been\n*                calculated, but ALPHAR(j), ALPHAI(j), and BETA(j)\n*                should be correct for j=INFO+1,...,N.\n*          > N:  =N+1: other than QZ iteration failed in SHGEQZ.\n*                =N+2: error return from STGEVC.\n*\n'),(210,'dggevx_210.txt','      SUBROUTINE DGGEVX( BALANC, JOBVL, JOBVR, SENSE, N, A, LDA, B, LDB,\n     $                   ALPHAR, ALPHAI, BETA, VL, LDVL, VR, LDVR, ILO,\n     $                   IHI, LSCALE, RSCALE, ABNRM, BBNRM, RCONDE,\n     $                   RCONDV, WORK, LWORK, IWORK, BWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          BALANC, JOBVL, JOBVR, SENSE\n      INTEGER            IHI, ILO, INFO, LDA, LDB, LDVL, LDVR, LWORK, N\n      DOUBLE PRECISION   ABNRM, BBNRM\n*     ..\n*     .. Array Arguments ..\n      LOGICAL            BWORK( * )\n      INTEGER            IWORK( * )\n      DOUBLE PRECISION   A( LDA, * ), ALPHAI( * ), ALPHAR( * ),\n     $                   B( LDB, * ), BETA( * ), LSCALE( * ),\n     $                   RCONDE( * ), RCONDV( * ), RSCALE( * ),\n     $                   VL( LDVL, * ), VR( LDVR, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DGGEVX computes for a pair of N-by-N real nonsymmetric matrices (A,B)\n*  the generalized eigenvalues, and optionally, the left and/or right\n*  generalized eigenvectors.\n*\n*  Optionally also, it computes a balancing transformation to improve\n*  the conditioning of the eigenvalues and eigenvectors (ILO, IHI,\n*  LSCALE, RSCALE, ABNRM, and BBNRM), reciprocal condition numbers for\n*  the eigenvalues (RCONDE), and reciprocal condition numbers for the\n*  right eigenvectors (RCONDV).\n*\n*  A generalized eigenvalue for a pair of matrices (A,B) is a scalar\n*  lambda or a ratio alpha/beta = lambda, such that A - lambda*B is\n*  singular. It is usually represented as the pair (alpha,beta), as\n*  there is a reasonable interpretation for beta=0, and even for both\n*  being zero.\n*\n*  The right eigenvector v(j) corresponding to the eigenvalue lambda(j)\n*  of (A,B) satisfies\n*\n*                   A * v(j) = lambda(j) * B * v(j) .\n*\n*  The left eigenvector u(j) corresponding to the eigenvalue lambda(j)\n*  of (A,B) satisfies\n*\n*                   u(j)**H * A  = lambda(j) * u(j)**H * B.\n*\n*  where u(j)**H is the conjugate-transpose of u(j).\n*\n*\n*  Arguments\n*  =========\n*\n*  BALANC  (input) CHARACTER*1\n*          Specifies the balance option to be performed.\n*          = \'N\':  do not diagonally scale or permute;\n*          = \'P\':  permute only;\n*          = \'S\':  scale only;\n*          = \'B\':  both permute and scale.\n*          Computed reciprocal condition numbers will be for the\n*          matrices after permuting and/or balancing. Permuting does\n*          not change condition numbers (in exact arithmetic), but\n*          balancing does.\n*\n*  JOBVL   (input) CHARACTER*1\n*          = \'N\':  do not compute the left generalized eigenvectors;\n*          = \'V\':  compute the left generalized eigenvectors.\n*\n*  JOBVR   (input) CHARACTER*1\n*          = \'N\':  do not compute the right generalized eigenvectors;\n*          = \'V\':  compute the right generalized eigenvectors.\n*\n*  SENSE   (input) CHARACTER*1\n*          Determines which reciprocal condition numbers are computed.\n*          = \'N\': none are computed;\n*          = \'E\': computed for eigenvalues only;\n*          = \'V\': computed for eigenvectors only;\n*          = \'B\': computed for eigenvalues and eigenvectors.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A, B, VL, and VR.  N >= 0.\n*\n*  A       (input/output) DOUBLE PRECISION array, dimension (LDA, N)\n*          On entry, the matrix A in the pair (A,B).\n*          On exit, A has been overwritten. If JOBVL=\'V\' or JOBVR=\'V\'\n*          or both, then A contains the first part of the real Schur\n*          form of the \"balanced\" versions of the input A and B.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of A.  LDA >= max(1,N).\n*\n*  B       (input/output) DOUBLE PRECISION array, dimension (LDB, N)\n*          On entry, the matrix B in the pair (A,B).\n*          On exit, B has been overwritten. If JOBVL=\'V\' or JOBVR=\'V\'\n*          or both, then B contains the second part of the real Schur\n*          form of the \"balanced\" versions of the input A and B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of B.  LDB >= max(1,N).\n*\n*  ALPHAR  (output) DOUBLE PRECISION array, dimension (N)\n*  ALPHAI  (output) DOUBLE PRECISION array, dimension (N)\n*  BETA    (output) DOUBLE PRECISION array, dimension (N)\n*          On exit, (ALPHAR(j) + ALPHAI(j)*i)/BETA(j), j=1,...,N, will\n*          be the generalized eigenvalues.  If ALPHAI(j) is zero, then\n*          the j-th eigenvalue is real; if positive, then the j-th and\n*          (j+1)-st eigenvalues are a complex conjugate pair, with\n*          ALPHAI(j+1) negative.\n*\n*          Note: the quotients ALPHAR(j)/BETA(j) and ALPHAI(j)/BETA(j)\n*          may easily over- or underflow, and BETA(j) may even be zero.\n*          Thus, the user should avoid naively computing the ratio\n*          ALPHA/BETA. However, ALPHAR and ALPHAI will be always less\n*          than and usually comparable with norm(A) in magnitude, and\n*          BETA always less than and usually comparable with norm(B).\n*\n*  VL      (output) DOUBLE PRECISION array, dimension (LDVL,N)\n*          If JOBVL = \'V\', the left eigenvectors u(j) are stored one\n*          after another in the columns of VL, in the same order as\n*          their eigenvalues. If the j-th eigenvalue is real, then\n*          u(j) = VL(:,j), the j-th column of VL. If the j-th and\n*          (j+1)-th eigenvalues form a complex conjugate pair, then\n*          u(j) = VL(:,j)+i*VL(:,j+1) and u(j+1) = VL(:,j)-i*VL(:,j+1).\n*          Each eigenvector will be scaled so the largest component have\n*          abs(real part) + abs(imag. part) = 1.\n*          Not referenced if JOBVL = \'N\'.\n*\n*  LDVL    (input) INTEGER\n*          The leading dimension of the matrix VL. LDVL >= 1, and\n*          if JOBVL = \'V\', LDVL >= N.\n*\n*  VR      (output) DOUBLE PRECISION array, dimension (LDVR,N)\n*          If JOBVR = \'V\', the right eigenvectors v(j) are stored one\n*          after another in the columns of VR, in the same order as\n*          their eigenvalues. If the j-th eigenvalue is real, then\n*          v(j) = VR(:,j), the j-th column of VR. If the j-th and\n*          (j+1)-th eigenvalues form a complex conjugate pair, then\n*          v(j) = VR(:,j)+i*VR(:,j+1) and v(j+1) = VR(:,j)-i*VR(:,j+1).\n*          Each eigenvector will be scaled so the largest component have\n*          abs(real part) + abs(imag. part) = 1.\n*          Not referenced if JOBVR = \'N\'.\n*\n*  LDVR    (input) INTEGER\n*          The leading dimension of the matrix VR. LDVR >= 1, and\n*          if JOBVR = \'V\', LDVR >= N.\n*\n*  ILO     (output) INTEGER\n*  IHI     (output) INTEGER\n*          ILO and IHI are integer values such that on exit\n*          A(i,j) = 0 and B(i,j) = 0 if i > j and\n*          j = 1,...,ILO-1 or i = IHI+1,...,N.\n*          If BALANC = \'N\' or \'S\', ILO = 1 and IHI = N.\n*\n*  LSCALE  (output) DOUBLE PRECISION array, dimension (N)\n*          Details of the permutations and scaling factors applied\n*          to the left side of A and B.  If PL(j) is the index of the\n*          row interchanged with row j, and DL(j) is the scaling\n*          factor applied to row j, then\n*            LSCALE(j) = PL(j)  for j = 1,...,ILO-1\n*                      = DL(j)  for j = ILO,...,IHI\n*                      = PL(j)  for j = IHI+1,...,N.\n*          The order in which the interchanges are made is N to IHI+1,\n*          then 1 to ILO-1.\n*\n*  RSCALE  (output) DOUBLE PRECISION array, dimension (N)\n*          Details of the permutations and scaling factors applied\n*          to the right side of A and B.  If PR(j) is the index of the\n*          column interchanged with column j, and DR(j) is the scaling\n*          factor applied to column j, then\n*            RSCALE(j) = PR(j)  for j = 1,...,ILO-1\n*                      = DR(j)  for j = ILO,...,IHI\n*                      = PR(j)  for j = IHI+1,...,N\n*          The order in which the interchanges are made is N to IHI+1,\n*          then 1 to ILO-1.\n*\n*  ABNRM   (output) DOUBLE PRECISION\n*          The one-norm of the balanced matrix A.\n*\n*  BBNRM   (output) DOUBLE PRECISION\n*          The one-norm of the balanced matrix B.\n*\n*  RCONDE  (output) DOUBLE PRECISION array, dimension (N)\n*          If SENSE = \'E\' or \'B\', the reciprocal condition numbers of\n*          the eigenvalues, stored in consecutive elements of the array.\n*          For a complex conjugate pair of eigenvalues two consecutive\n*          elements of RCONDE are set to the same value. Thus RCONDE(j),\n*          RCONDV(j), and the j-th columns of VL and VR all correspond\n*          to the j-th eigenpair.\n*          If SENSE = \'N or \'V\', RCONDE is not referenced.\n*\n*  RCONDV  (output) DOUBLE PRECISION array, dimension (N)\n*          If SENSE = \'V\' or \'B\', the estimated reciprocal condition\n*          numbers of the eigenvectors, stored in consecutive elements\n*          of the array. For a complex eigenvector two consecutive\n*          elements of RCONDV are set to the same value. If the\n*          eigenvalues cannot be reordered to compute RCONDV(j),\n*          RCONDV(j) is set to 0; this can only occur when the true\n*          value would be very small anyway.\n*          If SENSE = \'N\' or \'E\', RCONDV is not referenced.\n*\n*  WORK    (workspace/output) DOUBLE PRECISION array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK. LWORK >= max(1,2*N).\n*          If BALANC = \'S\' or \'B\', or JOBVL = \'V\', or JOBVR = \'V\',\n*          LWORK >= max(1,6*N).\n*          If SENSE = \'E\' or \'B\', LWORK >= max(1,10*N).\n*          If SENSE = \'V\' or \'B\', LWORK >= 2*N*N+8*N+16.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  IWORK   (workspace) INTEGER array, dimension (N+6)\n*          If SENSE = \'E\', IWORK is not referenced.\n*\n*  BWORK   (workspace) LOGICAL array, dimension (N)\n*          If SENSE = \'N\', BWORK is not referenced.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          = 1,...,N:\n*                The QZ iteration failed.  No eigenvectors have been\n*                calculated, but ALPHAR(j), ALPHAI(j), and BETA(j)\n*                should be correct for j=INFO+1,...,N.\n*          > N:  =N+1: other than QZ iteration failed in DHGEQZ.\n*                =N+2: error return from DTGEVC.\n*\n'),(211,'cggevx_211.txt','      SUBROUTINE CGGEVX( BALANC, JOBVL, JOBVR, SENSE, N, A, LDA, B, LDB,\n     $                   ALPHA, BETA, VL, LDVL, VR, LDVR, ILO, IHI,\n     $                   LSCALE, RSCALE, ABNRM, BBNRM, RCONDE, RCONDV,\n     $                   WORK, LWORK, RWORK, IWORK, BWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          BALANC, JOBVL, JOBVR, SENSE\n      INTEGER            IHI, ILO, INFO, LDA, LDB, LDVL, LDVR, LWORK, N\n      REAL               ABNRM, BBNRM\n*     ..\n*     .. Array Arguments ..\n      LOGICAL            BWORK( * )\n      INTEGER            IWORK( * )\n      REAL               LSCALE( * ), RCONDE( * ), RCONDV( * ),\n     $                   RSCALE( * ), RWORK( * )\n      COMPLEX            A( LDA, * ), ALPHA( * ), B( LDB, * ),\n     $                   BETA( * ), VL( LDVL, * ), VR( LDVR, * ),\n     $                   WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CGGEVX computes for a pair of N-by-N complex nonsymmetric matrices\n*  (A,B) the generalized eigenvalues, and optionally, the left and/or\n*  right generalized eigenvectors.\n*\n*  Optionally, it also computes a balancing transformation to improve\n*  the conditioning of the eigenvalues and eigenvectors (ILO, IHI,\n*  LSCALE, RSCALE, ABNRM, and BBNRM), reciprocal condition numbers for\n*  the eigenvalues (RCONDE), and reciprocal condition numbers for the\n*  right eigenvectors (RCONDV).\n*\n*  A generalized eigenvalue for a pair of matrices (A,B) is a scalar\n*  lambda or a ratio alpha/beta = lambda, such that A - lambda*B is\n*  singular. It is usually represented as the pair (alpha,beta), as\n*  there is a reasonable interpretation for beta=0, and even for both\n*  being zero.\n*\n*  The right eigenvector v(j) corresponding to the eigenvalue lambda(j)\n*  of (A,B) satisfies\n*                   A * v(j) = lambda(j) * B * v(j) .\n*  The left eigenvector u(j) corresponding to the eigenvalue lambda(j)\n*  of (A,B) satisfies\n*                   u(j)**H * A  = lambda(j) * u(j)**H * B.\n*  where u(j)**H is the conjugate-transpose of u(j).\n*\n*\n*  Arguments\n*  =========\n*\n*  BALANC  (input) CHARACTER*1\n*          Specifies the balance option to be performed:\n*          = \'N\':  do not diagonally scale or permute;\n*          = \'P\':  permute only;\n*          = \'S\':  scale only;\n*          = \'B\':  both permute and scale.\n*          Computed reciprocal condition numbers will be for the\n*          matrices after permuting and/or balancing. Permuting does\n*          not change condition numbers (in exact arithmetic), but\n*          balancing does.\n*\n*  JOBVL   (input) CHARACTER*1\n*          = \'N\':  do not compute the left generalized eigenvectors;\n*          = \'V\':  compute the left generalized eigenvectors.\n*\n*  JOBVR   (input) CHARACTER*1\n*          = \'N\':  do not compute the right generalized eigenvectors;\n*          = \'V\':  compute the right generalized eigenvectors.\n*\n*  SENSE   (input) CHARACTER*1\n*          Determines which reciprocal condition numbers are computed.\n*          = \'N\': none are computed;\n*          = \'E\': computed for eigenvalues only;\n*          = \'V\': computed for eigenvectors only;\n*          = \'B\': computed for eigenvalues and eigenvectors.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A, B, VL, and VR.  N >= 0.\n*\n*  A       (input/output) COMPLEX array, dimension (LDA, N)\n*          On entry, the matrix A in the pair (A,B).\n*          On exit, A has been overwritten. If JOBVL=\'V\' or JOBVR=\'V\'\n*          or both, then A contains the first part of the complex Schur\n*          form of the \"balanced\" versions of the input A and B.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of A.  LDA >= max(1,N).\n*\n*  B       (input/output) COMPLEX array, dimension (LDB, N)\n*          On entry, the matrix B in the pair (A,B).\n*          On exit, B has been overwritten. If JOBVL=\'V\' or JOBVR=\'V\'\n*          or both, then B contains the second part of the complex\n*          Schur form of the \"balanced\" versions of the input A and B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of B.  LDB >= max(1,N).\n*\n*  ALPHA   (output) COMPLEX array, dimension (N)\n*  BETA    (output) COMPLEX array, dimension (N)\n*          On exit, ALPHA(j)/BETA(j), j=1,...,N, will be the generalized\n*          eigenvalues.\n*\n*          Note: the quotient ALPHA(j)/BETA(j) ) may easily over- or\n*          underflow, and BETA(j) may even be zero.  Thus, the user\n*          should avoid naively computing the ratio ALPHA/BETA.\n*          However, ALPHA will be always less than and usually\n*          comparable with norm(A) in magnitude, and BETA always less\n*          than and usually comparable with norm(B).\n*\n*  VL      (output) COMPLEX array, dimension (LDVL,N)\n*          If JOBVL = \'V\', the left generalized eigenvectors u(j) are\n*          stored one after another in the columns of VL, in the same\n*          order as their eigenvalues.\n*          Each eigenvector will be scaled so the largest component\n*          will have abs(real part) + abs(imag. part) = 1.\n*          Not referenced if JOBVL = \'N\'.\n*\n*  LDVL    (input) INTEGER\n*          The leading dimension of the matrix VL. LDVL >= 1, and\n*          if JOBVL = \'V\', LDVL >= N.\n*\n*  VR      (output) COMPLEX array, dimension (LDVR,N)\n*          If JOBVR = \'V\', the right generalized eigenvectors v(j) are\n*          stored one after another in the columns of VR, in the same\n*          order as their eigenvalues.\n*          Each eigenvector will be scaled so the largest component\n*          will have abs(real part) + abs(imag. part) = 1.\n*          Not referenced if JOBVR = \'N\'.\n*\n*  LDVR    (input) INTEGER\n*          The leading dimension of the matrix VR. LDVR >= 1, and\n*          if JOBVR = \'V\', LDVR >= N.\n*\n*  ILO     (output) INTEGER\n*  IHI     (output) INTEGER\n*          ILO and IHI are integer values such that on exit\n*          A(i,j) = 0 and B(i,j) = 0 if i > j and\n*          j = 1,...,ILO-1 or i = IHI+1,...,N.\n*          If BALANC = \'N\' or \'S\', ILO = 1 and IHI = N.\n*\n*  LSCALE  (output) REAL array, dimension (N)\n*          Details of the permutations and scaling factors applied\n*          to the left side of A and B.  If PL(j) is the index of the\n*          row interchanged with row j, and DL(j) is the scaling\n*          factor applied to row j, then\n*            LSCALE(j) = PL(j)  for j = 1,...,ILO-1\n*                      = DL(j)  for j = ILO,...,IHI\n*                      = PL(j)  for j = IHI+1,...,N.\n*          The order in which the interchanges are made is N to IHI+1,\n*          then 1 to ILO-1.\n*\n*  RSCALE  (output) REAL array, dimension (N)\n*          Details of the permutations and scaling factors applied\n*          to the right side of A and B.  If PR(j) is the index of the\n*          column interchanged with column j, and DR(j) is the scaling\n*          factor applied to column j, then\n*            RSCALE(j) = PR(j)  for j = 1,...,ILO-1\n*                      = DR(j)  for j = ILO,...,IHI\n*                      = PR(j)  for j = IHI+1,...,N\n*          The order in which the interchanges are made is N to IHI+1,\n*          then 1 to ILO-1.\n*\n*  ABNRM   (output) REAL\n*          The one-norm of the balanced matrix A.\n*\n*  BBNRM   (output) REAL\n*          The one-norm of the balanced matrix B.\n*\n*  RCONDE  (output) REAL array, dimension (N)\n*          If SENSE = \'E\' or \'B\', the reciprocal condition numbers of\n*          the eigenvalues, stored in consecutive elements of the array.\n*          If SENSE = \'N\' or \'V\', RCONDE is not referenced.\n*\n*  RCONDV  (output) REAL array, dimension (N)\n*          If SENSE = \'V\' or \'B\', the estimated reciprocal condition\n*          numbers of the eigenvectors, stored in consecutive elements\n*          of the array. If the eigenvalues cannot be reordered to\n*          compute RCONDV(j), RCONDV(j) is set to 0; this can only occur\n*          when the true value would be very small anyway. \n*          If SENSE = \'N\' or \'E\', RCONDV is not referenced.\n*\n*  WORK    (workspace/output) COMPLEX array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK. LWORK >= max(1,2*N).\n*          If SENSE = \'E\', LWORK >= max(1,4*N).\n*          If SENSE = \'V\' or \'B\', LWORK >= max(1,2*N*N+2*N).\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  RWORK   (workspace) REAL array, dimension (lrwork)\n*          lrwork must be at least max(1,6*N) if BALANC = \'S\' or \'B\',\n*          and at least max(1,2*N) otherwise.\n*          Real workspace.\n*\n*  IWORK   (workspace) INTEGER array, dimension (N+2)\n*          If SENSE = \'E\', IWORK is not referenced.\n*\n*  BWORK   (workspace) LOGICAL array, dimension (N)\n*          If SENSE = \'N\', BWORK is not referenced.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          = 1,...,N:\n*                The QZ iteration failed.  No eigenvectors have been\n*                calculated, but ALPHA(j) and BETA(j) should be correct\n*                for j=INFO+1,...,N.\n*          > N:  =N+1: other than QZ iteration failed in CHGEQZ.\n*                =N+2: error return from CTGEVC.\n*\n'),(212,'zggevx_212.txt','      SUBROUTINE ZGGEVX( BALANC, JOBVL, JOBVR, SENSE, N, A, LDA, B, LDB,\n     $                   ALPHA, BETA, VL, LDVL, VR, LDVR, ILO, IHI,\n     $                   LSCALE, RSCALE, ABNRM, BBNRM, RCONDE, RCONDV,\n     $                   WORK, LWORK, RWORK, IWORK, BWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          BALANC, JOBVL, JOBVR, SENSE\n      INTEGER            IHI, ILO, INFO, LDA, LDB, LDVL, LDVR, LWORK, N\n      DOUBLE PRECISION   ABNRM, BBNRM\n*     ..\n*     .. Array Arguments ..\n      LOGICAL            BWORK( * )\n      INTEGER            IWORK( * )\n      DOUBLE PRECISION   LSCALE( * ), RCONDE( * ), RCONDV( * ),\n     $                   RSCALE( * ), RWORK( * )\n      COMPLEX*16         A( LDA, * ), ALPHA( * ), B( LDB, * ),\n     $                   BETA( * ), VL( LDVL, * ), VR( LDVR, * ),\n     $                   WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZGGEVX computes for a pair of N-by-N complex nonsymmetric matrices\n*  (A,B) the generalized eigenvalues, and optionally, the left and/or\n*  right generalized eigenvectors.\n*\n*  Optionally, it also computes a balancing transformation to improve\n*  the conditioning of the eigenvalues and eigenvectors (ILO, IHI,\n*  LSCALE, RSCALE, ABNRM, and BBNRM), reciprocal condition numbers for\n*  the eigenvalues (RCONDE), and reciprocal condition numbers for the\n*  right eigenvectors (RCONDV).\n*\n*  A generalized eigenvalue for a pair of matrices (A,B) is a scalar\n*  lambda or a ratio alpha/beta = lambda, such that A - lambda*B is\n*  singular. It is usually represented as the pair (alpha,beta), as\n*  there is a reasonable interpretation for beta=0, and even for both\n*  being zero.\n*\n*  The right eigenvector v(j) corresponding to the eigenvalue lambda(j)\n*  of (A,B) satisfies\n*                   A * v(j) = lambda(j) * B * v(j) .\n*  The left eigenvector u(j) corresponding to the eigenvalue lambda(j)\n*  of (A,B) satisfies\n*                   u(j)**H * A  = lambda(j) * u(j)**H * B.\n*  where u(j)**H is the conjugate-transpose of u(j).\n*\n*\n*  Arguments\n*  =========\n*\n*  BALANC  (input) CHARACTER*1\n*          Specifies the balance option to be performed:\n*          = \'N\':  do not diagonally scale or permute;\n*          = \'P\':  permute only;\n*          = \'S\':  scale only;\n*          = \'B\':  both permute and scale.\n*          Computed reciprocal condition numbers will be for the\n*          matrices after permuting and/or balancing. Permuting does\n*          not change condition numbers (in exact arithmetic), but\n*          balancing does.\n*\n*  JOBVL   (input) CHARACTER*1\n*          = \'N\':  do not compute the left generalized eigenvectors;\n*          = \'V\':  compute the left generalized eigenvectors.\n*\n*  JOBVR   (input) CHARACTER*1\n*          = \'N\':  do not compute the right generalized eigenvectors;\n*          = \'V\':  compute the right generalized eigenvectors.\n*\n*  SENSE   (input) CHARACTER*1\n*          Determines which reciprocal condition numbers are computed.\n*          = \'N\': none are computed;\n*          = \'E\': computed for eigenvalues only;\n*          = \'V\': computed for eigenvectors only;\n*          = \'B\': computed for eigenvalues and eigenvectors.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A, B, VL, and VR.  N >= 0.\n*\n*  A       (input/output) COMPLEX*16 array, dimension (LDA, N)\n*          On entry, the matrix A in the pair (A,B).\n*          On exit, A has been overwritten. If JOBVL=\'V\' or JOBVR=\'V\'\n*          or both, then A contains the first part of the complex Schur\n*          form of the \"balanced\" versions of the input A and B.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of A.  LDA >= max(1,N).\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB, N)\n*          On entry, the matrix B in the pair (A,B).\n*          On exit, B has been overwritten. If JOBVL=\'V\' or JOBVR=\'V\'\n*          or both, then B contains the second part of the complex\n*          Schur form of the \"balanced\" versions of the input A and B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of B.  LDB >= max(1,N).\n*\n*  ALPHA   (output) COMPLEX*16 array, dimension (N)\n*  BETA    (output) COMPLEX*16 array, dimension (N)\n*          On exit, ALPHA(j)/BETA(j), j=1,...,N, will be the generalized\n*          eigenvalues.\n*\n*          Note: the quotient ALPHA(j)/BETA(j) ) may easily over- or\n*          underflow, and BETA(j) may even be zero.  Thus, the user\n*          should avoid naively computing the ratio ALPHA/BETA.\n*          However, ALPHA will be always less than and usually\n*          comparable with norm(A) in magnitude, and BETA always less\n*          than and usually comparable with norm(B).\n*\n*  VL      (output) COMPLEX*16 array, dimension (LDVL,N)\n*          If JOBVL = \'V\', the left generalized eigenvectors u(j) are\n*          stored one after another in the columns of VL, in the same\n*          order as their eigenvalues.\n*          Each eigenvector will be scaled so the largest component\n*          will have abs(real part) + abs(imag. part) = 1.\n*          Not referenced if JOBVL = \'N\'.\n*\n*  LDVL    (input) INTEGER\n*          The leading dimension of the matrix VL. LDVL >= 1, and\n*          if JOBVL = \'V\', LDVL >= N.\n*\n*  VR      (output) COMPLEX*16 array, dimension (LDVR,N)\n*          If JOBVR = \'V\', the right generalized eigenvectors v(j) are\n*          stored one after another in the columns of VR, in the same\n*          order as their eigenvalues.\n*          Each eigenvector will be scaled so the largest component\n*          will have abs(real part) + abs(imag. part) = 1.\n*          Not referenced if JOBVR = \'N\'.\n*\n*  LDVR    (input) INTEGER\n*          The leading dimension of the matrix VR. LDVR >= 1, and\n*          if JOBVR = \'V\', LDVR >= N.\n*\n*  ILO     (output) INTEGER\n*  IHI     (output) INTEGER\n*          ILO and IHI are integer values such that on exit\n*          A(i,j) = 0 and B(i,j) = 0 if i > j and\n*          j = 1,...,ILO-1 or i = IHI+1,...,N.\n*          If BALANC = \'N\' or \'S\', ILO = 1 and IHI = N.\n*\n*  LSCALE  (output) DOUBLE PRECISION array, dimension (N)\n*          Details of the permutations and scaling factors applied\n*          to the left side of A and B.  If PL(j) is the index of the\n*          row interchanged with row j, and DL(j) is the scaling\n*          factor applied to row j, then\n*            LSCALE(j) = PL(j)  for j = 1,...,ILO-1\n*                      = DL(j)  for j = ILO,...,IHI\n*                      = PL(j)  for j = IHI+1,...,N.\n*          The order in which the interchanges are made is N to IHI+1,\n*          then 1 to ILO-1.\n*\n*  RSCALE  (output) DOUBLE PRECISION array, dimension (N)\n*          Details of the permutations and scaling factors applied\n*          to the right side of A and B.  If PR(j) is the index of the\n*          column interchanged with column j, and DR(j) is the scaling\n*          factor applied to column j, then\n*            RSCALE(j) = PR(j)  for j = 1,...,ILO-1\n*                      = DR(j)  for j = ILO,...,IHI\n*                      = PR(j)  for j = IHI+1,...,N\n*          The order in which the interchanges are made is N to IHI+1,\n*          then 1 to ILO-1.\n*\n*  ABNRM   (output) DOUBLE PRECISION\n*          The one-norm of the balanced matrix A.\n*\n*  BBNRM   (output) DOUBLE PRECISION\n*          The one-norm of the balanced matrix B.\n*\n*  RCONDE  (output) DOUBLE PRECISION array, dimension (N)\n*          If SENSE = \'E\' or \'B\', the reciprocal condition numbers of\n*          the eigenvalues, stored in consecutive elements of the array.\n*          If SENSE = \'N\' or \'V\', RCONDE is not referenced.\n*\n*  RCONDV  (output) DOUBLE PRECISION array, dimension (N)\n*          If JOB = \'V\' or \'B\', the estimated reciprocal condition\n*          numbers of the eigenvectors, stored in consecutive elements\n*          of the array. If the eigenvalues cannot be reordered to\n*          compute RCONDV(j), RCONDV(j) is set to 0; this can only occur\n*          when the true value would be very small anyway.\n*          If SENSE = \'N\' or \'E\', RCONDV is not referenced.\n*\n*  WORK    (workspace/output) COMPLEX*16 array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK. LWORK >= max(1,2*N).\n*          If SENSE = \'E\', LWORK >= max(1,4*N).\n*          If SENSE = \'V\' or \'B\', LWORK >= max(1,2*N*N+2*N).\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  RWORK   (workspace) REAL array, dimension (lrwork)\n*          lrwork must be at least max(1,6*N) if BALANC = \'S\' or \'B\',\n*          and at least max(1,2*N) otherwise.\n*          Real workspace.\n*\n*  IWORK   (workspace) INTEGER array, dimension (N+2)\n*          If SENSE = \'E\', IWORK is not referenced.\n*\n*  BWORK   (workspace) LOGICAL array, dimension (N)\n*          If SENSE = \'N\', BWORK is not referenced.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          = 1,...,N:\n*                The QZ iteration failed.  No eigenvectors have been\n*                calculated, but ALPHA(j) and BETA(j) should be correct\n*                for j=INFO+1,...,N.\n*          > N:  =N+1: other than QZ iteration failed in ZHGEQZ.\n*                =N+2: error return from ZTGEVC.\n*\n'),(213,'sgges_213.txt','      SUBROUTINE SGGES( JOBVSL, JOBVSR, SORT, SELCTG, N, A, LDA, B, LDB,\n     $                  SDIM, ALPHAR, ALPHAI, BETA, VSL, LDVSL, VSR,\n     $                  LDVSR, WORK, LWORK, BWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBVSL, JOBVSR, SORT\n      INTEGER            INFO, LDA, LDB, LDVSL, LDVSR, LWORK, N, SDIM\n*     ..\n*     .. Array Arguments ..\n      LOGICAL            BWORK( * )\n      REAL               A( LDA, * ), ALPHAI( * ), ALPHAR( * ),\n     $                   B( LDB, * ), BETA( * ), VSL( LDVSL, * ),\n     $                   VSR( LDVSR, * ), WORK( * )\n*     ..\n*     .. Function Arguments ..\n      LOGICAL            SELCTG\n      EXTERNAL           SELCTG\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SGGES computes for a pair of N-by-N real nonsymmetric matrices (A,B),\n*  the generalized eigenvalues, the generalized real Schur form (S,T),\n*  optionally, the left and/or right matrices of Schur vectors (VSL and\n*  VSR). This gives the generalized Schur factorization\n*\n*           (A,B) = ( (VSL)*S*(VSR)**T, (VSL)*T*(VSR)**T )\n*\n*  Optionally, it also orders the eigenvalues so that a selected cluster\n*  of eigenvalues appears in the leading diagonal blocks of the upper\n*  quasi-triangular matrix S and the upper triangular matrix T.The\n*  leading columns of VSL and VSR then form an orthonormal basis for the\n*  corresponding left and right eigenspaces (deflating subspaces).\n*\n*  (If only the generalized eigenvalues are needed, use the driver\n*  SGGEV instead, which is faster.)\n*\n*  A generalized eigenvalue for a pair of matrices (A,B) is a scalar w\n*  or a ratio alpha/beta = w, such that  A - w*B is singular.  It is\n*  usually represented as the pair (alpha,beta), as there is a\n*  reasonable interpretation for beta=0 or both being zero.\n*\n*  A pair of matrices (S,T) is in generalized real Schur form if T is\n*  upper triangular with non-negative diagonal and S is block upper\n*  triangular with 1-by-1 and 2-by-2 blocks.  1-by-1 blocks correspond\n*  to real generalized eigenvalues, while 2-by-2 blocks of S will be\n*  \"standardized\" by making the corresponding elements of T have the\n*  form:\n*          [  a  0  ]\n*          [  0  b  ]\n*\n*  and the pair of corresponding 2-by-2 blocks in S and T will have a\n*  complex conjugate pair of generalized eigenvalues.\n*\n*\n*  Arguments\n*  =========\n*\n*  JOBVSL  (input) CHARACTER*1\n*          = \'N\':  do not compute the left Schur vectors;\n*          = \'V\':  compute the left Schur vectors.\n*\n*  JOBVSR  (input) CHARACTER*1\n*          = \'N\':  do not compute the right Schur vectors;\n*          = \'V\':  compute the right Schur vectors.\n*\n*  SORT    (input) CHARACTER*1\n*          Specifies whether or not to order the eigenvalues on the\n*          diagonal of the generalized Schur form.\n*          = \'N\':  Eigenvalues are not ordered;\n*          = \'S\':  Eigenvalues are ordered (see SELCTG);\n*\n*  SELCTG  (external procedure) LOGICAL FUNCTION of three REAL arguments\n*          SELCTG must be declared EXTERNAL in the calling subroutine.\n*          If SORT = \'N\', SELCTG is not referenced.\n*          If SORT = \'S\', SELCTG is used to select eigenvalues to sort\n*          to the top left of the Schur form.\n*          An eigenvalue (ALPHAR(j)+ALPHAI(j))/BETA(j) is selected if\n*          SELCTG(ALPHAR(j),ALPHAI(j),BETA(j)) is true; i.e. if either\n*          one of a complex conjugate pair of eigenvalues is selected,\n*          then both complex eigenvalues are selected.\n*\n*          Note that in the ill-conditioned case, a selected complex\n*          eigenvalue may no longer satisfy SELCTG(ALPHAR(j),ALPHAI(j),\n*          BETA(j)) = .TRUE. after ordering. INFO is to be set to N+2\n*          in this case.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A, B, VSL, and VSR.  N >= 0.\n*\n*  A       (input/output) REAL array, dimension (LDA, N)\n*          On entry, the first of the pair of matrices.\n*          On exit, A has been overwritten by its generalized Schur\n*          form S.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of A.  LDA >= max(1,N).\n*\n*  B       (input/output) REAL array, dimension (LDB, N)\n*          On entry, the second of the pair of matrices.\n*          On exit, B has been overwritten by its generalized Schur\n*          form T.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of B.  LDB >= max(1,N).\n*\n*  SDIM    (output) INTEGER\n*          If SORT = \'N\', SDIM = 0.\n*          If SORT = \'S\', SDIM = number of eigenvalues (after sorting)\n*          for which SELCTG is true.  (Complex conjugate pairs for which\n*          SELCTG is true for either eigenvalue count as 2.)\n*\n*  ALPHAR  (output) REAL array, dimension (N)\n*  ALPHAI  (output) REAL array, dimension (N)\n*  BETA    (output) REAL array, dimension (N)\n*          On exit, (ALPHAR(j) + ALPHAI(j)*i)/BETA(j), j=1,...,N, will\n*          be the generalized eigenvalues.  ALPHAR(j) + ALPHAI(j)*i,\n*          and  BETA(j),j=1,...,N are the diagonals of the complex Schur\n*          form (S,T) that would result if the 2-by-2 diagonal blocks of\n*          the real Schur form of (A,B) were further reduced to\n*          triangular form using 2-by-2 complex unitary transformations.\n*          If ALPHAI(j) is zero, then the j-th eigenvalue is real; if\n*          positive, then the j-th and (j+1)-st eigenvalues are a\n*          complex conjugate pair, with ALPHAI(j+1) negative.\n*\n*          Note: the quotients ALPHAR(j)/BETA(j) and ALPHAI(j)/BETA(j)\n*          may easily over- or underflow, and BETA(j) may even be zero.\n*          Thus, the user should avoid naively computing the ratio.\n*          However, ALPHAR and ALPHAI will be always less than and\n*          usually comparable with norm(A) in magnitude, and BETA always\n*          less than and usually comparable with norm(B).\n*\n*  VSL     (output) REAL array, dimension (LDVSL,N)\n*          If JOBVSL = \'V\', VSL will contain the left Schur vectors.\n*          Not referenced if JOBVSL = \'N\'.\n*\n*  LDVSL   (input) INTEGER\n*          The leading dimension of the matrix VSL. LDVSL >=1, and\n*          if JOBVSL = \'V\', LDVSL >= N.\n*\n*  VSR     (output) REAL array, dimension (LDVSR,N)\n*          If JOBVSR = \'V\', VSR will contain the right Schur vectors.\n*          Not referenced if JOBVSR = \'N\'.\n*\n*  LDVSR   (input) INTEGER\n*          The leading dimension of the matrix VSR. LDVSR >= 1, and\n*          if JOBVSR = \'V\', LDVSR >= N.\n*\n*  WORK    (workspace/output) REAL array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.\n*          If N = 0, LWORK >= 1, else LWORK >= max(8*N,6*N+16).\n*          For good performance , LWORK must generally be larger.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  BWORK   (workspace) LOGICAL array, dimension (N)\n*          Not referenced if SORT = \'N\'.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          = 1,...,N:\n*                The QZ iteration failed.  (A,B) are not in Schur\n*                form, but ALPHAR(j), ALPHAI(j), and BETA(j) should\n*                be correct for j=INFO+1,...,N.\n*          > N:  =N+1: other than QZ iteration failed in SHGEQZ.\n*                =N+2: after reordering, roundoff changed values of\n*                      some complex eigenvalues so that leading\n*                      eigenvalues in the Generalized Schur form no\n*                      longer satisfy SELCTG=.TRUE.  This could also\n*                      be caused due to scaling.\n*                =N+3: reordering failed in STGSEN.\n*\n'),(214,'dgges_214.txt','      SUBROUTINE DGGES( JOBVSL, JOBVSR, SORT, SELCTG, N, A, LDA, B, LDB,\n     $                  SDIM, ALPHAR, ALPHAI, BETA, VSL, LDVSL, VSR,\n     $                  LDVSR, WORK, LWORK, BWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBVSL, JOBVSR, SORT\n      INTEGER            INFO, LDA, LDB, LDVSL, LDVSR, LWORK, N, SDIM\n*     ..\n*     .. Array Arguments ..\n      LOGICAL            BWORK( * )\n      DOUBLE PRECISION   A( LDA, * ), ALPHAI( * ), ALPHAR( * ),\n     $                   B( LDB, * ), BETA( * ), VSL( LDVSL, * ),\n     $                   VSR( LDVSR, * ), WORK( * )\n*     ..\n*     .. Function Arguments ..\n      LOGICAL            SELCTG\n      EXTERNAL           SELCTG\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DGGES computes for a pair of N-by-N real nonsymmetric matrices (A,B),\n*  the generalized eigenvalues, the generalized real Schur form (S,T),\n*  optionally, the left and/or right matrices of Schur vectors (VSL and\n*  VSR). This gives the generalized Schur factorization\n*\n*           (A,B) = ( (VSL)*S*(VSR)**T, (VSL)*T*(VSR)**T )\n*\n*  Optionally, it also orders the eigenvalues so that a selected cluster\n*  of eigenvalues appears in the leading diagonal blocks of the upper\n*  quasi-triangular matrix S and the upper triangular matrix T.The\n*  leading columns of VSL and VSR then form an orthonormal basis for the\n*  corresponding left and right eigenspaces (deflating subspaces).\n*\n*  (If only the generalized eigenvalues are needed, use the driver\n*  DGGEV instead, which is faster.)\n*\n*  A generalized eigenvalue for a pair of matrices (A,B) is a scalar w\n*  or a ratio alpha/beta = w, such that  A - w*B is singular.  It is\n*  usually represented as the pair (alpha,beta), as there is a\n*  reasonable interpretation for beta=0 or both being zero.\n*\n*  A pair of matrices (S,T) is in generalized real Schur form if T is\n*  upper triangular with non-negative diagonal and S is block upper\n*  triangular with 1-by-1 and 2-by-2 blocks.  1-by-1 blocks correspond\n*  to real generalized eigenvalues, while 2-by-2 blocks of S will be\n*  \"standardized\" by making the corresponding elements of T have the\n*  form:\n*          [  a  0  ]\n*          [  0  b  ]\n*\n*  and the pair of corresponding 2-by-2 blocks in S and T will have a\n*  complex conjugate pair of generalized eigenvalues.\n*\n*\n*  Arguments\n*  =========\n*\n*  JOBVSL  (input) CHARACTER*1\n*          = \'N\':  do not compute the left Schur vectors;\n*          = \'V\':  compute the left Schur vectors.\n*\n*  JOBVSR  (input) CHARACTER*1\n*          = \'N\':  do not compute the right Schur vectors;\n*          = \'V\':  compute the right Schur vectors.\n*\n*  SORT    (input) CHARACTER*1\n*          Specifies whether or not to order the eigenvalues on the\n*          diagonal of the generalized Schur form.\n*          = \'N\':  Eigenvalues are not ordered;\n*          = \'S\':  Eigenvalues are ordered (see SELCTG);\n*\n*  SELCTG  (external procedure) LOGICAL FUNCTION of three DOUBLE PRECISION arguments\n*          SELCTG must be declared EXTERNAL in the calling subroutine.\n*          If SORT = \'N\', SELCTG is not referenced.\n*          If SORT = \'S\', SELCTG is used to select eigenvalues to sort\n*          to the top left of the Schur form.\n*          An eigenvalue (ALPHAR(j)+ALPHAI(j))/BETA(j) is selected if\n*          SELCTG(ALPHAR(j),ALPHAI(j),BETA(j)) is true; i.e. if either\n*          one of a complex conjugate pair of eigenvalues is selected,\n*          then both complex eigenvalues are selected.\n*\n*          Note that in the ill-conditioned case, a selected complex\n*          eigenvalue may no longer satisfy SELCTG(ALPHAR(j),ALPHAI(j),\n*          BETA(j)) = .TRUE. after ordering. INFO is to be set to N+2\n*          in this case.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A, B, VSL, and VSR.  N >= 0.\n*\n*  A       (input/output) DOUBLE PRECISION array, dimension (LDA, N)\n*          On entry, the first of the pair of matrices.\n*          On exit, A has been overwritten by its generalized Schur\n*          form S.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of A.  LDA >= max(1,N).\n*\n*  B       (input/output) DOUBLE PRECISION array, dimension (LDB, N)\n*          On entry, the second of the pair of matrices.\n*          On exit, B has been overwritten by its generalized Schur\n*          form T.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of B.  LDB >= max(1,N).\n*\n*  SDIM    (output) INTEGER\n*          If SORT = \'N\', SDIM = 0.\n*          If SORT = \'S\', SDIM = number of eigenvalues (after sorting)\n*          for which SELCTG is true.  (Complex conjugate pairs for which\n*          SELCTG is true for either eigenvalue count as 2.)\n*\n*  ALPHAR  (output) DOUBLE PRECISION array, dimension (N)\n*  ALPHAI  (output) DOUBLE PRECISION array, dimension (N)\n*  BETA    (output) DOUBLE PRECISION array, dimension (N)\n*          On exit, (ALPHAR(j) + ALPHAI(j)*i)/BETA(j), j=1,...,N, will\n*          be the generalized eigenvalues.  ALPHAR(j) + ALPHAI(j)*i,\n*          and  BETA(j),j=1,...,N are the diagonals of the complex Schur\n*          form (S,T) that would result if the 2-by-2 diagonal blocks of\n*          the real Schur form of (A,B) were further reduced to\n*          triangular form using 2-by-2 complex unitary transformations.\n*          If ALPHAI(j) is zero, then the j-th eigenvalue is real; if\n*          positive, then the j-th and (j+1)-st eigenvalues are a\n*          complex conjugate pair, with ALPHAI(j+1) negative.\n*\n*          Note: the quotients ALPHAR(j)/BETA(j) and ALPHAI(j)/BETA(j)\n*          may easily over- or underflow, and BETA(j) may even be zero.\n*          Thus, the user should avoid naively computing the ratio.\n*          However, ALPHAR and ALPHAI will be always less than and\n*          usually comparable with norm(A) in magnitude, and BETA always\n*          less than and usually comparable with norm(B).\n*\n*  VSL     (output) DOUBLE PRECISION array, dimension (LDVSL,N)\n*          If JOBVSL = \'V\', VSL will contain the left Schur vectors.\n*          Not referenced if JOBVSL = \'N\'.\n*\n*  LDVSL   (input) INTEGER\n*          The leading dimension of the matrix VSL. LDVSL >=1, and\n*          if JOBVSL = \'V\', LDVSL >= N.\n*\n*  VSR     (output) DOUBLE PRECISION array, dimension (LDVSR,N)\n*          If JOBVSR = \'V\', VSR will contain the right Schur vectors.\n*          Not referenced if JOBVSR = \'N\'.\n*\n*  LDVSR   (input) INTEGER\n*          The leading dimension of the matrix VSR. LDVSR >= 1, and\n*          if JOBVSR = \'V\', LDVSR >= N.\n*\n*  WORK    (workspace/output) DOUBLE PRECISION array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.\n*          If N = 0, LWORK >= 1, else LWORK >= 8*N+16.\n*          For good performance , LWORK must generally be larger.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  BWORK   (workspace) LOGICAL array, dimension (N)\n*          Not referenced if SORT = \'N\'.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          = 1,...,N:\n*                The QZ iteration failed.  (A,B) are not in Schur\n*                form, but ALPHAR(j), ALPHAI(j), and BETA(j) should\n*                be correct for j=INFO+1,...,N.\n*          > N:  =N+1: other than QZ iteration failed in DHGEQZ.\n*                =N+2: after reordering, roundoff changed values of\n*                      some complex eigenvalues so that leading\n*                      eigenvalues in the Generalized Schur form no\n*                      longer satisfy SELCTG=.TRUE.  This could also\n*                      be caused due to scaling.\n*                =N+3: reordering failed in DTGSEN.\n*\n'),(215,'cgges_215.txt','      SUBROUTINE CGGES( JOBVSL, JOBVSR, SORT, SELCTG, N, A, LDA, B, LDB,\n     $                  SDIM, ALPHA, BETA, VSL, LDVSL, VSR, LDVSR, WORK,\n     $                  LWORK, RWORK, BWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBVSL, JOBVSR, SORT\n      INTEGER            INFO, LDA, LDB, LDVSL, LDVSR, LWORK, N, SDIM\n*     ..\n*     .. Array Arguments ..\n      LOGICAL            BWORK( * )\n      REAL               RWORK( * )\n      COMPLEX            A( LDA, * ), ALPHA( * ), B( LDB, * ),\n     $                   BETA( * ), VSL( LDVSL, * ), VSR( LDVSR, * ),\n     $                   WORK( * )\n*     ..\n*     .. Function Arguments ..\n      LOGICAL            SELCTG\n      EXTERNAL           SELCTG\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CGGES computes for a pair of N-by-N complex nonsymmetric matrices\n*  (A,B), the generalized eigenvalues, the generalized complex Schur\n*  form (S, T), and optionally left and/or right Schur vectors (VSL\n*  and VSR). This gives the generalized Schur factorization\n*\n*          (A,B) = ( (VSL)*S*(VSR)**H, (VSL)*T*(VSR)**H )\n*\n*  where (VSR)**H is the conjugate-transpose of VSR.\n*\n*  Optionally, it also orders the eigenvalues so that a selected cluster\n*  of eigenvalues appears in the leading diagonal blocks of the upper\n*  triangular matrix S and the upper triangular matrix T. The leading\n*  columns of VSL and VSR then form an unitary basis for the\n*  corresponding left and right eigenspaces (deflating subspaces).\n*\n*  (If only the generalized eigenvalues are needed, use the driver\n*  CGGEV instead, which is faster.)\n*\n*  A generalized eigenvalue for a pair of matrices (A,B) is a scalar w\n*  or a ratio alpha/beta = w, such that  A - w*B is singular.  It is\n*  usually represented as the pair (alpha,beta), as there is a\n*  reasonable interpretation for beta=0, and even for both being zero.\n*\n*  A pair of matrices (S,T) is in generalized complex Schur form if S\n*  and T are upper triangular and, in addition, the diagonal elements\n*  of T are non-negative real numbers.\n*\n*  Arguments\n*  =========\n*\n*  JOBVSL  (input) CHARACTER*1\n*          = \'N\':  do not compute the left Schur vectors;\n*          = \'V\':  compute the left Schur vectors.\n*\n*  JOBVSR  (input) CHARACTER*1\n*          = \'N\':  do not compute the right Schur vectors;\n*          = \'V\':  compute the right Schur vectors.\n*\n*  SORT    (input) CHARACTER*1\n*          Specifies whether or not to order the eigenvalues on the\n*          diagonal of the generalized Schur form.\n*          = \'N\':  Eigenvalues are not ordered;\n*          = \'S\':  Eigenvalues are ordered (see SELCTG).\n*\n*  SELCTG  (external procedure) LOGICAL FUNCTION of two COMPLEX arguments\n*          SELCTG must be declared EXTERNAL in the calling subroutine.\n*          If SORT = \'N\', SELCTG is not referenced.\n*          If SORT = \'S\', SELCTG is used to select eigenvalues to sort\n*          to the top left of the Schur form.\n*          An eigenvalue ALPHA(j)/BETA(j) is selected if\n*          SELCTG(ALPHA(j),BETA(j)) is true.\n*\n*          Note that a selected complex eigenvalue may no longer satisfy\n*          SELCTG(ALPHA(j),BETA(j)) = .TRUE. after ordering, since\n*          ordering may change the value of complex eigenvalues\n*          (especially if the eigenvalue is ill-conditioned), in this\n*          case INFO is set to N+2 (See INFO below).\n*\n*  N       (input) INTEGER\n*          The order of the matrices A, B, VSL, and VSR.  N >= 0.\n*\n*  A       (input/output) COMPLEX array, dimension (LDA, N)\n*          On entry, the first of the pair of matrices.\n*          On exit, A has been overwritten by its generalized Schur\n*          form S.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of A.  LDA >= max(1,N).\n*\n*  B       (input/output) COMPLEX array, dimension (LDB, N)\n*          On entry, the second of the pair of matrices.\n*          On exit, B has been overwritten by its generalized Schur\n*          form T.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of B.  LDB >= max(1,N).\n*\n*  SDIM    (output) INTEGER\n*          If SORT = \'N\', SDIM = 0.\n*          If SORT = \'S\', SDIM = number of eigenvalues (after sorting)\n*          for which SELCTG is true.\n*\n*  ALPHA   (output) COMPLEX array, dimension (N)\n*  BETA    (output) COMPLEX array, dimension (N)\n*          On exit,  ALPHA(j)/BETA(j), j=1,...,N, will be the\n*          generalized eigenvalues.  ALPHA(j), j=1,...,N  and  BETA(j),\n*          j=1,...,N  are the diagonals of the complex Schur form (A,B)\n*          output by CGGES. The  BETA(j) will be non-negative real.\n*\n*          Note: the quotients ALPHA(j)/BETA(j) may easily over- or\n*          underflow, and BETA(j) may even be zero.  Thus, the user\n*          should avoid naively computing the ratio alpha/beta.\n*          However, ALPHA will be always less than and usually\n*          comparable with norm(A) in magnitude, and BETA always less\n*          than and usually comparable with norm(B).\n*\n*  VSL     (output) COMPLEX array, dimension (LDVSL,N)\n*          If JOBVSL = \'V\', VSL will contain the left Schur vectors.\n*          Not referenced if JOBVSL = \'N\'.\n*\n*  LDVSL   (input) INTEGER\n*          The leading dimension of the matrix VSL. LDVSL >= 1, and\n*          if JOBVSL = \'V\', LDVSL >= N.\n*\n*  VSR     (output) COMPLEX array, dimension (LDVSR,N)\n*          If JOBVSR = \'V\', VSR will contain the right Schur vectors.\n*          Not referenced if JOBVSR = \'N\'.\n*\n*  LDVSR   (input) INTEGER\n*          The leading dimension of the matrix VSR. LDVSR >= 1, and\n*          if JOBVSR = \'V\', LDVSR >= N.\n*\n*  WORK    (workspace/output) COMPLEX array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.  LWORK >= max(1,2*N).\n*          For good performance, LWORK must generally be larger.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  RWORK   (workspace) REAL array, dimension (8*N)\n*\n*  BWORK   (workspace) LOGICAL array, dimension (N)\n*          Not referenced if SORT = \'N\'.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          =1,...,N:\n*                The QZ iteration failed.  (A,B) are not in Schur\n*                form, but ALPHA(j) and BETA(j) should be correct for\n*                j=INFO+1,...,N.\n*          > N:  =N+1: other than QZ iteration failed in CHGEQZ\n*                =N+2: after reordering, roundoff changed values of\n*                      some complex eigenvalues so that leading\n*                      eigenvalues in the Generalized Schur form no\n*                      longer satisfy SELCTG=.TRUE.  This could also\n*                      be caused due to scaling.\n*                =N+3: reordering falied in CTGSEN.\n*\n'),(216,'zgges_216.txt','      SUBROUTINE ZGGES( JOBVSL, JOBVSR, SORT, SELCTG, N, A, LDA, B, LDB,\n     $                  SDIM, ALPHA, BETA, VSL, LDVSL, VSR, LDVSR, WORK,\n     $                  LWORK, RWORK, BWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBVSL, JOBVSR, SORT\n      INTEGER            INFO, LDA, LDB, LDVSL, LDVSR, LWORK, N, SDIM\n*     ..\n*     .. Array Arguments ..\n      LOGICAL            BWORK( * )\n      DOUBLE PRECISION   RWORK( * )\n      COMPLEX*16         A( LDA, * ), ALPHA( * ), B( LDB, * ),\n     $                   BETA( * ), VSL( LDVSL, * ), VSR( LDVSR, * ),\n     $                   WORK( * )\n*     ..\n*     .. Function Arguments ..\n      LOGICAL            SELCTG\n      EXTERNAL           SELCTG\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZGGES computes for a pair of N-by-N complex nonsymmetric matrices\n*  (A,B), the generalized eigenvalues, the generalized complex Schur\n*  form (S, T), and optionally left and/or right Schur vectors (VSL\n*  and VSR). This gives the generalized Schur factorization\n*\n*          (A,B) = ( (VSL)*S*(VSR)**H, (VSL)*T*(VSR)**H )\n*\n*  where (VSR)**H is the conjugate-transpose of VSR.\n*\n*  Optionally, it also orders the eigenvalues so that a selected cluster\n*  of eigenvalues appears in the leading diagonal blocks of the upper\n*  triangular matrix S and the upper triangular matrix T. The leading\n*  columns of VSL and VSR then form an unitary basis for the\n*  corresponding left and right eigenspaces (deflating subspaces).\n*\n*  (If only the generalized eigenvalues are needed, use the driver\n*  ZGGEV instead, which is faster.)\n*\n*  A generalized eigenvalue for a pair of matrices (A,B) is a scalar w\n*  or a ratio alpha/beta = w, such that  A - w*B is singular.  It is\n*  usually represented as the pair (alpha,beta), as there is a\n*  reasonable interpretation for beta=0, and even for both being zero.\n*\n*  A pair of matrices (S,T) is in generalized complex Schur form if S\n*  and T are upper triangular and, in addition, the diagonal elements\n*  of T are non-negative real numbers.\n*\n*  Arguments\n*  =========\n*\n*  JOBVSL  (input) CHARACTER*1\n*          = \'N\':  do not compute the left Schur vectors;\n*          = \'V\':  compute the left Schur vectors.\n*\n*  JOBVSR  (input) CHARACTER*1\n*          = \'N\':  do not compute the right Schur vectors;\n*          = \'V\':  compute the right Schur vectors.\n*\n*  SORT    (input) CHARACTER*1\n*          Specifies whether or not to order the eigenvalues on the\n*          diagonal of the generalized Schur form.\n*          = \'N\':  Eigenvalues are not ordered;\n*          = \'S\':  Eigenvalues are ordered (see SELCTG).\n*\n*  SELCTG  (external procedure) LOGICAL FUNCTION of two COMPLEX*16 arguments\n*          SELCTG must be declared EXTERNAL in the calling subroutine.\n*          If SORT = \'N\', SELCTG is not referenced.\n*          If SORT = \'S\', SELCTG is used to select eigenvalues to sort\n*          to the top left of the Schur form.\n*          An eigenvalue ALPHA(j)/BETA(j) is selected if\n*          SELCTG(ALPHA(j),BETA(j)) is true.\n*\n*          Note that a selected complex eigenvalue may no longer satisfy\n*          SELCTG(ALPHA(j),BETA(j)) = .TRUE. after ordering, since\n*          ordering may change the value of complex eigenvalues\n*          (especially if the eigenvalue is ill-conditioned), in this\n*          case INFO is set to N+2 (See INFO below).\n*\n*  N       (input) INTEGER\n*          The order of the matrices A, B, VSL, and VSR.  N >= 0.\n*\n*  A       (input/output) COMPLEX*16 array, dimension (LDA, N)\n*          On entry, the first of the pair of matrices.\n*          On exit, A has been overwritten by its generalized Schur\n*          form S.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of A.  LDA >= max(1,N).\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB, N)\n*          On entry, the second of the pair of matrices.\n*          On exit, B has been overwritten by its generalized Schur\n*          form T.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of B.  LDB >= max(1,N).\n*\n*  SDIM    (output) INTEGER\n*          If SORT = \'N\', SDIM = 0.\n*          If SORT = \'S\', SDIM = number of eigenvalues (after sorting)\n*          for which SELCTG is true.\n*\n*  ALPHA   (output) COMPLEX*16 array, dimension (N)\n*  BETA    (output) COMPLEX*16 array, dimension (N)\n*          On exit,  ALPHA(j)/BETA(j), j=1,...,N, will be the\n*          generalized eigenvalues.  ALPHA(j), j=1,...,N  and  BETA(j),\n*          j=1,...,N  are the diagonals of the complex Schur form (A,B)\n*          output by ZGGES. The  BETA(j) will be non-negative real.\n*\n*          Note: the quotients ALPHA(j)/BETA(j) may easily over- or\n*          underflow, and BETA(j) may even be zero.  Thus, the user\n*          should avoid naively computing the ratio alpha/beta.\n*          However, ALPHA will be always less than and usually\n*          comparable with norm(A) in magnitude, and BETA always less\n*          than and usually comparable with norm(B).\n*\n*  VSL     (output) COMPLEX*16 array, dimension (LDVSL,N)\n*          If JOBVSL = \'V\', VSL will contain the left Schur vectors.\n*          Not referenced if JOBVSL = \'N\'.\n*\n*  LDVSL   (input) INTEGER\n*          The leading dimension of the matrix VSL. LDVSL >= 1, and\n*          if JOBVSL = \'V\', LDVSL >= N.\n*\n*  VSR     (output) COMPLEX*16 array, dimension (LDVSR,N)\n*          If JOBVSR = \'V\', VSR will contain the right Schur vectors.\n*          Not referenced if JOBVSR = \'N\'.\n*\n*  LDVSR   (input) INTEGER\n*          The leading dimension of the matrix VSR. LDVSR >= 1, and\n*          if JOBVSR = \'V\', LDVSR >= N.\n*\n*  WORK    (workspace/output) COMPLEX*16 array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.  LWORK >= max(1,2*N).\n*          For good performance, LWORK must generally be larger.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (8*N)\n*\n*  BWORK   (workspace) LOGICAL array, dimension (N)\n*          Not referenced if SORT = \'N\'.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          =1,...,N:\n*                The QZ iteration failed.  (A,B) are not in Schur\n*                form, but ALPHA(j) and BETA(j) should be correct for\n*                j=INFO+1,...,N.\n*          > N:  =N+1: other than QZ iteration failed in ZHGEQZ\n*                =N+2: after reordering, roundoff changed values of\n*                      some complex eigenvalues so that leading\n*                      eigenvalues in the Generalized Schur form no\n*                      longer satisfy SELCTG=.TRUE.  This could also\n*                      be caused due to scaling.\n*                =N+3: reordering falied in ZTGSEN.\n*\n'),(217,'sggesx_217.txt','      SUBROUTINE SGGESX( JOBVSL, JOBVSR, SORT, SELCTG, SENSE, N, A, LDA,\n     $                   B, LDB, SDIM, ALPHAR, ALPHAI, BETA, VSL, LDVSL,\n     $                   VSR, LDVSR, RCONDE, RCONDV, WORK, LWORK, IWORK,\n     $                   LIWORK, BWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2.1)                                  --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2009                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBVSL, JOBVSR, SENSE, SORT\n      INTEGER            INFO, LDA, LDB, LDVSL, LDVSR, LIWORK, LWORK, N,\n     $                   SDIM\n*     ..\n*     .. Array Arguments ..\n      LOGICAL            BWORK( * )\n      INTEGER            IWORK( * )\n      REAL               A( LDA, * ), ALPHAI( * ), ALPHAR( * ),\n     $                   B( LDB, * ), BETA( * ), RCONDE( 2 ),\n     $                   RCONDV( 2 ), VSL( LDVSL, * ), VSR( LDVSR, * ),\n     $                   WORK( * )\n*     ..\n*     .. Function Arguments ..\n      LOGICAL            SELCTG\n      EXTERNAL           SELCTG\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SGGESX computes for a pair of N-by-N real nonsymmetric matrices\n*  (A,B), the generalized eigenvalues, the real Schur form (S,T), and,\n*  optionally, the left and/or right matrices of Schur vectors (VSL and\n*  VSR).  This gives the generalized Schur factorization\n*\n*       (A,B) = ( (VSL) S (VSR)**T, (VSL) T (VSR)**T )\n*\n*  Optionally, it also orders the eigenvalues so that a selected cluster\n*  of eigenvalues appears in the leading diagonal blocks of the upper\n*  quasi-triangular matrix S and the upper triangular matrix T; computes\n*  a reciprocal condition number for the average of the selected\n*  eigenvalues (RCONDE); and computes a reciprocal condition number for\n*  the right and left deflating subspaces corresponding to the selected\n*  eigenvalues (RCONDV). The leading columns of VSL and VSR then form\n*  an orthonormal basis for the corresponding left and right eigenspaces\n*  (deflating subspaces).\n*\n*  A generalized eigenvalue for a pair of matrices (A,B) is a scalar w\n*  or a ratio alpha/beta = w, such that  A - w*B is singular.  It is\n*  usually represented as the pair (alpha,beta), as there is a\n*  reasonable interpretation for beta=0 or for both being zero.\n*\n*  A pair of matrices (S,T) is in generalized real Schur form if T is\n*  upper triangular with non-negative diagonal and S is block upper\n*  triangular with 1-by-1 and 2-by-2 blocks.  1-by-1 blocks correspond\n*  to real generalized eigenvalues, while 2-by-2 blocks of S will be\n*  \"standardized\" by making the corresponding elements of T have the\n*  form:\n*          [  a  0  ]\n*          [  0  b  ]\n*\n*  and the pair of corresponding 2-by-2 blocks in S and T will have a\n*  complex conjugate pair of generalized eigenvalues.\n*\n*\n*  Arguments\n*  =========\n*\n*  JOBVSL  (input) CHARACTER*1\n*          = \'N\':  do not compute the left Schur vectors;\n*          = \'V\':  compute the left Schur vectors.\n*\n*  JOBVSR  (input) CHARACTER*1\n*          = \'N\':  do not compute the right Schur vectors;\n*          = \'V\':  compute the right Schur vectors.\n*\n*  SORT    (input) CHARACTER*1\n*          Specifies whether or not to order the eigenvalues on the\n*          diagonal of the generalized Schur form.\n*          = \'N\':  Eigenvalues are not ordered;\n*          = \'S\':  Eigenvalues are ordered (see SELCTG).\n*\n*  SELCTG  (external procedure) LOGICAL FUNCTION of three REAL arguments\n*          SELCTG must be declared EXTERNAL in the calling subroutine.\n*          If SORT = \'N\', SELCTG is not referenced.\n*          If SORT = \'S\', SELCTG is used to select eigenvalues to sort\n*          to the top left of the Schur form.\n*          An eigenvalue (ALPHAR(j)+ALPHAI(j))/BETA(j) is selected if\n*          SELCTG(ALPHAR(j),ALPHAI(j),BETA(j)) is true; i.e. if either\n*          one of a complex conjugate pair of eigenvalues is selected,\n*          then both complex eigenvalues are selected.\n*          Note that a selected complex eigenvalue may no longer satisfy\n*          SELCTG(ALPHAR(j),ALPHAI(j),BETA(j)) = .TRUE. after ordering,\n*          since ordering may change the value of complex eigenvalues\n*          (especially if the eigenvalue is ill-conditioned), in this\n*          case INFO is set to N+3.\n*\n*  SENSE   (input) CHARACTER*1\n*          Determines which reciprocal condition numbers are computed.\n*          = \'N\' : None are computed;\n*          = \'E\' : Computed for average of selected eigenvalues only;\n*          = \'V\' : Computed for selected deflating subspaces only;\n*          = \'B\' : Computed for both.\n*          If SENSE = \'E\', \'V\', or \'B\', SORT must equal \'S\'.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A, B, VSL, and VSR.  N >= 0.\n*\n*  A       (input/output) REAL array, dimension (LDA, N)\n*          On entry, the first of the pair of matrices.\n*          On exit, A has been overwritten by its generalized Schur\n*          form S.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of A.  LDA >= max(1,N).\n*\n*  B       (input/output) REAL array, dimension (LDB, N)\n*          On entry, the second of the pair of matrices.\n*          On exit, B has been overwritten by its generalized Schur\n*          form T.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of B.  LDB >= max(1,N).\n*\n*  SDIM    (output) INTEGER\n*          If SORT = \'N\', SDIM = 0.\n*          If SORT = \'S\', SDIM = number of eigenvalues (after sorting)\n*          for which SELCTG is true.  (Complex conjugate pairs for which\n*          SELCTG is true for either eigenvalue count as 2.)\n*\n*  ALPHAR  (output) REAL array, dimension (N)\n*  ALPHAI  (output) REAL array, dimension (N)\n*  BETA    (output) REAL array, dimension (N)\n*          On exit, (ALPHAR(j) + ALPHAI(j)*i)/BETA(j), j=1,...,N, will\n*          be the generalized eigenvalues.  ALPHAR(j) + ALPHAI(j)*i\n*          and BETA(j),j=1,...,N  are the diagonals of the complex Schur\n*          form (S,T) that would result if the 2-by-2 diagonal blocks of\n*          the real Schur form of (A,B) were further reduced to\n*          triangular form using 2-by-2 complex unitary transformations.\n*          If ALPHAI(j) is zero, then the j-th eigenvalue is real; if\n*          positive, then the j-th and (j+1)-st eigenvalues are a\n*          complex conjugate pair, with ALPHAI(j+1) negative.\n*\n*          Note: the quotients ALPHAR(j)/BETA(j) and ALPHAI(j)/BETA(j)\n*          may easily over- or underflow, and BETA(j) may even be zero.\n*          Thus, the user should avoid naively computing the ratio.\n*          However, ALPHAR and ALPHAI will be always less than and\n*          usually comparable with norm(A) in magnitude, and BETA always\n*          less than and usually comparable with norm(B).\n*\n*  VSL     (output) REAL array, dimension (LDVSL,N)\n*          If JOBVSL = \'V\', VSL will contain the left Schur vectors.\n*          Not referenced if JOBVSL = \'N\'.\n*\n*  LDVSL   (input) INTEGER\n*          The leading dimension of the matrix VSL. LDVSL >=1, and\n*          if JOBVSL = \'V\', LDVSL >= N.\n*\n*  VSR     (output) REAL array, dimension (LDVSR,N)\n*          If JOBVSR = \'V\', VSR will contain the right Schur vectors.\n*          Not referenced if JOBVSR = \'N\'.\n*\n*  LDVSR   (input) INTEGER\n*          The leading dimension of the matrix VSR. LDVSR >= 1, and\n*          if JOBVSR = \'V\', LDVSR >= N.\n*\n*  RCONDE  (output) REAL array, dimension ( 2 )\n*          If SENSE = \'E\' or \'B\', RCONDE(1) and RCONDE(2) contain the\n*          reciprocal condition numbers for the average of the selected\n*          eigenvalues.\n*          Not referenced if SENSE = \'N\' or \'V\'.\n*\n*  RCONDV  (output) REAL array, dimension ( 2 )\n*          If SENSE = \'V\' or \'B\', RCONDV(1) and RCONDV(2) contain the\n*          reciprocal condition numbers for the selected deflating\n*          subspaces.\n*          Not referenced if SENSE = \'N\' or \'E\'.\n*\n*  WORK    (workspace/output) REAL array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.\n*          If N = 0, LWORK >= 1, else if SENSE = \'E\', \'V\', or \'B\',\n*          LWORK >= max( 8*N, 6*N+16, 2*SDIM*(N-SDIM) ), else\n*          LWORK >= max( 8*N, 6*N+16 ).\n*          Note that 2*SDIM*(N-SDIM) <= N*N/2.\n*          Note also that an error is only returned if\n*          LWORK < max( 8*N, 6*N+16), but if SENSE = \'E\' or \'V\' or \'B\'\n*          this may not be large enough.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the bound on the optimal size of the WORK\n*          array and the minimum size of the IWORK array, returns these\n*          values as the first entries of the WORK and IWORK arrays, and\n*          no error message related to LWORK or LIWORK is issued by\n*          XERBLA.\n*\n*  IWORK   (workspace) INTEGER array, dimension (MAX(1,LIWORK))\n*          On exit, if INFO = 0, IWORK(1) returns the minimum LIWORK.\n*\n*  LIWORK  (input) INTEGER\n*          The dimension of the array IWORK.\n*          If SENSE = \'N\' or N = 0, LIWORK >= 1, otherwise\n*          LIWORK >= N+6.\n*\n*          If LIWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the bound on the optimal size of the\n*          WORK array and the minimum size of the IWORK array, returns\n*          these values as the first entries of the WORK and IWORK\n*          arrays, and no error message related to LWORK or LIWORK is\n*          issued by XERBLA.\n*\n*  BWORK   (workspace) LOGICAL array, dimension (N)\n*          Not referenced if SORT = \'N\'.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          = 1,...,N:\n*                The QZ iteration failed.  (A,B) are not in Schur\n*                form, but ALPHAR(j), ALPHAI(j), and BETA(j) should\n*                be correct for j=INFO+1,...,N.\n*          > N:  =N+1: other than QZ iteration failed in SHGEQZ\n*                =N+2: after reordering, roundoff changed values of\n*                      some complex eigenvalues so that leading\n*                      eigenvalues in the Generalized Schur form no\n*                      longer satisfy SELCTG=.TRUE.  This could also\n*                      be caused due to scaling.\n*                =N+3: reordering failed in STGSEN.\n*\n'),(218,'dggesx_218.txt','      SUBROUTINE DGGESX( JOBVSL, JOBVSR, SORT, SELCTG, SENSE, N, A, LDA,\n     $                   B, LDB, SDIM, ALPHAR, ALPHAI, BETA, VSL, LDVSL,\n     $                   VSR, LDVSR, RCONDE, RCONDV, WORK, LWORK, IWORK,\n     $                   LIWORK, BWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2.1)                           --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2009                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBVSL, JOBVSR, SENSE, SORT\n      INTEGER            INFO, LDA, LDB, LDVSL, LDVSR, LIWORK, LWORK, N,\n     $                   SDIM\n*     ..\n*     .. Array Arguments ..\n      LOGICAL            BWORK( * )\n      INTEGER            IWORK( * )\n      DOUBLE PRECISION   A( LDA, * ), ALPHAI( * ), ALPHAR( * ),\n     $                   B( LDB, * ), BETA( * ), RCONDE( 2 ),\n     $                   RCONDV( 2 ), VSL( LDVSL, * ), VSR( LDVSR, * ),\n     $                   WORK( * )\n*     ..\n*     .. Function Arguments ..\n      LOGICAL            SELCTG\n      EXTERNAL           SELCTG\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DGGESX computes for a pair of N-by-N real nonsymmetric matrices\n*  (A,B), the generalized eigenvalues, the real Schur form (S,T), and,\n*  optionally, the left and/or right matrices of Schur vectors (VSL and\n*  VSR).  This gives the generalized Schur factorization\n*\n*       (A,B) = ( (VSL) S (VSR)**T, (VSL) T (VSR)**T )\n*\n*  Optionally, it also orders the eigenvalues so that a selected cluster\n*  of eigenvalues appears in the leading diagonal blocks of the upper\n*  quasi-triangular matrix S and the upper triangular matrix T; computes\n*  a reciprocal condition number for the average of the selected\n*  eigenvalues (RCONDE); and computes a reciprocal condition number for\n*  the right and left deflating subspaces corresponding to the selected\n*  eigenvalues (RCONDV). The leading columns of VSL and VSR then form\n*  an orthonormal basis for the corresponding left and right eigenspaces\n*  (deflating subspaces).\n*\n*  A generalized eigenvalue for a pair of matrices (A,B) is a scalar w\n*  or a ratio alpha/beta = w, such that  A - w*B is singular.  It is\n*  usually represented as the pair (alpha,beta), as there is a\n*  reasonable interpretation for beta=0 or for both being zero.\n*\n*  A pair of matrices (S,T) is in generalized real Schur form if T is\n*  upper triangular with non-negative diagonal and S is block upper\n*  triangular with 1-by-1 and 2-by-2 blocks.  1-by-1 blocks correspond\n*  to real generalized eigenvalues, while 2-by-2 blocks of S will be\n*  \"standardized\" by making the corresponding elements of T have the\n*  form:\n*          [  a  0  ]\n*          [  0  b  ]\n*\n*  and the pair of corresponding 2-by-2 blocks in S and T will have a\n*  complex conjugate pair of generalized eigenvalues.\n*\n*\n*  Arguments\n*  =========\n*\n*  JOBVSL  (input) CHARACTER*1\n*          = \'N\':  do not compute the left Schur vectors;\n*          = \'V\':  compute the left Schur vectors.\n*\n*  JOBVSR  (input) CHARACTER*1\n*          = \'N\':  do not compute the right Schur vectors;\n*          = \'V\':  compute the right Schur vectors.\n*\n*  SORT    (input) CHARACTER*1\n*          Specifies whether or not to order the eigenvalues on the\n*          diagonal of the generalized Schur form.\n*          = \'N\':  Eigenvalues are not ordered;\n*          = \'S\':  Eigenvalues are ordered (see SELCTG).\n*\n*  SELCTG  (external procedure) LOGICAL FUNCTION of three DOUBLE PRECISION arguments\n*          SELCTG must be declared EXTERNAL in the calling subroutine.\n*          If SORT = \'N\', SELCTG is not referenced.\n*          If SORT = \'S\', SELCTG is used to select eigenvalues to sort\n*          to the top left of the Schur form.\n*          An eigenvalue (ALPHAR(j)+ALPHAI(j))/BETA(j) is selected if\n*          SELCTG(ALPHAR(j),ALPHAI(j),BETA(j)) is true; i.e. if either\n*          one of a complex conjugate pair of eigenvalues is selected,\n*          then both complex eigenvalues are selected.\n*          Note that a selected complex eigenvalue may no longer satisfy\n*          SELCTG(ALPHAR(j),ALPHAI(j),BETA(j)) = .TRUE. after ordering,\n*          since ordering may change the value of complex eigenvalues\n*          (especially if the eigenvalue is ill-conditioned), in this\n*          case INFO is set to N+3.\n*\n*  SENSE   (input) CHARACTER*1\n*          Determines which reciprocal condition numbers are computed.\n*          = \'N\' : None are computed;\n*          = \'E\' : Computed for average of selected eigenvalues only;\n*          = \'V\' : Computed for selected deflating subspaces only;\n*          = \'B\' : Computed for both.\n*          If SENSE = \'E\', \'V\', or \'B\', SORT must equal \'S\'.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A, B, VSL, and VSR.  N >= 0.\n*\n*  A       (input/output) DOUBLE PRECISION array, dimension (LDA, N)\n*          On entry, the first of the pair of matrices.\n*          On exit, A has been overwritten by its generalized Schur\n*          form S.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of A.  LDA >= max(1,N).\n*\n*  B       (input/output) DOUBLE PRECISION array, dimension (LDB, N)\n*          On entry, the second of the pair of matrices.\n*          On exit, B has been overwritten by its generalized Schur\n*          form T.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of B.  LDB >= max(1,N).\n*\n*  SDIM    (output) INTEGER\n*          If SORT = \'N\', SDIM = 0.\n*          If SORT = \'S\', SDIM = number of eigenvalues (after sorting)\n*          for which SELCTG is true.  (Complex conjugate pairs for which\n*          SELCTG is true for either eigenvalue count as 2.)\n*\n*  ALPHAR  (output) DOUBLE PRECISION array, dimension (N)\n*  ALPHAI  (output) DOUBLE PRECISION array, dimension (N)\n*  BETA    (output) DOUBLE PRECISION array, dimension (N)\n*          On exit, (ALPHAR(j) + ALPHAI(j)*i)/BETA(j), j=1,...,N, will\n*          be the generalized eigenvalues.  ALPHAR(j) + ALPHAI(j)*i\n*          and BETA(j),j=1,...,N  are the diagonals of the complex Schur\n*          form (S,T) that would result if the 2-by-2 diagonal blocks of\n*          the real Schur form of (A,B) were further reduced to\n*          triangular form using 2-by-2 complex unitary transformations.\n*          If ALPHAI(j) is zero, then the j-th eigenvalue is real; if\n*          positive, then the j-th and (j+1)-st eigenvalues are a\n*          complex conjugate pair, with ALPHAI(j+1) negative.\n*\n*          Note: the quotients ALPHAR(j)/BETA(j) and ALPHAI(j)/BETA(j)\n*          may easily over- or underflow, and BETA(j) may even be zero.\n*          Thus, the user should avoid naively computing the ratio.\n*          However, ALPHAR and ALPHAI will be always less than and\n*          usually comparable with norm(A) in magnitude, and BETA always\n*          less than and usually comparable with norm(B).\n*\n*  VSL     (output) DOUBLE PRECISION array, dimension (LDVSL,N)\n*          If JOBVSL = \'V\', VSL will contain the left Schur vectors.\n*          Not referenced if JOBVSL = \'N\'.\n*\n*  LDVSL   (input) INTEGER\n*          The leading dimension of the matrix VSL. LDVSL >=1, and\n*          if JOBVSL = \'V\', LDVSL >= N.\n*\n*  VSR     (output) DOUBLE PRECISION array, dimension (LDVSR,N)\n*          If JOBVSR = \'V\', VSR will contain the right Schur vectors.\n*          Not referenced if JOBVSR = \'N\'.\n*\n*  LDVSR   (input) INTEGER\n*          The leading dimension of the matrix VSR. LDVSR >= 1, and\n*          if JOBVSR = \'V\', LDVSR >= N.\n*\n*  RCONDE  (output) DOUBLE PRECISION array, dimension ( 2 )\n*          If SENSE = \'E\' or \'B\', RCONDE(1) and RCONDE(2) contain the\n*          reciprocal condition numbers for the average of the selected\n*          eigenvalues.\n*          Not referenced if SENSE = \'N\' or \'V\'.\n*\n*  RCONDV  (output) DOUBLE PRECISION array, dimension ( 2 )\n*          If SENSE = \'V\' or \'B\', RCONDV(1) and RCONDV(2) contain the\n*          reciprocal condition numbers for the selected deflating\n*          subspaces.\n*          Not referenced if SENSE = \'N\' or \'E\'.\n*\n*  WORK    (workspace/output) DOUBLE PRECISION array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.\n*          If N = 0, LWORK >= 1, else if SENSE = \'E\', \'V\', or \'B\',\n*          LWORK >= max( 8*N, 6*N+16, 2*SDIM*(N-SDIM) ), else\n*          LWORK >= max( 8*N, 6*N+16 ).\n*          Note that 2*SDIM*(N-SDIM) <= N*N/2.\n*          Note also that an error is only returned if\n*          LWORK < max( 8*N, 6*N+16), but if SENSE = \'E\' or \'V\' or \'B\'\n*          this may not be large enough.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the bound on the optimal size of the WORK\n*          array and the minimum size of the IWORK array, returns these\n*          values as the first entries of the WORK and IWORK arrays, and\n*          no error message related to LWORK or LIWORK is issued by\n*          XERBLA.\n*\n*  IWORK   (workspace) INTEGER array, dimension (MAX(1,LIWORK))\n*          On exit, if INFO = 0, IWORK(1) returns the minimum LIWORK.\n*\n*  LIWORK  (input) INTEGER\n*          The dimension of the array IWORK.\n*          If SENSE = \'N\' or N = 0, LIWORK >= 1, otherwise\n*          LIWORK >= N+6.\n*\n*          If LIWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the bound on the optimal size of the\n*          WORK array and the minimum size of the IWORK array, returns\n*          these values as the first entries of the WORK and IWORK\n*          arrays, and no error message related to LWORK or LIWORK is\n*          issued by XERBLA.\n*\n*  BWORK   (workspace) LOGICAL array, dimension (N)\n*          Not referenced if SORT = \'N\'.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          = 1,...,N:\n*                The QZ iteration failed.  (A,B) are not in Schur\n*                form, but ALPHAR(j), ALPHAI(j), and BETA(j) should\n*                be correct for j=INFO+1,...,N.\n*          > N:  =N+1: other than QZ iteration failed in DHGEQZ\n*                =N+2: after reordering, roundoff changed values of\n*                      some complex eigenvalues so that leading\n*                      eigenvalues in the Generalized Schur form no\n*                      longer satisfy SELCTG=.TRUE.  This could also\n*                      be caused due to scaling.\n*                =N+3: reordering failed in DTGSEN.\n*\n'),(219,'cggesx_219.txt','      SUBROUTINE CGGESX( JOBVSL, JOBVSR, SORT, SELCTG, SENSE, N, A, LDA,\n     $                   B, LDB, SDIM, ALPHA, BETA, VSL, LDVSL, VSR,\n     $                   LDVSR, RCONDE, RCONDV, WORK, LWORK, RWORK,\n     $                   IWORK, LIWORK, BWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBVSL, JOBVSR, SENSE, SORT\n      INTEGER            INFO, LDA, LDB, LDVSL, LDVSR, LIWORK, LWORK, N,\n     $                   SDIM\n*     ..\n*     .. Array Arguments ..\n      LOGICAL            BWORK( * )\n      INTEGER            IWORK( * )\n      REAL               RCONDE( 2 ), RCONDV( 2 ), RWORK( * )\n      COMPLEX            A( LDA, * ), ALPHA( * ), B( LDB, * ),\n     $                   BETA( * ), VSL( LDVSL, * ), VSR( LDVSR, * ),\n     $                   WORK( * )\n*     ..\n*     .. Function Arguments ..\n      LOGICAL            SELCTG\n      EXTERNAL           SELCTG\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CGGESX computes for a pair of N-by-N complex nonsymmetric matrices\n*  (A,B), the generalized eigenvalues, the complex Schur form (S,T),\n*  and, optionally, the left and/or right matrices of Schur vectors (VSL\n*  and VSR).  This gives the generalized Schur factorization\n*\n*       (A,B) = ( (VSL) S (VSR)**H, (VSL) T (VSR)**H )\n*\n*  where (VSR)**H is the conjugate-transpose of VSR.\n*\n*  Optionally, it also orders the eigenvalues so that a selected cluster\n*  of eigenvalues appears in the leading diagonal blocks of the upper\n*  triangular matrix S and the upper triangular matrix T; computes\n*  a reciprocal condition number for the average of the selected\n*  eigenvalues (RCONDE); and computes a reciprocal condition number for\n*  the right and left deflating subspaces corresponding to the selected\n*  eigenvalues (RCONDV). The leading columns of VSL and VSR then form\n*  an orthonormal basis for the corresponding left and right eigenspaces\n*  (deflating subspaces).\n*\n*  A generalized eigenvalue for a pair of matrices (A,B) is a scalar w\n*  or a ratio alpha/beta = w, such that  A - w*B is singular.  It is\n*  usually represented as the pair (alpha,beta), as there is a\n*  reasonable interpretation for beta=0 or for both being zero.\n*\n*  A pair of matrices (S,T) is in generalized complex Schur form if T is\n*  upper triangular with non-negative diagonal and S is upper\n*  triangular.\n*\n*  Arguments\n*  =========\n*\n*  JOBVSL  (input) CHARACTER*1\n*          = \'N\':  do not compute the left Schur vectors;\n*          = \'V\':  compute the left Schur vectors.\n*\n*  JOBVSR  (input) CHARACTER*1\n*          = \'N\':  do not compute the right Schur vectors;\n*          = \'V\':  compute the right Schur vectors.\n*\n*  SORT    (input) CHARACTER*1\n*          Specifies whether or not to order the eigenvalues on the\n*          diagonal of the generalized Schur form.\n*          = \'N\':  Eigenvalues are not ordered;\n*          = \'S\':  Eigenvalues are ordered (see SELCTG).\n*\n*  SELCTG  (external procedure) LOGICAL FUNCTION of two COMPLEX arguments\n*          SELCTG must be declared EXTERNAL in the calling subroutine.\n*          If SORT = \'N\', SELCTG is not referenced.\n*          If SORT = \'S\', SELCTG is used to select eigenvalues to sort\n*          to the top left of the Schur form.\n*          Note that a selected complex eigenvalue may no longer satisfy\n*          SELCTG(ALPHA(j),BETA(j)) = .TRUE. after ordering, since\n*          ordering may change the value of complex eigenvalues\n*          (especially if the eigenvalue is ill-conditioned), in this\n*          case INFO is set to N+3 see INFO below).\n*\n*  SENSE   (input) CHARACTER*1\n*          Determines which reciprocal condition numbers are computed.\n*          = \'N\' : None are computed;\n*          = \'E\' : Computed for average of selected eigenvalues only;\n*          = \'V\' : Computed for selected deflating subspaces only;\n*          = \'B\' : Computed for both.\n*          If SENSE = \'E\', \'V\', or \'B\', SORT must equal \'S\'.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A, B, VSL, and VSR.  N >= 0.\n*\n*  A       (input/output) COMPLEX array, dimension (LDA, N)\n*          On entry, the first of the pair of matrices.\n*          On exit, A has been overwritten by its generalized Schur\n*          form S.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of A.  LDA >= max(1,N).\n*\n*  B       (input/output) COMPLEX array, dimension (LDB, N)\n*          On entry, the second of the pair of matrices.\n*          On exit, B has been overwritten by its generalized Schur\n*          form T.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of B.  LDB >= max(1,N).\n*\n*  SDIM    (output) INTEGER\n*          If SORT = \'N\', SDIM = 0.\n*          If SORT = \'S\', SDIM = number of eigenvalues (after sorting)\n*          for which SELCTG is true.\n*\n*  ALPHA   (output) COMPLEX array, dimension (N)\n*  BETA    (output) COMPLEX array, dimension (N)\n*          On exit, ALPHA(j)/BETA(j), j=1,...,N, will be the\n*          generalized eigenvalues.  ALPHA(j) and BETA(j),j=1,...,N  are\n*          the diagonals of the complex Schur form (S,T).  BETA(j) will\n*          be non-negative real.\n*\n*          Note: the quotients ALPHA(j)/BETA(j) may easily over- or\n*          underflow, and BETA(j) may even be zero.  Thus, the user\n*          should avoid naively computing the ratio alpha/beta.\n*          However, ALPHA will be always less than and usually\n*          comparable with norm(A) in magnitude, and BETA always less\n*          than and usually comparable with norm(B).\n*\n*  VSL     (output) COMPLEX array, dimension (LDVSL,N)\n*          If JOBVSL = \'V\', VSL will contain the left Schur vectors.\n*          Not referenced if JOBVSL = \'N\'.\n*\n*  LDVSL   (input) INTEGER\n*          The leading dimension of the matrix VSL. LDVSL >=1, and\n*          if JOBVSL = \'V\', LDVSL >= N.\n*\n*  VSR     (output) COMPLEX array, dimension (LDVSR,N)\n*          If JOBVSR = \'V\', VSR will contain the right Schur vectors.\n*          Not referenced if JOBVSR = \'N\'.\n*\n*  LDVSR   (input) INTEGER\n*          The leading dimension of the matrix VSR. LDVSR >= 1, and\n*          if JOBVSR = \'V\', LDVSR >= N.\n*\n*  RCONDE  (output) REAL array, dimension ( 2 )\n*          If SENSE = \'E\' or \'B\', RCONDE(1) and RCONDE(2) contain the\n*          reciprocal condition numbers for the average of the selected\n*          eigenvalues.\n*          Not referenced if SENSE = \'N\' or \'V\'.\n*\n*  RCONDV  (output) REAL array, dimension ( 2 )\n*          If SENSE = \'V\' or \'B\', RCONDV(1) and RCONDV(2) contain the\n*          reciprocal condition number for the selected deflating\n*          subspaces.\n*          Not referenced if SENSE = \'N\' or \'E\'.\n*\n*  WORK    (workspace/output) COMPLEX array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.\n*          If N = 0, LWORK >= 1, else if SENSE = \'E\', \'V\', or \'B\',\n*          LWORK >= MAX(1,2*N,2*SDIM*(N-SDIM)), else\n*          LWORK >= MAX(1,2*N).  Note that 2*SDIM*(N-SDIM) <= N*N/2.\n*          Note also that an error is only returned if\n*          LWORK < MAX(1,2*N), but if SENSE = \'E\' or \'V\' or \'B\' this may\n*          not be large enough.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the bound on the optimal size of the WORK\n*          array and the minimum size of the IWORK array, returns these\n*          values as the first entries of the WORK and IWORK arrays, and\n*          no error message related to LWORK or LIWORK is issued by\n*          XERBLA.\n*\n*  RWORK   (workspace) REAL array, dimension ( 8*N )\n*          Real workspace.\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (MAX(1,LIWORK))\n*          On exit, if INFO = 0, IWORK(1) returns the minimum LIWORK.\n*\n*  LIWORK  (input) INTEGER\n*          The dimension of the array WORK.\n*          If SENSE = \'N\' or N = 0, LIWORK >= 1, otherwise\n*          LIWORK >= N+2.\n*\n*          If LIWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the bound on the optimal size of the\n*          WORK array and the minimum size of the IWORK array, returns\n*          these values as the first entries of the WORK and IWORK\n*          arrays, and no error message related to LWORK or LIWORK is\n*          issued by XERBLA.\n*\n*  BWORK   (workspace) LOGICAL array, dimension (N)\n*          Not referenced if SORT = \'N\'.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          = 1,...,N:\n*                The QZ iteration failed.  (A,B) are not in Schur\n*                form, but ALPHA(j) and BETA(j) should be correct for\n*                j=INFO+1,...,N.\n*          > N:  =N+1: other than QZ iteration failed in CHGEQZ\n*                =N+2: after reordering, roundoff changed values of\n*                      some complex eigenvalues so that leading\n*                      eigenvalues in the Generalized Schur form no\n*                      longer satisfy SELCTG=.TRUE.  This could also\n*                      be caused due to scaling.\n*                =N+3: reordering failed in CTGSEN.\n*\n'),(220,'zggesx_220.txt','      SUBROUTINE ZGGESX( JOBVSL, JOBVSR, SORT, SELCTG, SENSE, N, A, LDA,\n     $                   B, LDB, SDIM, ALPHA, BETA, VSL, LDVSL, VSR,\n     $                   LDVSR, RCONDE, RCONDV, WORK, LWORK, RWORK,\n     $                   IWORK, LIWORK, BWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBVSL, JOBVSR, SENSE, SORT\n      INTEGER            INFO, LDA, LDB, LDVSL, LDVSR, LIWORK, LWORK, N,\n     $                   SDIM\n*     ..\n*     .. Array Arguments ..\n      LOGICAL            BWORK( * )\n      INTEGER            IWORK( * )\n      DOUBLE PRECISION   RCONDE( 2 ), RCONDV( 2 ), RWORK( * )\n      COMPLEX*16         A( LDA, * ), ALPHA( * ), B( LDB, * ),\n     $                   BETA( * ), VSL( LDVSL, * ), VSR( LDVSR, * ),\n     $                   WORK( * )\n*     ..\n*     .. Function Arguments ..\n      LOGICAL            SELCTG\n      EXTERNAL           SELCTG\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZGGESX computes for a pair of N-by-N complex nonsymmetric matrices\n*  (A,B), the generalized eigenvalues, the complex Schur form (S,T),\n*  and, optionally, the left and/or right matrices of Schur vectors (VSL\n*  and VSR).  This gives the generalized Schur factorization\n*\n*       (A,B) = ( (VSL) S (VSR)**H, (VSL) T (VSR)**H )\n*\n*  where (VSR)**H is the conjugate-transpose of VSR.\n*\n*  Optionally, it also orders the eigenvalues so that a selected cluster\n*  of eigenvalues appears in the leading diagonal blocks of the upper\n*  triangular matrix S and the upper triangular matrix T; computes\n*  a reciprocal condition number for the average of the selected\n*  eigenvalues (RCONDE); and computes a reciprocal condition number for\n*  the right and left deflating subspaces corresponding to the selected\n*  eigenvalues (RCONDV). The leading columns of VSL and VSR then form\n*  an orthonormal basis for the corresponding left and right eigenspaces\n*  (deflating subspaces).\n*\n*  A generalized eigenvalue for a pair of matrices (A,B) is a scalar w\n*  or a ratio alpha/beta = w, such that  A - w*B is singular.  It is\n*  usually represented as the pair (alpha,beta), as there is a\n*  reasonable interpretation for beta=0 or for both being zero.\n*\n*  A pair of matrices (S,T) is in generalized complex Schur form if T is\n*  upper triangular with non-negative diagonal and S is upper\n*  triangular.\n*\n*  Arguments\n*  =========\n*\n*  JOBVSL  (input) CHARACTER*1\n*          = \'N\':  do not compute the left Schur vectors;\n*          = \'V\':  compute the left Schur vectors.\n*\n*  JOBVSR  (input) CHARACTER*1\n*          = \'N\':  do not compute the right Schur vectors;\n*          = \'V\':  compute the right Schur vectors.\n*\n*  SORT    (input) CHARACTER*1\n*          Specifies whether or not to order the eigenvalues on the\n*          diagonal of the generalized Schur form.\n*          = \'N\':  Eigenvalues are not ordered;\n*          = \'S\':  Eigenvalues are ordered (see SELCTG).\n*\n*  SELCTG  (external procedure) LOGICAL FUNCTION of two COMPLEX*16 arguments\n*          SELCTG must be declared EXTERNAL in the calling subroutine.\n*          If SORT = \'N\', SELCTG is not referenced.\n*          If SORT = \'S\', SELCTG is used to select eigenvalues to sort\n*          to the top left of the Schur form.\n*          Note that a selected complex eigenvalue may no longer satisfy\n*          SELCTG(ALPHA(j),BETA(j)) = .TRUE. after ordering, since\n*          ordering may change the value of complex eigenvalues\n*          (especially if the eigenvalue is ill-conditioned), in this\n*          case INFO is set to N+3 see INFO below).\n*\n*  SENSE   (input) CHARACTER*1\n*          Determines which reciprocal condition numbers are computed.\n*          = \'N\' : None are computed;\n*          = \'E\' : Computed for average of selected eigenvalues only;\n*          = \'V\' : Computed for selected deflating subspaces only;\n*          = \'B\' : Computed for both.\n*          If SENSE = \'E\', \'V\', or \'B\', SORT must equal \'S\'.\n*\n*  N       (input) INTEGER\n*          The order of the matrices A, B, VSL, and VSR.  N >= 0.\n*\n*  A       (input/output) COMPLEX*16 array, dimension (LDA, N)\n*          On entry, the first of the pair of matrices.\n*          On exit, A has been overwritten by its generalized Schur\n*          form S.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of A.  LDA >= max(1,N).\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB, N)\n*          On entry, the second of the pair of matrices.\n*          On exit, B has been overwritten by its generalized Schur\n*          form T.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of B.  LDB >= max(1,N).\n*\n*  SDIM    (output) INTEGER\n*          If SORT = \'N\', SDIM = 0.\n*          If SORT = \'S\', SDIM = number of eigenvalues (after sorting)\n*          for which SELCTG is true.\n*\n*  ALPHA   (output) COMPLEX*16 array, dimension (N)\n*  BETA    (output) COMPLEX*16 array, dimension (N)\n*          On exit, ALPHA(j)/BETA(j), j=1,...,N, will be the\n*          generalized eigenvalues.  ALPHA(j) and BETA(j),j=1,...,N  are\n*          the diagonals of the complex Schur form (S,T).  BETA(j) will\n*          be non-negative real.\n*\n*          Note: the quotients ALPHA(j)/BETA(j) may easily over- or\n*          underflow, and BETA(j) may even be zero.  Thus, the user\n*          should avoid naively computing the ratio alpha/beta.\n*          However, ALPHA will be always less than and usually\n*          comparable with norm(A) in magnitude, and BETA always less\n*          than and usually comparable with norm(B).\n*\n*  VSL     (output) COMPLEX*16 array, dimension (LDVSL,N)\n*          If JOBVSL = \'V\', VSL will contain the left Schur vectors.\n*          Not referenced if JOBVSL = \'N\'.\n*\n*  LDVSL   (input) INTEGER\n*          The leading dimension of the matrix VSL. LDVSL >=1, and\n*          if JOBVSL = \'V\', LDVSL >= N.\n*\n*  VSR     (output) COMPLEX*16 array, dimension (LDVSR,N)\n*          If JOBVSR = \'V\', VSR will contain the right Schur vectors.\n*          Not referenced if JOBVSR = \'N\'.\n*\n*  LDVSR   (input) INTEGER\n*          The leading dimension of the matrix VSR. LDVSR >= 1, and\n*          if JOBVSR = \'V\', LDVSR >= N.\n*\n*  RCONDE  (output) DOUBLE PRECISION array, dimension ( 2 )\n*          If SENSE = \'E\' or \'B\', RCONDE(1) and RCONDE(2) contain the\n*          reciprocal condition numbers for the average of the selected\n*          eigenvalues.\n*          Not referenced if SENSE = \'N\' or \'V\'.\n*\n*  RCONDV  (output) DOUBLE PRECISION array, dimension ( 2 )\n*          If SENSE = \'V\' or \'B\', RCONDV(1) and RCONDV(2) contain the\n*          reciprocal condition number for the selected deflating\n*          subspaces.\n*          Not referenced if SENSE = \'N\' or \'E\'.\n*\n*  WORK    (workspace/output) COMPLEX*16 array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.\n*          If N = 0, LWORK >= 1, else if SENSE = \'E\', \'V\', or \'B\',\n*          LWORK >= MAX(1,2*N,2*SDIM*(N-SDIM)), else\n*          LWORK >= MAX(1,2*N).  Note that 2*SDIM*(N-SDIM) <= N*N/2.\n*          Note also that an error is only returned if\n*          LWORK < MAX(1,2*N), but if SENSE = \'E\' or \'V\' or \'B\' this may\n*          not be large enough.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the bound on the optimal size of the WORK\n*          array and the minimum size of the IWORK array, returns these\n*          values as the first entries of the WORK and IWORK arrays, and\n*          no error message related to LWORK or LIWORK is issued by\n*          XERBLA.\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension ( 8*N )\n*          Real workspace.\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (MAX(1,LIWORK))\n*          On exit, if INFO = 0, IWORK(1) returns the minimum LIWORK.\n*\n*  LIWORK  (input) INTEGER\n*          The dimension of the array IWORK.\n*          If SENSE = \'N\' or N = 0, LIWORK >= 1, otherwise\n*          LIWORK >= N+2.\n*\n*          If LIWORK = -1, then a workspace query is assumed; the\n*          routine only calculates the bound on the optimal size of the\n*          WORK array and the minimum size of the IWORK array, returns\n*          these values as the first entries of the WORK and IWORK\n*          arrays, and no error message related to LWORK or LIWORK is\n*          issued by XERBLA.\n*\n*  BWORK   (workspace) LOGICAL array, dimension (N)\n*          Not referenced if SORT = \'N\'.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          = 1,...,N:\n*                The QZ iteration failed.  (A,B) are not in Schur\n*                form, but ALPHA(j) and BETA(j) should be correct for\n*                j=INFO+1,...,N.\n*          > N:  =N+1: other than QZ iteration failed in ZHGEQZ\n*                =N+2: after reordering, roundoff changed values of\n*                      some complex eigenvalues so that leading\n*                      eigenvalues in the Generalized Schur form no\n*                      longer satisfy SELCTG=.TRUE.  This could also\n*                      be caused due to scaling.\n*                =N+3: reordering failed in ZTGSEN.\n*\n'),(221,'sgetrf_221.txt','      SUBROUTINE SGETRF( M, N, A, LDA, IPIV, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDA, M, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      REAL               A( LDA, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SGETRF computes an LU factorization of a general M-by-N matrix A\n*  using partial pivoting with row interchanges.\n*\n*  The factorization has the form\n*     A = P * L * U\n*  where P is a permutation matrix, L is lower triangular with unit\n*  diagonal elements (lower trapezoidal if m > n), and U is upper\n*  triangular (upper trapezoidal if m < n).\n*\n*  This is the right-looking Level 3 BLAS version of the algorithm.\n*\n*  Arguments\n*  =========\n*\n*  M       (input) INTEGER\n*          The number of rows of the matrix A.  M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the matrix A.  N >= 0.\n*\n*  A       (input/output) REAL array, dimension (LDA,N)\n*          On entry, the M-by-N matrix to be factored.\n*          On exit, the factors L and U from the factorization\n*          A = P*L*U; the unit diagonal elements of L are not stored.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,M).\n*\n*  IPIV    (output) INTEGER array, dimension (min(M,N))\n*          The pivot indices; for 1 <= i <= min(M,N), row i of the\n*          matrix was interchanged with row IPIV(i).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, U(i,i) is exactly zero. The factorization\n*                has been completed, but the factor U is exactly\n*                singular, and division by zero will occur if it is used\n*                to solve a system of equations.\n*\n'),(222,'dgetrf_222.txt','      SUBROUTINE DGETRF( M, N, A, LDA, IPIV, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDA, M, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      DOUBLE PRECISION   A( LDA, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DGETRF computes an LU factorization of a general M-by-N matrix A\n*  using partial pivoting with row interchanges.\n*\n*  The factorization has the form\n*     A = P * L * U\n*  where P is a permutation matrix, L is lower triangular with unit\n*  diagonal elements (lower trapezoidal if m > n), and U is upper\n*  triangular (upper trapezoidal if m < n).\n*\n*  This is the right-looking Level 3 BLAS version of the algorithm.\n*\n*  Arguments\n*  =========\n*\n*  M       (input) INTEGER\n*          The number of rows of the matrix A.  M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the matrix A.  N >= 0.\n*\n*  A       (input/output) DOUBLE PRECISION array, dimension (LDA,N)\n*          On entry, the M-by-N matrix to be factored.\n*          On exit, the factors L and U from the factorization\n*          A = P*L*U; the unit diagonal elements of L are not stored.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,M).\n*\n*  IPIV    (output) INTEGER array, dimension (min(M,N))\n*          The pivot indices; for 1 <= i <= min(M,N), row i of the\n*          matrix was interchanged with row IPIV(i).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, U(i,i) is exactly zero. The factorization\n*                has been completed, but the factor U is exactly\n*                singular, and division by zero will occur if it is used\n*                to solve a system of equations.\n*\n'),(223,'cgetrf_223.txt','      SUBROUTINE CGETRF( M, N, A, LDA, IPIV, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDA, M, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX            A( LDA, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CGETRF computes an LU factorization of a general M-by-N matrix A\n*  using partial pivoting with row interchanges.\n*\n*  The factorization has the form\n*     A = P * L * U\n*  where P is a permutation matrix, L is lower triangular with unit\n*  diagonal elements (lower trapezoidal if m > n), and U is upper\n*  triangular (upper trapezoidal if m < n).\n*\n*  This is the right-looking Level 3 BLAS version of the algorithm.\n*\n*  Arguments\n*  =========\n*\n*  M       (input) INTEGER\n*          The number of rows of the matrix A.  M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the matrix A.  N >= 0.\n*\n*  A       (input/output) COMPLEX array, dimension (LDA,N)\n*          On entry, the M-by-N matrix to be factored.\n*          On exit, the factors L and U from the factorization\n*          A = P*L*U; the unit diagonal elements of L are not stored.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,M).\n*\n*  IPIV    (output) INTEGER array, dimension (min(M,N))\n*          The pivot indices; for 1 <= i <= min(M,N), row i of the\n*          matrix was interchanged with row IPIV(i).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, U(i,i) is exactly zero. The factorization\n*                has been completed, but the factor U is exactly\n*                singular, and division by zero will occur if it is used\n*                to solve a system of equations.\n*\n'),(224,'zgetrf_224.txt','      SUBROUTINE ZGETRF( M, N, A, LDA, IPIV, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDA, M, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX*16         A( LDA, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZGETRF computes an LU factorization of a general M-by-N matrix A\n*  using partial pivoting with row interchanges.\n*\n*  The factorization has the form\n*     A = P * L * U\n*  where P is a permutation matrix, L is lower triangular with unit\n*  diagonal elements (lower trapezoidal if m > n), and U is upper\n*  triangular (upper trapezoidal if m < n).\n*\n*  This is the right-looking Level 3 BLAS version of the algorithm.\n*\n*  Arguments\n*  =========\n*\n*  M       (input) INTEGER\n*          The number of rows of the matrix A.  M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the matrix A.  N >= 0.\n*\n*  A       (input/output) COMPLEX*16 array, dimension (LDA,N)\n*          On entry, the M-by-N matrix to be factored.\n*          On exit, the factors L and U from the factorization\n*          A = P*L*U; the unit diagonal elements of L are not stored.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,M).\n*\n*  IPIV    (output) INTEGER array, dimension (min(M,N))\n*          The pivot indices; for 1 <= i <= min(M,N), row i of the\n*          matrix was interchanged with row IPIV(i).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, U(i,i) is exactly zero. The factorization\n*                has been completed, but the factor U is exactly\n*                singular, and division by zero will occur if it is used\n*                to solve a system of equations.\n*\n'),(225,'sgbtrf_225.txt','      SUBROUTINE SGBTRF( M, N, KL, KU, AB, LDAB, IPIV, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, KL, KU, LDAB, M, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      REAL               AB( LDAB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SGBTRF computes an LU factorization of a real m-by-n band matrix A\n*  using partial pivoting with row interchanges.\n*\n*  This is the blocked version of the algorithm, calling Level 3 BLAS.\n*\n*  Arguments\n*  =========\n*\n*  M       (input) INTEGER\n*          The number of rows of the matrix A.  M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the matrix A.  N >= 0.\n*\n*  KL      (input) INTEGER\n*          The number of subdiagonals within the band of A.  KL >= 0.\n*\n*  KU      (input) INTEGER\n*          The number of superdiagonals within the band of A.  KU >= 0.\n*\n*  AB      (input/output) REAL array, dimension (LDAB,N)\n*          On entry, the matrix A in band storage, in rows KL+1 to\n*          2*KL+KU+1; rows 1 to KL of the array need not be set.\n*          The j-th column of A is stored in the j-th column of the\n*          array AB as follows:\n*          AB(kl+ku+1+i-j,j) = A(i,j) for max(1,j-ku)<=i<=min(m,j+kl)\n*\n*          On exit, details of the factorization: U is stored as an\n*          upper triangular band matrix with KL+KU superdiagonals in\n*          rows 1 to KL+KU+1, and the multipliers used during the\n*          factorization are stored in rows KL+KU+2 to 2*KL+KU+1.\n*          See below for further details.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= 2*KL+KU+1.\n*\n*  IPIV    (output) INTEGER array, dimension (min(M,N))\n*          The pivot indices; for 1 <= i <= min(M,N), row i of the\n*          matrix was interchanged with row IPIV(i).\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = +i, U(i,i) is exactly zero. The factorization\n*               has been completed, but the factor U is exactly\n*               singular, and division by zero will occur if it is used\n*               to solve a system of equations.\n*\n'),(226,'dgbtrf_226.txt','      SUBROUTINE DGBTRF( M, N, KL, KU, AB, LDAB, IPIV, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, KL, KU, LDAB, M, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      DOUBLE PRECISION   AB( LDAB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DGBTRF computes an LU factorization of a real m-by-n band matrix A\n*  using partial pivoting with row interchanges.\n*\n*  This is the blocked version of the algorithm, calling Level 3 BLAS.\n*\n*  Arguments\n*  =========\n*\n*  M       (input) INTEGER\n*          The number of rows of the matrix A.  M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the matrix A.  N >= 0.\n*\n*  KL      (input) INTEGER\n*          The number of subdiagonals within the band of A.  KL >= 0.\n*\n*  KU      (input) INTEGER\n*          The number of superdiagonals within the band of A.  KU >= 0.\n*\n*  AB      (input/output) DOUBLE PRECISION array, dimension (LDAB,N)\n*          On entry, the matrix A in band storage, in rows KL+1 to\n*          2*KL+KU+1; rows 1 to KL of the array need not be set.\n*          The j-th column of A is stored in the j-th column of the\n*          array AB as follows:\n*          AB(kl+ku+1+i-j,j) = A(i,j) for max(1,j-ku)<=i<=min(m,j+kl)\n*\n*          On exit, details of the factorization: U is stored as an\n*          upper triangular band matrix with KL+KU superdiagonals in\n*          rows 1 to KL+KU+1, and the multipliers used during the\n*          factorization are stored in rows KL+KU+2 to 2*KL+KU+1.\n*          See below for further details.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= 2*KL+KU+1.\n*\n*  IPIV    (output) INTEGER array, dimension (min(M,N))\n*          The pivot indices; for 1 <= i <= min(M,N), row i of the\n*          matrix was interchanged with row IPIV(i).\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = +i, U(i,i) is exactly zero. The factorization\n*               has been completed, but the factor U is exactly\n*               singular, and division by zero will occur if it is used\n*               to solve a system of equations.\n*\n'),(227,'cgbtrf_227.txt','      SUBROUTINE CGBTRF( M, N, KL, KU, AB, LDAB, IPIV, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, KL, KU, LDAB, M, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX            AB( LDAB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CGBTRF computes an LU factorization of a complex m-by-n band matrix A\n*  using partial pivoting with row interchanges.\n*\n*  This is the blocked version of the algorithm, calling Level 3 BLAS.\n*\n*  Arguments\n*  =========\n*\n*  M       (input) INTEGER\n*          The number of rows of the matrix A.  M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the matrix A.  N >= 0.\n*\n*  KL      (input) INTEGER\n*          The number of subdiagonals within the band of A.  KL >= 0.\n*\n*  KU      (input) INTEGER\n*          The number of superdiagonals within the band of A.  KU >= 0.\n*\n*  AB      (input/output) COMPLEX array, dimension (LDAB,N)\n*          On entry, the matrix A in band storage, in rows KL+1 to\n*          2*KL+KU+1; rows 1 to KL of the array need not be set.\n*          The j-th column of A is stored in the j-th column of the\n*          array AB as follows:\n*          AB(kl+ku+1+i-j,j) = A(i,j) for max(1,j-ku)<=i<=min(m,j+kl)\n*\n*          On exit, details of the factorization: U is stored as an\n*          upper triangular band matrix with KL+KU superdiagonals in\n*          rows 1 to KL+KU+1, and the multipliers used during the\n*          factorization are stored in rows KL+KU+2 to 2*KL+KU+1.\n*          See below for further details.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= 2*KL+KU+1.\n*\n*  IPIV    (output) INTEGER array, dimension (min(M,N))\n*          The pivot indices; for 1 <= i <= min(M,N), row i of the\n*          matrix was interchanged with row IPIV(i).\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = +i, U(i,i) is exactly zero. The factorization\n*               has been completed, but the factor U is exactly\n*               singular, and division by zero will occur if it is used\n*               to solve a system of equations.\n*\n'),(228,'zgbtrf_228.txt','      SUBROUTINE ZGBTRF( M, N, KL, KU, AB, LDAB, IPIV, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, KL, KU, LDAB, M, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX*16         AB( LDAB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZGBTRF computes an LU factorization of a complex m-by-n band matrix A\n*  using partial pivoting with row interchanges.\n*\n*  This is the blocked version of the algorithm, calling Level 3 BLAS.\n*\n*  Arguments\n*  =========\n*\n*  M       (input) INTEGER\n*          The number of rows of the matrix A.  M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the matrix A.  N >= 0.\n*\n*  KL      (input) INTEGER\n*          The number of subdiagonals within the band of A.  KL >= 0.\n*\n*  KU      (input) INTEGER\n*          The number of superdiagonals within the band of A.  KU >= 0.\n*\n*  AB      (input/output) COMPLEX*16 array, dimension (LDAB,N)\n*          On entry, the matrix A in band storage, in rows KL+1 to\n*          2*KL+KU+1; rows 1 to KL of the array need not be set.\n*          The j-th column of A is stored in the j-th column of the\n*          array AB as follows:\n*          AB(kl+ku+1+i-j,j) = A(i,j) for max(1,j-ku)<=i<=min(m,j+kl)\n*\n*          On exit, details of the factorization: U is stored as an\n*          upper triangular band matrix with KL+KU superdiagonals in\n*          rows 1 to KL+KU+1, and the multipliers used during the\n*          factorization are stored in rows KL+KU+2 to 2*KL+KU+1.\n*          See below for further details.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= 2*KL+KU+1.\n*\n*  IPIV    (output) INTEGER array, dimension (min(M,N))\n*          The pivot indices; for 1 <= i <= min(M,N), row i of the\n*          matrix was interchanged with row IPIV(i).\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = +i, U(i,i) is exactly zero. The factorization\n*               has been completed, but the factor U is exactly\n*               singular, and division by zero will occur if it is used\n*               to solve a system of equations.\n*\n'),(229,'sgttrf_229.txt','      SUBROUTINE SGTTRF( N, DL, D, DU, DU2, IPIV, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      REAL               D( * ), DL( * ), DU( * ), DU2( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SGTTRF computes an LU factorization of a real tridiagonal matrix A\n*  using elimination with partial pivoting and row interchanges.\n*\n*  The factorization has the form\n*     A = L * U\n*  where L is a product of permutation and unit lower bidiagonal\n*  matrices and U is upper triangular with nonzeros in only the main\n*  diagonal and first two superdiagonals.\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.\n*\n*  DL      (input/output) REAL array, dimension (N-1)\n*          On entry, DL must contain the (n-1) sub-diagonal elements of\n*          A.\n*\n*          On exit, DL is overwritten by the (n-1) multipliers that\n*          define the matrix L from the LU factorization of A.\n*\n*  D       (input/output) REAL array, dimension (N)\n*          On entry, D must contain the diagonal elements of A.\n*\n*          On exit, D is overwritten by the n diagonal elements of the\n*          upper triangular matrix U from the LU factorization of A.\n*\n*  DU      (input/output) REAL array, dimension (N-1)\n*          On entry, DU must contain the (n-1) super-diagonal elements\n*          of A.\n*\n*          On exit, DU is overwritten by the (n-1) elements of the first\n*          super-diagonal of U.\n*\n*  DU2     (output) REAL array, dimension (N-2)\n*          On exit, DU2 is overwritten by the (n-2) elements of the\n*          second super-diagonal of U.\n*\n*  IPIV    (output) INTEGER array, dimension (N)\n*          The pivot indices; for 1 <= i <= n, row i of the matrix was\n*          interchanged with row IPIV(i).  IPIV(i) will always be either\n*          i or i+1; IPIV(i) = i indicates a row interchange was not\n*          required.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -k, the k-th argument had an illegal value\n*          > 0:  if INFO = k, U(k,k) is exactly zero. The factorization\n*                has been completed, but the factor U is exactly\n*                singular, and division by zero will occur if it is used\n*                to solve a system of equations.\n*\n'),(230,'dgttrf_230.txt','      SUBROUTINE DGTTRF( N, DL, D, DU, DU2, IPIV, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      DOUBLE PRECISION   D( * ), DL( * ), DU( * ), DU2( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DGTTRF computes an LU factorization of a real tridiagonal matrix A\n*  using elimination with partial pivoting and row interchanges.\n*\n*  The factorization has the form\n*     A = L * U\n*  where L is a product of permutation and unit lower bidiagonal\n*  matrices and U is upper triangular with nonzeros in only the main\n*  diagonal and first two superdiagonals.\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.\n*\n*  DL      (input/output) DOUBLE PRECISION array, dimension (N-1)\n*          On entry, DL must contain the (n-1) sub-diagonal elements of\n*          A.\n*\n*          On exit, DL is overwritten by the (n-1) multipliers that\n*          define the matrix L from the LU factorization of A.\n*\n*  D       (input/output) DOUBLE PRECISION array, dimension (N)\n*          On entry, D must contain the diagonal elements of A.\n*\n*          On exit, D is overwritten by the n diagonal elements of the\n*          upper triangular matrix U from the LU factorization of A.\n*\n*  DU      (input/output) DOUBLE PRECISION array, dimension (N-1)\n*          On entry, DU must contain the (n-1) super-diagonal elements\n*          of A.\n*\n*          On exit, DU is overwritten by the (n-1) elements of the first\n*          super-diagonal of U.\n*\n*  DU2     (output) DOUBLE PRECISION array, dimension (N-2)\n*          On exit, DU2 is overwritten by the (n-2) elements of the\n*          second super-diagonal of U.\n*\n*  IPIV    (output) INTEGER array, dimension (N)\n*          The pivot indices; for 1 <= i <= n, row i of the matrix was\n*          interchanged with row IPIV(i).  IPIV(i) will always be either\n*          i or i+1; IPIV(i) = i indicates a row interchange was not\n*          required.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -k, the k-th argument had an illegal value\n*          > 0:  if INFO = k, U(k,k) is exactly zero. The factorization\n*                has been completed, but the factor U is exactly\n*                singular, and division by zero will occur if it is used\n*                to solve a system of equations.\n*\n'),(231,'cgttrf_231.txt','      SUBROUTINE CGTTRF( N, DL, D, DU, DU2, IPIV, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX            D( * ), DL( * ), DU( * ), DU2( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CGTTRF computes an LU factorization of a complex tridiagonal matrix A\n*  using elimination with partial pivoting and row interchanges.\n*\n*  The factorization has the form\n*     A = L * U\n*  where L is a product of permutation and unit lower bidiagonal\n*  matrices and U is upper triangular with nonzeros in only the main\n*  diagonal and first two superdiagonals.\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.\n*\n*  DL      (input/output) COMPLEX array, dimension (N-1)\n*          On entry, DL must contain the (n-1) sub-diagonal elements of\n*          A.\n*\n*          On exit, DL is overwritten by the (n-1) multipliers that\n*          define the matrix L from the LU factorization of A.\n*\n*  D       (input/output) COMPLEX array, dimension (N)\n*          On entry, D must contain the diagonal elements of A.\n*\n*          On exit, D is overwritten by the n diagonal elements of the\n*          upper triangular matrix U from the LU factorization of A.\n*\n*  DU      (input/output) COMPLEX array, dimension (N-1)\n*          On entry, DU must contain the (n-1) super-diagonal elements\n*          of A.\n*\n*          On exit, DU is overwritten by the (n-1) elements of the first\n*          super-diagonal of U.\n*\n*  DU2     (output) COMPLEX array, dimension (N-2)\n*          On exit, DU2 is overwritten by the (n-2) elements of the\n*          second super-diagonal of U.\n*\n*  IPIV    (output) INTEGER array, dimension (N)\n*          The pivot indices; for 1 <= i <= n, row i of the matrix was\n*          interchanged with row IPIV(i).  IPIV(i) will always be either\n*          i or i+1; IPIV(i) = i indicates a row interchange was not\n*          required.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -k, the k-th argument had an illegal value\n*          > 0:  if INFO = k, U(k,k) is exactly zero. The factorization\n*                has been completed, but the factor U is exactly\n*                singular, and division by zero will occur if it is used\n*                to solve a system of equations.\n*\n'),(232,'zgttrf_232.txt','      SUBROUTINE ZGTTRF( N, DL, D, DU, DU2, IPIV, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX*16         D( * ), DL( * ), DU( * ), DU2( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZGTTRF computes an LU factorization of a complex tridiagonal matrix A\n*  using elimination with partial pivoting and row interchanges.\n*\n*  The factorization has the form\n*     A = L * U\n*  where L is a product of permutation and unit lower bidiagonal\n*  matrices and U is upper triangular with nonzeros in only the main\n*  diagonal and first two superdiagonals.\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.\n*\n*  DL      (input/output) COMPLEX*16 array, dimension (N-1)\n*          On entry, DL must contain the (n-1) sub-diagonal elements of\n*          A.\n*\n*          On exit, DL is overwritten by the (n-1) multipliers that\n*          define the matrix L from the LU factorization of A.\n*\n*  D       (input/output) COMPLEX*16 array, dimension (N)\n*          On entry, D must contain the diagonal elements of A.\n*\n*          On exit, D is overwritten by the n diagonal elements of the\n*          upper triangular matrix U from the LU factorization of A.\n*\n*  DU      (input/output) COMPLEX*16 array, dimension (N-1)\n*          On entry, DU must contain the (n-1) super-diagonal elements\n*          of A.\n*\n*          On exit, DU is overwritten by the (n-1) elements of the first\n*          super-diagonal of U.\n*\n*  DU2     (output) COMPLEX*16 array, dimension (N-2)\n*          On exit, DU2 is overwritten by the (n-2) elements of the\n*          second super-diagonal of U.\n*\n*  IPIV    (output) INTEGER array, dimension (N)\n*          The pivot indices; for 1 <= i <= n, row i of the matrix was\n*          interchanged with row IPIV(i).  IPIV(i) will always be either\n*          i or i+1; IPIV(i) = i indicates a row interchange was not\n*          required.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -k, the k-th argument had an illegal value\n*          > 0:  if INFO = k, U(k,k) is exactly zero. The factorization\n*                has been completed, but the factor U is exactly\n*                singular, and division by zero will occur if it is used\n*                to solve a system of equations.\n*\n'),(233,'spotrf_233.txt','      SUBROUTINE SPOTRF( UPLO, N, A, LDA, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, N\n*     ..\n*     .. Array Arguments ..\n      REAL               A( LDA, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SPOTRF computes the Cholesky factorization of a real symmetric\n*  positive definite matrix A.\n*\n*  The factorization has the form\n*     A = U**T * U,  if UPLO = \'U\', or\n*     A = L  * L**T,  if UPLO = \'L\',\n*  where U is an upper triangular matrix and L is lower triangular.\n*\n*  This is the block version of the algorithm, calling Level 3 BLAS.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) REAL array, dimension (LDA,N)\n*          On entry, the symmetric matrix A.  If UPLO = \'U\', the leading\n*          N-by-N upper triangular part of A contains the upper\n*          triangular part of the matrix A, and the strictly lower\n*          triangular part of A is not referenced.  If UPLO = \'L\', the\n*          leading N-by-N lower triangular part of A contains the lower\n*          triangular part of the matrix A, and the strictly upper\n*          triangular part of A is not referenced.\n*\n*          On exit, if INFO = 0, the factor U or L from the Cholesky\n*          factorization A = U**T*U or A = L*L**T.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the leading minor of order i is not\n*                positive definite, and the factorization could not be\n*                completed.\n*\n'),(234,'dpotrf_234.txt','      SUBROUTINE DPOTRF( UPLO, N, A, LDA, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, N\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   A( LDA, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DPOTRF computes the Cholesky factorization of a real symmetric\n*  positive definite matrix A.\n*\n*  The factorization has the form\n*     A = U**T * U,  if UPLO = \'U\', or\n*     A = L  * L**T,  if UPLO = \'L\',\n*  where U is an upper triangular matrix and L is lower triangular.\n*\n*  This is the block version of the algorithm, calling Level 3 BLAS.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) DOUBLE PRECISION array, dimension (LDA,N)\n*          On entry, the symmetric matrix A.  If UPLO = \'U\', the leading\n*          N-by-N upper triangular part of A contains the upper\n*          triangular part of the matrix A, and the strictly lower\n*          triangular part of A is not referenced.  If UPLO = \'L\', the\n*          leading N-by-N lower triangular part of A contains the lower\n*          triangular part of the matrix A, and the strictly upper\n*          triangular part of A is not referenced.\n*\n*          On exit, if INFO = 0, the factor U or L from the Cholesky\n*          factorization A = U**T*U or A = L*L**T.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the leading minor of order i is not\n*                positive definite, and the factorization could not be\n*                completed.\n*\n'),(235,'cpotrf_235.txt','      SUBROUTINE CPOTRF( UPLO, N, A, LDA, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, N\n*     ..\n*     .. Array Arguments ..\n      COMPLEX            A( LDA, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CPOTRF computes the Cholesky factorization of a complex Hermitian\n*  positive definite matrix A.\n*\n*  The factorization has the form\n*     A = U**H * U,  if UPLO = \'U\', or\n*     A = L  * L**H,  if UPLO = \'L\',\n*  where U is an upper triangular matrix and L is lower triangular.\n*\n*  This is the block version of the algorithm, calling Level 3 BLAS.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) COMPLEX array, dimension (LDA,N)\n*          On entry, the Hermitian matrix A.  If UPLO = \'U\', the leading\n*          N-by-N upper triangular part of A contains the upper\n*          triangular part of the matrix A, and the strictly lower\n*          triangular part of A is not referenced.  If UPLO = \'L\', the\n*          leading N-by-N lower triangular part of A contains the lower\n*          triangular part of the matrix A, and the strictly upper\n*          triangular part of A is not referenced.\n*\n*          On exit, if INFO = 0, the factor U or L from the Cholesky\n*          factorization A = U**H*U or A = L*L**H.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the leading minor of order i is not\n*                positive definite, and the factorization could not be\n*                completed.\n*\n'),(236,'zpotrf_236.txt','      SUBROUTINE ZPOTRF( UPLO, N, A, LDA, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, N\n*     ..\n*     .. Array Arguments ..\n      COMPLEX*16         A( LDA, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZPOTRF computes the Cholesky factorization of a complex Hermitian\n*  positive definite matrix A.\n*\n*  The factorization has the form\n*     A = U**H * U,  if UPLO = \'U\', or\n*     A = L  * L**H,  if UPLO = \'L\',\n*  where U is an upper triangular matrix and L is lower triangular.\n*\n*  This is the block version of the algorithm, calling Level 3 BLAS.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) COMPLEX*16 array, dimension (LDA,N)\n*          On entry, the Hermitian matrix A.  If UPLO = \'U\', the leading\n*          N-by-N upper triangular part of A contains the upper\n*          triangular part of the matrix A, and the strictly lower\n*          triangular part of A is not referenced.  If UPLO = \'L\', the\n*          leading N-by-N lower triangular part of A contains the lower\n*          triangular part of the matrix A, and the strictly upper\n*          triangular part of A is not referenced.\n*\n*          On exit, if INFO = 0, the factor U or L from the Cholesky\n*          factorization A = U**H *U or A = L*L**H.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the leading minor of order i is not\n*                positive definite, and the factorization could not be\n*                completed.\n*\n'),(237,'spptrf_237.txt','      SUBROUTINE SPPTRF( UPLO, N, AP, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, N\n*     ..\n*     .. Array Arguments ..\n      REAL               AP( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SPPTRF computes the Cholesky factorization of a real symmetric\n*  positive definite matrix A stored in packed format.\n*\n*  The factorization has the form\n*     A = U**T * U,  if UPLO = \'U\', or\n*     A = L  * L**T,  if UPLO = \'L\',\n*  where U is an upper triangular matrix and L is lower triangular.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input/output) REAL array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the symmetric matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = A(i,j) for j<=i<=n.\n*          See below for further details.\n*\n*          On exit, if INFO = 0, the triangular factor U or L from the\n*          Cholesky factorization A = U**T*U or A = L*L**T, in the same\n*          storage format as A.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the leading minor of order i is not\n*                positive definite, and the factorization could not be\n*                completed.\n*\n'),(238,'dpptrf_238.txt','      SUBROUTINE DPPTRF( UPLO, N, AP, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, N\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   AP( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DPPTRF computes the Cholesky factorization of a real symmetric\n*  positive definite matrix A stored in packed format.\n*\n*  The factorization has the form\n*     A = U**T * U,  if UPLO = \'U\', or\n*     A = L  * L**T,  if UPLO = \'L\',\n*  where U is an upper triangular matrix and L is lower triangular.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input/output) DOUBLE PRECISION array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the symmetric matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = A(i,j) for j<=i<=n.\n*          See below for further details.\n*\n*          On exit, if INFO = 0, the triangular factor U or L from the\n*          Cholesky factorization A = U**T*U or A = L*L**T, in the same\n*          storage format as A.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the leading minor of order i is not\n*                positive definite, and the factorization could not be\n*                completed.\n*\n'),(239,'cpptrf_239.txt','      SUBROUTINE CPPTRF( UPLO, N, AP, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, N\n*     ..\n*     .. Array Arguments ..\n      COMPLEX            AP( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CPPTRF computes the Cholesky factorization of a complex Hermitian\n*  positive definite matrix A stored in packed format.\n*\n*  The factorization has the form\n*     A = U**H * U,  if UPLO = \'U\', or\n*     A = L  * L**H,  if UPLO = \'L\',\n*  where U is an upper triangular matrix and L is lower triangular.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input/output) COMPLEX array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the Hermitian matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = A(i,j) for j<=i<=n.\n*          See below for further details.\n*\n*          On exit, if INFO = 0, the triangular factor U or L from the\n*          Cholesky factorization A = U**H*U or A = L*L**H, in the same\n*          storage format as A.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the leading minor of order i is not\n*                positive definite, and the factorization could not be\n*                completed.\n*\n'),(240,'zpptrf_240.txt','      SUBROUTINE ZPPTRF( UPLO, N, AP, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, N\n*     ..\n*     .. Array Arguments ..\n      COMPLEX*16         AP( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZPPTRF computes the Cholesky factorization of a complex Hermitian\n*  positive definite matrix A stored in packed format.\n*\n*  The factorization has the form\n*     A = U**H * U,  if UPLO = \'U\', or\n*     A = L  * L**H,  if UPLO = \'L\',\n*  where U is an upper triangular matrix and L is lower triangular.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input/output) COMPLEX*16 array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the Hermitian matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = A(i,j) for j<=i<=n.\n*          See below for further details.\n*\n*          On exit, if INFO = 0, the triangular factor U or L from the\n*          Cholesky factorization A = U**H*U or A = L*L**H, in the same\n*          storage format as A.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the leading minor of order i is not\n*                positive definite, and the factorization could not be\n*                completed.\n*\n'),(241,'spbtrf_241.txt','      SUBROUTINE SPBTRF( UPLO, N, KD, AB, LDAB, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, KD, LDAB, N\n*     ..\n*     .. Array Arguments ..\n      REAL               AB( LDAB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SPBTRF computes the Cholesky factorization of a real symmetric\n*  positive definite band matrix A.\n*\n*  The factorization has the form\n*     A = U**T * U,  if UPLO = \'U\', or\n*     A = L  * L**T,  if UPLO = \'L\',\n*  where U is an upper triangular matrix and L is lower triangular.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KD >= 0.\n*\n*  AB      (input/output) REAL array, dimension (LDAB,N)\n*          On entry, the upper or lower triangle of the symmetric band\n*          matrix A, stored in the first KD+1 rows of the array.  The\n*          j-th column of A is stored in the j-th column of the array AB\n*          as follows:\n*          if UPLO = \'U\', AB(kd+1+i-j,j) = A(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+kd).\n*\n*          On exit, if INFO = 0, the triangular factor U or L from the\n*          Cholesky factorization A = U**T*U or A = L*L**T of the band\n*          matrix A, in the same storage format as A.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD+1.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the leading minor of order i is not\n*                positive definite, and the factorization could not be\n*                completed.\n*\n'),(242,'dpbtrf_242.txt','      SUBROUTINE DPBTRF( UPLO, N, KD, AB, LDAB, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, KD, LDAB, N\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   AB( LDAB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DPBTRF computes the Cholesky factorization of a real symmetric\n*  positive definite band matrix A.\n*\n*  The factorization has the form\n*     A = U**T * U,  if UPLO = \'U\', or\n*     A = L  * L**T,  if UPLO = \'L\',\n*  where U is an upper triangular matrix and L is lower triangular.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KD >= 0.\n*\n*  AB      (input/output) DOUBLE PRECISION array, dimension (LDAB,N)\n*          On entry, the upper or lower triangle of the symmetric band\n*          matrix A, stored in the first KD+1 rows of the array.  The\n*          j-th column of A is stored in the j-th column of the array AB\n*          as follows:\n*          if UPLO = \'U\', AB(kd+1+i-j,j) = A(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+kd).\n*\n*          On exit, if INFO = 0, the triangular factor U or L from the\n*          Cholesky factorization A = U**T*U or A = L*L**T of the band\n*          matrix A, in the same storage format as A.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD+1.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the leading minor of order i is not\n*                positive definite, and the factorization could not be\n*                completed.\n*\n'),(243,'cpbtrf_243.txt','      SUBROUTINE CPBTRF( UPLO, N, KD, AB, LDAB, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, KD, LDAB, N\n*     ..\n*     .. Array Arguments ..\n      COMPLEX            AB( LDAB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CPBTRF computes the Cholesky factorization of a complex Hermitian\n*  positive definite band matrix A.\n*\n*  The factorization has the form\n*     A = U**H * U,  if UPLO = \'U\', or\n*     A = L  * L**H,  if UPLO = \'L\',\n*  where U is an upper triangular matrix and L is lower triangular.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KD >= 0.\n*\n*  AB      (input/output) COMPLEX array, dimension (LDAB,N)\n*          On entry, the upper or lower triangle of the Hermitian band\n*          matrix A, stored in the first KD+1 rows of the array.  The\n*          j-th column of A is stored in the j-th column of the array AB\n*          as follows:\n*          if UPLO = \'U\', AB(kd+1+i-j,j) = A(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+kd).\n*\n*          On exit, if INFO = 0, the triangular factor U or L from the\n*          Cholesky factorization A = U**H*U or A = L*L**H of the band\n*          matrix A, in the same storage format as A.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD+1.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the leading minor of order i is not\n*                positive definite, and the factorization could not be\n*                completed.\n*\n'),(244,'zpbtrf_244.txt','      SUBROUTINE ZPBTRF( UPLO, N, KD, AB, LDAB, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, KD, LDAB, N\n*     ..\n*     .. Array Arguments ..\n      COMPLEX*16         AB( LDAB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZPBTRF computes the Cholesky factorization of a complex Hermitian\n*  positive definite band matrix A.\n*\n*  The factorization has the form\n*     A = U**H * U,  if UPLO = \'U\', or\n*     A = L  * L**H,  if UPLO = \'L\',\n*  where U is an upper triangular matrix and L is lower triangular.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KD >= 0.\n*\n*  AB      (input/output) COMPLEX*16 array, dimension (LDAB,N)\n*          On entry, the upper or lower triangle of the Hermitian band\n*          matrix A, stored in the first KD+1 rows of the array.  The\n*          j-th column of A is stored in the j-th column of the array AB\n*          as follows:\n*          if UPLO = \'U\', AB(kd+1+i-j,j) = A(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+kd).\n*\n*          On exit, if INFO = 0, the triangular factor U or L from the\n*          Cholesky factorization A = U**H*U or A = L*L**H of the band\n*          matrix A, in the same storage format as A.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD+1.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the leading minor of order i is not\n*                positive definite, and the factorization could not be\n*                completed.\n*\n'),(245,'spttrf_245.txt','      SUBROUTINE SPTTRF( N, D, E, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, N\n*     ..\n*     .. Array Arguments ..\n      REAL               D( * ), E( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SPTTRF computes the L*D*L**T factorization of a real symmetric\n*  positive definite tridiagonal matrix A.  The factorization may also\n*  be regarded as having the form A = U**T*D*U.\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  D       (input/output) REAL array, dimension (N)\n*          On entry, the n diagonal elements of the tridiagonal matrix\n*          A.  On exit, the n diagonal elements of the diagonal matrix\n*          D from the L*D*L**T factorization of A.\n*\n*  E       (input/output) REAL array, dimension (N-1)\n*          On entry, the (n-1) subdiagonal elements of the tridiagonal\n*          matrix A.  On exit, the (n-1) subdiagonal elements of the\n*          unit bidiagonal factor L from the L*D*L**T factorization of A.\n*          E can also be regarded as the superdiagonal of the unit\n*          bidiagonal factor U from the U**T*D*U factorization of A.\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -k, the k-th argument had an illegal value\n*          > 0: if INFO = k, the leading minor of order k is not\n*               positive definite; if k < N, the factorization could not\n*               be completed, while if k = N, the factorization was\n*               completed, but D(N) <= 0.\n*\n'),(246,'dpttrf_246.txt','      SUBROUTINE DPTTRF( N, D, E, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, N\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   D( * ), E( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DPTTRF computes the L*D*L**T factorization of a real symmetric\n*  positive definite tridiagonal matrix A.  The factorization may also\n*  be regarded as having the form A = U**T*D*U.\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  D       (input/output) DOUBLE PRECISION array, dimension (N)\n*          On entry, the n diagonal elements of the tridiagonal matrix\n*          A.  On exit, the n diagonal elements of the diagonal matrix\n*          D from the L*D*L**T factorization of A.\n*\n*  E       (input/output) DOUBLE PRECISION array, dimension (N-1)\n*          On entry, the (n-1) subdiagonal elements of the tridiagonal\n*          matrix A.  On exit, the (n-1) subdiagonal elements of the\n*          unit bidiagonal factor L from the L*D*L**T factorization of A.\n*          E can also be regarded as the superdiagonal of the unit\n*          bidiagonal factor U from the U**T*D*U factorization of A.\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -k, the k-th argument had an illegal value\n*          > 0: if INFO = k, the leading minor of order k is not\n*               positive definite; if k < N, the factorization could not\n*               be completed, while if k = N, the factorization was\n*               completed, but D(N) <= 0.\n*\n'),(247,'cpttrf_247.txt','      SUBROUTINE CPTTRF( N, D, E, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, N\n*     ..\n*     .. Array Arguments ..\n      REAL               D( * )\n      COMPLEX            E( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CPTTRF computes the L*D*L**H factorization of a complex Hermitian\n*  positive definite tridiagonal matrix A.  The factorization may also\n*  be regarded as having the form A = U**H *D*U.\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  D       (input/output) REAL array, dimension (N)\n*          On entry, the n diagonal elements of the tridiagonal matrix\n*          A.  On exit, the n diagonal elements of the diagonal matrix\n*          D from the L*D*L**H factorization of A.\n*\n*  E       (input/output) COMPLEX array, dimension (N-1)\n*          On entry, the (n-1) subdiagonal elements of the tridiagonal\n*          matrix A.  On exit, the (n-1) subdiagonal elements of the\n*          unit bidiagonal factor L from the L*D*L**H factorization of A.\n*          E can also be regarded as the superdiagonal of the unit\n*          bidiagonal factor U from the U**H *D*U factorization of A.\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -k, the k-th argument had an illegal value\n*          > 0: if INFO = k, the leading minor of order k is not\n*               positive definite; if k < N, the factorization could not\n*               be completed, while if k = N, the factorization was\n*               completed, but D(N) <= 0.\n*\n'),(248,'zpttrf_248.txt','      SUBROUTINE ZPTTRF( N, D, E, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, N\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   D( * )\n      COMPLEX*16         E( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZPTTRF computes the L*D*L**H factorization of a complex Hermitian\n*  positive definite tridiagonal matrix A.  The factorization may also\n*  be regarded as having the form A = U**H *D*U.\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  D       (input/output) DOUBLE PRECISION array, dimension (N)\n*          On entry, the n diagonal elements of the tridiagonal matrix\n*          A.  On exit, the n diagonal elements of the diagonal matrix\n*          D from the L*D*L**H factorization of A.\n*\n*  E       (input/output) COMPLEX*16 array, dimension (N-1)\n*          On entry, the (n-1) subdiagonal elements of the tridiagonal\n*          matrix A.  On exit, the (n-1) subdiagonal elements of the\n*          unit bidiagonal factor L from the L*D*L**H factorization of A.\n*          E can also be regarded as the superdiagonal of the unit\n*          bidiagonal factor U from the U**H *D*U factorization of A.\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -k, the k-th argument had an illegal value\n*          > 0: if INFO = k, the leading minor of order k is not\n*               positive definite; if k < N, the factorization could not\n*               be completed, while if k = N, the factorization was\n*               completed, but D(N) <= 0.\n*\n'),(249,'ssytrf_249.txt','      SUBROUTINE SSYTRF( UPLO, N, A, LDA, IPIV, WORK, LWORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      REAL               A( LDA, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SSYTRF computes the factorization of a real symmetric matrix A using\n*  the Bunch-Kaufman diagonal pivoting method.  The form of the\n*  factorization is\n*\n*     A = U*D*U**T  or  A = L*D*L**T\n*\n*  where U (or L) is a product of permutation and unit upper (lower)\n*  triangular matrices, and D is symmetric and block diagonal with \n*  1-by-1 and 2-by-2 diagonal blocks.\n*\n*  This is the blocked version of the algorithm, calling Level 3 BLAS.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) REAL array, dimension (LDA,N)\n*          On entry, the symmetric matrix A.  If UPLO = \'U\', the leading\n*          N-by-N upper triangular part of A contains the upper\n*          triangular part of the matrix A, and the strictly lower\n*          triangular part of A is not referenced.  If UPLO = \'L\', the\n*          leading N-by-N lower triangular part of A contains the lower\n*          triangular part of the matrix A, and the strictly upper\n*          triangular part of A is not referenced.\n*\n*          On exit, the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L (see below for further details).\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (output) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D.\n*          If IPIV(k) > 0, then rows and columns k and IPIV(k) were\n*          interchanged and D(k,k) is a 1-by-1 diagonal block.\n*          If UPLO = \'U\' and IPIV(k) = IPIV(k-1) < 0, then rows and\n*          columns k-1 and -IPIV(k) were interchanged and D(k-1:k,k-1:k)\n*          is a 2-by-2 diagonal block.  If UPLO = \'L\' and IPIV(k) =\n*          IPIV(k+1) < 0, then rows and columns k+1 and -IPIV(k) were\n*          interchanged and D(k:k+1,k:k+1) is a 2-by-2 diagonal block.\n*\n*  WORK    (workspace/output) REAL array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The length of WORK.  LWORK >=1.  For best performance\n*          LWORK >= N*NB, where NB is the block size returned by ILAENV.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, D(i,i) is exactly zero.  The factorization\n*                has been completed, but the block diagonal matrix D is\n*                exactly singular, and division by zero will occur if it\n*                is used to solve a system of equations.\n*\n'),(250,'dsytrf_250.txt','      SUBROUTINE DSYTRF( UPLO, N, A, LDA, IPIV, WORK, LWORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      DOUBLE PRECISION   A( LDA, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DSYTRF computes the factorization of a real symmetric matrix A using\n*  the Bunch-Kaufman diagonal pivoting method.  The form of the\n*  factorization is\n*\n*     A = U*D*U**T  or  A = L*D*L**T\n*\n*  where U (or L) is a product of permutation and unit upper (lower)\n*  triangular matrices, and D is symmetric and block diagonal with\n*  1-by-1 and 2-by-2 diagonal blocks.\n*\n*  This is the blocked version of the algorithm, calling Level 3 BLAS.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) DOUBLE PRECISION array, dimension (LDA,N)\n*          On entry, the symmetric matrix A.  If UPLO = \'U\', the leading\n*          N-by-N upper triangular part of A contains the upper\n*          triangular part of the matrix A, and the strictly lower\n*          triangular part of A is not referenced.  If UPLO = \'L\', the\n*          leading N-by-N lower triangular part of A contains the lower\n*          triangular part of the matrix A, and the strictly upper\n*          triangular part of A is not referenced.\n*\n*          On exit, the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L (see below for further details).\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (output) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D.\n*          If IPIV(k) > 0, then rows and columns k and IPIV(k) were\n*          interchanged and D(k,k) is a 1-by-1 diagonal block.\n*          If UPLO = \'U\' and IPIV(k) = IPIV(k-1) < 0, then rows and\n*          columns k-1 and -IPIV(k) were interchanged and D(k-1:k,k-1:k)\n*          is a 2-by-2 diagonal block.  If UPLO = \'L\' and IPIV(k) =\n*          IPIV(k+1) < 0, then rows and columns k+1 and -IPIV(k) were\n*          interchanged and D(k:k+1,k:k+1) is a 2-by-2 diagonal block.\n*\n*  WORK    (workspace/output) DOUBLE PRECISION array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The length of WORK.  LWORK >=1.  For best performance\n*          LWORK >= N*NB, where NB is the block size returned by ILAENV.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, D(i,i) is exactly zero.  The factorization\n*                has been completed, but the block diagonal matrix D is\n*                exactly singular, and division by zero will occur if it\n*                is used to solve a system of equations.\n*\n'),(251,'chetrf_251.txt','      SUBROUTINE CHETRF( UPLO, N, A, LDA, IPIV, WORK, LWORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX            A( LDA, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CHETRF computes the factorization of a complex Hermitian matrix A\n*  using the Bunch-Kaufman diagonal pivoting method.  The form of the\n*  factorization is\n*\n*     A = U*D*U**H  or  A = L*D*L**H\n*\n*  where U (or L) is a product of permutation and unit upper (lower)\n*  triangular matrices, and D is Hermitian and block diagonal with \n*  1-by-1 and 2-by-2 diagonal blocks.\n*\n*  This is the blocked version of the algorithm, calling Level 3 BLAS.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) COMPLEX array, dimension (LDA,N)\n*          On entry, the Hermitian matrix A.  If UPLO = \'U\', the leading\n*          N-by-N upper triangular part of A contains the upper\n*          triangular part of the matrix A, and the strictly lower\n*          triangular part of A is not referenced.  If UPLO = \'L\', the\n*          leading N-by-N lower triangular part of A contains the lower\n*          triangular part of the matrix A, and the strictly upper\n*          triangular part of A is not referenced.\n*\n*          On exit, the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L (see below for further details).\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (output) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D.\n*          If IPIV(k) > 0, then rows and columns k and IPIV(k) were\n*          interchanged and D(k,k) is a 1-by-1 diagonal block.\n*          If UPLO = \'U\' and IPIV(k) = IPIV(k-1) < 0, then rows and\n*          columns k-1 and -IPIV(k) were interchanged and D(k-1:k,k-1:k)\n*          is a 2-by-2 diagonal block.  If UPLO = \'L\' and IPIV(k) =\n*          IPIV(k+1) < 0, then rows and columns k+1 and -IPIV(k) were\n*          interchanged and D(k:k+1,k:k+1) is a 2-by-2 diagonal block.\n*\n*  WORK    (workspace/output) COMPLEX array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The length of WORK.  LWORK >=1.  For best performance\n*          LWORK >= N*NB, where NB is the block size returned by ILAENV.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, D(i,i) is exactly zero.  The factorization\n*                has been completed, but the block diagonal matrix D is\n*                exactly singular, and division by zero will occur if it\n*                is used to solve a system of equations.\n*\n'),(252,'zhetrf_252.txt','      SUBROUTINE ZHETRF( UPLO, N, A, LDA, IPIV, WORK, LWORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX*16         A( LDA, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZHETRF computes the factorization of a complex Hermitian matrix A\n*  using the Bunch-Kaufman diagonal pivoting method.  The form of the\n*  factorization is\n*\n*     A = U*D*U**H  or  A = L*D*L**H\n*\n*  where U (or L) is a product of permutation and unit upper (lower)\n*  triangular matrices, and D is Hermitian and block diagonal with\n*  1-by-1 and 2-by-2 diagonal blocks.\n*\n*  This is the blocked version of the algorithm, calling Level 3 BLAS.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) COMPLEX*16 array, dimension (LDA,N)\n*          On entry, the Hermitian matrix A.  If UPLO = \'U\', the leading\n*          N-by-N upper triangular part of A contains the upper\n*          triangular part of the matrix A, and the strictly lower\n*          triangular part of A is not referenced.  If UPLO = \'L\', the\n*          leading N-by-N lower triangular part of A contains the lower\n*          triangular part of the matrix A, and the strictly upper\n*          triangular part of A is not referenced.\n*\n*          On exit, the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L (see below for further details).\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (output) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D.\n*          If IPIV(k) > 0, then rows and columns k and IPIV(k) were\n*          interchanged and D(k,k) is a 1-by-1 diagonal block.\n*          If UPLO = \'U\' and IPIV(k) = IPIV(k-1) < 0, then rows and\n*          columns k-1 and -IPIV(k) were interchanged and D(k-1:k,k-1:k)\n*          is a 2-by-2 diagonal block.  If UPLO = \'L\' and IPIV(k) =\n*          IPIV(k+1) < 0, then rows and columns k+1 and -IPIV(k) were\n*          interchanged and D(k:k+1,k:k+1) is a 2-by-2 diagonal block.\n*\n*  WORK    (workspace/output) COMPLEX*16 array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The length of WORK.  LWORK >=1.  For best performance\n*          LWORK >= N*NB, where NB is the block size returned by ILAENV.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, D(i,i) is exactly zero.  The factorization\n*                has been completed, but the block diagonal matrix D is\n*                exactly singular, and division by zero will occur if it\n*                is used to solve a system of equations.\n*\n'),(253,'csytrf_253.txt','      SUBROUTINE CSYTRF( UPLO, N, A, LDA, IPIV, WORK, LWORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX            A( LDA, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CSYTRF computes the factorization of a complex symmetric matrix A\n*  using the Bunch-Kaufman diagonal pivoting method.  The form of the\n*  factorization is\n*\n*     A = U*D*U**T  or  A = L*D*L**T\n*\n*  where U (or L) is a product of permutation and unit upper (lower)\n*  triangular matrices, and D is symmetric and block diagonal with\n*  with 1-by-1 and 2-by-2 diagonal blocks.\n*\n*  This is the blocked version of the algorithm, calling Level 3 BLAS.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) COMPLEX array, dimension (LDA,N)\n*          On entry, the symmetric matrix A.  If UPLO = \'U\', the leading\n*          N-by-N upper triangular part of A contains the upper\n*          triangular part of the matrix A, and the strictly lower\n*          triangular part of A is not referenced.  If UPLO = \'L\', the\n*          leading N-by-N lower triangular part of A contains the lower\n*          triangular part of the matrix A, and the strictly upper\n*          triangular part of A is not referenced.\n*\n*          On exit, the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L (see below for further details).\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (output) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D.\n*          If IPIV(k) > 0, then rows and columns k and IPIV(k) were\n*          interchanged and D(k,k) is a 1-by-1 diagonal block.\n*          If UPLO = \'U\' and IPIV(k) = IPIV(k-1) < 0, then rows and\n*          columns k-1 and -IPIV(k) were interchanged and D(k-1:k,k-1:k)\n*          is a 2-by-2 diagonal block.  If UPLO = \'L\' and IPIV(k) =\n*          IPIV(k+1) < 0, then rows and columns k+1 and -IPIV(k) were\n*          interchanged and D(k:k+1,k:k+1) is a 2-by-2 diagonal block.\n*\n*  WORK    (workspace/output) COMPLEX array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The length of WORK.  LWORK >=1.  For best performance\n*          LWORK >= N*NB, where NB is the block size returned by ILAENV.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, D(i,i) is exactly zero.  The factorization\n*                has been completed, but the block diagonal matrix D is\n*                exactly singular, and division by zero will occur if it\n*                is used to solve a system of equations.\n*\n'),(254,'zsytrf_254.txt','      SUBROUTINE ZSYTRF( UPLO, N, A, LDA, IPIV, WORK, LWORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX*16         A( LDA, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZSYTRF computes the factorization of a complex symmetric matrix A\n*  using the Bunch-Kaufman diagonal pivoting method.  The form of the\n*  factorization is\n*\n*     A = U*D*U**T  or  A = L*D*L**T\n*\n*  where U (or L) is a product of permutation and unit upper (lower)\n*  triangular matrices, and D is symmetric and block diagonal with\n*  with 1-by-1 and 2-by-2 diagonal blocks.\n*\n*  This is the blocked version of the algorithm, calling Level 3 BLAS.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) COMPLEX*16 array, dimension (LDA,N)\n*          On entry, the symmetric matrix A.  If UPLO = \'U\', the leading\n*          N-by-N upper triangular part of A contains the upper\n*          triangular part of the matrix A, and the strictly lower\n*          triangular part of A is not referenced.  If UPLO = \'L\', the\n*          leading N-by-N lower triangular part of A contains the lower\n*          triangular part of the matrix A, and the strictly upper\n*          triangular part of A is not referenced.\n*\n*          On exit, the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L (see below for further details).\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (output) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D.\n*          If IPIV(k) > 0, then rows and columns k and IPIV(k) were\n*          interchanged and D(k,k) is a 1-by-1 diagonal block.\n*          If UPLO = \'U\' and IPIV(k) = IPIV(k-1) < 0, then rows and\n*          columns k-1 and -IPIV(k) were interchanged and D(k-1:k,k-1:k)\n*          is a 2-by-2 diagonal block.  If UPLO = \'L\' and IPIV(k) =\n*          IPIV(k+1) < 0, then rows and columns k+1 and -IPIV(k) were\n*          interchanged and D(k:k+1,k:k+1) is a 2-by-2 diagonal block.\n*\n*  WORK    (workspace/output) COMPLEX*16 array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The length of WORK.  LWORK >=1.  For best performance\n*          LWORK >= N*NB, where NB is the block size returned by ILAENV.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, D(i,i) is exactly zero.  The factorization\n*                has been completed, but the block diagonal matrix D is\n*                exactly singular, and division by zero will occur if it\n*                is used to solve a system of equations.\n*\n'),(255,'ssptrf_255.txt','      SUBROUTINE SSPTRF( UPLO, N, AP, IPIV, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      REAL               AP( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SSPTRF computes the factorization of a real symmetric matrix A stored\n*  in packed format using the Bunch-Kaufman diagonal pivoting method:\n*\n*     A = U*D*U**T  or  A = L*D*L**T\n*\n*  where U (or L) is a product of permutation and unit upper (lower)\n*  triangular matrices, and D is symmetric and block diagonal with\n*  1-by-1 and 2-by-2 diagonal blocks.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input/output) REAL array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the symmetric matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = A(i,j) for j<=i<=n.\n*\n*          On exit, the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L, stored as a packed triangular\n*          matrix overwriting A (see below for further details).\n*\n*  IPIV    (output) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D.\n*          If IPIV(k) > 0, then rows and columns k and IPIV(k) were\n*          interchanged and D(k,k) is a 1-by-1 diagonal block.\n*          If UPLO = \'U\' and IPIV(k) = IPIV(k-1) < 0, then rows and\n*          columns k-1 and -IPIV(k) were interchanged and D(k-1:k,k-1:k)\n*          is a 2-by-2 diagonal block.  If UPLO = \'L\' and IPIV(k) =\n*          IPIV(k+1) < 0, then rows and columns k+1 and -IPIV(k) were\n*          interchanged and D(k:k+1,k:k+1) is a 2-by-2 diagonal block.\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, D(i,i) is exactly zero.  The factorization\n*               has been completed, but the block diagonal matrix D is\n*               exactly singular, and division by zero will occur if it\n*               is used to solve a system of equations.\n*\n'),(256,'dsptrf_256.txt','      SUBROUTINE DSPTRF( UPLO, N, AP, IPIV, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      DOUBLE PRECISION   AP( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DSPTRF computes the factorization of a real symmetric matrix A stored\n*  in packed format using the Bunch-Kaufman diagonal pivoting method:\n*\n*     A = U*D*U**T  or  A = L*D*L**T\n*\n*  where U (or L) is a product of permutation and unit upper (lower)\n*  triangular matrices, and D is symmetric and block diagonal with\n*  1-by-1 and 2-by-2 diagonal blocks.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input/output) DOUBLE PRECISION array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the symmetric matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = A(i,j) for j<=i<=n.\n*\n*          On exit, the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L, stored as a packed triangular\n*          matrix overwriting A (see below for further details).\n*\n*  IPIV    (output) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D.\n*          If IPIV(k) > 0, then rows and columns k and IPIV(k) were\n*          interchanged and D(k,k) is a 1-by-1 diagonal block.\n*          If UPLO = \'U\' and IPIV(k) = IPIV(k-1) < 0, then rows and\n*          columns k-1 and -IPIV(k) were interchanged and D(k-1:k,k-1:k)\n*          is a 2-by-2 diagonal block.  If UPLO = \'L\' and IPIV(k) =\n*          IPIV(k+1) < 0, then rows and columns k+1 and -IPIV(k) were\n*          interchanged and D(k:k+1,k:k+1) is a 2-by-2 diagonal block.\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, D(i,i) is exactly zero.  The factorization\n*               has been completed, but the block diagonal matrix D is\n*               exactly singular, and division by zero will occur if it\n*               is used to solve a system of equations.\n*\n'),(257,'chptrf_257.txt','      SUBROUTINE CHPTRF( UPLO, N, AP, IPIV, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX            AP( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CHPTRF computes the factorization of a complex Hermitian packed\n*  matrix A using the Bunch-Kaufman diagonal pivoting method:\n*\n*     A = U*D*U**H  or  A = L*D*L**H\n*\n*  where U (or L) is a product of permutation and unit upper (lower)\n*  triangular matrices, and D is Hermitian and block diagonal with\n*  1-by-1 and 2-by-2 diagonal blocks.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input/output) COMPLEX array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the Hermitian matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = A(i,j) for j<=i<=n.\n*\n*          On exit, the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L, stored as a packed triangular\n*          matrix overwriting A (see below for further details).\n*\n*  IPIV    (output) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D.\n*          If IPIV(k) > 0, then rows and columns k and IPIV(k) were\n*          interchanged and D(k,k) is a 1-by-1 diagonal block.\n*          If UPLO = \'U\' and IPIV(k) = IPIV(k-1) < 0, then rows and\n*          columns k-1 and -IPIV(k) were interchanged and D(k-1:k,k-1:k)\n*          is a 2-by-2 diagonal block.  If UPLO = \'L\' and IPIV(k) =\n*          IPIV(k+1) < 0, then rows and columns k+1 and -IPIV(k) were\n*          interchanged and D(k:k+1,k:k+1) is a 2-by-2 diagonal block.\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, D(i,i) is exactly zero.  The factorization\n*               has been completed, but the block diagonal matrix D is\n*               exactly singular, and division by zero will occur if it\n*               is used to solve a system of equations.\n*\n'),(258,'zhptrf_258.txt','      SUBROUTINE ZHPTRF( UPLO, N, AP, IPIV, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX*16         AP( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZHPTRF computes the factorization of a complex Hermitian packed\n*  matrix A using the Bunch-Kaufman diagonal pivoting method:\n*\n*     A = U*D*U**H  or  A = L*D*L**H\n*\n*  where U (or L) is a product of permutation and unit upper (lower)\n*  triangular matrices, and D is Hermitian and block diagonal with\n*  1-by-1 and 2-by-2 diagonal blocks.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input/output) COMPLEX*16 array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the Hermitian matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = A(i,j) for j<=i<=n.\n*\n*          On exit, the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L, stored as a packed triangular\n*          matrix overwriting A (see below for further details).\n*\n*  IPIV    (output) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D.\n*          If IPIV(k) > 0, then rows and columns k and IPIV(k) were\n*          interchanged and D(k,k) is a 1-by-1 diagonal block.\n*          If UPLO = \'U\' and IPIV(k) = IPIV(k-1) < 0, then rows and\n*          columns k-1 and -IPIV(k) were interchanged and D(k-1:k,k-1:k)\n*          is a 2-by-2 diagonal block.  If UPLO = \'L\' and IPIV(k) =\n*          IPIV(k+1) < 0, then rows and columns k+1 and -IPIV(k) were\n*          interchanged and D(k:k+1,k:k+1) is a 2-by-2 diagonal block.\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, D(i,i) is exactly zero.  The factorization\n*               has been completed, but the block diagonal matrix D is\n*               exactly singular, and division by zero will occur if it\n*               is used to solve a system of equations.\n*\n'),(259,'csptrf_259.txt','      SUBROUTINE CSPTRF( UPLO, N, AP, IPIV, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX            AP( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CSPTRF computes the factorization of a complex symmetric matrix A\n*  stored in packed format using the Bunch-Kaufman diagonal pivoting\n*  method:\n*\n*     A = U*D*U**T  or  A = L*D*L**T\n*\n*  where U (or L) is a product of permutation and unit upper (lower)\n*  triangular matrices, and D is symmetric and block diagonal with\n*  1-by-1 and 2-by-2 diagonal blocks.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input/output) COMPLEX array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the symmetric matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = A(i,j) for j<=i<=n.\n*\n*          On exit, the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L, stored as a packed triangular\n*          matrix overwriting A (see below for further details).\n*\n*  IPIV    (output) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D.\n*          If IPIV(k) > 0, then rows and columns k and IPIV(k) were\n*          interchanged and D(k,k) is a 1-by-1 diagonal block.\n*          If UPLO = \'U\' and IPIV(k) = IPIV(k-1) < 0, then rows and\n*          columns k-1 and -IPIV(k) were interchanged and D(k-1:k,k-1:k)\n*          is a 2-by-2 diagonal block.  If UPLO = \'L\' and IPIV(k) =\n*          IPIV(k+1) < 0, then rows and columns k+1 and -IPIV(k) were\n*          interchanged and D(k:k+1,k:k+1) is a 2-by-2 diagonal block.\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, D(i,i) is exactly zero.  The factorization\n*               has been completed, but the block diagonal matrix D is\n*               exactly singular, and division by zero will occur if it\n*               is used to solve a system of equations.\n*\n'),(260,'zsptrf_260.txt','      SUBROUTINE ZSPTRF( UPLO, N, AP, IPIV, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX*16         AP( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZSPTRF computes the factorization of a complex symmetric matrix A\n*  stored in packed format using the Bunch-Kaufman diagonal pivoting\n*  method:\n*\n*     A = U*D*U**T  or  A = L*D*L**T\n*\n*  where U (or L) is a product of permutation and unit upper (lower)\n*  triangular matrices, and D is symmetric and block diagonal with\n*  1-by-1 and 2-by-2 diagonal blocks.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input/output) COMPLEX*16 array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangle of the symmetric matrix\n*          A, packed columnwise in a linear array.  The j-th column of A\n*          is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = A(i,j) for j<=i<=n.\n*\n*          On exit, the block diagonal matrix D and the multipliers used\n*          to obtain the factor U or L, stored as a packed triangular\n*          matrix overwriting A (see below for further details).\n*\n*  IPIV    (output) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D.\n*          If IPIV(k) > 0, then rows and columns k and IPIV(k) were\n*          interchanged and D(k,k) is a 1-by-1 diagonal block.\n*          If UPLO = \'U\' and IPIV(k) = IPIV(k-1) < 0, then rows and\n*          columns k-1 and -IPIV(k) were interchanged and D(k-1:k,k-1:k)\n*          is a 2-by-2 diagonal block.  If UPLO = \'L\' and IPIV(k) =\n*          IPIV(k+1) < 0, then rows and columns k+1 and -IPIV(k) were\n*          interchanged and D(k:k+1,k:k+1) is a 2-by-2 diagonal block.\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, D(i,i) is exactly zero.  The factorization\n*               has been completed, but the block diagonal matrix D is\n*               exactly singular, and division by zero will occur if it\n*               is used to solve a system of equations.\n*\n'),(261,'sgetrs_261.txt','      SUBROUTINE SGETRS( TRANS, N, NRHS, A, LDA, IPIV, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          TRANS\n      INTEGER            INFO, LDA, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      REAL               A( LDA, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SGETRS solves a system of linear equations\n*     A * X = B  or  A**T * X = B\n*  with a general N-by-N matrix A using the LU factorization computed\n*  by SGETRF.\n*\n*  Arguments\n*  =========\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B  (No transpose)\n*          = \'T\':  A**T* X = B  (Transpose)\n*          = \'C\':  A**T* X = B  (Conjugate transpose = Transpose)\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  A       (input) REAL array, dimension (LDA,N)\n*          The factors L and U from the factorization A = P*L*U\n*          as computed by SGETRF.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          The pivot indices from SGETRF; for 1<=i<=N, row i of the\n*          matrix was interchanged with row IPIV(i).\n*\n*  B       (input/output) REAL array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(262,'dgetrs_262.txt','      SUBROUTINE DGETRS( TRANS, N, NRHS, A, LDA, IPIV, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          TRANS\n      INTEGER            INFO, LDA, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      DOUBLE PRECISION   A( LDA, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DGETRS solves a system of linear equations\n*     A * X = B  or  A**T * X = B\n*  with a general N-by-N matrix A using the LU factorization computed\n*  by DGETRF.\n*\n*  Arguments\n*  =========\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B  (No transpose)\n*          = \'T\':  A**T* X = B  (Transpose)\n*          = \'C\':  A**T* X = B  (Conjugate transpose = Transpose)\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  A       (input) DOUBLE PRECISION array, dimension (LDA,N)\n*          The factors L and U from the factorization A = P*L*U\n*          as computed by DGETRF.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          The pivot indices from DGETRF; for 1<=i<=N, row i of the\n*          matrix was interchanged with row IPIV(i).\n*\n*  B       (input/output) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(263,'cgetrs_263.txt','      SUBROUTINE CGETRS( TRANS, N, NRHS, A, LDA, IPIV, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          TRANS\n      INTEGER            INFO, LDA, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX            A( LDA, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CGETRS solves a system of linear equations\n*     A * X = B,  A**T * X = B,  or  A**H * X = B\n*  with a general N-by-N matrix A using the LU factorization computed\n*  by CGETRF.\n*\n*  Arguments\n*  =========\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose)\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  A       (input) COMPLEX array, dimension (LDA,N)\n*          The factors L and U from the factorization A = P*L*U\n*          as computed by CGETRF.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          The pivot indices from CGETRF; for 1<=i<=N, row i of the\n*          matrix was interchanged with row IPIV(i).\n*\n*  B       (input/output) COMPLEX array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(264,'zgetrs_264.txt','      SUBROUTINE ZGETRS( TRANS, N, NRHS, A, LDA, IPIV, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          TRANS\n      INTEGER            INFO, LDA, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX*16         A( LDA, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZGETRS solves a system of linear equations\n*     A * X = B,  A**T * X = B,  or  A**H * X = B\n*  with a general N-by-N matrix A using the LU factorization computed\n*  by ZGETRF.\n*\n*  Arguments\n*  =========\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose)\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  A       (input) COMPLEX*16 array, dimension (LDA,N)\n*          The factors L and U from the factorization A = P*L*U\n*          as computed by ZGETRF.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          The pivot indices from ZGETRF; for 1<=i<=N, row i of the\n*          matrix was interchanged with row IPIV(i).\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(265,'sgbtrs_265.txt','      SUBROUTINE SGBTRS( TRANS, N, KL, KU, NRHS, AB, LDAB, IPIV, B, LDB,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          TRANS\n      INTEGER            INFO, KL, KU, LDAB, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      REAL               AB( LDAB, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SGBTRS solves a system of linear equations\n*     A * X = B  or  A**T * X = B\n*  with a general band matrix A using the LU factorization computed\n*  by SGBTRF.\n*\n*  Arguments\n*  =========\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations.\n*          = \'N\':  A * X = B  (No transpose)\n*          = \'T\':  A**T* X = B  (Transpose)\n*          = \'C\':  A**T* X = B  (Conjugate transpose = Transpose)\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KL      (input) INTEGER\n*          The number of subdiagonals within the band of A.  KL >= 0.\n*\n*  KU      (input) INTEGER\n*          The number of superdiagonals within the band of A.  KU >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AB      (input) REAL array, dimension (LDAB,N)\n*          Details of the LU factorization of the band matrix A, as\n*          computed by SGBTRF.  U is stored as an upper triangular band\n*          matrix with KL+KU superdiagonals in rows 1 to KL+KU+1, and\n*          the multipliers used during the factorization are stored in\n*          rows KL+KU+2 to 2*KL+KU+1.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= 2*KL+KU+1.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          The pivot indices; for 1 <= i <= N, row i of the matrix was\n*          interchanged with row IPIV(i).\n*\n*  B       (input/output) REAL array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*\n'),(266,'dgbtrs_266.txt','      SUBROUTINE DGBTRS( TRANS, N, KL, KU, NRHS, AB, LDAB, IPIV, B, LDB,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          TRANS\n      INTEGER            INFO, KL, KU, LDAB, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      DOUBLE PRECISION   AB( LDAB, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DGBTRS solves a system of linear equations\n*     A * X = B  or  A**T * X = B\n*  with a general band matrix A using the LU factorization computed\n*  by DGBTRF.\n*\n*  Arguments\n*  =========\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations.\n*          = \'N\':  A * X = B  (No transpose)\n*          = \'T\':  A**T* X = B  (Transpose)\n*          = \'C\':  A**T* X = B  (Conjugate transpose = Transpose)\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KL      (input) INTEGER\n*          The number of subdiagonals within the band of A.  KL >= 0.\n*\n*  KU      (input) INTEGER\n*          The number of superdiagonals within the band of A.  KU >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AB      (input) DOUBLE PRECISION array, dimension (LDAB,N)\n*          Details of the LU factorization of the band matrix A, as\n*          computed by DGBTRF.  U is stored as an upper triangular band\n*          matrix with KL+KU superdiagonals in rows 1 to KL+KU+1, and\n*          the multipliers used during the factorization are stored in\n*          rows KL+KU+2 to 2*KL+KU+1.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= 2*KL+KU+1.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          The pivot indices; for 1 <= i <= N, row i of the matrix was\n*          interchanged with row IPIV(i).\n*\n*  B       (input/output) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*\n'),(267,'cgbtrs_267.txt','      SUBROUTINE CGBTRS( TRANS, N, KL, KU, NRHS, AB, LDAB, IPIV, B, LDB,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          TRANS\n      INTEGER            INFO, KL, KU, LDAB, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX            AB( LDAB, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CGBTRS solves a system of linear equations\n*     A * X = B,  A**T * X = B,  or  A**H * X = B\n*  with a general band matrix A using the LU factorization computed\n*  by CGBTRF.\n*\n*  Arguments\n*  =========\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations.\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose)\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KL      (input) INTEGER\n*          The number of subdiagonals within the band of A.  KL >= 0.\n*\n*  KU      (input) INTEGER\n*          The number of superdiagonals within the band of A.  KU >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AB      (input) COMPLEX array, dimension (LDAB,N)\n*          Details of the LU factorization of the band matrix A, as\n*          computed by CGBTRF.  U is stored as an upper triangular band\n*          matrix with KL+KU superdiagonals in rows 1 to KL+KU+1, and\n*          the multipliers used during the factorization are stored in\n*          rows KL+KU+2 to 2*KL+KU+1.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= 2*KL+KU+1.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          The pivot indices; for 1 <= i <= N, row i of the matrix was\n*          interchanged with row IPIV(i).\n*\n*  B       (input/output) COMPLEX array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(268,'zgbtrs_268.txt','      SUBROUTINE ZGBTRS( TRANS, N, KL, KU, NRHS, AB, LDAB, IPIV, B, LDB,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          TRANS\n      INTEGER            INFO, KL, KU, LDAB, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX*16         AB( LDAB, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZGBTRS solves a system of linear equations\n*     A * X = B,  A**T * X = B,  or  A**H * X = B\n*  with a general band matrix A using the LU factorization computed\n*  by ZGBTRF.\n*\n*  Arguments\n*  =========\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations.\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose)\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KL      (input) INTEGER\n*          The number of subdiagonals within the band of A.  KL >= 0.\n*\n*  KU      (input) INTEGER\n*          The number of superdiagonals within the band of A.  KU >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AB      (input) COMPLEX*16 array, dimension (LDAB,N)\n*          Details of the LU factorization of the band matrix A, as\n*          computed by ZGBTRF.  U is stored as an upper triangular band\n*          matrix with KL+KU superdiagonals in rows 1 to KL+KU+1, and\n*          the multipliers used during the factorization are stored in\n*          rows KL+KU+2 to 2*KL+KU+1.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= 2*KL+KU+1.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          The pivot indices; for 1 <= i <= N, row i of the matrix was\n*          interchanged with row IPIV(i).\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(269,'sgttrs_269.txt','      SUBROUTINE SGTTRS( TRANS, N, NRHS, DL, D, DU, DU2, IPIV, B, LDB,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          TRANS\n      INTEGER            INFO, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      REAL               B( LDB, * ), D( * ), DL( * ), DU( * ), DU2( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SGTTRS solves one of the systems of equations\n*     A*X = B  or  A**T*X = B,\n*  with a tridiagonal matrix A using the LU factorization computed\n*  by SGTTRF.\n*\n*  Arguments\n*  =========\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations.\n*          = \'N\':  A * X = B  (No transpose)\n*          = \'T\':  A**T* X = B  (Transpose)\n*          = \'C\':  A**T* X = B  (Conjugate transpose = Transpose)\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  DL      (input) REAL array, dimension (N-1)\n*          The (n-1) multipliers that define the matrix L from the\n*          LU factorization of A.\n*\n*  D       (input) REAL array, dimension (N)\n*          The n diagonal elements of the upper triangular matrix U from\n*          the LU factorization of A.\n*\n*  DU      (input) REAL array, dimension (N-1)\n*          The (n-1) elements of the first super-diagonal of U.\n*\n*  DU2     (input) REAL array, dimension (N-2)\n*          The (n-2) elements of the second super-diagonal of U.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          The pivot indices; for 1 <= i <= n, row i of the matrix was\n*          interchanged with row IPIV(i).  IPIV(i) will always be either\n*          i or i+1; IPIV(i) = i indicates a row interchange was not\n*          required.\n*\n*  B       (input/output) REAL array, dimension (LDB,NRHS)\n*          On entry, the matrix of right hand side vectors B.\n*          On exit, B is overwritten by the solution vectors X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(270,'dgttrs_270.txt','      SUBROUTINE DGTTRS( TRANS, N, NRHS, DL, D, DU, DU2, IPIV, B, LDB,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          TRANS\n      INTEGER            INFO, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      DOUBLE PRECISION   B( LDB, * ), D( * ), DL( * ), DU( * ), DU2( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DGTTRS solves one of the systems of equations\n*     A*X = B  or  A**T*X = B,\n*  with a tridiagonal matrix A using the LU factorization computed\n*  by DGTTRF.\n*\n*  Arguments\n*  =========\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations.\n*          = \'N\':  A * X = B  (No transpose)\n*          = \'T\':  A**T* X = B  (Transpose)\n*          = \'C\':  A**T* X = B  (Conjugate transpose = Transpose)\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  DL      (input) DOUBLE PRECISION array, dimension (N-1)\n*          The (n-1) multipliers that define the matrix L from the\n*          LU factorization of A.\n*\n*  D       (input) DOUBLE PRECISION array, dimension (N)\n*          The n diagonal elements of the upper triangular matrix U from\n*          the LU factorization of A.\n*\n*  DU      (input) DOUBLE PRECISION array, dimension (N-1)\n*          The (n-1) elements of the first super-diagonal of U.\n*\n*  DU2     (input) DOUBLE PRECISION array, dimension (N-2)\n*          The (n-2) elements of the second super-diagonal of U.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          The pivot indices; for 1 <= i <= n, row i of the matrix was\n*          interchanged with row IPIV(i).  IPIV(i) will always be either\n*          i or i+1; IPIV(i) = i indicates a row interchange was not\n*          required.\n*\n*  B       (input/output) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          On entry, the matrix of right hand side vectors B.\n*          On exit, B is overwritten by the solution vectors X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(271,'cgttrs_271.txt','      SUBROUTINE CGTTRS( TRANS, N, NRHS, DL, D, DU, DU2, IPIV, B, LDB,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          TRANS\n      INTEGER            INFO, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX            B( LDB, * ), D( * ), DL( * ), DU( * ), DU2( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CGTTRS solves one of the systems of equations\n*     A * X = B,  A**T * X = B,  or  A**H * X = B,\n*  with a tridiagonal matrix A using the LU factorization computed\n*  by CGTTRF.\n*\n*  Arguments\n*  =========\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations.\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose)\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  DL      (input) COMPLEX array, dimension (N-1)\n*          The (n-1) multipliers that define the matrix L from the\n*          LU factorization of A.\n*\n*  D       (input) COMPLEX array, dimension (N)\n*          The n diagonal elements of the upper triangular matrix U from\n*          the LU factorization of A.\n*\n*  DU      (input) COMPLEX array, dimension (N-1)\n*          The (n-1) elements of the first super-diagonal of U.\n*\n*  DU2     (input) COMPLEX array, dimension (N-2)\n*          The (n-2) elements of the second super-diagonal of U.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          The pivot indices; for 1 <= i <= n, row i of the matrix was\n*          interchanged with row IPIV(i).  IPIV(i) will always be either\n*          i or i+1; IPIV(i) = i indicates a row interchange was not\n*          required.\n*\n*  B       (input/output) COMPLEX array, dimension (LDB,NRHS)\n*          On entry, the matrix of right hand side vectors B.\n*          On exit, B is overwritten by the solution vectors X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -k, the k-th argument had an illegal value\n*\n'),(272,'zgttrs_272.txt','      SUBROUTINE ZGTTRS( TRANS, N, NRHS, DL, D, DU, DU2, IPIV, B, LDB,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          TRANS\n      INTEGER            INFO, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX*16         B( LDB, * ), D( * ), DL( * ), DU( * ), DU2( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZGTTRS solves one of the systems of equations\n*     A * X = B,  A**T * X = B,  or  A**H * X = B,\n*  with a tridiagonal matrix A using the LU factorization computed\n*  by ZGTTRF.\n*\n*  Arguments\n*  =========\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations.\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose)\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  DL      (input) COMPLEX*16 array, dimension (N-1)\n*          The (n-1) multipliers that define the matrix L from the\n*          LU factorization of A.\n*\n*  D       (input) COMPLEX*16 array, dimension (N)\n*          The n diagonal elements of the upper triangular matrix U from\n*          the LU factorization of A.\n*\n*  DU      (input) COMPLEX*16 array, dimension (N-1)\n*          The (n-1) elements of the first super-diagonal of U.\n*\n*  DU2     (input) COMPLEX*16 array, dimension (N-2)\n*          The (n-2) elements of the second super-diagonal of U.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          The pivot indices; for 1 <= i <= n, row i of the matrix was\n*          interchanged with row IPIV(i).  IPIV(i) will always be either\n*          i or i+1; IPIV(i) = i indicates a row interchange was not\n*          required.\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB,NRHS)\n*          On entry, the matrix of right hand side vectors B.\n*          On exit, B is overwritten by the solution vectors X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -k, the k-th argument had an illegal value\n*\n'),(273,'spotrs_273.txt','      SUBROUTINE SPOTRS( UPLO, N, NRHS, A, LDA, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      REAL               A( LDA, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SPOTRS solves a system of linear equations A*X = B with a symmetric\n*  positive definite matrix A using the Cholesky factorization\n*  A = U**T*U or A = L*L**T computed by SPOTRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  A       (input) REAL array, dimension (LDA,N)\n*          The triangular factor U or L from the Cholesky factorization\n*          A = U**T*U or A = L*L**T, as computed by SPOTRF.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  B       (input/output) REAL array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(274,'dpotrs_274.txt','      SUBROUTINE DPOTRS( UPLO, N, NRHS, A, LDA, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   A( LDA, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DPOTRS solves a system of linear equations A*X = B with a symmetric\n*  positive definite matrix A using the Cholesky factorization\n*  A = U**T*U or A = L*L**T computed by DPOTRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  A       (input) DOUBLE PRECISION array, dimension (LDA,N)\n*          The triangular factor U or L from the Cholesky factorization\n*          A = U**T*U or A = L*L**T, as computed by DPOTRF.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  B       (input/output) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(275,'cpotrs_275.txt','      SUBROUTINE CPOTRS( UPLO, N, NRHS, A, LDA, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      COMPLEX            A( LDA, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CPOTRS solves a system of linear equations A*X = B with a Hermitian\n*  positive definite matrix A using the Cholesky factorization \n*  A = U**H*U or A = L*L**H computed by CPOTRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  A       (input) COMPLEX array, dimension (LDA,N)\n*          The triangular factor U or L from the Cholesky factorization\n*          A = U**H*U or A = L*L**H, as computed by CPOTRF.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  B       (input/output) COMPLEX array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(276,'zpotrs_276.txt','      SUBROUTINE ZPOTRS( UPLO, N, NRHS, A, LDA, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      COMPLEX*16         A( LDA, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZPOTRS solves a system of linear equations A*X = B with a Hermitian\n*  positive definite matrix A using the Cholesky factorization\n*  A = U**H * U or A = L * L**H computed by ZPOTRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  A       (input) COMPLEX*16 array, dimension (LDA,N)\n*          The triangular factor U or L from the Cholesky factorization\n*          A = U**H * U or A = L * L**H, as computed by ZPOTRF.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(277,'spptrs_277.txt','      SUBROUTINE SPPTRS( UPLO, N, NRHS, AP, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      REAL               AP( * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SPPTRS solves a system of linear equations A*X = B with a symmetric\n*  positive definite matrix A in packed storage using the Cholesky\n*  factorization A = U**T*U or A = L*L**T computed by SPPTRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AP      (input) REAL array, dimension (N*(N+1)/2)\n*          The triangular factor U or L from the Cholesky factorization\n*          A = U**T*U or A = L*L**T, packed columnwise in a linear\n*          array.  The j-th column of U or L is stored in the array AP\n*          as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = U(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = L(i,j) for j<=i<=n.\n*\n*  B       (input/output) REAL array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(278,'dpptrs_278.txt','      SUBROUTINE DPPTRS( UPLO, N, NRHS, AP, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   AP( * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DPPTRS solves a system of linear equations A*X = B with a symmetric\n*  positive definite matrix A in packed storage using the Cholesky\n*  factorization A = U**T*U or A = L*L**T computed by DPPTRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AP      (input) DOUBLE PRECISION array, dimension (N*(N+1)/2)\n*          The triangular factor U or L from the Cholesky factorization\n*          A = U**T*U or A = L*L**T, packed columnwise in a linear\n*          array.  The j-th column of U or L is stored in the array AP\n*          as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = U(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = L(i,j) for j<=i<=n.\n*\n*  B       (input/output) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(279,'cpptrs_279.txt','      SUBROUTINE CPPTRS( UPLO, N, NRHS, AP, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      COMPLEX            AP( * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CPPTRS solves a system of linear equations A*X = B with a Hermitian\n*  positive definite matrix A in packed storage using the Cholesky\n*  factorization A = U**H*U or A = L*L**H computed by CPPTRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AP      (input) COMPLEX array, dimension (N*(N+1)/2)\n*          The triangular factor U or L from the Cholesky factorization\n*          A = U**H*U or A = L*L**H, packed columnwise in a linear\n*          array.  The j-th column of U or L is stored in the array AP\n*          as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = U(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = L(i,j) for j<=i<=n.\n*\n*  B       (input/output) COMPLEX array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(280,'zpptrs_280.txt','      SUBROUTINE ZPPTRS( UPLO, N, NRHS, AP, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      COMPLEX*16         AP( * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZPPTRS solves a system of linear equations A*X = B with a Hermitian\n*  positive definite matrix A in packed storage using the Cholesky\n*  factorization A = U**H * U or A = L * L**H computed by ZPPTRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AP      (input) COMPLEX*16 array, dimension (N*(N+1)/2)\n*          The triangular factor U or L from the Cholesky factorization\n*          A = U**H * U or A = L * L**H, packed columnwise in a linear\n*          array.  The j-th column of U or L is stored in the array AP\n*          as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = U(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = L(i,j) for j<=i<=n.\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(281,'spbtrs_281.txt','      SUBROUTINE SPBTRS( UPLO, N, KD, NRHS, AB, LDAB, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, KD, LDAB, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      REAL               AB( LDAB, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SPBTRS solves a system of linear equations A*X = B with a symmetric\n*  positive definite band matrix A using the Cholesky factorization\n*  A = U**T*U or A = L*L**T computed by SPBTRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangular factor stored in AB;\n*          = \'L\':  Lower triangular factor stored in AB.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KD >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AB      (input) REAL array, dimension (LDAB,N)\n*          The triangular factor U or L from the Cholesky factorization\n*          A = U**T*U or A = L*L**T of the band matrix A, stored in the\n*          first KD+1 rows of the array.  The j-th column of U or L is\n*          stored in the j-th column of the array AB as follows:\n*          if UPLO =\'U\', AB(kd+1+i-j,j) = U(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO =\'L\', AB(1+i-j,j)    = L(i,j) for j<=i<=min(n,j+kd).\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD+1.\n*\n*  B       (input/output) REAL array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(282,'dpbtrs_282.txt','      SUBROUTINE DPBTRS( UPLO, N, KD, NRHS, AB, LDAB, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, KD, LDAB, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   AB( LDAB, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DPBTRS solves a system of linear equations A*X = B with a symmetric\n*  positive definite band matrix A using the Cholesky factorization\n*  A = U**T*U or A = L*L**T computed by DPBTRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangular factor stored in AB;\n*          = \'L\':  Lower triangular factor stored in AB.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KD >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AB      (input) DOUBLE PRECISION array, dimension (LDAB,N)\n*          The triangular factor U or L from the Cholesky factorization\n*          A = U**T*U or A = L*L**T of the band matrix A, stored in the\n*          first KD+1 rows of the array.  The j-th column of U or L is\n*          stored in the j-th column of the array AB as follows:\n*          if UPLO =\'U\', AB(kd+1+i-j,j) = U(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO =\'L\', AB(1+i-j,j)    = L(i,j) for j<=i<=min(n,j+kd).\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD+1.\n*\n*  B       (input/output) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(283,'cpbtrs_283.txt','      SUBROUTINE CPBTRS( UPLO, N, KD, NRHS, AB, LDAB, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, KD, LDAB, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      COMPLEX            AB( LDAB, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CPBTRS solves a system of linear equations A*X = B with a Hermitian\n*  positive definite band matrix A using the Cholesky factorization\n*  A = U**H*U or A = L*L**H computed by CPBTRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangular factor stored in AB;\n*          = \'L\':  Lower triangular factor stored in AB.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KD >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AB      (input) COMPLEX array, dimension (LDAB,N)\n*          The triangular factor U or L from the Cholesky factorization\n*          A = U**H*U or A = L*L**H of the band matrix A, stored in the\n*          first KD+1 rows of the array.  The j-th column of U or L is\n*          stored in the j-th column of the array AB as follows:\n*          if UPLO =\'U\', AB(kd+1+i-j,j) = U(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO =\'L\', AB(1+i-j,j)    = L(i,j) for j<=i<=min(n,j+kd).\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD+1.\n*\n*  B       (input/output) COMPLEX array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(284,'zpbtrs_284.txt','      SUBROUTINE ZPBTRS( UPLO, N, KD, NRHS, AB, LDAB, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, KD, LDAB, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      COMPLEX*16         AB( LDAB, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZPBTRS solves a system of linear equations A*X = B with a Hermitian\n*  positive definite band matrix A using the Cholesky factorization\n*  A = U**H *U or A = L*L**H computed by ZPBTRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangular factor stored in AB;\n*          = \'L\':  Lower triangular factor stored in AB.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KD >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AB      (input) COMPLEX*16 array, dimension (LDAB,N)\n*          The triangular factor U or L from the Cholesky factorization\n*          A = U**H *U or A = L*L**H of the band matrix A, stored in the\n*          first KD+1 rows of the array.  The j-th column of U or L is\n*          stored in the j-th column of the array AB as follows:\n*          if UPLO =\'U\', AB(kd+1+i-j,j) = U(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO =\'L\', AB(1+i-j,j)    = L(i,j) for j<=i<=min(n,j+kd).\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD+1.\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(285,'spttrs_285.txt','      SUBROUTINE SPTTRS( N, NRHS, D, E, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      REAL               B( LDB, * ), D( * ), E( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SPTTRS solves a tridiagonal system of the form\n*     A * X = B\n*  using the L*D*L**T factorization of A computed by SPTTRF.  D is a\n*  diagonal matrix specified in the vector D, L is a unit bidiagonal\n*  matrix whose subdiagonal is specified in the vector E, and X and B\n*  are N by NRHS matrices.\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The order of the tridiagonal matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  D       (input) REAL array, dimension (N)\n*          The n diagonal elements of the diagonal matrix D from the\n*          L*D*L**T factorization of A.\n*\n*  E       (input) REAL array, dimension (N-1)\n*          The (n-1) subdiagonal elements of the unit bidiagonal factor\n*          L from the L*D*L**T factorization of A.  E can also be regarded\n*          as the superdiagonal of the unit bidiagonal factor U from the\n*          factorization A = U**T*D*U.\n*\n*  B       (input/output) REAL array, dimension (LDB,NRHS)\n*          On entry, the right hand side vectors B for the system of\n*          linear equations.\n*          On exit, the solution vectors, X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -k, the k-th argument had an illegal value\n*\n'),(286,'dpttrs_286.txt','      SUBROUTINE DPTTRS( N, NRHS, D, E, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   B( LDB, * ), D( * ), E( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DPTTRS solves a tridiagonal system of the form\n*     A * X = B\n*  using the L*D*L**T factorization of A computed by DPTTRF.  D is a\n*  diagonal matrix specified in the vector D, L is a unit bidiagonal\n*  matrix whose subdiagonal is specified in the vector E, and X and B\n*  are N by NRHS matrices.\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The order of the tridiagonal matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  D       (input) DOUBLE PRECISION array, dimension (N)\n*          The n diagonal elements of the diagonal matrix D from the\n*          L*D*L**T factorization of A.\n*\n*  E       (input) DOUBLE PRECISION array, dimension (N-1)\n*          The (n-1) subdiagonal elements of the unit bidiagonal factor\n*          L from the L*D*L**T factorization of A.  E can also be regarded\n*          as the superdiagonal of the unit bidiagonal factor U from the\n*          factorization A = U**T*D*U.\n*\n*  B       (input/output) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          On entry, the right hand side vectors B for the system of\n*          linear equations.\n*          On exit, the solution vectors, X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -k, the k-th argument had an illegal value\n*\n'),(287,'cpttrs_287.txt','      SUBROUTINE CPTTRS( UPLO, N, NRHS, D, E, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      REAL               D( * )\n      COMPLEX            B( LDB, * ), E( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CPTTRS solves a tridiagonal system of the form\n*     A * X = B\n*  using the factorization A = U**H*D*U or A = L*D*L**H computed by CPTTRF.\n*  D is a diagonal matrix specified in the vector D, U (or L) is a unit\n*  bidiagonal matrix whose superdiagonal (subdiagonal) is specified in\n*  the vector E, and X and B are N by NRHS matrices.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          Specifies the form of the factorization and whether the\n*          vector E is the superdiagonal of the upper bidiagonal factor\n*          U or the subdiagonal of the lower bidiagonal factor L.\n*          = \'U\':  A = U**H*D*U, E is the superdiagonal of U\n*          = \'L\':  A = L*D*L**H, E is the subdiagonal of L\n*\n*  N       (input) INTEGER\n*          The order of the tridiagonal matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  D       (input) REAL array, dimension (N)\n*          The n diagonal elements of the diagonal matrix D from the\n*          factorization A = U**H*D*U or A = L*D*L**H.\n*\n*  E       (input) COMPLEX array, dimension (N-1)\n*          If UPLO = \'U\', the (n-1) superdiagonal elements of the unit\n*          bidiagonal factor U from the factorization A = U**H*D*U.\n*          If UPLO = \'L\', the (n-1) subdiagonal elements of the unit\n*          bidiagonal factor L from the factorization A = L*D*L**H.\n*\n*  B       (input/output) REAL array, dimension (LDB,NRHS)\n*          On entry, the right hand side vectors B for the system of\n*          linear equations.\n*          On exit, the solution vectors, X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -k, the k-th argument had an illegal value\n*\n'),(288,'zpttrs_288.txt','      SUBROUTINE ZPTTRS( UPLO, N, NRHS, D, E, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   D( * )\n      COMPLEX*16         B( LDB, * ), E( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZPTTRS solves a tridiagonal system of the form\n*     A * X = B\n*  using the factorization A = U**H *D* U or A = L*D*L**H computed by ZPTTRF.\n*  D is a diagonal matrix specified in the vector D, U (or L) is a unit\n*  bidiagonal matrix whose superdiagonal (subdiagonal) is specified in\n*  the vector E, and X and B are N by NRHS matrices.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          Specifies the form of the factorization and whether the\n*          vector E is the superdiagonal of the upper bidiagonal factor\n*          U or the subdiagonal of the lower bidiagonal factor L.\n*          = \'U\':  A = U**H *D*U, E is the superdiagonal of U\n*          = \'L\':  A = L*D*L**H, E is the subdiagonal of L\n*\n*  N       (input) INTEGER\n*          The order of the tridiagonal matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  D       (input) DOUBLE PRECISION array, dimension (N)\n*          The n diagonal elements of the diagonal matrix D from the\n*          factorization A = U**H *D*U or A = L*D*L**H.\n*\n*  E       (input) COMPLEX*16 array, dimension (N-1)\n*          If UPLO = \'U\', the (n-1) superdiagonal elements of the unit\n*          bidiagonal factor U from the factorization A = U**H*D*U.\n*          If UPLO = \'L\', the (n-1) subdiagonal elements of the unit\n*          bidiagonal factor L from the factorization A = L*D*L**H.\n*\n*  B       (input/output) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          On entry, the right hand side vectors B for the system of\n*          linear equations.\n*          On exit, the solution vectors, X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -k, the k-th argument had an illegal value\n*\n'),(289,'ssytrs_289.txt','      SUBROUTINE SSYTRS( UPLO, N, NRHS, A, LDA, IPIV, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      REAL               A( LDA, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SSYTRS solves a system of linear equations A*X = B with a real\n*  symmetric matrix A using the factorization A = U*D*U**T or\n*  A = L*D*L**T computed by SSYTRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          Specifies whether the details of the factorization are stored\n*          as an upper or lower triangular matrix.\n*          = \'U\':  Upper triangular, form is A = U*D*U**T;\n*          = \'L\':  Lower triangular, form is A = L*D*L**T.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  A       (input) REAL array, dimension (LDA,N)\n*          The block diagonal matrix D and the multipliers used to\n*          obtain the factor U or L as computed by SSYTRF.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by SSYTRF.\n*\n*  B       (input/output) REAL array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(290,'dsytrs_290.txt','      SUBROUTINE DSYTRS( UPLO, N, NRHS, A, LDA, IPIV, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      DOUBLE PRECISION   A( LDA, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DSYTRS solves a system of linear equations A*X = B with a real\n*  symmetric matrix A using the factorization A = U*D*U**T or\n*  A = L*D*L**T computed by DSYTRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          Specifies whether the details of the factorization are stored\n*          as an upper or lower triangular matrix.\n*          = \'U\':  Upper triangular, form is A = U*D*U**T;\n*          = \'L\':  Lower triangular, form is A = L*D*L**T.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  A       (input) DOUBLE PRECISION array, dimension (LDA,N)\n*          The block diagonal matrix D and the multipliers used to\n*          obtain the factor U or L as computed by DSYTRF.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by DSYTRF.\n*\n*  B       (input/output) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(291,'chetrs_291.txt','      SUBROUTINE CHETRS( UPLO, N, NRHS, A, LDA, IPIV, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX            A( LDA, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CHETRS solves a system of linear equations A*X = B with a complex\n*  Hermitian matrix A using the factorization A = U*D*U**H or\n*  A = L*D*L**H computed by CHETRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          Specifies whether the details of the factorization are stored\n*          as an upper or lower triangular matrix.\n*          = \'U\':  Upper triangular, form is A = U*D*U**H;\n*          = \'L\':  Lower triangular, form is A = L*D*L**H.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  A       (input) COMPLEX array, dimension (LDA,N)\n*          The block diagonal matrix D and the multipliers used to\n*          obtain the factor U or L as computed by CHETRF.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by CHETRF.\n*\n*  B       (input/output) COMPLEX array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(292,'zhetrs_292.txt','      SUBROUTINE ZHETRS( UPLO, N, NRHS, A, LDA, IPIV, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX*16         A( LDA, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZHETRS solves a system of linear equations A*X = B with a complex\n*  Hermitian matrix A using the factorization A = U*D*U**H or\n*  A = L*D*L**H computed by ZHETRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          Specifies whether the details of the factorization are stored\n*          as an upper or lower triangular matrix.\n*          = \'U\':  Upper triangular, form is A = U*D*U**H;\n*          = \'L\':  Lower triangular, form is A = L*D*L**H.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  A       (input) COMPLEX*16 array, dimension (LDA,N)\n*          The block diagonal matrix D and the multipliers used to\n*          obtain the factor U or L as computed by ZHETRF.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by ZHETRF.\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(293,'csytrs_293.txt','      SUBROUTINE CSYTRS( UPLO, N, NRHS, A, LDA, IPIV, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX            A( LDA, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CSYTRS solves a system of linear equations A*X = B with a complex\n*  symmetric matrix A using the factorization A = U*D*U**T or\n*  A = L*D*L**T computed by CSYTRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          Specifies whether the details of the factorization are stored\n*          as an upper or lower triangular matrix.\n*          = \'U\':  Upper triangular, form is A = U*D*U**T;\n*          = \'L\':  Lower triangular, form is A = L*D*L**T.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  A       (input) COMPLEX array, dimension (LDA,N)\n*          The block diagonal matrix D and the multipliers used to\n*          obtain the factor U or L as computed by CSYTRF.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by CSYTRF.\n*\n*  B       (input/output) COMPLEX array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(294,'zsytrs_294.txt','      SUBROUTINE ZSYTRS( UPLO, N, NRHS, A, LDA, IPIV, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX*16         A( LDA, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZSYTRS solves a system of linear equations A*X = B with a complex\n*  symmetric matrix A using the factorization A = U*D*U**T or\n*  A = L*D*L**T computed by ZSYTRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          Specifies whether the details of the factorization are stored\n*          as an upper or lower triangular matrix.\n*          = \'U\':  Upper triangular, form is A = U*D*U**T;\n*          = \'L\':  Lower triangular, form is A = L*D*L**T.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  A       (input) COMPLEX*16 array, dimension (LDA,N)\n*          The block diagonal matrix D and the multipliers used to\n*          obtain the factor U or L as computed by ZSYTRF.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by ZSYTRF.\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(295,'ssptrs_295.txt','      SUBROUTINE SSPTRS( UPLO, N, NRHS, AP, IPIV, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      REAL               AP( * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SSPTRS solves a system of linear equations A*X = B with a real\n*  symmetric matrix A stored in packed format using the factorization\n*  A = U*D*U**T or A = L*D*L**T computed by SSPTRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          Specifies whether the details of the factorization are stored\n*          as an upper or lower triangular matrix.\n*          = \'U\':  Upper triangular, form is A = U*D*U**T;\n*          = \'L\':  Lower triangular, form is A = L*D*L**T.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AP      (input) REAL array, dimension (N*(N+1)/2)\n*          The block diagonal matrix D and the multipliers used to\n*          obtain the factor U or L as computed by SSPTRF, stored as a\n*          packed triangular matrix.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by SSPTRF.\n*\n*  B       (input/output) REAL array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*\n'),(296,'dsptrs_296.txt','      SUBROUTINE DSPTRS( UPLO, N, NRHS, AP, IPIV, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      DOUBLE PRECISION   AP( * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DSPTRS solves a system of linear equations A*X = B with a real\n*  symmetric matrix A stored in packed format using the factorization\n*  A = U*D*U**T or A = L*D*L**T computed by DSPTRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          Specifies whether the details of the factorization are stored\n*          as an upper or lower triangular matrix.\n*          = \'U\':  Upper triangular, form is A = U*D*U**T;\n*          = \'L\':  Lower triangular, form is A = L*D*L**T.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AP      (input) DOUBLE PRECISION array, dimension (N*(N+1)/2)\n*          The block diagonal matrix D and the multipliers used to\n*          obtain the factor U or L as computed by DSPTRF, stored as a\n*          packed triangular matrix.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by DSPTRF.\n*\n*  B       (input/output) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*\n'),(297,'chptrs_297.txt','      SUBROUTINE CHPTRS( UPLO, N, NRHS, AP, IPIV, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX            AP( * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CHPTRS solves a system of linear equations A*X = B with a complex\n*  Hermitian matrix A stored in packed format using the factorization\n*  A = U*D*U**H or A = L*D*L**H computed by CHPTRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          Specifies whether the details of the factorization are stored\n*          as an upper or lower triangular matrix.\n*          = \'U\':  Upper triangular, form is A = U*D*U**H;\n*          = \'L\':  Lower triangular, form is A = L*D*L**H.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AP      (input) COMPLEX array, dimension (N*(N+1)/2)\n*          The block diagonal matrix D and the multipliers used to\n*          obtain the factor U or L as computed by CHPTRF, stored as a\n*          packed triangular matrix.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by CHPTRF.\n*\n*  B       (input/output) COMPLEX array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*\n'),(298,'zhptrs_298.txt','      SUBROUTINE ZHPTRS( UPLO, N, NRHS, AP, IPIV, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX*16         AP( * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZHPTRS solves a system of linear equations A*X = B with a complex\n*  Hermitian matrix A stored in packed format using the factorization\n*  A = U*D*U**H or A = L*D*L**H computed by ZHPTRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          Specifies whether the details of the factorization are stored\n*          as an upper or lower triangular matrix.\n*          = \'U\':  Upper triangular, form is A = U*D*U**H;\n*          = \'L\':  Lower triangular, form is A = L*D*L**H.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AP      (input) COMPLEX*16 array, dimension (N*(N+1)/2)\n*          The block diagonal matrix D and the multipliers used to\n*          obtain the factor U or L as computed by ZHPTRF, stored as a\n*          packed triangular matrix.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by ZHPTRF.\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*\n'),(299,'csptrs_299.txt','      SUBROUTINE CSPTRS( UPLO, N, NRHS, AP, IPIV, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX            AP( * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CSPTRS solves a system of linear equations A*X = B with a complex\n*  symmetric matrix A stored in packed format using the factorization\n*  A = U*D*U**T or A = L*D*L**T computed by CSPTRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          Specifies whether the details of the factorization are stored\n*          as an upper or lower triangular matrix.\n*          = \'U\':  Upper triangular, form is A = U*D*U**T;\n*          = \'L\':  Lower triangular, form is A = L*D*L**T.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AP      (input) COMPLEX array, dimension (N*(N+1)/2)\n*          The block diagonal matrix D and the multipliers used to\n*          obtain the factor U or L as computed by CSPTRF, stored as a\n*          packed triangular matrix.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by CSPTRF.\n*\n*  B       (input/output) COMPLEX array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*\n'),(300,'zsptrs_300.txt','      SUBROUTINE ZSPTRS( UPLO, N, NRHS, AP, IPIV, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX*16         AP( * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZSPTRS solves a system of linear equations A*X = B with a complex\n*  symmetric matrix A stored in packed format using the factorization\n*  A = U*D*U**T or A = L*D*L**T computed by ZSPTRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          Specifies whether the details of the factorization are stored\n*          as an upper or lower triangular matrix.\n*          = \'U\':  Upper triangular, form is A = U*D*U**T;\n*          = \'L\':  Lower triangular, form is A = L*D*L**T.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AP      (input) COMPLEX*16 array, dimension (N*(N+1)/2)\n*          The block diagonal matrix D and the multipliers used to\n*          obtain the factor U or L as computed by ZSPTRF, stored as a\n*          packed triangular matrix.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by ZSPTRF.\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*\n'),(301,'strtrs_301.txt','      SUBROUTINE STRTRS( UPLO, TRANS, DIAG, N, NRHS, A, LDA, B, LDB,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, TRANS, UPLO\n      INTEGER            INFO, LDA, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      REAL               A( LDA, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  STRTRS solves a triangular system of the form\n*\n*     A * X = B  or  A**T * X = B,\n*\n*  where A is a triangular matrix of order N, and B is an N-by-NRHS\n*  matrix.  A check is made to verify that A is nonsingular.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B  (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose = Transpose)\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  A       (input) REAL array, dimension (LDA,N)\n*          The triangular matrix A.  If UPLO = \'U\', the leading N-by-N\n*          upper triangular part of the array A contains the upper\n*          triangular matrix, and the strictly lower triangular part of\n*          A is not referenced.  If UPLO = \'L\', the leading N-by-N lower\n*          triangular part of the array A contains the lower triangular\n*          matrix, and the strictly upper triangular part of A is not\n*          referenced.  If DIAG = \'U\', the diagonal elements of A are\n*          also not referenced and are assumed to be 1.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  B       (input/output) REAL array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, if INFO = 0, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, the i-th diagonal element of A is zero,\n*               indicating that the matrix is singular and the solutions\n*               X have not been computed.\n*\n'),(302,'dtrtrs_302.txt','      SUBROUTINE DTRTRS( UPLO, TRANS, DIAG, N, NRHS, A, LDA, B, LDB,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, TRANS, UPLO\n      INTEGER            INFO, LDA, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   A( LDA, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DTRTRS solves a triangular system of the form\n*\n*     A * X = B  or  A**T * X = B,\n*\n*  where A is a triangular matrix of order N, and B is an N-by-NRHS\n*  matrix.  A check is made to verify that A is nonsingular.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B  (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose = Transpose)\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  A       (input) DOUBLE PRECISION array, dimension (LDA,N)\n*          The triangular matrix A.  If UPLO = \'U\', the leading N-by-N\n*          upper triangular part of the array A contains the upper\n*          triangular matrix, and the strictly lower triangular part of\n*          A is not referenced.  If UPLO = \'L\', the leading N-by-N lower\n*          triangular part of the array A contains the lower triangular\n*          matrix, and the strictly upper triangular part of A is not\n*          referenced.  If DIAG = \'U\', the diagonal elements of A are\n*          also not referenced and are assumed to be 1.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  B       (input/output) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, if INFO = 0, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, the i-th diagonal element of A is zero,\n*               indicating that the matrix is singular and the solutions\n*               X have not been computed.\n*\n'),(303,'ctrtrs_303.txt','      SUBROUTINE CTRTRS( UPLO, TRANS, DIAG, N, NRHS, A, LDA, B, LDB,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, TRANS, UPLO\n      INTEGER            INFO, LDA, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      COMPLEX            A( LDA, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CTRTRS solves a triangular system of the form\n*\n*     A * X = B,  A**T * X = B,  or  A**H * X = B,\n*\n*  where A is a triangular matrix of order N, and B is an N-by-NRHS\n*  matrix.  A check is made to verify that A is nonsingular.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose)\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  A       (input) COMPLEX array, dimension (LDA,N)\n*          The triangular matrix A.  If UPLO = \'U\', the leading N-by-N\n*          upper triangular part of the array A contains the upper\n*          triangular matrix, and the strictly lower triangular part of\n*          A is not referenced.  If UPLO = \'L\', the leading N-by-N lower\n*          triangular part of the array A contains the lower triangular\n*          matrix, and the strictly upper triangular part of A is not\n*          referenced.  If DIAG = \'U\', the diagonal elements of A are\n*          also not referenced and are assumed to be 1.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  B       (input/output) COMPLEX array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, if INFO = 0, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, the i-th diagonal element of A is zero,\n*               indicating that the matrix is singular and the solutions\n*               X have not been computed.\n*\n'),(304,'ztrtrs_304.txt','      SUBROUTINE ZTRTRS( UPLO, TRANS, DIAG, N, NRHS, A, LDA, B, LDB,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, TRANS, UPLO\n      INTEGER            INFO, LDA, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      COMPLEX*16         A( LDA, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZTRTRS solves a triangular system of the form\n*\n*     A * X = B,  A**T * X = B,  or  A**H * X = B,\n*\n*  where A is a triangular matrix of order N, and B is an N-by-NRHS\n*  matrix.  A check is made to verify that A is nonsingular.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose)\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  A       (input) COMPLEX*16 array, dimension (LDA,N)\n*          The triangular matrix A.  If UPLO = \'U\', the leading N-by-N\n*          upper triangular part of the array A contains the upper\n*          triangular matrix, and the strictly lower triangular part of\n*          A is not referenced.  If UPLO = \'L\', the leading N-by-N lower\n*          triangular part of the array A contains the lower triangular\n*          matrix, and the strictly upper triangular part of A is not\n*          referenced.  If DIAG = \'U\', the diagonal elements of A are\n*          also not referenced and are assumed to be 1.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, if INFO = 0, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, the i-th diagonal element of A is zero,\n*               indicating that the matrix is singular and the solutions\n*               X have not been computed.\n*\n'),(305,'stptrs_305.txt','      SUBROUTINE STPTRS( UPLO, TRANS, DIAG, N, NRHS, AP, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, TRANS, UPLO\n      INTEGER            INFO, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      REAL               AP( * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  STPTRS solves a triangular system of the form\n*\n*     A * X = B  or  A**T * X = B,\n*\n*  where A is a triangular matrix of order N stored in packed format,\n*  and B is an N-by-NRHS matrix.  A check is made to verify that A is\n*  nonsingular.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B  (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose = Transpose)\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AP      (input) REAL array, dimension (N*(N+1)/2)\n*          The upper or lower triangular matrix A, packed columnwise in\n*          a linear array.  The j-th column of A is stored in the array\n*          AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*\n*  B       (input/output) REAL array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, if INFO = 0, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the i-th diagonal element of A is zero,\n*                indicating that the matrix is singular and the\n*                solutions X have not been computed.\n*\n'),(306,'dtptrs_306.txt','      SUBROUTINE DTPTRS( UPLO, TRANS, DIAG, N, NRHS, AP, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, TRANS, UPLO\n      INTEGER            INFO, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   AP( * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DTPTRS solves a triangular system of the form\n*\n*     A * X = B  or  A**T * X = B,\n*\n*  where A is a triangular matrix of order N stored in packed format,\n*  and B is an N-by-NRHS matrix.  A check is made to verify that A is\n*  nonsingular.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B  (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose = Transpose)\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AP      (input) DOUBLE PRECISION array, dimension (N*(N+1)/2)\n*          The upper or lower triangular matrix A, packed columnwise in\n*          a linear array.  The j-th column of A is stored in the array\n*          AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*\n*  B       (input/output) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, if INFO = 0, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the i-th diagonal element of A is zero,\n*                indicating that the matrix is singular and the\n*                solutions X have not been computed.\n*\n'),(307,'ctptrs_307.txt','      SUBROUTINE CTPTRS( UPLO, TRANS, DIAG, N, NRHS, AP, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, TRANS, UPLO\n      INTEGER            INFO, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      COMPLEX            AP( * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CTPTRS solves a triangular system of the form\n*\n*     A * X = B,  A**T * X = B,  or  A**H * X = B,\n*\n*  where A is a triangular matrix of order N stored in packed format,\n*  and B is an N-by-NRHS matrix.  A check is made to verify that A is\n*  nonsingular.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose)\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AP      (input) COMPLEX array, dimension (N*(N+1)/2)\n*          The upper or lower triangular matrix A, packed columnwise in\n*          a linear array.  The j-th column of A is stored in the array\n*          AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*\n*  B       (input/output) COMPLEX array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, if INFO = 0, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the i-th diagonal element of A is zero,\n*                indicating that the matrix is singular and the\n*                solutions X have not been computed.\n*\n'),(308,'ztptrs_308.txt','      SUBROUTINE ZTPTRS( UPLO, TRANS, DIAG, N, NRHS, AP, B, LDB, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, TRANS, UPLO\n      INTEGER            INFO, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      COMPLEX*16         AP( * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZTPTRS solves a triangular system of the form\n*\n*     A * X = B,  A**T * X = B,  or  A**H * X = B,\n*\n*  where A is a triangular matrix of order N stored in packed format,\n*  and B is an N-by-NRHS matrix.  A check is made to verify that A is\n*  nonsingular.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose)\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AP      (input) COMPLEX*16 array, dimension (N*(N+1)/2)\n*          The upper or lower triangular matrix A, packed columnwise in\n*          a linear array.  The j-th column of A is stored in the array\n*          AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, if INFO = 0, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the i-th diagonal element of A is zero,\n*                indicating that the matrix is singular and the\n*                solutions X have not been computed.\n*\n'),(309,'stbtrs_309.txt','      SUBROUTINE STBTRS( UPLO, TRANS, DIAG, N, KD, NRHS, AB, LDAB, B,\n     $                   LDB, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, TRANS, UPLO\n      INTEGER            INFO, KD, LDAB, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      REAL               AB( LDAB, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  STBTRS solves a triangular system of the form\n*\n*     A * X = B  or  A**T * X = B,\n*\n*  where A is a triangular band matrix of order N, and B is an\n*  N-by NRHS matrix.  A check is made to verify that A is nonsingular.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form the system of equations:\n*          = \'N\':  A * X = B  (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose = Transpose)\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals or subdiagonals of the\n*          triangular band matrix A.  KD >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AB      (input) REAL array, dimension (LDAB,N)\n*          The upper or lower triangular band matrix A, stored in the\n*          first kd+1 rows of AB.  The j-th column of A is stored\n*          in the j-th column of the array AB as follows:\n*          if UPLO = \'U\', AB(kd+1+i-j,j) = A(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+kd).\n*          If DIAG = \'U\', the diagonal elements of A are not referenced\n*          and are assumed to be 1.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD+1.\n*\n*  B       (input/output) REAL array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, if INFO = 0, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the i-th diagonal element of A is zero,\n*                indicating that the matrix is singular and the\n*                solutions X have not been computed.\n*\n'),(310,'dtbtrs_310.txt','      SUBROUTINE DTBTRS( UPLO, TRANS, DIAG, N, KD, NRHS, AB, LDAB, B,\n     $                   LDB, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, TRANS, UPLO\n      INTEGER            INFO, KD, LDAB, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   AB( LDAB, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DTBTRS solves a triangular system of the form\n*\n*     A * X = B  or  A**T * X = B,\n*\n*  where A is a triangular band matrix of order N, and B is an\n*  N-by NRHS matrix.  A check is made to verify that A is nonsingular.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form the system of equations:\n*          = \'N\':  A * X = B  (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose = Transpose)\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals or subdiagonals of the\n*          triangular band matrix A.  KD >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AB      (input) DOUBLE PRECISION array, dimension (LDAB,N)\n*          The upper or lower triangular band matrix A, stored in the\n*          first kd+1 rows of AB.  The j-th column of A is stored\n*          in the j-th column of the array AB as follows:\n*          if UPLO = \'U\', AB(kd+1+i-j,j) = A(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+kd).\n*          If DIAG = \'U\', the diagonal elements of A are not referenced\n*          and are assumed to be 1.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD+1.\n*\n*  B       (input/output) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, if INFO = 0, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the i-th diagonal element of A is zero,\n*                indicating that the matrix is singular and the\n*                solutions X have not been computed.\n*\n'),(311,'ctbtrs_311.txt','      SUBROUTINE CTBTRS( UPLO, TRANS, DIAG, N, KD, NRHS, AB, LDAB, B,\n     $                   LDB, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, TRANS, UPLO\n      INTEGER            INFO, KD, LDAB, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      COMPLEX            AB( LDAB, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CTBTRS solves a triangular system of the form\n*\n*     A * X = B,  A**T * X = B,  or  A**H * X = B,\n*\n*  where A is a triangular band matrix of order N, and B is an\n*  N-by-NRHS matrix.  A check is made to verify that A is nonsingular.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose)\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals or subdiagonals of the\n*          triangular band matrix A.  KD >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AB      (input) COMPLEX array, dimension (LDAB,N)\n*          The upper or lower triangular band matrix A, stored in the\n*          first kd+1 rows of AB.  The j-th column of A is stored\n*          in the j-th column of the array AB as follows:\n*          if UPLO = \'U\', AB(kd+1+i-j,j) = A(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+kd).\n*          If DIAG = \'U\', the diagonal elements of A are not referenced\n*          and are assumed to be 1.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD+1.\n*\n*  B       (input/output) COMPLEX array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, if INFO = 0, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the i-th diagonal element of A is zero,\n*                indicating that the matrix is singular and the\n*                solutions X have not been computed.\n*\n'),(312,'ztbtrs_312.txt','      SUBROUTINE ZTBTRS( UPLO, TRANS, DIAG, N, KD, NRHS, AB, LDAB, B,\n     $                   LDB, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, TRANS, UPLO\n      INTEGER            INFO, KD, LDAB, LDB, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      COMPLEX*16         AB( LDAB, * ), B( LDB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZTBTRS solves a triangular system of the form\n*\n*     A * X = B,  A**T * X = B,  or  A**H * X = B,\n*\n*  where A is a triangular band matrix of order N, and B is an\n*  N-by-NRHS matrix.  A check is made to verify that A is nonsingular.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose)\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals or subdiagonals of the\n*          triangular band matrix A.  KD >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  AB      (input) COMPLEX*16 array, dimension (LDAB,N)\n*          The upper or lower triangular band matrix A, stored in the\n*          first kd+1 rows of AB.  The j-th column of A is stored\n*          in the j-th column of the array AB as follows:\n*          if UPLO = \'U\', AB(kd+1+i-j,j) = A(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+kd).\n*          If DIAG = \'U\', the diagonal elements of A are not referenced\n*          and are assumed to be 1.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD+1.\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB,NRHS)\n*          On entry, the right hand side matrix B.\n*          On exit, if INFO = 0, the solution matrix X.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the i-th diagonal element of A is zero,\n*                indicating that the matrix is singular and the\n*                solutions X have not been computed.\n*\n'),(313,'sgecon_313.txt','      SUBROUTINE SGECON( NORM, N, A, LDA, ANORM, RCOND, WORK, IWORK,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call SLACN2 in place of SLACON, 7 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          NORM\n      INTEGER            INFO, LDA, N\n      REAL               ANORM, RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      REAL               A( LDA, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SGECON estimates the reciprocal of the condition number of a general\n*  real matrix A, in either the 1-norm or the infinity-norm, using\n*  the LU factorization computed by SGETRF.\n*\n*  An estimate is obtained for norm(inv(A)), and the reciprocal of the\n*  condition number is computed as\n*     RCOND = 1 / ( norm(A) * norm(inv(A)) ).\n*\n*  Arguments\n*  =========\n*\n*  NORM    (input) CHARACTER*1\n*          Specifies whether the 1-norm condition number or the\n*          infinity-norm condition number is required:\n*          = \'1\' or \'O\':  1-norm;\n*          = \'I\':         Infinity-norm.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input) REAL array, dimension (LDA,N)\n*          The factors L and U from the factorization A = P*L*U\n*          as computed by SGETRF.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  ANORM   (input) REAL\n*          If NORM = \'1\' or \'O\', the 1-norm of the original matrix A.\n*          If NORM = \'I\', the infinity-norm of the original matrix A.\n*\n*  RCOND   (output) REAL\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(norm(A) * norm(inv(A))).\n*\n*  WORK    (workspace) REAL array, dimension (4*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(314,'dgecon_314.txt','      SUBROUTINE DGECON( NORM, N, A, LDA, ANORM, RCOND, WORK, IWORK,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call DLACN2 in place of DLACON, 5 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          NORM\n      INTEGER            INFO, LDA, N\n      DOUBLE PRECISION   ANORM, RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      DOUBLE PRECISION   A( LDA, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DGECON estimates the reciprocal of the condition number of a general\n*  real matrix A, in either the 1-norm or the infinity-norm, using\n*  the LU factorization computed by DGETRF.\n*\n*  An estimate is obtained for norm(inv(A)), and the reciprocal of the\n*  condition number is computed as\n*     RCOND = 1 / ( norm(A) * norm(inv(A)) ).\n*\n*  Arguments\n*  =========\n*\n*  NORM    (input) CHARACTER*1\n*          Specifies whether the 1-norm condition number or the\n*          infinity-norm condition number is required:\n*          = \'1\' or \'O\':  1-norm;\n*          = \'I\':         Infinity-norm.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input) DOUBLE PRECISION array, dimension (LDA,N)\n*          The factors L and U from the factorization A = P*L*U\n*          as computed by DGETRF.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  ANORM   (input) DOUBLE PRECISION\n*          If NORM = \'1\' or \'O\', the 1-norm of the original matrix A.\n*          If NORM = \'I\', the infinity-norm of the original matrix A.\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(norm(A) * norm(inv(A))).\n*\n*  WORK    (workspace) DOUBLE PRECISION array, dimension (4*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(315,'cgecon_315.txt','      SUBROUTINE CGECON( NORM, N, A, LDA, ANORM, RCOND, WORK, RWORK,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call CLACN2 in place of CLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          NORM\n      INTEGER            INFO, LDA, N\n      REAL               ANORM, RCOND\n*     ..\n*     .. Array Arguments ..\n      REAL               RWORK( * )\n      COMPLEX            A( LDA, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CGECON estimates the reciprocal of the condition number of a general\n*  complex matrix A, in either the 1-norm or the infinity-norm, using\n*  the LU factorization computed by CGETRF.\n*\n*  An estimate is obtained for norm(inv(A)), and the reciprocal of the\n*  condition number is computed as\n*     RCOND = 1 / ( norm(A) * norm(inv(A)) ).\n*\n*  Arguments\n*  =========\n*\n*  NORM    (input) CHARACTER*1\n*          Specifies whether the 1-norm condition number or the\n*          infinity-norm condition number is required:\n*          = \'1\' or \'O\':  1-norm;\n*          = \'I\':         Infinity-norm.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input) COMPLEX array, dimension (LDA,N)\n*          The factors L and U from the factorization A = P*L*U\n*          as computed by CGETRF.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  ANORM   (input) REAL\n*          If NORM = \'1\' or \'O\', the 1-norm of the original matrix A.\n*          If NORM = \'I\', the infinity-norm of the original matrix A.\n*\n*  RCOND   (output) REAL\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(norm(A) * norm(inv(A))).\n*\n*  WORK    (workspace) COMPLEX array, dimension (2*N)\n*\n*  RWORK   (workspace) REAL array, dimension (2*N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(316,'zgecon_316.txt','      SUBROUTINE ZGECON( NORM, N, A, LDA, ANORM, RCOND, WORK, RWORK,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call ZLACN2 in place of ZLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          NORM\n      INTEGER            INFO, LDA, N\n      DOUBLE PRECISION   ANORM, RCOND\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   RWORK( * )\n      COMPLEX*16         A( LDA, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZGECON estimates the reciprocal of the condition number of a general\n*  complex matrix A, in either the 1-norm or the infinity-norm, using\n*  the LU factorization computed by ZGETRF.\n*\n*  An estimate is obtained for norm(inv(A)), and the reciprocal of the\n*  condition number is computed as\n*     RCOND = 1 / ( norm(A) * norm(inv(A)) ).\n*\n*  Arguments\n*  =========\n*\n*  NORM    (input) CHARACTER*1\n*          Specifies whether the 1-norm condition number or the\n*          infinity-norm condition number is required:\n*          = \'1\' or \'O\':  1-norm;\n*          = \'I\':         Infinity-norm.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input) COMPLEX*16 array, dimension (LDA,N)\n*          The factors L and U from the factorization A = P*L*U\n*          as computed by ZGETRF.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  ANORM   (input) DOUBLE PRECISION\n*          If NORM = \'1\' or \'O\', the 1-norm of the original matrix A.\n*          If NORM = \'I\', the infinity-norm of the original matrix A.\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(norm(A) * norm(inv(A))).\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (2*N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(317,'sgbcon_317.txt','      SUBROUTINE SGBCON( NORM, N, KL, KU, AB, LDAB, IPIV, ANORM, RCOND,\n     $                   WORK, IWORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call SLACN2 in place of SLACON, 7 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          NORM\n      INTEGER            INFO, KL, KU, LDAB, N\n      REAL               ANORM, RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * ), IWORK( * )\n      REAL               AB( LDAB, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SGBCON estimates the reciprocal of the condition number of a real\n*  general band matrix A, in either the 1-norm or the infinity-norm,\n*  using the LU factorization computed by SGBTRF.\n*\n*  An estimate is obtained for norm(inv(A)), and the reciprocal of the\n*  condition number is computed as\n*     RCOND = 1 / ( norm(A) * norm(inv(A)) ).\n*\n*  Arguments\n*  =========\n*\n*  NORM    (input) CHARACTER*1\n*          Specifies whether the 1-norm condition number or the\n*          infinity-norm condition number is required:\n*          = \'1\' or \'O\':  1-norm;\n*          = \'I\':         Infinity-norm.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KL      (input) INTEGER\n*          The number of subdiagonals within the band of A.  KL >= 0.\n*\n*  KU      (input) INTEGER\n*          The number of superdiagonals within the band of A.  KU >= 0.\n*\n*  AB      (input) REAL array, dimension (LDAB,N)\n*          Details of the LU factorization of the band matrix A, as\n*          computed by SGBTRF.  U is stored as an upper triangular band\n*          matrix with KL+KU superdiagonals in rows 1 to KL+KU+1, and\n*          the multipliers used during the factorization are stored in\n*          rows KL+KU+2 to 2*KL+KU+1.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= 2*KL+KU+1.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          The pivot indices; for 1 <= i <= N, row i of the matrix was\n*          interchanged with row IPIV(i).\n*\n*  ANORM   (input) REAL\n*          If NORM = \'1\' or \'O\', the 1-norm of the original matrix A.\n*          If NORM = \'I\', the infinity-norm of the original matrix A.\n*\n*  RCOND   (output) REAL\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(norm(A) * norm(inv(A))).\n*\n*  WORK    (workspace) REAL array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*\n'),(318,'dgbcon_318.txt','      SUBROUTINE DGBCON( NORM, N, KL, KU, AB, LDAB, IPIV, ANORM, RCOND,\n     $                   WORK, IWORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call DLACN2 in place of DLACON, 5 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          NORM\n      INTEGER            INFO, KL, KU, LDAB, N\n      DOUBLE PRECISION   ANORM, RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * ), IWORK( * )\n      DOUBLE PRECISION   AB( LDAB, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DGBCON estimates the reciprocal of the condition number of a real\n*  general band matrix A, in either the 1-norm or the infinity-norm,\n*  using the LU factorization computed by DGBTRF.\n*\n*  An estimate is obtained for norm(inv(A)), and the reciprocal of the\n*  condition number is computed as\n*     RCOND = 1 / ( norm(A) * norm(inv(A)) ).\n*\n*  Arguments\n*  =========\n*\n*  NORM    (input) CHARACTER*1\n*          Specifies whether the 1-norm condition number or the\n*          infinity-norm condition number is required:\n*          = \'1\' or \'O\':  1-norm;\n*          = \'I\':         Infinity-norm.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KL      (input) INTEGER\n*          The number of subdiagonals within the band of A.  KL >= 0.\n*\n*  KU      (input) INTEGER\n*          The number of superdiagonals within the band of A.  KU >= 0.\n*\n*  AB      (input) DOUBLE PRECISION array, dimension (LDAB,N)\n*          Details of the LU factorization of the band matrix A, as\n*          computed by DGBTRF.  U is stored as an upper triangular band\n*          matrix with KL+KU superdiagonals in rows 1 to KL+KU+1, and\n*          the multipliers used during the factorization are stored in\n*          rows KL+KU+2 to 2*KL+KU+1.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= 2*KL+KU+1.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          The pivot indices; for 1 <= i <= N, row i of the matrix was\n*          interchanged with row IPIV(i).\n*\n*  ANORM   (input) DOUBLE PRECISION\n*          If NORM = \'1\' or \'O\', the 1-norm of the original matrix A.\n*          If NORM = \'I\', the infinity-norm of the original matrix A.\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(norm(A) * norm(inv(A))).\n*\n*  WORK    (workspace) DOUBLE PRECISION array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*\n'),(319,'cgbcon_319.txt','      SUBROUTINE CGBCON( NORM, N, KL, KU, AB, LDAB, IPIV, ANORM, RCOND,\n     $                   WORK, RWORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call CLACN2 in place of CLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          NORM\n      INTEGER            INFO, KL, KU, LDAB, N\n      REAL               ANORM, RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      REAL               RWORK( * )\n      COMPLEX            AB( LDAB, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CGBCON estimates the reciprocal of the condition number of a complex\n*  general band matrix A, in either the 1-norm or the infinity-norm,\n*  using the LU factorization computed by CGBTRF.\n*\n*  An estimate is obtained for norm(inv(A)), and the reciprocal of the\n*  condition number is computed as\n*     RCOND = 1 / ( norm(A) * norm(inv(A)) ).\n*\n*  Arguments\n*  =========\n*\n*  NORM    (input) CHARACTER*1\n*          Specifies whether the 1-norm condition number or the\n*          infinity-norm condition number is required:\n*          = \'1\' or \'O\':  1-norm;\n*          = \'I\':         Infinity-norm.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KL      (input) INTEGER\n*          The number of subdiagonals within the band of A.  KL >= 0.\n*\n*  KU      (input) INTEGER\n*          The number of superdiagonals within the band of A.  KU >= 0.\n*\n*  AB      (input) COMPLEX array, dimension (LDAB,N)\n*          Details of the LU factorization of the band matrix A, as\n*          computed by CGBTRF.  U is stored as an upper triangular band\n*          matrix with KL+KU superdiagonals in rows 1 to KL+KU+1, and\n*          the multipliers used during the factorization are stored in\n*          rows KL+KU+2 to 2*KL+KU+1.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= 2*KL+KU+1.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          The pivot indices; for 1 <= i <= N, row i of the matrix was\n*          interchanged with row IPIV(i).\n*\n*  ANORM   (input) REAL\n*          If NORM = \'1\' or \'O\', the 1-norm of the original matrix A.\n*          If NORM = \'I\', the infinity-norm of the original matrix A.\n*\n*  RCOND   (output) REAL\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(norm(A) * norm(inv(A))).\n*\n*  WORK    (workspace) COMPLEX array, dimension (2*N)\n*\n*  RWORK   (workspace) REAL array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*\n'),(320,'zgbcon_320.txt','      SUBROUTINE ZGBCON( NORM, N, KL, KU, AB, LDAB, IPIV, ANORM, RCOND,\n     $                   WORK, RWORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call ZLACN2 in place of ZLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          NORM\n      INTEGER            INFO, KL, KU, LDAB, N\n      DOUBLE PRECISION   ANORM, RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      DOUBLE PRECISION   RWORK( * )\n      COMPLEX*16         AB( LDAB, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZGBCON estimates the reciprocal of the condition number of a complex\n*  general band matrix A, in either the 1-norm or the infinity-norm,\n*  using the LU factorization computed by ZGBTRF.\n*\n*  An estimate is obtained for norm(inv(A)), and the reciprocal of the\n*  condition number is computed as\n*     RCOND = 1 / ( norm(A) * norm(inv(A)) ).\n*\n*  Arguments\n*  =========\n*\n*  NORM    (input) CHARACTER*1\n*          Specifies whether the 1-norm condition number or the\n*          infinity-norm condition number is required:\n*          = \'1\' or \'O\':  1-norm;\n*          = \'I\':         Infinity-norm.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KL      (input) INTEGER\n*          The number of subdiagonals within the band of A.  KL >= 0.\n*\n*  KU      (input) INTEGER\n*          The number of superdiagonals within the band of A.  KU >= 0.\n*\n*  AB      (input) COMPLEX*16 array, dimension (LDAB,N)\n*          Details of the LU factorization of the band matrix A, as\n*          computed by ZGBTRF.  U is stored as an upper triangular band\n*          matrix with KL+KU superdiagonals in rows 1 to KL+KU+1, and\n*          the multipliers used during the factorization are stored in\n*          rows KL+KU+2 to 2*KL+KU+1.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= 2*KL+KU+1.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          The pivot indices; for 1 <= i <= N, row i of the matrix was\n*          interchanged with row IPIV(i).\n*\n*  ANORM   (input) DOUBLE PRECISION\n*          If NORM = \'1\' or \'O\', the 1-norm of the original matrix A.\n*          If NORM = \'I\', the infinity-norm of the original matrix A.\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(norm(A) * norm(inv(A))).\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*\n'),(321,'sgtcon_321.txt','      SUBROUTINE SGTCON( NORM, N, DL, D, DU, DU2, IPIV, ANORM, RCOND,\n     $                   WORK, IWORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call SLACN2 in place of SLACON, 7 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          NORM\n      INTEGER            INFO, N\n      REAL               ANORM, RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * ), IWORK( * )\n      REAL               D( * ), DL( * ), DU( * ), DU2( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SGTCON estimates the reciprocal of the condition number of a real\n*  tridiagonal matrix A using the LU factorization as computed by\n*  SGTTRF.\n*\n*  An estimate is obtained for norm(inv(A)), and the reciprocal of the\n*  condition number is computed as RCOND = 1 / (ANORM * norm(inv(A))).\n*\n*  Arguments\n*  =========\n*\n*  NORM    (input) CHARACTER*1\n*          Specifies whether the 1-norm condition number or the\n*          infinity-norm condition number is required:\n*          = \'1\' or \'O\':  1-norm;\n*          = \'I\':         Infinity-norm.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  DL      (input) REAL array, dimension (N-1)\n*          The (n-1) multipliers that define the matrix L from the\n*          LU factorization of A as computed by SGTTRF.\n*\n*  D       (input) REAL array, dimension (N)\n*          The n diagonal elements of the upper triangular matrix U from\n*          the LU factorization of A.\n*\n*  DU      (input) REAL array, dimension (N-1)\n*          The (n-1) elements of the first superdiagonal of U.\n*\n*  DU2     (input) REAL array, dimension (N-2)\n*          The (n-2) elements of the second superdiagonal of U.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          The pivot indices; for 1 <= i <= n, row i of the matrix was\n*          interchanged with row IPIV(i).  IPIV(i) will always be either\n*          i or i+1; IPIV(i) = i indicates a row interchange was not\n*          required.\n*\n*  ANORM   (input) REAL\n*          If NORM = \'1\' or \'O\', the 1-norm of the original matrix A.\n*          If NORM = \'I\', the infinity-norm of the original matrix A.\n*\n*  RCOND   (output) REAL\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(ANORM * AINVNM), where AINVNM is an\n*          estimate of the 1-norm of inv(A) computed in this routine.\n*\n*  WORK    (workspace) REAL array, dimension (2*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(322,'dgtcon_322.txt','      SUBROUTINE DGTCON( NORM, N, DL, D, DU, DU2, IPIV, ANORM, RCOND,\n     $                   WORK, IWORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call DLACN2 in place of DLACON, 5 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          NORM\n      INTEGER            INFO, N\n      DOUBLE PRECISION   ANORM, RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * ), IWORK( * )\n      DOUBLE PRECISION   D( * ), DL( * ), DU( * ), DU2( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DGTCON estimates the reciprocal of the condition number of a real\n*  tridiagonal matrix A using the LU factorization as computed by\n*  DGTTRF.\n*\n*  An estimate is obtained for norm(inv(A)), and the reciprocal of the\n*  condition number is computed as RCOND = 1 / (ANORM * norm(inv(A))).\n*\n*  Arguments\n*  =========\n*\n*  NORM    (input) CHARACTER*1\n*          Specifies whether the 1-norm condition number or the\n*          infinity-norm condition number is required:\n*          = \'1\' or \'O\':  1-norm;\n*          = \'I\':         Infinity-norm.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  DL      (input) DOUBLE PRECISION array, dimension (N-1)\n*          The (n-1) multipliers that define the matrix L from the\n*          LU factorization of A as computed by DGTTRF.\n*\n*  D       (input) DOUBLE PRECISION array, dimension (N)\n*          The n diagonal elements of the upper triangular matrix U from\n*          the LU factorization of A.\n*\n*  DU      (input) DOUBLE PRECISION array, dimension (N-1)\n*          The (n-1) elements of the first superdiagonal of U.\n*\n*  DU2     (input) DOUBLE PRECISION array, dimension (N-2)\n*          The (n-2) elements of the second superdiagonal of U.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          The pivot indices; for 1 <= i <= n, row i of the matrix was\n*          interchanged with row IPIV(i).  IPIV(i) will always be either\n*          i or i+1; IPIV(i) = i indicates a row interchange was not\n*          required.\n*\n*  ANORM   (input) DOUBLE PRECISION\n*          If NORM = \'1\' or \'O\', the 1-norm of the original matrix A.\n*          If NORM = \'I\', the infinity-norm of the original matrix A.\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(ANORM * AINVNM), where AINVNM is an\n*          estimate of the 1-norm of inv(A) computed in this routine.\n*\n*  WORK    (workspace) DOUBLE PRECISION array, dimension (2*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(323,'cgtcon_323.txt','      SUBROUTINE CGTCON( NORM, N, DL, D, DU, DU2, IPIV, ANORM, RCOND,\n     $                   WORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call CLACN2 in place of CLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          NORM\n      INTEGER            INFO, N\n      REAL               ANORM, RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX            D( * ), DL( * ), DU( * ), DU2( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CGTCON estimates the reciprocal of the condition number of a complex\n*  tridiagonal matrix A using the LU factorization as computed by\n*  CGTTRF.\n*\n*  An estimate is obtained for norm(inv(A)), and the reciprocal of the\n*  condition number is computed as RCOND = 1 / (ANORM * norm(inv(A))).\n*\n*  Arguments\n*  =========\n*\n*  NORM    (input) CHARACTER*1\n*          Specifies whether the 1-norm condition number or the\n*          infinity-norm condition number is required:\n*          = \'1\' or \'O\':  1-norm;\n*          = \'I\':         Infinity-norm.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  DL      (input) COMPLEX array, dimension (N-1)\n*          The (n-1) multipliers that define the matrix L from the\n*          LU factorization of A as computed by CGTTRF.\n*\n*  D       (input) COMPLEX array, dimension (N)\n*          The n diagonal elements of the upper triangular matrix U from\n*          the LU factorization of A.\n*\n*  DU      (input) COMPLEX array, dimension (N-1)\n*          The (n-1) elements of the first superdiagonal of U.\n*\n*  DU2     (input) COMPLEX array, dimension (N-2)\n*          The (n-2) elements of the second superdiagonal of U.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          The pivot indices; for 1 <= i <= n, row i of the matrix was\n*          interchanged with row IPIV(i).  IPIV(i) will always be either\n*          i or i+1; IPIV(i) = i indicates a row interchange was not\n*          required.\n*\n*  ANORM   (input) REAL\n*          If NORM = \'1\' or \'O\', the 1-norm of the original matrix A.\n*          If NORM = \'I\', the infinity-norm of the original matrix A.\n*\n*  RCOND   (output) REAL\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(ANORM * AINVNM), where AINVNM is an\n*          estimate of the 1-norm of inv(A) computed in this routine.\n*\n*  WORK    (workspace) COMPLEX array, dimension (2*N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(324,'zgtcon_324.txt','      SUBROUTINE ZGTCON( NORM, N, DL, D, DU, DU2, IPIV, ANORM, RCOND,\n     $                   WORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call ZLACN2 in place of ZLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          NORM\n      INTEGER            INFO, N\n      DOUBLE PRECISION   ANORM, RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX*16         D( * ), DL( * ), DU( * ), DU2( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZGTCON estimates the reciprocal of the condition number of a complex\n*  tridiagonal matrix A using the LU factorization as computed by\n*  ZGTTRF.\n*\n*  An estimate is obtained for norm(inv(A)), and the reciprocal of the\n*  condition number is computed as RCOND = 1 / (ANORM * norm(inv(A))).\n*\n*  Arguments\n*  =========\n*\n*  NORM    (input) CHARACTER*1\n*          Specifies whether the 1-norm condition number or the\n*          infinity-norm condition number is required:\n*          = \'1\' or \'O\':  1-norm;\n*          = \'I\':         Infinity-norm.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  DL      (input) COMPLEX*16 array, dimension (N-1)\n*          The (n-1) multipliers that define the matrix L from the\n*          LU factorization of A as computed by ZGTTRF.\n*\n*  D       (input) COMPLEX*16 array, dimension (N)\n*          The n diagonal elements of the upper triangular matrix U from\n*          the LU factorization of A.\n*\n*  DU      (input) COMPLEX*16 array, dimension (N-1)\n*          The (n-1) elements of the first superdiagonal of U.\n*\n*  DU2     (input) COMPLEX*16 array, dimension (N-2)\n*          The (n-2) elements of the second superdiagonal of U.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          The pivot indices; for 1 <= i <= n, row i of the matrix was\n*          interchanged with row IPIV(i).  IPIV(i) will always be either\n*          i or i+1; IPIV(i) = i indicates a row interchange was not\n*          required.\n*\n*  ANORM   (input) DOUBLE PRECISION\n*          If NORM = \'1\' or \'O\', the 1-norm of the original matrix A.\n*          If NORM = \'I\', the infinity-norm of the original matrix A.\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(ANORM * AINVNM), where AINVNM is an\n*          estimate of the 1-norm of inv(A) computed in this routine.\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(325,'spocon_325.txt','      SUBROUTINE SPOCON( UPLO, N, A, LDA, ANORM, RCOND, WORK, IWORK,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call SLACN2 in place of SLACON, 7 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, N\n      REAL               ANORM, RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      REAL               A( LDA, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SPOCON estimates the reciprocal of the condition number (in the \n*  1-norm) of a real symmetric positive definite matrix using the\n*  Cholesky factorization A = U**T*U or A = L*L**T computed by SPOTRF.\n*\n*  An estimate is obtained for norm(inv(A)), and the reciprocal of the\n*  condition number is computed as RCOND = 1 / (ANORM * norm(inv(A))).\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input) REAL array, dimension (LDA,N)\n*          The triangular factor U or L from the Cholesky factorization\n*          A = U**T*U or A = L*L**T, as computed by SPOTRF.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  ANORM   (input) REAL\n*          The 1-norm (or infinity-norm) of the symmetric matrix A.\n*\n*  RCOND   (output) REAL\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(ANORM * AINVNM), where AINVNM is an\n*          estimate of the 1-norm of inv(A) computed in this routine.\n*\n*  WORK    (workspace) REAL array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(326,'dpocon_326.txt','      SUBROUTINE DPOCON( UPLO, N, A, LDA, ANORM, RCOND, WORK, IWORK,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call DLACN2 in place of DLACON, 5 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, N\n      DOUBLE PRECISION   ANORM, RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      DOUBLE PRECISION   A( LDA, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DPOCON estimates the reciprocal of the condition number (in the\n*  1-norm) of a real symmetric positive definite matrix using the\n*  Cholesky factorization A = U**T*U or A = L*L**T computed by DPOTRF.\n*\n*  An estimate is obtained for norm(inv(A)), and the reciprocal of the\n*  condition number is computed as RCOND = 1 / (ANORM * norm(inv(A))).\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input) DOUBLE PRECISION array, dimension (LDA,N)\n*          The triangular factor U or L from the Cholesky factorization\n*          A = U**T*U or A = L*L**T, as computed by DPOTRF.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  ANORM   (input) DOUBLE PRECISION\n*          The 1-norm (or infinity-norm) of the symmetric matrix A.\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(ANORM * AINVNM), where AINVNM is an\n*          estimate of the 1-norm of inv(A) computed in this routine.\n*\n*  WORK    (workspace) DOUBLE PRECISION array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(327,'cpocon_327.txt','      SUBROUTINE CPOCON( UPLO, N, A, LDA, ANORM, RCOND, WORK, RWORK,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call CLACN2 in place of CLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, N\n      REAL               ANORM, RCOND\n*     ..\n*     .. Array Arguments ..\n      REAL               RWORK( * )\n      COMPLEX            A( LDA, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CPOCON estimates the reciprocal of the condition number (in the\n*  1-norm) of a complex Hermitian positive definite matrix using the\n*  Cholesky factorization A = U**H*U or A = L*L**H computed by CPOTRF.\n*\n*  An estimate is obtained for norm(inv(A)), and the reciprocal of the\n*  condition number is computed as RCOND = 1 / (ANORM * norm(inv(A))).\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input) COMPLEX array, dimension (LDA,N)\n*          The triangular factor U or L from the Cholesky factorization\n*          A = U**H*U or A = L*L**H, as computed by CPOTRF.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  ANORM   (input) REAL\n*          The 1-norm (or infinity-norm) of the Hermitian matrix A.\n*\n*  RCOND   (output) REAL\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(ANORM * AINVNM), where AINVNM is an\n*          estimate of the 1-norm of inv(A) computed in this routine.\n*\n*  WORK    (workspace) COMPLEX array, dimension (2*N)\n*\n*  RWORK   (workspace) REAL array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(328,'zpocon_328.txt','      SUBROUTINE ZPOCON( UPLO, N, A, LDA, ANORM, RCOND, WORK, RWORK,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call ZLACN2 in place of ZLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, N\n      DOUBLE PRECISION   ANORM, RCOND\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   RWORK( * )\n      COMPLEX*16         A( LDA, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZPOCON estimates the reciprocal of the condition number (in the\n*  1-norm) of a complex Hermitian positive definite matrix using the\n*  Cholesky factorization A = U**H*U or A = L*L**H computed by ZPOTRF.\n*\n*  An estimate is obtained for norm(inv(A)), and the reciprocal of the\n*  condition number is computed as RCOND = 1 / (ANORM * norm(inv(A))).\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input) COMPLEX*16 array, dimension (LDA,N)\n*          The triangular factor U or L from the Cholesky factorization\n*          A = U**H*U or A = L*L**H, as computed by ZPOTRF.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  ANORM   (input) DOUBLE PRECISION\n*          The 1-norm (or infinity-norm) of the Hermitian matrix A.\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(ANORM * AINVNM), where AINVNM is an\n*          estimate of the 1-norm of inv(A) computed in this routine.\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(329,'sppcon_329.txt','      SUBROUTINE SPPCON( UPLO, N, AP, ANORM, RCOND, WORK, IWORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call SLACN2 in place of SLACON, 7 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, N\n      REAL               ANORM, RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      REAL               AP( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SPPCON estimates the reciprocal of the condition number (in the\n*  1-norm) of a real symmetric positive definite packed matrix using\n*  the Cholesky factorization A = U**T*U or A = L*L**T computed by\n*  SPPTRF.\n*\n*  An estimate is obtained for norm(inv(A)), and the reciprocal of the\n*  condition number is computed as RCOND = 1 / (ANORM * norm(inv(A))).\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input) REAL array, dimension (N*(N+1)/2)\n*          The triangular factor U or L from the Cholesky factorization\n*          A = U**T*U or A = L*L**T, packed columnwise in a linear\n*          array.  The j-th column of U or L is stored in the array AP\n*          as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = U(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = L(i,j) for j<=i<=n.\n*\n*  ANORM   (input) REAL\n*          The 1-norm (or infinity-norm) of the symmetric matrix A.\n*\n*  RCOND   (output) REAL\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(ANORM * AINVNM), where AINVNM is an\n*          estimate of the 1-norm of inv(A) computed in this routine.\n*\n*  WORK    (workspace) REAL array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(330,'dppcon_330.txt','      SUBROUTINE DPPCON( UPLO, N, AP, ANORM, RCOND, WORK, IWORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call DLACN2 in place of DLACON, 5 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, N\n      DOUBLE PRECISION   ANORM, RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      DOUBLE PRECISION   AP( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DPPCON estimates the reciprocal of the condition number (in the\n*  1-norm) of a real symmetric positive definite packed matrix using\n*  the Cholesky factorization A = U**T*U or A = L*L**T computed by\n*  DPPTRF.\n*\n*  An estimate is obtained for norm(inv(A)), and the reciprocal of the\n*  condition number is computed as RCOND = 1 / (ANORM * norm(inv(A))).\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input) DOUBLE PRECISION array, dimension (N*(N+1)/2)\n*          The triangular factor U or L from the Cholesky factorization\n*          A = U**T*U or A = L*L**T, packed columnwise in a linear\n*          array.  The j-th column of U or L is stored in the array AP\n*          as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = U(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = L(i,j) for j<=i<=n.\n*\n*  ANORM   (input) DOUBLE PRECISION\n*          The 1-norm (or infinity-norm) of the symmetric matrix A.\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(ANORM * AINVNM), where AINVNM is an\n*          estimate of the 1-norm of inv(A) computed in this routine.\n*\n*  WORK    (workspace) DOUBLE PRECISION array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(331,'cppcon_331.txt','      SUBROUTINE CPPCON( UPLO, N, AP, ANORM, RCOND, WORK, RWORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call CLACN2 in place of CLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, N\n      REAL               ANORM, RCOND\n*     ..\n*     .. Array Arguments ..\n      REAL               RWORK( * )\n      COMPLEX            AP( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CPPCON estimates the reciprocal of the condition number (in the \n*  1-norm) of a complex Hermitian positive definite packed matrix using\n*  the Cholesky factorization A = U**H*U or A = L*L**H computed by\n*  CPPTRF.\n*\n*  An estimate is obtained for norm(inv(A)), and the reciprocal of the\n*  condition number is computed as RCOND = 1 / (ANORM * norm(inv(A))).\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input) COMPLEX array, dimension (N*(N+1)/2)\n*          The triangular factor U or L from the Cholesky factorization\n*          A = U**H*U or A = L*L**H, packed columnwise in a linear\n*          array.  The j-th column of U or L is stored in the array AP\n*          as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = U(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = L(i,j) for j<=i<=n.\n*\n*  ANORM   (input) REAL\n*          The 1-norm (or infinity-norm) of the Hermitian matrix A.\n*\n*  RCOND   (output) REAL\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(ANORM * AINVNM), where AINVNM is an\n*          estimate of the 1-norm of inv(A) computed in this routine.\n*\n*  WORK    (workspace) COMPLEX array, dimension (2*N)\n*\n*  RWORK   (workspace) REAL array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(332,'zppcon_332.txt','      SUBROUTINE ZPPCON( UPLO, N, AP, ANORM, RCOND, WORK, RWORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call ZLACN2 in place of ZLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, N\n      DOUBLE PRECISION   ANORM, RCOND\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   RWORK( * )\n      COMPLEX*16         AP( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZPPCON estimates the reciprocal of the condition number (in the\n*  1-norm) of a complex Hermitian positive definite packed matrix using\n*  the Cholesky factorization A = U**H*U or A = L*L**H computed by\n*  ZPPTRF.\n*\n*  An estimate is obtained for norm(inv(A)), and the reciprocal of the\n*  condition number is computed as RCOND = 1 / (ANORM * norm(inv(A))).\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input) COMPLEX*16 array, dimension (N*(N+1)/2)\n*          The triangular factor U or L from the Cholesky factorization\n*          A = U**H*U or A = L*L**H, packed columnwise in a linear\n*          array.  The j-th column of U or L is stored in the array AP\n*          as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = U(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = L(i,j) for j<=i<=n.\n*\n*  ANORM   (input) DOUBLE PRECISION\n*          The 1-norm (or infinity-norm) of the Hermitian matrix A.\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(ANORM * AINVNM), where AINVNM is an\n*          estimate of the 1-norm of inv(A) computed in this routine.\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(333,'spbcon_333.txt','      SUBROUTINE SPBCON( UPLO, N, KD, AB, LDAB, ANORM, RCOND, WORK,\n     $                   IWORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call SLACN2 in place of SLACON, 7 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, KD, LDAB, N\n      REAL               ANORM, RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      REAL               AB( LDAB, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SPBCON estimates the reciprocal of the condition number (in the\n*  1-norm) of a real symmetric positive definite band matrix using the\n*  Cholesky factorization A = U**T*U or A = L*L**T computed by SPBTRF.\n*\n*  An estimate is obtained for norm(inv(A)), and the reciprocal of the\n*  condition number is computed as RCOND = 1 / (ANORM * norm(inv(A))).\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangular factor stored in AB;\n*          = \'L\':  Lower triangular factor stored in AB.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KD >= 0.\n*\n*  AB      (input) REAL array, dimension (LDAB,N)\n*          The triangular factor U or L from the Cholesky factorization\n*          A = U**T*U or A = L*L**T of the band matrix A, stored in the\n*          first KD+1 rows of the array.  The j-th column of U or L is\n*          stored in the j-th column of the array AB as follows:\n*          if UPLO =\'U\', AB(kd+1+i-j,j) = U(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO =\'L\', AB(1+i-j,j)    = L(i,j) for j<=i<=min(n,j+kd).\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD+1.\n*\n*  ANORM   (input) REAL\n*          The 1-norm (or infinity-norm) of the symmetric band matrix A.\n*\n*  RCOND   (output) REAL\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(ANORM * AINVNM), where AINVNM is an\n*          estimate of the 1-norm of inv(A) computed in this routine.\n*\n*  WORK    (workspace) REAL array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(334,'dpbcon_334.txt','      SUBROUTINE DPBCON( UPLO, N, KD, AB, LDAB, ANORM, RCOND, WORK,\n     $                   IWORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call DLACN2 in place of DLACON, 5 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, KD, LDAB, N\n      DOUBLE PRECISION   ANORM, RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      DOUBLE PRECISION   AB( LDAB, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DPBCON estimates the reciprocal of the condition number (in the\n*  1-norm) of a real symmetric positive definite band matrix using the\n*  Cholesky factorization A = U**T*U or A = L*L**T computed by DPBTRF.\n*\n*  An estimate is obtained for norm(inv(A)), and the reciprocal of the\n*  condition number is computed as RCOND = 1 / (ANORM * norm(inv(A))).\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangular factor stored in AB;\n*          = \'L\':  Lower triangular factor stored in AB.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KD >= 0.\n*\n*  AB      (input) DOUBLE PRECISION array, dimension (LDAB,N)\n*          The triangular factor U or L from the Cholesky factorization\n*          A = U**T*U or A = L*L**T of the band matrix A, stored in the\n*          first KD+1 rows of the array.  The j-th column of U or L is\n*          stored in the j-th column of the array AB as follows:\n*          if UPLO =\'U\', AB(kd+1+i-j,j) = U(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO =\'L\', AB(1+i-j,j)    = L(i,j) for j<=i<=min(n,j+kd).\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD+1.\n*\n*  ANORM   (input) DOUBLE PRECISION\n*          The 1-norm (or infinity-norm) of the symmetric band matrix A.\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(ANORM * AINVNM), where AINVNM is an\n*          estimate of the 1-norm of inv(A) computed in this routine.\n*\n*  WORK    (workspace) DOUBLE PRECISION array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(335,'cpbcon_335.txt','      SUBROUTINE CPBCON( UPLO, N, KD, AB, LDAB, ANORM, RCOND, WORK,\n     $                   RWORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call CLACN2 in place of CLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, KD, LDAB, N\n      REAL               ANORM, RCOND\n*     ..\n*     .. Array Arguments ..\n      REAL               RWORK( * )\n      COMPLEX            AB( LDAB, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CPBCON estimates the reciprocal of the condition number (in the\n*  1-norm) of a complex Hermitian positive definite band matrix using\n*  the Cholesky factorization A = U**H*U or A = L*L**H computed by\n*  CPBTRF.\n*\n*  An estimate is obtained for norm(inv(A)), and the reciprocal of the\n*  condition number is computed as RCOND = 1 / (ANORM * norm(inv(A))).\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangular factor stored in AB;\n*          = \'L\':  Lower triangular factor stored in AB.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of sub-diagonals if UPLO = \'L\'.  KD >= 0.\n*\n*  AB      (input) COMPLEX array, dimension (LDAB,N)\n*          The triangular factor U or L from the Cholesky factorization\n*          A = U**H*U or A = L*L**H of the band matrix A, stored in the\n*          first KD+1 rows of the array.  The j-th column of U or L is\n*          stored in the j-th column of the array AB as follows:\n*          if UPLO =\'U\', AB(kd+1+i-j,j) = U(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO =\'L\', AB(1+i-j,j)    = L(i,j) for j<=i<=min(n,j+kd).\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD+1.\n*\n*  ANORM   (input) REAL\n*          The 1-norm (or infinity-norm) of the Hermitian band matrix A.\n*\n*  RCOND   (output) REAL\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(ANORM * AINVNM), where AINVNM is an\n*          estimate of the 1-norm of inv(A) computed in this routine.\n*\n*  WORK    (workspace) COMPLEX array, dimension (2*N)\n*\n*  RWORK   (workspace) REAL array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(336,'zpbcon_336.txt','      SUBROUTINE ZPBCON( UPLO, N, KD, AB, LDAB, ANORM, RCOND, WORK,\n     $                   RWORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call ZLACN2 in place of ZLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, KD, LDAB, N\n      DOUBLE PRECISION   ANORM, RCOND\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   RWORK( * )\n      COMPLEX*16         AB( LDAB, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZPBCON estimates the reciprocal of the condition number (in the\n*  1-norm) of a complex Hermitian positive definite band matrix using\n*  the Cholesky factorization A = U**H*U or A = L*L**H computed by\n*  ZPBTRF.\n*\n*  An estimate is obtained for norm(inv(A)), and the reciprocal of the\n*  condition number is computed as RCOND = 1 / (ANORM * norm(inv(A))).\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangular factor stored in AB;\n*          = \'L\':  Lower triangular factor stored in AB.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of sub-diagonals if UPLO = \'L\'.  KD >= 0.\n*\n*  AB      (input) COMPLEX*16 array, dimension (LDAB,N)\n*          The triangular factor U or L from the Cholesky factorization\n*          A = U**H*U or A = L*L**H of the band matrix A, stored in the\n*          first KD+1 rows of the array.  The j-th column of U or L is\n*          stored in the j-th column of the array AB as follows:\n*          if UPLO =\'U\', AB(kd+1+i-j,j) = U(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO =\'L\', AB(1+i-j,j)    = L(i,j) for j<=i<=min(n,j+kd).\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD+1.\n*\n*  ANORM   (input) DOUBLE PRECISION\n*          The 1-norm (or infinity-norm) of the Hermitian band matrix A.\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(ANORM * AINVNM), where AINVNM is an\n*          estimate of the 1-norm of inv(A) computed in this routine.\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(337,'sptcon_337.txt','      SUBROUTINE SPTCON( N, D, E, ANORM, RCOND, WORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, N\n      REAL               ANORM, RCOND\n*     ..\n*     .. Array Arguments ..\n      REAL               D( * ), E( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SPTCON computes the reciprocal of the condition number (in the\n*  1-norm) of a real symmetric positive definite tridiagonal matrix\n*  using the factorization A = L*D*L**T or A = U**T*D*U computed by\n*  SPTTRF.\n*\n*  Norm(inv(A)) is computed by a direct method, and the reciprocal of\n*  the condition number is computed as\n*               RCOND = 1 / (ANORM * norm(inv(A))).\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  D       (input) REAL array, dimension (N)\n*          The n diagonal elements of the diagonal matrix D from the\n*          factorization of A, as computed by SPTTRF.\n*\n*  E       (input) REAL array, dimension (N-1)\n*          The (n-1) off-diagonal elements of the unit bidiagonal factor\n*          U or L from the factorization of A,  as computed by SPTTRF.\n*\n*  ANORM   (input) REAL\n*          The 1-norm of the original matrix A.\n*\n*  RCOND   (output) REAL\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(ANORM * AINVNM), where AINVNM is the\n*          1-norm of inv(A) computed in this routine.\n*\n*  WORK    (workspace) REAL array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(338,'dptcon_338.txt','      SUBROUTINE DPTCON( N, D, E, ANORM, RCOND, WORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, N\n      DOUBLE PRECISION   ANORM, RCOND\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   D( * ), E( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DPTCON computes the reciprocal of the condition number (in the\n*  1-norm) of a real symmetric positive definite tridiagonal matrix\n*  using the factorization A = L*D*L**T or A = U**T*D*U computed by\n*  DPTTRF.\n*\n*  Norm(inv(A)) is computed by a direct method, and the reciprocal of\n*  the condition number is computed as\n*               RCOND = 1 / (ANORM * norm(inv(A))).\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  D       (input) DOUBLE PRECISION array, dimension (N)\n*          The n diagonal elements of the diagonal matrix D from the\n*          factorization of A, as computed by DPTTRF.\n*\n*  E       (input) DOUBLE PRECISION array, dimension (N-1)\n*          The (n-1) off-diagonal elements of the unit bidiagonal factor\n*          U or L from the factorization of A,  as computed by DPTTRF.\n*\n*  ANORM   (input) DOUBLE PRECISION\n*          The 1-norm of the original matrix A.\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(ANORM * AINVNM), where AINVNM is the\n*          1-norm of inv(A) computed in this routine.\n*\n*  WORK    (workspace) DOUBLE PRECISION array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(339,'cptcon_339.txt','      SUBROUTINE CPTCON( N, D, E, ANORM, RCOND, RWORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, N\n      REAL               ANORM, RCOND\n*     ..\n*     .. Array Arguments ..\n      REAL               D( * ), RWORK( * )\n      COMPLEX            E( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CPTCON computes the reciprocal of the condition number (in the\n*  1-norm) of a complex Hermitian positive definite tridiagonal matrix\n*  using the factorization A = L*D*L**H or A = U**H*D*U computed by\n*  CPTTRF.\n*\n*  Norm(inv(A)) is computed by a direct method, and the reciprocal of\n*  the condition number is computed as\n*                   RCOND = 1 / (ANORM * norm(inv(A))).\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  D       (input) REAL array, dimension (N)\n*          The n diagonal elements of the diagonal matrix D from the\n*          factorization of A, as computed by CPTTRF.\n*\n*  E       (input) COMPLEX array, dimension (N-1)\n*          The (n-1) off-diagonal elements of the unit bidiagonal factor\n*          U or L from the factorization of A, as computed by CPTTRF.\n*\n*  ANORM   (input) REAL\n*          The 1-norm of the original matrix A.\n*\n*  RCOND   (output) REAL\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(ANORM * AINVNM), where AINVNM is the\n*          1-norm of inv(A) computed in this routine.\n*\n*  RWORK   (workspace) REAL array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(340,'zptcon_340.txt','      SUBROUTINE ZPTCON( N, D, E, ANORM, RCOND, RWORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, N\n      DOUBLE PRECISION   ANORM, RCOND\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   D( * ), RWORK( * )\n      COMPLEX*16         E( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZPTCON computes the reciprocal of the condition number (in the\n*  1-norm) of a complex Hermitian positive definite tridiagonal matrix\n*  using the factorization A = L*D*L**H or A = U**H*D*U computed by\n*  ZPTTRF.\n*\n*  Norm(inv(A)) is computed by a direct method, and the reciprocal of\n*  the condition number is computed as\n*                   RCOND = 1 / (ANORM * norm(inv(A))).\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  D       (input) DOUBLE PRECISION array, dimension (N)\n*          The n diagonal elements of the diagonal matrix D from the\n*          factorization of A, as computed by ZPTTRF.\n*\n*  E       (input) COMPLEX*16 array, dimension (N-1)\n*          The (n-1) off-diagonal elements of the unit bidiagonal factor\n*          U or L from the factorization of A, as computed by ZPTTRF.\n*\n*  ANORM   (input) DOUBLE PRECISION\n*          The 1-norm of the original matrix A.\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(ANORM * AINVNM), where AINVNM is the\n*          1-norm of inv(A) computed in this routine.\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(341,'checon_341.txt','      SUBROUTINE CHECON( UPLO, N, A, LDA, IPIV, ANORM, RCOND, WORK,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call CLACN2 in place of CLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, N\n      REAL               ANORM, RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX            A( LDA, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CHECON estimates the reciprocal of the condition number of a complex\n*  Hermitian matrix A using the factorization A = U*D*U**H or\n*  A = L*D*L**H computed by CHETRF.\n*\n*  An estimate is obtained for norm(inv(A)), and the reciprocal of the\n*  condition number is computed as RCOND = 1 / (ANORM * norm(inv(A))).\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          Specifies whether the details of the factorization are stored\n*          as an upper or lower triangular matrix.\n*          = \'U\':  Upper triangular, form is A = U*D*U**H;\n*          = \'L\':  Lower triangular, form is A = L*D*L**H.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input) COMPLEX array, dimension (LDA,N)\n*          The block diagonal matrix D and the multipliers used to\n*          obtain the factor U or L as computed by CHETRF.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by CHETRF.\n*\n*  ANORM   (input) REAL\n*          The 1-norm of the original matrix A.\n*\n*  RCOND   (output) REAL\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(ANORM * AINVNM), where AINVNM is an\n*          estimate of the 1-norm of inv(A) computed in this routine.\n*\n*  WORK    (workspace) COMPLEX array, dimension (2*N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(342,'zhecon_342.txt','      SUBROUTINE ZHECON( UPLO, N, A, LDA, IPIV, ANORM, RCOND, WORK,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call ZLACN2 in place of ZLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, N\n      DOUBLE PRECISION   ANORM, RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX*16         A( LDA, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZHECON estimates the reciprocal of the condition number of a complex\n*  Hermitian matrix A using the factorization A = U*D*U**H or\n*  A = L*D*L**H computed by ZHETRF.\n*\n*  An estimate is obtained for norm(inv(A)), and the reciprocal of the\n*  condition number is computed as RCOND = 1 / (ANORM * norm(inv(A))).\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          Specifies whether the details of the factorization are stored\n*          as an upper or lower triangular matrix.\n*          = \'U\':  Upper triangular, form is A = U*D*U**H;\n*          = \'L\':  Lower triangular, form is A = L*D*L**H.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input) COMPLEX*16 array, dimension (LDA,N)\n*          The block diagonal matrix D and the multipliers used to\n*          obtain the factor U or L as computed by ZHETRF.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by ZHETRF.\n*\n*  ANORM   (input) DOUBLE PRECISION\n*          The 1-norm of the original matrix A.\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(ANORM * AINVNM), where AINVNM is an\n*          estimate of the 1-norm of inv(A) computed in this routine.\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(343,'ssycon_343.txt','      SUBROUTINE SSYCON( UPLO, N, A, LDA, IPIV, ANORM, RCOND, WORK,\n     $                   IWORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call SLACN2 in place of SLACON, 7 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, N\n      REAL               ANORM, RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * ), IWORK( * )\n      REAL               A( LDA, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SSYCON estimates the reciprocal of the condition number (in the\n*  1-norm) of a real symmetric matrix A using the factorization\n*  A = U*D*U**T or A = L*D*L**T computed by SSYTRF.\n*\n*  An estimate is obtained for norm(inv(A)), and the reciprocal of the\n*  condition number is computed as RCOND = 1 / (ANORM * norm(inv(A))).\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          Specifies whether the details of the factorization are stored\n*          as an upper or lower triangular matrix.\n*          = \'U\':  Upper triangular, form is A = U*D*U**T;\n*          = \'L\':  Lower triangular, form is A = L*D*L**T.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input) REAL array, dimension (LDA,N)\n*          The block diagonal matrix D and the multipliers used to\n*          obtain the factor U or L as computed by SSYTRF.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by SSYTRF.\n*\n*  ANORM   (input) REAL\n*          The 1-norm of the original matrix A.\n*\n*  RCOND   (output) REAL\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(ANORM * AINVNM), where AINVNM is an\n*          estimate of the 1-norm of inv(A) computed in this routine.\n*\n*  WORK    (workspace) REAL array, dimension (2*N)\n*\n*  IWORK    (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(344,'dsycon_344.txt','      SUBROUTINE DSYCON( UPLO, N, A, LDA, IPIV, ANORM, RCOND, WORK,\n     $                   IWORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call DLACN2 in place of DLACON, 5 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, N\n      DOUBLE PRECISION   ANORM, RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * ), IWORK( * )\n      DOUBLE PRECISION   A( LDA, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DSYCON estimates the reciprocal of the condition number (in the\n*  1-norm) of a real symmetric matrix A using the factorization\n*  A = U*D*U**T or A = L*D*L**T computed by DSYTRF.\n*\n*  An estimate is obtained for norm(inv(A)), and the reciprocal of the\n*  condition number is computed as RCOND = 1 / (ANORM * norm(inv(A))).\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          Specifies whether the details of the factorization are stored\n*          as an upper or lower triangular matrix.\n*          = \'U\':  Upper triangular, form is A = U*D*U**T;\n*          = \'L\':  Lower triangular, form is A = L*D*L**T.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input) DOUBLE PRECISION array, dimension (LDA,N)\n*          The block diagonal matrix D and the multipliers used to\n*          obtain the factor U or L as computed by DSYTRF.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by DSYTRF.\n*\n*  ANORM   (input) DOUBLE PRECISION\n*          The 1-norm of the original matrix A.\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(ANORM * AINVNM), where AINVNM is an\n*          estimate of the 1-norm of inv(A) computed in this routine.\n*\n*  WORK    (workspace) DOUBLE PRECISION array, dimension (2*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(345,'csycon_345.txt','      SUBROUTINE CSYCON( UPLO, N, A, LDA, IPIV, ANORM, RCOND, WORK,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call CLACN2 in place of CLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, N\n      REAL               ANORM, RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX            A( LDA, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CSYCON estimates the reciprocal of the condition number (in the\n*  1-norm) of a complex symmetric matrix A using the factorization\n*  A = U*D*U**T or A = L*D*L**T computed by CSYTRF.\n*\n*  An estimate is obtained for norm(inv(A)), and the reciprocal of the\n*  condition number is computed as RCOND = 1 / (ANORM * norm(inv(A))).\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          Specifies whether the details of the factorization are stored\n*          as an upper or lower triangular matrix.\n*          = \'U\':  Upper triangular, form is A = U*D*U**T;\n*          = \'L\':  Lower triangular, form is A = L*D*L**T.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input) COMPLEX array, dimension (LDA,N)\n*          The block diagonal matrix D and the multipliers used to\n*          obtain the factor U or L as computed by CSYTRF.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by CSYTRF.\n*\n*  ANORM   (input) REAL\n*          The 1-norm of the original matrix A.\n*\n*  RCOND   (output) REAL\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(ANORM * AINVNM), where AINVNM is an\n*          estimate of the 1-norm of inv(A) computed in this routine.\n*\n*  WORK    (workspace) COMPLEX array, dimension (2*N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(346,'zsycon_346.txt','      SUBROUTINE ZSYCON( UPLO, N, A, LDA, IPIV, ANORM, RCOND, WORK,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call ZLACN2 in place of ZLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, N\n      DOUBLE PRECISION   ANORM, RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX*16         A( LDA, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZSYCON estimates the reciprocal of the condition number (in the\n*  1-norm) of a complex symmetric matrix A using the factorization\n*  A = U*D*U**T or A = L*D*L**T computed by ZSYTRF.\n*\n*  An estimate is obtained for norm(inv(A)), and the reciprocal of the\n*  condition number is computed as RCOND = 1 / (ANORM * norm(inv(A))).\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          Specifies whether the details of the factorization are stored\n*          as an upper or lower triangular matrix.\n*          = \'U\':  Upper triangular, form is A = U*D*U**T;\n*          = \'L\':  Lower triangular, form is A = L*D*L**T.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input) COMPLEX*16 array, dimension (LDA,N)\n*          The block diagonal matrix D and the multipliers used to\n*          obtain the factor U or L as computed by ZSYTRF.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by ZSYTRF.\n*\n*  ANORM   (input) DOUBLE PRECISION\n*          The 1-norm of the original matrix A.\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(ANORM * AINVNM), where AINVNM is an\n*          estimate of the 1-norm of inv(A) computed in this routine.\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(347,'sspcon_347.txt','      SUBROUTINE SSPCON( UPLO, N, AP, IPIV, ANORM, RCOND, WORK, IWORK,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call SLACN2 in place of SLACON, 5 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, N\n      REAL               ANORM, RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * ), IWORK( * )\n      REAL               AP( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SSPCON estimates the reciprocal of the condition number (in the\n*  1-norm) of a real symmetric packed matrix A using the factorization\n*  A = U*D*U**T or A = L*D*L**T computed by SSPTRF.\n*\n*  An estimate is obtained for norm(inv(A)), and the reciprocal of the\n*  condition number is computed as RCOND = 1 / (ANORM * norm(inv(A))).\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          Specifies whether the details of the factorization are stored\n*          as an upper or lower triangular matrix.\n*          = \'U\':  Upper triangular, form is A = U*D*U**T;\n*          = \'L\':  Lower triangular, form is A = L*D*L**T.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input) REAL array, dimension (N*(N+1)/2)\n*          The block diagonal matrix D and the multipliers used to\n*          obtain the factor U or L as computed by SSPTRF, stored as a\n*          packed triangular matrix.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by SSPTRF.\n*\n*  ANORM   (input) REAL\n*          The 1-norm of the original matrix A.\n*\n*  RCOND   (output) REAL\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(ANORM * AINVNM), where AINVNM is an\n*          estimate of the 1-norm of inv(A) computed in this routine.\n*\n*  WORK    (workspace) REAL array, dimension (2*N)\n*\n*  IWORK    (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(348,'dspcon_348.txt','      SUBROUTINE DSPCON( UPLO, N, AP, IPIV, ANORM, RCOND, WORK, IWORK,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call DLACN2 in place of DLACON, 5 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, N\n      DOUBLE PRECISION   ANORM, RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * ), IWORK( * )\n      DOUBLE PRECISION   AP( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DSPCON estimates the reciprocal of the condition number (in the\n*  1-norm) of a real symmetric packed matrix A using the factorization\n*  A = U*D*U**T or A = L*D*L**T computed by DSPTRF.\n*\n*  An estimate is obtained for norm(inv(A)), and the reciprocal of the\n*  condition number is computed as RCOND = 1 / (ANORM * norm(inv(A))).\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          Specifies whether the details of the factorization are stored\n*          as an upper or lower triangular matrix.\n*          = \'U\':  Upper triangular, form is A = U*D*U**T;\n*          = \'L\':  Lower triangular, form is A = L*D*L**T.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input) DOUBLE PRECISION array, dimension (N*(N+1)/2)\n*          The block diagonal matrix D and the multipliers used to\n*          obtain the factor U or L as computed by DSPTRF, stored as a\n*          packed triangular matrix.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by DSPTRF.\n*\n*  ANORM   (input) DOUBLE PRECISION\n*          The 1-norm of the original matrix A.\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(ANORM * AINVNM), where AINVNM is an\n*          estimate of the 1-norm of inv(A) computed in this routine.\n*\n*  WORK    (workspace) DOUBLE PRECISION array, dimension (2*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(349,'cspcon_349.txt','      SUBROUTINE CSPCON( UPLO, N, AP, IPIV, ANORM, RCOND, WORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call CLACN2 in place of CLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, N\n      REAL               ANORM, RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX            AP( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CSPCON estimates the reciprocal of the condition number (in the\n*  1-norm) of a complex symmetric packed matrix A using the\n*  factorization A = U*D*U**T or A = L*D*L**T computed by CSPTRF.\n*\n*  An estimate is obtained for norm(inv(A)), and the reciprocal of the\n*  condition number is computed as RCOND = 1 / (ANORM * norm(inv(A))).\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          Specifies whether the details of the factorization are stored\n*          as an upper or lower triangular matrix.\n*          = \'U\':  Upper triangular, form is A = U*D*U**T;\n*          = \'L\':  Lower triangular, form is A = L*D*L**T.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input) COMPLEX array, dimension (N*(N+1)/2)\n*          The block diagonal matrix D and the multipliers used to\n*          obtain the factor U or L as computed by CSPTRF, stored as a\n*          packed triangular matrix.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by CSPTRF.\n*\n*  ANORM   (input) REAL\n*          The 1-norm of the original matrix A.\n*\n*  RCOND   (output) REAL\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(ANORM * AINVNM), where AINVNM is an\n*          estimate of the 1-norm of inv(A) computed in this routine.\n*\n*  WORK    (workspace) COMPLEX array, dimension (2*N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(350,'zspcon_350.txt','      SUBROUTINE ZSPCON( UPLO, N, AP, IPIV, ANORM, RCOND, WORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call ZLACN2 in place of ZLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, N\n      DOUBLE PRECISION   ANORM, RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX*16         AP( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZSPCON estimates the reciprocal of the condition number (in the\n*  1-norm) of a complex symmetric packed matrix A using the\n*  factorization A = U*D*U**T or A = L*D*L**T computed by ZSPTRF.\n*\n*  An estimate is obtained for norm(inv(A)), and the reciprocal of the\n*  condition number is computed as RCOND = 1 / (ANORM * norm(inv(A))).\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          Specifies whether the details of the factorization are stored\n*          as an upper or lower triangular matrix.\n*          = \'U\':  Upper triangular, form is A = U*D*U**T;\n*          = \'L\':  Lower triangular, form is A = L*D*L**T.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input) COMPLEX*16 array, dimension (N*(N+1)/2)\n*          The block diagonal matrix D and the multipliers used to\n*          obtain the factor U or L as computed by ZSPTRF, stored as a\n*          packed triangular matrix.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by ZSPTRF.\n*\n*  ANORM   (input) DOUBLE PRECISION\n*          The 1-norm of the original matrix A.\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(ANORM * AINVNM), where AINVNM is an\n*          estimate of the 1-norm of inv(A) computed in this routine.\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(351,'chpcon_351.txt','      SUBROUTINE CHPCON( UPLO, N, AP, IPIV, ANORM, RCOND, WORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call CLACN2 in place of CLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, N\n      REAL               ANORM, RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX            AP( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CHPCON estimates the reciprocal of the condition number of a complex\n*  Hermitian packed matrix A using the factorization A = U*D*U**H or\n*  A = L*D*L**H computed by CHPTRF.\n*\n*  An estimate is obtained for norm(inv(A)), and the reciprocal of the\n*  condition number is computed as RCOND = 1 / (ANORM * norm(inv(A))).\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          Specifies whether the details of the factorization are stored\n*          as an upper or lower triangular matrix.\n*          = \'U\':  Upper triangular, form is A = U*D*U**H;\n*          = \'L\':  Lower triangular, form is A = L*D*L**H.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input) COMPLEX array, dimension (N*(N+1)/2)\n*          The block diagonal matrix D and the multipliers used to\n*          obtain the factor U or L as computed by CHPTRF, stored as a\n*          packed triangular matrix.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by CHPTRF.\n*\n*  ANORM   (input) REAL\n*          The 1-norm of the original matrix A.\n*\n*  RCOND   (output) REAL\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(ANORM * AINVNM), where AINVNM is an\n*          estimate of the 1-norm of inv(A) computed in this routine.\n*\n*  WORK    (workspace) COMPLEX array, dimension (2*N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(352,'zhpcon_352.txt','      SUBROUTINE ZHPCON( UPLO, N, AP, IPIV, ANORM, RCOND, WORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call ZLACN2 in place of ZLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, N\n      DOUBLE PRECISION   ANORM, RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX*16         AP( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZHPCON estimates the reciprocal of the condition number of a complex\n*  Hermitian packed matrix A using the factorization A = U*D*U**H or\n*  A = L*D*L**H computed by ZHPTRF.\n*\n*  An estimate is obtained for norm(inv(A)), and the reciprocal of the\n*  condition number is computed as RCOND = 1 / (ANORM * norm(inv(A))).\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          Specifies whether the details of the factorization are stored\n*          as an upper or lower triangular matrix.\n*          = \'U\':  Upper triangular, form is A = U*D*U**H;\n*          = \'L\':  Lower triangular, form is A = L*D*L**H.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input) COMPLEX*16 array, dimension (N*(N+1)/2)\n*          The block diagonal matrix D and the multipliers used to\n*          obtain the factor U or L as computed by ZHPTRF, stored as a\n*          packed triangular matrix.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by ZHPTRF.\n*\n*  ANORM   (input) DOUBLE PRECISION\n*          The 1-norm of the original matrix A.\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(ANORM * AINVNM), where AINVNM is an\n*          estimate of the 1-norm of inv(A) computed in this routine.\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(353,'strcon_353.txt','      SUBROUTINE STRCON( NORM, UPLO, DIAG, N, A, LDA, RCOND, WORK,\n     $                   IWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call SLACN2 in place of SLACON, 7 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, NORM, UPLO\n      INTEGER            INFO, LDA, N\n      REAL               RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      REAL               A( LDA, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  STRCON estimates the reciprocal of the condition number of a\n*  triangular matrix A, in either the 1-norm or the infinity-norm.\n*\n*  The norm of A is computed and an estimate is obtained for\n*  norm(inv(A)), then the reciprocal of the condition number is\n*  computed as\n*     RCOND = 1 / ( norm(A) * norm(inv(A)) ).\n*\n*  Arguments\n*  =========\n*\n*  NORM    (input) CHARACTER*1\n*          Specifies whether the 1-norm condition number or the\n*          infinity-norm condition number is required:\n*          = \'1\' or \'O\':  1-norm;\n*          = \'I\':         Infinity-norm.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input) REAL array, dimension (LDA,N)\n*          The triangular matrix A.  If UPLO = \'U\', the leading N-by-N\n*          upper triangular part of the array A contains the upper\n*          triangular matrix, and the strictly lower triangular part of\n*          A is not referenced.  If UPLO = \'L\', the leading N-by-N lower\n*          triangular part of the array A contains the lower triangular\n*          matrix, and the strictly upper triangular part of A is not\n*          referenced.  If DIAG = \'U\', the diagonal elements of A are\n*          also not referenced and are assumed to be 1.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  RCOND   (output) REAL\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(norm(A) * norm(inv(A))).\n*\n*  WORK    (workspace) REAL array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(354,'dtrcon_354.txt','      SUBROUTINE DTRCON( NORM, UPLO, DIAG, N, A, LDA, RCOND, WORK,\n     $                   IWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call DLACN2 in place of DLACON, 5 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, NORM, UPLO\n      INTEGER            INFO, LDA, N\n      DOUBLE PRECISION   RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      DOUBLE PRECISION   A( LDA, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DTRCON estimates the reciprocal of the condition number of a\n*  triangular matrix A, in either the 1-norm or the infinity-norm.\n*\n*  The norm of A is computed and an estimate is obtained for\n*  norm(inv(A)), then the reciprocal of the condition number is\n*  computed as\n*     RCOND = 1 / ( norm(A) * norm(inv(A)) ).\n*\n*  Arguments\n*  =========\n*\n*  NORM    (input) CHARACTER*1\n*          Specifies whether the 1-norm condition number or the\n*          infinity-norm condition number is required:\n*          = \'1\' or \'O\':  1-norm;\n*          = \'I\':         Infinity-norm.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input) DOUBLE PRECISION array, dimension (LDA,N)\n*          The triangular matrix A.  If UPLO = \'U\', the leading N-by-N\n*          upper triangular part of the array A contains the upper\n*          triangular matrix, and the strictly lower triangular part of\n*          A is not referenced.  If UPLO = \'L\', the leading N-by-N lower\n*          triangular part of the array A contains the lower triangular\n*          matrix, and the strictly upper triangular part of A is not\n*          referenced.  If DIAG = \'U\', the diagonal elements of A are\n*          also not referenced and are assumed to be 1.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(norm(A) * norm(inv(A))).\n*\n*  WORK    (workspace) DOUBLE PRECISION array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(355,'ctrcon_355.txt','      SUBROUTINE CTRCON( NORM, UPLO, DIAG, N, A, LDA, RCOND, WORK,\n     $                   RWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call CLACN2 in place of CLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, NORM, UPLO\n      INTEGER            INFO, LDA, N\n      REAL               RCOND\n*     ..\n*     .. Array Arguments ..\n      REAL               RWORK( * )\n      COMPLEX            A( LDA, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CTRCON estimates the reciprocal of the condition number of a\n*  triangular matrix A, in either the 1-norm or the infinity-norm.\n*\n*  The norm of A is computed and an estimate is obtained for\n*  norm(inv(A)), then the reciprocal of the condition number is\n*  computed as\n*     RCOND = 1 / ( norm(A) * norm(inv(A)) ).\n*\n*  Arguments\n*  =========\n*\n*  NORM    (input) CHARACTER*1\n*          Specifies whether the 1-norm condition number or the\n*          infinity-norm condition number is required:\n*          = \'1\' or \'O\':  1-norm;\n*          = \'I\':         Infinity-norm.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input) COMPLEX array, dimension (LDA,N)\n*          The triangular matrix A.  If UPLO = \'U\', the leading N-by-N\n*          upper triangular part of the array A contains the upper\n*          triangular matrix, and the strictly lower triangular part of\n*          A is not referenced.  If UPLO = \'L\', the leading N-by-N lower\n*          triangular part of the array A contains the lower triangular\n*          matrix, and the strictly upper triangular part of A is not\n*          referenced.  If DIAG = \'U\', the diagonal elements of A are\n*          also not referenced and are assumed to be 1.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  RCOND   (output) REAL\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(norm(A) * norm(inv(A))).\n*\n*  WORK    (workspace) COMPLEX array, dimension (2*N)\n*\n*  RWORK   (workspace) REAL array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(356,'ztrcon_356.txt','      SUBROUTINE ZTRCON( NORM, UPLO, DIAG, N, A, LDA, RCOND, WORK,\n     $                   RWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call ZLACN2 in place of ZLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, NORM, UPLO\n      INTEGER            INFO, LDA, N\n      DOUBLE PRECISION   RCOND\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   RWORK( * )\n      COMPLEX*16         A( LDA, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZTRCON estimates the reciprocal of the condition number of a\n*  triangular matrix A, in either the 1-norm or the infinity-norm.\n*\n*  The norm of A is computed and an estimate is obtained for\n*  norm(inv(A)), then the reciprocal of the condition number is\n*  computed as\n*     RCOND = 1 / ( norm(A) * norm(inv(A)) ).\n*\n*  Arguments\n*  =========\n*\n*  NORM    (input) CHARACTER*1\n*          Specifies whether the 1-norm condition number or the\n*          infinity-norm condition number is required:\n*          = \'1\' or \'O\':  1-norm;\n*          = \'I\':         Infinity-norm.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input) COMPLEX*16 array, dimension (LDA,N)\n*          The triangular matrix A.  If UPLO = \'U\', the leading N-by-N\n*          upper triangular part of the array A contains the upper\n*          triangular matrix, and the strictly lower triangular part of\n*          A is not referenced.  If UPLO = \'L\', the leading N-by-N lower\n*          triangular part of the array A contains the lower triangular\n*          matrix, and the strictly upper triangular part of A is not\n*          referenced.  If DIAG = \'U\', the diagonal elements of A are\n*          also not referenced and are assumed to be 1.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(norm(A) * norm(inv(A))).\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(357,'stbcon_357.txt','      SUBROUTINE STBCON( NORM, UPLO, DIAG, N, KD, AB, LDAB, RCOND, WORK,\n     $                   IWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call SLACN2 in place of SLACON, 7 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, NORM, UPLO\n      INTEGER            INFO, KD, LDAB, N\n      REAL               RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      REAL               AB( LDAB, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  STBCON estimates the reciprocal of the condition number of a\n*  triangular band matrix A, in either the 1-norm or the infinity-norm.\n*\n*  The norm of A is computed and an estimate is obtained for\n*  norm(inv(A)), then the reciprocal of the condition number is\n*  computed as\n*     RCOND = 1 / ( norm(A) * norm(inv(A)) ).\n*\n*  Arguments\n*  =========\n*\n*  NORM    (input) CHARACTER*1\n*          Specifies whether the 1-norm condition number or the\n*          infinity-norm condition number is required:\n*          = \'1\' or \'O\':  1-norm;\n*          = \'I\':         Infinity-norm.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals or subdiagonals of the\n*          triangular band matrix A.  KD >= 0.\n*\n*  AB      (input) REAL array, dimension (LDAB,N)\n*          The upper or lower triangular band matrix A, stored in the\n*          first kd+1 rows of the array. The j-th column of A is stored\n*          in the j-th column of the array AB as follows:\n*          if UPLO = \'U\', AB(kd+1+i-j,j) = A(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+kd).\n*          If DIAG = \'U\', the diagonal elements of A are not referenced\n*          and are assumed to be 1.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD+1.\n*\n*  RCOND   (output) REAL\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(norm(A) * norm(inv(A))).\n*\n*  WORK    (workspace) REAL array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(358,'dtbcon_358.txt','      SUBROUTINE DTBCON( NORM, UPLO, DIAG, N, KD, AB, LDAB, RCOND, WORK,\n     $                   IWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call DLACN2 in place of DLACON, 5 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, NORM, UPLO\n      INTEGER            INFO, KD, LDAB, N\n      DOUBLE PRECISION   RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      DOUBLE PRECISION   AB( LDAB, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DTBCON estimates the reciprocal of the condition number of a\n*  triangular band matrix A, in either the 1-norm or the infinity-norm.\n*\n*  The norm of A is computed and an estimate is obtained for\n*  norm(inv(A)), then the reciprocal of the condition number is\n*  computed as\n*     RCOND = 1 / ( norm(A) * norm(inv(A)) ).\n*\n*  Arguments\n*  =========\n*\n*  NORM    (input) CHARACTER*1\n*          Specifies whether the 1-norm condition number or the\n*          infinity-norm condition number is required:\n*          = \'1\' or \'O\':  1-norm;\n*          = \'I\':         Infinity-norm.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals or subdiagonals of the\n*          triangular band matrix A.  KD >= 0.\n*\n*  AB      (input) DOUBLE PRECISION array, dimension (LDAB,N)\n*          The upper or lower triangular band matrix A, stored in the\n*          first kd+1 rows of the array. The j-th column of A is stored\n*          in the j-th column of the array AB as follows:\n*          if UPLO = \'U\', AB(kd+1+i-j,j) = A(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+kd).\n*          If DIAG = \'U\', the diagonal elements of A are not referenced\n*          and are assumed to be 1.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD+1.\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(norm(A) * norm(inv(A))).\n*\n*  WORK    (workspace) DOUBLE PRECISION array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(359,'ctbcon_359.txt','      SUBROUTINE CTBCON( NORM, UPLO, DIAG, N, KD, AB, LDAB, RCOND, WORK,\n     $                   RWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call CLACN2 in place of CLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, NORM, UPLO\n      INTEGER            INFO, KD, LDAB, N\n      REAL               RCOND\n*     ..\n*     .. Array Arguments ..\n      REAL               RWORK( * )\n      COMPLEX            AB( LDAB, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CTBCON estimates the reciprocal of the condition number of a\n*  triangular band matrix A, in either the 1-norm or the infinity-norm.\n*\n*  The norm of A is computed and an estimate is obtained for\n*  norm(inv(A)), then the reciprocal of the condition number is\n*  computed as\n*     RCOND = 1 / ( norm(A) * norm(inv(A)) ).\n*\n*  Arguments\n*  =========\n*\n*  NORM    (input) CHARACTER*1\n*          Specifies whether the 1-norm condition number or the\n*          infinity-norm condition number is required:\n*          = \'1\' or \'O\':  1-norm;\n*          = \'I\':         Infinity-norm.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals or subdiagonals of the\n*          triangular band matrix A.  KD >= 0.\n*\n*  AB      (input) COMPLEX array, dimension (LDAB,N)\n*          The upper or lower triangular band matrix A, stored in the\n*          first kd+1 rows of the array. The j-th column of A is stored\n*          in the j-th column of the array AB as follows:\n*          if UPLO = \'U\', AB(kd+1+i-j,j) = A(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+kd).\n*          If DIAG = \'U\', the diagonal elements of A are not referenced\n*          and are assumed to be 1.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD+1.\n*\n*  RCOND   (output) REAL\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(norm(A) * norm(inv(A))).\n*\n*  WORK    (workspace) COMPLEX array, dimension (2*N)\n*\n*  RWORK   (workspace) REAL array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(360,'ztbcon_360.txt','      SUBROUTINE ZTBCON( NORM, UPLO, DIAG, N, KD, AB, LDAB, RCOND, WORK,\n     $                   RWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call ZLACN2 in place of ZLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, NORM, UPLO\n      INTEGER            INFO, KD, LDAB, N\n      DOUBLE PRECISION   RCOND\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   RWORK( * )\n      COMPLEX*16         AB( LDAB, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZTBCON estimates the reciprocal of the condition number of a\n*  triangular band matrix A, in either the 1-norm or the infinity-norm.\n*\n*  The norm of A is computed and an estimate is obtained for\n*  norm(inv(A)), then the reciprocal of the condition number is\n*  computed as\n*     RCOND = 1 / ( norm(A) * norm(inv(A)) ).\n*\n*  Arguments\n*  =========\n*\n*  NORM    (input) CHARACTER*1\n*          Specifies whether the 1-norm condition number or the\n*          infinity-norm condition number is required:\n*          = \'1\' or \'O\':  1-norm;\n*          = \'I\':         Infinity-norm.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals or subdiagonals of the\n*          triangular band matrix A.  KD >= 0.\n*\n*  AB      (input) COMPLEX*16 array, dimension (LDAB,N)\n*          The upper or lower triangular band matrix A, stored in the\n*          first kd+1 rows of the array. The j-th column of A is stored\n*          in the j-th column of the array AB as follows:\n*          if UPLO = \'U\', AB(kd+1+i-j,j) = A(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+kd).\n*          If DIAG = \'U\', the diagonal elements of A are not referenced\n*          and are assumed to be 1.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD+1.\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(norm(A) * norm(inv(A))).\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(361,'stpcon_361.txt','      SUBROUTINE STPCON( NORM, UPLO, DIAG, N, AP, RCOND, WORK, IWORK,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call SLACN2 in place of SLACON, 7 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, NORM, UPLO\n      INTEGER            INFO, N\n      REAL               RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      REAL               AP( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  STPCON estimates the reciprocal of the condition number of a packed\n*  triangular matrix A, in either the 1-norm or the infinity-norm.\n*\n*  The norm of A is computed and an estimate is obtained for\n*  norm(inv(A)), then the reciprocal of the condition number is\n*  computed as\n*     RCOND = 1 / ( norm(A) * norm(inv(A)) ).\n*\n*  Arguments\n*  =========\n*\n*  NORM    (input) CHARACTER*1\n*          Specifies whether the 1-norm condition number or the\n*          infinity-norm condition number is required:\n*          = \'1\' or \'O\':  1-norm;\n*          = \'I\':         Infinity-norm.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input) REAL array, dimension (N*(N+1)/2)\n*          The upper or lower triangular matrix A, packed columnwise in\n*          a linear array.  The j-th column of A is stored in the array\n*          AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = A(i,j) for j<=i<=n.\n*          If DIAG = \'U\', the diagonal elements of A are not referenced\n*          and are assumed to be 1.\n*\n*  RCOND   (output) REAL\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(norm(A) * norm(inv(A))).\n*\n*  WORK    (workspace) REAL array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(362,'dtpcon_362.txt','      SUBROUTINE DTPCON( NORM, UPLO, DIAG, N, AP, RCOND, WORK, IWORK,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call DLACN2 in place of DLACON, 5 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, NORM, UPLO\n      INTEGER            INFO, N\n      DOUBLE PRECISION   RCOND\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      DOUBLE PRECISION   AP( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DTPCON estimates the reciprocal of the condition number of a packed\n*  triangular matrix A, in either the 1-norm or the infinity-norm.\n*\n*  The norm of A is computed and an estimate is obtained for\n*  norm(inv(A)), then the reciprocal of the condition number is\n*  computed as\n*     RCOND = 1 / ( norm(A) * norm(inv(A)) ).\n*\n*  Arguments\n*  =========\n*\n*  NORM    (input) CHARACTER*1\n*          Specifies whether the 1-norm condition number or the\n*          infinity-norm condition number is required:\n*          = \'1\' or \'O\':  1-norm;\n*          = \'I\':         Infinity-norm.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input) DOUBLE PRECISION array, dimension (N*(N+1)/2)\n*          The upper or lower triangular matrix A, packed columnwise in\n*          a linear array.  The j-th column of A is stored in the array\n*          AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = A(i,j) for j<=i<=n.\n*          If DIAG = \'U\', the diagonal elements of A are not referenced\n*          and are assumed to be 1.\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(norm(A) * norm(inv(A))).\n*\n*  WORK    (workspace) DOUBLE PRECISION array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(363,'ctpcon_363.txt','      SUBROUTINE CTPCON( NORM, UPLO, DIAG, N, AP, RCOND, WORK, RWORK,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call CLACN2 in place of CLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, NORM, UPLO\n      INTEGER            INFO, N\n      REAL               RCOND\n*     ..\n*     .. Array Arguments ..\n      REAL               RWORK( * )\n      COMPLEX            AP( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CTPCON estimates the reciprocal of the condition number of a packed\n*  triangular matrix A, in either the 1-norm or the infinity-norm.\n*\n*  The norm of A is computed and an estimate is obtained for\n*  norm(inv(A)), then the reciprocal of the condition number is\n*  computed as\n*     RCOND = 1 / ( norm(A) * norm(inv(A)) ).\n*\n*  Arguments\n*  =========\n*\n*  NORM    (input) CHARACTER*1\n*          Specifies whether the 1-norm condition number or the\n*          infinity-norm condition number is required:\n*          = \'1\' or \'O\':  1-norm;\n*          = \'I\':         Infinity-norm.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input) COMPLEX array, dimension (N*(N+1)/2)\n*          The upper or lower triangular matrix A, packed columnwise in\n*          a linear array.  The j-th column of A is stored in the array\n*          AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = A(i,j) for j<=i<=n.\n*          If DIAG = \'U\', the diagonal elements of A are not referenced\n*          and are assumed to be 1.\n*\n*  RCOND   (output) REAL\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(norm(A) * norm(inv(A))).\n*\n*  WORK    (workspace) COMPLEX array, dimension (2*N)\n*\n*  RWORK   (workspace) REAL array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(364,'ztpcon_364.txt','      SUBROUTINE ZTPCON( NORM, UPLO, DIAG, N, AP, RCOND, WORK, RWORK,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call ZLACN2 in place of ZLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, NORM, UPLO\n      INTEGER            INFO, N\n      DOUBLE PRECISION   RCOND\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   RWORK( * )\n      COMPLEX*16         AP( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZTPCON estimates the reciprocal of the condition number of a packed\n*  triangular matrix A, in either the 1-norm or the infinity-norm.\n*\n*  The norm of A is computed and an estimate is obtained for\n*  norm(inv(A)), then the reciprocal of the condition number is\n*  computed as\n*     RCOND = 1 / ( norm(A) * norm(inv(A)) ).\n*\n*  Arguments\n*  =========\n*\n*  NORM    (input) CHARACTER*1\n*          Specifies whether the 1-norm condition number or the\n*          infinity-norm condition number is required:\n*          = \'1\' or \'O\':  1-norm;\n*          = \'I\':         Infinity-norm.\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input) COMPLEX*16 array, dimension (N*(N+1)/2)\n*          The upper or lower triangular matrix A, packed columnwise in\n*          a linear array.  The j-th column of A is stored in the array\n*          AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = A(i,j) for j<=i<=n.\n*          If DIAG = \'U\', the diagonal elements of A are not referenced\n*          and are assumed to be 1.\n*\n*  RCOND   (output) DOUBLE PRECISION\n*          The reciprocal of the condition number of the matrix A,\n*          computed as RCOND = 1/(norm(A) * norm(inv(A))).\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(365,'sgerfs_365.txt','      SUBROUTINE SGERFS( TRANS, N, NRHS, A, LDA, AF, LDAF, IPIV, B, LDB,\n     $                   X, LDX, FERR, BERR, WORK, IWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call SLACN2 in place of SLACON, 7 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          TRANS\n      INTEGER            INFO, LDA, LDAF, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * ), IWORK( * )\n      REAL               A( LDA, * ), AF( LDAF, * ), B( LDB, * ),\n     $                   BERR( * ), FERR( * ), WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SGERFS improves the computed solution to a system of linear\n*  equations and provides error bounds and backward error estimates for\n*  the solution.\n*\n*  Arguments\n*  =========\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose = Transpose)\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  A       (input) REAL array, dimension (LDA,N)\n*          The original N-by-N matrix A.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  AF      (input) REAL array, dimension (LDAF,N)\n*          The factors L and U from the factorization A = P*L*U\n*          as computed by SGETRF.\n*\n*  LDAF    (input) INTEGER\n*          The leading dimension of the array AF.  LDAF >= max(1,N).\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          The pivot indices from SGETRF; for 1<=i<=N, row i of the\n*          matrix was interchanged with row IPIV(i).\n*\n*  B       (input) REAL array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input/output) REAL array, dimension (LDX,NRHS)\n*          On entry, the solution matrix X, as computed by SGETRS.\n*          On exit, the improved solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) REAL array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n*  Internal Parameters\n*  ===================\n*\n*  ITMAX is the maximum number of steps of iterative refinement.\n*\n'),(366,'dgerfs_366.txt','      SUBROUTINE DGERFS( TRANS, N, NRHS, A, LDA, AF, LDAF, IPIV, B, LDB,\n     $                   X, LDX, FERR, BERR, WORK, IWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call DLACN2 in place of DLACON, 5 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          TRANS\n      INTEGER            INFO, LDA, LDAF, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * ), IWORK( * )\n      DOUBLE PRECISION   A( LDA, * ), AF( LDAF, * ), B( LDB, * ),\n     $                   BERR( * ), FERR( * ), WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DGERFS improves the computed solution to a system of linear\n*  equations and provides error bounds and backward error estimates for\n*  the solution.\n*\n*  Arguments\n*  =========\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose = Transpose)\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  A       (input) DOUBLE PRECISION array, dimension (LDA,N)\n*          The original N-by-N matrix A.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  AF      (input) DOUBLE PRECISION array, dimension (LDAF,N)\n*          The factors L and U from the factorization A = P*L*U\n*          as computed by DGETRF.\n*\n*  LDAF    (input) INTEGER\n*          The leading dimension of the array AF.  LDAF >= max(1,N).\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          The pivot indices from DGETRF; for 1<=i<=N, row i of the\n*          matrix was interchanged with row IPIV(i).\n*\n*  B       (input) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input/output) DOUBLE PRECISION array, dimension (LDX,NRHS)\n*          On entry, the solution matrix X, as computed by DGETRS.\n*          On exit, the improved solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) DOUBLE PRECISION array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n*  Internal Parameters\n*  ===================\n*\n*  ITMAX is the maximum number of steps of iterative refinement.\n*\n'),(367,'cgerfs_367.txt','      SUBROUTINE CGERFS( TRANS, N, NRHS, A, LDA, AF, LDAF, IPIV, B, LDB,\n     $                   X, LDX, FERR, BERR, WORK, RWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call CLACN2 in place of CLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          TRANS\n      INTEGER            INFO, LDA, LDAF, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      REAL               BERR( * ), FERR( * ), RWORK( * )\n      COMPLEX            A( LDA, * ), AF( LDAF, * ), B( LDB, * ),\n     $                   WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CGERFS improves the computed solution to a system of linear\n*  equations and provides error bounds and backward error estimates for\n*  the solution.\n*\n*  Arguments\n*  =========\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose)\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  A       (input) COMPLEX array, dimension (LDA,N)\n*          The original N-by-N matrix A.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  AF      (input) COMPLEX array, dimension (LDAF,N)\n*          The factors L and U from the factorization A = P*L*U\n*          as computed by CGETRF.\n*\n*  LDAF    (input) INTEGER\n*          The leading dimension of the array AF.  LDAF >= max(1,N).\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          The pivot indices from CGETRF; for 1<=i<=N, row i of the\n*          matrix was interchanged with row IPIV(i).\n*\n*  B       (input) COMPLEX array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input/output) COMPLEX array, dimension (LDX,NRHS)\n*          On entry, the solution matrix X, as computed by CGETRS.\n*          On exit, the improved solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX array, dimension (2*N)\n*\n*  RWORK   (workspace) REAL array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n*  Internal Parameters\n*  ===================\n*\n*  ITMAX is the maximum number of steps of iterative refinement.\n*\n'),(368,'zgerfs_368.txt','      SUBROUTINE ZGERFS( TRANS, N, NRHS, A, LDA, AF, LDAF, IPIV, B, LDB,\n     $                   X, LDX, FERR, BERR, WORK, RWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call ZLACN2 in place of ZLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          TRANS\n      INTEGER            INFO, LDA, LDAF, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      DOUBLE PRECISION   BERR( * ), FERR( * ), RWORK( * )\n      COMPLEX*16         A( LDA, * ), AF( LDAF, * ), B( LDB, * ),\n     $                   WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZGERFS improves the computed solution to a system of linear\n*  equations and provides error bounds and backward error estimates for\n*  the solution.\n*\n*  Arguments\n*  =========\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose)\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  A       (input) COMPLEX*16 array, dimension (LDA,N)\n*          The original N-by-N matrix A.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  AF      (input) COMPLEX*16 array, dimension (LDAF,N)\n*          The factors L and U from the factorization A = P*L*U\n*          as computed by ZGETRF.\n*\n*  LDAF    (input) INTEGER\n*          The leading dimension of the array AF.  LDAF >= max(1,N).\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          The pivot indices from ZGETRF; for 1<=i<=N, row i of the\n*          matrix was interchanged with row IPIV(i).\n*\n*  B       (input) COMPLEX*16 array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input/output) COMPLEX*16 array, dimension (LDX,NRHS)\n*          On entry, the solution matrix X, as computed by ZGETRS.\n*          On exit, the improved solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n*  Internal Parameters\n*  ===================\n*\n*  ITMAX is the maximum number of steps of iterative refinement.\n*\n'),(369,'sgbrfs_369.txt','      SUBROUTINE SGBRFS( TRANS, N, KL, KU, NRHS, AB, LDAB, AFB, LDAFB,\n     $                   IPIV, B, LDB, X, LDX, FERR, BERR, WORK, IWORK,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call SLACN2 in place of SLACON, 7 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          TRANS\n      INTEGER            INFO, KL, KU, LDAB, LDAFB, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * ), IWORK( * )\n      REAL               AB( LDAB, * ), AFB( LDAFB, * ), B( LDB, * ),\n     $                   BERR( * ), FERR( * ), WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SGBRFS improves the computed solution to a system of linear\n*  equations when the coefficient matrix is banded, and provides\n*  error bounds and backward error estimates for the solution.\n*\n*  Arguments\n*  =========\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose = Transpose)\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KL      (input) INTEGER\n*          The number of subdiagonals within the band of A.  KL >= 0.\n*\n*  KU      (input) INTEGER\n*          The number of superdiagonals within the band of A.  KU >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AB      (input) REAL array, dimension (LDAB,N)\n*          The original band matrix A, stored in rows 1 to KL+KU+1.\n*          The j-th column of A is stored in the j-th column of the\n*          array AB as follows:\n*          AB(ku+1+i-j,j) = A(i,j) for max(1,j-ku)<=i<=min(n,j+kl).\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KL+KU+1.\n*\n*  AFB     (input) REAL array, dimension (LDAFB,N)\n*          Details of the LU factorization of the band matrix A, as\n*          computed by SGBTRF.  U is stored as an upper triangular band\n*          matrix with KL+KU superdiagonals in rows 1 to KL+KU+1, and\n*          the multipliers used during the factorization are stored in\n*          rows KL+KU+2 to 2*KL+KU+1.\n*\n*  LDAFB   (input) INTEGER\n*          The leading dimension of the array AFB.  LDAFB >= 2*KL*KU+1.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          The pivot indices from SGBTRF; for 1<=i<=N, row i of the\n*          matrix was interchanged with row IPIV(i).\n*\n*  B       (input) REAL array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input/output) REAL array, dimension (LDX,NRHS)\n*          On entry, the solution matrix X, as computed by SGBTRS.\n*          On exit, the improved solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) REAL array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n*  Internal Parameters\n*  ===================\n*\n*  ITMAX is the maximum number of steps of iterative refinement.\n*\n'),(370,'dgbrfs_370.txt','      SUBROUTINE DGBRFS( TRANS, N, KL, KU, NRHS, AB, LDAB, AFB, LDAFB,\n     $                   IPIV, B, LDB, X, LDX, FERR, BERR, WORK, IWORK,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call DLACN2 in place of DLACON, 5 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          TRANS\n      INTEGER            INFO, KL, KU, LDAB, LDAFB, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * ), IWORK( * )\n      DOUBLE PRECISION   AB( LDAB, * ), AFB( LDAFB, * ), B( LDB, * ),\n     $                   BERR( * ), FERR( * ), WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DGBRFS improves the computed solution to a system of linear\n*  equations when the coefficient matrix is banded, and provides\n*  error bounds and backward error estimates for the solution.\n*\n*  Arguments\n*  =========\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose = Transpose)\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KL      (input) INTEGER\n*          The number of subdiagonals within the band of A.  KL >= 0.\n*\n*  KU      (input) INTEGER\n*          The number of superdiagonals within the band of A.  KU >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AB      (input) DOUBLE PRECISION array, dimension (LDAB,N)\n*          The original band matrix A, stored in rows 1 to KL+KU+1.\n*          The j-th column of A is stored in the j-th column of the\n*          array AB as follows:\n*          AB(ku+1+i-j,j) = A(i,j) for max(1,j-ku)<=i<=min(n,j+kl).\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KL+KU+1.\n*\n*  AFB     (input) DOUBLE PRECISION array, dimension (LDAFB,N)\n*          Details of the LU factorization of the band matrix A, as\n*          computed by DGBTRF.  U is stored as an upper triangular band\n*          matrix with KL+KU superdiagonals in rows 1 to KL+KU+1, and\n*          the multipliers used during the factorization are stored in\n*          rows KL+KU+2 to 2*KL+KU+1.\n*\n*  LDAFB   (input) INTEGER\n*          The leading dimension of the array AFB.  LDAFB >= 2*KL*KU+1.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          The pivot indices from DGBTRF; for 1<=i<=N, row i of the\n*          matrix was interchanged with row IPIV(i).\n*\n*  B       (input) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input/output) DOUBLE PRECISION array, dimension (LDX,NRHS)\n*          On entry, the solution matrix X, as computed by DGBTRS.\n*          On exit, the improved solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) DOUBLE PRECISION array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n*  Internal Parameters\n*  ===================\n*\n*  ITMAX is the maximum number of steps of iterative refinement.\n*\n'),(371,'cgbrfs_371.txt','      SUBROUTINE CGBRFS( TRANS, N, KL, KU, NRHS, AB, LDAB, AFB, LDAFB,\n     $                   IPIV, B, LDB, X, LDX, FERR, BERR, WORK, RWORK,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call CLACN2 in place of CLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          TRANS\n      INTEGER            INFO, KL, KU, LDAB, LDAFB, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      REAL               BERR( * ), FERR( * ), RWORK( * )\n      COMPLEX            AB( LDAB, * ), AFB( LDAFB, * ), B( LDB, * ),\n     $                   WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CGBRFS improves the computed solution to a system of linear\n*  equations when the coefficient matrix is banded, and provides\n*  error bounds and backward error estimates for the solution.\n*\n*  Arguments\n*  =========\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose)\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KL      (input) INTEGER\n*          The number of subdiagonals within the band of A.  KL >= 0.\n*\n*  KU      (input) INTEGER\n*          The number of superdiagonals within the band of A.  KU >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AB      (input) COMPLEX array, dimension (LDAB,N)\n*          The original band matrix A, stored in rows 1 to KL+KU+1.\n*          The j-th column of A is stored in the j-th column of the\n*          array AB as follows:\n*          AB(ku+1+i-j,j) = A(i,j) for max(1,j-ku)<=i<=min(n,j+kl).\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KL+KU+1.\n*\n*  AFB     (input) COMPLEX array, dimension (LDAFB,N)\n*          Details of the LU factorization of the band matrix A, as\n*          computed by CGBTRF.  U is stored as an upper triangular band\n*          matrix with KL+KU superdiagonals in rows 1 to KL+KU+1, and\n*          the multipliers used during the factorization are stored in\n*          rows KL+KU+2 to 2*KL+KU+1.\n*\n*  LDAFB   (input) INTEGER\n*          The leading dimension of the array AFB.  LDAFB >= 2*KL*KU+1.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          The pivot indices from CGBTRF; for 1<=i<=N, row i of the\n*          matrix was interchanged with row IPIV(i).\n*\n*  B       (input) COMPLEX array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input/output) COMPLEX array, dimension (LDX,NRHS)\n*          On entry, the solution matrix X, as computed by CGBTRS.\n*          On exit, the improved solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX array, dimension (2*N)\n*\n*  RWORK   (workspace) REAL array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n*  Internal Parameters\n*  ===================\n*\n*  ITMAX is the maximum number of steps of iterative refinement.\n*\n'),(372,'zgbrfs_372.txt','      SUBROUTINE ZGBRFS( TRANS, N, KL, KU, NRHS, AB, LDAB, AFB, LDAFB,\n     $                   IPIV, B, LDB, X, LDX, FERR, BERR, WORK, RWORK,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call ZLACN2 in place of ZLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          TRANS\n      INTEGER            INFO, KL, KU, LDAB, LDAFB, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      DOUBLE PRECISION   BERR( * ), FERR( * ), RWORK( * )\n      COMPLEX*16         AB( LDAB, * ), AFB( LDAFB, * ), B( LDB, * ),\n     $                   WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZGBRFS improves the computed solution to a system of linear\n*  equations when the coefficient matrix is banded, and provides\n*  error bounds and backward error estimates for the solution.\n*\n*  Arguments\n*  =========\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose)\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KL      (input) INTEGER\n*          The number of subdiagonals within the band of A.  KL >= 0.\n*\n*  KU      (input) INTEGER\n*          The number of superdiagonals within the band of A.  KU >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AB      (input) COMPLEX*16 array, dimension (LDAB,N)\n*          The original band matrix A, stored in rows 1 to KL+KU+1.\n*          The j-th column of A is stored in the j-th column of the\n*          array AB as follows:\n*          AB(ku+1+i-j,j) = A(i,j) for max(1,j-ku)<=i<=min(n,j+kl).\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KL+KU+1.\n*\n*  AFB     (input) COMPLEX*16 array, dimension (LDAFB,N)\n*          Details of the LU factorization of the band matrix A, as\n*          computed by ZGBTRF.  U is stored as an upper triangular band\n*          matrix with KL+KU superdiagonals in rows 1 to KL+KU+1, and\n*          the multipliers used during the factorization are stored in\n*          rows KL+KU+2 to 2*KL+KU+1.\n*\n*  LDAFB   (input) INTEGER\n*          The leading dimension of the array AFB.  LDAFB >= 2*KL*KU+1.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          The pivot indices from ZGBTRF; for 1<=i<=N, row i of the\n*          matrix was interchanged with row IPIV(i).\n*\n*  B       (input) COMPLEX*16 array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input/output) COMPLEX*16 array, dimension (LDX,NRHS)\n*          On entry, the solution matrix X, as computed by ZGBTRS.\n*          On exit, the improved solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n*  Internal Parameters\n*  ===================\n*\n*  ITMAX is the maximum number of steps of iterative refinement.\n*\n'),(373,'sgtrfs_373.txt','      SUBROUTINE SGTRFS( TRANS, N, NRHS, DL, D, DU, DLF, DF, DUF, DU2,\n     $                   IPIV, B, LDB, X, LDX, FERR, BERR, WORK, IWORK,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call SLACN2 in place of SLACON, 7 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          TRANS\n      INTEGER            INFO, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * ), IWORK( * )\n      REAL               B( LDB, * ), BERR( * ), D( * ), DF( * ),\n     $                   DL( * ), DLF( * ), DU( * ), DU2( * ), DUF( * ),\n     $                   FERR( * ), WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SGTRFS improves the computed solution to a system of linear\n*  equations when the coefficient matrix is tridiagonal, and provides\n*  error bounds and backward error estimates for the solution.\n*\n*  Arguments\n*  =========\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose = Transpose)\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  DL      (input) REAL array, dimension (N-1)\n*          The (n-1) subdiagonal elements of A.\n*\n*  D       (input) REAL array, dimension (N)\n*          The diagonal elements of A.\n*\n*  DU      (input) REAL array, dimension (N-1)\n*          The (n-1) superdiagonal elements of A.\n*\n*  DLF     (input) REAL array, dimension (N-1)\n*          The (n-1) multipliers that define the matrix L from the\n*          LU factorization of A as computed by SGTTRF.\n*\n*  DF      (input) REAL array, dimension (N)\n*          The n diagonal elements of the upper triangular matrix U from\n*          the LU factorization of A.\n*\n*  DUF     (input) REAL array, dimension (N-1)\n*          The (n-1) elements of the first superdiagonal of U.\n*\n*  DU2     (input) REAL array, dimension (N-2)\n*          The (n-2) elements of the second superdiagonal of U.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          The pivot indices; for 1 <= i <= n, row i of the matrix was\n*          interchanged with row IPIV(i).  IPIV(i) will always be either\n*          i or i+1; IPIV(i) = i indicates a row interchange was not\n*          required.\n*\n*  B       (input) REAL array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input/output) REAL array, dimension (LDX,NRHS)\n*          On entry, the solution matrix X, as computed by SGTTRS.\n*          On exit, the improved solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) REAL array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n*  Internal Parameters\n*  ===================\n*\n*  ITMAX is the maximum number of steps of iterative refinement.\n*\n'),(374,'dgtrfs_374.txt','      SUBROUTINE DGTRFS( TRANS, N, NRHS, DL, D, DU, DLF, DF, DUF, DU2,\n     $                   IPIV, B, LDB, X, LDX, FERR, BERR, WORK, IWORK,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call DLACN2 in place of DLACON, 5 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          TRANS\n      INTEGER            INFO, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * ), IWORK( * )\n      DOUBLE PRECISION   B( LDB, * ), BERR( * ), D( * ), DF( * ),\n     $                   DL( * ), DLF( * ), DU( * ), DU2( * ), DUF( * ),\n     $                   FERR( * ), WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DGTRFS improves the computed solution to a system of linear\n*  equations when the coefficient matrix is tridiagonal, and provides\n*  error bounds and backward error estimates for the solution.\n*\n*  Arguments\n*  =========\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose = Transpose)\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  DL      (input) DOUBLE PRECISION array, dimension (N-1)\n*          The (n-1) subdiagonal elements of A.\n*\n*  D       (input) DOUBLE PRECISION array, dimension (N)\n*          The diagonal elements of A.\n*\n*  DU      (input) DOUBLE PRECISION array, dimension (N-1)\n*          The (n-1) superdiagonal elements of A.\n*\n*  DLF     (input) DOUBLE PRECISION array, dimension (N-1)\n*          The (n-1) multipliers that define the matrix L from the\n*          LU factorization of A as computed by DGTTRF.\n*\n*  DF      (input) DOUBLE PRECISION array, dimension (N)\n*          The n diagonal elements of the upper triangular matrix U from\n*          the LU factorization of A.\n*\n*  DUF     (input) DOUBLE PRECISION array, dimension (N-1)\n*          The (n-1) elements of the first superdiagonal of U.\n*\n*  DU2     (input) DOUBLE PRECISION array, dimension (N-2)\n*          The (n-2) elements of the second superdiagonal of U.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          The pivot indices; for 1 <= i <= n, row i of the matrix was\n*          interchanged with row IPIV(i).  IPIV(i) will always be either\n*          i or i+1; IPIV(i) = i indicates a row interchange was not\n*          required.\n*\n*  B       (input) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input/output) DOUBLE PRECISION array, dimension (LDX,NRHS)\n*          On entry, the solution matrix X, as computed by DGTTRS.\n*          On exit, the improved solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) DOUBLE PRECISION array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n*  Internal Parameters\n*  ===================\n*\n*  ITMAX is the maximum number of steps of iterative refinement.\n*\n'),(375,'cgtrfs_375.txt','      SUBROUTINE CGTRFS( TRANS, N, NRHS, DL, D, DU, DLF, DF, DUF, DU2,\n     $                   IPIV, B, LDB, X, LDX, FERR, BERR, WORK, RWORK,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call CLACN2 in place of CLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          TRANS\n      INTEGER            INFO, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      REAL               BERR( * ), FERR( * ), RWORK( * )\n      COMPLEX            B( LDB, * ), D( * ), DF( * ), DL( * ),\n     $                   DLF( * ), DU( * ), DU2( * ), DUF( * ),\n     $                   WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CGTRFS improves the computed solution to a system of linear\n*  equations when the coefficient matrix is tridiagonal, and provides\n*  error bounds and backward error estimates for the solution.\n*\n*  Arguments\n*  =========\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose)\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  DL      (input) COMPLEX array, dimension (N-1)\n*          The (n-1) subdiagonal elements of A.\n*\n*  D       (input) COMPLEX array, dimension (N)\n*          The diagonal elements of A.\n*\n*  DU      (input) COMPLEX array, dimension (N-1)\n*          The (n-1) superdiagonal elements of A.\n*\n*  DLF     (input) COMPLEX array, dimension (N-1)\n*          The (n-1) multipliers that define the matrix L from the\n*          LU factorization of A as computed by CGTTRF.\n*\n*  DF      (input) COMPLEX array, dimension (N)\n*          The n diagonal elements of the upper triangular matrix U from\n*          the LU factorization of A.\n*\n*  DUF     (input) COMPLEX array, dimension (N-1)\n*          The (n-1) elements of the first superdiagonal of U.\n*\n*  DU2     (input) COMPLEX array, dimension (N-2)\n*          The (n-2) elements of the second superdiagonal of U.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          The pivot indices; for 1 <= i <= n, row i of the matrix was\n*          interchanged with row IPIV(i).  IPIV(i) will always be either\n*          i or i+1; IPIV(i) = i indicates a row interchange was not\n*          required.\n*\n*  B       (input) COMPLEX array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input/output) COMPLEX array, dimension (LDX,NRHS)\n*          On entry, the solution matrix X, as computed by CGTTRS.\n*          On exit, the improved solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX array, dimension (2*N)\n*\n*  RWORK   (workspace) REAL array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n*  Internal Parameters\n*  ===================\n*\n*  ITMAX is the maximum number of steps of iterative refinement.\n*\n'),(376,'zgtrfs_376.txt','      SUBROUTINE ZGTRFS( TRANS, N, NRHS, DL, D, DU, DLF, DF, DUF, DU2,\n     $                   IPIV, B, LDB, X, LDX, FERR, BERR, WORK, RWORK,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call ZLACN2 in place of ZLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          TRANS\n      INTEGER            INFO, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      DOUBLE PRECISION   BERR( * ), FERR( * ), RWORK( * )\n      COMPLEX*16         B( LDB, * ), D( * ), DF( * ), DL( * ),\n     $                   DLF( * ), DU( * ), DU2( * ), DUF( * ),\n     $                   WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZGTRFS improves the computed solution to a system of linear\n*  equations when the coefficient matrix is tridiagonal, and provides\n*  error bounds and backward error estimates for the solution.\n*\n*  Arguments\n*  =========\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose)\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  DL      (input) COMPLEX*16 array, dimension (N-1)\n*          The (n-1) subdiagonal elements of A.\n*\n*  D       (input) COMPLEX*16 array, dimension (N)\n*          The diagonal elements of A.\n*\n*  DU      (input) COMPLEX*16 array, dimension (N-1)\n*          The (n-1) superdiagonal elements of A.\n*\n*  DLF     (input) COMPLEX*16 array, dimension (N-1)\n*          The (n-1) multipliers that define the matrix L from the\n*          LU factorization of A as computed by ZGTTRF.\n*\n*  DF      (input) COMPLEX*16 array, dimension (N)\n*          The n diagonal elements of the upper triangular matrix U from\n*          the LU factorization of A.\n*\n*  DUF     (input) COMPLEX*16 array, dimension (N-1)\n*          The (n-1) elements of the first superdiagonal of U.\n*\n*  DU2     (input) COMPLEX*16 array, dimension (N-2)\n*          The (n-2) elements of the second superdiagonal of U.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          The pivot indices; for 1 <= i <= n, row i of the matrix was\n*          interchanged with row IPIV(i).  IPIV(i) will always be either\n*          i or i+1; IPIV(i) = i indicates a row interchange was not\n*          required.\n*\n*  B       (input) COMPLEX*16 array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input/output) COMPLEX*16 array, dimension (LDX,NRHS)\n*          On entry, the solution matrix X, as computed by ZGTTRS.\n*          On exit, the improved solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n*  Internal Parameters\n*  ===================\n*\n*  ITMAX is the maximum number of steps of iterative refinement.\n*\n'),(377,'cherfs_377.txt','      SUBROUTINE CHERFS( UPLO, N, NRHS, A, LDA, AF, LDAF, IPIV, B, LDB,\n     $                   X, LDX, FERR, BERR, WORK, RWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call CLACN2 in place of CLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, LDAF, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      REAL               BERR( * ), FERR( * ), RWORK( * )\n      COMPLEX            A( LDA, * ), AF( LDAF, * ), B( LDB, * ),\n     $                   WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CHERFS improves the computed solution to a system of linear\n*  equations when the coefficient matrix is Hermitian indefinite, and\n*  provides error bounds and backward error estimates for the solution.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  A       (input) COMPLEX array, dimension (LDA,N)\n*          The Hermitian matrix A.  If UPLO = \'U\', the leading N-by-N\n*          upper triangular part of A contains the upper triangular part\n*          of the matrix A, and the strictly lower triangular part of A\n*          is not referenced.  If UPLO = \'L\', the leading N-by-N lower\n*          triangular part of A contains the lower triangular part of\n*          the matrix A, and the strictly upper triangular part of A is\n*          not referenced.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  AF      (input) COMPLEX array, dimension (LDAF,N)\n*          The factored form of the matrix A.  AF contains the block\n*          diagonal matrix D and the multipliers used to obtain the\n*          factor U or L from the factorization A = U*D*U**H or\n*          A = L*D*L**H as computed by CHETRF.\n*\n*  LDAF    (input) INTEGER\n*          The leading dimension of the array AF.  LDAF >= max(1,N).\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by CHETRF.\n*\n*  B       (input) COMPLEX array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input/output) COMPLEX array, dimension (LDX,NRHS)\n*          On entry, the solution matrix X, as computed by CHETRS.\n*          On exit, the improved solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX array, dimension (2*N)\n*\n*  RWORK   (workspace) REAL array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n*  Internal Parameters\n*  ===================\n*\n*  ITMAX is the maximum number of steps of iterative refinement.\n*\n'),(378,'zherfs_378.txt','      SUBROUTINE ZHERFS( UPLO, N, NRHS, A, LDA, AF, LDAF, IPIV, B, LDB,\n     $                   X, LDX, FERR, BERR, WORK, RWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call ZLACN2 in place of ZLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, LDAF, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      DOUBLE PRECISION   BERR( * ), FERR( * ), RWORK( * )\n      COMPLEX*16         A( LDA, * ), AF( LDAF, * ), B( LDB, * ),\n     $                   WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZHERFS improves the computed solution to a system of linear\n*  equations when the coefficient matrix is Hermitian indefinite, and\n*  provides error bounds and backward error estimates for the solution.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  A       (input) COMPLEX*16 array, dimension (LDA,N)\n*          The Hermitian matrix A.  If UPLO = \'U\', the leading N-by-N\n*          upper triangular part of A contains the upper triangular part\n*          of the matrix A, and the strictly lower triangular part of A\n*          is not referenced.  If UPLO = \'L\', the leading N-by-N lower\n*          triangular part of A contains the lower triangular part of\n*          the matrix A, and the strictly upper triangular part of A is\n*          not referenced.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  AF      (input) COMPLEX*16 array, dimension (LDAF,N)\n*          The factored form of the matrix A.  AF contains the block\n*          diagonal matrix D and the multipliers used to obtain the\n*          factor U or L from the factorization A = U*D*U**H or\n*          A = L*D*L**H as computed by ZHETRF.\n*\n*  LDAF    (input) INTEGER\n*          The leading dimension of the array AF.  LDAF >= max(1,N).\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by ZHETRF.\n*\n*  B       (input) COMPLEX*16 array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input/output) COMPLEX*16 array, dimension (LDX,NRHS)\n*          On entry, the solution matrix X, as computed by ZHETRS.\n*          On exit, the improved solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n*  Internal Parameters\n*  ===================\n*\n*  ITMAX is the maximum number of steps of iterative refinement.\n*\n'),(379,'chprfs_379.txt','      SUBROUTINE CHPRFS( UPLO, N, NRHS, AP, AFP, IPIV, B, LDB, X, LDX,\n     $                   FERR, BERR, WORK, RWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call CLACN2 in place of CLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      REAL               BERR( * ), FERR( * ), RWORK( * )\n      COMPLEX            AFP( * ), AP( * ), B( LDB, * ), WORK( * ),\n     $                   X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CHPRFS improves the computed solution to a system of linear\n*  equations when the coefficient matrix is Hermitian indefinite\n*  and packed, and provides error bounds and backward error estimates\n*  for the solution.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AP      (input) COMPLEX array, dimension (N*(N+1)/2)\n*          The upper or lower triangle of the Hermitian matrix A, packed\n*          columnwise in a linear array.  The j-th column of A is stored\n*          in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*\n*  AFP     (input) COMPLEX array, dimension (N*(N+1)/2)\n*          The factored form of the matrix A.  AFP contains the block\n*          diagonal matrix D and the multipliers used to obtain the\n*          factor U or L from the factorization A = U*D*U**H or\n*          A = L*D*L**H as computed by CHPTRF, stored as a packed\n*          triangular matrix.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by CHPTRF.\n*\n*  B       (input) COMPLEX array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input/output) COMPLEX array, dimension (LDX,NRHS)\n*          On entry, the solution matrix X, as computed by CHPTRS.\n*          On exit, the improved solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX array, dimension (2*N)\n*\n*  RWORK   (workspace) REAL array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n*  Internal Parameters\n*  ===================\n*\n*  ITMAX is the maximum number of steps of iterative refinement.\n*\n'),(380,'zhprfs_380.txt','      SUBROUTINE ZHPRFS( UPLO, N, NRHS, AP, AFP, IPIV, B, LDB, X, LDX,\n     $                   FERR, BERR, WORK, RWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call ZLACN2 in place of ZLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      DOUBLE PRECISION   BERR( * ), FERR( * ), RWORK( * )\n      COMPLEX*16         AFP( * ), AP( * ), B( LDB, * ), WORK( * ),\n     $                   X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZHPRFS improves the computed solution to a system of linear\n*  equations when the coefficient matrix is Hermitian indefinite\n*  and packed, and provides error bounds and backward error estimates\n*  for the solution.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AP      (input) COMPLEX*16 array, dimension (N*(N+1)/2)\n*          The upper or lower triangle of the Hermitian matrix A, packed\n*          columnwise in a linear array.  The j-th column of A is stored\n*          in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*\n*  AFP     (input) COMPLEX*16 array, dimension (N*(N+1)/2)\n*          The factored form of the matrix A.  AFP contains the block\n*          diagonal matrix D and the multipliers used to obtain the\n*          factor U or L from the factorization A = U*D*U**H or\n*          A = L*D*L**H as computed by ZHPTRF, stored as a packed\n*          triangular matrix.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by ZHPTRF.\n*\n*  B       (input) COMPLEX*16 array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input/output) COMPLEX*16 array, dimension (LDX,NRHS)\n*          On entry, the solution matrix X, as computed by ZHPTRS.\n*          On exit, the improved solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n*  Internal Parameters\n*  ===================\n*\n*  ITMAX is the maximum number of steps of iterative refinement.\n*\n'),(381,'sporfs_381.txt','      SUBROUTINE SPORFS( UPLO, N, NRHS, A, LDA, AF, LDAF, B, LDB, X,\n     $                   LDX, FERR, BERR, WORK, IWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call SLACN2 in place of SLACON, 7 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, LDAF, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      REAL               A( LDA, * ), AF( LDAF, * ), B( LDB, * ),\n     $                   BERR( * ), FERR( * ), WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SPORFS improves the computed solution to a system of linear\n*  equations when the coefficient matrix is symmetric positive definite,\n*  and provides error bounds and backward error estimates for the\n*  solution.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  A       (input) REAL array, dimension (LDA,N)\n*          The symmetric matrix A.  If UPLO = \'U\', the leading N-by-N\n*          upper triangular part of A contains the upper triangular part\n*          of the matrix A, and the strictly lower triangular part of A\n*          is not referenced.  If UPLO = \'L\', the leading N-by-N lower\n*          triangular part of A contains the lower triangular part of\n*          the matrix A, and the strictly upper triangular part of A is\n*          not referenced.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  AF      (input) REAL array, dimension (LDAF,N)\n*          The triangular factor U or L from the Cholesky factorization\n*          A = U**T*U or A = L*L**T, as computed by SPOTRF.\n*\n*  LDAF    (input) INTEGER\n*          The leading dimension of the array AF.  LDAF >= max(1,N).\n*\n*  B       (input) REAL array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input/output) REAL array, dimension (LDX,NRHS)\n*          On entry, the solution matrix X, as computed by SPOTRS.\n*          On exit, the improved solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) REAL array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n*  Internal Parameters\n*  ===================\n*\n*  ITMAX is the maximum number of steps of iterative refinement.\n*\n'),(382,'dporfs_382.txt','      SUBROUTINE DPORFS( UPLO, N, NRHS, A, LDA, AF, LDAF, B, LDB, X,\n     $                   LDX, FERR, BERR, WORK, IWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call DLACN2 in place of DLACON, 5 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, LDAF, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      DOUBLE PRECISION   A( LDA, * ), AF( LDAF, * ), B( LDB, * ),\n     $                   BERR( * ), FERR( * ), WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DPORFS improves the computed solution to a system of linear\n*  equations when the coefficient matrix is symmetric positive definite,\n*  and provides error bounds and backward error estimates for the\n*  solution.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  A       (input) DOUBLE PRECISION array, dimension (LDA,N)\n*          The symmetric matrix A.  If UPLO = \'U\', the leading N-by-N\n*          upper triangular part of A contains the upper triangular part\n*          of the matrix A, and the strictly lower triangular part of A\n*          is not referenced.  If UPLO = \'L\', the leading N-by-N lower\n*          triangular part of A contains the lower triangular part of\n*          the matrix A, and the strictly upper triangular part of A is\n*          not referenced.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  AF      (input) DOUBLE PRECISION array, dimension (LDAF,N)\n*          The triangular factor U or L from the Cholesky factorization\n*          A = U**T*U or A = L*L**T, as computed by DPOTRF.\n*\n*  LDAF    (input) INTEGER\n*          The leading dimension of the array AF.  LDAF >= max(1,N).\n*\n*  B       (input) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input/output) DOUBLE PRECISION array, dimension (LDX,NRHS)\n*          On entry, the solution matrix X, as computed by DPOTRS.\n*          On exit, the improved solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) DOUBLE PRECISION array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n*  Internal Parameters\n*  ===================\n*\n*  ITMAX is the maximum number of steps of iterative refinement.\n*\n'),(383,'cporfs_383.txt','      SUBROUTINE CPORFS( UPLO, N, NRHS, A, LDA, AF, LDAF, B, LDB, X,\n     $                   LDX, FERR, BERR, WORK, RWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call CLACN2 in place of CLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, LDAF, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      REAL               BERR( * ), FERR( * ), RWORK( * )\n      COMPLEX            A( LDA, * ), AF( LDAF, * ), B( LDB, * ),\n     $                   WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CPORFS improves the computed solution to a system of linear\n*  equations when the coefficient matrix is Hermitian positive definite,\n*  and provides error bounds and backward error estimates for the\n*  solution.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  A       (input) COMPLEX array, dimension (LDA,N)\n*          The Hermitian matrix A.  If UPLO = \'U\', the leading N-by-N\n*          upper triangular part of A contains the upper triangular part\n*          of the matrix A, and the strictly lower triangular part of A\n*          is not referenced.  If UPLO = \'L\', the leading N-by-N lower\n*          triangular part of A contains the lower triangular part of\n*          the matrix A, and the strictly upper triangular part of A is\n*          not referenced.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  AF      (input) COMPLEX array, dimension (LDAF,N)\n*          The triangular factor U or L from the Cholesky factorization\n*          A = U**H*U or A = L*L**H, as computed by CPOTRF.\n*\n*  LDAF    (input) INTEGER\n*          The leading dimension of the array AF.  LDAF >= max(1,N).\n*\n*  B       (input) COMPLEX array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input/output) COMPLEX array, dimension (LDX,NRHS)\n*          On entry, the solution matrix X, as computed by CPOTRS.\n*          On exit, the improved solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX array, dimension (2*N)\n*\n*  RWORK   (workspace) REAL array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n*  Internal Parameters\n*  ===================\n*\n*  ITMAX is the maximum number of steps of iterative refinement.\n*\n'),(384,'zporfs_384.txt','      SUBROUTINE ZPORFS( UPLO, N, NRHS, A, LDA, AF, LDAF, B, LDB, X,\n     $                   LDX, FERR, BERR, WORK, RWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call ZLACN2 in place of ZLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, LDAF, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   BERR( * ), FERR( * ), RWORK( * )\n      COMPLEX*16         A( LDA, * ), AF( LDAF, * ), B( LDB, * ),\n     $                   WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZPORFS improves the computed solution to a system of linear\n*  equations when the coefficient matrix is Hermitian positive definite,\n*  and provides error bounds and backward error estimates for the\n*  solution.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  A       (input) COMPLEX*16 array, dimension (LDA,N)\n*          The Hermitian matrix A.  If UPLO = \'U\', the leading N-by-N\n*          upper triangular part of A contains the upper triangular part\n*          of the matrix A, and the strictly lower triangular part of A\n*          is not referenced.  If UPLO = \'L\', the leading N-by-N lower\n*          triangular part of A contains the lower triangular part of\n*          the matrix A, and the strictly upper triangular part of A is\n*          not referenced.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  AF      (input) COMPLEX*16 array, dimension (LDAF,N)\n*          The triangular factor U or L from the Cholesky factorization\n*          A = U**H*U or A = L*L**H, as computed by ZPOTRF.\n*\n*  LDAF    (input) INTEGER\n*          The leading dimension of the array AF.  LDAF >= max(1,N).\n*\n*  B       (input) COMPLEX*16 array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input/output) COMPLEX*16 array, dimension (LDX,NRHS)\n*          On entry, the solution matrix X, as computed by ZPOTRS.\n*          On exit, the improved solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n*  Internal Parameters\n*  ===================\n*\n*  ITMAX is the maximum number of steps of iterative refinement.\n*\n'),(385,'spbrfs_385.txt','      SUBROUTINE SPBRFS( UPLO, N, KD, NRHS, AB, LDAB, AFB, LDAFB, B,\n     $                   LDB, X, LDX, FERR, BERR, WORK, IWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call SLACN2 in place of SLACON, 7 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, KD, LDAB, LDAFB, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      REAL               AB( LDAB, * ), AFB( LDAFB, * ), B( LDB, * ),\n     $                   BERR( * ), FERR( * ), WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SPBRFS improves the computed solution to a system of linear\n*  equations when the coefficient matrix is symmetric positive definite\n*  and banded, and provides error bounds and backward error estimates\n*  for the solution.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KD >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AB      (input) REAL array, dimension (LDAB,N)\n*          The upper or lower triangle of the symmetric band matrix A,\n*          stored in the first KD+1 rows of the array.  The j-th column\n*          of A is stored in the j-th column of the array AB as follows:\n*          if UPLO = \'U\', AB(kd+1+i-j,j) = A(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+kd).\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD+1.\n*\n*  AFB     (input) REAL array, dimension (LDAFB,N)\n*          The triangular factor U or L from the Cholesky factorization\n*          A = U**T*U or A = L*L**T of the band matrix A as computed by\n*          SPBTRF, in the same storage format as A (see AB).\n*\n*  LDAFB   (input) INTEGER\n*          The leading dimension of the array AFB.  LDAFB >= KD+1.\n*\n*  B       (input) REAL array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input/output) REAL array, dimension (LDX,NRHS)\n*          On entry, the solution matrix X, as computed by SPBTRS.\n*          On exit, the improved solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) REAL array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n*  Internal Parameters\n*  ===================\n*\n*  ITMAX is the maximum number of steps of iterative refinement.\n*\n'),(386,'dpbrfs_386.txt','      SUBROUTINE DPBRFS( UPLO, N, KD, NRHS, AB, LDAB, AFB, LDAFB, B,\n     $                   LDB, X, LDX, FERR, BERR, WORK, IWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call DLACN2 in place of DLACON, 5 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, KD, LDAB, LDAFB, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      DOUBLE PRECISION   AB( LDAB, * ), AFB( LDAFB, * ), B( LDB, * ),\n     $                   BERR( * ), FERR( * ), WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DPBRFS improves the computed solution to a system of linear\n*  equations when the coefficient matrix is symmetric positive definite\n*  and banded, and provides error bounds and backward error estimates\n*  for the solution.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KD >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AB      (input) DOUBLE PRECISION array, dimension (LDAB,N)\n*          The upper or lower triangle of the symmetric band matrix A,\n*          stored in the first KD+1 rows of the array.  The j-th column\n*          of A is stored in the j-th column of the array AB as follows:\n*          if UPLO = \'U\', AB(kd+1+i-j,j) = A(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+kd).\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD+1.\n*\n*  AFB     (input) DOUBLE PRECISION array, dimension (LDAFB,N)\n*          The triangular factor U or L from the Cholesky factorization\n*          A = U**T*U or A = L*L**T of the band matrix A as computed by\n*          DPBTRF, in the same storage format as A (see AB).\n*\n*  LDAFB   (input) INTEGER\n*          The leading dimension of the array AFB.  LDAFB >= KD+1.\n*\n*  B       (input) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input/output) DOUBLE PRECISION array, dimension (LDX,NRHS)\n*          On entry, the solution matrix X, as computed by DPBTRS.\n*          On exit, the improved solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) DOUBLE PRECISION array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n*  Internal Parameters\n*  ===================\n*\n*  ITMAX is the maximum number of steps of iterative refinement.\n*\n'),(387,'cpbrfs_387.txt','      SUBROUTINE CPBRFS( UPLO, N, KD, NRHS, AB, LDAB, AFB, LDAFB, B,\n     $                   LDB, X, LDX, FERR, BERR, WORK, RWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call CLACN2 in place of CLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, KD, LDAB, LDAFB, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      REAL               BERR( * ), FERR( * ), RWORK( * )\n      COMPLEX            AB( LDAB, * ), AFB( LDAFB, * ), B( LDB, * ),\n     $                   WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CPBRFS improves the computed solution to a system of linear\n*  equations when the coefficient matrix is Hermitian positive definite\n*  and banded, and provides error bounds and backward error estimates\n*  for the solution.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KD >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AB      (input) COMPLEX array, dimension (LDAB,N)\n*          The upper or lower triangle of the Hermitian band matrix A,\n*          stored in the first KD+1 rows of the array.  The j-th column\n*          of A is stored in the j-th column of the array AB as follows:\n*          if UPLO = \'U\', AB(kd+1+i-j,j) = A(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+kd).\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD+1.\n*\n*  AFB     (input) COMPLEX array, dimension (LDAFB,N)\n*          The triangular factor U or L from the Cholesky factorization\n*          A = U**H*U or A = L*L**H of the band matrix A as computed by\n*          CPBTRF, in the same storage format as A (see AB).\n*\n*  LDAFB   (input) INTEGER\n*          The leading dimension of the array AFB.  LDAFB >= KD+1.\n*\n*  B       (input) COMPLEX array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input/output) COMPLEX array, dimension (LDX,NRHS)\n*          On entry, the solution matrix X, as computed by CPBTRS.\n*          On exit, the improved solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX array, dimension (2*N)\n*\n*  RWORK   (workspace) REAL array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n*  Internal Parameters\n*  ===================\n*\n*  ITMAX is the maximum number of steps of iterative refinement.\n*\n'),(388,'zpbrfs_388.txt','      SUBROUTINE ZPBRFS( UPLO, N, KD, NRHS, AB, LDAB, AFB, LDAFB, B,\n     $                   LDB, X, LDX, FERR, BERR, WORK, RWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call ZLACN2 in place of ZLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, KD, LDAB, LDAFB, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   BERR( * ), FERR( * ), RWORK( * )\n      COMPLEX*16         AB( LDAB, * ), AFB( LDAFB, * ), B( LDB, * ),\n     $                   WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZPBRFS improves the computed solution to a system of linear\n*  equations when the coefficient matrix is Hermitian positive definite\n*  and banded, and provides error bounds and backward error estimates\n*  for the solution.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KD >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AB      (input) DOUBLE PRECISION array, dimension (LDAB,N)\n*          The upper or lower triangle of the Hermitian band matrix A,\n*          stored in the first KD+1 rows of the array.  The j-th column\n*          of A is stored in the j-th column of the array AB as follows:\n*          if UPLO = \'U\', AB(kd+1+i-j,j) = A(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+kd).\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD+1.\n*\n*  AFB     (input) COMPLEX*16 array, dimension (LDAFB,N)\n*          The triangular factor U or L from the Cholesky factorization\n*          A = U**H*U or A = L*L**H of the band matrix A as computed by\n*          ZPBTRF, in the same storage format as A (see AB).\n*\n*  LDAFB   (input) INTEGER\n*          The leading dimension of the array AFB.  LDAFB >= KD+1.\n*\n*  B       (input) COMPLEX*16 array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input/output) COMPLEX*16 array, dimension (LDX,NRHS)\n*          On entry, the solution matrix X, as computed by ZPBTRS.\n*          On exit, the improved solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n*  Internal Parameters\n*  ===================\n*\n*  ITMAX is the maximum number of steps of iterative refinement.\n*\n'),(389,'spprfs_389.txt','      SUBROUTINE SPPRFS( UPLO, N, NRHS, AP, AFP, B, LDB, X, LDX, FERR,\n     $                   BERR, WORK, IWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call SLACN2 in place of SLACON, 7 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      REAL               AFP( * ), AP( * ), B( LDB, * ), BERR( * ),\n     $                   FERR( * ), WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SPPRFS improves the computed solution to a system of linear\n*  equations when the coefficient matrix is symmetric positive definite\n*  and packed, and provides error bounds and backward error estimates\n*  for the solution.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AP      (input) REAL array, dimension (N*(N+1)/2)\n*          The upper or lower triangle of the symmetric matrix A, packed\n*          columnwise in a linear array.  The j-th column of A is stored\n*          in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = A(i,j) for j<=i<=n.\n*\n*  AFP     (input) REAL array, dimension (N*(N+1)/2)\n*          The triangular factor U or L from the Cholesky factorization\n*          A = U**T*U or A = L*L**T, as computed by SPPTRF/CPPTRF,\n*          packed columnwise in a linear array in the same format as A\n*          (see AP).\n*\n*  B       (input) REAL array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input/output) REAL array, dimension (LDX,NRHS)\n*          On entry, the solution matrix X, as computed by SPPTRS.\n*          On exit, the improved solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) REAL array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n*  Internal Parameters\n*  ===================\n*\n*  ITMAX is the maximum number of steps of iterative refinement.\n*\n'),(390,'dpprfs_390.txt','      SUBROUTINE DPPRFS( UPLO, N, NRHS, AP, AFP, B, LDB, X, LDX, FERR,\n     $                   BERR, WORK, IWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call DLACN2 in place of DLACON, 5 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      DOUBLE PRECISION   AFP( * ), AP( * ), B( LDB, * ), BERR( * ),\n     $                   FERR( * ), WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DPPRFS improves the computed solution to a system of linear\n*  equations when the coefficient matrix is symmetric positive definite\n*  and packed, and provides error bounds and backward error estimates\n*  for the solution.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AP      (input) DOUBLE PRECISION array, dimension (N*(N+1)/2)\n*          The upper or lower triangle of the symmetric matrix A, packed\n*          columnwise in a linear array.  The j-th column of A is stored\n*          in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = A(i,j) for j<=i<=n.\n*\n*  AFP     (input) DOUBLE PRECISION array, dimension (N*(N+1)/2)\n*          The triangular factor U or L from the Cholesky factorization\n*          A = U**T*U or A = L*L**T, as computed by DPPTRF/ZPPTRF,\n*          packed columnwise in a linear array in the same format as A\n*          (see AP).\n*\n*  B       (input) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input/output) DOUBLE PRECISION array, dimension (LDX,NRHS)\n*          On entry, the solution matrix X, as computed by DPPTRS.\n*          On exit, the improved solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) DOUBLE PRECISION array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n*  Internal Parameters\n*  ===================\n*\n*  ITMAX is the maximum number of steps of iterative refinement.\n*\n'),(391,'cpprfs_391.txt','      SUBROUTINE CPPRFS( UPLO, N, NRHS, AP, AFP, B, LDB, X, LDX, FERR,\n     $                   BERR, WORK, RWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call CLACN2 in place of CLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      REAL               BERR( * ), FERR( * ), RWORK( * )\n      COMPLEX            AFP( * ), AP( * ), B( LDB, * ), WORK( * ),\n     $                   X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CPPRFS improves the computed solution to a system of linear\n*  equations when the coefficient matrix is Hermitian positive definite\n*  and packed, and provides error bounds and backward error estimates\n*  for the solution.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AP      (input) COMPLEX array, dimension (N*(N+1)/2)\n*          The upper or lower triangle of the Hermitian matrix A, packed\n*          columnwise in a linear array.  The j-th column of A is stored\n*          in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = A(i,j) for j<=i<=n.\n*\n*  AFP     (input) COMPLEX array, dimension (N*(N+1)/2)\n*          The triangular factor U or L from the Cholesky factorization\n*          A = U**H*U or A = L*L**H, as computed by SPPTRF/CPPTRF,\n*          packed columnwise in a linear array in the same format as A\n*          (see AP).\n*\n*  B       (input) COMPLEX array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input/output) COMPLEX array, dimension (LDX,NRHS)\n*          On entry, the solution matrix X, as computed by CPPTRS.\n*          On exit, the improved solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX array, dimension (2*N)\n*\n*  RWORK   (workspace) REAL array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n*  Internal Parameters\n*  ===================\n*\n*  ITMAX is the maximum number of steps of iterative refinement.\n*\n'),(392,'zpprfs_392.txt','      SUBROUTINE ZPPRFS( UPLO, N, NRHS, AP, AFP, B, LDB, X, LDX, FERR,\n     $                   BERR, WORK, RWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call ZLACN2 in place of ZLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   BERR( * ), FERR( * ), RWORK( * )\n      COMPLEX*16         AFP( * ), AP( * ), B( LDB, * ), WORK( * ),\n     $                   X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZPPRFS improves the computed solution to a system of linear\n*  equations when the coefficient matrix is Hermitian positive definite\n*  and packed, and provides error bounds and backward error estimates\n*  for the solution.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AP      (input) COMPLEX*16 array, dimension (N*(N+1)/2)\n*          The upper or lower triangle of the Hermitian matrix A, packed\n*          columnwise in a linear array.  The j-th column of A is stored\n*          in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = A(i,j) for j<=i<=n.\n*\n*  AFP     (input) COMPLEX*16 array, dimension (N*(N+1)/2)\n*          The triangular factor U or L from the Cholesky factorization\n*          A = U**H*U or A = L*L**H, as computed by DPPTRF/ZPPTRF,\n*          packed columnwise in a linear array in the same format as A\n*          (see AP).\n*\n*  B       (input) COMPLEX*16 array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input/output) COMPLEX*16 array, dimension (LDX,NRHS)\n*          On entry, the solution matrix X, as computed by ZPPTRS.\n*          On exit, the improved solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n*  Internal Parameters\n*  ===================\n*\n*  ITMAX is the maximum number of steps of iterative refinement.\n*\n'),(393,'sptrfs_393.txt','      SUBROUTINE SPTRFS( N, NRHS, D, E, DF, EF, B, LDB, X, LDX, FERR,\n     $                   BERR, WORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      REAL               B( LDB, * ), BERR( * ), D( * ), DF( * ),\n     $                   E( * ), EF( * ), FERR( * ), WORK( * ),\n     $                   X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SPTRFS improves the computed solution to a system of linear\n*  equations when the coefficient matrix is symmetric positive definite\n*  and tridiagonal, and provides error bounds and backward error\n*  estimates for the solution.\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  D       (input) REAL array, dimension (N)\n*          The n diagonal elements of the tridiagonal matrix A.\n*\n*  E       (input) REAL array, dimension (N-1)\n*          The (n-1) subdiagonal elements of the tridiagonal matrix A.\n*\n*  DF      (input) REAL array, dimension (N)\n*          The n diagonal elements of the diagonal matrix D from the\n*          factorization computed by SPTTRF.\n*\n*  EF      (input) REAL array, dimension (N-1)\n*          The (n-1) subdiagonal elements of the unit bidiagonal factor\n*          L from the factorization computed by SPTTRF.\n*\n*  B       (input) REAL array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input/output) REAL array, dimension (LDX,NRHS)\n*          On entry, the solution matrix X, as computed by SPTTRS.\n*          On exit, the improved solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) REAL array, dimension (2*N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n*  Internal Parameters\n*  ===================\n*\n*  ITMAX is the maximum number of steps of iterative refinement.\n*\n'),(394,'dptrfs_394.txt','      SUBROUTINE DPTRFS( N, NRHS, D, E, DF, EF, B, LDB, X, LDX, FERR,\n     $                   BERR, WORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   B( LDB, * ), BERR( * ), D( * ), DF( * ),\n     $                   E( * ), EF( * ), FERR( * ), WORK( * ),\n     $                   X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DPTRFS improves the computed solution to a system of linear\n*  equations when the coefficient matrix is symmetric positive definite\n*  and tridiagonal, and provides error bounds and backward error\n*  estimates for the solution.\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  D       (input) DOUBLE PRECISION array, dimension (N)\n*          The n diagonal elements of the tridiagonal matrix A.\n*\n*  E       (input) DOUBLE PRECISION array, dimension (N-1)\n*          The (n-1) subdiagonal elements of the tridiagonal matrix A.\n*\n*  DF      (input) DOUBLE PRECISION array, dimension (N)\n*          The n diagonal elements of the diagonal matrix D from the\n*          factorization computed by DPTTRF.\n*\n*  EF      (input) DOUBLE PRECISION array, dimension (N-1)\n*          The (n-1) subdiagonal elements of the unit bidiagonal factor\n*          L from the factorization computed by DPTTRF.\n*\n*  B       (input) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input/output) DOUBLE PRECISION array, dimension (LDX,NRHS)\n*          On entry, the solution matrix X, as computed by DPTTRS.\n*          On exit, the improved solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) DOUBLE PRECISION array, dimension (2*N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n*  Internal Parameters\n*  ===================\n*\n*  ITMAX is the maximum number of steps of iterative refinement.\n*\n'),(395,'cptrfs_395.txt','      SUBROUTINE CPTRFS( UPLO, N, NRHS, D, E, DF, EF, B, LDB, X, LDX,\n     $                   FERR, BERR, WORK, RWORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      REAL               BERR( * ), D( * ), DF( * ), FERR( * ),\n     $                   RWORK( * )\n      COMPLEX            B( LDB, * ), E( * ), EF( * ), WORK( * ),\n     $                   X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CPTRFS improves the computed solution to a system of linear\n*  equations when the coefficient matrix is Hermitian positive definite\n*  and tridiagonal, and provides error bounds and backward error\n*  estimates for the solution.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          Specifies whether the superdiagonal or the subdiagonal of the\n*          tridiagonal matrix A is stored and the form of the\n*          factorization:\n*          = \'U\':  E is the superdiagonal of A, and A = U**H*D*U;\n*          = \'L\':  E is the subdiagonal of A, and A = L*D*L**H.\n*          (The two forms are equivalent if A is real.)\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  D       (input) REAL array, dimension (N)\n*          The n real diagonal elements of the tridiagonal matrix A.\n*\n*  E       (input) COMPLEX array, dimension (N-1)\n*          The (n-1) off-diagonal elements of the tridiagonal matrix A\n*          (see UPLO).\n*\n*  DF      (input) REAL array, dimension (N)\n*          The n diagonal elements of the diagonal matrix D from\n*          the factorization computed by CPTTRF.\n*\n*  EF      (input) COMPLEX array, dimension (N-1)\n*          The (n-1) off-diagonal elements of the unit bidiagonal\n*          factor U or L from the factorization computed by CPTTRF\n*          (see UPLO).\n*\n*  B       (input) COMPLEX array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input/output) COMPLEX array, dimension (LDX,NRHS)\n*          On entry, the solution matrix X, as computed by CPTTRS.\n*          On exit, the improved solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX array, dimension (N)\n*\n*  RWORK   (workspace) REAL array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n*  Internal Parameters\n*  ===================\n*\n*  ITMAX is the maximum number of steps of iterative refinement.\n*\n'),(396,'zptrfs_396.txt','      SUBROUTINE ZPTRFS( UPLO, N, NRHS, D, E, DF, EF, B, LDB, X, LDX,\n     $                   FERR, BERR, WORK, RWORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   BERR( * ), D( * ), DF( * ), FERR( * ),\n     $                   RWORK( * )\n      COMPLEX*16         B( LDB, * ), E( * ), EF( * ), WORK( * ),\n     $                   X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZPTRFS improves the computed solution to a system of linear\n*  equations when the coefficient matrix is Hermitian positive definite\n*  and tridiagonal, and provides error bounds and backward error\n*  estimates for the solution.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          Specifies whether the superdiagonal or the subdiagonal of the\n*          tridiagonal matrix A is stored and the form of the\n*          factorization:\n*          = \'U\':  E is the superdiagonal of A, and A = U**H*D*U;\n*          = \'L\':  E is the subdiagonal of A, and A = L*D*L**H.\n*          (The two forms are equivalent if A is real.)\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrix B.  NRHS >= 0.\n*\n*  D       (input) DOUBLE PRECISION array, dimension (N)\n*          The n real diagonal elements of the tridiagonal matrix A.\n*\n*  E       (input) COMPLEX*16 array, dimension (N-1)\n*          The (n-1) off-diagonal elements of the tridiagonal matrix A\n*          (see UPLO).\n*\n*  DF      (input) DOUBLE PRECISION array, dimension (N)\n*          The n diagonal elements of the diagonal matrix D from\n*          the factorization computed by ZPTTRF.\n*\n*  EF      (input) COMPLEX*16 array, dimension (N-1)\n*          The (n-1) off-diagonal elements of the unit bidiagonal\n*          factor U or L from the factorization computed by ZPTTRF\n*          (see UPLO).\n*\n*  B       (input) COMPLEX*16 array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input/output) COMPLEX*16 array, dimension (LDX,NRHS)\n*          On entry, the solution matrix X, as computed by ZPTTRS.\n*          On exit, the improved solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (N)\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n*  Internal Parameters\n*  ===================\n*\n*  ITMAX is the maximum number of steps of iterative refinement.\n*\n'),(397,'ssyrfs_397.txt','      SUBROUTINE SSYRFS( UPLO, N, NRHS, A, LDA, AF, LDAF, IPIV, B, LDB,\n     $                   X, LDX, FERR, BERR, WORK, IWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call SLACN2 in place of SLACON, 7 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, LDAF, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * ), IWORK( * )\n      REAL               A( LDA, * ), AF( LDAF, * ), B( LDB, * ),\n     $                   BERR( * ), FERR( * ), WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SSYRFS improves the computed solution to a system of linear\n*  equations when the coefficient matrix is symmetric indefinite, and\n*  provides error bounds and backward error estimates for the solution.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  A       (input) REAL array, dimension (LDA,N)\n*          The symmetric matrix A.  If UPLO = \'U\', the leading N-by-N\n*          upper triangular part of A contains the upper triangular part\n*          of the matrix A, and the strictly lower triangular part of A\n*          is not referenced.  If UPLO = \'L\', the leading N-by-N lower\n*          triangular part of A contains the lower triangular part of\n*          the matrix A, and the strictly upper triangular part of A is\n*          not referenced.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  AF      (input) REAL array, dimension (LDAF,N)\n*          The factored form of the matrix A.  AF contains the block\n*          diagonal matrix D and the multipliers used to obtain the\n*          factor U or L from the factorization A = U*D*U**T or\n*          A = L*D*L**T as computed by SSYTRF.\n*\n*  LDAF    (input) INTEGER\n*          The leading dimension of the array AF.  LDAF >= max(1,N).\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by SSYTRF.\n*\n*  B       (input) REAL array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input/output) REAL array, dimension (LDX,NRHS)\n*          On entry, the solution matrix X, as computed by SSYTRS.\n*          On exit, the improved solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) REAL array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n*  Internal Parameters\n*  ===================\n*\n*  ITMAX is the maximum number of steps of iterative refinement.\n*\n'),(398,'dsyrfs_398.txt','      SUBROUTINE DSYRFS( UPLO, N, NRHS, A, LDA, AF, LDAF, IPIV, B, LDB,\n     $                   X, LDX, FERR, BERR, WORK, IWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call DLACN2 in place of DLACON, 5 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, LDAF, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * ), IWORK( * )\n      DOUBLE PRECISION   A( LDA, * ), AF( LDAF, * ), B( LDB, * ),\n     $                   BERR( * ), FERR( * ), WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DSYRFS improves the computed solution to a system of linear\n*  equations when the coefficient matrix is symmetric indefinite, and\n*  provides error bounds and backward error estimates for the solution.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  A       (input) DOUBLE PRECISION array, dimension (LDA,N)\n*          The symmetric matrix A.  If UPLO = \'U\', the leading N-by-N\n*          upper triangular part of A contains the upper triangular part\n*          of the matrix A, and the strictly lower triangular part of A\n*          is not referenced.  If UPLO = \'L\', the leading N-by-N lower\n*          triangular part of A contains the lower triangular part of\n*          the matrix A, and the strictly upper triangular part of A is\n*          not referenced.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  AF      (input) DOUBLE PRECISION array, dimension (LDAF,N)\n*          The factored form of the matrix A.  AF contains the block\n*          diagonal matrix D and the multipliers used to obtain the\n*          factor U or L from the factorization A = U*D*U**T or\n*          A = L*D*L**T as computed by DSYTRF.\n*\n*  LDAF    (input) INTEGER\n*          The leading dimension of the array AF.  LDAF >= max(1,N).\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by DSYTRF.\n*\n*  B       (input) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input/output) DOUBLE PRECISION array, dimension (LDX,NRHS)\n*          On entry, the solution matrix X, as computed by DSYTRS.\n*          On exit, the improved solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) DOUBLE PRECISION array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n*  Internal Parameters\n*  ===================\n*\n*  ITMAX is the maximum number of steps of iterative refinement.\n*\n'),(399,'csyrfs_399.txt','      SUBROUTINE CSYRFS( UPLO, N, NRHS, A, LDA, AF, LDAF, IPIV, B, LDB,\n     $                   X, LDX, FERR, BERR, WORK, RWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call CLACN2 in place of CLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, LDAF, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      REAL               BERR( * ), FERR( * ), RWORK( * )\n      COMPLEX            A( LDA, * ), AF( LDAF, * ), B( LDB, * ),\n     $                   WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CSYRFS improves the computed solution to a system of linear\n*  equations when the coefficient matrix is symmetric indefinite, and\n*  provides error bounds and backward error estimates for the solution.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  A       (input) COMPLEX array, dimension (LDA,N)\n*          The symmetric matrix A.  If UPLO = \'U\', the leading N-by-N\n*          upper triangular part of A contains the upper triangular part\n*          of the matrix A, and the strictly lower triangular part of A\n*          is not referenced.  If UPLO = \'L\', the leading N-by-N lower\n*          triangular part of A contains the lower triangular part of\n*          the matrix A, and the strictly upper triangular part of A is\n*          not referenced.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  AF      (input) COMPLEX array, dimension (LDAF,N)\n*          The factored form of the matrix A.  AF contains the block\n*          diagonal matrix D and the multipliers used to obtain the\n*          factor U or L from the factorization A = U*D*U**T or\n*          A = L*D*L**T as computed by CSYTRF.\n*\n*  LDAF    (input) INTEGER\n*          The leading dimension of the array AF.  LDAF >= max(1,N).\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by CSYTRF.\n*\n*  B       (input) COMPLEX array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input/output) COMPLEX array, dimension (LDX,NRHS)\n*          On entry, the solution matrix X, as computed by CSYTRS.\n*          On exit, the improved solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX array, dimension (2*N)\n*\n*  RWORK   (workspace) REAL array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n*  Internal Parameters\n*  ===================\n*\n*  ITMAX is the maximum number of steps of iterative refinement.\n*\n'),(400,'zsyrfs_400.txt','      SUBROUTINE ZSYRFS( UPLO, N, NRHS, A, LDA, AF, LDAF, IPIV, B, LDB,\n     $                   X, LDX, FERR, BERR, WORK, RWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call ZLACN2 in place of ZLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, LDAF, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      DOUBLE PRECISION   BERR( * ), FERR( * ), RWORK( * )\n      COMPLEX*16         A( LDA, * ), AF( LDAF, * ), B( LDB, * ),\n     $                   WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZSYRFS improves the computed solution to a system of linear\n*  equations when the coefficient matrix is symmetric indefinite, and\n*  provides error bounds and backward error estimates for the solution.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  A       (input) COMPLEX*16 array, dimension (LDA,N)\n*          The symmetric matrix A.  If UPLO = \'U\', the leading N-by-N\n*          upper triangular part of A contains the upper triangular part\n*          of the matrix A, and the strictly lower triangular part of A\n*          is not referenced.  If UPLO = \'L\', the leading N-by-N lower\n*          triangular part of A contains the lower triangular part of\n*          the matrix A, and the strictly upper triangular part of A is\n*          not referenced.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  AF      (input) COMPLEX*16 array, dimension (LDAF,N)\n*          The factored form of the matrix A.  AF contains the block\n*          diagonal matrix D and the multipliers used to obtain the\n*          factor U or L from the factorization A = U*D*U**T or\n*          A = L*D*L**T as computed by ZSYTRF.\n*\n*  LDAF    (input) INTEGER\n*          The leading dimension of the array AF.  LDAF >= max(1,N).\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by ZSYTRF.\n*\n*  B       (input) COMPLEX*16 array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input/output) COMPLEX*16 array, dimension (LDX,NRHS)\n*          On entry, the solution matrix X, as computed by ZSYTRS.\n*          On exit, the improved solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n*  Internal Parameters\n*  ===================\n*\n*  ITMAX is the maximum number of steps of iterative refinement.\n*\n'),(401,'ssprfs_401.txt','      SUBROUTINE SSPRFS( UPLO, N, NRHS, AP, AFP, IPIV, B, LDB, X, LDX,\n     $                   FERR, BERR, WORK, IWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call SLACN2 in place of SLACON, 5 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * ), IWORK( * )\n      REAL               AFP( * ), AP( * ), B( LDB, * ), BERR( * ),\n     $                   FERR( * ), WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SSPRFS improves the computed solution to a system of linear\n*  equations when the coefficient matrix is symmetric indefinite\n*  and packed, and provides error bounds and backward error estimates\n*  for the solution.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AP      (input) REAL array, dimension (N*(N+1)/2)\n*          The upper or lower triangle of the symmetric matrix A, packed\n*          columnwise in a linear array.  The j-th column of A is stored\n*          in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*\n*  AFP     (input) REAL array, dimension (N*(N+1)/2)\n*          The factored form of the matrix A.  AFP contains the block\n*          diagonal matrix D and the multipliers used to obtain the\n*          factor U or L from the factorization A = U*D*U**T or\n*          A = L*D*L**T as computed by SSPTRF, stored as a packed\n*          triangular matrix.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by SSPTRF.\n*\n*  B       (input) REAL array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input/output) REAL array, dimension (LDX,NRHS)\n*          On entry, the solution matrix X, as computed by SSPTRS.\n*          On exit, the improved solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) REAL array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n*  Internal Parameters\n*  ===================\n*\n*  ITMAX is the maximum number of steps of iterative refinement.\n*\n'),(402,'dsprfs_402.txt','      SUBROUTINE DSPRFS( UPLO, N, NRHS, AP, AFP, IPIV, B, LDB, X, LDX,\n     $                   FERR, BERR, WORK, IWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call DLACN2 in place of DLACON, 5 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * ), IWORK( * )\n      DOUBLE PRECISION   AFP( * ), AP( * ), B( LDB, * ), BERR( * ),\n     $                   FERR( * ), WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DSPRFS improves the computed solution to a system of linear\n*  equations when the coefficient matrix is symmetric indefinite\n*  and packed, and provides error bounds and backward error estimates\n*  for the solution.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AP      (input) DOUBLE PRECISION array, dimension (N*(N+1)/2)\n*          The upper or lower triangle of the symmetric matrix A, packed\n*          columnwise in a linear array.  The j-th column of A is stored\n*          in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*\n*  AFP     (input) DOUBLE PRECISION array, dimension (N*(N+1)/2)\n*          The factored form of the matrix A.  AFP contains the block\n*          diagonal matrix D and the multipliers used to obtain the\n*          factor U or L from the factorization A = U*D*U**T or\n*          A = L*D*L**T as computed by DSPTRF, stored as a packed\n*          triangular matrix.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by DSPTRF.\n*\n*  B       (input) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input/output) DOUBLE PRECISION array, dimension (LDX,NRHS)\n*          On entry, the solution matrix X, as computed by DSPTRS.\n*          On exit, the improved solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) DOUBLE PRECISION array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n*  Internal Parameters\n*  ===================\n*\n*  ITMAX is the maximum number of steps of iterative refinement.\n*\n'),(403,'csprfs_403.txt','      SUBROUTINE CSPRFS( UPLO, N, NRHS, AP, AFP, IPIV, B, LDB, X, LDX,\n     $                   FERR, BERR, WORK, RWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call CLACN2 in place of CLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      REAL               BERR( * ), FERR( * ), RWORK( * )\n      COMPLEX            AFP( * ), AP( * ), B( LDB, * ), WORK( * ),\n     $                   X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CSPRFS improves the computed solution to a system of linear\n*  equations when the coefficient matrix is symmetric indefinite\n*  and packed, and provides error bounds and backward error estimates\n*  for the solution.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AP      (input) COMPLEX array, dimension (N*(N+1)/2)\n*          The upper or lower triangle of the symmetric matrix A, packed\n*          columnwise in a linear array.  The j-th column of A is stored\n*          in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*\n*  AFP     (input) COMPLEX array, dimension (N*(N+1)/2)\n*          The factored form of the matrix A.  AFP contains the block\n*          diagonal matrix D and the multipliers used to obtain the\n*          factor U or L from the factorization A = U*D*U**T or\n*          A = L*D*L**T as computed by CSPTRF, stored as a packed\n*          triangular matrix.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by CSPTRF.\n*\n*  B       (input) COMPLEX array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input/output) COMPLEX array, dimension (LDX,NRHS)\n*          On entry, the solution matrix X, as computed by CSPTRS.\n*          On exit, the improved solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX array, dimension (2*N)\n*\n*  RWORK   (workspace) REAL array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n*  Internal Parameters\n*  ===================\n*\n*  ITMAX is the maximum number of steps of iterative refinement.\n*\n'),(404,'zsprfs_404.txt','      SUBROUTINE ZSPRFS( UPLO, N, NRHS, AP, AFP, IPIV, B, LDB, X, LDX,\n     $                   FERR, BERR, WORK, RWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call ZLACN2 in place of ZLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      DOUBLE PRECISION   BERR( * ), FERR( * ), RWORK( * )\n      COMPLEX*16         AFP( * ), AP( * ), B( LDB, * ), WORK( * ),\n     $                   X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZSPRFS improves the computed solution to a system of linear\n*  equations when the coefficient matrix is symmetric indefinite\n*  and packed, and provides error bounds and backward error estimates\n*  for the solution.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AP      (input) COMPLEX*16 array, dimension (N*(N+1)/2)\n*          The upper or lower triangle of the symmetric matrix A, packed\n*          columnwise in a linear array.  The j-th column of A is stored\n*          in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*\n*  AFP     (input) COMPLEX*16 array, dimension (N*(N+1)/2)\n*          The factored form of the matrix A.  AFP contains the block\n*          diagonal matrix D and the multipliers used to obtain the\n*          factor U or L from the factorization A = U*D*U**T or\n*          A = L*D*L**T as computed by ZSPTRF, stored as a packed\n*          triangular matrix.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by ZSPTRF.\n*\n*  B       (input) COMPLEX*16 array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input/output) COMPLEX*16 array, dimension (LDX,NRHS)\n*          On entry, the solution matrix X, as computed by ZSPTRS.\n*          On exit, the improved solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n*  Internal Parameters\n*  ===================\n*\n*  ITMAX is the maximum number of steps of iterative refinement.\n*\n'),(405,'strrfs_405.txt','      SUBROUTINE STRRFS( UPLO, TRANS, DIAG, N, NRHS, A, LDA, B, LDB, X,\n     $                   LDX, FERR, BERR, WORK, IWORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call SLACN2 in place of SLACON, 7 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, TRANS, UPLO\n      INTEGER            INFO, LDA, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      REAL               A( LDA, * ), B( LDB, * ), BERR( * ), FERR( * ),\n     $                   WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  STRRFS provides error bounds and backward error estimates for the\n*  solution to a system of linear equations with a triangular\n*  coefficient matrix.\n*\n*  The solution matrix X must be computed by STRTRS or some other\n*  means before entering this routine.  STRRFS does not do iterative\n*  refinement because doing so cannot improve the backward error.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B  (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose = Transpose)\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  A       (input) REAL array, dimension (LDA,N)\n*          The triangular matrix A.  If UPLO = \'U\', the leading N-by-N\n*          upper triangular part of the array A contains the upper\n*          triangular matrix, and the strictly lower triangular part of\n*          A is not referenced.  If UPLO = \'L\', the leading N-by-N lower\n*          triangular part of the array A contains the lower triangular\n*          matrix, and the strictly upper triangular part of A is not\n*          referenced.  If DIAG = \'U\', the diagonal elements of A are\n*          also not referenced and are assumed to be 1.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  B       (input) REAL array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input) REAL array, dimension (LDX,NRHS)\n*          The solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) REAL array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(406,'dtrrfs_406.txt','      SUBROUTINE DTRRFS( UPLO, TRANS, DIAG, N, NRHS, A, LDA, B, LDB, X,\n     $                   LDX, FERR, BERR, WORK, IWORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call DLACN2 in place of DLACON, 5 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, TRANS, UPLO\n      INTEGER            INFO, LDA, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      DOUBLE PRECISION   A( LDA, * ), B( LDB, * ), BERR( * ), FERR( * ),\n     $                   WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DTRRFS provides error bounds and backward error estimates for the\n*  solution to a system of linear equations with a triangular\n*  coefficient matrix.\n*\n*  The solution matrix X must be computed by DTRTRS or some other\n*  means before entering this routine.  DTRRFS does not do iterative\n*  refinement because doing so cannot improve the backward error.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B  (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose = Transpose)\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  A       (input) DOUBLE PRECISION array, dimension (LDA,N)\n*          The triangular matrix A.  If UPLO = \'U\', the leading N-by-N\n*          upper triangular part of the array A contains the upper\n*          triangular matrix, and the strictly lower triangular part of\n*          A is not referenced.  If UPLO = \'L\', the leading N-by-N lower\n*          triangular part of the array A contains the lower triangular\n*          matrix, and the strictly upper triangular part of A is not\n*          referenced.  If DIAG = \'U\', the diagonal elements of A are\n*          also not referenced and are assumed to be 1.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  B       (input) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input) DOUBLE PRECISION array, dimension (LDX,NRHS)\n*          The solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) DOUBLE PRECISION array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(407,'ctrrfs_407.txt','      SUBROUTINE CTRRFS( UPLO, TRANS, DIAG, N, NRHS, A, LDA, B, LDB, X,\n     $                   LDX, FERR, BERR, WORK, RWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call CLACN2 in place of CLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, TRANS, UPLO\n      INTEGER            INFO, LDA, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      REAL               BERR( * ), FERR( * ), RWORK( * )\n      COMPLEX            A( LDA, * ), B( LDB, * ), WORK( * ),\n     $                   X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CTRRFS provides error bounds and backward error estimates for the\n*  solution to a system of linear equations with a triangular\n*  coefficient matrix.\n*\n*  The solution matrix X must be computed by CTRTRS or some other\n*  means before entering this routine.  CTRRFS does not do iterative\n*  refinement because doing so cannot improve the backward error.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose)\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  A       (input) COMPLEX array, dimension (LDA,N)\n*          The triangular matrix A.  If UPLO = \'U\', the leading N-by-N\n*          upper triangular part of the array A contains the upper\n*          triangular matrix, and the strictly lower triangular part of\n*          A is not referenced.  If UPLO = \'L\', the leading N-by-N lower\n*          triangular part of the array A contains the lower triangular\n*          matrix, and the strictly upper triangular part of A is not\n*          referenced.  If DIAG = \'U\', the diagonal elements of A are\n*          also not referenced and are assumed to be 1.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  B       (input) COMPLEX array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input) COMPLEX array, dimension (LDX,NRHS)\n*          The solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX array, dimension (2*N)\n*\n*  RWORK   (workspace) REAL array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(408,'ztrrfs_408.txt','      SUBROUTINE ZTRRFS( UPLO, TRANS, DIAG, N, NRHS, A, LDA, B, LDB, X,\n     $                   LDX, FERR, BERR, WORK, RWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call ZLACN2 in place of ZLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, TRANS, UPLO\n      INTEGER            INFO, LDA, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   BERR( * ), FERR( * ), RWORK( * )\n      COMPLEX*16         A( LDA, * ), B( LDB, * ), WORK( * ),\n     $                   X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZTRRFS provides error bounds and backward error estimates for the\n*  solution to a system of linear equations with a triangular\n*  coefficient matrix.\n*\n*  The solution matrix X must be computed by ZTRTRS or some other\n*  means before entering this routine.  ZTRRFS does not do iterative\n*  refinement because doing so cannot improve the backward error.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose)\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  A       (input) COMPLEX*16 array, dimension (LDA,N)\n*          The triangular matrix A.  If UPLO = \'U\', the leading N-by-N\n*          upper triangular part of the array A contains the upper\n*          triangular matrix, and the strictly lower triangular part of\n*          A is not referenced.  If UPLO = \'L\', the leading N-by-N lower\n*          triangular part of the array A contains the lower triangular\n*          matrix, and the strictly upper triangular part of A is not\n*          referenced.  If DIAG = \'U\', the diagonal elements of A are\n*          also not referenced and are assumed to be 1.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  B       (input) COMPLEX*16 array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input) COMPLEX*16 array, dimension (LDX,NRHS)\n*          The solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(409,'stbrfs_409.txt','      SUBROUTINE STBRFS( UPLO, TRANS, DIAG, N, KD, NRHS, AB, LDAB, B,\n     $                   LDB, X, LDX, FERR, BERR, WORK, IWORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call SLACN2 in place of SLACON, 7 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, TRANS, UPLO\n      INTEGER            INFO, KD, LDAB, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      REAL               AB( LDAB, * ), B( LDB, * ), BERR( * ),\n     $                   FERR( * ), WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  STBRFS provides error bounds and backward error estimates for the\n*  solution to a system of linear equations with a triangular band\n*  coefficient matrix.\n*\n*  The solution matrix X must be computed by STBTRS or some other\n*  means before entering this routine.  STBRFS does not do iterative\n*  refinement because doing so cannot improve the backward error.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B  (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose = Transpose)\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals or subdiagonals of the\n*          triangular band matrix A.  KD >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AB      (input) REAL array, dimension (LDAB,N)\n*          The upper or lower triangular band matrix A, stored in the\n*          first kd+1 rows of the array. The j-th column of A is stored\n*          in the j-th column of the array AB as follows:\n*          if UPLO = \'U\', AB(kd+1+i-j,j) = A(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+kd).\n*          If DIAG = \'U\', the diagonal elements of A are not referenced\n*          and are assumed to be 1.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD+1.\n*\n*  B       (input) REAL array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input) REAL array, dimension (LDX,NRHS)\n*          The solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) REAL array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(410,'dtbrfs_410.txt','      SUBROUTINE DTBRFS( UPLO, TRANS, DIAG, N, KD, NRHS, AB, LDAB, B,\n     $                   LDB, X, LDX, FERR, BERR, WORK, IWORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call DLACN2 in place of DLACON, 5 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, TRANS, UPLO\n      INTEGER            INFO, KD, LDAB, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      DOUBLE PRECISION   AB( LDAB, * ), B( LDB, * ), BERR( * ),\n     $                   FERR( * ), WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DTBRFS provides error bounds and backward error estimates for the\n*  solution to a system of linear equations with a triangular band\n*  coefficient matrix.\n*\n*  The solution matrix X must be computed by DTBTRS or some other\n*  means before entering this routine.  DTBRFS does not do iterative\n*  refinement because doing so cannot improve the backward error.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B  (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose = Transpose)\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals or subdiagonals of the\n*          triangular band matrix A.  KD >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AB      (input) DOUBLE PRECISION array, dimension (LDAB,N)\n*          The upper or lower triangular band matrix A, stored in the\n*          first kd+1 rows of the array. The j-th column of A is stored\n*          in the j-th column of the array AB as follows:\n*          if UPLO = \'U\', AB(kd+1+i-j,j) = A(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+kd).\n*          If DIAG = \'U\', the diagonal elements of A are not referenced\n*          and are assumed to be 1.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD+1.\n*\n*  B       (input) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input) DOUBLE PRECISION array, dimension (LDX,NRHS)\n*          The solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) DOUBLE PRECISION array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(411,'ctbrfs_411.txt','      SUBROUTINE CTBRFS( UPLO, TRANS, DIAG, N, KD, NRHS, AB, LDAB, B,\n     $                   LDB, X, LDX, FERR, BERR, WORK, RWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call CLACN2 in place of CLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, TRANS, UPLO\n      INTEGER            INFO, KD, LDAB, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      REAL               BERR( * ), FERR( * ), RWORK( * )\n      COMPLEX            AB( LDAB, * ), B( LDB, * ), WORK( * ),\n     $                   X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CTBRFS provides error bounds and backward error estimates for the\n*  solution to a system of linear equations with a triangular band\n*  coefficient matrix.\n*\n*  The solution matrix X must be computed by CTBTRS or some other\n*  means before entering this routine.  CTBRFS does not do iterative\n*  refinement because doing so cannot improve the backward error.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose)\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals or subdiagonals of the\n*          triangular band matrix A.  KD >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AB      (input) COMPLEX array, dimension (LDAB,N)\n*          The upper or lower triangular band matrix A, stored in the\n*          first kd+1 rows of the array. The j-th column of A is stored\n*          in the j-th column of the array AB as follows:\n*          if UPLO = \'U\', AB(kd+1+i-j,j) = A(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+kd).\n*          If DIAG = \'U\', the diagonal elements of A are not referenced\n*          and are assumed to be 1.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD+1.\n*\n*  B       (input) COMPLEX array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input) COMPLEX array, dimension (LDX,NRHS)\n*          The solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX array, dimension (2*N)\n*\n*  RWORK   (workspace) REAL array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(412,'ztbrfs_412.txt','      SUBROUTINE ZTBRFS( UPLO, TRANS, DIAG, N, KD, NRHS, AB, LDAB, B,\n     $                   LDB, X, LDX, FERR, BERR, WORK, RWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call ZLACN2 in place of ZLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, TRANS, UPLO\n      INTEGER            INFO, KD, LDAB, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   BERR( * ), FERR( * ), RWORK( * )\n      COMPLEX*16         AB( LDAB, * ), B( LDB, * ), WORK( * ),\n     $                   X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZTBRFS provides error bounds and backward error estimates for the\n*  solution to a system of linear equations with a triangular band\n*  coefficient matrix.\n*\n*  The solution matrix X must be computed by ZTBTRS or some other\n*  means before entering this routine.  ZTBRFS does not do iterative\n*  refinement because doing so cannot improve the backward error.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose)\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals or subdiagonals of the\n*          triangular band matrix A.  KD >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AB      (input) COMPLEX*16 array, dimension (LDAB,N)\n*          The upper or lower triangular band matrix A, stored in the\n*          first kd+1 rows of the array. The j-th column of A is stored\n*          in the j-th column of the array AB as follows:\n*          if UPLO = \'U\', AB(kd+1+i-j,j) = A(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+kd).\n*          If DIAG = \'U\', the diagonal elements of A are not referenced\n*          and are assumed to be 1.\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KD+1.\n*\n*  B       (input) COMPLEX*16 array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input) COMPLEX*16 array, dimension (LDX,NRHS)\n*          The solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(413,'stprfs_413.txt','      SUBROUTINE STPRFS( UPLO, TRANS, DIAG, N, NRHS, AP, B, LDB, X, LDX,\n     $                   FERR, BERR, WORK, IWORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call SLACN2 in place of SLACON, 7 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, TRANS, UPLO\n      INTEGER            INFO, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      REAL               AP( * ), B( LDB, * ), BERR( * ), FERR( * ),\n     $                   WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  STPRFS provides error bounds and backward error estimates for the\n*  solution to a system of linear equations with a triangular packed\n*  coefficient matrix.\n*\n*  The solution matrix X must be computed by STPTRS or some other\n*  means before entering this routine.  STPRFS does not do iterative\n*  refinement because doing so cannot improve the backward error.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B  (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose = Transpose)\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AP      (input) REAL array, dimension (N*(N+1)/2)\n*          The upper or lower triangular matrix A, packed columnwise in\n*          a linear array.  The j-th column of A is stored in the array\n*          AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*          If DIAG = \'U\', the diagonal elements of A are not referenced\n*          and are assumed to be 1.\n*\n*  B       (input) REAL array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input) REAL array, dimension (LDX,NRHS)\n*          The solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) REAL array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(414,'dtprfs_414.txt','      SUBROUTINE DTPRFS( UPLO, TRANS, DIAG, N, NRHS, AP, B, LDB, X, LDX,\n     $                   FERR, BERR, WORK, IWORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     Modified to call DLACN2 in place of DLACON, 5 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, TRANS, UPLO\n      INTEGER            INFO, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      DOUBLE PRECISION   AP( * ), B( LDB, * ), BERR( * ), FERR( * ),\n     $                   WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DTPRFS provides error bounds and backward error estimates for the\n*  solution to a system of linear equations with a triangular packed\n*  coefficient matrix.\n*\n*  The solution matrix X must be computed by DTPTRS or some other\n*  means before entering this routine.  DTPRFS does not do iterative\n*  refinement because doing so cannot improve the backward error.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B  (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose = Transpose)\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AP      (input) DOUBLE PRECISION array, dimension (N*(N+1)/2)\n*          The upper or lower triangular matrix A, packed columnwise in\n*          a linear array.  The j-th column of A is stored in the array\n*          AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n*          If DIAG = \'U\', the diagonal elements of A are not referenced\n*          and are assumed to be 1.\n*\n*  B       (input) DOUBLE PRECISION array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input) DOUBLE PRECISION array, dimension (LDX,NRHS)\n*          The solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) DOUBLE PRECISION array, dimension (3*N)\n*\n*  IWORK   (workspace) INTEGER array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(415,'ctprfs_415.txt','      SUBROUTINE CTPRFS( UPLO, TRANS, DIAG, N, NRHS, AP, B, LDB, X, LDX,\n     $                   FERR, BERR, WORK, RWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call CLACN2 in place of CLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, TRANS, UPLO\n      INTEGER            INFO, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      REAL               BERR( * ), FERR( * ), RWORK( * )\n      COMPLEX            AP( * ), B( LDB, * ), WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CTPRFS provides error bounds and backward error estimates for the\n*  solution to a system of linear equations with a triangular packed\n*  coefficient matrix.\n*\n*  The solution matrix X must be computed by CTPTRS or some other\n*  means before entering this routine.  CTPRFS does not do iterative\n*  refinement because doing so cannot improve the backward error.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose)\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AP      (input) COMPLEX array, dimension (N*(N+1)/2)\n*          The upper or lower triangular matrix A, packed columnwise in\n*          a linear array.  The j-th column of A is stored in the array\n*          AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = A(i,j) for j<=i<=n.\n*          If DIAG = \'U\', the diagonal elements of A are not referenced\n*          and are assumed to be 1.\n*\n*  B       (input) COMPLEX array, dimension (LDB,NRHS)\n*          The right hand side matrix B. \n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input) COMPLEX array, dimension (LDX,NRHS)\n*          The solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) REAL array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) REAL array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX array, dimension (2*N)\n*\n*  RWORK   (workspace) REAL array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(416,'ztprfs_416.txt','      SUBROUTINE ZTPRFS( UPLO, TRANS, DIAG, N, NRHS, AP, B, LDB, X, LDX,\n     $                   FERR, BERR, WORK, RWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     Modified to call ZLACN2 in place of ZLACON, 10 Feb 03, SJH.\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, TRANS, UPLO\n      INTEGER            INFO, LDB, LDX, N, NRHS\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   BERR( * ), FERR( * ), RWORK( * )\n      COMPLEX*16         AP( * ), B( LDB, * ), WORK( * ), X( LDX, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZTPRFS provides error bounds and backward error estimates for the\n*  solution to a system of linear equations with a triangular packed\n*  coefficient matrix.\n*\n*  The solution matrix X must be computed by ZTPTRS or some other\n*  means before entering this routine.  ZTPRFS does not do iterative\n*  refinement because doing so cannot improve the backward error.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  TRANS   (input) CHARACTER*1\n*          Specifies the form of the system of equations:\n*          = \'N\':  A * X = B     (No transpose)\n*          = \'T\':  A**T * X = B  (Transpose)\n*          = \'C\':  A**H * X = B  (Conjugate transpose)\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  NRHS    (input) INTEGER\n*          The number of right hand sides, i.e., the number of columns\n*          of the matrices B and X.  NRHS >= 0.\n*\n*  AP      (input) COMPLEX*16 array, dimension (N*(N+1)/2)\n*          The upper or lower triangular matrix A, packed columnwise in\n*          a linear array.  The j-th column of A is stored in the array\n*          AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = A(i,j) for j<=i<=n.\n*          If DIAG = \'U\', the diagonal elements of A are not referenced\n*          and are assumed to be 1.\n*\n*  B       (input) COMPLEX*16 array, dimension (LDB,NRHS)\n*          The right hand side matrix B.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B.  LDB >= max(1,N).\n*\n*  X       (input) COMPLEX*16 array, dimension (LDX,NRHS)\n*          The solution matrix X.\n*\n*  LDX     (input) INTEGER\n*          The leading dimension of the array X.  LDX >= max(1,N).\n*\n*  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The estimated forward error bound for each solution vector\n*          X(j) (the j-th column of the solution matrix X).\n*          If XTRUE is the true solution corresponding to X(j), FERR(j)\n*          is an estimated upper bound for the magnitude of the largest\n*          element in (X(j) - XTRUE) divided by the magnitude of the\n*          largest element in X(j).  The estimate is as reliable as\n*          the estimate for RCOND, and is almost always a slight\n*          overestimate of the true error.\n*\n*  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n*          The componentwise relative backward error of each solution\n*          vector X(j) (i.e., the smallest relative change in\n*          any element of A or B that makes X(j) an exact solution).\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*\n'),(417,'sgetri_417.txt','      SUBROUTINE SGETRI( N, A, LDA, IPIV, WORK, LWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDA, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      REAL               A( LDA, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SGETRI computes the inverse of a matrix using the LU factorization\n*  computed by SGETRF.\n*\n*  This method inverts U and then computes inv(A) by solving the system\n*  inv(A)*L = inv(U) for inv(A).\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) REAL array, dimension (LDA,N)\n*          On entry, the factors L and U from the factorization\n*          A = P*L*U as computed by SGETRF.\n*          On exit, if INFO = 0, the inverse of the original matrix A.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          The pivot indices from SGETRF; for 1<=i<=N, row i of the\n*          matrix was interchanged with row IPIV(i).\n*\n*  WORK    (workspace/output) REAL array, dimension (MAX(1,LWORK))\n*          On exit, if INFO=0, then WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.  LWORK >= max(1,N).\n*          For optimal performance LWORK >= N*NB, where NB is\n*          the optimal blocksize returned by ILAENV.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, U(i,i) is exactly zero; the matrix is\n*                singular and its inverse could not be computed.\n*\n'),(418,'dgetri_418.txt','      SUBROUTINE DGETRI( N, A, LDA, IPIV, WORK, LWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDA, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      DOUBLE PRECISION   A( LDA, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DGETRI computes the inverse of a matrix using the LU factorization\n*  computed by DGETRF.\n*\n*  This method inverts U and then computes inv(A) by solving the system\n*  inv(A)*L = inv(U) for inv(A).\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) DOUBLE PRECISION array, dimension (LDA,N)\n*          On entry, the factors L and U from the factorization\n*          A = P*L*U as computed by DGETRF.\n*          On exit, if INFO = 0, the inverse of the original matrix A.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          The pivot indices from DGETRF; for 1<=i<=N, row i of the\n*          matrix was interchanged with row IPIV(i).\n*\n*  WORK    (workspace/output) DOUBLE PRECISION array, dimension (MAX(1,LWORK))\n*          On exit, if INFO=0, then WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.  LWORK >= max(1,N).\n*          For optimal performance LWORK >= N*NB, where NB is\n*          the optimal blocksize returned by ILAENV.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, U(i,i) is exactly zero; the matrix is\n*                singular and its inverse could not be computed.\n*\n'),(419,'cgetri_419.txt','      SUBROUTINE CGETRI( N, A, LDA, IPIV, WORK, LWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDA, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX            A( LDA, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CGETRI computes the inverse of a matrix using the LU factorization\n*  computed by CGETRF.\n*\n*  This method inverts U and then computes inv(A) by solving the system\n*  inv(A)*L = inv(U) for inv(A).\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) COMPLEX array, dimension (LDA,N)\n*          On entry, the factors L and U from the factorization\n*          A = P*L*U as computed by CGETRF.\n*          On exit, if INFO = 0, the inverse of the original matrix A.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          The pivot indices from CGETRF; for 1<=i<=N, row i of the\n*          matrix was interchanged with row IPIV(i).\n*\n*  WORK    (workspace/output) COMPLEX array, dimension (MAX(1,LWORK))\n*          On exit, if INFO=0, then WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.  LWORK >= max(1,N).\n*          For optimal performance LWORK >= N*NB, where NB is\n*          the optimal blocksize returned by ILAENV.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, U(i,i) is exactly zero; the matrix is\n*                singular and its inverse could not be computed.\n*\n'),(420,'zgetri_420.txt','      SUBROUTINE ZGETRI( N, A, LDA, IPIV, WORK, LWORK, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDA, LWORK, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX*16         A( LDA, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZGETRI computes the inverse of a matrix using the LU factorization\n*  computed by ZGETRF.\n*\n*  This method inverts U and then computes inv(A) by solving the system\n*  inv(A)*L = inv(U) for inv(A).\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) COMPLEX*16 array, dimension (LDA,N)\n*          On entry, the factors L and U from the factorization\n*          A = P*L*U as computed by ZGETRF.\n*          On exit, if INFO = 0, the inverse of the original matrix A.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          The pivot indices from ZGETRF; for 1<=i<=N, row i of the\n*          matrix was interchanged with row IPIV(i).\n*\n*  WORK    (workspace/output) COMPLEX*16 array, dimension (MAX(1,LWORK))\n*          On exit, if INFO=0, then WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.  LWORK >= max(1,N).\n*          For optimal performance LWORK >= N*NB, where NB is\n*          the optimal blocksize returned by ILAENV.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, U(i,i) is exactly zero; the matrix is\n*                singular and its inverse could not be computed.\n*\n'),(421,'chetri_421.txt','      SUBROUTINE CHETRI( UPLO, N, A, LDA, IPIV, WORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX            A( LDA, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CHETRI computes the inverse of a complex Hermitian indefinite matrix\n*  A using the factorization A = U*D*U**H or A = L*D*L**H computed by\n*  CHETRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          Specifies whether the details of the factorization are stored\n*          as an upper or lower triangular matrix.\n*          = \'U\':  Upper triangular, form is A = U*D*U**H;\n*          = \'L\':  Lower triangular, form is A = L*D*L**H.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) COMPLEX array, dimension (LDA,N)\n*          On entry, the block diagonal matrix D and the multipliers\n*          used to obtain the factor U or L as computed by CHETRF.\n*\n*          On exit, if INFO = 0, the (Hermitian) inverse of the original\n*          matrix.  If UPLO = \'U\', the upper triangular part of the\n*          inverse is formed and the part of A below the diagonal is not\n*          referenced; if UPLO = \'L\' the lower triangular part of the\n*          inverse is formed and the part of A above the diagonal is\n*          not referenced.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by CHETRF.\n*\n*  WORK    (workspace) COMPLEX array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, D(i,i) = 0; the matrix is singular and its\n*               inverse could not be computed.\n*\n'),(422,'zhetri_422.txt','      SUBROUTINE ZHETRI( UPLO, N, A, LDA, IPIV, WORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX*16         A( LDA, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZHETRI computes the inverse of a complex Hermitian indefinite matrix\n*  A using the factorization A = U*D*U**H or A = L*D*L**H computed by\n*  ZHETRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          Specifies whether the details of the factorization are stored\n*          as an upper or lower triangular matrix.\n*          = \'U\':  Upper triangular, form is A = U*D*U**H;\n*          = \'L\':  Lower triangular, form is A = L*D*L**H.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) COMPLEX*16 array, dimension (LDA,N)\n*          On entry, the block diagonal matrix D and the multipliers\n*          used to obtain the factor U or L as computed by ZHETRF.\n*\n*          On exit, if INFO = 0, the (Hermitian) inverse of the original\n*          matrix.  If UPLO = \'U\', the upper triangular part of the\n*          inverse is formed and the part of A below the diagonal is not\n*          referenced; if UPLO = \'L\' the lower triangular part of the\n*          inverse is formed and the part of A above the diagonal is\n*          not referenced.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by ZHETRF.\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, D(i,i) = 0; the matrix is singular and its\n*               inverse could not be computed.\n*\n'),(423,'chptri_423.txt','      SUBROUTINE CHPTRI( UPLO, N, AP, IPIV, WORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX            AP( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CHPTRI computes the inverse of a complex Hermitian indefinite matrix\n*  A in packed storage using the factorization A = U*D*U**H or\n*  A = L*D*L**H computed by CHPTRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          Specifies whether the details of the factorization are stored\n*          as an upper or lower triangular matrix.\n*          = \'U\':  Upper triangular, form is A = U*D*U**H;\n*          = \'L\':  Lower triangular, form is A = L*D*L**H.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input/output) COMPLEX array, dimension (N*(N+1)/2)\n*          On entry, the block diagonal matrix D and the multipliers\n*          used to obtain the factor U or L as computed by CHPTRF,\n*          stored as a packed triangular matrix.\n*\n*          On exit, if INFO = 0, the (Hermitian) inverse of the original\n*          matrix, stored as a packed triangular matrix. The j-th column\n*          of inv(A) is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = inv(A)(i,j) for 1<=i<=j;\n*          if UPLO = \'L\',\n*             AP(i + (j-1)*(2n-j)/2) = inv(A)(i,j) for j<=i<=n.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by CHPTRF.\n*\n*  WORK    (workspace) COMPLEX array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, D(i,i) = 0; the matrix is singular and its\n*               inverse could not be computed.\n*\n'),(424,'zhptri_424.txt','      SUBROUTINE ZHPTRI( UPLO, N, AP, IPIV, WORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX*16         AP( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZHPTRI computes the inverse of a complex Hermitian indefinite matrix\n*  A in packed storage using the factorization A = U*D*U**H or\n*  A = L*D*L**H computed by ZHPTRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          Specifies whether the details of the factorization are stored\n*          as an upper or lower triangular matrix.\n*          = \'U\':  Upper triangular, form is A = U*D*U**H;\n*          = \'L\':  Lower triangular, form is A = L*D*L**H.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input/output) COMPLEX*16 array, dimension (N*(N+1)/2)\n*          On entry, the block diagonal matrix D and the multipliers\n*          used to obtain the factor U or L as computed by ZHPTRF,\n*          stored as a packed triangular matrix.\n*\n*          On exit, if INFO = 0, the (Hermitian) inverse of the original\n*          matrix, stored as a packed triangular matrix. The j-th column\n*          of inv(A) is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = inv(A)(i,j) for 1<=i<=j;\n*          if UPLO = \'L\',\n*             AP(i + (j-1)*(2n-j)/2) = inv(A)(i,j) for j<=i<=n.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by ZHPTRF.\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, D(i,i) = 0; the matrix is singular and its\n*               inverse could not be computed.\n*\n'),(425,'spotri_425.txt','      SUBROUTINE SPOTRI( UPLO, N, A, LDA, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, N\n*     ..\n*     .. Array Arguments ..\n      REAL               A( LDA, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SPOTRI computes the inverse of a real symmetric positive definite\n*  matrix A using the Cholesky factorization A = U**T*U or A = L*L**T\n*  computed by SPOTRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) REAL array, dimension (LDA,N)\n*          On entry, the triangular factor U or L from the Cholesky\n*          factorization A = U**T*U or A = L*L**T, as computed by\n*          SPOTRF.\n*          On exit, the upper or lower triangle of the (symmetric)\n*          inverse of A, overwriting the input factor U or L.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the (i,i) element of the factor U or L is\n*                zero, and the inverse could not be computed.\n*\n'),(426,'dpotri_426.txt','      SUBROUTINE DPOTRI( UPLO, N, A, LDA, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, N\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   A( LDA, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DPOTRI computes the inverse of a real symmetric positive definite\n*  matrix A using the Cholesky factorization A = U**T*U or A = L*L**T\n*  computed by DPOTRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) DOUBLE PRECISION array, dimension (LDA,N)\n*          On entry, the triangular factor U or L from the Cholesky\n*          factorization A = U**T*U or A = L*L**T, as computed by\n*          DPOTRF.\n*          On exit, the upper or lower triangle of the (symmetric)\n*          inverse of A, overwriting the input factor U or L.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the (i,i) element of the factor U or L is\n*                zero, and the inverse could not be computed.\n*\n'),(427,'cpotri_427.txt','      SUBROUTINE CPOTRI( UPLO, N, A, LDA, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, N\n*     ..\n*     .. Array Arguments ..\n      COMPLEX            A( LDA, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CPOTRI computes the inverse of a complex Hermitian positive definite\n*  matrix A using the Cholesky factorization A = U**H*U or A = L*L**H\n*  computed by CPOTRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) COMPLEX array, dimension (LDA,N)\n*          On entry, the triangular factor U or L from the Cholesky\n*          factorization A = U**H*U or A = L*L**H, as computed by\n*          CPOTRF.\n*          On exit, the upper or lower triangle of the (Hermitian)\n*          inverse of A, overwriting the input factor U or L.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the (i,i) element of the factor U or L is\n*                zero, and the inverse could not be computed.\n*\n'),(428,'zpotri_428.txt','      SUBROUTINE ZPOTRI( UPLO, N, A, LDA, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, N\n*     ..\n*     .. Array Arguments ..\n      COMPLEX*16         A( LDA, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZPOTRI computes the inverse of a complex Hermitian positive definite\n*  matrix A using the Cholesky factorization A = U**H*U or A = L*L**H\n*  computed by ZPOTRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) COMPLEX*16 array, dimension (LDA,N)\n*          On entry, the triangular factor U or L from the Cholesky\n*          factorization A = U**H*U or A = L*L**H, as computed by\n*          ZPOTRF.\n*          On exit, the upper or lower triangle of the (Hermitian)\n*          inverse of A, overwriting the input factor U or L.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the (i,i) element of the factor U or L is\n*                zero, and the inverse could not be computed.\n*\n'),(429,'spptri_429.txt','      SUBROUTINE SPPTRI( UPLO, N, AP, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, N\n*     ..\n*     .. Array Arguments ..\n      REAL               AP( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SPPTRI computes the inverse of a real symmetric positive definite\n*  matrix A using the Cholesky factorization A = U**T*U or A = L*L**T\n*  computed by SPPTRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangular factor is stored in AP;\n*          = \'L\':  Lower triangular factor is stored in AP.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input/output) REAL array, dimension (N*(N+1)/2)\n*          On entry, the triangular factor U or L from the Cholesky\n*          factorization A = U**T*U or A = L*L**T, packed columnwise as\n*          a linear array.  The j-th column of U or L is stored in the\n*          array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = U(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = L(i,j) for j<=i<=n.\n*\n*          On exit, the upper or lower triangle of the (symmetric)\n*          inverse of A, overwriting the input factor U or L.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the (i,i) element of the factor U or L is\n*                zero, and the inverse could not be computed.\n*\n'),(430,'dpptri_430.txt','      SUBROUTINE DPPTRI( UPLO, N, AP, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, N\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   AP( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DPPTRI computes the inverse of a real symmetric positive definite\n*  matrix A using the Cholesky factorization A = U**T*U or A = L*L**T\n*  computed by DPPTRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangular factor is stored in AP;\n*          = \'L\':  Lower triangular factor is stored in AP.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input/output) DOUBLE PRECISION array, dimension (N*(N+1)/2)\n*          On entry, the triangular factor U or L from the Cholesky\n*          factorization A = U**T*U or A = L*L**T, packed columnwise as\n*          a linear array.  The j-th column of U or L is stored in the\n*          array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = U(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = L(i,j) for j<=i<=n.\n*\n*          On exit, the upper or lower triangle of the (symmetric)\n*          inverse of A, overwriting the input factor U or L.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the (i,i) element of the factor U or L is\n*                zero, and the inverse could not be computed.\n*\n'),(431,'cpptri_431.txt','      SUBROUTINE CPPTRI( UPLO, N, AP, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, N\n*     ..\n*     .. Array Arguments ..\n      COMPLEX            AP( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CPPTRI computes the inverse of a complex Hermitian positive definite\n*  matrix A using the Cholesky factorization A = U**H*U or A = L*L**H\n*  computed by CPPTRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangular factor is stored in AP;\n*          = \'L\':  Lower triangular factor is stored in AP.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input/output) COMPLEX array, dimension (N*(N+1)/2)\n*          On entry, the triangular factor U or L from the Cholesky\n*          factorization A = U**H*U or A = L*L**H, packed columnwise as\n*          a linear array.  The j-th column of U or L is stored in the\n*          array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = U(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = L(i,j) for j<=i<=n.\n*\n*          On exit, the upper or lower triangle of the (Hermitian)\n*          inverse of A, overwriting the input factor U or L.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the (i,i) element of the factor U or L is\n*                zero, and the inverse could not be computed.\n*\n'),(432,'zpptri_432.txt','      SUBROUTINE ZPPTRI( UPLO, N, AP, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, N\n*     ..\n*     .. Array Arguments ..\n      COMPLEX*16         AP( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZPPTRI computes the inverse of a complex Hermitian positive definite\n*  matrix A using the Cholesky factorization A = U**H*U or A = L*L**H\n*  computed by ZPPTRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangular factor is stored in AP;\n*          = \'L\':  Lower triangular factor is stored in AP.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input/output) COMPLEX*16 array, dimension (N*(N+1)/2)\n*          On entry, the triangular factor U or L from the Cholesky\n*          factorization A = U**H*U or A = L*L**H, packed columnwise as\n*          a linear array.  The j-th column of U or L is stored in the\n*          array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = U(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = L(i,j) for j<=i<=n.\n*\n*          On exit, the upper or lower triangle of the (Hermitian)\n*          inverse of A, overwriting the input factor U or L.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the (i,i) element of the factor U or L is\n*                zero, and the inverse could not be computed.\n*\n'),(433,'ssytri_433.txt','      SUBROUTINE SSYTRI( UPLO, N, A, LDA, IPIV, WORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      REAL               A( LDA, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SSYTRI computes the inverse of a real symmetric indefinite matrix\n*  A using the factorization A = U*D*U**T or A = L*D*L**T computed by\n*  SSYTRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          Specifies whether the details of the factorization are stored\n*          as an upper or lower triangular matrix.\n*          = \'U\':  Upper triangular, form is A = U*D*U**T;\n*          = \'L\':  Lower triangular, form is A = L*D*L**T.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) REAL array, dimension (LDA,N)\n*          On entry, the block diagonal matrix D and the multipliers\n*          used to obtain the factor U or L as computed by SSYTRF.\n*\n*          On exit, if INFO = 0, the (symmetric) inverse of the original\n*          matrix.  If UPLO = \'U\', the upper triangular part of the\n*          inverse is formed and the part of A below the diagonal is not\n*          referenced; if UPLO = \'L\' the lower triangular part of the\n*          inverse is formed and the part of A above the diagonal is\n*          not referenced.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by SSYTRF.\n*\n*  WORK    (workspace) REAL array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, D(i,i) = 0; the matrix is singular and its\n*               inverse could not be computed.\n*\n'),(434,'dsytri_434.txt','      SUBROUTINE DSYTRI( UPLO, N, A, LDA, IPIV, WORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      DOUBLE PRECISION   A( LDA, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DSYTRI computes the inverse of a real symmetric indefinite matrix\n*  A using the factorization A = U*D*U**T or A = L*D*L**T computed by\n*  DSYTRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          Specifies whether the details of the factorization are stored\n*          as an upper or lower triangular matrix.\n*          = \'U\':  Upper triangular, form is A = U*D*U**T;\n*          = \'L\':  Lower triangular, form is A = L*D*L**T.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) DOUBLE PRECISION array, dimension (LDA,N)\n*          On entry, the block diagonal matrix D and the multipliers\n*          used to obtain the factor U or L as computed by DSYTRF.\n*\n*          On exit, if INFO = 0, the (symmetric) inverse of the original\n*          matrix.  If UPLO = \'U\', the upper triangular part of the\n*          inverse is formed and the part of A below the diagonal is not\n*          referenced; if UPLO = \'L\' the lower triangular part of the\n*          inverse is formed and the part of A above the diagonal is\n*          not referenced.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by DSYTRF.\n*\n*  WORK    (workspace) DOUBLE PRECISION array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, D(i,i) = 0; the matrix is singular and its\n*               inverse could not be computed.\n*\n'),(435,'csytri_435.txt','      SUBROUTINE CSYTRI( UPLO, N, A, LDA, IPIV, WORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX            A( LDA, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CSYTRI computes the inverse of a complex symmetric indefinite matrix\n*  A using the factorization A = U*D*U**T or A = L*D*L**T computed by\n*  CSYTRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          Specifies whether the details of the factorization are stored\n*          as an upper or lower triangular matrix.\n*          = \'U\':  Upper triangular, form is A = U*D*U**T;\n*          = \'L\':  Lower triangular, form is A = L*D*L**T.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) COMPLEX array, dimension (LDA,N)\n*          On entry, the block diagonal matrix D and the multipliers\n*          used to obtain the factor U or L as computed by CSYTRF.\n*\n*          On exit, if INFO = 0, the (symmetric) inverse of the original\n*          matrix.  If UPLO = \'U\', the upper triangular part of the\n*          inverse is formed and the part of A below the diagonal is not\n*          referenced; if UPLO = \'L\' the lower triangular part of the\n*          inverse is formed and the part of A above the diagonal is\n*          not referenced.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by CSYTRF.\n*\n*  WORK    (workspace) COMPLEX array, dimension (2*N)\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, D(i,i) = 0; the matrix is singular and its\n*               inverse could not be computed.\n*\n'),(436,'zsytri_436.txt','      SUBROUTINE ZSYTRI( UPLO, N, A, LDA, IPIV, WORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, LDA, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX*16         A( LDA, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZSYTRI computes the inverse of a complex symmetric indefinite matrix\n*  A using the factorization A = U*D*U**T or A = L*D*L**T computed by\n*  ZSYTRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          Specifies whether the details of the factorization are stored\n*          as an upper or lower triangular matrix.\n*          = \'U\':  Upper triangular, form is A = U*D*U**T;\n*          = \'L\':  Lower triangular, form is A = L*D*L**T.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) COMPLEX*16 array, dimension (LDA,N)\n*          On entry, the block diagonal matrix D and the multipliers\n*          used to obtain the factor U or L as computed by ZSYTRF.\n*\n*          On exit, if INFO = 0, the (symmetric) inverse of the original\n*          matrix.  If UPLO = \'U\', the upper triangular part of the\n*          inverse is formed and the part of A below the diagonal is not\n*          referenced; if UPLO = \'L\' the lower triangular part of the\n*          inverse is formed and the part of A above the diagonal is\n*          not referenced.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by ZSYTRF.\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, D(i,i) = 0; the matrix is singular and its\n*               inverse could not be computed.\n*\n'),(437,'ssptri_437.txt','      SUBROUTINE SSPTRI( UPLO, N, AP, IPIV, WORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      REAL               AP( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SSPTRI computes the inverse of a real symmetric indefinite matrix\n*  A in packed storage using the factorization A = U*D*U**T or\n*  A = L*D*L**T computed by SSPTRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          Specifies whether the details of the factorization are stored\n*          as an upper or lower triangular matrix.\n*          = \'U\':  Upper triangular, form is A = U*D*U**T;\n*          = \'L\':  Lower triangular, form is A = L*D*L**T.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input/output) REAL array, dimension (N*(N+1)/2)\n*          On entry, the block diagonal matrix D and the multipliers\n*          used to obtain the factor U or L as computed by SSPTRF,\n*          stored as a packed triangular matrix.\n*\n*          On exit, if INFO = 0, the (symmetric) inverse of the original\n*          matrix, stored as a packed triangular matrix. The j-th column\n*          of inv(A) is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = inv(A)(i,j) for 1<=i<=j;\n*          if UPLO = \'L\',\n*             AP(i + (j-1)*(2n-j)/2) = inv(A)(i,j) for j<=i<=n.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by SSPTRF.\n*\n*  WORK    (workspace) REAL array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, D(i,i) = 0; the matrix is singular and its\n*               inverse could not be computed.\n*\n'),(438,'dsptri_438.txt','      SUBROUTINE DSPTRI( UPLO, N, AP, IPIV, WORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      DOUBLE PRECISION   AP( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DSPTRI computes the inverse of a real symmetric indefinite matrix\n*  A in packed storage using the factorization A = U*D*U**T or\n*  A = L*D*L**T computed by DSPTRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          Specifies whether the details of the factorization are stored\n*          as an upper or lower triangular matrix.\n*          = \'U\':  Upper triangular, form is A = U*D*U**T;\n*          = \'L\':  Lower triangular, form is A = L*D*L**T.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input/output) DOUBLE PRECISION array, dimension (N*(N+1)/2)\n*          On entry, the block diagonal matrix D and the multipliers\n*          used to obtain the factor U or L as computed by DSPTRF,\n*          stored as a packed triangular matrix.\n*\n*          On exit, if INFO = 0, the (symmetric) inverse of the original\n*          matrix, stored as a packed triangular matrix. The j-th column\n*          of inv(A) is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = inv(A)(i,j) for 1<=i<=j;\n*          if UPLO = \'L\',\n*             AP(i + (j-1)*(2n-j)/2) = inv(A)(i,j) for j<=i<=n.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by DSPTRF.\n*\n*  WORK    (workspace) DOUBLE PRECISION array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, D(i,i) = 0; the matrix is singular and its\n*               inverse could not be computed.\n*\n'),(439,'csptri_439.txt','      SUBROUTINE CSPTRI( UPLO, N, AP, IPIV, WORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX            AP( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CSPTRI computes the inverse of a complex symmetric indefinite matrix\n*  A in packed storage using the factorization A = U*D*U**T or\n*  A = L*D*L**T computed by CSPTRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          Specifies whether the details of the factorization are stored\n*          as an upper or lower triangular matrix.\n*          = \'U\':  Upper triangular, form is A = U*D*U**T;\n*          = \'L\':  Lower triangular, form is A = L*D*L**T.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input/output) COMPLEX array, dimension (N*(N+1)/2)\n*          On entry, the block diagonal matrix D and the multipliers\n*          used to obtain the factor U or L as computed by CSPTRF,\n*          stored as a packed triangular matrix.\n*\n*          On exit, if INFO = 0, the (symmetric) inverse of the original\n*          matrix, stored as a packed triangular matrix. The j-th column\n*          of inv(A) is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = inv(A)(i,j) for 1<=i<=j;\n*          if UPLO = \'L\',\n*             AP(i + (j-1)*(2n-j)/2) = inv(A)(i,j) for j<=i<=n.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by CSPTRF.\n*\n*  WORK    (workspace) COMPLEX array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, D(i,i) = 0; the matrix is singular and its\n*               inverse could not be computed.\n*\n'),(440,'zsptri_440.txt','      SUBROUTINE ZSPTRI( UPLO, N, AP, IPIV, WORK, INFO )\n*\n*  -- LAPACK routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IPIV( * )\n      COMPLEX*16         AP( * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZSPTRI computes the inverse of a complex symmetric indefinite matrix\n*  A in packed storage using the factorization A = U*D*U**T or\n*  A = L*D*L**T computed by ZSPTRF.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          Specifies whether the details of the factorization are stored\n*          as an upper or lower triangular matrix.\n*          = \'U\':  Upper triangular, form is A = U*D*U**T;\n*          = \'L\':  Lower triangular, form is A = L*D*L**T.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input/output) COMPLEX*16 array, dimension (N*(N+1)/2)\n*          On entry, the block diagonal matrix D and the multipliers\n*          used to obtain the factor U or L as computed by ZSPTRF,\n*          stored as a packed triangular matrix.\n*\n*          On exit, if INFO = 0, the (symmetric) inverse of the original\n*          matrix, stored as a packed triangular matrix. The j-th column\n*          of inv(A) is stored in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = inv(A)(i,j) for 1<=i<=j;\n*          if UPLO = \'L\',\n*             AP(i + (j-1)*(2n-j)/2) = inv(A)(i,j) for j<=i<=n.\n*\n*  IPIV    (input) INTEGER array, dimension (N)\n*          Details of the interchanges and the block structure of D\n*          as determined by ZSPTRF.\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (N)\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, D(i,i) = 0; the matrix is singular and its\n*               inverse could not be computed.\n*\n'),(441,'strtri_441.txt','      SUBROUTINE STRTRI( UPLO, DIAG, N, A, LDA, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, UPLO\n      INTEGER            INFO, LDA, N\n*     ..\n*     .. Array Arguments ..\n      REAL               A( LDA, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  STRTRI computes the inverse of a real upper or lower triangular\n*  matrix A.\n*\n*  This is the Level 3 BLAS version of the algorithm.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) REAL array, dimension (LDA,N)\n*          On entry, the triangular matrix A.  If UPLO = \'U\', the\n*          leading N-by-N upper triangular part of the array A contains\n*          the upper triangular matrix, and the strictly lower\n*          triangular part of A is not referenced.  If UPLO = \'L\', the\n*          leading N-by-N lower triangular part of the array A contains\n*          the lower triangular matrix, and the strictly upper\n*          triangular part of A is not referenced.  If DIAG = \'U\', the\n*          diagonal elements of A are also not referenced and are\n*          assumed to be 1.\n*          On exit, the (triangular) inverse of the original matrix, in\n*          the same storage format.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, A(i,i) is exactly zero.  The triangular\n*               matrix is singular and its inverse can not be computed.\n*\n'),(442,'dtrtri_442.txt','      SUBROUTINE DTRTRI( UPLO, DIAG, N, A, LDA, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, UPLO\n      INTEGER            INFO, LDA, N\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   A( LDA, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DTRTRI computes the inverse of a real upper or lower triangular\n*  matrix A.\n*\n*  This is the Level 3 BLAS version of the algorithm.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) DOUBLE PRECISION array, dimension (LDA,N)\n*          On entry, the triangular matrix A.  If UPLO = \'U\', the\n*          leading N-by-N upper triangular part of the array A contains\n*          the upper triangular matrix, and the strictly lower\n*          triangular part of A is not referenced.  If UPLO = \'L\', the\n*          leading N-by-N lower triangular part of the array A contains\n*          the lower triangular matrix, and the strictly upper\n*          triangular part of A is not referenced.  If DIAG = \'U\', the\n*          diagonal elements of A are also not referenced and are\n*          assumed to be 1.\n*          On exit, the (triangular) inverse of the original matrix, in\n*          the same storage format.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, A(i,i) is exactly zero.  The triangular\n*               matrix is singular and its inverse can not be computed.\n*\n'),(443,'ctrtri_443.txt','      SUBROUTINE CTRTRI( UPLO, DIAG, N, A, LDA, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, UPLO\n      INTEGER            INFO, LDA, N\n*     ..\n*     .. Array Arguments ..\n      COMPLEX            A( LDA, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CTRTRI computes the inverse of a complex upper or lower triangular\n*  matrix A.\n*\n*  This is the Level 3 BLAS version of the algorithm.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) COMPLEX array, dimension (LDA,N)\n*          On entry, the triangular matrix A.  If UPLO = \'U\', the\n*          leading N-by-N upper triangular part of the array A contains\n*          the upper triangular matrix, and the strictly lower\n*          triangular part of A is not referenced.  If UPLO = \'L\', the\n*          leading N-by-N lower triangular part of the array A contains\n*          the lower triangular matrix, and the strictly upper\n*          triangular part of A is not referenced.  If DIAG = \'U\', the\n*          diagonal elements of A are also not referenced and are\n*          assumed to be 1.\n*          On exit, the (triangular) inverse of the original matrix, in\n*          the same storage format.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, A(i,i) is exactly zero.  The triangular\n*               matrix is singular and its inverse can not be computed.\n*\n'),(444,'ztrtri_444.txt','      SUBROUTINE ZTRTRI( UPLO, DIAG, N, A, LDA, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, UPLO\n      INTEGER            INFO, LDA, N\n*     ..\n*     .. Array Arguments ..\n      COMPLEX*16         A( LDA, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZTRTRI computes the inverse of a complex upper or lower triangular\n*  matrix A.\n*\n*  This is the Level 3 BLAS version of the algorithm.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input/output) COMPLEX*16 array, dimension (LDA,N)\n*          On entry, the triangular matrix A.  If UPLO = \'U\', the\n*          leading N-by-N upper triangular part of the array A contains\n*          the upper triangular matrix, and the strictly lower\n*          triangular part of A is not referenced.  If UPLO = \'L\', the\n*          leading N-by-N lower triangular part of the array A contains\n*          the lower triangular matrix, and the strictly upper\n*          triangular part of A is not referenced.  If DIAG = \'U\', the\n*          diagonal elements of A are also not referenced and are\n*          assumed to be 1.\n*          On exit, the (triangular) inverse of the original matrix, in\n*          the same storage format.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  INFO    (output) INTEGER\n*          = 0: successful exit\n*          < 0: if INFO = -i, the i-th argument had an illegal value\n*          > 0: if INFO = i, A(i,i) is exactly zero.  The triangular\n*               matrix is singular and its inverse can not be computed.\n*\n'),(445,'stptri_445.txt','      SUBROUTINE STPTRI( UPLO, DIAG, N, AP, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, UPLO\n      INTEGER            INFO, N\n*     ..\n*     .. Array Arguments ..\n      REAL               AP( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  STPTRI computes the inverse of a real upper or lower triangular\n*  matrix A stored in packed format.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input/output) REAL array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangular matrix A, stored\n*          columnwise in a linear array.  The j-th column of A is stored\n*          in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*((2*n-j)/2) = A(i,j) for j<=i<=n.\n*          See below for further details.\n*          On exit, the (triangular) inverse of the original matrix, in\n*          the same packed storage format.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, A(i,i) is exactly zero.  The triangular\n*                matrix is singular and its inverse can not be computed.\n*\n'),(446,'dtptri_446.txt','      SUBROUTINE DTPTRI( UPLO, DIAG, N, AP, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, UPLO\n      INTEGER            INFO, N\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   AP( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DTPTRI computes the inverse of a real upper or lower triangular\n*  matrix A stored in packed format.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input/output) DOUBLE PRECISION array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangular matrix A, stored\n*          columnwise in a linear array.  The j-th column of A is stored\n*          in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*((2*n-j)/2) = A(i,j) for j<=i<=n.\n*          See below for further details.\n*          On exit, the (triangular) inverse of the original matrix, in\n*          the same packed storage format.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, A(i,i) is exactly zero.  The triangular\n*                matrix is singular and its inverse can not be computed.\n*\n'),(447,'ctptri_447.txt','      SUBROUTINE CTPTRI( UPLO, DIAG, N, AP, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, UPLO\n      INTEGER            INFO, N\n*     ..\n*     .. Array Arguments ..\n      COMPLEX            AP( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CTPTRI computes the inverse of a complex upper or lower triangular\n*  matrix A stored in packed format.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input/output) COMPLEX array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangular matrix A, stored\n*          columnwise in a linear array.  The j-th column of A is stored\n*          in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*((2*n-j)/2) = A(i,j) for j<=i<=n.\n*          See below for further details.\n*          On exit, the (triangular) inverse of the original matrix, in\n*          the same packed storage format.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, A(i,i) is exactly zero.  The triangular\n*                matrix is singular and its inverse can not be computed.\n*\n'),(448,'ztptri_448.txt','      SUBROUTINE ZTPTRI( UPLO, DIAG, N, AP, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          DIAG, UPLO\n      INTEGER            INFO, N\n*     ..\n*     .. Array Arguments ..\n      COMPLEX*16         AP( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZTPTRI computes the inverse of a complex upper or lower triangular\n*  matrix A stored in packed format.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  A is upper triangular;\n*          = \'L\':  A is lower triangular.\n*\n*  DIAG    (input) CHARACTER*1\n*          = \'N\':  A is non-unit triangular;\n*          = \'U\':  A is unit triangular.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input/output) COMPLEX*16 array, dimension (N*(N+1)/2)\n*          On entry, the upper or lower triangular matrix A, stored\n*          columnwise in a linear array.  The j-th column of A is stored\n*          in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*((2*n-j)/2) = A(i,j) for j<=i<=n.\n*          See below for further details.\n*          On exit, the (triangular) inverse of the original matrix, in\n*          the same packed storage format.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, A(i,i) is exactly zero.  The triangular\n*                matrix is singular and its inverse can not be computed.\n*\n'),(449,'sgeequ_449.txt','      SUBROUTINE SGEEQU( M, N, A, LDA, R, C, ROWCND, COLCND, AMAX,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDA, M, N\n      REAL               AMAX, COLCND, ROWCND\n*     ..\n*     .. Array Arguments ..\n      REAL               A( LDA, * ), C( * ), R( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SGEEQU computes row and column scalings intended to equilibrate an\n*  M-by-N matrix A and reduce its condition number.  R returns the row\n*  scale factors and C the column scale factors, chosen to try to make\n*  the largest element in each row and column of the matrix B with\n*  elements B(i,j)=R(i)*A(i,j)*C(j) have absolute value 1.\n*\n*  R(i) and C(j) are restricted to be between SMLNUM = smallest safe\n*  number and BIGNUM = largest safe number.  Use of these scaling\n*  factors is not guaranteed to reduce the condition number of A but\n*  works well in practice.\n*\n*  Arguments\n*  =========\n*\n*  M       (input) INTEGER\n*          The number of rows of the matrix A.  M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the matrix A.  N >= 0.\n*\n*  A       (input) REAL array, dimension (LDA,N)\n*          The M-by-N matrix whose equilibration factors are\n*          to be computed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,M).\n*\n*  R       (output) REAL array, dimension (M)\n*          If INFO = 0 or INFO > M, R contains the row scale factors\n*          for A.\n*\n*  C       (output) REAL array, dimension (N)\n*          If INFO = 0,  C contains the column scale factors for A.\n*\n*  ROWCND  (output) REAL\n*          If INFO = 0 or INFO > M, ROWCND contains the ratio of the\n*          smallest R(i) to the largest R(i).  If ROWCND >= 0.1 and\n*          AMAX is neither too large nor too small, it is not worth\n*          scaling by R.\n*\n*  COLCND  (output) REAL\n*          If INFO = 0, COLCND contains the ratio of the smallest\n*          C(i) to the largest C(i).  If COLCND >= 0.1, it is not\n*          worth scaling by C.\n*\n*  AMAX    (output) REAL\n*          Absolute value of largest matrix element.  If AMAX is very\n*          close to overflow or very close to underflow, the matrix\n*          should be scaled.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i,  and i is\n*                <= M:  the i-th row of A is exactly zero\n*                >  M:  the (i-M)-th column of A is exactly zero\n*\n'),(450,'dgeequ_450.txt','      SUBROUTINE DGEEQU( M, N, A, LDA, R, C, ROWCND, COLCND, AMAX,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDA, M, N\n      DOUBLE PRECISION   AMAX, COLCND, ROWCND\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   A( LDA, * ), C( * ), R( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DGEEQU computes row and column scalings intended to equilibrate an\n*  M-by-N matrix A and reduce its condition number.  R returns the row\n*  scale factors and C the column scale factors, chosen to try to make\n*  the largest element in each row and column of the matrix B with\n*  elements B(i,j)=R(i)*A(i,j)*C(j) have absolute value 1.\n*\n*  R(i) and C(j) are restricted to be between SMLNUM = smallest safe\n*  number and BIGNUM = largest safe number.  Use of these scaling\n*  factors is not guaranteed to reduce the condition number of A but\n*  works well in practice.\n*\n*  Arguments\n*  =========\n*\n*  M       (input) INTEGER\n*          The number of rows of the matrix A.  M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the matrix A.  N >= 0.\n*\n*  A       (input) DOUBLE PRECISION array, dimension (LDA,N)\n*          The M-by-N matrix whose equilibration factors are\n*          to be computed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,M).\n*\n*  R       (output) DOUBLE PRECISION array, dimension (M)\n*          If INFO = 0 or INFO > M, R contains the row scale factors\n*          for A.\n*\n*  C       (output) DOUBLE PRECISION array, dimension (N)\n*          If INFO = 0,  C contains the column scale factors for A.\n*\n*  ROWCND  (output) DOUBLE PRECISION\n*          If INFO = 0 or INFO > M, ROWCND contains the ratio of the\n*          smallest R(i) to the largest R(i).  If ROWCND >= 0.1 and\n*          AMAX is neither too large nor too small, it is not worth\n*          scaling by R.\n*\n*  COLCND  (output) DOUBLE PRECISION\n*          If INFO = 0, COLCND contains the ratio of the smallest\n*          C(i) to the largest C(i).  If COLCND >= 0.1, it is not\n*          worth scaling by C.\n*\n*  AMAX    (output) DOUBLE PRECISION\n*          Absolute value of largest matrix element.  If AMAX is very\n*          close to overflow or very close to underflow, the matrix\n*          should be scaled.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i,  and i is\n*                <= M:  the i-th row of A is exactly zero\n*                >  M:  the (i-M)-th column of A is exactly zero\n*\n'),(451,'cgeequ_451.txt','      SUBROUTINE CGEEQU( M, N, A, LDA, R, C, ROWCND, COLCND, AMAX,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDA, M, N\n      REAL               AMAX, COLCND, ROWCND\n*     ..\n*     .. Array Arguments ..\n      REAL               C( * ), R( * )\n      COMPLEX            A( LDA, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CGEEQU computes row and column scalings intended to equilibrate an\n*  M-by-N matrix A and reduce its condition number.  R returns the row\n*  scale factors and C the column scale factors, chosen to try to make\n*  the largest element in each row and column of the matrix B with\n*  elements B(i,j)=R(i)*A(i,j)*C(j) have absolute value 1.\n*\n*  R(i) and C(j) are restricted to be between SMLNUM = smallest safe\n*  number and BIGNUM = largest safe number.  Use of these scaling\n*  factors is not guaranteed to reduce the condition number of A but\n*  works well in practice.\n*\n*  Arguments\n*  =========\n*\n*  M       (input) INTEGER\n*          The number of rows of the matrix A.  M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the matrix A.  N >= 0.\n*\n*  A       (input) COMPLEX array, dimension (LDA,N)\n*          The M-by-N matrix whose equilibration factors are\n*          to be computed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,M).\n*\n*  R       (output) REAL array, dimension (M)\n*          If INFO = 0 or INFO > M, R contains the row scale factors\n*          for A.\n*\n*  C       (output) REAL array, dimension (N)\n*          If INFO = 0,  C contains the column scale factors for A.\n*\n*  ROWCND  (output) REAL\n*          If INFO = 0 or INFO > M, ROWCND contains the ratio of the\n*          smallest R(i) to the largest R(i).  If ROWCND >= 0.1 and\n*          AMAX is neither too large nor too small, it is not worth\n*          scaling by R.\n*\n*  COLCND  (output) REAL\n*          If INFO = 0, COLCND contains the ratio of the smallest\n*          C(i) to the largest C(i).  If COLCND >= 0.1, it is not\n*          worth scaling by C.\n*\n*  AMAX    (output) REAL\n*          Absolute value of largest matrix element.  If AMAX is very\n*          close to overflow or very close to underflow, the matrix\n*          should be scaled.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i,  and i is\n*                <= M:  the i-th row of A is exactly zero\n*                >  M:  the (i-M)-th column of A is exactly zero\n*\n'),(452,'zgeequ_452.txt','      SUBROUTINE ZGEEQU( M, N, A, LDA, R, C, ROWCND, COLCND, AMAX,\n     $                   INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDA, M, N\n      DOUBLE PRECISION   AMAX, COLCND, ROWCND\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   C( * ), R( * )\n      COMPLEX*16         A( LDA, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZGEEQU computes row and column scalings intended to equilibrate an\n*  M-by-N matrix A and reduce its condition number.  R returns the row\n*  scale factors and C the column scale factors, chosen to try to make\n*  the largest element in each row and column of the matrix B with\n*  elements B(i,j)=R(i)*A(i,j)*C(j) have absolute value 1.\n*\n*  R(i) and C(j) are restricted to be between SMLNUM = smallest safe\n*  number and BIGNUM = largest safe number.  Use of these scaling\n*  factors is not guaranteed to reduce the condition number of A but\n*  works well in practice.\n*\n*  Arguments\n*  =========\n*\n*  M       (input) INTEGER\n*          The number of rows of the matrix A.  M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the matrix A.  N >= 0.\n*\n*  A       (input) COMPLEX*16 array, dimension (LDA,N)\n*          The M-by-N matrix whose equilibration factors are\n*          to be computed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,M).\n*\n*  R       (output) DOUBLE PRECISION array, dimension (M)\n*          If INFO = 0 or INFO > M, R contains the row scale factors\n*          for A.\n*\n*  C       (output) DOUBLE PRECISION array, dimension (N)\n*          If INFO = 0,  C contains the column scale factors for A.\n*\n*  ROWCND  (output) DOUBLE PRECISION\n*          If INFO = 0 or INFO > M, ROWCND contains the ratio of the\n*          smallest R(i) to the largest R(i).  If ROWCND >= 0.1 and\n*          AMAX is neither too large nor too small, it is not worth\n*          scaling by R.\n*\n*  COLCND  (output) DOUBLE PRECISION\n*          If INFO = 0, COLCND contains the ratio of the smallest\n*          C(i) to the largest C(i).  If COLCND >= 0.1, it is not\n*          worth scaling by C.\n*\n*  AMAX    (output) DOUBLE PRECISION\n*          Absolute value of largest matrix element.  If AMAX is very\n*          close to overflow or very close to underflow, the matrix\n*          should be scaled.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i,  and i is\n*                <= M:  the i-th row of A is exactly zero\n*                >  M:  the (i-M)-th column of A is exactly zero\n*\n'),(453,'sgbequ_453.txt','      SUBROUTINE SGBEQU( M, N, KL, KU, AB, LDAB, R, C, ROWCND, COLCND,\n     $                   AMAX, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, KL, KU, LDAB, M, N\n      REAL               AMAX, COLCND, ROWCND\n*     ..\n*     .. Array Arguments ..\n      REAL               AB( LDAB, * ), C( * ), R( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SGBEQU computes row and column scalings intended to equilibrate an\n*  M-by-N band matrix A and reduce its condition number.  R returns the\n*  row scale factors and C the column scale factors, chosen to try to\n*  make the largest element in each row and column of the matrix B with\n*  elements B(i,j)=R(i)*A(i,j)*C(j) have absolute value 1.\n*\n*  R(i) and C(j) are restricted to be between SMLNUM = smallest safe\n*  number and BIGNUM = largest safe number.  Use of these scaling\n*  factors is not guaranteed to reduce the condition number of A but\n*  works well in practice.\n*\n*  Arguments\n*  =========\n*\n*  M       (input) INTEGER\n*          The number of rows of the matrix A.  M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the matrix A.  N >= 0.\n*\n*  KL      (input) INTEGER\n*          The number of subdiagonals within the band of A.  KL >= 0.\n*\n*  KU      (input) INTEGER\n*          The number of superdiagonals within the band of A.  KU >= 0.\n*\n*  AB      (input) REAL array, dimension (LDAB,N)\n*          The band matrix A, stored in rows 1 to KL+KU+1.  The j-th\n*          column of A is stored in the j-th column of the array AB as\n*          follows:\n*          AB(ku+1+i-j,j) = A(i,j) for max(1,j-ku)<=i<=min(m,j+kl).\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KL+KU+1.\n*\n*  R       (output) REAL array, dimension (M)\n*          If INFO = 0, or INFO > M, R contains the row scale factors\n*          for A.\n*\n*  C       (output) REAL array, dimension (N)\n*          If INFO = 0, C contains the column scale factors for A.\n*\n*  ROWCND  (output) REAL\n*          If INFO = 0 or INFO > M, ROWCND contains the ratio of the\n*          smallest R(i) to the largest R(i).  If ROWCND >= 0.1 and\n*          AMAX is neither too large nor too small, it is not worth\n*          scaling by R.\n*\n*  COLCND  (output) REAL\n*          If INFO = 0, COLCND contains the ratio of the smallest\n*          C(i) to the largest C(i).  If COLCND >= 0.1, it is not\n*          worth scaling by C.\n*\n*  AMAX    (output) REAL\n*          Absolute value of largest matrix element.  If AMAX is very\n*          close to overflow or very close to underflow, the matrix\n*          should be scaled.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is\n*                <= M:  the i-th row of A is exactly zero\n*                >  M:  the (i-M)-th column of A is exactly zero\n*\n'),(454,'dgbequ_454.txt','      SUBROUTINE DGBEQU( M, N, KL, KU, AB, LDAB, R, C, ROWCND, COLCND,\n     $                   AMAX, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, KL, KU, LDAB, M, N\n      DOUBLE PRECISION   AMAX, COLCND, ROWCND\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   AB( LDAB, * ), C( * ), R( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DGBEQU computes row and column scalings intended to equilibrate an\n*  M-by-N band matrix A and reduce its condition number.  R returns the\n*  row scale factors and C the column scale factors, chosen to try to\n*  make the largest element in each row and column of the matrix B with\n*  elements B(i,j)=R(i)*A(i,j)*C(j) have absolute value 1.\n*\n*  R(i) and C(j) are restricted to be between SMLNUM = smallest safe\n*  number and BIGNUM = largest safe number.  Use of these scaling\n*  factors is not guaranteed to reduce the condition number of A but\n*  works well in practice.\n*\n*  Arguments\n*  =========\n*\n*  M       (input) INTEGER\n*          The number of rows of the matrix A.  M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the matrix A.  N >= 0.\n*\n*  KL      (input) INTEGER\n*          The number of subdiagonals within the band of A.  KL >= 0.\n*\n*  KU      (input) INTEGER\n*          The number of superdiagonals within the band of A.  KU >= 0.\n*\n*  AB      (input) DOUBLE PRECISION array, dimension (LDAB,N)\n*          The band matrix A, stored in rows 1 to KL+KU+1.  The j-th\n*          column of A is stored in the j-th column of the array AB as\n*          follows:\n*          AB(ku+1+i-j,j) = A(i,j) for max(1,j-ku)<=i<=min(m,j+kl).\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KL+KU+1.\n*\n*  R       (output) DOUBLE PRECISION array, dimension (M)\n*          If INFO = 0, or INFO > M, R contains the row scale factors\n*          for A.\n*\n*  C       (output) DOUBLE PRECISION array, dimension (N)\n*          If INFO = 0, C contains the column scale factors for A.\n*\n*  ROWCND  (output) DOUBLE PRECISION\n*          If INFO = 0 or INFO > M, ROWCND contains the ratio of the\n*          smallest R(i) to the largest R(i).  If ROWCND >= 0.1 and\n*          AMAX is neither too large nor too small, it is not worth\n*          scaling by R.\n*\n*  COLCND  (output) DOUBLE PRECISION\n*          If INFO = 0, COLCND contains the ratio of the smallest\n*          C(i) to the largest C(i).  If COLCND >= 0.1, it is not\n*          worth scaling by C.\n*\n*  AMAX    (output) DOUBLE PRECISION\n*          Absolute value of largest matrix element.  If AMAX is very\n*          close to overflow or very close to underflow, the matrix\n*          should be scaled.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is\n*                <= M:  the i-th row of A is exactly zero\n*                >  M:  the (i-M)-th column of A is exactly zero\n*\n'),(455,'cgbequ_455.txt','      SUBROUTINE CGBEQU( M, N, KL, KU, AB, LDAB, R, C, ROWCND, COLCND,\n     $                   AMAX, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, KL, KU, LDAB, M, N\n      REAL               AMAX, COLCND, ROWCND\n*     ..\n*     .. Array Arguments ..\n      REAL               C( * ), R( * )\n      COMPLEX            AB( LDAB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CGBEQU computes row and column scalings intended to equilibrate an\n*  M-by-N band matrix A and reduce its condition number.  R returns the\n*  row scale factors and C the column scale factors, chosen to try to\n*  make the largest element in each row and column of the matrix B with\n*  elements B(i,j)=R(i)*A(i,j)*C(j) have absolute value 1.\n*\n*  R(i) and C(j) are restricted to be between SMLNUM = smallest safe\n*  number and BIGNUM = largest safe number.  Use of these scaling\n*  factors is not guaranteed to reduce the condition number of A but\n*  works well in practice.\n*\n*  Arguments\n*  =========\n*\n*  M       (input) INTEGER\n*          The number of rows of the matrix A.  M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the matrix A.  N >= 0.\n*\n*  KL      (input) INTEGER\n*          The number of subdiagonals within the band of A.  KL >= 0.\n*\n*  KU      (input) INTEGER\n*          The number of superdiagonals within the band of A.  KU >= 0.\n*\n*  AB      (input) COMPLEX array, dimension (LDAB,N)\n*          The band matrix A, stored in rows 1 to KL+KU+1.  The j-th\n*          column of A is stored in the j-th column of the array AB as\n*          follows:\n*          AB(ku+1+i-j,j) = A(i,j) for max(1,j-ku)<=i<=min(m,j+kl).\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KL+KU+1.\n*\n*  R       (output) REAL array, dimension (M)\n*          If INFO = 0, or INFO > M, R contains the row scale factors\n*          for A.\n*\n*  C       (output) REAL array, dimension (N)\n*          If INFO = 0, C contains the column scale factors for A.\n*\n*  ROWCND  (output) REAL\n*          If INFO = 0 or INFO > M, ROWCND contains the ratio of the\n*          smallest R(i) to the largest R(i).  If ROWCND >= 0.1 and\n*          AMAX is neither too large nor too small, it is not worth\n*          scaling by R.\n*\n*  COLCND  (output) REAL\n*          If INFO = 0, COLCND contains the ratio of the smallest\n*          C(i) to the largest C(i).  If COLCND >= 0.1, it is not\n*          worth scaling by C.\n*\n*  AMAX    (output) REAL\n*          Absolute value of largest matrix element.  If AMAX is very\n*          close to overflow or very close to underflow, the matrix\n*          should be scaled.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is\n*                <= M:  the i-th row of A is exactly zero\n*                >  M:  the (i-M)-th column of A is exactly zero\n*\n'),(456,'zgbequ_456.txt','      SUBROUTINE ZGBEQU( M, N, KL, KU, AB, LDAB, R, C, ROWCND, COLCND,\n     $                   AMAX, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, KL, KU, LDAB, M, N\n      DOUBLE PRECISION   AMAX, COLCND, ROWCND\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   C( * ), R( * )\n      COMPLEX*16         AB( LDAB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZGBEQU computes row and column scalings intended to equilibrate an\n*  M-by-N band matrix A and reduce its condition number.  R returns the\n*  row scale factors and C the column scale factors, chosen to try to\n*  make the largest element in each row and column of the matrix B with\n*  elements B(i,j)=R(i)*A(i,j)*C(j) have absolute value 1.\n*\n*  R(i) and C(j) are restricted to be between SMLNUM = smallest safe\n*  number and BIGNUM = largest safe number.  Use of these scaling\n*  factors is not guaranteed to reduce the condition number of A but\n*  works well in practice.\n*\n*  Arguments\n*  =========\n*\n*  M       (input) INTEGER\n*          The number of rows of the matrix A.  M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the matrix A.  N >= 0.\n*\n*  KL      (input) INTEGER\n*          The number of subdiagonals within the band of A.  KL >= 0.\n*\n*  KU      (input) INTEGER\n*          The number of superdiagonals within the band of A.  KU >= 0.\n*\n*  AB      (input) COMPLEX*16 array, dimension (LDAB,N)\n*          The band matrix A, stored in rows 1 to KL+KU+1.  The j-th\n*          column of A is stored in the j-th column of the array AB as\n*          follows:\n*          AB(ku+1+i-j,j) = A(i,j) for max(1,j-ku)<=i<=min(m,j+kl).\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array AB.  LDAB >= KL+KU+1.\n*\n*  R       (output) DOUBLE PRECISION array, dimension (M)\n*          If INFO = 0, or INFO > M, R contains the row scale factors\n*          for A.\n*\n*  C       (output) DOUBLE PRECISION array, dimension (N)\n*          If INFO = 0, C contains the column scale factors for A.\n*\n*  ROWCND  (output) DOUBLE PRECISION\n*          If INFO = 0 or INFO > M, ROWCND contains the ratio of the\n*          smallest R(i) to the largest R(i).  If ROWCND >= 0.1 and\n*          AMAX is neither too large nor too small, it is not worth\n*          scaling by R.\n*\n*  COLCND  (output) DOUBLE PRECISION\n*          If INFO = 0, COLCND contains the ratio of the smallest\n*          C(i) to the largest C(i).  If COLCND >= 0.1, it is not\n*          worth scaling by C.\n*\n*  AMAX    (output) DOUBLE PRECISION\n*          Absolute value of largest matrix element.  If AMAX is very\n*          close to overflow or very close to underflow, the matrix\n*          should be scaled.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, and i is\n*                <= M:  the i-th row of A is exactly zero\n*                >  M:  the (i-M)-th column of A is exactly zero\n*\n'),(457,'spoequ_457.txt','      SUBROUTINE SPOEQU( N, A, LDA, S, SCOND, AMAX, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDA, N\n      REAL               AMAX, SCOND\n*     ..\n*     .. Array Arguments ..\n      REAL               A( LDA, * ), S( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SPOEQU computes row and column scalings intended to equilibrate a\n*  symmetric positive definite matrix A and reduce its condition number\n*  (with respect to the two-norm).  S contains the scale factors,\n*  S(i) = 1/sqrt(A(i,i)), chosen so that the scaled matrix B with\n*  elements B(i,j) = S(i)*A(i,j)*S(j) has ones on the diagonal.  This\n*  choice of S puts the condition number of B within a factor N of the\n*  smallest possible condition number over all possible diagonal\n*  scalings.\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input) REAL array, dimension (LDA,N)\n*          The N-by-N symmetric positive definite matrix whose scaling\n*          factors are to be computed.  Only the diagonal elements of A\n*          are referenced.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  S       (output) REAL array, dimension (N)\n*          If INFO = 0, S contains the scale factors for A.\n*\n*  SCOND   (output) REAL\n*          If INFO = 0, S contains the ratio of the smallest S(i) to\n*          the largest S(i).  If SCOND >= 0.1 and AMAX is neither too\n*          large nor too small, it is not worth scaling by S.\n*\n*  AMAX    (output) REAL\n*          Absolute value of largest matrix element.  If AMAX is very\n*          close to overflow or very close to underflow, the matrix\n*          should be scaled.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the i-th diagonal element is nonpositive.\n*\n'),(458,'dpoequ_458.txt','      SUBROUTINE DPOEQU( N, A, LDA, S, SCOND, AMAX, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDA, N\n      DOUBLE PRECISION   AMAX, SCOND\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   A( LDA, * ), S( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DPOEQU computes row and column scalings intended to equilibrate a\n*  symmetric positive definite matrix A and reduce its condition number\n*  (with respect to the two-norm).  S contains the scale factors,\n*  S(i) = 1/sqrt(A(i,i)), chosen so that the scaled matrix B with\n*  elements B(i,j) = S(i)*A(i,j)*S(j) has ones on the diagonal.  This\n*  choice of S puts the condition number of B within a factor N of the\n*  smallest possible condition number over all possible diagonal\n*  scalings.\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input) DOUBLE PRECISION array, dimension (LDA,N)\n*          The N-by-N symmetric positive definite matrix whose scaling\n*          factors are to be computed.  Only the diagonal elements of A\n*          are referenced.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  S       (output) DOUBLE PRECISION array, dimension (N)\n*          If INFO = 0, S contains the scale factors for A.\n*\n*  SCOND   (output) DOUBLE PRECISION\n*          If INFO = 0, S contains the ratio of the smallest S(i) to\n*          the largest S(i).  If SCOND >= 0.1 and AMAX is neither too\n*          large nor too small, it is not worth scaling by S.\n*\n*  AMAX    (output) DOUBLE PRECISION\n*          Absolute value of largest matrix element.  If AMAX is very\n*          close to overflow or very close to underflow, the matrix\n*          should be scaled.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the i-th diagonal element is nonpositive.\n*\n'),(459,'cpoequ_459.txt','      SUBROUTINE CPOEQU( N, A, LDA, S, SCOND, AMAX, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDA, N\n      REAL               AMAX, SCOND\n*     ..\n*     .. Array Arguments ..\n      REAL               S( * )\n      COMPLEX            A( LDA, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CPOEQU computes row and column scalings intended to equilibrate a\n*  Hermitian positive definite matrix A and reduce its condition number\n*  (with respect to the two-norm).  S contains the scale factors,\n*  S(i) = 1/sqrt(A(i,i)), chosen so that the scaled matrix B with\n*  elements B(i,j) = S(i)*A(i,j)*S(j) has ones on the diagonal.  This\n*  choice of S puts the condition number of B within a factor N of the\n*  smallest possible condition number over all possible diagonal\n*  scalings.\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input) COMPLEX array, dimension (LDA,N)\n*          The N-by-N Hermitian positive definite matrix whose scaling\n*          factors are to be computed.  Only the diagonal elements of A\n*          are referenced.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  S       (output) REAL array, dimension (N)\n*          If INFO = 0, S contains the scale factors for A.\n*\n*  SCOND   (output) REAL\n*          If INFO = 0, S contains the ratio of the smallest S(i) to\n*          the largest S(i).  If SCOND >= 0.1 and AMAX is neither too\n*          large nor too small, it is not worth scaling by S.\n*\n*  AMAX    (output) REAL\n*          Absolute value of largest matrix element.  If AMAX is very\n*          close to overflow or very close to underflow, the matrix\n*          should be scaled.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the i-th diagonal element is nonpositive.\n*\n'),(460,'zpoequ_460.txt','      SUBROUTINE ZPOEQU( N, A, LDA, S, SCOND, AMAX, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      INTEGER            INFO, LDA, N\n      DOUBLE PRECISION   AMAX, SCOND\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   S( * )\n      COMPLEX*16         A( LDA, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZPOEQU computes row and column scalings intended to equilibrate a\n*  Hermitian positive definite matrix A and reduce its condition number\n*  (with respect to the two-norm).  S contains the scale factors,\n*  S(i) = 1/sqrt(A(i,i)), chosen so that the scaled matrix B with\n*  elements B(i,j) = S(i)*A(i,j)*S(j) has ones on the diagonal.  This\n*  choice of S puts the condition number of B within a factor N of the\n*  smallest possible condition number over all possible diagonal\n*  scalings.\n*\n*  Arguments\n*  =========\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  A       (input) COMPLEX*16 array, dimension (LDA,N)\n*          The N-by-N Hermitian positive definite matrix whose scaling\n*          factors are to be computed.  Only the diagonal elements of A\n*          are referenced.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,N).\n*\n*  S       (output) DOUBLE PRECISION array, dimension (N)\n*          If INFO = 0, S contains the scale factors for A.\n*\n*  SCOND   (output) DOUBLE PRECISION\n*          If INFO = 0, S contains the ratio of the smallest S(i) to\n*          the largest S(i).  If SCOND >= 0.1 and AMAX is neither too\n*          large nor too small, it is not worth scaling by S.\n*\n*  AMAX    (output) DOUBLE PRECISION\n*          Absolute value of largest matrix element.  If AMAX is very\n*          close to overflow or very close to underflow, the matrix\n*          should be scaled.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the i-th diagonal element is nonpositive.\n*\n'),(461,'spbequ_461.txt','      SUBROUTINE SPBEQU( UPLO, N, KD, AB, LDAB, S, SCOND, AMAX, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, KD, LDAB, N\n      REAL               AMAX, SCOND\n*     ..\n*     .. Array Arguments ..\n      REAL               AB( LDAB, * ), S( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SPBEQU computes row and column scalings intended to equilibrate a\n*  symmetric positive definite band matrix A and reduce its condition\n*  number (with respect to the two-norm).  S contains the scale factors,\n*  S(i) = 1/sqrt(A(i,i)), chosen so that the scaled matrix B with\n*  elements B(i,j) = S(i)*A(i,j)*S(j) has ones on the diagonal.  This\n*  choice of S puts the condition number of B within a factor N of the\n*  smallest possible condition number over all possible diagonal\n*  scalings.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangular of A is stored;\n*          = \'L\':  Lower triangular of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KD >= 0.\n*\n*  AB      (input) REAL array, dimension (LDAB,N)\n*          The upper or lower triangle of the symmetric band matrix A,\n*          stored in the first KD+1 rows of the array.  The j-th column\n*          of A is stored in the j-th column of the array AB as follows:\n*          if UPLO = \'U\', AB(kd+1+i-j,j) = A(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+kd).\n*\n*  LDAB     (input) INTEGER\n*          The leading dimension of the array A.  LDAB >= KD+1.\n*\n*  S       (output) REAL array, dimension (N)\n*          If INFO = 0, S contains the scale factors for A.\n*\n*  SCOND   (output) REAL\n*          If INFO = 0, S contains the ratio of the smallest S(i) to\n*          the largest S(i).  If SCOND >= 0.1 and AMAX is neither too\n*          large nor too small, it is not worth scaling by S.\n*\n*  AMAX    (output) REAL\n*          Absolute value of largest matrix element.  If AMAX is very\n*          close to overflow or very close to underflow, the matrix\n*          should be scaled.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  if INFO = i, the i-th diagonal element is nonpositive.\n*\n'),(462,'dpbequ_462.txt','      SUBROUTINE DPBEQU( UPLO, N, KD, AB, LDAB, S, SCOND, AMAX, INFO )\n*\n*  -- LAPACK routine (version 3.2.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     June 2010\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, KD, LDAB, N\n      DOUBLE PRECISION   AMAX, SCOND\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   AB( LDAB, * ), S( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DPBEQU computes row and column scalings intended to equilibrate a\n*  symmetric positive definite band matrix A and reduce its condition\n*  number (with respect to the two-norm).  S contains the scale factors,\n*  S(i) = 1/sqrt(A(i,i)), chosen so that the scaled matrix B with\n*  elements B(i,j) = S(i)*A(i,j)*S(j) has ones on the diagonal.  This\n*  choice of S puts the condition number of B within a factor N of the\n*  smallest possible condition number over all possible diagonal\n*  scalings.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangular of A is stored;\n*          = \'L\':  Lower triangular of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KD >= 0.\n*\n*  AB      (input) DOUBLE PRECISION array, dimension (LDAB,N)\n*          The upper or lower triangle of the symmetric band matrix A,\n*          stored in the first KD+1 rows of the array.  The j-th column\n*          of A is stored in the j-th column of the array AB as follows:\n*          if UPLO = \'U\', AB(kd+1+i-j,j) = A(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+kd).\n*\n*  LDAB    (input) INTEGER\n*          The leading dimension of the array A.  LDAB >= KD+1.\n*\n*  S       (output) DOUBLE PRECISION array, dimension (N)\n*          If INFO = 0, S contains the scale factors for A.\n*\n*  SCOND   (output) DOUBLE PRECISION\n*          If INFO = 0, S contains the ratio of the smallest S(i) to\n*          the largest S(i).  If SCOND >= 0.1 and AMAX is neither too\n*          large nor too small, it is not worth scaling by S.\n*\n*  AMAX    (output) DOUBLE PRECISION\n*          Absolute value of largest matrix element.  If AMAX is very\n*          close to overflow or very close to underflow, the matrix\n*          should be scaled.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  if INFO = i, the i-th diagonal element is nonpositive.\n*\n'),(463,'cpbequ_463.txt','      SUBROUTINE CPBEQU( UPLO, N, KD, AB, LDAB, S, SCOND, AMAX, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, KD, LDAB, N\n      REAL               AMAX, SCOND\n*     ..\n*     .. Array Arguments ..\n      REAL               S( * )\n      COMPLEX            AB( LDAB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CPBEQU computes row and column scalings intended to equilibrate a\n*  Hermitian positive definite band matrix A and reduce its condition\n*  number (with respect to the two-norm).  S contains the scale factors,\n*  S(i) = 1/sqrt(A(i,i)), chosen so that the scaled matrix B with\n*  elements B(i,j) = S(i)*A(i,j)*S(j) has ones on the diagonal.  This\n*  choice of S puts the condition number of B within a factor N of the\n*  smallest possible condition number over all possible diagonal\n*  scalings.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangular of A is stored;\n*          = \'L\':  Lower triangular of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KD >= 0.\n*\n*  AB      (input) COMPLEX array, dimension (LDAB,N)\n*          The upper or lower triangle of the Hermitian band matrix A,\n*          stored in the first KD+1 rows of the array.  The j-th column\n*          of A is stored in the j-th column of the array AB as follows:\n*          if UPLO = \'U\', AB(kd+1+i-j,j) = A(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+kd).\n*\n*  LDAB     (input) INTEGER\n*          The leading dimension of the array A.  LDAB >= KD+1.\n*\n*  S       (output) REAL array, dimension (N)\n*          If INFO = 0, S contains the scale factors for A.\n*\n*  SCOND   (output) REAL\n*          If INFO = 0, S contains the ratio of the smallest S(i) to\n*          the largest S(i).  If SCOND >= 0.1 and AMAX is neither too\n*          large nor too small, it is not worth scaling by S.\n*\n*  AMAX    (output) REAL\n*          Absolute value of largest matrix element.  If AMAX is very\n*          close to overflow or very close to underflow, the matrix\n*          should be scaled.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  if INFO = i, the i-th diagonal element is nonpositive.\n*\n'),(464,'zpbequ_464.txt','      SUBROUTINE ZPBEQU( UPLO, N, KD, AB, LDAB, S, SCOND, AMAX, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, KD, LDAB, N\n      DOUBLE PRECISION   AMAX, SCOND\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   S( * )\n      COMPLEX*16         AB( LDAB, * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZPBEQU computes row and column scalings intended to equilibrate a\n*  Hermitian positive definite band matrix A and reduce its condition\n*  number (with respect to the two-norm).  S contains the scale factors,\n*  S(i) = 1/sqrt(A(i,i)), chosen so that the scaled matrix B with\n*  elements B(i,j) = S(i)*A(i,j)*S(j) has ones on the diagonal.  This\n*  choice of S puts the condition number of B within a factor N of the\n*  smallest possible condition number over all possible diagonal\n*  scalings.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangular of A is stored;\n*          = \'L\':  Lower triangular of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  KD      (input) INTEGER\n*          The number of superdiagonals of the matrix A if UPLO = \'U\',\n*          or the number of subdiagonals if UPLO = \'L\'.  KD >= 0.\n*\n*  AB      (input) COMPLEX*16 array, dimension (LDAB,N)\n*          The upper or lower triangle of the Hermitian band matrix A,\n*          stored in the first KD+1 rows of the array.  The j-th column\n*          of A is stored in the j-th column of the array AB as follows:\n*          if UPLO = \'U\', AB(kd+1+i-j,j) = A(i,j) for max(1,j-kd)<=i<=j;\n*          if UPLO = \'L\', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+kd).\n*\n*  LDAB     (input) INTEGER\n*          The leading dimension of the array A.  LDAB >= KD+1.\n*\n*  S       (output) DOUBLE PRECISION array, dimension (N)\n*          If INFO = 0, S contains the scale factors for A.\n*\n*  SCOND   (output) DOUBLE PRECISION\n*          If INFO = 0, S contains the ratio of the smallest S(i) to\n*          the largest S(i).  If SCOND >= 0.1 and AMAX is neither too\n*          large nor too small, it is not worth scaling by S.\n*\n*  AMAX    (output) DOUBLE PRECISION\n*          Absolute value of largest matrix element.  If AMAX is very\n*          close to overflow or very close to underflow, the matrix\n*          should be scaled.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  if INFO = i, the i-th diagonal element is nonpositive.\n*\n'),(465,'sppequ_465.txt','      SUBROUTINE SPPEQU( UPLO, N, AP, S, SCOND, AMAX, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, N\n      REAL               AMAX, SCOND\n*     ..\n*     .. Array Arguments ..\n      REAL               AP( * ), S( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SPPEQU computes row and column scalings intended to equilibrate a\n*  symmetric positive definite matrix A in packed storage and reduce\n*  its condition number (with respect to the two-norm).  S contains the\n*  scale factors, S(i)=1/sqrt(A(i,i)), chosen so that the scaled matrix\n*  B with elements B(i,j)=S(i)*A(i,j)*S(j) has ones on the diagonal.\n*  This choice of S puts the condition number of B within a factor N of\n*  the smallest possible condition number over all possible diagonal\n*  scalings.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input) REAL array, dimension (N*(N+1)/2)\n*          The upper or lower triangle of the symmetric matrix A, packed\n*          columnwise in a linear array.  The j-th column of A is stored\n*          in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = A(i,j) for j<=i<=n.\n*\n*  S       (output) REAL array, dimension (N)\n*          If INFO = 0, S contains the scale factors for A.\n*\n*  SCOND   (output) REAL\n*          If INFO = 0, S contains the ratio of the smallest S(i) to\n*          the largest S(i).  If SCOND >= 0.1 and AMAX is neither too\n*          large nor too small, it is not worth scaling by S.\n*\n*  AMAX    (output) REAL\n*          Absolute value of largest matrix element.  If AMAX is very\n*          close to overflow or very close to underflow, the matrix\n*          should be scaled.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the i-th diagonal element is nonpositive.\n*\n'),(466,'dppequ_466.txt','      SUBROUTINE DPPEQU( UPLO, N, AP, S, SCOND, AMAX, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, N\n      DOUBLE PRECISION   AMAX, SCOND\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   AP( * ), S( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DPPEQU computes row and column scalings intended to equilibrate a\n*  symmetric positive definite matrix A in packed storage and reduce\n*  its condition number (with respect to the two-norm).  S contains the\n*  scale factors, S(i)=1/sqrt(A(i,i)), chosen so that the scaled matrix\n*  B with elements B(i,j)=S(i)*A(i,j)*S(j) has ones on the diagonal.\n*  This choice of S puts the condition number of B within a factor N of\n*  the smallest possible condition number over all possible diagonal\n*  scalings.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input) DOUBLE PRECISION array, dimension (N*(N+1)/2)\n*          The upper or lower triangle of the symmetric matrix A, packed\n*          columnwise in a linear array.  The j-th column of A is stored\n*          in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = A(i,j) for j<=i<=n.\n*\n*  S       (output) DOUBLE PRECISION array, dimension (N)\n*          If INFO = 0, S contains the scale factors for A.\n*\n*  SCOND   (output) DOUBLE PRECISION\n*          If INFO = 0, S contains the ratio of the smallest S(i) to\n*          the largest S(i).  If SCOND >= 0.1 and AMAX is neither too\n*          large nor too small, it is not worth scaling by S.\n*\n*  AMAX    (output) DOUBLE PRECISION\n*          Absolute value of largest matrix element.  If AMAX is very\n*          close to overflow or very close to underflow, the matrix\n*          should be scaled.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the i-th diagonal element is nonpositive.\n*\n'),(467,'cppequ_467.txt','      SUBROUTINE CPPEQU( UPLO, N, AP, S, SCOND, AMAX, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, N\n      REAL               AMAX, SCOND\n*     ..\n*     .. Array Arguments ..\n      REAL               S( * )\n      COMPLEX            AP( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CPPEQU computes row and column scalings intended to equilibrate a\n*  Hermitian positive definite matrix A in packed storage and reduce\n*  its condition number (with respect to the two-norm).  S contains the\n*  scale factors, S(i)=1/sqrt(A(i,i)), chosen so that the scaled matrix\n*  B with elements B(i,j)=S(i)*A(i,j)*S(j) has ones on the diagonal.\n*  This choice of S puts the condition number of B within a factor N of\n*  the smallest possible condition number over all possible diagonal\n*  scalings.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input) COMPLEX array, dimension (N*(N+1)/2)\n*          The upper or lower triangle of the Hermitian matrix A, packed\n*          columnwise in a linear array.  The j-th column of A is stored\n*          in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = A(i,j) for j<=i<=n.\n*\n*  S       (output) REAL array, dimension (N)\n*          If INFO = 0, S contains the scale factors for A.\n*\n*  SCOND   (output) REAL\n*          If INFO = 0, S contains the ratio of the smallest S(i) to\n*          the largest S(i).  If SCOND >= 0.1 and AMAX is neither too\n*          large nor too small, it is not worth scaling by S.\n*\n*  AMAX    (output) REAL\n*          Absolute value of largest matrix element.  If AMAX is very\n*          close to overflow or very close to underflow, the matrix\n*          should be scaled.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the i-th diagonal element is nonpositive.\n*\n'),(468,'zppequ_468.txt','      SUBROUTINE ZPPEQU( UPLO, N, AP, S, SCOND, AMAX, INFO )\n*\n*  -- LAPACK routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          UPLO\n      INTEGER            INFO, N\n      DOUBLE PRECISION   AMAX, SCOND\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   S( * )\n      COMPLEX*16         AP( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZPPEQU computes row and column scalings intended to equilibrate a\n*  Hermitian positive definite matrix A in packed storage and reduce\n*  its condition number (with respect to the two-norm).  S contains the\n*  scale factors, S(i)=1/sqrt(A(i,i)), chosen so that the scaled matrix\n*  B with elements B(i,j)=S(i)*A(i,j)*S(j) has ones on the diagonal.\n*  This choice of S puts the condition number of B within a factor N of\n*  the smallest possible condition number over all possible diagonal\n*  scalings.\n*\n*  Arguments\n*  =========\n*\n*  UPLO    (input) CHARACTER*1\n*          = \'U\':  Upper triangle of A is stored;\n*          = \'L\':  Lower triangle of A is stored.\n*\n*  N       (input) INTEGER\n*          The order of the matrix A.  N >= 0.\n*\n*  AP      (input) COMPLEX*16 array, dimension (N*(N+1)/2)\n*          The upper or lower triangle of the Hermitian matrix A, packed\n*          columnwise in a linear array.  The j-th column of A is stored\n*          in the array AP as follows:\n*          if UPLO = \'U\', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n*          if UPLO = \'L\', AP(i + (j-1)*(2n-j)/2) = A(i,j) for j<=i<=n.\n*\n*  S       (output) DOUBLE PRECISION array, dimension (N)\n*          If INFO = 0, S contains the scale factors for A.\n*\n*  SCOND   (output) DOUBLE PRECISION\n*          If INFO = 0, S contains the ratio of the smallest S(i) to\n*          the largest S(i).  If SCOND >= 0.1 and AMAX is neither too\n*          large nor too small, it is not worth scaling by S.\n*\n*  AMAX    (output) DOUBLE PRECISION\n*          Absolute value of largest matrix element.  If AMAX is very\n*          close to overflow or very close to underflow, the matrix\n*          should be scaled.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value\n*          > 0:  if INFO = i, the i-th diagonal element is nonpositive.\n*\n'),(469,'sgesvd_469.txt','      SUBROUTINE SGESVD( JOBU, JOBVT, M, N, A, LDA, S, U, LDU, VT, LDVT,\n     $                   WORK, LWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBU, JOBVT\n      INTEGER            INFO, LDA, LDU, LDVT, LWORK, M, N\n*     ..\n*     .. Array Arguments ..\n      REAL               A( LDA, * ), S( * ), U( LDU, * ),\n     $                   VT( LDVT, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SGESVD computes the singular value decomposition (SVD) of a real\n*  M-by-N matrix A, optionally computing the left and/or right singular\n*  vectors. The SVD is written\n*\n*       A = U * SIGMA * transpose(V)\n*\n*  where SIGMA is an M-by-N matrix which is zero except for its\n*  min(m,n) diagonal elements, U is an M-by-M orthogonal matrix, and\n*  V is an N-by-N orthogonal matrix.  The diagonal elements of SIGMA\n*  are the singular values of A; they are real and non-negative, and\n*  are returned in descending order.  The first min(m,n) columns of\n*  U and V are the left and right singular vectors of A.\n*\n*  Note that the routine returns V**T, not V.\n*\n*  Arguments\n*  =========\n*\n*  JOBU    (input) CHARACTER*1\n*          Specifies options for computing all or part of the matrix U:\n*          = \'A\':  all M columns of U are returned in array U:\n*          = \'S\':  the first min(m,n) columns of U (the left singular\n*                  vectors) are returned in the array U;\n*          = \'O\':  the first min(m,n) columns of U (the left singular\n*                  vectors) are overwritten on the array A;\n*          = \'N\':  no columns of U (no left singular vectors) are\n*                  computed.\n*\n*  JOBVT   (input) CHARACTER*1\n*          Specifies options for computing all or part of the matrix\n*          V**T:\n*          = \'A\':  all N rows of V**T are returned in the array VT;\n*          = \'S\':  the first min(m,n) rows of V**T (the right singular\n*                  vectors) are returned in the array VT;\n*          = \'O\':  the first min(m,n) rows of V**T (the right singular\n*                  vectors) are overwritten on the array A;\n*          = \'N\':  no rows of V**T (no right singular vectors) are\n*                  computed.\n*\n*          JOBVT and JOBU cannot both be \'O\'.\n*\n*  M       (input) INTEGER\n*          The number of rows of the input matrix A.  M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the input matrix A.  N >= 0.\n*\n*  A       (input/output) REAL array, dimension (LDA,N)\n*          On entry, the M-by-N matrix A.\n*          On exit,\n*          if JOBU = \'O\',  A is overwritten with the first min(m,n)\n*                          columns of U (the left singular vectors,\n*                          stored columnwise);\n*          if JOBVT = \'O\', A is overwritten with the first min(m,n)\n*                          rows of V**T (the right singular vectors,\n*                          stored rowwise);\n*          if JOBU .ne. \'O\' and JOBVT .ne. \'O\', the contents of A\n*                          are destroyed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,M).\n*\n*  S       (output) REAL array, dimension (min(M,N))\n*          The singular values of A, sorted so that S(i) >= S(i+1).\n*\n*  U       (output) REAL array, dimension (LDU,UCOL)\n*          (LDU,M) if JOBU = \'A\' or (LDU,min(M,N)) if JOBU = \'S\'.\n*          If JOBU = \'A\', U contains the M-by-M orthogonal matrix U;\n*          if JOBU = \'S\', U contains the first min(m,n) columns of U\n*          (the left singular vectors, stored columnwise);\n*          if JOBU = \'N\' or \'O\', U is not referenced.\n*\n*  LDU     (input) INTEGER\n*          The leading dimension of the array U.  LDU >= 1; if\n*          JOBU = \'S\' or \'A\', LDU >= M.\n*\n*  VT      (output) REAL array, dimension (LDVT,N)\n*          If JOBVT = \'A\', VT contains the N-by-N orthogonal matrix\n*          V**T;\n*          if JOBVT = \'S\', VT contains the first min(m,n) rows of\n*          V**T (the right singular vectors, stored rowwise);\n*          if JOBVT = \'N\' or \'O\', VT is not referenced.\n*\n*  LDVT    (input) INTEGER\n*          The leading dimension of the array VT.  LDVT >= 1; if\n*          JOBVT = \'A\', LDVT >= N; if JOBVT = \'S\', LDVT >= min(M,N).\n*\n*  WORK    (workspace/output) REAL array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK;\n*          if INFO > 0, WORK(2:MIN(M,N)) contains the unconverged\n*          superdiagonal elements of an upper bidiagonal matrix B\n*          whose diagonal is in S (not necessarily sorted). B\n*          satisfies A = U * B * VT, so it has the same singular values\n*          as A, and singular vectors related by U and VT.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.\n*          LWORK >= MAX(1,5*MIN(M,N)) for the paths (see comments inside code):\n*             - PATH 1  (M much larger than N, JOBU=\'N\') \n*             - PATH 1t (N much larger than M, JOBVT=\'N\')\n*          LWORK >= MAX(1,3*MIN(M,N)+MAX(M,N),5*MIN(M,N)) for the other paths\n*          For good performance, LWORK should generally be larger.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit.\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  if SBDSQR did not converge, INFO specifies how many\n*                superdiagonals of an intermediate bidiagonal form B\n*                did not converge to zero. See the description of WORK\n*                above for details.\n*\n'),(470,'dgesvd_470.txt','      SUBROUTINE DGESVD( JOBU, JOBVT, M, N, A, LDA, S, U, LDU, VT, LDVT,\n     $                   WORK, LWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBU, JOBVT\n      INTEGER            INFO, LDA, LDU, LDVT, LWORK, M, N\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   A( LDA, * ), S( * ), U( LDU, * ),\n     $                   VT( LDVT, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DGESVD computes the singular value decomposition (SVD) of a real\n*  M-by-N matrix A, optionally computing the left and/or right singular\n*  vectors. The SVD is written\n*\n*       A = U * SIGMA * transpose(V)\n*\n*  where SIGMA is an M-by-N matrix which is zero except for its\n*  min(m,n) diagonal elements, U is an M-by-M orthogonal matrix, and\n*  V is an N-by-N orthogonal matrix.  The diagonal elements of SIGMA\n*  are the singular values of A; they are real and non-negative, and\n*  are returned in descending order.  The first min(m,n) columns of\n*  U and V are the left and right singular vectors of A.\n*\n*  Note that the routine returns V**T, not V.\n*\n*  Arguments\n*  =========\n*\n*  JOBU    (input) CHARACTER*1\n*          Specifies options for computing all or part of the matrix U:\n*          = \'A\':  all M columns of U are returned in array U:\n*          = \'S\':  the first min(m,n) columns of U (the left singular\n*                  vectors) are returned in the array U;\n*          = \'O\':  the first min(m,n) columns of U (the left singular\n*                  vectors) are overwritten on the array A;\n*          = \'N\':  no columns of U (no left singular vectors) are\n*                  computed.\n*\n*  JOBVT   (input) CHARACTER*1\n*          Specifies options for computing all or part of the matrix\n*          V**T:\n*          = \'A\':  all N rows of V**T are returned in the array VT;\n*          = \'S\':  the first min(m,n) rows of V**T (the right singular\n*                  vectors) are returned in the array VT;\n*          = \'O\':  the first min(m,n) rows of V**T (the right singular\n*                  vectors) are overwritten on the array A;\n*          = \'N\':  no rows of V**T (no right singular vectors) are\n*                  computed.\n*\n*          JOBVT and JOBU cannot both be \'O\'.\n*\n*  M       (input) INTEGER\n*          The number of rows of the input matrix A.  M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the input matrix A.  N >= 0.\n*\n*  A       (input/output) DOUBLE PRECISION array, dimension (LDA,N)\n*          On entry, the M-by-N matrix A.\n*          On exit,\n*          if JOBU = \'O\',  A is overwritten with the first min(m,n)\n*                          columns of U (the left singular vectors,\n*                          stored columnwise);\n*          if JOBVT = \'O\', A is overwritten with the first min(m,n)\n*                          rows of V**T (the right singular vectors,\n*                          stored rowwise);\n*          if JOBU .ne. \'O\' and JOBVT .ne. \'O\', the contents of A\n*                          are destroyed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,M).\n*\n*  S       (output) DOUBLE PRECISION array, dimension (min(M,N))\n*          The singular values of A, sorted so that S(i) >= S(i+1).\n*\n*  U       (output) DOUBLE PRECISION array, dimension (LDU,UCOL)\n*          (LDU,M) if JOBU = \'A\' or (LDU,min(M,N)) if JOBU = \'S\'.\n*          If JOBU = \'A\', U contains the M-by-M orthogonal matrix U;\n*          if JOBU = \'S\', U contains the first min(m,n) columns of U\n*          (the left singular vectors, stored columnwise);\n*          if JOBU = \'N\' or \'O\', U is not referenced.\n*\n*  LDU     (input) INTEGER\n*          The leading dimension of the array U.  LDU >= 1; if\n*          JOBU = \'S\' or \'A\', LDU >= M.\n*\n*  VT      (output) DOUBLE PRECISION array, dimension (LDVT,N)\n*          If JOBVT = \'A\', VT contains the N-by-N orthogonal matrix\n*          V**T;\n*          if JOBVT = \'S\', VT contains the first min(m,n) rows of\n*          V**T (the right singular vectors, stored rowwise);\n*          if JOBVT = \'N\' or \'O\', VT is not referenced.\n*\n*  LDVT    (input) INTEGER\n*          The leading dimension of the array VT.  LDVT >= 1; if\n*          JOBVT = \'A\', LDVT >= N; if JOBVT = \'S\', LDVT >= min(M,N).\n*\n*  WORK    (workspace/output) DOUBLE PRECISION array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK;\n*          if INFO > 0, WORK(2:MIN(M,N)) contains the unconverged\n*          superdiagonal elements of an upper bidiagonal matrix B\n*          whose diagonal is in S (not necessarily sorted). B\n*          satisfies A = U * B * VT, so it has the same singular values\n*          as A, and singular vectors related by U and VT.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.\n*          LWORK >= MAX(1,5*MIN(M,N)) for the paths (see comments inside code):\n*             - PATH 1  (M much larger than N, JOBU=\'N\') \n*             - PATH 1t (N much larger than M, JOBVT=\'N\')\n*          LWORK >= MAX(1,3*MIN(M,N)+MAX(M,N),5*MIN(M,N)) for the other paths\n*          For good performance, LWORK should generally be larger.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit.\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  if DBDSQR did not converge, INFO specifies how many\n*                superdiagonals of an intermediate bidiagonal form B\n*                did not converge to zero. See the description of WORK\n*                above for details.\n*\n'),(471,'cgesvd_471.txt','      SUBROUTINE CGESVD( JOBU, JOBVT, M, N, A, LDA, S, U, LDU, VT, LDVT,\n     $                   WORK, LWORK, RWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBU, JOBVT\n      INTEGER            INFO, LDA, LDU, LDVT, LWORK, M, N\n*     ..\n*     .. Array Arguments ..\n      REAL               RWORK( * ), S( * )\n      COMPLEX            A( LDA, * ), U( LDU, * ), VT( LDVT, * ),\n     $                   WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CGESVD computes the singular value decomposition (SVD) of a complex\n*  M-by-N matrix A, optionally computing the left and/or right singular\n*  vectors. The SVD is written\n*\n*       A = U * SIGMA * conjugate-transpose(V)\n*\n*  where SIGMA is an M-by-N matrix which is zero except for its\n*  min(m,n) diagonal elements, U is an M-by-M unitary matrix, and\n*  V is an N-by-N unitary matrix.  The diagonal elements of SIGMA\n*  are the singular values of A; they are real and non-negative, and\n*  are returned in descending order.  The first min(m,n) columns of\n*  U and V are the left and right singular vectors of A.\n*\n*  Note that the routine returns V**H, not V.\n*\n*  Arguments\n*  =========\n*\n*  JOBU    (input) CHARACTER*1\n*          Specifies options for computing all or part of the matrix U:\n*          = \'A\':  all M columns of U are returned in array U:\n*          = \'S\':  the first min(m,n) columns of U (the left singular\n*                  vectors) are returned in the array U;\n*          = \'O\':  the first min(m,n) columns of U (the left singular\n*                  vectors) are overwritten on the array A;\n*          = \'N\':  no columns of U (no left singular vectors) are\n*                  computed.\n*\n*  JOBVT   (input) CHARACTER*1\n*          Specifies options for computing all or part of the matrix\n*          V**H:\n*          = \'A\':  all N rows of V**H are returned in the array VT;\n*          = \'S\':  the first min(m,n) rows of V**H (the right singular\n*                  vectors) are returned in the array VT;\n*          = \'O\':  the first min(m,n) rows of V**H (the right singular\n*                  vectors) are overwritten on the array A;\n*          = \'N\':  no rows of V**H (no right singular vectors) are\n*                  computed.\n*\n*          JOBVT and JOBU cannot both be \'O\'.\n*\n*  M       (input) INTEGER\n*          The number of rows of the input matrix A.  M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the input matrix A.  N >= 0.\n*\n*  A       (input/output) COMPLEX array, dimension (LDA,N)\n*          On entry, the M-by-N matrix A.\n*          On exit,\n*          if JOBU = \'O\',  A is overwritten with the first min(m,n)\n*                          columns of U (the left singular vectors,\n*                          stored columnwise);\n*          if JOBVT = \'O\', A is overwritten with the first min(m,n)\n*                          rows of V**H (the right singular vectors,\n*                          stored rowwise);\n*          if JOBU .ne. \'O\' and JOBVT .ne. \'O\', the contents of A\n*                          are destroyed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,M).\n*\n*  S       (output) REAL array, dimension (min(M,N))\n*          The singular values of A, sorted so that S(i) >= S(i+1).\n*\n*  U       (output) COMPLEX array, dimension (LDU,UCOL)\n*          (LDU,M) if JOBU = \'A\' or (LDU,min(M,N)) if JOBU = \'S\'.\n*          If JOBU = \'A\', U contains the M-by-M unitary matrix U;\n*          if JOBU = \'S\', U contains the first min(m,n) columns of U\n*          (the left singular vectors, stored columnwise);\n*          if JOBU = \'N\' or \'O\', U is not referenced.\n*\n*  LDU     (input) INTEGER\n*          The leading dimension of the array U.  LDU >= 1; if\n*          JOBU = \'S\' or \'A\', LDU >= M.\n*\n*  VT      (output) COMPLEX array, dimension (LDVT,N)\n*          If JOBVT = \'A\', VT contains the N-by-N unitary matrix\n*          V**H;\n*          if JOBVT = \'S\', VT contains the first min(m,n) rows of\n*          V**H (the right singular vectors, stored rowwise);\n*          if JOBVT = \'N\' or \'O\', VT is not referenced.\n*\n*  LDVT    (input) INTEGER\n*          The leading dimension of the array VT.  LDVT >= 1; if\n*          JOBVT = \'A\', LDVT >= N; if JOBVT = \'S\', LDVT >= min(M,N).\n*\n*  WORK    (workspace/output) COMPLEX array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.\n*          LWORK >=  MAX(1,2*MIN(M,N)+MAX(M,N)).\n*          For good performance, LWORK should generally be larger.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  RWORK   (workspace) REAL array, dimension (5*min(M,N))\n*          On exit, if INFO > 0, RWORK(1:MIN(M,N)-1) contains the\n*          unconverged superdiagonal elements of an upper bidiagonal\n*          matrix B whose diagonal is in S (not necessarily sorted).\n*          B satisfies A = U * B * VT, so it has the same singular\n*          values as A, and singular vectors related by U and VT.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit.\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  if CBDSQR did not converge, INFO specifies how many\n*                superdiagonals of an intermediate bidiagonal form B\n*                did not converge to zero. See the description of RWORK\n*                above for details.\n*\n'),(472,'zgesvd_472.txt','      SUBROUTINE ZGESVD( JOBU, JOBVT, M, N, A, LDA, S, U, LDU, VT, LDVT,\n     $                   WORK, LWORK, RWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     November 2006\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBU, JOBVT\n      INTEGER            INFO, LDA, LDU, LDVT, LWORK, M, N\n*     ..\n*     .. Array Arguments ..\n      DOUBLE PRECISION   RWORK( * ), S( * )\n      COMPLEX*16         A( LDA, * ), U( LDU, * ), VT( LDVT, * ),\n     $                   WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZGESVD computes the singular value decomposition (SVD) of a complex\n*  M-by-N matrix A, optionally computing the left and/or right singular\n*  vectors. The SVD is written\n*\n*       A = U * SIGMA * conjugate-transpose(V)\n*\n*  where SIGMA is an M-by-N matrix which is zero except for its\n*  min(m,n) diagonal elements, U is an M-by-M unitary matrix, and\n*  V is an N-by-N unitary matrix.  The diagonal elements of SIGMA\n*  are the singular values of A; they are real and non-negative, and\n*  are returned in descending order.  The first min(m,n) columns of\n*  U and V are the left and right singular vectors of A.\n*\n*  Note that the routine returns V**H, not V.\n*\n*  Arguments\n*  =========\n*\n*  JOBU    (input) CHARACTER*1\n*          Specifies options for computing all or part of the matrix U:\n*          = \'A\':  all M columns of U are returned in array U:\n*          = \'S\':  the first min(m,n) columns of U (the left singular\n*                  vectors) are returned in the array U;\n*          = \'O\':  the first min(m,n) columns of U (the left singular\n*                  vectors) are overwritten on the array A;\n*          = \'N\':  no columns of U (no left singular vectors) are\n*                  computed.\n*\n*  JOBVT   (input) CHARACTER*1\n*          Specifies options for computing all or part of the matrix\n*          V**H:\n*          = \'A\':  all N rows of V**H are returned in the array VT;\n*          = \'S\':  the first min(m,n) rows of V**H (the right singular\n*                  vectors) are returned in the array VT;\n*          = \'O\':  the first min(m,n) rows of V**H (the right singular\n*                  vectors) are overwritten on the array A;\n*          = \'N\':  no rows of V**H (no right singular vectors) are\n*                  computed.\n*\n*          JOBVT and JOBU cannot both be \'O\'.\n*\n*  M       (input) INTEGER\n*          The number of rows of the input matrix A.  M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the input matrix A.  N >= 0.\n*\n*  A       (input/output) COMPLEX*16 array, dimension (LDA,N)\n*          On entry, the M-by-N matrix A.\n*          On exit,\n*          if JOBU = \'O\',  A is overwritten with the first min(m,n)\n*                          columns of U (the left singular vectors,\n*                          stored columnwise);\n*          if JOBVT = \'O\', A is overwritten with the first min(m,n)\n*                          rows of V**H (the right singular vectors,\n*                          stored rowwise);\n*          if JOBU .ne. \'O\' and JOBVT .ne. \'O\', the contents of A\n*                          are destroyed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,M).\n*\n*  S       (output) DOUBLE PRECISION array, dimension (min(M,N))\n*          The singular values of A, sorted so that S(i) >= S(i+1).\n*\n*  U       (output) COMPLEX*16 array, dimension (LDU,UCOL)\n*          (LDU,M) if JOBU = \'A\' or (LDU,min(M,N)) if JOBU = \'S\'.\n*          If JOBU = \'A\', U contains the M-by-M unitary matrix U;\n*          if JOBU = \'S\', U contains the first min(m,n) columns of U\n*          (the left singular vectors, stored columnwise);\n*          if JOBU = \'N\' or \'O\', U is not referenced.\n*\n*  LDU     (input) INTEGER\n*          The leading dimension of the array U.  LDU >= 1; if\n*          JOBU = \'S\' or \'A\', LDU >= M.\n*\n*  VT      (output) COMPLEX*16 array, dimension (LDVT,N)\n*          If JOBVT = \'A\', VT contains the N-by-N unitary matrix\n*          V**H;\n*          if JOBVT = \'S\', VT contains the first min(m,n) rows of\n*          V**H (the right singular vectors, stored rowwise);\n*          if JOBVT = \'N\' or \'O\', VT is not referenced.\n*\n*  LDVT    (input) INTEGER\n*          The leading dimension of the array VT.  LDVT >= 1; if\n*          JOBVT = \'A\', LDVT >= N; if JOBVT = \'S\', LDVT >= min(M,N).\n*\n*  WORK    (workspace/output) COMPLEX*16 array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK.\n*          LWORK >=  MAX(1,2*MIN(M,N)+MAX(M,N)).\n*          For good performance, LWORK should generally be larger.\n*\n*          If LWORK = -1, then a workspace query is assumed; the routine\n*          only calculates the optimal size of the WORK array, returns\n*          this value as the first entry of the WORK array, and no error\n*          message related to LWORK is issued by XERBLA.\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (5*min(M,N))\n*          On exit, if INFO > 0, RWORK(1:MIN(M,N)-1) contains the\n*          unconverged superdiagonal elements of an upper bidiagonal\n*          matrix B whose diagonal is in S (not necessarily sorted).\n*          B satisfies A = U * B * VT, so it has the same singular\n*          values as A, and singular vectors related by U and VT.\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit.\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  if ZBDSQR did not converge, INFO specifies how many\n*                superdiagonals of an intermediate bidiagonal form B\n*                did not converge to zero. See the description of RWORK\n*                above for details.\n*\n'),(473,'sgesdd_473.txt','      SUBROUTINE SGESDD( JOBZ, M, N, A, LDA, S, U, LDU, VT, LDVT, WORK,\n     $                   LWORK, IWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2.1)                                  --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     March 2009\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ\n      INTEGER            INFO, LDA, LDU, LDVT, LWORK, M, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      REAL               A( LDA, * ), S( * ), U( LDU, * ),\n     $                   VT( LDVT, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SGESDD computes the singular value decomposition (SVD) of a real\n*  M-by-N matrix A, optionally computing the left and right singular\n*  vectors.  If singular vectors are desired, it uses a\n*  divide-and-conquer algorithm.\n*\n*  The SVD is written\n*\n*       A = U * SIGMA * transpose(V)\n*\n*  where SIGMA is an M-by-N matrix which is zero except for its\n*  min(m,n) diagonal elements, U is an M-by-M orthogonal matrix, and\n*  V is an N-by-N orthogonal matrix.  The diagonal elements of SIGMA\n*  are the singular values of A; they are real and non-negative, and\n*  are returned in descending order.  The first min(m,n) columns of\n*  U and V are the left and right singular vectors of A.\n*\n*  Note that the routine returns VT = V**T, not V.\n*\n*  The divide and conquer algorithm makes very mild assumptions about\n*  floating point arithmetic. It will work on machines with a guard\n*  digit in add/subtract, or on those binary machines without guard\n*  digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\n*  Cray-2. It could conceivably fail on hexadecimal or decimal machines\n*  without guard digits, but we know of none.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          Specifies options for computing all or part of the matrix U:\n*          = \'A\':  all M columns of U and all N rows of V**T are\n*                  returned in the arrays U and VT;\n*          = \'S\':  the first min(M,N) columns of U and the first\n*                  min(M,N) rows of V**T are returned in the arrays U\n*                  and VT;\n*          = \'O\':  If M >= N, the first N columns of U are overwritten\n*                  on the array A and all rows of V**T are returned in\n*                  the array VT;\n*                  otherwise, all columns of U are returned in the\n*                  array U and the first M rows of V**T are overwritten\n*                  in the array A;\n*          = \'N\':  no columns of U or rows of V**T are computed.\n*\n*  M       (input) INTEGER\n*          The number of rows of the input matrix A.  M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the input matrix A.  N >= 0.\n*\n*  A       (input/output) REAL array, dimension (LDA,N)\n*          On entry, the M-by-N matrix A.\n*          On exit,\n*          if JOBZ = \'O\',  A is overwritten with the first N columns\n*                          of U (the left singular vectors, stored\n*                          columnwise) if M >= N;\n*                          A is overwritten with the first M rows\n*                          of V**T (the right singular vectors, stored\n*                          rowwise) otherwise.\n*          if JOBZ .ne. \'O\', the contents of A are destroyed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,M).\n*\n*  S       (output) REAL array, dimension (min(M,N))\n*          The singular values of A, sorted so that S(i) >= S(i+1).\n*\n*  U       (output) REAL array, dimension (LDU,UCOL)\n*          UCOL = M if JOBZ = \'A\' or JOBZ = \'O\' and M < N;\n*          UCOL = min(M,N) if JOBZ = \'S\'.\n*          If JOBZ = \'A\' or JOBZ = \'O\' and M < N, U contains the M-by-M\n*          orthogonal matrix U;\n*          if JOBZ = \'S\', U contains the first min(M,N) columns of U\n*          (the left singular vectors, stored columnwise);\n*          if JOBZ = \'O\' and M >= N, or JOBZ = \'N\', U is not referenced.\n*\n*  LDU     (input) INTEGER\n*          The leading dimension of the array U.  LDU >= 1; if\n*          JOBZ = \'S\' or \'A\' or JOBZ = \'O\' and M < N, LDU >= M.\n*\n*  VT      (output) REAL array, dimension (LDVT,N)\n*          If JOBZ = \'A\' or JOBZ = \'O\' and M >= N, VT contains the\n*          N-by-N orthogonal matrix V**T;\n*          if JOBZ = \'S\', VT contains the first min(M,N) rows of\n*          V**T (the right singular vectors, stored rowwise);\n*          if JOBZ = \'O\' and M < N, or JOBZ = \'N\', VT is not referenced.\n*\n*  LDVT    (input) INTEGER\n*          The leading dimension of the array VT.  LDVT >= 1; if\n*          JOBZ = \'A\' or JOBZ = \'O\' and M >= N, LDVT >= N;\n*          if JOBZ = \'S\', LDVT >= min(M,N).\n*\n*  WORK    (workspace/output) REAL array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK;\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK. LWORK >= 1.\n*          If JOBZ = \'N\',\n*            LWORK >= 3*min(M,N) + max(max(M,N),6*min(M,N)).\n*          If JOBZ = \'O\',\n*            LWORK >= 3*min(M,N) + \n*                     max(max(M,N),5*min(M,N)*min(M,N)+4*min(M,N)).\n*          If JOBZ = \'S\' or \'A\'\n*            LWORK >= 3*min(M,N) +\n*                     max(max(M,N),4*min(M,N)*min(M,N)+4*min(M,N)).\n*          For good performance, LWORK should generally be larger.\n*          If LWORK = -1 but other input arguments are legal, WORK(1)\n*          returns the optimal LWORK.\n*\n*  IWORK   (workspace) INTEGER array, dimension (8*min(M,N))\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit.\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  SBDSDC did not converge, updating process failed.\n*\n'),(474,'dgesdd_474.txt','      SUBROUTINE DGESDD( JOBZ, M, N, A, LDA, S, U, LDU, VT, LDVT, WORK,\n     $                   LWORK, IWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2.1)                                  --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     March 2009\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ\n      INTEGER            INFO, LDA, LDU, LDVT, LWORK, M, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      DOUBLE PRECISION   A( LDA, * ), S( * ), U( LDU, * ),\n     $                   VT( LDVT, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DGESDD computes the singular value decomposition (SVD) of a real\n*  M-by-N matrix A, optionally computing the left and right singular\n*  vectors.  If singular vectors are desired, it uses a\n*  divide-and-conquer algorithm.\n*\n*  The SVD is written\n*\n*       A = U * SIGMA * transpose(V)\n*\n*  where SIGMA is an M-by-N matrix which is zero except for its\n*  min(m,n) diagonal elements, U is an M-by-M orthogonal matrix, and\n*  V is an N-by-N orthogonal matrix.  The diagonal elements of SIGMA\n*  are the singular values of A; they are real and non-negative, and\n*  are returned in descending order.  The first min(m,n) columns of\n*  U and V are the left and right singular vectors of A.\n*\n*  Note that the routine returns VT = V**T, not V.\n*\n*  The divide and conquer algorithm makes very mild assumptions about\n*  floating point arithmetic. It will work on machines with a guard\n*  digit in add/subtract, or on those binary machines without guard\n*  digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\n*  Cray-2. It could conceivably fail on hexadecimal or decimal machines\n*  without guard digits, but we know of none.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          Specifies options for computing all or part of the matrix U:\n*          = \'A\':  all M columns of U and all N rows of V**T are\n*                  returned in the arrays U and VT;\n*          = \'S\':  the first min(M,N) columns of U and the first\n*                  min(M,N) rows of V**T are returned in the arrays U\n*                  and VT;\n*          = \'O\':  If M >= N, the first N columns of U are overwritten\n*                  on the array A and all rows of V**T are returned in\n*                  the array VT;\n*                  otherwise, all columns of U are returned in the\n*                  array U and the first M rows of V**T are overwritten\n*                  in the array A;\n*          = \'N\':  no columns of U or rows of V**T are computed.\n*\n*  M       (input) INTEGER\n*          The number of rows of the input matrix A.  M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the input matrix A.  N >= 0.\n*\n*  A       (input/output) DOUBLE PRECISION array, dimension (LDA,N)\n*          On entry, the M-by-N matrix A.\n*          On exit,\n*          if JOBZ = \'O\',  A is overwritten with the first N columns\n*                          of U (the left singular vectors, stored\n*                          columnwise) if M >= N;\n*                          A is overwritten with the first M rows\n*                          of V**T (the right singular vectors, stored\n*                          rowwise) otherwise.\n*          if JOBZ .ne. \'O\', the contents of A are destroyed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,M).\n*\n*  S       (output) DOUBLE PRECISION array, dimension (min(M,N))\n*          The singular values of A, sorted so that S(i) >= S(i+1).\n*\n*  U       (output) DOUBLE PRECISION array, dimension (LDU,UCOL)\n*          UCOL = M if JOBZ = \'A\' or JOBZ = \'O\' and M < N;\n*          UCOL = min(M,N) if JOBZ = \'S\'.\n*          If JOBZ = \'A\' or JOBZ = \'O\' and M < N, U contains the M-by-M\n*          orthogonal matrix U;\n*          if JOBZ = \'S\', U contains the first min(M,N) columns of U\n*          (the left singular vectors, stored columnwise);\n*          if JOBZ = \'O\' and M >= N, or JOBZ = \'N\', U is not referenced.\n*\n*  LDU     (input) INTEGER\n*          The leading dimension of the array U.  LDU >= 1; if\n*          JOBZ = \'S\' or \'A\' or JOBZ = \'O\' and M < N, LDU >= M.\n*\n*  VT      (output) DOUBLE PRECISION array, dimension (LDVT,N)\n*          If JOBZ = \'A\' or JOBZ = \'O\' and M >= N, VT contains the\n*          N-by-N orthogonal matrix V**T;\n*          if JOBZ = \'S\', VT contains the first min(M,N) rows of\n*          V**T (the right singular vectors, stored rowwise);\n*          if JOBZ = \'O\' and M < N, or JOBZ = \'N\', VT is not referenced.\n*\n*  LDVT    (input) INTEGER\n*          The leading dimension of the array VT.  LDVT >= 1; if\n*          JOBZ = \'A\' or JOBZ = \'O\' and M >= N, LDVT >= N;\n*          if JOBZ = \'S\', LDVT >= min(M,N).\n*\n*  WORK    (workspace/output) DOUBLE PRECISION array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK;\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK. LWORK >= 1.\n*          If JOBZ = \'N\',\n*            LWORK >= 3*min(M,N) + max(max(M,N),7*min(M,N)).\n*          If JOBZ = \'O\',\n*            LWORK >= 3*min(M,N) + \n*                     max(max(M,N),5*min(M,N)*min(M,N)+4*min(M,N)).\n*          If JOBZ = \'S\' or \'A\'\n*            LWORK >= 3*min(M,N) +\n*                     max(max(M,N),4*min(M,N)*min(M,N)+4*min(M,N)).\n*          For good performance, LWORK should generally be larger.\n*          If LWORK = -1 but other input arguments are legal, WORK(1)\n*          returns the optimal LWORK.\n*\n*  IWORK   (workspace) INTEGER array, dimension (8*min(M,N))\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit.\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  DBDSDC did not converge, updating process failed.\n*\n');
INSERT INTO `Driver_routineinfo` VALUES (475,'cgesdd_475.txt','      SUBROUTINE CGESDD( JOBZ, M, N, A, LDA, S, U, LDU, VT, LDVT,\n     $                   WORK, LWORK, RWORK, IWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     June 2010\n*     8-15-00:  Improve consistency of WS calculations (eca)\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ\n      INTEGER            INFO, LDA, LDU, LDVT, LWORK, M, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      REAL               RWORK( * ), S( * )\n      COMPLEX            A( LDA, * ), U( LDU, * ), VT( LDVT, * ),\n     $                   WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CGESDD computes the singular value decomposition (SVD) of a complex\n*  M-by-N matrix A, optionally computing the left and/or right singular\n*  vectors, by using divide-and-conquer method. The SVD is written\n*\n*       A = U * SIGMA * conjugate-transpose(V)\n*\n*  where SIGMA is an M-by-N matrix which is zero except for its\n*  min(m,n) diagonal elements, U is an M-by-M unitary matrix, and\n*  V is an N-by-N unitary matrix.  The diagonal elements of SIGMA\n*  are the singular values of A; they are real and non-negative, and\n*  are returned in descending order.  The first min(m,n) columns of\n*  U and V are the left and right singular vectors of A.\n*\n*  Note that the routine returns VT = V**H, not V.\n*\n*  The divide and conquer algorithm makes very mild assumptions about\n*  floating point arithmetic. It will work on machines with a guard\n*  digit in add/subtract, or on those binary machines without guard\n*  digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\n*  Cray-2. It could conceivably fail on hexadecimal or decimal machines\n*  without guard digits, but we know of none.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          Specifies options for computing all or part of the matrix U:\n*          = \'A\':  all M columns of U and all N rows of V**H are\n*                  returned in the arrays U and VT;\n*          = \'S\':  the first min(M,N) columns of U and the first\n*                  min(M,N) rows of V**H are returned in the arrays U\n*                  and VT;\n*          = \'O\':  If M >= N, the first N columns of U are overwritten\n*                  in the array A and all rows of V**H are returned in\n*                  the array VT;\n*                  otherwise, all columns of U are returned in the\n*                  array U and the first M rows of V**H are overwritten\n*                  in the array A;\n*          = \'N\':  no columns of U or rows of V**H are computed.\n*\n*  M       (input) INTEGER\n*          The number of rows of the input matrix A.  M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the input matrix A.  N >= 0.\n*\n*  A       (input/output) COMPLEX array, dimension (LDA,N)\n*          On entry, the M-by-N matrix A.\n*          On exit,\n*          if JOBZ = \'O\',  A is overwritten with the first N columns\n*                          of U (the left singular vectors, stored\n*                          columnwise) if M >= N;\n*                          A is overwritten with the first M rows\n*                          of V**H (the right singular vectors, stored\n*                          rowwise) otherwise.\n*          if JOBZ .ne. \'O\', the contents of A are destroyed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,M).\n*\n*  S       (output) REAL array, dimension (min(M,N))\n*          The singular values of A, sorted so that S(i) >= S(i+1).\n*\n*  U       (output) COMPLEX array, dimension (LDU,UCOL)\n*          UCOL = M if JOBZ = \'A\' or JOBZ = \'O\' and M < N;\n*          UCOL = min(M,N) if JOBZ = \'S\'.\n*          If JOBZ = \'A\' or JOBZ = \'O\' and M < N, U contains the M-by-M\n*          unitary matrix U;\n*          if JOBZ = \'S\', U contains the first min(M,N) columns of U\n*          (the left singular vectors, stored columnwise);\n*          if JOBZ = \'O\' and M >= N, or JOBZ = \'N\', U is not referenced.\n*\n*  LDU     (input) INTEGER\n*          The leading dimension of the array U.  LDU >= 1; if\n*          JOBZ = \'S\' or \'A\' or JOBZ = \'O\' and M < N, LDU >= M.\n*\n*  VT      (output) COMPLEX array, dimension (LDVT,N)\n*          If JOBZ = \'A\' or JOBZ = \'O\' and M >= N, VT contains the\n*          N-by-N unitary matrix V**H;\n*          if JOBZ = \'S\', VT contains the first min(M,N) rows of\n*          V**H (the right singular vectors, stored rowwise);\n*          if JOBZ = \'O\' and M < N, or JOBZ = \'N\', VT is not referenced.\n*\n*  LDVT    (input) INTEGER\n*          The leading dimension of the array VT.  LDVT >= 1; if\n*          JOBZ = \'A\' or JOBZ = \'O\' and M >= N, LDVT >= N;\n*          if JOBZ = \'S\', LDVT >= min(M,N).\n*\n*  WORK    (workspace/output) COMPLEX array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK. LWORK >= 1.\n*          if JOBZ = \'N\', LWORK >= 2*min(M,N)+max(M,N).\n*          if JOBZ = \'O\',\n*                LWORK >= 2*min(M,N)*min(M,N)+2*min(M,N)+max(M,N).\n*          if JOBZ = \'S\' or \'A\',\n*                LWORK >= min(M,N)*min(M,N)+2*min(M,N)+max(M,N).\n*          For good performance, LWORK should generally be larger.\n*\n*          If LWORK = -1, a workspace query is assumed.  The optimal\n*          size for the WORK array is calculated and stored in WORK(1),\n*          and no other work except argument checking is performed.\n*\n*  RWORK   (workspace) REAL array, dimension (MAX(1,LRWORK))\n*          If JOBZ = \'N\', LRWORK >= 5*min(M,N).\n*          Otherwise, \n*          LRWORK >= min(M,N)*max(5*min(M,N)+7,2*max(M,N)+2*min(M,N)+1)\n*\n*  IWORK   (workspace) INTEGER array, dimension (8*min(M,N))\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit.\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  The updating process of SBDSDC did not converge.\n*\n'),(476,'zgesdd_476.txt','      SUBROUTINE ZGESDD( JOBZ, M, N, A, LDA, S, U, LDU, VT, LDVT, WORK,\n     $                   LWORK, RWORK, IWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.2.2) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*     June 2010\n*     8-15-00:  Improve consistency of WS calculations (eca)\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBZ\n      INTEGER            INFO, LDA, LDU, LDVT, LWORK, M, N\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      DOUBLE PRECISION   RWORK( * ), S( * )\n      COMPLEX*16         A( LDA, * ), U( LDU, * ), VT( LDVT, * ),\n     $                   WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZGESDD computes the singular value decomposition (SVD) of a complex\n*  M-by-N matrix A, optionally computing the left and/or right singular\n*  vectors, by using divide-and-conquer method. The SVD is written\n*\n*       A = U * SIGMA * conjugate-transpose(V)\n*\n*  where SIGMA is an M-by-N matrix which is zero except for its\n*  min(m,n) diagonal elements, U is an M-by-M unitary matrix, and\n*  V is an N-by-N unitary matrix.  The diagonal elements of SIGMA\n*  are the singular values of A; they are real and non-negative, and\n*  are returned in descending order.  The first min(m,n) columns of\n*  U and V are the left and right singular vectors of A.\n*\n*  Note that the routine returns VT = V**H, not V.\n*\n*  The divide and conquer algorithm makes very mild assumptions about\n*  floating point arithmetic. It will work on machines with a guard\n*  digit in add/subtract, or on those binary machines without guard\n*  digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\n*  Cray-2. It could conceivably fail on hexadecimal or decimal machines\n*  without guard digits, but we know of none.\n*\n*  Arguments\n*  =========\n*\n*  JOBZ    (input) CHARACTER*1\n*          Specifies options for computing all or part of the matrix U:\n*          = \'A\':  all M columns of U and all N rows of V**H are\n*                  returned in the arrays U and VT;\n*          = \'S\':  the first min(M,N) columns of U and the first\n*                  min(M,N) rows of V**H are returned in the arrays U\n*                  and VT;\n*          = \'O\':  If M >= N, the first N columns of U are overwritten\n*                  in the array A and all rows of V**H are returned in\n*                  the array VT;\n*                  otherwise, all columns of U are returned in the\n*                  array U and the first M rows of V**H are overwritten\n*                  in the array A;\n*          = \'N\':  no columns of U or rows of V**H are computed.\n*\n*  M       (input) INTEGER\n*          The number of rows of the input matrix A.  M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the input matrix A.  N >= 0.\n*\n*  A       (input/output) COMPLEX*16 array, dimension (LDA,N)\n*          On entry, the M-by-N matrix A.\n*          On exit,\n*          if JOBZ = \'O\',  A is overwritten with the first N columns\n*                          of U (the left singular vectors, stored\n*                          columnwise) if M >= N;\n*                          A is overwritten with the first M rows\n*                          of V**H (the right singular vectors, stored\n*                          rowwise) otherwise.\n*          if JOBZ .ne. \'O\', the contents of A are destroyed.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A.  LDA >= max(1,M).\n*\n*  S       (output) DOUBLE PRECISION array, dimension (min(M,N))\n*          The singular values of A, sorted so that S(i) >= S(i+1).\n*\n*  U       (output) COMPLEX*16 array, dimension (LDU,UCOL)\n*          UCOL = M if JOBZ = \'A\' or JOBZ = \'O\' and M < N;\n*          UCOL = min(M,N) if JOBZ = \'S\'.\n*          If JOBZ = \'A\' or JOBZ = \'O\' and M < N, U contains the M-by-M\n*          unitary matrix U;\n*          if JOBZ = \'S\', U contains the first min(M,N) columns of U\n*          (the left singular vectors, stored columnwise);\n*          if JOBZ = \'O\' and M >= N, or JOBZ = \'N\', U is not referenced.\n*\n*  LDU     (input) INTEGER\n*          The leading dimension of the array U.  LDU >= 1; if\n*          JOBZ = \'S\' or \'A\' or JOBZ = \'O\' and M < N, LDU >= M.\n*\n*  VT      (output) COMPLEX*16 array, dimension (LDVT,N)\n*          If JOBZ = \'A\' or JOBZ = \'O\' and M >= N, VT contains the\n*          N-by-N unitary matrix V**H;\n*          if JOBZ = \'S\', VT contains the first min(M,N) rows of\n*          V**H (the right singular vectors, stored rowwise);\n*          if JOBZ = \'O\' and M < N, or JOBZ = \'N\', VT is not referenced.\n*\n*  LDVT    (input) INTEGER\n*          The leading dimension of the array VT.  LDVT >= 1; if\n*          JOBZ = \'A\' or JOBZ = \'O\' and M >= N, LDVT >= N;\n*          if JOBZ = \'S\', LDVT >= min(M,N).\n*\n*  WORK    (workspace/output) COMPLEX*16 array, dimension (MAX(1,LWORK))\n*          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n*\n*  LWORK   (input) INTEGER\n*          The dimension of the array WORK. LWORK >= 1.\n*          if JOBZ = \'N\', LWORK >= 2*min(M,N)+max(M,N).\n*          if JOBZ = \'O\',\n*                LWORK >= 2*min(M,N)*min(M,N)+2*min(M,N)+max(M,N).\n*          if JOBZ = \'S\' or \'A\',\n*                LWORK >= min(M,N)*min(M,N)+2*min(M,N)+max(M,N).\n*          For good performance, LWORK should generally be larger.\n*\n*          If LWORK = -1, a workspace query is assumed.  The optimal\n*          size for the WORK array is calculated and stored in WORK(1),\n*          and no other work except argument checking is performed.\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (MAX(1,LRWORK))\n*          If JOBZ = \'N\', LRWORK >= 5*min(M,N).\n*          Otherwise,\n*          LRWORK >= min(M,N)*max(5*min(M,N)+7,2*max(M,N)+2*min(M,N)+1)\n*\n*  IWORK   (workspace) INTEGER array, dimension (8*min(M,N))\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit.\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  The updating process of DBDSDC did not converge.\n*\n'),(477,'sggsvd_477.txt','      SUBROUTINE SGGSVD( JOBU, JOBV, JOBQ, M, N, P, K, L, A, LDA, B,\n     $                   LDB, ALPHA, BETA, U, LDU, V, LDV, Q, LDQ, WORK,\n     $                   IWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBQ, JOBU, JOBV\n      INTEGER            INFO, K, L, LDA, LDB, LDQ, LDU, LDV, M, N, P\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      REAL               A( LDA, * ), ALPHA( * ), B( LDB, * ),\n     $                   BETA( * ), Q( LDQ, * ), U( LDU, * ),\n     $                   V( LDV, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  SGGSVD computes the generalized singular value decomposition (GSVD)\n*  of an M-by-N real matrix A and P-by-N real matrix B:\n*\n*        U**T*A*Q = D1*( 0 R ),    V**T*B*Q = D2*( 0 R )\n*\n*  where U, V and Q are orthogonal matrices.\n*  Let K+L = the effective numerical rank of the matrix (A**T,B**T)**T,\n*  then R is a K+L-by-K+L nonsingular upper triangular matrix, D1 and\n*  D2 are M-by-(K+L) and P-by-(K+L) \"diagonal\" matrices and of the\n*  following structures, respectively:\n*\n*  If M-K-L >= 0,\n*\n*                      K  L\n*         D1 =     K ( I  0 )\n*                  L ( 0  C )\n*              M-K-L ( 0  0 )\n*\n*                    K  L\n*         D2 =   L ( 0  S )\n*              P-L ( 0  0 )\n*\n*                  N-K-L  K    L\n*    ( 0 R ) = K (  0   R11  R12 )\n*              L (  0    0   R22 )\n*\n*  where\n*\n*    C = diag( ALPHA(K+1), ... , ALPHA(K+L) ),\n*    S = diag( BETA(K+1),  ... , BETA(K+L) ),\n*    C**2 + S**2 = I.\n*\n*    R is stored in A(1:K+L,N-K-L+1:N) on exit.\n*\n*  If M-K-L < 0,\n*\n*                    K M-K K+L-M\n*         D1 =   K ( I  0    0   )\n*              M-K ( 0  C    0   )\n*\n*                      K M-K K+L-M\n*         D2 =   M-K ( 0  S    0  )\n*              K+L-M ( 0  0    I  )\n*                P-L ( 0  0    0  )\n*\n*                     N-K-L  K   M-K  K+L-M\n*    ( 0 R ) =     K ( 0    R11  R12  R13  )\n*                M-K ( 0     0   R22  R23  )\n*              K+L-M ( 0     0    0   R33  )\n*\n*  where\n*\n*    C = diag( ALPHA(K+1), ... , ALPHA(M) ),\n*    S = diag( BETA(K+1),  ... , BETA(M) ),\n*    C**2 + S**2 = I.\n*\n*    (R11 R12 R13 ) is stored in A(1:M, N-K-L+1:N), and R33 is stored\n*    ( 0  R22 R23 )\n*    in B(M-K+1:L,N+M-K-L+1:N) on exit.\n*\n*  The routine computes C, S, R, and optionally the orthogonal\n*  transformation matrices U, V and Q.\n*\n*  In particular, if B is an N-by-N nonsingular matrix, then the GSVD of\n*  A and B implicitly gives the SVD of A*inv(B):\n*                       A*inv(B) = U*(D1*inv(D2))*V**T.\n*  If ( A**T,B**T)**T  has orthonormal columns, then the GSVD of A and B is\n*  also equal to the CS decomposition of A and B. Furthermore, the GSVD\n*  can be used to derive the solution of the eigenvalue problem:\n*                       A**T*A x = lambda* B**T*B x.\n*  In some literature, the GSVD of A and B is presented in the form\n*                   U**T*A*X = ( 0 D1 ),   V**T*B*X = ( 0 D2 )\n*  where U and V are orthogonal and X is nonsingular, D1 and D2 are\n*  ``diagonal\'\'.  The former GSVD form can be converted to the latter\n*  form by taking the nonsingular matrix X as\n*\n*                       X = Q*( I   0    )\n*                             ( 0 inv(R) ).\n*\n*  Arguments\n*  =========\n*\n*  JOBU    (input) CHARACTER*1\n*          = \'U\':  Orthogonal matrix U is computed;\n*          = \'N\':  U is not computed.\n*\n*  JOBV    (input) CHARACTER*1\n*          = \'V\':  Orthogonal matrix V is computed;\n*          = \'N\':  V is not computed.\n*\n*  JOBQ    (input) CHARACTER*1\n*          = \'Q\':  Orthogonal matrix Q is computed;\n*          = \'N\':  Q is not computed.\n*\n*  M       (input) INTEGER\n*          The number of rows of the matrix A.  M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the matrices A and B.  N >= 0.\n*\n*  P       (input) INTEGER\n*          The number of rows of the matrix B.  P >= 0.\n*\n*  K       (output) INTEGER\n*  L       (output) INTEGER\n*          On exit, K and L specify the dimension of the subblocks\n*          described in the Purpose section.\n*          K + L = effective numerical rank of (A**T,B**T)**T.\n*\n*  A       (input/output) REAL array, dimension (LDA,N)\n*          On entry, the M-by-N matrix A.\n*          On exit, A contains the triangular matrix R, or part of R.\n*          See Purpose for details.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A. LDA >= max(1,M).\n*\n*  B       (input/output) REAL array, dimension (LDB,N)\n*          On entry, the P-by-N matrix B.\n*          On exit, B contains the triangular matrix R if M-K-L < 0.\n*          See Purpose for details.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B. LDB >= max(1,P).\n*\n*  ALPHA   (output) REAL array, dimension (N)\n*  BETA    (output) REAL array, dimension (N)\n*          On exit, ALPHA and BETA contain the generalized singular\n*          value pairs of A and B;\n*            ALPHA(1:K) = 1,\n*            BETA(1:K)  = 0,\n*          and if M-K-L >= 0,\n*            ALPHA(K+1:K+L) = C,\n*            BETA(K+1:K+L)  = S,\n*          or if M-K-L < 0,\n*            ALPHA(K+1:M)=C, ALPHA(M+1:K+L)=0\n*            BETA(K+1:M) =S, BETA(M+1:K+L) =1\n*          and\n*            ALPHA(K+L+1:N) = 0\n*            BETA(K+L+1:N)  = 0\n*\n*  U       (output) REAL array, dimension (LDU,M)\n*          If JOBU = \'U\', U contains the M-by-M orthogonal matrix U.\n*          If JOBU = \'N\', U is not referenced.\n*\n*  LDU     (input) INTEGER\n*          The leading dimension of the array U. LDU >= max(1,M) if\n*          JOBU = \'U\'; LDU >= 1 otherwise.\n*\n*  V       (output) REAL array, dimension (LDV,P)\n*          If JOBV = \'V\', V contains the P-by-P orthogonal matrix V.\n*          If JOBV = \'N\', V is not referenced.\n*\n*  LDV     (input) INTEGER\n*          The leading dimension of the array V. LDV >= max(1,P) if\n*          JOBV = \'V\'; LDV >= 1 otherwise.\n*\n*  Q       (output) REAL array, dimension (LDQ,N)\n*          If JOBQ = \'Q\', Q contains the N-by-N orthogonal matrix Q.\n*          If JOBQ = \'N\', Q is not referenced.\n*\n*  LDQ     (input) INTEGER\n*          The leading dimension of the array Q. LDQ >= max(1,N) if\n*          JOBQ = \'Q\'; LDQ >= 1 otherwise.\n*\n*  WORK    (workspace) REAL array,\n*                      dimension (max(3*N,M,P)+N)\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (N)\n*          On exit, IWORK stores the sorting information. More\n*          precisely, the following loop will sort ALPHA\n*             for I = K+1, min(M,K+L)\n*                 swap ALPHA(I) and ALPHA(IWORK(I))\n*             endfor\n*          such that ALPHA(1) >= ALPHA(2) >= ... >= ALPHA(N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  if INFO = 1, the Jacobi-type procedure failed to\n*                converge.  For further details, see subroutine STGSJA.\n*\n*  Internal Parameters\n*  ===================\n*\n*  TOLA    REAL\n*  TOLB    REAL\n*          TOLA and TOLB are the thresholds to determine the effective\n*          rank of (A**T,B**T)**T. Generally, they are set to\n*                   TOLA = MAX(M,N)*norm(A)*MACHEPS,\n*                   TOLB = MAX(P,N)*norm(B)*MACHEPS.\n*          The size of TOLA and TOLB may affect the size of backward\n*          errors of the decomposition.\n*\n'),(478,'dggsvd_478.txt','      SUBROUTINE DGGSVD( JOBU, JOBV, JOBQ, M, N, P, K, L, A, LDA, B,\n     $                   LDB, ALPHA, BETA, U, LDU, V, LDV, Q, LDQ, WORK,\n     $                   IWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBQ, JOBU, JOBV\n      INTEGER            INFO, K, L, LDA, LDB, LDQ, LDU, LDV, M, N, P\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      DOUBLE PRECISION   A( LDA, * ), ALPHA( * ), B( LDB, * ),\n     $                   BETA( * ), Q( LDQ, * ), U( LDU, * ),\n     $                   V( LDV, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  DGGSVD computes the generalized singular value decomposition (GSVD)\n*  of an M-by-N real matrix A and P-by-N real matrix B:\n*\n*        U**T*A*Q = D1*( 0 R ),    V**T*B*Q = D2*( 0 R )\n*\n*  where U, V and Q are orthogonal matrices.\n*  Let K+L = the effective numerical rank of the matrix (A**T,B**T)**T,\n*  then R is a K+L-by-K+L nonsingular upper triangular matrix, D1 and\n*  D2 are M-by-(K+L) and P-by-(K+L) \"diagonal\" matrices and of the\n*  following structures, respectively:\n*\n*  If M-K-L >= 0,\n*\n*                      K  L\n*         D1 =     K ( I  0 )\n*                  L ( 0  C )\n*              M-K-L ( 0  0 )\n*\n*                    K  L\n*         D2 =   L ( 0  S )\n*              P-L ( 0  0 )\n*\n*                  N-K-L  K    L\n*    ( 0 R ) = K (  0   R11  R12 )\n*              L (  0    0   R22 )\n*\n*  where\n*\n*    C = diag( ALPHA(K+1), ... , ALPHA(K+L) ),\n*    S = diag( BETA(K+1),  ... , BETA(K+L) ),\n*    C**2 + S**2 = I.\n*\n*    R is stored in A(1:K+L,N-K-L+1:N) on exit.\n*\n*  If M-K-L < 0,\n*\n*                    K M-K K+L-M\n*         D1 =   K ( I  0    0   )\n*              M-K ( 0  C    0   )\n*\n*                      K M-K K+L-M\n*         D2 =   M-K ( 0  S    0  )\n*              K+L-M ( 0  0    I  )\n*                P-L ( 0  0    0  )\n*\n*                     N-K-L  K   M-K  K+L-M\n*    ( 0 R ) =     K ( 0    R11  R12  R13  )\n*                M-K ( 0     0   R22  R23  )\n*              K+L-M ( 0     0    0   R33  )\n*\n*  where\n*\n*    C = diag( ALPHA(K+1), ... , ALPHA(M) ),\n*    S = diag( BETA(K+1),  ... , BETA(M) ),\n*    C**2 + S**2 = I.\n*\n*    (R11 R12 R13 ) is stored in A(1:M, N-K-L+1:N), and R33 is stored\n*    ( 0  R22 R23 )\n*    in B(M-K+1:L,N+M-K-L+1:N) on exit.\n*\n*  The routine computes C, S, R, and optionally the orthogonal\n*  transformation matrices U, V and Q.\n*\n*  In particular, if B is an N-by-N nonsingular matrix, then the GSVD of\n*  A and B implicitly gives the SVD of A*inv(B):\n*                       A*inv(B) = U*(D1*inv(D2))*V**T.\n*  If ( A**T,B**T)**T  has orthonormal columns, then the GSVD of A and B is\n*  also equal to the CS decomposition of A and B. Furthermore, the GSVD\n*  can be used to derive the solution of the eigenvalue problem:\n*                       A**T*A x = lambda* B**T*B x.\n*  In some literature, the GSVD of A and B is presented in the form\n*                   U**T*A*X = ( 0 D1 ),   V**T*B*X = ( 0 D2 )\n*  where U and V are orthogonal and X is nonsingular, D1 and D2 are\n*  ``diagonal\'\'.  The former GSVD form can be converted to the latter\n*  form by taking the nonsingular matrix X as\n*\n*                       X = Q*( I   0    )\n*                             ( 0 inv(R) ).\n*\n*  Arguments\n*  =========\n*\n*  JOBU    (input) CHARACTER*1\n*          = \'U\':  Orthogonal matrix U is computed;\n*          = \'N\':  U is not computed.\n*\n*  JOBV    (input) CHARACTER*1\n*          = \'V\':  Orthogonal matrix V is computed;\n*          = \'N\':  V is not computed.\n*\n*  JOBQ    (input) CHARACTER*1\n*          = \'Q\':  Orthogonal matrix Q is computed;\n*          = \'N\':  Q is not computed.\n*\n*  M       (input) INTEGER\n*          The number of rows of the matrix A.  M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the matrices A and B.  N >= 0.\n*\n*  P       (input) INTEGER\n*          The number of rows of the matrix B.  P >= 0.\n*\n*  K       (output) INTEGER\n*  L       (output) INTEGER\n*          On exit, K and L specify the dimension of the subblocks\n*          described in the Purpose section.\n*          K + L = effective numerical rank of (A**T,B**T)**T.\n*\n*  A       (input/output) DOUBLE PRECISION array, dimension (LDA,N)\n*          On entry, the M-by-N matrix A.\n*          On exit, A contains the triangular matrix R, or part of R.\n*          See Purpose for details.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A. LDA >= max(1,M).\n*\n*  B       (input/output) DOUBLE PRECISION array, dimension (LDB,N)\n*          On entry, the P-by-N matrix B.\n*          On exit, B contains the triangular matrix R if M-K-L < 0.\n*          See Purpose for details.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B. LDB >= max(1,P).\n*\n*  ALPHA   (output) DOUBLE PRECISION array, dimension (N)\n*  BETA    (output) DOUBLE PRECISION array, dimension (N)\n*          On exit, ALPHA and BETA contain the generalized singular\n*          value pairs of A and B;\n*            ALPHA(1:K) = 1,\n*            BETA(1:K)  = 0,\n*          and if M-K-L >= 0,\n*            ALPHA(K+1:K+L) = C,\n*            BETA(K+1:K+L)  = S,\n*          or if M-K-L < 0,\n*            ALPHA(K+1:M)=C, ALPHA(M+1:K+L)=0\n*            BETA(K+1:M) =S, BETA(M+1:K+L) =1\n*          and\n*            ALPHA(K+L+1:N) = 0\n*            BETA(K+L+1:N)  = 0\n*\n*  U       (output) DOUBLE PRECISION array, dimension (LDU,M)\n*          If JOBU = \'U\', U contains the M-by-M orthogonal matrix U.\n*          If JOBU = \'N\', U is not referenced.\n*\n*  LDU     (input) INTEGER\n*          The leading dimension of the array U. LDU >= max(1,M) if\n*          JOBU = \'U\'; LDU >= 1 otherwise.\n*\n*  V       (output) DOUBLE PRECISION array, dimension (LDV,P)\n*          If JOBV = \'V\', V contains the P-by-P orthogonal matrix V.\n*          If JOBV = \'N\', V is not referenced.\n*\n*  LDV     (input) INTEGER\n*          The leading dimension of the array V. LDV >= max(1,P) if\n*          JOBV = \'V\'; LDV >= 1 otherwise.\n*\n*  Q       (output) DOUBLE PRECISION array, dimension (LDQ,N)\n*          If JOBQ = \'Q\', Q contains the N-by-N orthogonal matrix Q.\n*          If JOBQ = \'N\', Q is not referenced.\n*\n*  LDQ     (input) INTEGER\n*          The leading dimension of the array Q. LDQ >= max(1,N) if\n*          JOBQ = \'Q\'; LDQ >= 1 otherwise.\n*\n*  WORK    (workspace) DOUBLE PRECISION array,\n*                      dimension (max(3*N,M,P)+N)\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (N)\n*          On exit, IWORK stores the sorting information. More\n*          precisely, the following loop will sort ALPHA\n*             for I = K+1, min(M,K+L)\n*                 swap ALPHA(I) and ALPHA(IWORK(I))\n*             endfor\n*          such that ALPHA(1) >= ALPHA(2) >= ... >= ALPHA(N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  if INFO = 1, the Jacobi-type procedure failed to\n*                converge.  For further details, see subroutine DTGSJA.\n*\n*  Internal Parameters\n*  ===================\n*\n*  TOLA    DOUBLE PRECISION\n*  TOLB    DOUBLE PRECISION\n*          TOLA and TOLB are the thresholds to determine the effective\n*          rank of (A\',B\')**T. Generally, they are set to\n*                   TOLA = MAX(M,N)*norm(A)*MAZHEPS,\n*                   TOLB = MAX(P,N)*norm(B)*MAZHEPS.\n*          The size of TOLA and TOLB may affect the size of backward\n*          errors of the decomposition.\n*\n'),(479,'cggsvd_479.txt','      SUBROUTINE CGGSVD( JOBU, JOBV, JOBQ, M, N, P, K, L, A, LDA, B,\n     $                   LDB, ALPHA, BETA, U, LDU, V, LDV, Q, LDQ, WORK,\n     $                   RWORK, IWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBQ, JOBU, JOBV\n      INTEGER            INFO, K, L, LDA, LDB, LDQ, LDU, LDV, M, N, P\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      REAL               ALPHA( * ), BETA( * ), RWORK( * )\n      COMPLEX            A( LDA, * ), B( LDB, * ), Q( LDQ, * ),\n     $                   U( LDU, * ), V( LDV, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  CGGSVD computes the generalized singular value decomposition (GSVD)\n*  of an M-by-N complex matrix A and P-by-N complex matrix B:\n*\n*        U**H*A*Q = D1*( 0 R ),    V**H*B*Q = D2*( 0 R )\n*\n*  where U, V and Q are unitary matrices.\n*  Let K+L = the effective numerical rank of the\n*  matrix (A**H,B**H)**H, then R is a (K+L)-by-(K+L) nonsingular upper\n*  triangular matrix, D1 and D2 are M-by-(K+L) and P-by-(K+L) \"diagonal\"\n*  matrices and of the following structures, respectively:\n*\n*  If M-K-L >= 0,\n*\n*                      K  L\n*         D1 =     K ( I  0 )\n*                  L ( 0  C )\n*              M-K-L ( 0  0 )\n*\n*                    K  L\n*         D2 =   L ( 0  S )\n*              P-L ( 0  0 )\n*\n*                  N-K-L  K    L\n*    ( 0 R ) = K (  0   R11  R12 )\n*              L (  0    0   R22 )\n*\n*  where\n*\n*    C = diag( ALPHA(K+1), ... , ALPHA(K+L) ),\n*    S = diag( BETA(K+1),  ... , BETA(K+L) ),\n*    C**2 + S**2 = I.\n*\n*    R is stored in A(1:K+L,N-K-L+1:N) on exit.\n*\n*  If M-K-L < 0,\n*\n*                    K M-K K+L-M\n*         D1 =   K ( I  0    0   )\n*              M-K ( 0  C    0   )\n*\n*                      K M-K K+L-M\n*         D2 =   M-K ( 0  S    0  )\n*              K+L-M ( 0  0    I  )\n*                P-L ( 0  0    0  )\n*\n*                     N-K-L  K   M-K  K+L-M\n*    ( 0 R ) =     K ( 0    R11  R12  R13  )\n*                M-K ( 0     0   R22  R23  )\n*              K+L-M ( 0     0    0   R33  )\n*\n*  where\n*\n*    C = diag( ALPHA(K+1), ... , ALPHA(M) ),\n*    S = diag( BETA(K+1),  ... , BETA(M) ),\n*    C**2 + S**2 = I.\n*\n*    (R11 R12 R13 ) is stored in A(1:M, N-K-L+1:N), and R33 is stored\n*    ( 0  R22 R23 )\n*    in B(M-K+1:L,N+M-K-L+1:N) on exit.\n*\n*  The routine computes C, S, R, and optionally the unitary\n*  transformation matrices U, V and Q.\n*\n*  In particular, if B is an N-by-N nonsingular matrix, then the GSVD of\n*  A and B implicitly gives the SVD of A*inv(B):\n*                       A*inv(B) = U*(D1*inv(D2))*V**H.\n*  If ( A**H,B**H)**H has orthnormal columns, then the GSVD of A and B is also\n*  equal to the CS decomposition of A and B. Furthermore, the GSVD can\n*  be used to derive the solution of the eigenvalue problem:\n*                       A**H*A x = lambda* B**H*B x.\n*  In some literature, the GSVD of A and B is presented in the form\n*                   U**H*A*X = ( 0 D1 ),   V**H*B*X = ( 0 D2 )\n*  where U and V are orthogonal and X is nonsingular, and D1 and D2 are\n*  ``diagonal\'\'.  The former GSVD form can be converted to the latter\n*  form by taking the nonsingular matrix X as\n*\n*                        X = Q*(  I   0    )\n*                              (  0 inv(R) )\n*\n*  Arguments\n*  =========\n*\n*  JOBU    (input) CHARACTER*1\n*          = \'U\':  Unitary matrix U is computed;\n*          = \'N\':  U is not computed.\n*\n*  JOBV    (input) CHARACTER*1\n*          = \'V\':  Unitary matrix V is computed;\n*          = \'N\':  V is not computed.\n*\n*  JOBQ    (input) CHARACTER*1\n*          = \'Q\':  Unitary matrix Q is computed;\n*          = \'N\':  Q is not computed.\n*\n*  M       (input) INTEGER\n*          The number of rows of the matrix A.  M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the matrices A and B.  N >= 0.\n*\n*  P       (input) INTEGER\n*          The number of rows of the matrix B.  P >= 0.\n*\n*  K       (output) INTEGER\n*  L       (output) INTEGER\n*          On exit, K and L specify the dimension of the subblocks\n*          described in Purpose.\n*          K + L = effective numerical rank of (A**H,B**H)**H.\n*\n*  A       (input/output) COMPLEX array, dimension (LDA,N)\n*          On entry, the M-by-N matrix A.\n*          On exit, A contains the triangular matrix R, or part of R.\n*          See Purpose for details.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A. LDA >= max(1,M).\n*\n*  B       (input/output) COMPLEX array, dimension (LDB,N)\n*          On entry, the P-by-N matrix B.\n*          On exit, B contains part of the triangular matrix R if\n*          M-K-L < 0.  See Purpose for details.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B. LDB >= max(1,P).\n*\n*  ALPHA   (output) REAL array, dimension (N)\n*  BETA    (output) REAL array, dimension (N)\n*          On exit, ALPHA and BETA contain the generalized singular\n*          value pairs of A and B;\n*            ALPHA(1:K) = 1,\n*            BETA(1:K)  = 0,\n*          and if M-K-L >= 0,\n*            ALPHA(K+1:K+L) = C,\n*            BETA(K+1:K+L)  = S,\n*          or if M-K-L < 0,\n*            ALPHA(K+1:M)= C, ALPHA(M+1:K+L)= 0\n*            BETA(K+1:M) = S, BETA(M+1:K+L) = 1\n*          and\n*            ALPHA(K+L+1:N) = 0\n*            BETA(K+L+1:N)  = 0\n*\n*  U       (output) COMPLEX array, dimension (LDU,M)\n*          If JOBU = \'U\', U contains the M-by-M unitary matrix U.\n*          If JOBU = \'N\', U is not referenced.\n*\n*  LDU     (input) INTEGER\n*          The leading dimension of the array U. LDU >= max(1,M) if\n*          JOBU = \'U\'; LDU >= 1 otherwise.\n*\n*  V       (output) COMPLEX array, dimension (LDV,P)\n*          If JOBV = \'V\', V contains the P-by-P unitary matrix V.\n*          If JOBV = \'N\', V is not referenced.\n*\n*  LDV     (input) INTEGER\n*          The leading dimension of the array V. LDV >= max(1,P) if\n*          JOBV = \'V\'; LDV >= 1 otherwise.\n*\n*  Q       (output) COMPLEX array, dimension (LDQ,N)\n*          If JOBQ = \'Q\', Q contains the N-by-N unitary matrix Q.\n*          If JOBQ = \'N\', Q is not referenced.\n*\n*  LDQ     (input) INTEGER\n*          The leading dimension of the array Q. LDQ >= max(1,N) if\n*          JOBQ = \'Q\'; LDQ >= 1 otherwise.\n*\n*  WORK    (workspace) COMPLEX array, dimension (max(3*N,M,P)+N)\n*\n*  RWORK   (workspace) REAL array, dimension (2*N)\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (N)\n*          On exit, IWORK stores the sorting information. More\n*          precisely, the following loop will sort ALPHA\n*             for I = K+1, min(M,K+L)\n*                 swap ALPHA(I) and ALPHA(IWORK(I))\n*             endfor\n*          such that ALPHA(1) >= ALPHA(2) >= ... >= ALPHA(N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit.\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  if INFO = 1, the Jacobi-type procedure failed to\n*                converge.  For further details, see subroutine CTGSJA.\n*\n*  Internal Parameters\n*  ===================\n*\n*  TOLA    REAL\n*  TOLB    REAL\n*          TOLA and TOLB are the thresholds to determine the effective\n*          rank of (A**H,B**H)**H. Generally, they are set to\n*                   TOLA = MAX(M,N)*norm(A)*MACHEPS,\n*                   TOLB = MAX(P,N)*norm(B)*MACHEPS.\n*          The size of TOLA and TOLB may affect the size of backward\n*          errors of the decomposition.\n*\n'),(480,'zggsvd_480.txt','      SUBROUTINE ZGGSVD( JOBU, JOBV, JOBQ, M, N, P, K, L, A, LDA, B,\n     $                   LDB, ALPHA, BETA, U, LDU, V, LDV, Q, LDQ, WORK,\n     $                   RWORK, IWORK, INFO )\n*\n*  -- LAPACK driver routine (version 3.3.1) --\n*  -- LAPACK is a software package provided by Univ. of Tennessee,    --\n*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--\n*  -- April 2011                                                      --\n*\n*     .. Scalar Arguments ..\n      CHARACTER          JOBQ, JOBU, JOBV\n      INTEGER            INFO, K, L, LDA, LDB, LDQ, LDU, LDV, M, N, P\n*     ..\n*     .. Array Arguments ..\n      INTEGER            IWORK( * )\n      DOUBLE PRECISION   ALPHA( * ), BETA( * ), RWORK( * )\n      COMPLEX*16         A( LDA, * ), B( LDB, * ), Q( LDQ, * ),\n     $                   U( LDU, * ), V( LDV, * ), WORK( * )\n*     ..\n*\n*  Purpose\n*  =======\n*\n*  ZGGSVD computes the generalized singular value decomposition (GSVD)\n*  of an M-by-N complex matrix A and P-by-N complex matrix B:\n*\n*        U**H*A*Q = D1*( 0 R ),    V**H*B*Q = D2*( 0 R )\n*\n*  where U, V and Q are unitary matrices.\n*  Let K+L = the effective numerical rank of the\n*  matrix (A**H,B**H)**H, then R is a (K+L)-by-(K+L) nonsingular upper\n*  triangular matrix, D1 and D2 are M-by-(K+L) and P-by-(K+L) \"diagonal\"\n*  matrices and of the following structures, respectively:\n*\n*  If M-K-L >= 0,\n*\n*                      K  L\n*         D1 =     K ( I  0 )\n*                  L ( 0  C )\n*              M-K-L ( 0  0 )\n*\n*                    K  L\n*         D2 =   L ( 0  S )\n*              P-L ( 0  0 )\n*\n*                  N-K-L  K    L\n*    ( 0 R ) = K (  0   R11  R12 )\n*              L (  0    0   R22 )\n*  where\n*\n*    C = diag( ALPHA(K+1), ... , ALPHA(K+L) ),\n*    S = diag( BETA(K+1),  ... , BETA(K+L) ),\n*    C**2 + S**2 = I.\n*\n*    R is stored in A(1:K+L,N-K-L+1:N) on exit.\n*\n*  If M-K-L < 0,\n*\n*                    K M-K K+L-M\n*         D1 =   K ( I  0    0   )\n*              M-K ( 0  C    0   )\n*\n*                      K M-K K+L-M\n*         D2 =   M-K ( 0  S    0  )\n*              K+L-M ( 0  0    I  )\n*                P-L ( 0  0    0  )\n*\n*                     N-K-L  K   M-K  K+L-M\n*    ( 0 R ) =     K ( 0    R11  R12  R13  )\n*                M-K ( 0     0   R22  R23  )\n*              K+L-M ( 0     0    0   R33  )\n*\n*  where\n*\n*    C = diag( ALPHA(K+1), ... , ALPHA(M) ),\n*    S = diag( BETA(K+1),  ... , BETA(M) ),\n*    C**2 + S**2 = I.\n*\n*    (R11 R12 R13 ) is stored in A(1:M, N-K-L+1:N), and R33 is stored\n*    ( 0  R22 R23 )\n*    in B(M-K+1:L,N+M-K-L+1:N) on exit.\n*\n*  The routine computes C, S, R, and optionally the unitary\n*  transformation matrices U, V and Q.\n*\n*  In particular, if B is an N-by-N nonsingular matrix, then the GSVD of\n*  A and B implicitly gives the SVD of A*inv(B):\n*                       A*inv(B) = U*(D1*inv(D2))*V**H.\n*  If ( A**H,B**H)**H has orthnormal columns, then the GSVD of A and B is also\n*  equal to the CS decomposition of A and B. Furthermore, the GSVD can\n*  be used to derive the solution of the eigenvalue problem:\n*                       A**H*A x = lambda* B**H*B x.\n*  In some literature, the GSVD of A and B is presented in the form\n*                   U**H*A*X = ( 0 D1 ),   V**H*B*X = ( 0 D2 )\n*  where U and V are orthogonal and X is nonsingular, and D1 and D2 are\n*  ``diagonal\'\'.  The former GSVD form can be converted to the latter\n*  form by taking the nonsingular matrix X as\n*\n*                        X = Q*(  I   0    )\n*                              (  0 inv(R) )\n*\n*  Arguments\n*  =========\n*\n*  JOBU    (input) CHARACTER*1\n*          = \'U\':  Unitary matrix U is computed;\n*          = \'N\':  U is not computed.\n*\n*  JOBV    (input) CHARACTER*1\n*          = \'V\':  Unitary matrix V is computed;\n*          = \'N\':  V is not computed.\n*\n*  JOBQ    (input) CHARACTER*1\n*          = \'Q\':  Unitary matrix Q is computed;\n*          = \'N\':  Q is not computed.\n*\n*  M       (input) INTEGER\n*          The number of rows of the matrix A.  M >= 0.\n*\n*  N       (input) INTEGER\n*          The number of columns of the matrices A and B.  N >= 0.\n*\n*  P       (input) INTEGER\n*          The number of rows of the matrix B.  P >= 0.\n*\n*  K       (output) INTEGER\n*  L       (output) INTEGER\n*          On exit, K and L specify the dimension of the subblocks\n*          described in Purpose.\n*          K + L = effective numerical rank of (A**H,B**H)**H.\n*\n*  A       (input/output) COMPLEX*16 array, dimension (LDA,N)\n*          On entry, the M-by-N matrix A.\n*          On exit, A contains the triangular matrix R, or part of R.\n*          See Purpose for details.\n*\n*  LDA     (input) INTEGER\n*          The leading dimension of the array A. LDA >= max(1,M).\n*\n*  B       (input/output) COMPLEX*16 array, dimension (LDB,N)\n*          On entry, the P-by-N matrix B.\n*          On exit, B contains part of the triangular matrix R if\n*          M-K-L < 0.  See Purpose for details.\n*\n*  LDB     (input) INTEGER\n*          The leading dimension of the array B. LDB >= max(1,P).\n*\n*  ALPHA   (output) DOUBLE PRECISION array, dimension (N)\n*  BETA    (output) DOUBLE PRECISION array, dimension (N)\n*          On exit, ALPHA and BETA contain the generalized singular\n*          value pairs of A and B;\n*            ALPHA(1:K) = 1,\n*            BETA(1:K)  = 0,\n*          and if M-K-L >= 0,\n*            ALPHA(K+1:K+L) = C,\n*            BETA(K+1:K+L)  = S,\n*          or if M-K-L < 0,\n*            ALPHA(K+1:M)= C, ALPHA(M+1:K+L)= 0\n*            BETA(K+1:M) = S, BETA(M+1:K+L) = 1\n*          and\n*            ALPHA(K+L+1:N) = 0\n*            BETA(K+L+1:N)  = 0\n*\n*  U       (output) COMPLEX*16 array, dimension (LDU,M)\n*          If JOBU = \'U\', U contains the M-by-M unitary matrix U.\n*          If JOBU = \'N\', U is not referenced.\n*\n*  LDU     (input) INTEGER\n*          The leading dimension of the array U. LDU >= max(1,M) if\n*          JOBU = \'U\'; LDU >= 1 otherwise.\n*\n*  V       (output) COMPLEX*16 array, dimension (LDV,P)\n*          If JOBV = \'V\', V contains the P-by-P unitary matrix V.\n*          If JOBV = \'N\', V is not referenced.\n*\n*  LDV     (input) INTEGER\n*          The leading dimension of the array V. LDV >= max(1,P) if\n*          JOBV = \'V\'; LDV >= 1 otherwise.\n*\n*  Q       (output) COMPLEX*16 array, dimension (LDQ,N)\n*          If JOBQ = \'Q\', Q contains the N-by-N unitary matrix Q.\n*          If JOBQ = \'N\', Q is not referenced.\n*\n*  LDQ     (input) INTEGER\n*          The leading dimension of the array Q. LDQ >= max(1,N) if\n*          JOBQ = \'Q\'; LDQ >= 1 otherwise.\n*\n*  WORK    (workspace) COMPLEX*16 array, dimension (max(3*N,M,P)+N)\n*\n*  RWORK   (workspace) DOUBLE PRECISION array, dimension (2*N)\n*\n*  IWORK   (workspace/output) INTEGER array, dimension (N)\n*          On exit, IWORK stores the sorting information. More\n*          precisely, the following loop will sort ALPHA\n*             for I = K+1, min(M,K+L)\n*                 swap ALPHA(I) and ALPHA(IWORK(I))\n*             endfor\n*          such that ALPHA(1) >= ALPHA(2) >= ... >= ALPHA(N).\n*\n*  INFO    (output) INTEGER\n*          = 0:  successful exit.\n*          < 0:  if INFO = -i, the i-th argument had an illegal value.\n*          > 0:  if INFO = 1, the Jacobi-type procedure failed to\n*                converge.  For further details, see subroutine ZTGSJA.\n*\n*  Internal Parameters\n*  ===================\n*\n*  TOLA    DOUBLE PRECISION\n*  TOLB    DOUBLE PRECISION\n*          TOLA and TOLB are the thresholds to determine the effective\n*          rank of (A**H,B**H)**H. Generally, they are set to\n*                   TOLA = MAX(M,N)*norm(A)*MAZHEPS,\n*                   TOLB = MAX(P,N)*norm(B)*MAZHEPS.\n*          The size of TOLA and TOLB may affect the size of backward\n*          errors of the decomposition.\n*\n');
/*!40000 ALTER TABLE `Driver_routineinfo` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_group`
--

DROP TABLE IF EXISTS `auth_group`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_group` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(80) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_group`
--

LOCK TABLES `auth_group` WRITE;
/*!40000 ALTER TABLE `auth_group` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_group` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_group_permissions`
--

DROP TABLE IF EXISTS `auth_group_permissions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_group_permissions` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `group_id` int(11) NOT NULL,
  `permission_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `group_id` (`group_id`,`permission_id`),
  KEY `permission_id_refs_id_a7792de1` (`permission_id`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_group_permissions`
--

LOCK TABLES `auth_group_permissions` WRITE;
/*!40000 ALTER TABLE `auth_group_permissions` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_group_permissions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_message`
--

DROP TABLE IF EXISTS `auth_message`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_message` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `message` longtext NOT NULL,
  PRIMARY KEY (`id`),
  KEY `user_id_refs_id_9af0b65a` (`user_id`)
) ENGINE=MyISAM AUTO_INCREMENT=22 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_message`
--

LOCK TABLES `auth_message` WRITE;
/*!40000 ALTER TABLE `auth_message` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_message` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_permission`
--

DROP TABLE IF EXISTS `auth_permission`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_permission` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) NOT NULL,
  `content_type_id` int(11) NOT NULL,
  `codename` varchar(100) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `content_type_id` (`content_type_id`,`codename`)
) ENGINE=MyISAM AUTO_INCREMENT=217 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_permission`
--

LOCK TABLES `auth_permission` WRITE;
/*!40000 ALTER TABLE `auth_permission` DISABLE KEYS */;
INSERT INTO `auth_permission` VALUES (1,'Can add permission',1,'add_permission'),(2,'Can change permission',1,'change_permission'),(3,'Can delete permission',1,'delete_permission'),(4,'Can add group',2,'add_group'),(5,'Can change group',2,'change_group'),(6,'Can delete group',2,'delete_group'),(7,'Can add user',3,'add_user'),(8,'Can change user',3,'change_user'),(9,'Can delete user',3,'delete_user'),(10,'Can add message',4,'add_message'),(11,'Can change message',4,'change_message'),(12,'Can delete message',4,'delete_message'),(13,'Can add content type',5,'add_contenttype'),(14,'Can change content type',5,'change_contenttype'),(15,'Can delete content type',5,'delete_contenttype'),(16,'Can add session',6,'add_session'),(17,'Can change session',6,'change_session'),(18,'Can delete session',6,'delete_session'),(19,'Can add site',7,'add_site'),(20,'Can change site',7,'change_site'),(21,'Can delete site',7,'delete_site'),(170,'Can change linear equation_computational',57,'change_linearequation_computational'),(169,'Can add linear equation_computational',57,'add_linearequation_computational'),(171,'Can delete linear equation_computational',57,'delete_linearequation_computational'),(28,'Can add linear least square',10,'add_linearleastsquare'),(29,'Can change linear least square',10,'change_linearleastsquare'),(30,'Can delete linear least square',10,'delete_linearleastsquare'),(199,'Can add author',67,'add_author'),(109,'Can add linear equation_factor',37,'add_linearequation_factor'),(206,'Can change book',69,'change_book'),(207,'Can delete book',69,'delete_book'),(110,'Can change linear equation_factor',37,'change_linearequation_factor'),(37,'Can add log entry',13,'add_logentry'),(38,'Can change log entry',13,'change_logentry'),(39,'Can delete log entry',13,'delete_logentry'),(48,'Can delete routine info',16,'delete_routineinfo'),(47,'Can change routine info',16,'change_routineinfo'),(46,'Can add routine info',16,'add_routineinfo'),(139,'Can add person',47,'add_person'),(140,'Can change person',47,'change_person'),(141,'Can delete person',47,'delete_person'),(52,'Can add tag',18,'add_tag'),(53,'Can change tag',18,'change_tag'),(54,'Can delete tag',18,'delete_tag'),(55,'Can add tagged item',19,'add_taggeditem'),(56,'Can change tagged item',19,'change_taggeditem'),(57,'Can delete tagged item',19,'delete_taggeditem'),(58,'Can add Person',20,'add_person'),(59,'Can change Person',20,'change_person'),(60,'Can delete Person',20,'delete_person'),(61,'Can add Film',21,'add_movie'),(62,'Can change Film',21,'change_movie'),(63,'Can delete Film',21,'delete_movie'),(64,'Can add Regisseur',22,'add_director'),(65,'Can change Regisseur',22,'change_director'),(66,'Can delete Regisseur',22,'delete_director'),(67,'Can add Rolle',23,'add_cast'),(68,'Can change Rolle',23,'change_cast'),(69,'Can delete Rolle',23,'delete_cast'),(70,'Can add Feed',24,'add_feed'),(71,'Can change Feed',24,'change_feed'),(72,'Can delete Feed',24,'delete_feed'),(73,'Can add Post (Materialized Path Tree)',25,'add_post'),(74,'Can change Post (Materialized Path Tree)',25,'change_post'),(75,'Can delete Post (Materialized Path Tree)',25,'delete_post'),(76,'Can add link',26,'add_link'),(77,'Can change link',26,'change_link'),(78,'Can delete link',26,'delete_link'),(79,'Can add bookmark',27,'add_bookmark'),(80,'Can change bookmark',27,'change_bookmark'),(81,'Can delete bookmark',27,'delete_bookmark'),(82,'Can add publisher',28,'add_publisher'),(83,'Can change publisher',28,'change_publisher'),(84,'Can delete publisher',28,'delete_publisher'),(85,'Can add author',29,'add_author'),(86,'Can change author',29,'change_author'),(87,'Can delete author',29,'delete_author'),(88,'Can add book',30,'add_book'),(89,'Can change book',30,'change_book'),(90,'Can delete book',30,'delete_book'),(96,'Can delete eigensolver',32,'delete_eigensolver'),(95,'Can change eigensolver',32,'change_eigensolver'),(94,'Can add eigensolver',32,'add_eigensolver'),(205,'Can add book',69,'add_book'),(200,'Can change author',67,'change_author'),(201,'Can delete author',67,'delete_author'),(202,'Can add publisher',68,'add_publisher'),(203,'Can change publisher',68,'change_publisher'),(204,'Can delete publisher',68,'delete_publisher'),(111,'Can delete linear equation_factor',37,'delete_linearequation_factor'),(112,'Can add linear equation_solve',38,'add_linearequation_solve'),(113,'Can change linear equation_solve',38,'change_linearequation_solve'),(114,'Can delete linear equation_solve',38,'delete_linearequation_solve'),(115,'Can add linear equation_condition_number',39,'add_linearequation_condition_number'),(116,'Can change linear equation_condition_number',39,'change_linearequation_condition_number'),(117,'Can delete linear equation_condition_number',39,'delete_linearequation_condition_number'),(118,'Can add linear equation_error_bound',40,'add_linearequation_error_bound'),(119,'Can change linear equation_error_bound',40,'change_linearequation_error_bound'),(120,'Can delete linear equation_error_bound',40,'delete_linearequation_error_bound'),(121,'Can add linear equation_invert',41,'add_linearequation_invert'),(122,'Can change linear equation_invert',41,'change_linearequation_invert'),(123,'Can delete linear equation_invert',41,'delete_linearequation_invert'),(124,'Can add linear equation_equilibrate',42,'add_linearequation_equilibrate'),(125,'Can change linear equation_equilibrate',42,'change_linearequation_equilibrate'),(126,'Can delete linear equation_equilibrate',42,'delete_linearequation_equilibrate'),(133,'Can add test',45,'add_test'),(134,'Can change test',45,'change_test'),(135,'Can delete test',45,'delete_test'),(136,'Can add result',46,'add_result'),(137,'Can change result',46,'change_result'),(138,'Can delete result',46,'delete_result'),(142,'Can add site configuration',48,'add_siteconfiguration'),(143,'Can change site configuration',48,'change_siteconfiguration'),(144,'Can delete site configuration',48,'delete_siteconfiguration'),(145,'Can add publisher',49,'add_publisher'),(146,'Can change publisher',49,'change_publisher'),(147,'Can delete publisher',49,'delete_publisher'),(148,'Can add author',50,'add_author'),(149,'Can change author',50,'change_author'),(150,'Can delete author',50,'delete_author'),(151,'Can add book',51,'add_book'),(152,'Can change book',51,'change_book'),(153,'Can delete book',51,'delete_book'),(215,'Can change note',72,'change_note'),(216,'Can delete note',72,'delete_note'),(213,'Can delete file',71,'delete_file'),(214,'Can add note',72,'add_note'),(211,'Can add file',71,'add_file'),(212,'Can change file',71,'change_file'),(210,'Can delete file type',70,'delete_filetype'),(209,'Can change file type',70,'change_filetype'),(208,'Can add file type',70,'add_filetype'),(160,'Can add linear equation_simple',54,'add_linearequation_simple'),(161,'Can change linear equation_simple',54,'change_linearequation_simple'),(162,'Can delete linear equation_simple',54,'delete_linearequation_simple'),(163,'Can add linear equation_expert',55,'add_linearequation_expert'),(164,'Can change linear equation_expert',55,'change_linearequation_expert'),(165,'Can delete linear equation_expert',55,'delete_linearequation_expert'),(177,'Can delete routine info',59,'delete_routineinfo'),(176,'Can change routine info',59,'change_routineinfo'),(175,'Can add routine info',59,'add_routineinfo'),(172,'Can add linear equation_drivers',58,'add_linearequation_drivers'),(173,'Can change linear equation_drivers',58,'change_linearequation_drivers'),(174,'Can delete linear equation_drivers',58,'delete_linearequation_drivers'),(198,'Can delete linear equation_only',66,'delete_linearequation_only'),(197,'Can change linear equation_only',66,'change_linearequation_only'),(196,'Can add linear equation_only',66,'add_linearequation_only'),(181,'Can add linear equation_simple',61,'add_linearequation_simple'),(182,'Can change linear equation_simple',61,'change_linearequation_simple'),(183,'Can delete linear equation_simple',61,'delete_linearequation_simple'),(184,'Can add linear equation_expert',62,'add_linearequation_expert'),(185,'Can change linear equation_expert',62,'change_linearequation_expert'),(186,'Can delete linear equation_expert',62,'delete_linearequation_expert'),(187,'Can add linear least square',63,'add_linearleastsquare'),(188,'Can change linear least square',63,'change_linearleastsquare'),(189,'Can delete linear least square',63,'delete_linearleastsquare'),(190,'Can add eigensolver',64,'add_eigensolver'),(191,'Can change eigensolver',64,'change_eigensolver'),(192,'Can delete eigensolver',64,'delete_eigensolver'),(193,'Can add linear equation_driver',65,'add_linearequation_driver'),(194,'Can change linear equation_driver',65,'change_linearequation_driver'),(195,'Can delete linear equation_driver',65,'delete_linearequation_driver');
/*!40000 ALTER TABLE `auth_permission` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_user`
--

DROP TABLE IF EXISTS `auth_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(30) NOT NULL,
  `first_name` varchar(30) NOT NULL,
  `last_name` varchar(30) NOT NULL,
  `email` varchar(75) NOT NULL,
  `password` varchar(128) NOT NULL,
  `is_staff` tinyint(1) NOT NULL,
  `is_active` tinyint(1) NOT NULL,
  `is_superuser` tinyint(1) NOT NULL,
  `last_login` datetime NOT NULL,
  `date_joined` datetime NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`)
) ENGINE=MyISAM AUTO_INCREMENT=5 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_user`
--

LOCK TABLES `auth_user` WRITE;
/*!40000 ALTER TABLE `auth_user` DISABLE KEYS */;
INSERT INTO `auth_user` VALUES (2,'salin','','','salin@mcs.anl.gov','sha1$8c78f$bc775700885df5030b3836fe90135313b564579d',1,1,1,'2012-02-14 14:38:40','2011-05-04 15:35:30'),(4,'liz','','','','sha1$dc20b$765a979549cea2e007336c6fb49823e51ba08a73',0,1,0,'2011-09-20 20:15:59','2011-09-20 20:15:59');
/*!40000 ALTER TABLE `auth_user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_user_groups`
--

DROP TABLE IF EXISTS `auth_user_groups`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_user_groups` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `group_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `user_id` (`user_id`,`group_id`),
  KEY `group_id_refs_id_f0ee9890` (`group_id`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_user_groups`
--

LOCK TABLES `auth_user_groups` WRITE;
/*!40000 ALTER TABLE `auth_user_groups` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_user_groups` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_user_user_permissions`
--

DROP TABLE IF EXISTS `auth_user_user_permissions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_user_user_permissions` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `permission_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `user_id` (`user_id`,`permission_id`),
  KEY `permission_id_refs_id_67e79cb` (`permission_id`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_user_user_permissions`
--

LOCK TABLES `auth_user_user_permissions` WRITE;
/*!40000 ALTER TABLE `auth_user_user_permissions` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_user_user_permissions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `bookmarks_bookmark`
--

DROP TABLE IF EXISTS `bookmarks_bookmark`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `bookmarks_bookmark` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(200) NOT NULL,
  `user_id` int(11) NOT NULL,
  `link_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `bookmarks_bookmark_user_id` (`user_id`),
  KEY `bookmarks_bookmark_link_id` (`link_id`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `bookmarks_bookmark`
--

LOCK TABLES `bookmarks_bookmark` WRITE;
/*!40000 ALTER TABLE `bookmarks_bookmark` DISABLE KEYS */;
/*!40000 ALTER TABLE `bookmarks_bookmark` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `bookmarks_link`
--

DROP TABLE IF EXISTS `bookmarks_link`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `bookmarks_link` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `url` varchar(200) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `url` (`url`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `bookmarks_link`
--

LOCK TABLES `bookmarks_link` WRITE;
/*!40000 ALTER TABLE `bookmarks_link` DISABLE KEYS */;
/*!40000 ALTER TABLE `bookmarks_link` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `books_author`
--

DROP TABLE IF EXISTS `books_author`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `books_author` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `first_name` varchar(30) NOT NULL,
  `last_name` varchar(40) NOT NULL,
  `email` varchar(75) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=7 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `books_author`
--

LOCK TABLES `books_author` WRITE;
/*!40000 ALTER TABLE `books_author` DISABLE KEYS */;
INSERT INTO `books_author` VALUES (3,'Bill','Martin',''),(2,'Peggy','Rathmann',''),(4,'Margaret','Wise Brown',''),(5,'Eric','Carle',''),(6,'Sam','McBratney','');
/*!40000 ALTER TABLE `books_author` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `books_book`
--

DROP TABLE IF EXISTS `books_book`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `books_book` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(100) NOT NULL,
  `publisher_id` int(11) NOT NULL,
  `publication_date` date DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `books_book_publisher_id` (`publisher_id`)
) ENGINE=MyISAM AUTO_INCREMENT=8 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `books_book`
--

LOCK TABLES `books_book` WRITE;
/*!40000 ALTER TABLE `books_book` DISABLE KEYS */;
INSERT INTO `books_book` VALUES (1,'Good Night, Gorilla',1,'1996-02-21'),(2,'The Very Hungry Caterpillar',2,'1994-03-23'),(3,'Goodnight Moon',5,'2005-09-06'),(4,'Guess How Much I Love You',3,'2008-10-14'),(5,'Big Red Barn Big Book',6,'1991-03-15'),(6,'Brown Bear, Brown Bear, What Do You See',7,'1996-09-15'),(7,'Officer Buckle & Gloria',1,'1995-09-28');
/*!40000 ALTER TABLE `books_book` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `books_book_authors`
--

DROP TABLE IF EXISTS `books_book_authors`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `books_book_authors` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `book_id` int(11) NOT NULL,
  `author_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `book_id` (`book_id`,`author_id`),
  KEY `author_id_refs_id_9e7e386` (`author_id`)
) ENGINE=MyISAM AUTO_INCREMENT=8 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `books_book_authors`
--

LOCK TABLES `books_book_authors` WRITE;
/*!40000 ALTER TABLE `books_book_authors` DISABLE KEYS */;
INSERT INTO `books_book_authors` VALUES (1,1,2),(2,2,5),(3,3,4),(4,4,6),(5,5,4),(6,6,5),(7,7,2);
/*!40000 ALTER TABLE `books_book_authors` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `books_publisher`
--

DROP TABLE IF EXISTS `books_publisher`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `books_publisher` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(30) NOT NULL,
  `address` varchar(50) NOT NULL,
  `city` varchar(60) NOT NULL,
  `state_province` varchar(30) NOT NULL,
  `country` varchar(50) NOT NULL,
  `website` varchar(200) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=8 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `books_publisher`
--

LOCK TABLES `books_publisher` WRITE;
/*!40000 ALTER TABLE `books_publisher` DISABLE KEYS */;
INSERT INTO `books_publisher` VALUES (1,'Putnam Juvenile','','','','',''),(2,'Philomel','','','','',''),(3,'Candlewick','','','','',''),(5,'HarperCollins','','','','',''),(6,'HarperFestival','','','','',''),(7,'Henry Holt and Co.','','','','','');
/*!40000 ALTER TABLE `books_publisher` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `core_post`
--

DROP TABLE IF EXISTS `core_post`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `core_post` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `path` varchar(255) NOT NULL,
  `depth` int(10) unsigned NOT NULL,
  `numchild` int(10) unsigned NOT NULL,
  `author` varchar(255) NOT NULL,
  `comment` longtext NOT NULL,
  `created` datetime NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `path` (`path`)
) ENGINE=MyISAM AUTO_INCREMENT=140 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `core_post`
--

LOCK TABLES `core_post` WRITE;
/*!40000 ALTER TABLE `core_post` DISABLE KEYS */;
INSERT INTO `core_post` VALUES (1,'0001',1,4,'author_0','lorem ipsum! 9632417118','2010-02-10 15:15:27'),(6,'00010001',2,2,'author_1','lorem ipsum! 4074320702','2010-02-10 15:15:27'),(22,'000100010001',3,3,'author_7','lorem ipsum! 2706549630','2010-02-10 15:15:27'),(53,'0001000100010001',4,1,'author_13','lorem ipsum! 9823688009','2010-02-10 15:15:27'),(139,'00010001000100010001',5,0,'author_49','lorem ipsum! 1424824740','2010-02-10 15:15:27'),(70,'0001000100010002',4,0,'author_30','lorem ipsum! 4374380164','2010-02-10 15:15:27'),(72,'0001000100010003',4,0,'author_32','lorem ipsum! 7085661825','2010-02-10 15:15:27'),(38,'000100010002',3,0,'author_23','lorem ipsum! 6566656201','2010-02-10 15:15:27'),(8,'00010002',2,2,'author_3','lorem ipsum! 1017352551','2010-02-10 15:15:27'),(21,'000100020001',3,4,'author_6','lorem ipsum! 7257527727','2010-02-10 15:15:27'),(42,'0001000200010001',4,1,'author_2','lorem ipsum! 5498523738','2010-02-10 15:15:27'),(114,'00010002000100010001',5,0,'author_24','lorem ipsum! 9185163620','2010-02-10 15:15:27'),(68,'0001000200010002',4,0,'author_28','lorem ipsum! 3362866072','2010-02-10 15:15:27'),(80,'0001000200010003',4,0,'author_40','lorem ipsum! 5628344060','2010-02-10 15:15:27'),(81,'0001000200010004',4,1,'author_41','lorem ipsum! 1842794391','2010-02-10 15:15:27'),(109,'00010002000100040001',5,0,'author_19','lorem ipsum! 2631851042','2010-02-10 15:15:27'),(31,'000100020002',3,1,'author_16','lorem ipsum! 8399197396','2010-02-10 15:15:27'),(51,'0001000200020001',4,0,'author_11','lorem ipsum! 6314286915','2010-02-10 15:15:27'),(9,'00010003',2,2,'author_4','lorem ipsum! 2805779871','2010-02-10 15:15:27'),(23,'000100030001',3,0,'author_8','lorem ipsum! 3881643008','2010-02-10 15:15:27'),(37,'000100030002',3,4,'author_22','lorem ipsum! 6797867531','2010-02-10 15:15:27'),(64,'0001000300020001',4,0,'author_24','lorem ipsum! 9598092779','2010-02-10 15:15:27'),(74,'0001000300020002',4,1,'author_34','lorem ipsum! 7054815501','2010-02-10 15:15:27'),(106,'00010003000200020001',5,0,'author_16','lorem ipsum! 6072621209','2010-02-10 15:15:27'),(78,'0001000300020003',4,1,'author_38','lorem ipsum! 7229852803','2010-02-10 15:15:27'),(97,'00010003000200030001',5,0,'author_7','lorem ipsum! 4475929395','2010-02-10 15:15:27'),(84,'0001000300020004',4,2,'author_44','lorem ipsum! 6906255847','2010-02-10 15:15:27'),(123,'00010003000200040001',5,0,'author_33','lorem ipsum! 5307273149','2010-02-10 15:15:27'),(128,'00010003000200040002',5,0,'author_38','lorem ipsum! 5400437632','2010-02-10 15:15:27'),(14,'00010004',2,2,'author_9','lorem ipsum! 8270924313','2010-02-10 15:15:27'),(25,'000100040001',3,1,'author_10','lorem ipsum! 7392451048','2010-02-10 15:15:27'),(88,'0001000400010001',4,0,'author_48','lorem ipsum! 1079770487','2010-02-10 15:15:27'),(28,'000100040002',3,0,'author_13','lorem ipsum! 4190488056','2010-02-10 15:15:27'),(2,'0002',1,2,'author_1','lorem ipsum! 9055803438','2010-02-10 15:15:27'),(12,'00020001',2,3,'author_7','lorem ipsum! 8223422793','2010-02-10 15:15:27'),(17,'000200010001',3,3,'author_2','lorem ipsum! 1310239339','2010-02-10 15:15:27'),(55,'0002000100010001',4,4,'author_15','lorem ipsum! 9857547360','2010-02-10 15:15:27'),(96,'00020001000100010001',5,0,'author_6','lorem ipsum! 2759700674','2010-02-10 15:15:27'),(103,'00020001000100010002',5,0,'author_13','lorem ipsum! 9292282948','2010-02-10 15:15:27'),(108,'00020001000100010003',5,0,'author_18','lorem ipsum! 9215333457','2010-02-10 15:15:27'),(124,'00020001000100010004',5,0,'author_34','lorem ipsum! 8554933155','2010-02-10 15:15:27'),(58,'0002000100010002',4,0,'author_18','lorem ipsum! 7185724088','2010-02-10 15:15:27'),(86,'0002000100010003',4,0,'author_46','lorem ipsum! 2635789446','2010-02-10 15:15:27'),(27,'000200010002',3,4,'author_12','lorem ipsum! 8741415796','2010-02-10 15:15:27'),(57,'0002000100020001',4,0,'author_17','lorem ipsum! 6589259312','2010-02-10 15:15:27'),(65,'0002000100020002',4,0,'author_25','lorem ipsum! 3820846699','2010-02-10 15:15:27'),(75,'0002000100020003',4,1,'author_35','lorem ipsum! 5657169304','2010-02-10 15:15:27'),(94,'00020001000200030001',5,0,'author_4','lorem ipsum! 4885141528','2010-02-10 15:15:27'),(82,'0002000100020004',4,2,'author_42','lorem ipsum! 3668388163','2010-02-10 15:15:27'),(102,'00020001000200040001',5,0,'author_12','lorem ipsum! 8847173564','2010-02-10 15:15:27'),(125,'00020001000200040002',5,0,'author_35','lorem ipsum! 9845620325','2010-02-10 15:15:27'),(36,'000200010003',3,2,'author_21','lorem ipsum! 5451521450','2010-02-10 15:15:27'),(62,'0002000100030001',4,2,'author_22','lorem ipsum! 3373659616','2010-02-10 15:15:27'),(116,'00020001000300010001',5,0,'author_26','lorem ipsum! 9243070251','2010-02-10 15:15:27'),(122,'00020001000300010002',5,0,'author_32','lorem ipsum! 6372646378','2010-02-10 15:15:27'),(67,'0002000100030002',4,4,'author_27','lorem ipsum! 3101616981','2010-02-10 15:15:27'),(112,'00020001000300020001',5,0,'author_22','lorem ipsum! 6801210484','2010-02-10 15:15:27'),(113,'00020001000300020002',5,0,'author_23','lorem ipsum! 7897733527','2010-02-10 15:15:27'),(129,'00020001000300020003',5,0,'author_39','lorem ipsum! 5442313692','2010-02-10 15:15:27'),(138,'00020001000300020004',5,0,'author_48','lorem ipsum! 9042069550','2010-02-10 15:15:27'),(13,'00020002',2,2,'author_8','lorem ipsum! 7691807415','2010-02-10 15:15:27'),(24,'000200020001',3,2,'author_9','lorem ipsum! 6462387205','2010-02-10 15:15:27'),(71,'0002000200010001',4,2,'author_31','lorem ipsum! 3021862266','2010-02-10 15:15:27'),(117,'00020002000100010001',5,0,'author_27','lorem ipsum! 1122996858','2010-02-10 15:15:27'),(131,'00020002000100010002',5,0,'author_41','lorem ipsum! 8571808236','2010-02-10 15:15:27'),(85,'0002000200010002',4,1,'author_45','lorem ipsum! 5524037691','2010-02-10 15:15:27'),(92,'00020002000100020001',5,0,'author_2','lorem ipsum! 6572846016','2010-02-10 15:15:27'),(30,'000200020002',3,0,'author_15','lorem ipsum! 2103620994','2010-02-10 15:15:27'),(3,'0003',1,1,'author_2','lorem ipsum! 2132834330','2010-02-10 15:15:27'),(11,'00030001',2,5,'author_6','lorem ipsum! 1651807174','2010-02-10 15:15:27'),(18,'000300010001',3,1,'author_3','lorem ipsum! 8004649552','2010-02-10 15:15:27'),(77,'0003000100010001',4,1,'author_37','lorem ipsum! 1094754841','2010-02-10 15:15:27'),(120,'00030001000100010001',5,0,'author_30','lorem ipsum! 6224755632','2010-02-10 15:15:27'),(20,'000300010002',3,3,'author_5','lorem ipsum! 7698582527','2010-02-10 15:15:27'),(48,'0003000100020001',4,0,'author_8','lorem ipsum! 9207481078','2010-02-10 15:15:27'),(79,'0003000100020002',4,0,'author_39','lorem ipsum! 2141384347','2010-02-10 15:15:27'),(89,'0003000100020003',4,0,'author_49','lorem ipsum! 4443435147','2010-02-10 15:15:27'),(26,'000300010003',3,3,'author_11','lorem ipsum! 7800140842','2010-02-10 15:15:27'),(47,'0003000100030001',4,2,'author_7','lorem ipsum! 4685463090','2010-02-10 15:15:27'),(98,'00030001000300010001',5,0,'author_8','lorem ipsum! 6696123067','2010-02-10 15:15:27'),(115,'00030001000300010002',5,0,'author_25','lorem ipsum! 7377707942','2010-02-10 15:15:27'),(61,'0003000100030002',4,0,'author_21','lorem ipsum! 9988130686','2010-02-10 15:15:27'),(76,'0003000100030003',4,1,'author_36','lorem ipsum! 7842137450','2010-02-10 15:15:27'),(135,'00030001000300030001',5,0,'author_45','lorem ipsum! 3388476718','2010-02-10 15:15:27'),(34,'000300010004',3,0,'author_19','lorem ipsum! 9910050127','2010-02-10 15:15:27'),(35,'000300010005',3,4,'author_20','lorem ipsum! 5745512217','2010-02-10 15:15:27'),(41,'0003000100050001',4,2,'author_1','lorem ipsum! 2237025798','2010-02-10 15:15:27'),(91,'00030001000500010001',5,0,'author_1','lorem ipsum! 7715710763','2010-02-10 15:15:27'),(99,'00030001000500010002',5,0,'author_9','lorem ipsum! 5647017963','2010-02-10 15:15:27'),(46,'0003000100050002',4,1,'author_6','lorem ipsum! 6804912872','2010-02-10 15:15:27'),(93,'00030001000500020001',5,0,'author_3','lorem ipsum! 4080722847','2010-02-10 15:15:27'),(50,'0003000100050003',4,1,'author_10','lorem ipsum! 7568451637','2010-02-10 15:15:27'),(90,'00030001000500030001',5,0,'author_0','lorem ipsum! 8814342058','2010-02-10 15:15:27'),(56,'0003000100050004',4,0,'author_16','lorem ipsum! 6713527565','2010-02-10 15:15:27'),(4,'0004',1,3,'author_3','lorem ipsum! 4946033106','2010-02-10 15:15:27'),(5,'00040001',2,2,'author_0','lorem ipsum! 2050382059','2010-02-10 15:15:27'),(15,'000400010001',3,4,'author_0','lorem ipsum! 4937436070','2010-02-10 15:15:27'),(45,'0004000100010001',4,1,'author_5','lorem ipsum! 5366303279','2010-02-10 15:15:27'),(104,'00040001000100010001',5,0,'author_14','lorem ipsum! 1045470808','2010-02-10 15:15:27'),(49,'0004000100010002',4,1,'author_9','lorem ipsum! 9307100274','2010-02-10 15:15:27'),(126,'00040001000100020001',5,0,'author_36','lorem ipsum! 9093837016','2010-02-10 15:15:27'),(66,'0004000100010003',4,2,'author_26','lorem ipsum! 3212814972','2010-02-10 15:15:27'),(100,'00040001000100030001',5,0,'author_10','lorem ipsum! 4820338853','2010-02-10 15:15:27'),(105,'00040001000100030002',5,0,'author_15','lorem ipsum! 2829657358','2010-02-10 15:15:27'),(73,'0004000100010004',4,2,'author_33','lorem ipsum! 5863659113','2010-02-10 15:15:27'),(101,'00040001000100040001',5,0,'author_11','lorem ipsum! 2196372652','2010-02-10 15:15:27'),(107,'00040001000100040002',5,0,'author_17','lorem ipsum! 2455279337','2010-02-10 15:15:27'),(19,'000400010002',3,2,'author_4','lorem ipsum! 6787126557','2010-02-10 15:15:27'),(40,'0004000100020001',4,1,'author_0','lorem ipsum! 7716652986','2010-02-10 15:15:27'),(132,'00040001000200010001',5,0,'author_42','lorem ipsum! 8893124394','2010-02-10 15:15:27'),(59,'0004000100020002',4,1,'author_19','lorem ipsum! 1792462419','2010-02-10 15:15:27'),(118,'00040001000200020001',5,0,'author_28','lorem ipsum! 4111273190','2010-02-10 15:15:27'),(7,'00040002',2,1,'author_2','lorem ipsum! 8762193414','2010-02-10 15:15:27'),(16,'000400020001',3,1,'author_1','lorem ipsum! 3105521603','2010-02-10 15:15:27'),(63,'0004000200010001',4,0,'author_23','lorem ipsum! 5227133334','2010-02-10 15:15:27'),(10,'00040003',2,4,'author_5','lorem ipsum! 8485439231','2010-02-10 15:15:27'),(29,'000400030001',3,2,'author_14','lorem ipsum! 5695809897','2010-02-10 15:15:27'),(44,'0004000300010001',4,1,'author_4','lorem ipsum! 7723262387','2010-02-10 15:15:27'),(130,'00040003000100010001',5,0,'author_40','lorem ipsum! 5057317953','2010-02-10 15:15:27'),(60,'0004000300010002',4,0,'author_20','lorem ipsum! 7665409570','2010-02-10 15:15:27'),(32,'000400030002',3,2,'author_17','lorem ipsum! 3436839681','2010-02-10 15:15:27'),(69,'0004000300020001',4,2,'author_29','lorem ipsum! 4299627699','2010-02-10 15:15:27'),(95,'00040003000200010001',5,0,'author_5','lorem ipsum! 6369305131','2010-02-10 15:15:27'),(133,'00040003000200010002',5,0,'author_43','lorem ipsum! 8448065398','2010-02-10 15:15:27'),(87,'0004000300020002',4,0,'author_47','lorem ipsum! 3519029068','2010-02-10 15:15:27'),(33,'000400030003',3,3,'author_18','lorem ipsum! 4197556265','2010-02-10 15:15:27'),(43,'0004000300030001',4,2,'author_3','lorem ipsum! 9144839174','2010-02-10 15:15:27'),(134,'00040003000300010001',5,0,'author_44','lorem ipsum! 1838034291','2010-02-10 15:15:27'),(136,'00040003000300010002',5,0,'author_46','lorem ipsum! 1095537825','2010-02-10 15:15:27'),(54,'0004000300030002',4,2,'author_14','lorem ipsum! 8414238620','2010-02-10 15:15:27'),(119,'00040003000300020001',5,0,'author_29','lorem ipsum! 3710055401','2010-02-10 15:15:27'),(127,'00040003000300020002',5,0,'author_37','lorem ipsum! 2136242714','2010-02-10 15:15:27'),(83,'0004000300030003',4,2,'author_43','lorem ipsum! 6485021741','2010-02-10 15:15:27'),(110,'00040003000300030001',5,0,'author_20','lorem ipsum! 8347527252','2010-02-10 15:15:27'),(121,'00040003000300030002',5,0,'author_31','lorem ipsum! 2779974516','2010-02-10 15:15:27'),(39,'000400030004',3,1,'author_24','lorem ipsum! 4879871205','2010-02-10 15:15:27'),(52,'0004000300040001',4,2,'author_12','lorem ipsum! 5599689325','2010-02-10 15:15:27'),(111,'00040003000400010001',5,0,'author_21','lorem ipsum! 5491192947','2010-02-10 15:15:27'),(137,'00040003000400010002',5,0,'author_47','lorem ipsum! 2471326575','2010-02-10 15:15:27');
/*!40000 ALTER TABLE `core_post` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `djBooks_author`
--

DROP TABLE IF EXISTS `djBooks_author`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `djBooks_author` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `first_name` varchar(30) NOT NULL,
  `last_name` varchar(40) NOT NULL,
  `email` varchar(75) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=7 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `djBooks_author`
--

LOCK TABLES `djBooks_author` WRITE;
/*!40000 ALTER TABLE `djBooks_author` DISABLE KEYS */;
INSERT INTO `djBooks_author` VALUES (3,'Bill','Martin',''),(2,'Peggy','Rathmann',''),(4,'Margaret','Wise Brown',''),(5,'Eric','Carle',''),(6,'Sam','McBratney','');
/*!40000 ALTER TABLE `djBooks_author` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `djBooks_book`
--

DROP TABLE IF EXISTS `djBooks_book`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `djBooks_book` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  `publisher_id` int(11) NOT NULL,
  `publication_date` date NOT NULL,
  PRIMARY KEY (`id`),
  KEY `djBooks_book_22dd9c39` (`publisher_id`)
) ENGINE=MyISAM AUTO_INCREMENT=8 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `djBooks_book`
--

LOCK TABLES `djBooks_book` WRITE;
/*!40000 ALTER TABLE `djBooks_book` DISABLE KEYS */;
INSERT INTO `djBooks_book` VALUES (1,'Good Night, Gorilla',1,'1996-02-21'),(2,'The Very Hungry Caterpillar',2,'1994-03-23'),(3,'Goodnight Moon',5,'2005-09-06'),(4,'Guess How Much I Love You',3,'2008-10-14'),(5,'Big Red Barn Big Book',6,'1991-03-15'),(6,'Brown Bear, Brown Bear, What Do You See',7,'1996-09-15'),(7,'Officer Buckle & Gloria',1,'1995-09-28');
/*!40000 ALTER TABLE `djBooks_book` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `djBooks_book_authors`
--

DROP TABLE IF EXISTS `djBooks_book_authors`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `djBooks_book_authors` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `book_id` int(11) NOT NULL,
  `author_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `book_id` (`book_id`,`author_id`),
  KEY `djBooks_book_authors_752eb95b` (`book_id`),
  KEY `djBooks_book_authors_cc846901` (`author_id`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `djBooks_book_authors`
--

LOCK TABLES `djBooks_book_authors` WRITE;
/*!40000 ALTER TABLE `djBooks_book_authors` DISABLE KEYS */;
/*!40000 ALTER TABLE `djBooks_book_authors` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `djBooks_publisher`
--

DROP TABLE IF EXISTS `djBooks_publisher`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `djBooks_publisher` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(30) NOT NULL,
  `address` varchar(50) NOT NULL,
  `city` varchar(60) NOT NULL,
  `state_province` varchar(30) NOT NULL,
  `country` varchar(50) NOT NULL,
  `website` varchar(200) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=8 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `djBooks_publisher`
--

LOCK TABLES `djBooks_publisher` WRITE;
/*!40000 ALTER TABLE `djBooks_publisher` DISABLE KEYS */;
INSERT INTO `djBooks_publisher` VALUES (1,'Putnam Juvenile','','','','',''),(2,'Philomel','','','','',''),(3,'Candlewick','','','','',''),(5,'HarperCollins','','','','',''),(6,'HarperFestival','','','','',''),(7,'Henry Holt and Co.','','','','','');
/*!40000 ALTER TABLE `djBooks_publisher` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `django_admin_log`
--

DROP TABLE IF EXISTS `django_admin_log`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `django_admin_log` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `action_time` datetime NOT NULL,
  `user_id` int(11) NOT NULL,
  `content_type_id` int(11) DEFAULT NULL,
  `object_id` longtext,
  `object_repr` varchar(200) NOT NULL,
  `action_flag` smallint(5) unsigned NOT NULL,
  `change_message` longtext NOT NULL,
  PRIMARY KEY (`id`),
  KEY `user_id_refs_id_c8665aa` (`user_id`),
  KEY `content_type_id_refs_id_288599e6` (`content_type_id`)
) ENGINE=MyISAM AUTO_INCREMENT=34 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `django_admin_log`
--

LOCK TABLES `django_admin_log` WRITE;
/*!40000 ALTER TABLE `django_admin_log` DISABLE KEYS */;
INSERT INTO `django_admin_log` VALUES (1,'2011-05-11 14:20:00',2,17,'1','The Definitive Guide to Django: Web Development Done Right',1,''),(2,'2011-05-11 14:20:45',2,17,'2','Learning Python: Powerful Object-Oriented Programming',1,''),(3,'2011-05-11 14:22:25',2,17,'3','Goodnight, Gorilla',1,''),(4,'2011-05-18 16:32:40',2,29,'1','Peggy  Rathmann',1,''),(5,'2011-05-18 16:33:19',2,29,'2','Peggy Rathmann',1,''),(6,'2011-05-18 16:33:45',2,29,'1','Peggy  Rathmann',3,''),(7,'2011-05-18 16:34:35',2,29,'3','Bill Martin',1,''),(8,'2011-05-18 16:35:13',2,29,'4','Margaret Wise Brown',1,''),(9,'2011-05-18 16:35:46',2,29,'5','Eric Carle',1,''),(10,'2011-05-18 16:36:22',2,29,'6','Sam McBratney',1,''),(11,'2011-05-18 16:37:41',2,28,'1','Putnam Juvenile',1,''),(12,'2011-05-18 16:38:15',2,28,'2','Philomel',1,''),(13,'2011-05-18 16:38:37',2,28,'3','Candlewick',1,''),(14,'2011-05-18 16:38:57',2,28,'4','Candlewick',1,''),(15,'2011-05-18 16:40:12',2,28,'4','Candlewick',3,''),(16,'2011-05-18 16:40:33',2,30,'1','Good Night, Gorilla',1,''),(17,'2011-05-18 16:41:47',2,30,'2','The Very Hungry Caterpillar',1,''),(18,'2011-05-18 16:42:53',2,28,'5','HarperCollins',1,''),(19,'2011-05-18 16:43:12',2,30,'3','Goodnight Moon',1,''),(20,'2011-05-18 16:44:24',2,30,'4','Guess How Much I Love You',1,''),(21,'2011-05-18 16:45:36',2,28,'6','HarperFestival',1,''),(22,'2011-05-18 16:45:49',2,30,'5','Big Red Barn Big Book',1,''),(23,'2011-05-18 16:46:53',2,28,'7','Henry Holt and Co.',1,''),(24,'2011-05-18 16:46:58',2,30,'6','Brown Bear, Brown Bear, What Do You See',1,''),(25,'2011-05-18 16:49:20',2,30,'7','Officer Buckle & Gloria',1,''),(26,'2011-05-26 14:51:29',2,3,'3','mhuwaidi',1,''),(27,'2011-08-25 15:36:44',2,3,'3','mhuwaidi',3,''),(28,'2011-09-20 20:15:59',2,3,'4','liz',1,''),(29,'2011-09-20 20:16:09',2,3,'4','liz',2,'No fields changed.'),(30,'2012-02-14 15:05:36',2,67,'1','Mark Lutz',1,''),(31,'2012-02-14 15:25:13',2,18,'12','Programming',1,''),(32,'2012-02-14 15:27:40',2,68,'1','O\'Reilly Media Inc. ',1,''),(33,'2012-02-14 15:31:10',2,69,'1','Programming Python',2,'Changed authors and tags.');
/*!40000 ALTER TABLE `django_admin_log` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `django_content_type`
--

DROP TABLE IF EXISTS `django_content_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `django_content_type` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  `app_label` varchar(100) NOT NULL,
  `model` varchar(100) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `app_label` (`app_label`,`model`)
) ENGINE=MyISAM AUTO_INCREMENT=73 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `django_content_type`
--

LOCK TABLES `django_content_type` WRITE;
/*!40000 ALTER TABLE `django_content_type` DISABLE KEYS */;
INSERT INTO `django_content_type` VALUES (1,'permission','auth','permission'),(2,'group','auth','group'),(3,'user','auth','user'),(4,'message','auth','message'),(5,'content type','contenttypes','contenttype'),(6,'session','sessions','session'),(7,'site','sites','site'),(57,'linear equation_computational','Computational','linearequation_computational'),(10,'linear least square','Drivers','linearleastsquare'),(70,'file type','library','filetype'),(37,'linear equation_factor','Computational','linearequation_factor'),(13,'log entry','admin','logentry'),(16,'routine info','Drivers','routineinfo'),(47,'person','myapp','person'),(18,'tag','tagging','tag'),(19,'tagged item','tagging','taggeditem'),(20,'Person','movie','person'),(21,'Film','movie','movie'),(22,'Regisseur','movie','director'),(23,'Rolle','movie','cast'),(24,'Feed','movie','feed'),(25,'Post (Materialized Path Tree)','core','post'),(26,'link','bookmarks','link'),(27,'bookmark','bookmarks','bookmark'),(28,'publisher','books','publisher'),(29,'author','books','author'),(30,'book','books','book'),(32,'eigensolver','Drivers','eigensolver'),(67,'author','library','author'),(68,'publisher','library','publisher'),(69,'book','library','book'),(38,'linear equation_solve','Computational','linearequation_solve'),(39,'linear equation_condition_number','Computational','linearequation_condition_number'),(40,'linear equation_error_bound','Computational','linearequation_error_bound'),(41,'linear equation_invert','Computational','linearequation_invert'),(42,'linear equation_equilibrate','Computational','linearequation_equilibrate'),(45,'test','myapp','test'),(46,'result','myapp','result'),(48,'site configuration','siteconfig','siteconfiguration'),(49,'publisher','djBooks','publisher'),(50,'author','djBooks','author'),(51,'book','djBooks','book'),(71,'file','library','file'),(72,'note','notes','note'),(54,'linear equation_simple','Drivers','linearequation_simple'),(55,'linear equation_expert','Drivers','linearequation_expert'),(59,'routine info','Driver','routineinfo'),(58,'linear equation_drivers','Drivers','linearequation_drivers'),(66,'linear equation_only','Combine','linearequation_only'),(61,'linear equation_simple','Driver','linearequation_simple'),(62,'linear equation_expert','Driver','linearequation_expert'),(63,'linear least square','Driver','linearleastsquare'),(64,'eigensolver','Driver','eigensolver'),(65,'linear equation_driver','Driver','linearequation_driver');
/*!40000 ALTER TABLE `django_content_type` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `django_session`
--

DROP TABLE IF EXISTS `django_session`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `django_session` (
  `session_key` varchar(40) NOT NULL,
  `session_data` longtext NOT NULL,
  `expire_date` datetime NOT NULL,
  PRIMARY KEY (`session_key`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `django_session`
--

LOCK TABLES `django_session` WRITE;
/*!40000 ALTER TABLE `django_session` DISABLE KEYS */;
INSERT INTO `django_session` VALUES ('fbd4d59d5a4c29491fd123d199a71bdd','gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLjA3NGJiZjUzNWNjODU2NzFkNWExZTlhNDcz\nMDEzYzU3\n','2011-05-26 17:01:53'),('c660e5f3107f8947abb3eac890e2fdad','gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEEigECdS5kYzVmNTYwNWZjMDU0MjA0ZmYw\nMWU0NjgzODZkNGRlYg==\n','2011-05-25 14:10:47'),('fa4279fda8ef7c166b6feba7160e0402','gAJ9cQEuNjJjOGU0MmFiZmExZDlhZjJiOGVjNWNhNjEzYTI0OTM=\n','2011-05-25 09:16:23'),('636d330f87335ae545e9c8375da3bd05','gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEEigECdS5mN2RjY2VhZWU5YzRhNTdkNTk4\nMTUxNzFhYjkwZGI1MA==\n','2011-05-24 13:06:25'),('a64d1eae8eefeae36ffb095e5c458981','gAJ9cQEuMjQ1MGE5NmFiYTNkZTg4M2JiYjhjMzc0ZjI5ZGJlOWY=\n','2011-05-27 14:06:01'),('76d759e9f04275b1e7d9aa71ab024db3','gAJ9cQEuNjJjOGU0MmFiZmExZDlhZjJiOGVjNWNhNjEzYTI0OTM=\n','2011-05-30 11:25:37'),('8681e32d57db84df75fccccdbb2d19f3','ZDVhZDRkNzgyMmUxY2Y1ZmE1Y2FkY2NkNGUxYzM0NmRkNTg1NTJjNTqAAn1xAS4=\n','2011-05-31 16:19:16'),('b70075cb95208dcef79247347b14dcfe','gAJ9cQEoVRJfYXV0aF91c2VyX2JhY2tlbmRxAlUpZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5k\ncy5Nb2RlbEJhY2tlbmRxA1UNX2F1dGhfdXNlcl9pZHEEigECdS5mN2RjY2VhZWU5YzRhNTdkNTk4\nMTUxNzFhYjkwZGI1MA==\n','2011-05-31 09:19:29'),('3147ae69265afff92f421f8134eec915','gAJ9cQEuNjJjOGU0MmFiZmExZDlhZjJiOGVjNWNhNjEzYTI0OTM=\n','2011-06-01 15:55:50'),('4a72d321322f87321d18dddb116d9bac','gAJ9cQFVCnRlc3Rjb29raWVxAlUGd29ya2VkcQNzLmY5NTkxNDg0YzZjNGI5ZDA3ZjU0ZjA4ZjJi\nYWE5YzNj\n','2011-06-01 16:01:50'),('b12ed3b6c34ebc0557aeb356b5846cf2','ZDkwMGI0ODVkOGMxYmFjOWUxYmU2NjBmY2M5ZWZiY2UxYmI1NjliYTqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n','2011-06-29 15:46:18'),('b1f973dcaa938b1f8d2bef882ff4de17','NTgwZmI2N2RhNDNjODU4ODU3ZWJlMTA3MzZiZmZjZWY3ZWNiM2UxMzqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQSKAQJ1Lg==\n','2011-06-09 10:57:48'),('3b33c5443a84a27f50ed0a9c2d3470a2','NTgwZmI2N2RhNDNjODU4ODU3ZWJlMTA3MzZiZmZjZWY3ZWNiM2UxMzqAAn1xAShVEl9hdXRoX3Vz\nZXJfYmFja2VuZHECVSlkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZHED\nVQ1fYXV0aF91c2VyX2lkcQSKAQJ1Lg==\n','2011-06-06 10:52:15'),('1e03689e85c1cd5c1a95878594ae4956','NTM2ZDkyZDU1M2Q4M2Q0NTAzYmUyN2NmYmYxZWVkMTYzN2EwMzFiZDqAAn1xAVUKdGVzdGNvb2tp\nZXECVQZ3b3JrZWRxA3Mu\n','2011-07-07 22:44:33'),('fe54412bf70ddb8f3b3cfc36781d2fd6','MmM1NTA2MWMxY2MzOTdiMmQ0N2M4ZjA5N2NjMmMyMzAwY2E2NzQwNDqAAn1xAShVBWNvdW50cQJL\nAVUKdGVzdGNvb2tpZXEDVQZ3b3JrZWRxBHUu\n','2011-07-20 15:00:01'),('6ecf38930b220ec3df33a07a77866ae2','ODFkYTJkZDEwMjUzODM0MDQ1NzE5M2Y3MThmZjZlYTk3MDljZDBmODqAAn1xAShVC2ZpbHRlcl9k\naWN0cQJ9cQMoVRB0aGVQcmVjaXNpb25fX2lucQRdcQVVAXphVQptYXRyaXhUeXBlcQZVB2dlbmVy\nYWxxB1UNc3RydWN0dXJlVHlwZXEIVQRmdWxscQl1VQp0ZXN0Y29va2llcQpVBndvcmtlZHELVQlR\ndWVzdGlvbjVxDF1xDShoCVUERnVsbHEOZVUJUXVlc3Rpb240cQ9dcRAoaAdVB0dlbmVyYWxxEWVV\nCVF1ZXN0aW9uMXESXXETKFURTGluZWFyTGVhc3RTcXVhcmVxFFUUTGluZWFyIExlYXN0IFNxdWFy\nZXNxFWVVCVF1ZXN0aW9uM3EWXXEXKFUBeVUDWWVzcRhlVQlRdWVzdGlvbjJxGV1xGihVAWRVBkRv\ndWJsZXEbZXUu\n','2011-08-01 15:00:05'),('66f7acc63873b9f9fc0be1fa2aacf0c8','ZDVhZDRkNzgyMmUxY2Y1ZmE1Y2FkY2NkNGUxYzM0NmRkNTg1NTJjNTqAAn1xAS4=\n','2011-08-05 13:40:12'),('758052a71901c81a6897e6c11d23bf6f','ZjNkNTNlYTA5NmRmOWU4MWE4YjE2MzllZTM5OWNiMzdiNDQ2OTRmZjqAAn1xAShVCVF1ZXN0aW9u\nNHECXXEDKFgJAAAAc3ltbWV0cmljcQRYCQAAAHN5bW1ldHJpY3EFZVUJUXVlc3Rpb24xcQZdcQco\nVQ5MaW5lYXJFcXVhdGlvbnEIVS1MaW5lYXIgRXF1YXRpb24sIHNvbHZlIEF4ID0gYiAoc3F1YXJl\nIG1hdHJpeClxCWVVC2ZpbHRlcl9kaWN0cQp9cQsoVRB0aGVQcmVjaXNpb25fX2lucQxdcQ1VAWRh\nVQptYXRyaXhUeXBlcQ5oBHVVCVF1ZXN0aW9uM3EPXXEQKFUBblUCTm9xEWVVCVF1ZXN0aW9uMnES\nXXETKFUBZFUGRG91YmxlcRRldS4=\n','2011-08-24 13:36:37'),('ada18efb0d7fddc2355760c9c28fd399','ZDVhZDRkNzgyMmUxY2Y1ZmE1Y2FkY2NkNGUxYzM0NmRkNTg1NTJjNTqAAn1xAS4=\n','2011-08-24 13:42:00'),('4e4b62f45f88de89e087b2aebb675197','NmFiZWZiYWRkOWNlNjY5NzVjYmVlNjU4YThiZWRlMzUxNmUzOWFhZTqAAn1xAShVC2ZpbHRlcl9k\naWN0cQJ9cQMoVRB0aGVQcmVjaXNpb25fX2lucQRdcQVVAWRhVQptYXRyaXhUeXBlcQZVCXN5bW1l\ndHJpY3EHVQ1zdHJ1Y3R1cmVUeXBlcQhVBGZ1bGxxCXVVCVF1ZXN0aW9uNXEKXXELKGgJVQRGdWxs\ncQxlVQlRdWVzdGlvbjRxDV1xDihoB1UJU3ltbWV0cmljcQ9lVQlRdWVzdGlvbjFxEF1xEShVDkxp\nbmVhckVxdWF0aW9ucRJVLUxpbmVhciBFcXVhdGlvbiwgc29sdmUgQXggPSBiIChzcXVhcmUgbWF0\ncml4KXETZVUJUXVlc3Rpb24zcRRdcRUoVQFuVQJOb3EWZVUJUXVlc3Rpb24ycRddcRgoVQFkVQZE\nb3VibGVxGWV1Lg==\n','2011-08-02 14:06:01'),('aed656a450e615b6407f7df67a8f73a3','OGM4MDA2YzAyOTJkYzZmNTg5NGI5MTY3YzA2ZTAwZDI4NGY5NGEzMjqAAn1xAShVCVF1ZXN0aW9u\nNHECXXEDKFgDAAAAU1BEcQRYAwAAAFNQRHEFZVUJUXVlc3Rpb24xcQZdcQcoVQ5MaW5lYXJFcXVh\ndGlvbnEIVS1MaW5lYXIgRXF1YXRpb24sIHNvbHZlIEF4ID0gYiAoc3F1YXJlIG1hdHJpeClxCWVV\nC2ZpbHRlcl9kaWN0cQp9cQsoVRB0aGVQcmVjaXNpb25fX2lucQxdcQ1VAXphVQptYXRyaXhUeXBl\ncQ5oBHVVCVF1ZXN0aW9uM3EPXXEQKFUBeVUDWWVzcRFlVQlRdWVzdGlvbjJxEl1xEyhVAWRVBkRv\ndWJsZXEUZXUu\n','2011-09-13 14:54:59'),('0b3d11cc1d9198bbfa2e05d727f8bc6d','MTMwZDIzZTM3M2ZjYjU0ZWFiMWYzYmMwMTdlYmY4MjgzMmMxMGE4NjqAAn1xAShVC0FwcGxpY2F0\naW9ucQJVB0NvbWJpbmVxA1UJUXVlc3Rpb24xcQRdcQUoVRNMaW5lYXJFcXVhdGlvbl9jb21icQZV\nMExpbmVhciBFcXVhdGlvbiwgc29sdmUgQSAqIFggPSBCIChzcXVhcmUgbWF0cml4KXEHZVULZmls\ndGVyX2RpY3RxCH1xCVUQdGhlUHJlY2lzaW9uX19pbnEKXXELKFUBY1UBemVzVQlRdWVzdGlvbjJx\nDF1xDShVAXlVA1llc3EOZXUu\n','2011-10-11 12:10:43'),('dad337e459891bd8907c16ce67c65d05','ZDVhZDRkNzgyMmUxY2Y1ZmE1Y2FkY2NkNGUxYzM0NmRkNTg1NTJjNTqAAn1xAS4=\n','2011-10-04 13:53:56'),('e2a7a474659c857da1870c0d934e7aa7','ZDVhZDRkNzgyMmUxY2Y1ZmE1Y2FkY2NkNGUxYzM0NmRkNTg1NTJjNTqAAn1xAS4=\n','2011-10-16 14:57:05'),('5e379a42379f47b779a31ae604a1419c','ZDVhZDRkNzgyMmUxY2Y1ZmE1Y2FkY2NkNGUxYzM0NmRkNTg1NTJjNTqAAn1xAS4=\n','2011-10-11 13:31:28'),('7434e459cffcf7085428ff4be8bde310','YjM1MTFjNjNlNTE2MGU3ZTc2ZWFlODhlNjliZjBlNWRhZTU1YjYyMDqAAn1xAShVC0FwcGxpY2F0\naW9ucQJVDUNvbXB1dGF0aW9uYWxxA1UJUXVlc3Rpb24xcQRdcQUoVRVMaW5lYXJFcXVhdGlvbl9m\nYWN0b3JxBlUUTWF0cml4IEZhY3Rvcml6YXRpb25xB2V1Lg==\n','2011-10-11 15:54:56'),('b7d395cbad425fcfcd1ff005c723daf5','Njg1MzEyYTJjMGI0OTZkYzQ4YmMwODhkZTU5MmNmM2QxZGMxNzYxYjqAAn1xAShVC0FwcGxpY2F0\naW9ucQJVB0NvbWJpbmVxA1UJUXVlc3Rpb24xcQRdcQUoVRRMaW5lYXJFcXVhdGlvbl90cmFuc3EG\nVUNMaW5lYXIgRXF1YXRpb24sIHNvbHZlIEEqKlQgKiBYID0gQiBvciBBKipIICogWCA9IEIgKHNx\ndWFyZSBtYXRyaXgpcQdldS4=\n','2011-10-06 14:00:29'),('6c0a80d386705f1f90cfaff93f63c291','NTc1YzZlNGY0NjQwODMwNzg1MDNmNmEyZTdjNDYyY2QyZTA0NTgyNTqAAn1xAShVCVF1ZXN0aW9u\nNHECXXEDKFgEAAAAZnVsbHEEWAQAAABmdWxscQVlVQhSb3V0aW5lc3EGY2RqYW5nby5kYi5tb2Rl\nbHMucXVlcnkKUXVlcnlTZXQKcQcpgXEIfXEJKFUFX2l0ZXJxCk5VCl9mb3Jfd3JpdGVxC4lVDl9z\ndGlja3lfZmlsdGVycQyJVQVxdWVyeXENY2RqYW5nby5kYi5tb2RlbHMuc3FsLnF1ZXJ5ClF1ZXJ5\nCnEOKYFxD31xEChVFWFnZ3JlZ2F0ZV9zZWxlY3RfbWFza3ERTlUXX2FnZ3JlZ2F0ZV9zZWxlY3Rf\nY2FjaGVxEk5VBWV4dHJhcRNjZGphbmdvLnV0aWxzLmRhdGFzdHJ1Y3R1cmVzClNvcnRlZERpY3QK\ncRQpgXEVfXEWVQhrZXlPcmRlcnEXXXEYc2JVCGpvaW5fbWFwcRl9cRooTlUqQ29tcHV0YXRpb25h\nbF9saW5lYXJlcXVhdGlvbl9jb21wdXRhdGlvbmFscRtOTnRxHGgbhXEdc1UVcmVsYXRlZF9zZWxl\nY3RfZmllbGRzcR5dcR9VDGV4dHJhX3RhYmxlc3EgKVUGc2VsZWN0cSFdcSJVC3F1b3RlX2NhY2hl\ncSN9cSRVDHJldl9qb2luX21hcHElfXEmaBtoHHNVDHVzZWRfYWxpYXNlc3EnY19fYnVpbHRpbl9f\nCnNldApxKF1xKWgbYYVScSpVCG9yZGVyX2J5cStdcSxVCGRpc3RpbmN0cS2JVQ5kdXBlX2F2b2lk\nYW5jZXEufXEvVQhncm91cF9ieXEwTlUJYWxpYXNfbWFwcTF9cTJoGyhoG2gbTk5OTol0cTNzVQ5z\nZWxlY3RfcmVsYXRlZHE0iVUQZGVmZXJyZWRfbG9hZGluZ3E1aChdhVJxNoiGcTdVDXNlbGVjdF9m\naWVsZHNxOF1xOVUTX2V4dHJhX3NlbGVjdF9jYWNoZXE6TlUJbWF4X2RlcHRocTtLBVURc3RhbmRh\ncmRfb3JkZXJpbmdxPIhVDmV4dHJhX29yZGVyX2J5cT0pVRBkZWZhdWx0X29yZGVyaW5ncT6IVQZ0\nYWJsZXNxP11xQGgbYVUKYWdncmVnYXRlc3FBaBQpgXFCfXFDaBddcURzYlURZXh0cmFfc2VsZWN0\nX21hc2txRU5VCGxvd19tYXJrcUZLAFUOYWxpYXNfcmVmY291bnRxR31xSGgbSwVzVRNyZWxhdGVk\nX3NlbGVjdF9jb2xzcUldcUpVDGRlZmF1bHRfY29sc3FLiFUQb3JkZXJpbmdfYWxpYXNlc3FMXXFN\nVQZoYXZpbmdxTmNkamFuZ28uZGIubW9kZWxzLnNxbC53aGVyZQpXaGVyZU5vZGUKcU8pgXFQfXFR\nKFUJY29ubmVjdG9ycVJVA0FORHFTVQduZWdhdGVkcVSJVQhjaGlsZHJlbnFVXXFWVQ9zdWJ0cmVl\nX3BhcmVudHNxV11xWHViVRlpbmNsdWRlZF9pbmhlcml0ZWRfbW9kZWxzcVl9cVpOaBtzVQl0YWJs\nZV9tYXBxW31xXGgbXXFdaBthc1ULd2hlcmVfY2xhc3NxXmhPVQVtb2RlbHFfY0NvbXB1dGF0aW9u\nYWwubW9kZWxzCkxpbmVhckVxdWF0aW9uX2NvbXB1dGF0aW9uYWwKcWBVBXdoZXJlcWFoTymBcWJ9\ncWMoaFJVA0FORHFkaFSJaFVdcWUoaE8pgXFmfXFnKGhSVQJPUnFoaFSJaFVdcWkoaE8pgXFqfXFr\nKGhSaFNoVIloVV1xbGhXXXFtdWJoTymBcW59cW8oaFJoaGhUiWhVXXFwKGNkamFuZ28uZGIubW9k\nZWxzLnNxbC53aGVyZQpDb25zdHJhaW50CnFxKYFxcn1xcyhVBWFsaWFzcXRoG2hfaGBVCmZpZWxk\nX25hbWVxdVUFbm90ZXNxdlUDY29scXdVBW5vdGVzcXh1YlUJaWNvbnRhaW5ziFgGAAAAcmVmaW5l\ncXl0cXphaFddcXt1YmhPKYFxfH1xfShoUmhoaFSJaFVdcX4oaHEpgXF/fXGAKGh0aBtoX2hgaHVo\ndmh3aHh1YlUJaWNvbnRhaW5ziFgMAAAAZXJyb3IgYm91bmRzcYF0cYJhaFddcYN1YmVoV11xhHVi\naE8pgXGFfXGGKGhSaGRoVIloVV1xhyhocSmBcYh9cYkoVQVhbGlhc3GKaBtoX2hgaHVVDHRoZVBy\nZWNpc2lvbnGLVQNjb2xxjFUMdGhlUHJlY2lzaW9ucY11YlUCaW6IXXGOKFUBc1UBZGV0cY9haFdd\ncZB1YmhPKYFxkX1xkihoUlUDQU5EcZNoVIloVV1xlChocSmBcZV9cZYoVQVhbGlhc3GXaBtoX2hg\naHVVCm1hdHJpeFR5cGVxmFUDY29scZlVCm1hdHJpeFR5cGVxmnViVQVleGFjdIhYBwAAAGdlbmVy\nYWxxm3RxnGFoV11xnXViaE8pgXGefXGfKGhSVQNBTkRxoGhUiWhVXXGhKGhxKYFxon1xoyhVBWFs\naWFzcaRoG2hfaGBodVULc3RvcmFnZVR5cGVxpVUDY29scaZopXViVQVleGFjdHGniGgEdHGoYWhX\nXXGpdWJlaFddcap1YlUJaGlnaF9tYXJrcatOVRBmaWx0ZXJfaXNfc3RpY2t5cayJdWJVA19kYnGt\nTmhfaGBVDV9yZXN1bHRfY2FjaGVxrl1xryhjZGphbmdvLmRiLm1vZGVscy5iYXNlCm1vZGVsX3Vu\ncGlja2xlCnGwaGBdY2RqYW5nby5kYi5tb2RlbHMuYmFzZQpzaW1wbGVfY2xhc3NfZmFjdG9yeQpx\nsYdScbJ9cbMoaJhYBwAAAGdlbmVyYWxxtGilWAQAAABmdWxscbVodlg/AAAAcmVmaW5lIHNvbHV0\naW9uIHRvIEF4PWIsIGVycm9yIGJvdW5kcywgYmFja3dhcmQgZXJyb3IgZXN0aW1hdGVzcbZVBl9z\ndGF0ZXG3Y2RqYW5nby5kYi5tb2RlbHMuYmFzZQpNb2RlbFN0YXRlCnG4KYFxuX1xuihVBmFkZGlu\nZ3G7iVUCZGJxvFUHZGVmYXVsdHG9dWJVA3VybHG+WCwAAABodHRwOi8vd3d3Lm5ldGxpYi5vcmcv\nbGFwYWNrL3NpbmdsZS9zZ2VyZnMuZnG/aItYAQAAAHNVC19pbmZvX2NhY2hlccBosGNEcml2ZXJz\nLm1vZGVscwpSb3V0aW5lSW5mbwpxwV1osYdSccJ9ccMoVQRpbmZvccRYdA4AACAgICAgIFNVQlJP\nVVRJTkUgU0dFUkZTKCBUUkFOUywgTiwgTlJIUywgQSwgTERBLCBBRiwgTERBRiwgSVBJViwgQiwg\nTERCLAogICAgICQgICAgICAgICAgICAgICAgICAgWCwgTERYLCBGRVJSLCBCRVJSLCBXT1JLLCBJ\nV09SSywgSU5GTyApCioKKiAgLS0gTEFQQUNLIHJvdXRpbmUgKHZlcnNpb24gMy4yKSAtLQoqICAt\nLSBMQVBBQ0sgaXMgYSBzb2Z0d2FyZSBwYWNrYWdlIHByb3ZpZGVkIGJ5IFVuaXYuIG9mIFRlbm5l\nc3NlZSwgICAgLS0KKiAgLS0gVW5pdi4gb2YgQ2FsaWZvcm5pYSBCZXJrZWxleSwgVW5pdi4gb2Yg\nQ29sb3JhZG8gRGVudmVyIGFuZCBOQUcgTHRkLi4tLQoqICAgICBOb3ZlbWJlciAyMDA2CioKKiAg\nICAgTW9kaWZpZWQgdG8gY2FsbCBTTEFDTjIgaW4gcGxhY2Ugb2YgU0xBQ09OLCA3IEZlYiAwMywg\nU0pILgoqCiogICAgIC4uIFNjYWxhciBBcmd1bWVudHMgLi4KICAgICAgQ0hBUkFDVEVSICAgICAg\nICAgIFRSQU5TCiAgICAgIElOVEVHRVIgICAgICAgICAgICBJTkZPLCBMREEsIExEQUYsIExEQiwg\nTERYLCBOLCBOUkhTCiogICAgIC4uCiogICAgIC4uIEFycmF5IEFyZ3VtZW50cyAuLgogICAgICBJ\nTlRFR0VSICAgICAgICAgICAgSVBJViggKiApLCBJV09SSyggKiApCiAgICAgIFJFQUwgICAgICAg\nICAgICAgICBBKCBMREEsICogKSwgQUYoIExEQUYsICogKSwgQiggTERCLCAqICksCiAgICAgJCAg\nICAgICAgICAgICAgICAgICBCRVJSKCAqICksIEZFUlIoICogKSwgV09SSyggKiApLCBYKCBMRFgs\nICogKQoqICAgICAuLgoqCiogIFB1cnBvc2UKKiAgPT09PT09PQoqCiogIFNHRVJGUyBpbXByb3Zl\ncyB0aGUgY29tcHV0ZWQgc29sdXRpb24gdG8gYSBzeXN0ZW0gb2YgbGluZWFyCiogIGVxdWF0aW9u\ncyBhbmQgcHJvdmlkZXMgZXJyb3IgYm91bmRzIGFuZCBiYWNrd2FyZCBlcnJvciBlc3RpbWF0ZXMg\nZm9yCiogIHRoZSBzb2x1dGlvbi4KKgoqICBBcmd1bWVudHMKKiAgPT09PT09PT09CioKKiAgVFJB\nTlMgICAoaW5wdXQpIENIQVJBQ1RFUioxCiogICAgICAgICAgU3BlY2lmaWVzIHRoZSBmb3JtIG9m\nIHRoZSBzeXN0ZW0gb2YgZXF1YXRpb25zOgoqICAgICAgICAgID0gJ04nOiAgQSAqIFggPSBCICAg\nICAoTm8gdHJhbnNwb3NlKQoqICAgICAgICAgID0gJ1QnOiAgQSoqVCAqIFggPSBCICAoVHJhbnNw\nb3NlKQoqICAgICAgICAgID0gJ0MnOiAgQSoqSCAqIFggPSBCICAoQ29uanVnYXRlIHRyYW5zcG9z\nZSA9IFRyYW5zcG9zZSkKKgoqICBOICAgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRo\nZSBvcmRlciBvZiB0aGUgbWF0cml4IEEuICBOID49IDAuCioKKiAgTlJIUyAgICAoaW5wdXQpIElO\nVEVHRVIKKiAgICAgICAgICBUaGUgbnVtYmVyIG9mIHJpZ2h0IGhhbmQgc2lkZXMsIGkuZS4sIHRo\nZSBudW1iZXIgb2YgY29sdW1ucwoqICAgICAgICAgIG9mIHRoZSBtYXRyaWNlcyBCIGFuZCBYLiAg\nTlJIUyA+PSAwLgoqCiogIEEgICAgICAgKGlucHV0KSBSRUFMIGFycmF5LCBkaW1lbnNpb24gKExE\nQSxOKQoqICAgICAgICAgIFRoZSBvcmlnaW5hbCBOLWJ5LU4gbWF0cml4IEEuCioKKiAgTERBICAg\nICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbGVhZGluZyBkaW1lbnNpb24gb2YgdGhl\nIGFycmF5IEEuICBMREEgPj0gbWF4KDEsTikuCioKKiAgQUYgICAgICAoaW5wdXQpIFJFQUwgYXJy\nYXksIGRpbWVuc2lvbiAoTERBRixOKQoqICAgICAgICAgIFRoZSBmYWN0b3JzIEwgYW5kIFUgZnJv\nbSB0aGUgZmFjdG9yaXphdGlvbiBBID0gUCpMKlUKKiAgICAgICAgICBhcyBjb21wdXRlZCBieSBT\nR0VUUkYuCioKKiAgTERBRiAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbGVhZGlu\nZyBkaW1lbnNpb24gb2YgdGhlIGFycmF5IEFGLiAgTERBRiA+PSBtYXgoMSxOKS4KKgoqICBJUElW\nICAgIChpbnB1dCkgSU5URUdFUiBhcnJheSwgZGltZW5zaW9uIChOKQoqICAgICAgICAgIFRoZSBw\naXZvdCBpbmRpY2VzIGZyb20gU0dFVFJGOyBmb3IgMTw9aTw9Tiwgcm93IGkgb2YgdGhlCiogICAg\nICAgICAgbWF0cml4IHdhcyBpbnRlcmNoYW5nZWQgd2l0aCByb3cgSVBJVihpKS4KKgoqICBCICAg\nICAgIChpbnB1dCkgUkVBTCBhcnJheSwgZGltZW5zaW9uIChMREIsTlJIUykKKiAgICAgICAgICBU\naGUgcmlnaHQgaGFuZCBzaWRlIG1hdHJpeCBCLgoqCiogIExEQiAgICAgKGlucHV0KSBJTlRFR0VS\nCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBCLiAgTERCID49\nIG1heCgxLE4pLgoqCiogIFggICAgICAgKGlucHV0L291dHB1dCkgUkVBTCBhcnJheSwgZGltZW5z\naW9uIChMRFgsTlJIUykKKiAgICAgICAgICBPbiBlbnRyeSwgdGhlIHNvbHV0aW9uIG1hdHJpeCBY\nLCBhcyBjb21wdXRlZCBieSBTR0VUUlMuCiogICAgICAgICAgT24gZXhpdCwgdGhlIGltcHJvdmVk\nIHNvbHV0aW9uIG1hdHJpeCBYLgoqCiogIExEWCAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAg\nICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBYLiAgTERYID49IG1heCgxLE4p\nLgoqCiogIEZFUlIgICAgKG91dHB1dCkgUkVBTCBhcnJheSwgZGltZW5zaW9uIChOUkhTKQoqICAg\nICAgICAgIFRoZSBlc3RpbWF0ZWQgZm9yd2FyZCBlcnJvciBib3VuZCBmb3IgZWFjaCBzb2x1dGlv\nbiB2ZWN0b3IKKiAgICAgICAgICBYKGopICh0aGUgai10aCBjb2x1bW4gb2YgdGhlIHNvbHV0aW9u\nIG1hdHJpeCBYKS4KKiAgICAgICAgICBJZiBYVFJVRSBpcyB0aGUgdHJ1ZSBzb2x1dGlvbiBjb3Jy\nZXNwb25kaW5nIHRvIFgoaiksIEZFUlIoaikKKiAgICAgICAgICBpcyBhbiBlc3RpbWF0ZWQgdXBw\nZXIgYm91bmQgZm9yIHRoZSBtYWduaXR1ZGUgb2YgdGhlIGxhcmdlc3QKKiAgICAgICAgICBlbGVt\nZW50IGluIChYKGopIC0gWFRSVUUpIGRpdmlkZWQgYnkgdGhlIG1hZ25pdHVkZSBvZiB0aGUKKiAg\nICAgICAgICBsYXJnZXN0IGVsZW1lbnQgaW4gWChqKS4gIFRoZSBlc3RpbWF0ZSBpcyBhcyByZWxp\nYWJsZSBhcwoqICAgICAgICAgIHRoZSBlc3RpbWF0ZSBmb3IgUkNPTkQsIGFuZCBpcyBhbG1vc3Qg\nYWx3YXlzIGEgc2xpZ2h0CiogICAgICAgICAgb3ZlcmVzdGltYXRlIG9mIHRoZSB0cnVlIGVycm9y\nLgoqCiogIEJFUlIgICAgKG91dHB1dCkgUkVBTCBhcnJheSwgZGltZW5zaW9uIChOUkhTKQoqICAg\nICAgICAgIFRoZSBjb21wb25lbnR3aXNlIHJlbGF0aXZlIGJhY2t3YXJkIGVycm9yIG9mIGVhY2gg\nc29sdXRpb24KKiAgICAgICAgICB2ZWN0b3IgWChqKSAoaS5lLiwgdGhlIHNtYWxsZXN0IHJlbGF0\naXZlIGNoYW5nZSBpbgoqICAgICAgICAgIGFueSBlbGVtZW50IG9mIEEgb3IgQiB0aGF0IG1ha2Vz\nIFgoaikgYW4gZXhhY3Qgc29sdXRpb24pLgoqCiogIFdPUksgICAgKHdvcmtzcGFjZSkgUkVBTCBh\ncnJheSwgZGltZW5zaW9uICgzKk4pCioKKiAgSVdPUksgICAod29ya3NwYWNlKSBJTlRFR0VSIGFy\ncmF5LCBkaW1lbnNpb24gKE4pCioKKiAgSU5GTyAgICAob3V0cHV0KSBJTlRFR0VSCiogICAgICAg\nICAgPSAwOiAgc3VjY2Vzc2Z1bCBleGl0CiogICAgICAgICAgPCAwOiAgaWYgSU5GTyA9IC1pLCB0\naGUgaS10aCBhcmd1bWVudCBoYWQgYW4gaWxsZWdhbCB2YWx1ZQoqCiogIEludGVybmFsIFBhcmFt\nZXRlcnMKKiAgPT09PT09PT09PT09PT09PT09PQoqCiogIElUTUFYIGlzIHRoZSBtYXhpbXVtIG51\nbWJlciBvZiBzdGVwcyBvZiBpdGVyYXRpdmUgcmVmaW5lbWVudC4KKgpxxWi3aLgpgXHGfXHHKGi7\niWi8aL11YlUCaWRxyIoCbQFVB3JvdXRpbmVxyVgOAAAAc2dlcmZzXzM2NS50eHRxynViVQdpbmZv\nX2lkccuKAm0BVQtyb3V0aW5lTmFtZXHMWAUAAABnZXJmc3HNaMiKApEAdWJosGhgXWixh1Jxzn1x\nzyhomFgHAAAAZ2VuZXJhbHHQaKVYBAAAAGZ1bGxx0Wh2WD8AAAByZWZpbmUgc29sdXRpb24gdG8g\nQXg9YiwgZXJyb3IgYm91bmRzLCBiYWNrd2FyZCBlcnJvciBlc3RpbWF0ZXNx0mi3aLgpgXHTfXHU\nKGi7iWi8aL11Ymi+WCwAAABodHRwOi8vd3d3Lm5ldGxpYi5vcmcvbGFwYWNrL2RvdWJsZS9kZ2Vy\nZnMuZnHVaItYAQAAAGRowGiwaMFdaLGHUnHWfXHXKGjEWMgOAAAgICAgICBTVUJST1VUSU5FIERH\nRVJGUyggVFJBTlMsIE4sIE5SSFMsIEEsIExEQSwgQUYsIExEQUYsIElQSVYsIEIsIExEQiwKICAg\nICAkICAgICAgICAgICAgICAgICAgIFgsIExEWCwgRkVSUiwgQkVSUiwgV09SSywgSVdPUkssIElO\nRk8gKQoqCiogIC0tIExBUEFDSyByb3V0aW5lICh2ZXJzaW9uIDMuMikgLS0KKiAgLS0gTEFQQUNL\nIGlzIGEgc29mdHdhcmUgcGFja2FnZSBwcm92aWRlZCBieSBVbml2LiBvZiBUZW5uZXNzZWUsICAg\nIC0tCiogIC0tIFVuaXYuIG9mIENhbGlmb3JuaWEgQmVya2VsZXksIFVuaXYuIG9mIENvbG9yYWRv\nIERlbnZlciBhbmQgTkFHIEx0ZC4uLS0KKiAgICAgTm92ZW1iZXIgMjAwNgoqCiogICAgIE1vZGlm\naWVkIHRvIGNhbGwgRExBQ04yIGluIHBsYWNlIG9mIERMQUNPTiwgNSBGZWIgMDMsIFNKSC4KKgoq\nICAgICAuLiBTY2FsYXIgQXJndW1lbnRzIC4uCiAgICAgIENIQVJBQ1RFUiAgICAgICAgICBUUkFO\nUwogICAgICBJTlRFR0VSICAgICAgICAgICAgSU5GTywgTERBLCBMREFGLCBMREIsIExEWCwgTiwg\nTlJIUwoqICAgICAuLgoqICAgICAuLiBBcnJheSBBcmd1bWVudHMgLi4KICAgICAgSU5URUdFUiAg\nICAgICAgICAgIElQSVYoICogKSwgSVdPUksoICogKQogICAgICBET1VCTEUgUFJFQ0lTSU9OICAg\nQSggTERBLCAqICksIEFGKCBMREFGLCAqICksIEIoIExEQiwgKiApLAogICAgICQgICAgICAgICAg\nICAgICAgICAgQkVSUiggKiApLCBGRVJSKCAqICksIFdPUksoICogKSwgWCggTERYLCAqICkKKiAg\nICAgLi4KKgoqICBQdXJwb3NlCiogID09PT09PT0KKgoqICBER0VSRlMgaW1wcm92ZXMgdGhlIGNv\nbXB1dGVkIHNvbHV0aW9uIHRvIGEgc3lzdGVtIG9mIGxpbmVhcgoqICBlcXVhdGlvbnMgYW5kIHBy\nb3ZpZGVzIGVycm9yIGJvdW5kcyBhbmQgYmFja3dhcmQgZXJyb3IgZXN0aW1hdGVzIGZvcgoqICB0\naGUgc29sdXRpb24uCioKKiAgQXJndW1lbnRzCiogID09PT09PT09PQoqCiogIFRSQU5TICAgKGlu\ncHV0KSBDSEFSQUNURVIqMQoqICAgICAgICAgIFNwZWNpZmllcyB0aGUgZm9ybSBvZiB0aGUgc3lz\ndGVtIG9mIGVxdWF0aW9uczoKKiAgICAgICAgICA9ICdOJzogIEEgKiBYID0gQiAgICAgKE5vIHRy\nYW5zcG9zZSkKKiAgICAgICAgICA9ICdUJzogIEEqKlQgKiBYID0gQiAgKFRyYW5zcG9zZSkKKiAg\nICAgICAgICA9ICdDJzogIEEqKkggKiBYID0gQiAgKENvbmp1Z2F0ZSB0cmFuc3Bvc2UgPSBUcmFu\nc3Bvc2UpCioKKiAgTiAgICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgb3JkZXIg\nb2YgdGhlIG1hdHJpeCBBLiAgTiA+PSAwLgoqCiogIE5SSFMgICAgKGlucHV0KSBJTlRFR0VSCiog\nICAgICAgICAgVGhlIG51bWJlciBvZiByaWdodCBoYW5kIHNpZGVzLCBpLmUuLCB0aGUgbnVtYmVy\nIG9mIGNvbHVtbnMKKiAgICAgICAgICBvZiB0aGUgbWF0cmljZXMgQiBhbmQgWC4gIE5SSFMgPj0g\nMC4KKgoqICBBICAgICAgIChpbnB1dCkgRE9VQkxFIFBSRUNJU0lPTiBhcnJheSwgZGltZW5zaW9u\nIChMREEsTikKKiAgICAgICAgICBUaGUgb3JpZ2luYWwgTi1ieS1OIG1hdHJpeCBBLgoqCiogIExE\nQSAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9m\nIHRoZSBhcnJheSBBLiAgTERBID49IG1heCgxLE4pLgoqCiogIEFGICAgICAgKGlucHV0KSBET1VC\nTEUgUFJFQ0lTSU9OIGFycmF5LCBkaW1lbnNpb24gKExEQUYsTikKKiAgICAgICAgICBUaGUgZmFj\ndG9ycyBMIGFuZCBVIGZyb20gdGhlIGZhY3Rvcml6YXRpb24gQSA9IFAqTCpVCiogICAgICAgICAg\nYXMgY29tcHV0ZWQgYnkgREdFVFJGLgoqCiogIExEQUYgICAgKGlucHV0KSBJTlRFR0VSCiogICAg\nICAgICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBBRi4gIExEQUYgPj0gbWF4\nKDEsTikuCioKKiAgSVBJViAgICAoaW5wdXQpIElOVEVHRVIgYXJyYXksIGRpbWVuc2lvbiAoTikK\nKiAgICAgICAgICBUaGUgcGl2b3QgaW5kaWNlcyBmcm9tIERHRVRSRjsgZm9yIDE8PWk8PU4sIHJv\ndyBpIG9mIHRoZQoqICAgICAgICAgIG1hdHJpeCB3YXMgaW50ZXJjaGFuZ2VkIHdpdGggcm93IElQ\nSVYoaSkuCioKKiAgQiAgICAgICAoaW5wdXQpIERPVUJMRSBQUkVDSVNJT04gYXJyYXksIGRpbWVu\nc2lvbiAoTERCLE5SSFMpCiogICAgICAgICAgVGhlIHJpZ2h0IGhhbmQgc2lkZSBtYXRyaXggQi4K\nKgoqICBMREIgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBsZWFkaW5nIGRpbWVu\nc2lvbiBvZiB0aGUgYXJyYXkgQi4gIExEQiA+PSBtYXgoMSxOKS4KKgoqICBYICAgICAgIChpbnB1\ndC9vdXRwdXQpIERPVUJMRSBQUkVDSVNJT04gYXJyYXksIGRpbWVuc2lvbiAoTERYLE5SSFMpCiog\nICAgICAgICAgT24gZW50cnksIHRoZSBzb2x1dGlvbiBtYXRyaXggWCwgYXMgY29tcHV0ZWQgYnkg\nREdFVFJTLgoqICAgICAgICAgIE9uIGV4aXQsIHRoZSBpbXByb3ZlZCBzb2x1dGlvbiBtYXRyaXgg\nWC4KKgoqICBMRFggICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBsZWFkaW5nIGRp\nbWVuc2lvbiBvZiB0aGUgYXJyYXkgWC4gIExEWCA+PSBtYXgoMSxOKS4KKgoqICBGRVJSICAgIChv\ndXRwdXQpIERPVUJMRSBQUkVDSVNJT04gYXJyYXksIGRpbWVuc2lvbiAoTlJIUykKKiAgICAgICAg\nICBUaGUgZXN0aW1hdGVkIGZvcndhcmQgZXJyb3IgYm91bmQgZm9yIGVhY2ggc29sdXRpb24gdmVj\ndG9yCiogICAgICAgICAgWChqKSAodGhlIGotdGggY29sdW1uIG9mIHRoZSBzb2x1dGlvbiBtYXRy\naXggWCkuCiogICAgICAgICAgSWYgWFRSVUUgaXMgdGhlIHRydWUgc29sdXRpb24gY29ycmVzcG9u\nZGluZyB0byBYKGopLCBGRVJSKGopCiogICAgICAgICAgaXMgYW4gZXN0aW1hdGVkIHVwcGVyIGJv\ndW5kIGZvciB0aGUgbWFnbml0dWRlIG9mIHRoZSBsYXJnZXN0CiogICAgICAgICAgZWxlbWVudCBp\nbiAoWChqKSAtIFhUUlVFKSBkaXZpZGVkIGJ5IHRoZSBtYWduaXR1ZGUgb2YgdGhlCiogICAgICAg\nICAgbGFyZ2VzdCBlbGVtZW50IGluIFgoaikuICBUaGUgZXN0aW1hdGUgaXMgYXMgcmVsaWFibGUg\nYXMKKiAgICAgICAgICB0aGUgZXN0aW1hdGUgZm9yIFJDT05ELCBhbmQgaXMgYWxtb3N0IGFsd2F5\ncyBhIHNsaWdodAoqICAgICAgICAgIG92ZXJlc3RpbWF0ZSBvZiB0aGUgdHJ1ZSBlcnJvci4KKgoq\nICBCRVJSICAgIChvdXRwdXQpIERPVUJMRSBQUkVDSVNJT04gYXJyYXksIGRpbWVuc2lvbiAoTlJI\nUykKKiAgICAgICAgICBUaGUgY29tcG9uZW50d2lzZSByZWxhdGl2ZSBiYWNrd2FyZCBlcnJvciBv\nZiBlYWNoIHNvbHV0aW9uCiogICAgICAgICAgdmVjdG9yIFgoaikgKGkuZS4sIHRoZSBzbWFsbGVz\ndCByZWxhdGl2ZSBjaGFuZ2UgaW4KKiAgICAgICAgICBhbnkgZWxlbWVudCBvZiBBIG9yIEIgdGhh\ndCBtYWtlcyBYKGopIGFuIGV4YWN0IHNvbHV0aW9uKS4KKgoqICBXT1JLICAgICh3b3Jrc3BhY2Up\nIERPVUJMRSBQUkVDSVNJT04gYXJyYXksIGRpbWVuc2lvbiAoMypOKQoqCiogIElXT1JLICAgKHdv\ncmtzcGFjZSkgSU5URUdFUiBhcnJheSwgZGltZW5zaW9uIChOKQoqCiogIElORk8gICAgKG91dHB1\ndCkgSU5URUdFUgoqICAgICAgICAgID0gMDogIHN1Y2Nlc3NmdWwgZXhpdAoqICAgICAgICAgIDwg\nMDogIGlmIElORk8gPSAtaSwgdGhlIGktdGggYXJndW1lbnQgaGFkIGFuIGlsbGVnYWwgdmFsdWUK\nKgoqICBJbnRlcm5hbCBQYXJhbWV0ZXJzCiogID09PT09PT09PT09PT09PT09PT0KKgoqICBJVE1B\nWCBpcyB0aGUgbWF4aW11bSBudW1iZXIgb2Ygc3RlcHMgb2YgaXRlcmF0aXZlIHJlZmluZW1lbnQu\nCioKcdhot2i4KYFx2X1x2ihou4lovGi9dWJoyIoCbgFoyVgOAAAAZGdlcmZzXzM2Ni50eHRx23Vi\naMuKAm4BaMxYBQAAAGdlcmZzcdxoyIoCkgB1YmV1YlUJUXVlc3Rpb24xcd1dcd4oaHlVJlJlZmlu\nZSB0aGUgc29sdXRpb24gdG8gYSBsaW5lYXIgc3lzdGVthnHfaIFVTENvbXB1dGUgZm9yd2FyZCBv\nciBiYWNrd2FyZCBlcnJvciBib3VuZHMgZm9yIHRoZSBzb2x1dGlvbiB0byBhIGxpbmVhciBzeXN0\nZW2GceBlVQlRdWVzdGlvbjNx4V1x4ihom1gHAAAAZ2VuZXJhbHHjZVUJUXVlc3Rpb24yceRdceUo\nVQFuVQJOb3HmZXUu\n','2011-10-28 10:15:12'),('2bc42d3b845a59230d2aeb62b88e00d1','ZDVhZDRkNzgyMmUxY2Y1ZmE1Y2FkY2NkNGUxYzM0NmRkNTg1NTJjNTqAAn1xAS4=\n','2011-11-08 11:57:11'),('8489548ad3f1acd62c9a367a8f4abf0b','ZDVhZDRkNzgyMmUxY2Y1ZmE1Y2FkY2NkNGUxYzM0NmRkNTg1NTJjNTqAAn1xAS4=\n','2011-12-13 11:56:03'),('de07b6a91c6761db36ad257e3d7196c3','M2ExN2ZmN2EzYzk4OTE4YjZhOTJiNTJkZmUxZWM1NTk4NDE1NTdmZTqAAn1xAShVCEZ1bmN0aW9u\ncQJdcQMoY2RqYW5nby5mb3Jtcy5mb3JtcwpCb3VuZEZpZWxkCnEEKYFxBX1xBihVEWh0bWxfaW5p\ndGlhbF9uYW1lcQdYLAAAAGluaXRpYWwtTGluZWFyRXF1YXRpb25fY29tcHV0YXRpb25hbEZ1bmN0\naW9ucQhVBGZvcm1xCWNEcml2ZXIuZm9ybXMKTGluZWFyRXF1YXRpb25fY29tcHV0YXRpb25hbEZv\ncm0KcQopgXELfXEMKFUFZmlsZXNxDX1xDlUIaXNfYm91bmRxD4lVC2Vycm9yX2NsYXNzcRBjZGph\nbmdvLmZvcm1zLnV0aWwKRXJyb3JMaXN0CnERVQ9lbXB0eV9wZXJtaXR0ZWRxEolVBmZpZWxkc3ET\nY2RqYW5nby51dGlscy5kYXRhc3RydWN0dXJlcwpTb3J0ZWREaWN0CnEUKYFxFShVJExpbmVhckVx\ndWF0aW9uX2NvbXB1dGF0aW9uYWxGdW5jdGlvbnEWY2RqYW5nby5mb3Jtcy5maWVsZHMKTXVsdGlw\nbGVDaG9pY2VGaWVsZApxFymBcRh9cRkoVQZ3aWRnZXRxGmNkamFuZ28uZm9ybXMud2lkZ2V0cwpD\naGVja2JveFNlbGVjdE11bHRpcGxlCnEbKYFxHH1xHShVC2lzX3JlcXVpcmVkcR6IVQVhdHRyc3Ef\nfXEgVQdjaG9pY2VzcSFdcSIoVQxub3RlcyBmYWN0b3JVGUZhY3RvciBhIG1hdHJpeCAoUEEgPSBM\nVSmGcSNVC25vdGVzIGVycm9yVUxDb21wdXRlIGZvcndhcmQgb3IgYmFja3dhcmQgZXJyb3IgYm91\nbmRzIGZvciB0aGUgc29sdXRpb24gdG8gYSBsaW5lYXIgc3lzdGVthnEkVQxub3RlcyByZWZpbmVV\nJlJlZmluZSB0aGUgc29sdXRpb24gdG8gYSBsaW5lYXIgc3lzdGVthnElVQ9ub3RlcyBjb25kaXRp\nb25VKUVzdGltYXRlIHRoZSBjb25kaXRpb24gbnVtYmVyIG9mIGEgbWF0cml4hnEmVRFub3RlcyBl\ncXVpbGlicmF0ZVUURXF1aWxpYnJhdGUgYSBtYXRyaXiGcSdVDW5vdGVzIGludmVyc2VVMEludmVy\ndCBhIG1hdHJpeCB1c2luZyBwcm92aWRlZCBmYWN0b3JzIChQLCBMLCBVKYZxKFULbm90ZXMgc29s\ndmVVNlNvbHZlIGEgbGluZWFyIHN5c3RlbSB1c2luZyBwcm92aWRlZCBmYWN0b3JzIChQLCBMLCBV\nKYZxKWV1YlUIcmVxdWlyZWRxKohVCF9jaG9pY2VzcStoIlUQY3JlYXRpb25fY291bnRlcnEsSyRV\nB2luaXRpYWxxLU5VBWxhYmVscS5OVQp2YWxpZGF0b3JzcS9dcTBVCWhlbHBfdGV4dHExWAAAAABV\nCGxvY2FsaXplcTKJVQ5lcnJvcl9tZXNzYWdlc3EzfXE0KFUMaW52YWxpZF9saXN0cTVjZGphbmdv\nLnV0aWxzLmZ1bmN0aW9uYWwKX2xhenlfcHJveHlfdW5waWNrbGUKcTYoY2RqYW5nby51dGlscy50\ncmFuc2xhdGlvbgp1Z2V0dGV4dApxN1gXAAAARW50ZXIgYSBsaXN0IG9mIHZhbHVlcy6FcTh9cTlj\nX19idWlsdGluX18KdW5pY29kZQpxOnRScTtoKmg2KGg3WBcAAABUaGlzIGZpZWxkIGlzIHJlcXVp\ncmVkLoVxPH1xPWg6dFJxPlUOaW52YWxpZF9jaG9pY2VxP2g2KGg3WEUAAABTZWxlY3QgYSB2YWxp\nZCBjaG9pY2UuICUodmFsdWUpcyBpcyBub3Qgb25lIG9mIHRoZSBhdmFpbGFibGUgY2hvaWNlcy6F\ncUB9cUFoOnRScUJVB2ludmFsaWRxQ2g2KGg3WBQAAABFbnRlciBhIHZhbGlkIHZhbHVlLoVxRH1x\nRWg6dFJxRnVVE3Nob3dfaGlkZGVuX2luaXRpYWxxR4l1YlUjTGluZWFyRXF1YXRpb25fY29tcHV0\nYXRpb25hbENvbXBsZXhxSGgXKYFxSX1xSihoGmgbKYFxS31xTChoHohoH31xTWghXXFOKFULY29t\ncGxleCB5ZXNVA1llc4ZxT1UKY29tcGxleCBub1UCTm+GcVBldWJoKohoK2hOaCxLJWgtTmguTmgv\nXXFRaDFYAAAAAGgyiWgzfXFSKGg1aDtoKmg+aD9oQmhDaEZ1aEeJdWJVJkxpbmVhckVxdWF0aW9u\nX2NvbXB1dGF0aW9uYWxNYXRyaXhUeXBlcVNoFymBcVR9cVUoaBpoGymBcVZ9cVcoaB6IaB99cVho\nIV1xWShVEm1hdHJpeFR5cGUgZ2VuZXJhbFUHR2VuZXJhbHFahnFbVRRtYXRyaXhUeXBlIHN5bW1l\ndHJpY1UJU3ltbWV0cmljcVyGcV1VDm1hdHJpeFR5cGUgU1BEVQNTUERxXoZxX1UUbWF0cml4VHlw\nZSBIZXJtaXRpYW5VCUhlcm1pdGlhbnFghnFhVQ5tYXRyaXhUeXBlIEhQRFUDSFBEcWKGcWNVFW1h\ndHJpeFR5cGUgdHJpYW5ndWxhclUKVHJpYW5ndWxhcoZxZGV1YmgqiGgraFloLEsmaC1OaC5OaC9d\ncWVoMVgAAAAAaDKJaDN9cWYoaDVoO2gqaD5oP2hCaENoRnVoR4l1YlUnTGluZWFyRXF1YXRpb25f\nY29tcHV0YXRpb25hbFN0b3JhZ2VUeXBlcWdoFymBcWh9cWkoaBpoGymBcWp9cWsoaB6IaB99cWxo\nIV1xbShVEHN0b3JhZ2VUeXBlIGZ1bGxVBEZ1bGyGcW5VEHN0b3JhZ2VUeXBlIGJhbmRVBGJhbmSG\ncW9VEnN0b3JhZ2VUeXBlIHBhY2tlZFUGUGFja2VkhnFwVRdzdG9yYWdlVHlwZSB0cmlkaWFnb25h\nbFULVHJpZGlhZ29uYWyGcXFldWJoKohoK2htaCxLJ2gtTmguTmgvXXFyaDFYAAAAAGgyiWgzfXFz\nKGg1aDtoKmg+aD9oQmhDaEZ1aEeJdWJVJUxpbmVhckVxdWF0aW9uX2NvbXB1dGF0aW9uYWxQcmVj\naXNpb25xdGgXKYFxdX1xdihoGmgbKYFxd31xeChoHohoH31xeWghXXF6KFUTdGhlUHJlY2lzaW9u\nIHNpbmdsZVUGU2luZ2xlhnF7VRN0aGVQcmVjaXNpb24gZG91YmxlVQZEb3VibGWGcXxldWJoKoho\nK2h6aCxLKGgtTmguTmgvXXF9aDFYAAAAAGgyiWgzfXF+KGg1aDtoKmg+aD9oQmhDaEZ1aEeJdWJ1\nfXF/VQhrZXlPcmRlcnGAXXGBKGgWaEhoU2hnaHRlc2JoLX1xglUMbGFiZWxfc3VmZml4cYNVATpV\nBnByZWZpeHGETlUNX2NoYW5nZWRfZGF0YXGFTlUEZGF0YXGGfXGHVQdfZXJyb3JzcYhOVQdhdXRv\nX2lkcYlVBWlkXyVzcYp1YlUJaHRtbF9uYW1lcYtYJAAAAExpbmVhckVxdWF0aW9uX2NvbXB1dGF0\naW9uYWxGdW5jdGlvbnGMVQ9odG1sX2luaXRpYWxfaWRxjVgvAAAAaW5pdGlhbC1pZF9MaW5lYXJF\ncXVhdGlvbl9jb21wdXRhdGlvbmFsRnVuY3Rpb25xjmguWCQAAABMaW5lYXJlcXVhdGlvbiBjb21w\ndXRhdGlvbmFsZnVuY3Rpb25xj1UFZmllbGRxkGgYaDFVAFUEbmFtZXGRaIx1YmgEKYFxkn1xkyho\nB1glAAAAaW5pdGlhbC1MaW5lYXJFcXVhdGlvbl9zaW1wbGVGdW5jdGlvbnGUaAljRHJpdmVyLmZv\ncm1zCkxpbmVhckVxdWF0aW9uX3NpbXBsZUZvcm0KcZUpgXGWfXGXKGgNfXGYaA+JaBBoEWgSiWgT\naBQpgXGZKFUdTGluZWFyRXF1YXRpb25fc2ltcGxlRnVuY3Rpb25xmmNkamFuZ28uZm9ybXMuZmll\nbGRzCkNob2ljZUZpZWxkCnGbKYFxnH1xnShoGmNkamFuZ28uZm9ybXMud2lkZ2V0cwpSYWRpb1Nl\nbGVjdApxnimBcZ99caAoaB6IaB99caFoIV1xolUIb3JpZ2luYWxVBEFYPUKGcaNhdWJoKohoK2ii\naCxLKWgtVQhvcmlnaW5hbHGkaC5OaC9dcaVoMVgAAAAAaDKJaDN9caYoaCpoPmg/aDYoaDdYRQAA\nAFNlbGVjdCBhIHZhbGlkIGNob2ljZS4gJSh2YWx1ZSlzIGlzIG5vdCBvbmUgb2YgdGhlIGF2YWls\nYWJsZSBjaG9pY2VzLoVxp31xqGg6dFJxqWhDaEZ1aEeJdWJVHExpbmVhckVxdWF0aW9uX3NpbXBs\nZUNvbXBsZXhxqmgXKYFxq31xrChoGmgbKYFxrX1xrihoHohoH31xr2ghXXGwKGhPaFBldWJoKoho\nK2iwaCxLKmgtTmguTmgvXXGxaDFYAAAAAGgyiWgzfXGyKGg1aDtoKmg+aD9oQmhDaEZ1aEeJdWJV\nH0xpbmVhckVxdWF0aW9uX3NpbXBsZU1hdHJpeFR5cGVxs2gXKYFxtH1xtShoGmgbKYFxtn1xtyho\nHohoH31xuGghXXG5KFUSbWF0cml4VHlwZSBnZW5lcmFsaFqGcbpVFG1hdHJpeFR5cGUgc3ltbWV0\ncmljaFyGcbtVDm1hdHJpeFR5cGUgU1BEaF6GcbxVFG1hdHJpeFR5cGUgSGVybWl0aWFuaGCGcb1V\nDm1hdHJpeFR5cGUgSFBEaGKGcb5ldWJoKohoK2i5aCxLK2gtTmguTmgvXXG/aDFYAAAAAGgyiWgz\nfXHAKGg1aDtoKmg+aD9oQmhDaEZ1aEeJdWJVIExpbmVhckVxdWF0aW9uX3NpbXBsZVN0b3JhZ2VU\neXBlccFoFymBccJ9ccMoaBpoGymBccR9ccUoaB6IaB99ccZoIV1xxyhobmhvaHBocWV1YmgqiGgr\naMdoLEssaC1OaC5OaC9dcchoMVgAAAAAaDKJaDN9cckoaDVoO2gqaD5oP2hCaENoRnVoR4l1YlUe\nTGluZWFyRXF1YXRpb25fc2ltcGxlUHJlY2lzaW9uccpoFymBcct9ccwoaBpoGymBcc19cc4oaB6I\naB99cc9oIV1x0Choe2h8ZXViaCqIaCto0GgsSy1oLU5oLk5oL11x0WgxWAAAAABoMoloM31x0iho\nNWg7aCpoPmg/aEJoQ2hGdWhHiXVidX1x02iAXXHUKGiaaKpos2jBaMplc2JoLX1x1WiDVQE6aIRO\naIVOaIZ9cdZoiE5oiWiKdWJoi1gdAAAATGluZWFyRXF1YXRpb25fc2ltcGxlRnVuY3Rpb25x12iN\nWCgAAABpbml0aWFsLWlkX0xpbmVhckVxdWF0aW9uX3NpbXBsZUZ1bmN0aW9ucdhoLlgdAAAATGlu\nZWFyZXF1YXRpb24gc2ltcGxlZnVuY3Rpb25x2WiQaJxoMVUAaJFo13ViZVUKTWF0cml4VHlwZXHa\nXXHbKGgEKYFx3H1x3ShoB1guAAAAaW5pdGlhbC1MaW5lYXJFcXVhdGlvbl9jb21wdXRhdGlvbmFs\nTWF0cml4VHlwZXHeaAloC2iLWCYAAABMaW5lYXJFcXVhdGlvbl9jb21wdXRhdGlvbmFsTWF0cml4\nVHlwZXHfaI1YMQAAAGluaXRpYWwtaWRfTGluZWFyRXF1YXRpb25fY29tcHV0YXRpb25hbE1hdHJp\neFR5cGVx4GguWCYAAABMaW5lYXJlcXVhdGlvbiBjb21wdXRhdGlvbmFsbWF0cml4dHlwZXHhaJBo\nVGgxVQBokWjfdWJoBCmBceJ9ceMoaAdYJwAAAGluaXRpYWwtTGluZWFyRXF1YXRpb25fc2ltcGxl\nTWF0cml4VHlwZXHkaAlolmiLWB8AAABMaW5lYXJFcXVhdGlvbl9zaW1wbGVNYXRyaXhUeXBlceVo\njVgqAAAAaW5pdGlhbC1pZF9MaW5lYXJFcXVhdGlvbl9zaW1wbGVNYXRyaXhUeXBlceZoLlgfAAAA\nTGluZWFyZXF1YXRpb24gc2ltcGxlbWF0cml4dHlwZXHnaJBotGgxVQBokWjldWJlVQtDb21wbGV4\nR0VUU3HoXXHpKGgEKYFx6n1x6yhVEWh0bWxfaW5pdGlhbF9uYW1lcexYKwAAAGluaXRpYWwtTGlu\nZWFyRXF1YXRpb25fY29tcHV0YXRpb25hbENvbXBsZXhx7VUEZm9ybXHuaAopgXHvfXHwKFUFZmls\nZXNx8X1x8lUIaXNfYm91bmRx84hVC2Vycm9yX2NsYXNzcfRoEVUPZW1wdHlfcGVybWl0dGVkcfWJ\nVQZmaWVsZHNx9mgUKYFx9yhVJExpbmVhckVxdWF0aW9uX2NvbXB1dGF0aW9uYWxGdW5jdGlvbnH4\naBcpgXH5fXH6KFUGd2lkZ2V0cftoGymBcfx9cf0oVQtpc19yZXF1aXJlZHH+iFUFYXR0cnNx/31y\nAAEAAFUHY2hvaWNlc3IBAQAAXXICAQAAKFUMbm90ZXMgZmFjdG9yVRlGYWN0b3IgYSBtYXRyaXgg\nKFBBID0gTFUphnIDAQAAVQtub3RlcyBlcnJvclVMQ29tcHV0ZSBmb3J3YXJkIG9yIGJhY2t3YXJk\nIGVycm9yIGJvdW5kcyBmb3IgdGhlIHNvbHV0aW9uIHRvIGEgbGluZWFyIHN5c3RlbYZyBAEAAFUM\nbm90ZXMgcmVmaW5lVSZSZWZpbmUgdGhlIHNvbHV0aW9uIHRvIGEgbGluZWFyIHN5c3RlbYZyBQEA\nAFUPbm90ZXMgY29uZGl0aW9uVSlFc3RpbWF0ZSB0aGUgY29uZGl0aW9uIG51bWJlciBvZiBhIG1h\ndHJpeIZyBgEAAFURbm90ZXMgZXF1aWxpYnJhdGVVFEVxdWlsaWJyYXRlIGEgbWF0cml4hnIHAQAA\nVQ1ub3RlcyBpbnZlcnNlVTBJbnZlcnQgYSBtYXRyaXggdXNpbmcgcHJvdmlkZWQgZmFjdG9ycyAo\nUCwgTCwgVSmGcggBAABVC25vdGVzIHNvbHZlVTZTb2x2ZSBhIGxpbmVhciBzeXN0ZW0gdXNpbmcg\ncHJvdmlkZWQgZmFjdG9ycyAoUCwgTCwgVSmGcgkBAABldWJVB2luaXRpYWxyCgEAAE5VCF9jaG9p\nY2VzcgsBAABqAgEAAFUQY3JlYXRpb25fY291bnRlcnIMAQAASyRVCHJlcXVpcmVkcg0BAACIVQVs\nYWJlbHIOAQAATlUKdmFsaWRhdG9yc3IPAQAAXXIQAQAAVQloZWxwX3RleHRyEQEAAFgAAAAAVQhs\nb2NhbGl6ZXISAQAAiVUOZXJyb3JfbWVzc2FnZXNyEwEAAH1yFAEAAChVDGludmFsaWRfbGlzdHIV\nAQAAaDYoaDdYFwAAAEVudGVyIGEgbGlzdCBvZiB2YWx1ZXMuhXIWAQAAfXIXAQAAaDp0UnIYAQAA\nag0BAABoNihoN1gXAAAAVGhpcyBmaWVsZCBpcyByZXF1aXJlZC5yGQEAAIVyGgEAAH1yGwEAAGg6\ndFJyHAEAAFUOaW52YWxpZF9jaG9pY2VyHQEAAGg2KGg3WEUAAABTZWxlY3QgYSB2YWxpZCBjaG9p\nY2UuICUodmFsdWUpcyBpcyBub3Qgb25lIG9mIHRoZSBhdmFpbGFibGUgY2hvaWNlcy6Fch4BAAB9\nch8BAABoOnRSciABAABVB2ludmFsaWRyIQEAAGg2KGg3WBQAAABFbnRlciBhIHZhbGlkIHZhbHVl\nLoVyIgEAAH1yIwEAAGg6dFJyJAEAAHVVE3Nob3dfaGlkZGVuX2luaXRpYWxyJQEAAIl1YlUjTGlu\nZWFyRXF1YXRpb25fY29tcHV0YXRpb25hbENvbXBsZXhyJgEAAGgXKYFyJwEAAH1yKAEAACho+2gb\nKYFyKQEAAH1yKgEAACho/oho/31yKwEAAGoBAQAAXXIsAQAAKFULY29tcGxleCB5ZXNVA1llc4Zy\nLQEAAFUKY29tcGxleCBub1UCTm+Gci4BAABldWJqCgEAAE5qCwEAAGosAQAAagwBAABLJWoNAQAA\niGoOAQAATmoPAQAAXXIvAQAAahEBAABYAAAAAGoSAQAAiWoTAQAAfXIwAQAAKGoVAQAAahgBAABq\nDQEAAGocAQAAah0BAABqIAEAAGohAQAAaiQBAAB1aiUBAACJdWJVJkxpbmVhckVxdWF0aW9uX2Nv\nbXB1dGF0aW9uYWxNYXRyaXhUeXBlcjEBAABoFymBcjIBAAB9cjMBAAAoaPtoGymBcjQBAAB9cjUB\nAAAoaP6IaP99cjYBAABqAQEAAF1yNwEAAChVEm1hdHJpeFR5cGUgZ2VuZXJhbFUHR2VuZXJhbHI4\nAQAAhnI5AQAAVRRtYXRyaXhUeXBlIHN5bW1ldHJpY1UJU3ltbWV0cmljcjoBAACGcjsBAABVDm1h\ndHJpeFR5cGUgU1BEVQNTUERyPAEAAIZyPQEAAFUUbWF0cml4VHlwZSBIZXJtaXRpYW5VCUhlcm1p\ndGlhbnI+AQAAhnI/AQAAVQ5tYXRyaXhUeXBlIEhQRFUDSFBEckABAACGckEBAABVFW1hdHJpeFR5\ncGUgdHJpYW5ndWxhclUKVHJpYW5ndWxhcoZyQgEAAGV1YmoKAQAATmoLAQAAajcBAABqDAEAAEsm\nag0BAACIag4BAABOag8BAABdckMBAABqEQEAAFgAAAAAahIBAACJahMBAAB9ckQBAAAoahUBAABq\nGAEAAGoNAQAAahwBAABqHQEAAGogAQAAaiEBAABqJAEAAHVqJQEAAIl1YlUnTGluZWFyRXF1YXRp\nb25fY29tcHV0YXRpb25hbFN0b3JhZ2VUeXBlckUBAABoFymBckYBAAB9ckcBAAAoaPtoGymBckgB\nAAB9ckkBAAAoaP6IaP99ckoBAABqAQEAAF1ySwEAAChVEHN0b3JhZ2VUeXBlIGZ1bGxVBEZ1bGyG\nckwBAABVEHN0b3JhZ2VUeXBlIGJhbmRVBGJhbmSGck0BAABVEnN0b3JhZ2VUeXBlIHBhY2tlZFUG\nUGFja2VkhnJOAQAAVRdzdG9yYWdlVHlwZSB0cmlkaWFnb25hbFULVHJpZGlhZ29uYWyGck8BAABl\ndWJqCgEAAE5qCwEAAGpLAQAAagwBAABLJ2oNAQAAiGoOAQAATmoPAQAAXXJQAQAAahEBAABYAAAA\nAGoSAQAAiWoTAQAAfXJRAQAAKGoVAQAAahgBAABqDQEAAGocAQAAah0BAABqIAEAAGohAQAAaiQB\nAAB1aiUBAACJdWJVJUxpbmVhckVxdWF0aW9uX2NvbXB1dGF0aW9uYWxQcmVjaXNpb25yUgEAAGgX\nKYFyUwEAAH1yVAEAACho+2gbKYFyVQEAAH1yVgEAACho/oho/31yVwEAAGoBAQAAXXJYAQAAKFUT\ndGhlUHJlY2lzaW9uIHNpbmdsZVUGU2luZ2xlhnJZAQAAVRN0aGVQcmVjaXNpb24gZG91YmxlVQZE\nb3VibGWGcloBAABldWJqCgEAAE5qCwEAAGpYAQAAagwBAABLKGoNAQAAiGoOAQAATmoPAQAAXXJb\nAQAAahEBAABYAAAAAGoSAQAAiWoTAQAAfXJcAQAAKGoVAQAAahgBAABqDQEAAGocAQAAah0BAABq\nIAEAAGohAQAAaiQBAAB1aiUBAACJdWJ1fXJdAQAAaIBdcl4BAAAoaPhqJgEAAGoxAQAAakUBAABq\nUgEAAGVzYmoKAQAAfXJfAQAAVQxsYWJlbF9zdWZmaXhyYAEAAFUBOlUGcHJlZml4cmEBAABOVQ1f\nY2hhbmdlZF9kYXRhcmIBAABOVQRkYXRhcmMBAABjZGphbmdvLmh0dHAKUXVlcnlEaWN0CnJkAQAA\nKYFyZQEAAChYHwAAAExpbmVhckVxdWF0aW9uX3NpbXBsZU1hdHJpeFR5cGVyZgEAAFgOAAAAbWF0\ncml4VHlwZSBTUERyZwEAAFggAAAATGluZWFyRXF1YXRpb25fc2ltcGxlU3RvcmFnZVR5cGVyaAEA\nAFgXAAAAc3RvcmFnZVR5cGUgdHJpZGlhZ29uYWxyaQEAAFgkAAAATGluZWFyRXF1YXRpb25fY29t\ncHV0YXRpb25hbEZ1bmN0aW9ucmoBAABYDAAAAG5vdGVzIGZhY3RvcnJrAQAAWCYAAABMaW5lYXJF\ncXVhdGlvbl9jb21wdXRhdGlvbmFsTWF0cml4VHlwZXJsAQAAWA4AAABtYXRyaXhUeXBlIEhQRHJt\nAQAAWAYAAABTdWJtaXRybgEAAFgAAAAAWB0AAABMaW5lYXJFcXVhdGlvbl9zaW1wbGVGdW5jdGlv\nbnJvAQAAWAgAAABvcmlnaW5hbHJwAQAAWCUAAABMaW5lYXJFcXVhdGlvbl9jb21wdXRhdGlvbmFs\nUHJlY2lzaW9ucnEBAABYEwAAAHRoZVByZWNpc2lvbiBzaW5nbGVycgEAAHV9cnMBAAAoVQlfZW5j\nb2RpbmdydAEAAFUFdXRmLThydQEAAFUFX2RhdGFydgEAAH1ydwEAAChqZgEAAF1yeAEAAGpnAQAA\nYWpoAQAAXXJ5AQAAamkBAABham4BAABdcnoBAABYAAAAAGFqbAEAAF1yewEAAGptAQAAYWpqAQAA\nXXJ8AQAAamsBAABham8BAABdcn0BAABqcAEAAGFqcQEAAF1yfgEAAGpyAQAAYXVVCF9tdXRhYmxl\ncn8BAACJdWJVB19lcnJvcnNygAEAAGNkamFuZ28uZm9ybXMudXRpbApFcnJvckRpY3QKcoEBAAAp\ngXKCAQAAKGpFAQAAaBEpgXKDAQAAahkBAABhfXKEAQAAYmomAQAAaBEpgXKFAQAAahkBAABhfXKG\nAQAAYnV9cocBAABiVQdhdXRvX2lkcogBAABVBWlkXyVzcokBAAB1YlUJaHRtbF9uYW1lcooBAABY\nIwAAAExpbmVhckVxdWF0aW9uX2NvbXB1dGF0aW9uYWxDb21wbGV4cosBAABVD2h0bWxfaW5pdGlh\nbF9pZHKMAQAAWC4AAABpbml0aWFsLWlkX0xpbmVhckVxdWF0aW9uX2NvbXB1dGF0aW9uYWxDb21w\nbGV4co0BAABqDgEAAFgjAAAATGluZWFyZXF1YXRpb24gY29tcHV0YXRpb25hbGNvbXBsZXhyjgEA\nAFUFZmllbGRyjwEAAGonAQAAahEBAABVAFUEbmFtZXKQAQAAaosBAAB1YmgEKYFykQEAAH1ykgEA\nACho7FgkAAAAaW5pdGlhbC1MaW5lYXJFcXVhdGlvbl9zaW1wbGVDb21wbGV4cpMBAABo7miVKYFy\nlAEAAH1ylQEAACho8X1ylgEAAGjziGj0aBFo9Ylo9mgUKYFylwEAAChVHUxpbmVhckVxdWF0aW9u\nX3NpbXBsZUZ1bmN0aW9ucpgBAABomymBcpkBAAB9cpoBAAAoaPtonimBcpsBAAB9cpwBAAAoaP6I\naP99cp0BAABqAQEAAF1yngEAAFUIb3JpZ2luYWxVBEFYPUKGcp8BAABhdWJqCgEAAFUIb3JpZ2lu\nYWxyoAEAAGoLAQAAap4BAABqDAEAAEspag0BAACIag4BAABOag8BAABdcqEBAABqEQEAAFgAAAAA\nahIBAACJahMBAAB9cqIBAAAoag0BAABqHAEAAGodAQAAaDYoaDdYRQAAAFNlbGVjdCBhIHZhbGlk\nIGNob2ljZS4gJSh2YWx1ZSlzIGlzIG5vdCBvbmUgb2YgdGhlIGF2YWlsYWJsZSBjaG9pY2VzLoVy\nowEAAH1ypAEAAGg6dFJypQEAAGohAQAAaiQBAAB1aiUBAACJdWJVHExpbmVhckVxdWF0aW9uX3Np\nbXBsZUNvbXBsZXhypgEAAGgXKYFypwEAAH1yqAEAACho+2gbKYFyqQEAAH1yqgEAACho/oho/31y\nqwEAAGoBAQAAXXKsAQAAKGotAQAAai4BAABldWJqCgEAAE5qCwEAAGqsAQAAagwBAABLKmoNAQAA\niGoOAQAATmoPAQAAXXKtAQAAahEBAABYAAAAAGoSAQAAiWoTAQAAfXKuAQAAKGoVAQAAahgBAABq\nDQEAAGocAQAAah0BAABqIAEAAGohAQAAaiQBAAB1aiUBAACJdWJVH0xpbmVhckVxdWF0aW9uX3Np\nbXBsZU1hdHJpeFR5cGVyrwEAAGgXKYFysAEAAH1ysQEAACho+2gbKYFysgEAAH1yswEAACho/oho\n/31ytAEAAGoBAQAAXXK1AQAAKFUSbWF0cml4VHlwZSBnZW5lcmFsajgBAACGcrYBAABVFG1hdHJp\neFR5cGUgc3ltbWV0cmljajoBAACGcrcBAABVDm1hdHJpeFR5cGUgU1BEajwBAACGcrgBAABVFG1h\ndHJpeFR5cGUgSGVybWl0aWFuaj4BAACGcrkBAABVDm1hdHJpeFR5cGUgSFBEakABAACGcroBAABl\ndWJqCgEAAE5qCwEAAGq1AQAAagwBAABLK2oNAQAAiGoOAQAATmoPAQAAXXK7AQAAahEBAABYAAAA\nAGoSAQAAiWoTAQAAfXK8AQAAKGoVAQAAahgBAABqDQEAAGocAQAAah0BAABqIAEAAGohAQAAaiQB\nAAB1aiUBAACJdWJVIExpbmVhckVxdWF0aW9uX3NpbXBsZVN0b3JhZ2VUeXBlcr0BAABoFymBcr4B\nAAB9cr8BAAAoaPtoGymBcsABAAB9csEBAAAoaP6IaP99csIBAABqAQEAAF1ywwEAAChqTAEAAGpN\nAQAAak4BAABqTwEAAGV1YmoKAQAATmoLAQAAasMBAABqDAEAAEssag0BAACIag4BAABOag8BAABd\ncsQBAABqEQEAAFgAAAAAahIBAACJahMBAAB9csUBAAAoahUBAABqGAEAAGoNAQAAahwBAABqHQEA\nAGogAQAAaiEBAABqJAEAAHVqJQEAAIl1YlUeTGluZWFyRXF1YXRpb25fc2ltcGxlUHJlY2lzaW9u\ncsYBAABoFymBcscBAAB9csgBAAAoaPtoGymBcskBAAB9csoBAAAoaP6IaP99cssBAABqAQEAAF1y\nzAEAAChqWQEAAGpaAQAAZXViagoBAABOagsBAABqzAEAAGoMAQAASy1qDQEAAIhqDgEAAE5qDwEA\nAF1yzQEAAGoRAQAAWAAAAABqEgEAAIlqEwEAAH1yzgEAAChqFQEAAGoYAQAAag0BAABqHAEAAGod\nAQAAaiABAABqIQEAAGokAQAAdWolAQAAiXVidX1yzwEAAGiAXXLQAQAAKGqYAQAAaqYBAABqrwEA\nAGq9AQAAasYBAABlc2JqCgEAAH1y0QEAAGpgAQAAVQE6amEBAABOamIBAABOamMBAABqZQEAAGqA\nAQAAaoEBAAApgXLSAQAAKGqmAQAAaBEpgXLTAQAAahkBAABhfXLUAQAAYmrGAQAAaBEpgXLVAQAA\nahkBAABhfXLWAQAAYnV9ctcBAABiaogBAABqiQEAAHViaooBAABYHAAAAExpbmVhckVxdWF0aW9u\nX3NpbXBsZUNvbXBsZXhy2AEAAGqMAQAAWCcAAABpbml0aWFsLWlkX0xpbmVhckVxdWF0aW9uX3Np\nbXBsZUNvbXBsZXhy2QEAAGoOAQAAWBwAAABMaW5lYXJlcXVhdGlvbiBzaW1wbGVjb21wbGV4ctoB\nAABqjwEAAGqnAQAAahEBAABVAGqQAQAAatgBAAB1YmVVBk1vZGVsc3LbAQAAXXLcAQAAKFgcAAAA\nTGluZWFyRXF1YXRpb25fY29tcHV0YXRpb25hbHLdAQAAWBUAAABMaW5lYXJFcXVhdGlvbl9zaW1w\nbGVy3gEAAGVVD0Rlc2NyaXB0aW9uR0VUU3LfAQAAXXLgAQAAVQxGdW5jdGlvbkdFVFNy4QEAAF1y\n4gEAAChoBCmBcuMBAAB9cuQBAAAoaOxYLAAAAGluaXRpYWwtTGluZWFyRXF1YXRpb25fY29tcHV0\nYXRpb25hbEZ1bmN0aW9ucuUBAABo7mjvaooBAABYJAAAAExpbmVhckVxdWF0aW9uX2NvbXB1dGF0\naW9uYWxGdW5jdGlvbnLmAQAAaowBAABYLwAAAGluaXRpYWwtaWRfTGluZWFyRXF1YXRpb25fY29t\ncHV0YXRpb25hbEZ1bmN0aW9ucucBAABqDgEAAFgkAAAATGluZWFyZXF1YXRpb24gY29tcHV0YXRp\nb25hbGZ1bmN0aW9ucugBAABqjwEAAGj5ahEBAABVAGqQAQAAauYBAAB1YmgEKYFy6QEAAH1y6gEA\nACho7FglAAAAaW5pdGlhbC1MaW5lYXJFcXVhdGlvbl9zaW1wbGVGdW5jdGlvbnLrAQAAaO5qlAEA\nAGqKAQAAWB0AAABMaW5lYXJFcXVhdGlvbl9zaW1wbGVGdW5jdGlvbnLsAQAAaowBAABYKAAAAGlu\naXRpYWwtaWRfTGluZWFyRXF1YXRpb25fc2ltcGxlRnVuY3Rpb25y7QEAAGoOAQAAWB0AAABMaW5l\nYXJlcXVhdGlvbiBzaW1wbGVmdW5jdGlvbnLuAQAAao8BAABqmQEAAGoRAQAAVQBqkAEAAGrsAQAA\ndWJlVQRBcHBzcu8BAABdcvABAAAoWA0AAABDb21wdXRhdGlvbmFscvEBAABYBgAAAERyaXZlcnLy\nAQAAZVUJUHJlY2lzaW9ucvMBAABdcvQBAAAoaAQpgXL1AQAAfXL2AQAAKGgHWC0AAABpbml0aWFs\nLUxpbmVhckVxdWF0aW9uX2NvbXB1dGF0aW9uYWxQcmVjaXNpb25y9wEAAGgJaAtoi1glAAAATGlu\nZWFyRXF1YXRpb25fY29tcHV0YXRpb25hbFByZWNpc2lvbnL4AQAAaI1YMAAAAGluaXRpYWwtaWRf\nTGluZWFyRXF1YXRpb25fY29tcHV0YXRpb25hbFByZWNpc2lvbnL5AQAAaC5YJQAAAExpbmVhcmVx\ndWF0aW9uIGNvbXB1dGF0aW9uYWxwcmVjaXNpb25y+gEAAGiQaHVoMVUAaJFq+AEAAHViaAQpgXL7\nAQAAfXL8AQAAKGgHWCYAAABpbml0aWFsLUxpbmVhckVxdWF0aW9uX3NpbXBsZVByZWNpc2lvbnL9\nAQAAaAlolmiLWB4AAABMaW5lYXJFcXVhdGlvbl9zaW1wbGVQcmVjaXNpb25y/gEAAGiNWCkAAABp\nbml0aWFsLWlkX0xpbmVhckVxdWF0aW9uX3NpbXBsZVByZWNpc2lvbnL/AQAAaC5YHgAAAExpbmVh\ncmVxdWF0aW9uIHNpbXBsZXByZWNpc2lvbnIAAgAAaJBoy2gxVQBokWr+AQAAdWJlVQ5NYXRyaXhU\neXBlR0VUU3IBAgAAXXICAgAAKGgEKYFyAwIAAH1yBAIAACho7FguAAAAaW5pdGlhbC1MaW5lYXJF\ncXVhdGlvbl9jb21wdXRhdGlvbmFsTWF0cml4VHlwZXIFAgAAaO5o72qKAQAAWCYAAABMaW5lYXJF\ncXVhdGlvbl9jb21wdXRhdGlvbmFsTWF0cml4VHlwZXIGAgAAaowBAABYMQAAAGluaXRpYWwtaWRf\nTGluZWFyRXF1YXRpb25fY29tcHV0YXRpb25hbE1hdHJpeFR5cGVyBwIAAGoOAQAAWCYAAABMaW5l\nYXJlcXVhdGlvbiBjb21wdXRhdGlvbmFsbWF0cml4dHlwZXIIAgAAao8BAABqMgEAAGoRAQAAVQBq\nkAEAAGoGAgAAdWJoBCmBcgkCAAB9cgoCAAAoaOxYJwAAAGluaXRpYWwtTGluZWFyRXF1YXRpb25f\nc2ltcGxlTWF0cml4VHlwZXILAgAAaO5qlAEAAGqKAQAAWB8AAABMaW5lYXJFcXVhdGlvbl9zaW1w\nbGVNYXRyaXhUeXBlcgwCAABqjAEAAFgqAAAAaW5pdGlhbC1pZF9MaW5lYXJFcXVhdGlvbl9zaW1w\nbGVNYXRyaXhUeXBlcg0CAABqDgEAAFgfAAAATGluZWFyZXF1YXRpb24gc2ltcGxlbWF0cml4dHlw\nZXIOAgAAao8BAABqsAEAAGoRAQAAVQBqkAEAAGoMAgAAdWJlVQVGb3Jtc3IPAgAAXXIQAgAAKGgL\naJZlVQtTdG9yYWdlVHlwZXIRAgAAXXISAgAAKGgEKYFyEwIAAH1yFAIAAChoB1gvAAAAaW5pdGlh\nbC1MaW5lYXJFcXVhdGlvbl9jb21wdXRhdGlvbmFsU3RvcmFnZVR5cGVyFQIAAGgJaAtoi1gnAAAA\nTGluZWFyRXF1YXRpb25fY29tcHV0YXRpb25hbFN0b3JhZ2VUeXBlchYCAABojVgyAAAAaW5pdGlh\nbC1pZF9MaW5lYXJFcXVhdGlvbl9jb21wdXRhdGlvbmFsU3RvcmFnZVR5cGVyFwIAAGguWCcAAABM\naW5lYXJlcXVhdGlvbiBjb21wdXRhdGlvbmFsc3RvcmFnZXR5cGVyGAIAAGiQaGhoMVUAaJFqFgIA\nAHViaAQpgXIZAgAAfXIaAgAAKGgHWCgAAABpbml0aWFsLUxpbmVhckVxdWF0aW9uX3NpbXBsZVN0\nb3JhZ2VUeXBlchsCAABoCWiWaItYIAAAAExpbmVhckVxdWF0aW9uX3NpbXBsZVN0b3JhZ2VUeXBl\nchwCAABojVgrAAAAaW5pdGlhbC1pZF9MaW5lYXJFcXVhdGlvbl9zaW1wbGVTdG9yYWdlVHlwZXId\nAgAAaC5YIAAAAExpbmVhcmVxdWF0aW9uIHNpbXBsZXN0b3JhZ2V0eXBlch4CAABokGjCaDFVAGiR\nahwCAAB1YmVVB0NvbXBsZXhyHwIAAF1yIAIAAChoBCmBciECAAB9ciICAAAoaAdYKwAAAGluaXRp\nYWwtTGluZWFyRXF1YXRpb25fY29tcHV0YXRpb25hbENvbXBsZXhyIwIAAGgJaAtoi1gjAAAATGlu\nZWFyRXF1YXRpb25fY29tcHV0YXRpb25hbENvbXBsZXhyJAIAAGiNWC4AAABpbml0aWFsLWlkX0xp\nbmVhckVxdWF0aW9uX2NvbXB1dGF0aW9uYWxDb21wbGV4ciUCAABoLlgjAAAATGluZWFyZXF1YXRp\nb24gY29tcHV0YXRpb25hbGNvbXBsZXhyJgIAAGiQaEloMVUAaJFqJAIAAHViaAQpgXInAgAAfXIo\nAgAAKGgHWCQAAABpbml0aWFsLUxpbmVhckVxdWF0aW9uX3NpbXBsZUNvbXBsZXhyKQIAAGgJaJZo\ni1gcAAAATGluZWFyRXF1YXRpb25fc2ltcGxlQ29tcGxleHIqAgAAaI1YJwAAAGluaXRpYWwtaWRf\nTGluZWFyRXF1YXRpb25fc2ltcGxlQ29tcGxleHIrAgAAaC5YHAAAAExpbmVhcmVxdWF0aW9uIHNp\nbXBsZWNvbXBsZXhyLAIAAGiQaKtoMVUAaJFqKgIAAHViZVUNUHJlY2lzaW9uR0VUU3ItAgAAXXIu\nAgAAKGgEKYFyLwIAAH1yMAIAACho7FgtAAAAaW5pdGlhbC1MaW5lYXJFcXVhdGlvbl9jb21wdXRh\ndGlvbmFsUHJlY2lzaW9ucjECAABo7mjvaooBAABYJQAAAExpbmVhckVxdWF0aW9uX2NvbXB1dGF0\naW9uYWxQcmVjaXNpb25yMgIAAGqMAQAAWDAAAABpbml0aWFsLWlkX0xpbmVhckVxdWF0aW9uX2Nv\nbXB1dGF0aW9uYWxQcmVjaXNpb25yMwIAAGoOAQAAWCUAAABMaW5lYXJlcXVhdGlvbiBjb21wdXRh\ndGlvbmFscHJlY2lzaW9ucjQCAABqjwEAAGpTAQAAahEBAABVAGqQAQAAajICAAB1YmgEKYFyNQIA\nAH1yNgIAACho7FgmAAAAaW5pdGlhbC1MaW5lYXJFcXVhdGlvbl9zaW1wbGVQcmVjaXNpb25yNwIA\nAGjuapQBAABqigEAAFgeAAAATGluZWFyRXF1YXRpb25fc2ltcGxlUHJlY2lzaW9ucjgCAABqjAEA\nAFgpAAAAaW5pdGlhbC1pZF9MaW5lYXJFcXVhdGlvbl9zaW1wbGVQcmVjaXNpb25yOQIAAGoOAQAA\nWB4AAABMaW5lYXJlcXVhdGlvbiBzaW1wbGVwcmVjaXNpb25yOgIAAGqPAQAAascBAABqEQEAAFUA\napABAABqOAIAAHViZVUPU3RvcmFnZVR5cGVHRVRTcjsCAABdcjwCAAAoaAQpgXI9AgAAfXI+AgAA\nKGjsWC8AAABpbml0aWFsLUxpbmVhckVxdWF0aW9uX2NvbXB1dGF0aW9uYWxTdG9yYWdlVHlwZXI/\nAgAAaO5o72qKAQAAWCcAAABMaW5lYXJFcXVhdGlvbl9jb21wdXRhdGlvbmFsU3RvcmFnZVR5cGVy\nQAIAAGqMAQAAWDIAAABpbml0aWFsLWlkX0xpbmVhckVxdWF0aW9uX2NvbXB1dGF0aW9uYWxTdG9y\nYWdlVHlwZXJBAgAAag4BAABYJwAAAExpbmVhcmVxdWF0aW9uIGNvbXB1dGF0aW9uYWxzdG9yYWdl\ndHlwZXJCAgAAao8BAABqRgEAAGoRAQAAVQBqkAEAAGpAAgAAdWJoBCmBckMCAAB9ckQCAAAoaOxY\nKAAAAGluaXRpYWwtTGluZWFyRXF1YXRpb25fc2ltcGxlU3RvcmFnZVR5cGVyRQIAAGjuapQBAABq\nigEAAFggAAAATGluZWFyRXF1YXRpb25fc2ltcGxlU3RvcmFnZVR5cGVyRgIAAGqMAQAAWCsAAABp\nbml0aWFsLWlkX0xpbmVhckVxdWF0aW9uX3NpbXBsZVN0b3JhZ2VUeXBlckcCAABqDgEAAFggAAAA\nTGluZWFyZXF1YXRpb24gc2ltcGxlc3RvcmFnZXR5cGVySAIAAGqPAQAAar4BAABqEQEAAFUAapAB\nAABqRgIAAHViZVUER0VUU3JJAgAAXXJKAgAAKGjvapQBAABlVRFRdWVzdGlvbl9hZHZhbmNlZHJL\nAgAAXXJMAgAAKFUWQ29tcHV0YXRpb25hbCBSb3V0aW5lc3JNAgAAVRZTaW1wbGUgRHJpdmVyIFJv\ndXRpbmVzck4CAABldS4=\n','2012-01-03 14:39:54'),('311a45fa0df5d94302f083c553011274','ZDI4MGVjNDU2ZGZkOTZkODgyOTNjMDlmNzc5OTUwZGE0NGFmM2U4ZjqAAn1xAShVCEZ1bmN0aW9u\ncQJdcQNjZGphbmdvLmZvcm1zLmZvcm1zCkJvdW5kRmllbGQKcQQpgXEFfXEGKFURaHRtbF9pbml0\naWFsX25hbWVxB1glAAAAaW5pdGlhbC1MaW5lYXJFcXVhdGlvbl9leHBlcnRGdW5jdGlvbnEIVQRm\nb3JtcQljRHJpdmVyLmZvcm1zCkxpbmVhckVxdWF0aW9uX2V4cGVydEZvcm0KcQopgXELfXEMKFUF\nZmlsZXNxDX1xDlUIaXNfYm91bmRxD4lVC2Vycm9yX2NsYXNzcRBjZGphbmdvLmZvcm1zLnV0aWwK\nRXJyb3JMaXN0CnERVQ9lbXB0eV9wZXJtaXR0ZWRxEolVBmZpZWxkc3ETY2RqYW5nby51dGlscy5k\nYXRhc3RydWN0dXJlcwpTb3J0ZWREaWN0CnEUKYFxFShVIExpbmVhckVxdWF0aW9uX2V4cGVydERl\nc2NyaXB0aW9ucRZjZGphbmdvLmZvcm1zLmZpZWxkcwpNdWx0aXBsZUNob2ljZUZpZWxkCnEXKYFx\nGH1xGShVBndpZGdldHEaY2RqYW5nby5mb3Jtcy53aWRnZXRzCkNoZWNrYm94U2VsZWN0TXVsdGlw\nbGUKcRspgXEcfXEdKFULaXNfcmVxdWlyZWRxHohVBWF0dHJzcR99cSBVB2Nob2ljZXNxIV1xIihV\nK0RyaXZlciBMaW5lYXJFcXVhdGlvbl9leHBlcnQgbm90ZXMgb3JpZ2luYWxVBkFYID0gQoZxI1Us\nRHJpdmVyIExpbmVhckVxdWF0aW9uX2V4cGVydCBub3RlcyB0cmFuc3Bvc2VVEkE8c3VwPlQ8L3N1\ncD5YID0gQoZxJFUyRHJpdmVyIExpbmVhckVxdWF0aW9uX2V4cGVydCBub3RlcyBIZXJtaXRpYW5f\ndHJhbnNVEkE8c3VwPkg8L3N1cD5YID0gQoZxJWV1YlUIcmVxdWlyZWRxJohVCF9jaG9pY2VzcSdo\nIlUQY3JlYXRpb25fY291bnRlcnEoSy5VB2luaXRpYWxxKU5VBWxhYmVscSpYIgAAAFNvbHZlIGEg\nc3lzdGVtIG9mIGxpbmVhciBlcXVhdGlvbnNxK1UKdmFsaWRhdG9yc3EsXXEtVQloZWxwX3RleHRx\nLlgAAAAAVQhsb2NhbGl6ZXEviVUOZXJyb3JfbWVzc2FnZXNxMH1xMShVDGludmFsaWRfbGlzdHEy\nY2RqYW5nby51dGlscy5mdW5jdGlvbmFsCl9sYXp5X3Byb3h5X3VucGlja2xlCnEzKGNkamFuZ28u\ndXRpbHMudHJhbnNsYXRpb24KdWdldHRleHQKcTRYFwAAAEVudGVyIGEgbGlzdCBvZiB2YWx1ZXMu\nhXE1fXE2Y19fYnVpbHRpbl9fCnVuaWNvZGUKcTd0UnE4aCZoMyhoNFgXAAAAVGhpcyBmaWVsZCBp\ncyByZXF1aXJlZC6FcTl9cTpoN3RScTtVDmludmFsaWRfY2hvaWNlcTxoMyhoNFhFAAAAU2VsZWN0\nIGEgdmFsaWQgY2hvaWNlLiAlKHZhbHVlKXMgaXMgbm90IG9uZSBvZiB0aGUgYXZhaWxhYmxlIGNo\nb2ljZXMuhXE9fXE+aDd0UnE/VQdpbnZhbGlkcUBoMyhoNFgUAAAARW50ZXIgYSB2YWxpZCB2YWx1\nZS6FcUF9cUJoN3RScUN1VRNzaG93X2hpZGRlbl9pbml0aWFscUSJdWJVHUxpbmVhckVxdWF0aW9u\nX2V4cGVydEZ1bmN0aW9ucUVoFymBcUZ9cUcoaBpoGymBcUh9cUkoaB6IaB99cUpoIV1xSyhVLERy\naXZlciBMaW5lYXJFcXVhdGlvbl9leHBlcnQgbm90ZXMgY29uZGl0aW9uVSRFc3RpbWF0ZSB0aGUg\nbWF0cml4IGNvbmRpdGlvbiBudW1iZXKGcUxVKERyaXZlciBMaW5lYXJFcXVhdGlvbl9leHBlcnQg\nbm90ZXMgZXJyb3JVJUNvbXB1dGUgZXJyb3IgYm91bmRzIGZvciB0aGUgc29sdXRpb26GcU1VKURy\naXZlciBMaW5lYXJFcXVhdGlvbl9leHBlcnQgbm90ZXMgcmVmaW5lVRNSZWZpbmUgdGhlIHNvbHV0\naW9uhnFOVS5Ecml2ZXIgTGluZWFyRXF1YXRpb25fZXhwZXJ0IG5vdGVzIGVxdWlsaWJyYXRlVRZF\ncXVpbGlicmF0ZSB0aGUgbWF0cml4hnFPZXViaCaIaCdoS2goSy9oKU5oKk5oLF1xUGguWAAAAABo\nL4loMH1xUShoMmg4aCZoO2g8aD9oQGhDdWhEiXViVRxMaW5lYXJFcXVhdGlvbl9leHBlcnRDb21w\nbGV4cVJoFymBcVN9cVQoaBpoGymBcVV9cVYoaB6IaB99cVdoIV1xWChVC2NvbXBsZXggeWVzVQNZ\nZXOGcVlVCmNvbXBsZXggbm9VAk5vhnFaZXViaCaIaCdoWGgoSzBoKU5oKk5oLF1xW2guWAAAAABo\nL4loMH1xXChoMmg4aCZoO2g8aD9oQGhDdWhEiXViVR9MaW5lYXJFcXVhdGlvbl9leHBlcnRNYXRy\naXhUeXBlcV1oFymBcV59cV8oaBpoGymBcWB9cWEoaB6IaB99cWJoIV1xYyhVEm1hdHJpeFR5cGUg\nZ2VuZXJhbFUHR2VuZXJhbIZxZFUUbWF0cml4VHlwZSBzeW1tZXRyaWNVCVN5bW1ldHJpY4ZxZVUO\nbWF0cml4VHlwZSBTUERVA1NQRIZxZlUUbWF0cml4VHlwZSBIZXJtaXRpYW5VCUhlcm1pdGlhboZx\nZ1UObWF0cml4VHlwZSBIUERVA0hQRIZxaGV1YmgmiGgnaGNoKEsxaClOaCpOaCxdcWloLlgAAAAA\naC+JaDB9cWooaDJoOGgmaDtoPGg/aEBoQ3VoRIl1YlUgTGluZWFyRXF1YXRpb25fZXhwZXJ0U3Rv\ncmFnZVR5cGVxa2gXKYFxbH1xbShoGmgbKYFxbn1xbyhoHohoH31xcGghXXFxKFUQc3RvcmFnZVR5\ncGUgZnVsbFUERnVsbIZxclUQc3RvcmFnZVR5cGUgYmFuZFUEYmFuZIZxc1USc3RvcmFnZVR5cGUg\ncGFja2VkVQZQYWNrZWSGcXRVF3N0b3JhZ2VUeXBlIHRyaWRpYWdvbmFsVQtUcmlkaWFnb25hbIZx\ndWV1YmgmiGgnaHFoKEsyaClOaCpOaCxdcXZoLlgAAAAAaC+JaDB9cXcoaDJoOGgmaDtoPGg/aEBo\nQ3VoRIl1YlUeTGluZWFyRXF1YXRpb25fZXhwZXJ0UHJlY2lzaW9ucXhoFymBcXl9cXooaBpoGymB\ncXt9cXwoaB6IaB99cX1oIV1xfihVE3RoZVByZWNpc2lvbiBzaW5nbGVVBlNpbmdsZYZxf1UTdGhl\nUHJlY2lzaW9uIGRvdWJsZVUGRG91YmxlhnGAZXViaCaIaCdofmgoSzNoKU5oKk5oLF1xgWguWAAA\nAABoL4loMH1xgihoMmg4aCZoO2g8aD9oQGhDdWhEiXVidX1xg1UIa2V5T3JkZXJxhF1xhShoFmhF\naFJoXWhraHhlc2JoKX1xhlUMbGFiZWxfc3VmZml4cYdVATpVBnByZWZpeHGITlUNX2NoYW5nZWRf\nZGF0YXGJTlUEZGF0YXGKfXGLVQdfZXJyb3JzcYxOVQdhdXRvX2lkcY1VBWlkXyVzcY51YlUJaHRt\nbF9uYW1lcY9YHQAAAExpbmVhckVxdWF0aW9uX2V4cGVydEZ1bmN0aW9ucZBVD2h0bWxfaW5pdGlh\nbF9pZHGRWCgAAABpbml0aWFsLWlkX0xpbmVhckVxdWF0aW9uX2V4cGVydEZ1bmN0aW9ucZJoKlgd\nAAAATGluZWFyZXF1YXRpb24gZXhwZXJ0ZnVuY3Rpb25xk1UFZmllbGRxlGhGaC5VAFUEbmFtZXGV\naJB1YmFVCk1hdHJpeFR5cGVxll1xl2gEKYFxmH1xmShoB1gnAAAAaW5pdGlhbC1MaW5lYXJFcXVh\ndGlvbl9leHBlcnRNYXRyaXhUeXBlcZpoCWgLaI9YHwAAAExpbmVhckVxdWF0aW9uX2V4cGVydE1h\ndHJpeFR5cGVxm2iRWCoAAABpbml0aWFsLWlkX0xpbmVhckVxdWF0aW9uX2V4cGVydE1hdHJpeFR5\ncGVxnGgqWB8AAABMaW5lYXJlcXVhdGlvbiBleHBlcnRtYXRyaXh0eXBlcZ1olGheaC5VAGiVaJt1\nYmFVC0NvbXBsZXhHRVRTcZ5dcZ9oBCmBcaB9caEoVRFodG1sX2luaXRpYWxfbmFtZXGiWCQAAABp\nbml0aWFsLUxpbmVhckVxdWF0aW9uX2V4cGVydENvbXBsZXhxo1UEZm9ybXGkaAopgXGlfXGmKFUF\nZmlsZXNxp31xqFUIaXNfYm91bmRxqYhVDGNsZWFuZWRfZGF0YXGqfXGrKFUfTGluZWFyRXF1YXRp\nb25fZXhwZXJ0TWF0cml4VHlwZXGsXXGtWBQAAABtYXRyaXhUeXBlIEhlcm1pdGlhbnGuYVUdTGlu\nZWFyRXF1YXRpb25fZXhwZXJ0RnVuY3Rpb25xr11xsFgpAAAARHJpdmVyIExpbmVhckVxdWF0aW9u\nX2V4cGVydCBub3RlcyByZWZpbmVxsWFVHkxpbmVhckVxdWF0aW9uX2V4cGVydFByZWNpc2lvbnGy\nXXGzWBMAAAB0aGVQcmVjaXNpb24gc2luZ2xlcbRhVSBMaW5lYXJFcXVhdGlvbl9leHBlcnRTdG9y\nYWdlVHlwZXG1XXG2WBAAAABzdG9yYWdlVHlwZSBiYW5kcbdhVRxMaW5lYXJFcXVhdGlvbl9leHBl\ncnRDb21wbGV4cbhdcblYCwAAAGNvbXBsZXggeWVzcbphVSBMaW5lYXJFcXVhdGlvbl9leHBlcnRE\nZXNjcmlwdGlvbnG7XXG8WCwAAABEcml2ZXIgTGluZWFyRXF1YXRpb25fZXhwZXJ0IG5vdGVzIHRy\nYW5zcG9zZXG9YXVVC2Vycm9yX2NsYXNzcb5oEVUPZW1wdHlfcGVybWl0dGVkcb+JVQZmaWVsZHNx\nwGgUKYFxwShou2gXKYFxwn1xwyhVBndpZGdldHHEaBspgXHFfXHGKFULaXNfcmVxdWlyZWRxx4hV\nBWF0dHJzcch9cclVB2Nob2ljZXNxyl1xyyhVK0RyaXZlciBMaW5lYXJFcXVhdGlvbl9leHBlcnQg\nbm90ZXMgb3JpZ2luYWxVBkFYID0gQoZxzFUsRHJpdmVyIExpbmVhckVxdWF0aW9uX2V4cGVydCBu\nb3RlcyB0cmFuc3Bvc2VVEkE8c3VwPlQ8L3N1cD5YID0gQoZxzVUyRHJpdmVyIExpbmVhckVxdWF0\naW9uX2V4cGVydCBub3RlcyBIZXJtaXRpYW5fdHJhbnNVEkE8c3VwPkg8L3N1cD5YID0gQoZxzmV1\nYlUHaW5pdGlhbHHPTlUIX2Nob2ljZXNx0GjLVRBjcmVhdGlvbl9jb3VudGVycdFLLlUIcmVxdWly\nZWRx0ohVBWxhYmVscdNYIgAAAFNvbHZlIGEgc3lzdGVtIG9mIGxpbmVhciBlcXVhdGlvbnNx1FUK\ndmFsaWRhdG9yc3HVXXHWVQloZWxwX3RleHRx11gAAAAAVQhsb2NhbGl6ZXHYiVUOZXJyb3JfbWVz\nc2FnZXNx2X1x2ihVDGludmFsaWRfbGlzdHHbaDMoaDRYFwAAAEVudGVyIGEgbGlzdCBvZiB2YWx1\nZXMuhXHcfXHdaDd0UnHeaNJoMyhoNFgXAAAAVGhpcyBmaWVsZCBpcyByZXF1aXJlZC6Fcd99ceBo\nN3RSceFVDmludmFsaWRfY2hvaWNlceJoMyhoNFhFAAAAU2VsZWN0IGEgdmFsaWQgY2hvaWNlLiAl\nKHZhbHVlKXMgaXMgbm90IG9uZSBvZiB0aGUgYXZhaWxhYmxlIGNob2ljZXMuhXHjfXHkaDd0UnHl\nVQdpbnZhbGlkceZoMyhoNFgUAAAARW50ZXIgYSB2YWxpZCB2YWx1ZS6Fced9cehoN3RScel1VRNz\naG93X2hpZGRlbl9pbml0aWFsceqJdWJor2gXKYFx631x7ChoxGgbKYFx7X1x7ihox4hoyH1x72jK\nXXHwKFUsRHJpdmVyIExpbmVhckVxdWF0aW9uX2V4cGVydCBub3RlcyBjb25kaXRpb25VJEVzdGlt\nYXRlIHRoZSBtYXRyaXggY29uZGl0aW9uIG51bWJlcoZx8VUoRHJpdmVyIExpbmVhckVxdWF0aW9u\nX2V4cGVydCBub3RlcyBlcnJvclUlQ29tcHV0ZSBlcnJvciBib3VuZHMgZm9yIHRoZSBzb2x1dGlv\nboZx8lUpRHJpdmVyIExpbmVhckVxdWF0aW9uX2V4cGVydCBub3RlcyByZWZpbmVVE1JlZmluZSB0\naGUgc29sdXRpb26GcfNVLkRyaXZlciBMaW5lYXJFcXVhdGlvbl9leHBlcnQgbm90ZXMgZXF1aWxp\nYnJhdGVVFkVxdWlsaWJyYXRlIHRoZSBtYXRyaXiGcfRldWJoz05o0GjwaNFLL2jSiGjTTmjVXXH1\naNdYAAAAAGjYiWjZfXH2KGjbaN5o0mjhaOJo5WjmaOl1aOqJdWJouGgXKYFx931x+ChoxGgbKYFx\n+X1x+ihox4hoyH1x+2jKXXH8KFULY29tcGxleCB5ZXNVA1llc4Zx/VUKY29tcGxleCBub1UCTm+G\ncf5ldWJoz05o0Gj8aNFLMGjSiGjTTmjVXXH/aNdYAAAAAGjYiWjZfXIAAQAAKGjbaN5o0mjhaOJo\n5WjmaOl1aOqJdWJorGgXKYFyAQEAAH1yAgEAAChoxGgbKYFyAwEAAH1yBAEAAChox4hoyH1yBQEA\nAGjKXXIGAQAAKFUSbWF0cml4VHlwZSBnZW5lcmFsVQdHZW5lcmFscgcBAACGcggBAABVFG1hdHJp\neFR5cGUgc3ltbWV0cmljVQlTeW1tZXRyaWNyCQEAAIZyCgEAAFUObWF0cml4VHlwZSBTUERVA1NQ\nRHILAQAAhnIMAQAAVRRtYXRyaXhUeXBlIEhlcm1pdGlhblUJSGVybWl0aWFucg0BAACGcg4BAABV\nDm1hdHJpeFR5cGUgSFBEVQNIUERyDwEAAIZyEAEAAGV1YmjPTmjQagYBAABo0UsxaNKIaNNOaNVd\nchEBAABo11gAAAAAaNiJaNl9chIBAAAoaNto3mjSaOFo4mjlaOZo6XVo6ol1Ymi1aBcpgXITAQAA\nfXIUAQAAKGjEaBspgXIVAQAAfXIWAQAAKGjHiGjIfXIXAQAAaMpdchgBAAAoVRBzdG9yYWdlVHlw\nZSBmdWxsVQRGdWxshnIZAQAAVRBzdG9yYWdlVHlwZSBiYW5kVQRiYW5khnIaAQAAVRJzdG9yYWdl\nVHlwZSBwYWNrZWRVBlBhY2tlZIZyGwEAAFUXc3RvcmFnZVR5cGUgdHJpZGlhZ29uYWxVC1RyaWRp\nYWdvbmFshnIcAQAAZXViaM9OaNBqGAEAAGjRSzJo0oho005o1V1yHQEAAGjXWAAAAABo2Ilo2X1y\nHgEAACho22jeaNJo4WjiaOVo5mjpdWjqiXViaLJoFymBch8BAAB9ciABAAAoaMRoGymBciEBAAB9\nciIBAAAoaMeIaMh9ciMBAABoyl1yJAEAAChVE3RoZVByZWNpc2lvbiBzaW5nbGVVBlNpbmdsZYZy\nJQEAAFUTdGhlUHJlY2lzaW9uIGRvdWJsZVUGRG91YmxlhnImAQAAZXViaM9OaNBqJAEAAGjRSzNo\n0oho005o1V1yJwEAAGjXWAAAAABo2Ilo2X1yKAEAACho22jeaNJo4WjiaOVo5mjpdWjqiXVidX1y\nKQEAAGiEXXIqAQAAKGi7aK9ouGisaLVosmVzYmjPfXIrAQAAVQxsYWJlbF9zdWZmaXhyLAEAAFUB\nOlUGcHJlZml4ci0BAABOVQ1fY2hhbmdlZF9kYXRhci4BAABOVQRkYXRhci8BAABjZGphbmdvLmh0\ndHAKUXVlcnlEaWN0CnIwAQAAKYFyMQEAAChYHwAAAExpbmVhckVxdWF0aW9uX2V4cGVydE1hdHJp\neFR5cGVyMgEAAGiuWB0AAABMaW5lYXJFcXVhdGlvbl9leHBlcnRGdW5jdGlvbnIzAQAAaLFYHgAA\nAExpbmVhckVxdWF0aW9uX2V4cGVydFByZWNpc2lvbnI0AQAAaLRYBgAAAFN1Ym1pdHI1AQAAWAAA\nAABYIAAAAExpbmVhckVxdWF0aW9uX2V4cGVydFN0b3JhZ2VUeXBlcjYBAABot1gcAAAATGluZWFy\nRXF1YXRpb25fZXhwZXJ0Q29tcGxleHI3AQAAaLpYIAAAAExpbmVhckVxdWF0aW9uX2V4cGVydERl\nc2NyaXB0aW9ucjgBAABovXV9cjkBAAAoVQlfZW5jb2RpbmdyOgEAAFUFdXRmLThyOwEAAFUFX2Rh\ndGFyPAEAAH1yPQEAAChqMgEAAF1yPgEAAGiuYWozAQAAXXI/AQAAaLFhajQBAABdckABAABotGFq\nNQEAAF1yQQEAAFgAAAAAYWo2AQAAXXJCAQAAaLdhajcBAABdckMBAABoumFqOAEAAF1yRAEAAGi9\nYXVVCF9tdXRhYmxlckUBAACJdWJVB19lcnJvcnNyRgEAAGNkamFuZ28uZm9ybXMudXRpbApFcnJv\nckRpY3QKckcBAAApgXJIAQAAfXJJAQAAYlUHYXV0b19pZHJKAQAAVQVpZF8lc3JLAQAAdWJVCWh0\nbWxfbmFtZXJMAQAAWBwAAABMaW5lYXJFcXVhdGlvbl9leHBlcnRDb21wbGV4ck0BAABVD2h0bWxf\naW5pdGlhbF9pZHJOAQAAWCcAAABpbml0aWFsLWlkX0xpbmVhckVxdWF0aW9uX2V4cGVydENvbXBs\nZXhyTwEAAGjTWBwAAABMaW5lYXJlcXVhdGlvbiBleHBlcnRjb21wbGV4clABAABVBWZpZWxkclEB\nAABo92jXVQBVBG5hbWVyUgEAAGpNAQAAdWJhVQZNb2RlbHNyUwEAAF1yVAEAAFgVAAAATGluZWFy\nRXF1YXRpb25fZXhwZXJ0clUBAABhVQ9EZXNjcmlwdGlvbkdFVFNyVgEAAF1yVwEAAGgEKYFyWAEA\nAH1yWQEAAChoolgoAAAAaW5pdGlhbC1MaW5lYXJFcXVhdGlvbl9leHBlcnREZXNjcmlwdGlvbnJa\nAQAAaKRopWpMAQAAWCAAAABMaW5lYXJFcXVhdGlvbl9leHBlcnREZXNjcmlwdGlvbnJbAQAAak4B\nAABYKwAAAGluaXRpYWwtaWRfTGluZWFyRXF1YXRpb25fZXhwZXJ0RGVzY3JpcHRpb25yXAEAAGjT\naNRqUQEAAGjCaNdVAGpSAQAAalsBAAB1YmFVDEZ1bmN0aW9uR0VUU3JdAQAAXXJeAQAAaAQpgXJf\nAQAAfXJgAQAAKGiiWCUAAABpbml0aWFsLUxpbmVhckVxdWF0aW9uX2V4cGVydEZ1bmN0aW9ucmEB\nAABopGilakwBAABYHQAAAExpbmVhckVxdWF0aW9uX2V4cGVydEZ1bmN0aW9ucmIBAABqTgEAAFgo\nAAAAaW5pdGlhbC1pZF9MaW5lYXJFcXVhdGlvbl9leHBlcnRGdW5jdGlvbnJjAQAAaNNYHQAAAExp\nbmVhcmVxdWF0aW9uIGV4cGVydGZ1bmN0aW9ucmQBAABqUQEAAGjraNdVAGpSAQAAamIBAAB1YmFV\nBEFwcHNyZQEAAF1yZgEAAFgGAAAARHJpdmVycmcBAABhVQlQcmVjaXNpb25yaAEAAF1yaQEAAGgE\nKYFyagEAAH1yawEAAChoB1gmAAAAaW5pdGlhbC1MaW5lYXJFcXVhdGlvbl9leHBlcnRQcmVjaXNp\nb25ybAEAAGgJaAtoj1geAAAATGluZWFyRXF1YXRpb25fZXhwZXJ0UHJlY2lzaW9ucm0BAABokVgp\nAAAAaW5pdGlhbC1pZF9MaW5lYXJFcXVhdGlvbl9leHBlcnRQcmVjaXNpb25ybgEAAGgqWB4AAABM\naW5lYXJlcXVhdGlvbiBleHBlcnRwcmVjaXNpb25ybwEAAGiUaHloLlUAaJVqbQEAAHViYVUOTWF0\ncml4VHlwZUdFVFNycAEAAF1ycQEAAGgEKYFycgEAAH1ycwEAAChoolgnAAAAaW5pdGlhbC1MaW5l\nYXJFcXVhdGlvbl9leHBlcnRNYXRyaXhUeXBlcnQBAABopGilakwBAABYHwAAAExpbmVhckVxdWF0\naW9uX2V4cGVydE1hdHJpeFR5cGVydQEAAGpOAQAAWCoAAABpbml0aWFsLWlkX0xpbmVhckVxdWF0\naW9uX2V4cGVydE1hdHJpeFR5cGVydgEAAGjTWB8AAABMaW5lYXJlcXVhdGlvbiBleHBlcnRtYXRy\naXh0eXBlcncBAABqUQEAAGoBAQAAaNdVAGpSAQAAanUBAAB1YmFVBUZvcm1zcngBAABdcnkBAABo\nC2FVC1N0b3JhZ2VUeXBlcnoBAABdcnsBAABoBCmBcnwBAAB9cn0BAAAoaAdYKAAAAGluaXRpYWwt\nTGluZWFyRXF1YXRpb25fZXhwZXJ0U3RvcmFnZVR5cGVyfgEAAGgJaAtoj1ggAAAATGluZWFyRXF1\nYXRpb25fZXhwZXJ0U3RvcmFnZVR5cGVyfwEAAGiRWCsAAABpbml0aWFsLWlkX0xpbmVhckVxdWF0\naW9uX2V4cGVydFN0b3JhZ2VUeXBlcoABAABoKlggAAAATGluZWFyZXF1YXRpb24gZXhwZXJ0c3Rv\ncmFnZXR5cGVygQEAAGiUaGxoLlUAaJVqfwEAAHViYVUHQ29tcGxleHKCAQAAXXKDAQAAaAQpgXKE\nAQAAfXKFAQAAKGgHWCQAAABpbml0aWFsLUxpbmVhckVxdWF0aW9uX2V4cGVydENvbXBsZXhyhgEA\nAGgJaAtoj1gcAAAATGluZWFyRXF1YXRpb25fZXhwZXJ0Q29tcGxleHKHAQAAaJFYJwAAAGluaXRp\nYWwtaWRfTGluZWFyRXF1YXRpb25fZXhwZXJ0Q29tcGxleHKIAQAAaCpYHAAAAExpbmVhcmVxdWF0\naW9uIGV4cGVydGNvbXBsZXhyiQEAAGiUaFNoLlUAaJVqhwEAAHViYVUNUHJlY2lzaW9uR0VUU3KK\nAQAAXXKLAQAAaAQpgXKMAQAAfXKNAQAAKGiiWCYAAABpbml0aWFsLUxpbmVhckVxdWF0aW9uX2V4\ncGVydFByZWNpc2lvbnKOAQAAaKRopWpMAQAAWB4AAABMaW5lYXJFcXVhdGlvbl9leHBlcnRQcmVj\naXNpb25yjwEAAGpOAQAAWCkAAABpbml0aWFsLWlkX0xpbmVhckVxdWF0aW9uX2V4cGVydFByZWNp\nc2lvbnKQAQAAaNNYHgAAAExpbmVhcmVxdWF0aW9uIGV4cGVydHByZWNpc2lvbnKRAQAAalEBAABq\nHwEAAGjXVQBqUgEAAGqPAQAAdWJhVQ9TdG9yYWdlVHlwZUdFVFNykgEAAF1ykwEAAGgEKYFylAEA\nAH1ylQEAAChoolgoAAAAaW5pdGlhbC1MaW5lYXJFcXVhdGlvbl9leHBlcnRTdG9yYWdlVHlwZXKW\nAQAAaKRopWpMAQAAWCAAAABMaW5lYXJFcXVhdGlvbl9leHBlcnRTdG9yYWdlVHlwZXKXAQAAak4B\nAABYKwAAAGluaXRpYWwtaWRfTGluZWFyRXF1YXRpb25fZXhwZXJ0U3RvcmFnZVR5cGVymAEAAGjT\nWCAAAABMaW5lYXJlcXVhdGlvbiBleHBlcnRzdG9yYWdldHlwZXKZAQAAalEBAABqEwEAAGjXVQBq\nUgEAAGqXAQAAdWJhVQRHRVRTcpoBAABdcpsBAABopWFVEVF1ZXN0aW9uX2FkdmFuY2VkcpwBAABd\ncp0BAABVFkV4cGVydCBEcml2ZXIgUm91dGluZXNyngEAAGF1Lg==\n','2012-01-03 14:50:27'),('f59ed53d425007002b77c1478558874c','ZDVhZDRkNzgyMmUxY2Y1ZmE1Y2FkY2NkNGUxYzM0NmRkNTg1NTJjNTqAAn1xAS4=\n','2012-03-23 07:29:15'),('9a96f92a72e859ad96c47541558b5ee1','YjQwODBjMzFhZmZlYTVlOWU5ZTgxZDU3NmYwZTJhNWM2NTkyMGNhYTqAAn1xAShVEFF1ZXN0aW9u\nX2NvbXBsZXhxAl1xAyhVAW5VAm5vcQRlVRFRdWVzdGlvbl9lcXVhdGlvbnEFXXEGKEsASwBlVRBR\ndWVzdGlvbl9wcm9ibGVtcQddcQhYMQAAAENvbXB1dGF0aW9uYWwgTGluZWFyRXF1YXRpb25fY29t\ncHV0YXRpb25hbCBmYWN0b3JVGUZhY3RvciBhIG1hdHJpeCAoUEEgPSBMVSmGcQlhVQ9RdWVzdGlv\nbl9mYWN0b3JxCl1xCyhLAEsAZVUIUm91dGluZXNxDGNkamFuZ28uZGIubW9kZWxzLnF1ZXJ5ClF1\nZXJ5U2V0CnENKYFxDn1xDyhVBV9pdGVycRBOVQpfZm9yX3dyaXRlcRGJVQ5fc3RpY2t5X2ZpbHRl\ncnESiVUFcXVlcnlxE2NkamFuZ28uZGIubW9kZWxzLnNxbC5xdWVyeQpRdWVyeQpxFCmBcRV9cRYo\nVRVhZ2dyZWdhdGVfc2VsZWN0X21hc2txF05VF19hZ2dyZWdhdGVfc2VsZWN0X2NhY2hlcRhOVQVl\neHRyYXEZY2RqYW5nby51dGlscy5kYXRhc3RydWN0dXJlcwpTb3J0ZWREaWN0CnEaKYFxG31xHFUI\na2V5T3JkZXJxHV1xHnNiVQhqb2luX21hcHEffXEgKE5VKkNvbXB1dGF0aW9uYWxfbGluZWFyZXF1\nYXRpb25fY29tcHV0YXRpb25hbHEhTk50cSJoIYVxI3NVFXJlbGF0ZWRfc2VsZWN0X2ZpZWxkc3Ek\nXXElVQxleHRyYV90YWJsZXNxJilVBnNlbGVjdHEnXXEoVQtxdW90ZV9jYWNoZXEpfXEqVQxyZXZf\nam9pbl9tYXBxK31xLGghaCJzVQx1c2VkX2FsaWFzZXNxLWNfX2J1aWx0aW5fXwpzZXQKcS5dcS9o\nIWGFUnEwVQhvcmRlcl9ieXExXXEyVQhkaXN0aW5jdHEziVUOZHVwZV9hdm9pZGFuY2VxNH1xNVUI\nZ3JvdXBfYnlxNk5VCWFsaWFzX21hcHE3fXE4aCEoaCFoIU5OTk6JdHE5c1UOc2VsZWN0X3JlbGF0\nZWRxOolVEGRlZmVycmVkX2xvYWRpbmdxO2guXYVScTyIhnE9VQ1zZWxlY3RfZmllbGRzcT5dcT9V\nE19leHRyYV9zZWxlY3RfY2FjaGVxQE5VCW1heF9kZXB0aHFBSwVVEXN0YW5kYXJkX29yZGVyaW5n\ncUKIVQ5leHRyYV9vcmRlcl9ieXFDKVUQZGVmYXVsdF9vcmRlcmluZ3FEiFUGdGFibGVzcUVdcUZo\nIWFVCmFnZ3JlZ2F0ZXNxR2gaKYFxSH1xSWgdXXFKc2JVEWV4dHJhX3NlbGVjdF9tYXNrcUtOVQhs\nb3dfbWFya3FMSwBVDmFsaWFzX3JlZmNvdW50cU19cU5oIUsCc1UTcmVsYXRlZF9zZWxlY3RfY29s\nc3FPXXFQVQxkZWZhdWx0X2NvbHNxUYhVEG9yZGVyaW5nX2FsaWFzZXNxUl1xU1UGaGF2aW5ncVRj\nZGphbmdvLmRiLm1vZGVscy5zcWwud2hlcmUKV2hlcmVOb2RlCnFVKYFxVn1xVyhVCWNvbm5lY3Rv\ncnFYVQNBTkRxWVUHbmVnYXRlZHFaiVUIY2hpbGRyZW5xW11xXFUPc3VidHJlZV9wYXJlbnRzcV1d\ncV51YlUZaW5jbHVkZWRfaW5oZXJpdGVkX21vZGVsc3FffXFgTmghc1UJdGFibGVfbWFwcWF9cWJo\nIV1xY2ghYXNVC3doZXJlX2NsYXNzcWRoVVUFbW9kZWxxZWNDb21wdXRhdGlvbmFsLm1vZGVscwpM\naW5lYXJFcXVhdGlvbl9jb21wdXRhdGlvbmFsCnFmVQV3aGVyZXFnaFUpgXFofXFpKGhYVQNBTkRx\namhaiWhbXXFrKGhVKYFxbH1xbShoWGhZaFqJaFtdcW5oVSmBcW99cXAoaFhoWWhaiWhbXXFxKGNk\namFuZ28uZGIubW9kZWxzLnNxbC53aGVyZQpDb25zdHJhaW50CnFyKYFxc31xdChVBWFsaWFzcXVo\nIWhlaGZVCmZpZWxkX25hbWVxdlUFbm90ZXNxd1UDY29scXhVBW5vdGVzcXl1YlUJaWNvbnRhaW5z\niFgGAAAAZmFjdG9ycXp0cXthaF1dcXx1YmFoXV1xfXViaFUpgXF+fXF/KGhYaGpoWoloW11xgCho\ncimBcYF9cYIoVQVhbGlhc3GDaCFoZWhmaHZVDHRoZVByZWNpc2lvbnGEVQNjb2xxhWiEdWJVAmlu\niF1xhihVAXNVAWRldHGHYWhdXXGIdWJlaF1dcYl1YlUJaGlnaF9tYXJrcYpOVRBmaWx0ZXJfaXNf\nc3RpY2t5cYuJdWJVA19kYnGMTmhlaGZVDV9yZXN1bHRfY2FjaGVxjV1xjihjZGphbmdvLmRiLm1v\nZGVscy5iYXNlCm1vZGVsX3VucGlja2xlCnGPaGZdY2RqYW5nby5kYi5tb2RlbHMuYmFzZQpzaW1w\nbGVfY2xhc3NfZmFjdG9yeQpxkIdScZF9cZIoVQptYXRyaXhUeXBlcZNYBwAAAGdlbmVyYWxxlFUL\nc3RvcmFnZVR5cGVxlVgEAAAAZnVsbHGWaHdYXQAAAENvbXB1dGVzIGFuIExVIGZhY3Rvcml6YXRp\nb24gb2YgYW4gbS1ieS1uIG1hdHJpeCB1c2luZyBwYXJ0aWFsIHBpdm90aW5nIHdpdGggcm93IGlu\ndGVyY2hhbmdlc3GXVQZfc3RhdGVxmGNkamFuZ28uZGIubW9kZWxzLmJhc2UKTW9kZWxTdGF0ZQpx\nmSmBcZp9cZsoVQZhZGRpbmdxnIlVAmRicZ1VB2RlZmF1bHRxnnViVQN1cmxxn1gsAAAAaHR0cDov\nL3d3dy5uZXRsaWIub3JnL2xhcGFjay9zaW5nbGUvc2dldHJmLmZxoGiEWAEAAABzVQtfaW5mb19j\nYWNoZXGhaI9jRHJpdmVyLm1vZGVscwpSb3V0aW5lSW5mbwpxol1okIdScaN9caQoVQRpbmZvcaVY\n3gcAACAgICAgIFNVQlJPVVRJTkUgU0dFVFJGKCBNLCBOLCBBLCBMREEsIElQSVYsIElORk8gKQoq\nCiogIC0tIExBUEFDSyByb3V0aW5lICh2ZXJzaW9uIDMuMikgLS0KKiAgLS0gTEFQQUNLIGlzIGEg\nc29mdHdhcmUgcGFja2FnZSBwcm92aWRlZCBieSBVbml2LiBvZiBUZW5uZXNzZWUsICAgIC0tCiog\nIC0tIFVuaXYuIG9mIENhbGlmb3JuaWEgQmVya2VsZXksIFVuaXYuIG9mIENvbG9yYWRvIERlbnZl\nciBhbmQgTkFHIEx0ZC4uLS0KKiAgICAgTm92ZW1iZXIgMjAwNgoqCiogICAgIC4uIFNjYWxhciBB\ncmd1bWVudHMgLi4KICAgICAgSU5URUdFUiAgICAgICAgICAgIElORk8sIExEQSwgTSwgTgoqICAg\nICAuLgoqICAgICAuLiBBcnJheSBBcmd1bWVudHMgLi4KICAgICAgSU5URUdFUiAgICAgICAgICAg\nIElQSVYoICogKQogICAgICBSRUFMICAgICAgICAgICAgICAgQSggTERBLCAqICkKKiAgICAgLi4K\nKgoqICBQdXJwb3NlCiogID09PT09PT0KKgoqICBTR0VUUkYgY29tcHV0ZXMgYW4gTFUgZmFjdG9y\naXphdGlvbiBvZiBhIGdlbmVyYWwgTS1ieS1OIG1hdHJpeCBBCiogIHVzaW5nIHBhcnRpYWwgcGl2\nb3Rpbmcgd2l0aCByb3cgaW50ZXJjaGFuZ2VzLgoqCiogIFRoZSBmYWN0b3JpemF0aW9uIGhhcyB0\naGUgZm9ybQoqICAgICBBID0gUCAqIEwgKiBVCiogIHdoZXJlIFAgaXMgYSBwZXJtdXRhdGlvbiBt\nYXRyaXgsIEwgaXMgbG93ZXIgdHJpYW5ndWxhciB3aXRoIHVuaXQKKiAgZGlhZ29uYWwgZWxlbWVu\ndHMgKGxvd2VyIHRyYXBlem9pZGFsIGlmIG0gPiBuKSwgYW5kIFUgaXMgdXBwZXIKKiAgdHJpYW5n\ndWxhciAodXBwZXIgdHJhcGV6b2lkYWwgaWYgbSA8IG4pLgoqCiogIFRoaXMgaXMgdGhlIHJpZ2h0\nLWxvb2tpbmcgTGV2ZWwgMyBCTEFTIHZlcnNpb24gb2YgdGhlIGFsZ29yaXRobS4KKgoqICBBcmd1\nbWVudHMKKiAgPT09PT09PT09CioKKiAgTSAgICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAg\nICBUaGUgbnVtYmVyIG9mIHJvd3Mgb2YgdGhlIG1hdHJpeCBBLiAgTSA+PSAwLgoqCiogIE4gICAg\nICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG51bWJlciBvZiBjb2x1bW5zIG9mIHRo\nZSBtYXRyaXggQS4gIE4gPj0gMC4KKgoqICBBICAgICAgIChpbnB1dC9vdXRwdXQpIFJFQUwgYXJy\nYXksIGRpbWVuc2lvbiAoTERBLE4pCiogICAgICAgICAgT24gZW50cnksIHRoZSBNLWJ5LU4gbWF0\ncml4IHRvIGJlIGZhY3RvcmVkLgoqICAgICAgICAgIE9uIGV4aXQsIHRoZSBmYWN0b3JzIEwgYW5k\nIFUgZnJvbSB0aGUgZmFjdG9yaXphdGlvbgoqICAgICAgICAgIEEgPSBQKkwqVTsgdGhlIHVuaXQg\nZGlhZ29uYWwgZWxlbWVudHMgb2YgTCBhcmUgbm90IHN0b3JlZC4KKgoqICBMREEgICAgIChpbnB1\ndCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBsZWFkaW5nIGRpbWVuc2lvbiBvZiB0aGUgYXJyYXkg\nQS4gIExEQSA+PSBtYXgoMSxNKS4KKgoqICBJUElWICAgIChvdXRwdXQpIElOVEVHRVIgYXJyYXks\nIGRpbWVuc2lvbiAobWluKE0sTikpCiogICAgICAgICAgVGhlIHBpdm90IGluZGljZXM7IGZvciAx\nIDw9IGkgPD0gbWluKE0sTiksIHJvdyBpIG9mIHRoZQoqICAgICAgICAgIG1hdHJpeCB3YXMgaW50\nZXJjaGFuZ2VkIHdpdGggcm93IElQSVYoaSkuCioKKiAgSU5GTyAgICAob3V0cHV0KSBJTlRFR0VS\nCiogICAgICAgICAgPSAwOiAgc3VjY2Vzc2Z1bCBleGl0CiogICAgICAgICAgPCAwOiAgaWYgSU5G\nTyA9IC1pLCB0aGUgaS10aCBhcmd1bWVudCBoYWQgYW4gaWxsZWdhbCB2YWx1ZQoqICAgICAgICAg\nID4gMDogIGlmIElORk8gPSBpLCBVKGksaSkgaXMgZXhhY3RseSB6ZXJvLiBUaGUgZmFjdG9yaXph\ndGlvbgoqICAgICAgICAgICAgICAgIGhhcyBiZWVuIGNvbXBsZXRlZCwgYnV0IHRoZSBmYWN0b3Ig\nVSBpcyBleGFjdGx5CiogICAgICAgICAgICAgICAgc2luZ3VsYXIsIGFuZCBkaXZpc2lvbiBieSB6\nZXJvIHdpbGwgb2NjdXIgaWYgaXQgaXMgdXNlZAoqICAgICAgICAgICAgICAgIHRvIHNvbHZlIGEg\nc3lzdGVtIG9mIGVxdWF0aW9ucy4KKgpxpmiYaJkpgXGnfXGoKGiciWidaJ51YlUCaWRxqYoC3QBV\nB3JvdXRpbmVxqlgOAAAAc2dldHJmXzIyMS50eHRxq3ViVQdpbmZvX2lkcayKAt0AVQtyb3V0aW5l\nTmFtZXGtWAUAAABnZXRyZnGuaKmKAQF1YmiPaGZdaJCHUnGvfXGwKGiTWAcAAABnZW5lcmFscbFo\nlVgEAAAAZnVsbHGyaHdYXQAAAENvbXB1dGVzIGFuIExVIGZhY3Rvcml6YXRpb24gb2YgYW4gbS1i\neS1uIG1hdHJpeCB1c2luZyBwYXJ0aWFsIHBpdm90aW5nIHdpdGggcm93IGludGVyY2hhbmdlc3Gz\naJhomSmBcbR9cbUoaJyJaJ1onnViaJ9YLAAAAGh0dHA6Ly93d3cubmV0bGliLm9yZy9sYXBhY2sv\nZG91YmxlL2RnZXRyZi5mcbZohFgBAAAAZGihaI9ool1okIdScbd9cbgoaKVY6gcAACAgICAgIFNV\nQlJPVVRJTkUgREdFVFJGKCBNLCBOLCBBLCBMREEsIElQSVYsIElORk8gKQoqCiogIC0tIExBUEFD\nSyByb3V0aW5lICh2ZXJzaW9uIDMuMikgLS0KKiAgLS0gTEFQQUNLIGlzIGEgc29mdHdhcmUgcGFj\na2FnZSBwcm92aWRlZCBieSBVbml2LiBvZiBUZW5uZXNzZWUsICAgIC0tCiogIC0tIFVuaXYuIG9m\nIENhbGlmb3JuaWEgQmVya2VsZXksIFVuaXYuIG9mIENvbG9yYWRvIERlbnZlciBhbmQgTkFHIEx0\nZC4uLS0KKiAgICAgTm92ZW1iZXIgMjAwNgoqCiogICAgIC4uIFNjYWxhciBBcmd1bWVudHMgLi4K\nICAgICAgSU5URUdFUiAgICAgICAgICAgIElORk8sIExEQSwgTSwgTgoqICAgICAuLgoqICAgICAu\nLiBBcnJheSBBcmd1bWVudHMgLi4KICAgICAgSU5URUdFUiAgICAgICAgICAgIElQSVYoICogKQog\nICAgICBET1VCTEUgUFJFQ0lTSU9OICAgQSggTERBLCAqICkKKiAgICAgLi4KKgoqICBQdXJwb3Nl\nCiogID09PT09PT0KKgoqICBER0VUUkYgY29tcHV0ZXMgYW4gTFUgZmFjdG9yaXphdGlvbiBvZiBh\nIGdlbmVyYWwgTS1ieS1OIG1hdHJpeCBBCiogIHVzaW5nIHBhcnRpYWwgcGl2b3Rpbmcgd2l0aCBy\nb3cgaW50ZXJjaGFuZ2VzLgoqCiogIFRoZSBmYWN0b3JpemF0aW9uIGhhcyB0aGUgZm9ybQoqICAg\nICBBID0gUCAqIEwgKiBVCiogIHdoZXJlIFAgaXMgYSBwZXJtdXRhdGlvbiBtYXRyaXgsIEwgaXMg\nbG93ZXIgdHJpYW5ndWxhciB3aXRoIHVuaXQKKiAgZGlhZ29uYWwgZWxlbWVudHMgKGxvd2VyIHRy\nYXBlem9pZGFsIGlmIG0gPiBuKSwgYW5kIFUgaXMgdXBwZXIKKiAgdHJpYW5ndWxhciAodXBwZXIg\ndHJhcGV6b2lkYWwgaWYgbSA8IG4pLgoqCiogIFRoaXMgaXMgdGhlIHJpZ2h0LWxvb2tpbmcgTGV2\nZWwgMyBCTEFTIHZlcnNpb24gb2YgdGhlIGFsZ29yaXRobS4KKgoqICBBcmd1bWVudHMKKiAgPT09\nPT09PT09CioKKiAgTSAgICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbnVtYmVy\nIG9mIHJvd3Mgb2YgdGhlIG1hdHJpeCBBLiAgTSA+PSAwLgoqCiogIE4gICAgICAgKGlucHV0KSBJ\nTlRFR0VSCiogICAgICAgICAgVGhlIG51bWJlciBvZiBjb2x1bW5zIG9mIHRoZSBtYXRyaXggQS4g\nIE4gPj0gMC4KKgoqICBBICAgICAgIChpbnB1dC9vdXRwdXQpIERPVUJMRSBQUkVDSVNJT04gYXJy\nYXksIGRpbWVuc2lvbiAoTERBLE4pCiogICAgICAgICAgT24gZW50cnksIHRoZSBNLWJ5LU4gbWF0\ncml4IHRvIGJlIGZhY3RvcmVkLgoqICAgICAgICAgIE9uIGV4aXQsIHRoZSBmYWN0b3JzIEwgYW5k\nIFUgZnJvbSB0aGUgZmFjdG9yaXphdGlvbgoqICAgICAgICAgIEEgPSBQKkwqVTsgdGhlIHVuaXQg\nZGlhZ29uYWwgZWxlbWVudHMgb2YgTCBhcmUgbm90IHN0b3JlZC4KKgoqICBMREEgICAgIChpbnB1\ndCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBsZWFkaW5nIGRpbWVuc2lvbiBvZiB0aGUgYXJyYXkg\nQS4gIExEQSA+PSBtYXgoMSxNKS4KKgoqICBJUElWICAgIChvdXRwdXQpIElOVEVHRVIgYXJyYXks\nIGRpbWVuc2lvbiAobWluKE0sTikpCiogICAgICAgICAgVGhlIHBpdm90IGluZGljZXM7IGZvciAx\nIDw9IGkgPD0gbWluKE0sTiksIHJvdyBpIG9mIHRoZQoqICAgICAgICAgIG1hdHJpeCB3YXMgaW50\nZXJjaGFuZ2VkIHdpdGggcm93IElQSVYoaSkuCioKKiAgSU5GTyAgICAob3V0cHV0KSBJTlRFR0VS\nCiogICAgICAgICAgPSAwOiAgc3VjY2Vzc2Z1bCBleGl0CiogICAgICAgICAgPCAwOiAgaWYgSU5G\nTyA9IC1pLCB0aGUgaS10aCBhcmd1bWVudCBoYWQgYW4gaWxsZWdhbCB2YWx1ZQoqICAgICAgICAg\nID4gMDogIGlmIElORk8gPSBpLCBVKGksaSkgaXMgZXhhY3RseSB6ZXJvLiBUaGUgZmFjdG9yaXph\ndGlvbgoqICAgICAgICAgICAgICAgIGhhcyBiZWVuIGNvbXBsZXRlZCwgYnV0IHRoZSBmYWN0b3Ig\nVSBpcyBleGFjdGx5CiogICAgICAgICAgICAgICAgc2luZ3VsYXIsIGFuZCBkaXZpc2lvbiBieSB6\nZXJvIHdpbGwgb2NjdXIgaWYgaXQgaXMgdXNlZAoqICAgICAgICAgICAgICAgIHRvIHNvbHZlIGEg\nc3lzdGVtIG9mIGVxdWF0aW9ucy4KKgpxuWiYaJkpgXG6fXG7KGiciWidaJ51YmipigLeAGiqWA4A\nAABkZ2V0cmZfMjIyLnR4dHG8dWJorIoC3gBorVgFAAAAZ2V0cmZxvWipigECdWJoj2hmXWiQh1Jx\nvn1xvyhok1gHAAAAZ2VuZXJhbHHAaJVYBAAAAGJhbmRxwWh3WGMAAABjb21wdXRlcyBhbiBMVSBm\nYWN0b3JpemF0aW9uIG9mIGFuIG0tYnktbiBiYW5kIG1hdHJpeCB1c2luZyBwYXJ0aWFsIHBpdm90\naW5nIHdpdGggcm93IGludGVyY2hhbmdlcy5xwmiYaJkpgXHDfXHEKGiciWidaJ51YmifWCwAAABo\ndHRwOi8vd3d3Lm5ldGxpYi5vcmcvbGFwYWNrL3NpbmdsZS9zZ2J0cmYuZnHFaIRYAQAAAHNooWiP\naKJdaJCHUnHGfXHHKGilWIAJAAAgICAgICBTVUJST1VUSU5FIFNHQlRSRiggTSwgTiwgS0wsIEtV\nLCBBQiwgTERBQiwgSVBJViwgSU5GTyApCioKKiAgLS0gTEFQQUNLIHJvdXRpbmUgKHZlcnNpb24g\nMy4yKSAtLQoqICAtLSBMQVBBQ0sgaXMgYSBzb2Z0d2FyZSBwYWNrYWdlIHByb3ZpZGVkIGJ5IFVu\naXYuIG9mIFRlbm5lc3NlZSwgICAgLS0KKiAgLS0gVW5pdi4gb2YgQ2FsaWZvcm5pYSBCZXJrZWxl\neSwgVW5pdi4gb2YgQ29sb3JhZG8gRGVudmVyIGFuZCBOQUcgTHRkLi4tLQoqICAgICBOb3ZlbWJl\nciAyMDA2CioKKiAgICAgLi4gU2NhbGFyIEFyZ3VtZW50cyAuLgogICAgICBJTlRFR0VSICAgICAg\nICAgICAgSU5GTywgS0wsIEtVLCBMREFCLCBNLCBOCiogICAgIC4uCiogICAgIC4uIEFycmF5IEFy\nZ3VtZW50cyAuLgogICAgICBJTlRFR0VSICAgICAgICAgICAgSVBJViggKiApCiAgICAgIFJFQUwg\nICAgICAgICAgICAgICBBQiggTERBQiwgKiApCiogICAgIC4uCioKKiAgUHVycG9zZQoqICA9PT09\nPT09CioKKiAgU0dCVFJGIGNvbXB1dGVzIGFuIExVIGZhY3Rvcml6YXRpb24gb2YgYSByZWFsIG0t\nYnktbiBiYW5kIG1hdHJpeCBBCiogIHVzaW5nIHBhcnRpYWwgcGl2b3Rpbmcgd2l0aCByb3cgaW50\nZXJjaGFuZ2VzLgoqCiogIFRoaXMgaXMgdGhlIGJsb2NrZWQgdmVyc2lvbiBvZiB0aGUgYWxnb3Jp\ndGhtLCBjYWxsaW5nIExldmVsIDMgQkxBUy4KKgoqICBBcmd1bWVudHMKKiAgPT09PT09PT09CioK\nKiAgTSAgICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbnVtYmVyIG9mIHJvd3Mg\nb2YgdGhlIG1hdHJpeCBBLiAgTSA+PSAwLgoqCiogIE4gICAgICAgKGlucHV0KSBJTlRFR0VSCiog\nICAgICAgICAgVGhlIG51bWJlciBvZiBjb2x1bW5zIG9mIHRoZSBtYXRyaXggQS4gIE4gPj0gMC4K\nKgoqICBLTCAgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2Ygc3Vi\nZGlhZ29uYWxzIHdpdGhpbiB0aGUgYmFuZCBvZiBBLiAgS0wgPj0gMC4KKgoqICBLVSAgICAgIChp\nbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2Ygc3VwZXJkaWFnb25hbHMgd2l0\naGluIHRoZSBiYW5kIG9mIEEuICBLVSA+PSAwLgoqCiogIEFCICAgICAgKGlucHV0L291dHB1dCkg\nUkVBTCBhcnJheSwgZGltZW5zaW9uIChMREFCLE4pCiogICAgICAgICAgT24gZW50cnksIHRoZSBt\nYXRyaXggQSBpbiBiYW5kIHN0b3JhZ2UsIGluIHJvd3MgS0wrMSB0bwoqICAgICAgICAgIDIqS0wr\nS1UrMTsgcm93cyAxIHRvIEtMIG9mIHRoZSBhcnJheSBuZWVkIG5vdCBiZSBzZXQuCiogICAgICAg\nICAgVGhlIGotdGggY29sdW1uIG9mIEEgaXMgc3RvcmVkIGluIHRoZSBqLXRoIGNvbHVtbiBvZiB0\naGUKKiAgICAgICAgICBhcnJheSBBQiBhcyBmb2xsb3dzOgoqICAgICAgICAgIEFCKGtsK2t1KzEr\naS1qLGopID0gQShpLGopIGZvciBtYXgoMSxqLWt1KTw9aTw9bWluKG0saitrbCkKKgoqICAgICAg\nICAgIE9uIGV4aXQsIGRldGFpbHMgb2YgdGhlIGZhY3Rvcml6YXRpb246IFUgaXMgc3RvcmVkIGFz\nIGFuCiogICAgICAgICAgdXBwZXIgdHJpYW5ndWxhciBiYW5kIG1hdHJpeCB3aXRoIEtMK0tVIHN1\ncGVyZGlhZ29uYWxzIGluCiogICAgICAgICAgcm93cyAxIHRvIEtMK0tVKzEsIGFuZCB0aGUgbXVs\ndGlwbGllcnMgdXNlZCBkdXJpbmcgdGhlCiogICAgICAgICAgZmFjdG9yaXphdGlvbiBhcmUgc3Rv\ncmVkIGluIHJvd3MgS0wrS1UrMiB0byAyKktMK0tVKzEuCiogICAgICAgICAgU2VlIGJlbG93IGZv\nciBmdXJ0aGVyIGRldGFpbHMuCioKKiAgTERBQiAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAg\nICBUaGUgbGVhZGluZyBkaW1lbnNpb24gb2YgdGhlIGFycmF5IEFCLiAgTERBQiA+PSAyKktMK0tV\nKzEuCioKKiAgSVBJViAgICAob3V0cHV0KSBJTlRFR0VSIGFycmF5LCBkaW1lbnNpb24gKG1pbihN\nLE4pKQoqICAgICAgICAgIFRoZSBwaXZvdCBpbmRpY2VzOyBmb3IgMSA8PSBpIDw9IG1pbihNLE4p\nLCByb3cgaSBvZiB0aGUKKiAgICAgICAgICBtYXRyaXggd2FzIGludGVyY2hhbmdlZCB3aXRoIHJv\ndyBJUElWKGkpLgoqCiogIElORk8gICAgKG91dHB1dCkgSU5URUdFUgoqICAgICAgICAgID0gMDog\nc3VjY2Vzc2Z1bCBleGl0CiogICAgICAgICAgPCAwOiBpZiBJTkZPID0gLWksIHRoZSBpLXRoIGFy\nZ3VtZW50IGhhZCBhbiBpbGxlZ2FsIHZhbHVlCiogICAgICAgICAgPiAwOiBpZiBJTkZPID0gK2ks\nIFUoaSxpKSBpcyBleGFjdGx5IHplcm8uIFRoZSBmYWN0b3JpemF0aW9uCiogICAgICAgICAgICAg\nICBoYXMgYmVlbiBjb21wbGV0ZWQsIGJ1dCB0aGUgZmFjdG9yIFUgaXMgZXhhY3RseQoqICAgICAg\nICAgICAgICAgc2luZ3VsYXIsIGFuZCBkaXZpc2lvbiBieSB6ZXJvIHdpbGwgb2NjdXIgaWYgaXQg\naXMgdXNlZAoqICAgICAgICAgICAgICAgdG8gc29sdmUgYSBzeXN0ZW0gb2YgZXF1YXRpb25zLgoq\nCnHIaJhomSmBccl9ccooaJyJaJ1onnViaKmKAuEAaKpYDgAAAHNnYnRyZl8yMjUudHh0cct1Ymis\nigLhAGitWAUAAABnYnRyZnHMaKmKAQV1YmiPaGZdaJCHUnHNfXHOKGiTWAcAAABnZW5lcmFscc9o\nlVgEAAAAYmFuZHHQaHdYYwAAAGNvbXB1dGVzIGFuIExVIGZhY3Rvcml6YXRpb24gb2YgYW4gbS1i\neS1uIGJhbmQgbWF0cml4IHVzaW5nIHBhcnRpYWwgcGl2b3Rpbmcgd2l0aCByb3cgaW50ZXJjaGFu\nZ2VzLnHRaJhomSmBcdJ9cdMoaJyJaJ1onnViaJ9YLAAAAGh0dHA6Ly93d3cubmV0bGliLm9yZy9s\nYXBhY2svZG91YmxlL2RnYnRyZi5mcdRohFgBAAAAZGihaI9ool1okIdScdV9cdYoaKVYjAkAACAg\nICAgIFNVQlJPVVRJTkUgREdCVFJGKCBNLCBOLCBLTCwgS1UsIEFCLCBMREFCLCBJUElWLCBJTkZP\nICkKKgoqICAtLSBMQVBBQ0sgcm91dGluZSAodmVyc2lvbiAzLjIpIC0tCiogIC0tIExBUEFDSyBp\ncyBhIHNvZnR3YXJlIHBhY2thZ2UgcHJvdmlkZWQgYnkgVW5pdi4gb2YgVGVubmVzc2VlLCAgICAt\nLQoqICAtLSBVbml2LiBvZiBDYWxpZm9ybmlhIEJlcmtlbGV5LCBVbml2LiBvZiBDb2xvcmFkbyBE\nZW52ZXIgYW5kIE5BRyBMdGQuLi0tCiogICAgIE5vdmVtYmVyIDIwMDYKKgoqICAgICAuLiBTY2Fs\nYXIgQXJndW1lbnRzIC4uCiAgICAgIElOVEVHRVIgICAgICAgICAgICBJTkZPLCBLTCwgS1UsIExE\nQUIsIE0sIE4KKiAgICAgLi4KKiAgICAgLi4gQXJyYXkgQXJndW1lbnRzIC4uCiAgICAgIElOVEVH\nRVIgICAgICAgICAgICBJUElWKCAqICkKICAgICAgRE9VQkxFIFBSRUNJU0lPTiAgIEFCKCBMREFC\nLCAqICkKKiAgICAgLi4KKgoqICBQdXJwb3NlCiogID09PT09PT0KKgoqICBER0JUUkYgY29tcHV0\nZXMgYW4gTFUgZmFjdG9yaXphdGlvbiBvZiBhIHJlYWwgbS1ieS1uIGJhbmQgbWF0cml4IEEKKiAg\ndXNpbmcgcGFydGlhbCBwaXZvdGluZyB3aXRoIHJvdyBpbnRlcmNoYW5nZXMuCioKKiAgVGhpcyBp\ncyB0aGUgYmxvY2tlZCB2ZXJzaW9uIG9mIHRoZSBhbGdvcml0aG0sIGNhbGxpbmcgTGV2ZWwgMyBC\nTEFTLgoqCiogIEFyZ3VtZW50cwoqICA9PT09PT09PT0KKgoqICBNICAgICAgIChpbnB1dCkgSU5U\nRUdFUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2Ygcm93cyBvZiB0aGUgbWF0cml4IEEuICBNID49\nIDAuCioKKiAgTiAgICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbnVtYmVyIG9m\nIGNvbHVtbnMgb2YgdGhlIG1hdHJpeCBBLiAgTiA+PSAwLgoqCiogIEtMICAgICAgKGlucHV0KSBJ\nTlRFR0VSCiogICAgICAgICAgVGhlIG51bWJlciBvZiBzdWJkaWFnb25hbHMgd2l0aGluIHRoZSBi\nYW5kIG9mIEEuICBLTCA+PSAwLgoqCiogIEtVICAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAg\nICAgVGhlIG51bWJlciBvZiBzdXBlcmRpYWdvbmFscyB3aXRoaW4gdGhlIGJhbmQgb2YgQS4gIEtV\nID49IDAuCioKKiAgQUIgICAgICAoaW5wdXQvb3V0cHV0KSBET1VCTEUgUFJFQ0lTSU9OIGFycmF5\nLCBkaW1lbnNpb24gKExEQUIsTikKKiAgICAgICAgICBPbiBlbnRyeSwgdGhlIG1hdHJpeCBBIGlu\nIGJhbmQgc3RvcmFnZSwgaW4gcm93cyBLTCsxIHRvCiogICAgICAgICAgMipLTCtLVSsxOyByb3dz\nIDEgdG8gS0wgb2YgdGhlIGFycmF5IG5lZWQgbm90IGJlIHNldC4KKiAgICAgICAgICBUaGUgai10\naCBjb2x1bW4gb2YgQSBpcyBzdG9yZWQgaW4gdGhlIGotdGggY29sdW1uIG9mIHRoZQoqICAgICAg\nICAgIGFycmF5IEFCIGFzIGZvbGxvd3M6CiogICAgICAgICAgQUIoa2wra3UrMStpLWosaikgPSBB\nKGksaikgZm9yIG1heCgxLGota3UpPD1pPD1taW4obSxqK2tsKQoqCiogICAgICAgICAgT24gZXhp\ndCwgZGV0YWlscyBvZiB0aGUgZmFjdG9yaXphdGlvbjogVSBpcyBzdG9yZWQgYXMgYW4KKiAgICAg\nICAgICB1cHBlciB0cmlhbmd1bGFyIGJhbmQgbWF0cml4IHdpdGggS0wrS1Ugc3VwZXJkaWFnb25h\nbHMgaW4KKiAgICAgICAgICByb3dzIDEgdG8gS0wrS1UrMSwgYW5kIHRoZSBtdWx0aXBsaWVycyB1\nc2VkIGR1cmluZyB0aGUKKiAgICAgICAgICBmYWN0b3JpemF0aW9uIGFyZSBzdG9yZWQgaW4gcm93\ncyBLTCtLVSsyIHRvIDIqS0wrS1UrMS4KKiAgICAgICAgICBTZWUgYmVsb3cgZm9yIGZ1cnRoZXIg\nZGV0YWlscy4KKgoqICBMREFCICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBsZWFk\naW5nIGRpbWVuc2lvbiBvZiB0aGUgYXJyYXkgQUIuICBMREFCID49IDIqS0wrS1UrMS4KKgoqICBJ\nUElWICAgIChvdXRwdXQpIElOVEVHRVIgYXJyYXksIGRpbWVuc2lvbiAobWluKE0sTikpCiogICAg\nICAgICAgVGhlIHBpdm90IGluZGljZXM7IGZvciAxIDw9IGkgPD0gbWluKE0sTiksIHJvdyBpIG9m\nIHRoZQoqICAgICAgICAgIG1hdHJpeCB3YXMgaW50ZXJjaGFuZ2VkIHdpdGggcm93IElQSVYoaSku\nCioKKiAgSU5GTyAgICAob3V0cHV0KSBJTlRFR0VSCiogICAgICAgICAgPSAwOiBzdWNjZXNzZnVs\nIGV4aXQKKiAgICAgICAgICA8IDA6IGlmIElORk8gPSAtaSwgdGhlIGktdGggYXJndW1lbnQgaGFk\nIGFuIGlsbGVnYWwgdmFsdWUKKiAgICAgICAgICA+IDA6IGlmIElORk8gPSAraSwgVShpLGkpIGlz\nIGV4YWN0bHkgemVyby4gVGhlIGZhY3Rvcml6YXRpb24KKiAgICAgICAgICAgICAgIGhhcyBiZWVu\nIGNvbXBsZXRlZCwgYnV0IHRoZSBmYWN0b3IgVSBpcyBleGFjdGx5CiogICAgICAgICAgICAgICBz\naW5ndWxhciwgYW5kIGRpdmlzaW9uIGJ5IHplcm8gd2lsbCBvY2N1ciBpZiBpdCBpcyB1c2VkCiog\nICAgICAgICAgICAgICB0byBzb2x2ZSBhIHN5c3RlbSBvZiBlcXVhdGlvbnMuCioKcddomGiZKYFx\n2H1x2ShonIlonWiedWJoqYoC4gBoqlgOAAAAZGdidHJmXzIyNi50eHRx2nViaKyKAuIAaK1YBQAA\nAGdidHJmcdtoqYoBBnViaI9oZl1okIdScdx9cd0oaJNYBwAAAGdlbmVyYWxx3miVWAsAAAB0cmlk\naWFnb25hbHHfaHdYcQAAAGNvbXB1dGVzIGFuIExVIGZhY3Rvcml6YXRpb24gb2YgYSB0cmlkaWFn\nb25hbCBtYXRyaXggdXNpbmcgZWxpbWluYXRpb24gd2l0aCBwYXJ0aWFsIHBpdm90aW5nIGFuZCBy\nb3cgaW50ZXJjaGFuZ2VzceBomGiZKYFx4X1x4ihonIlonWiedWJon1gsAAAAaHR0cDovL3d3dy5u\nZXRsaWIub3JnL2xhcGFjay9zaW5nbGUvc2d0dHJmLmZx42iEWAEAAABzaKFoj2iiXWiQh1Jx5H1x\n5ShopVgSCgAAICAgICAgU1VCUk9VVElORSBTR1RUUkYoIE4sIERMLCBELCBEVSwgRFUyLCBJUElW\nLCBJTkZPICkKKgoqICAtLSBMQVBBQ0sgcm91dGluZSAodmVyc2lvbiAzLjIpIC0tCiogIC0tIExB\nUEFDSyBpcyBhIHNvZnR3YXJlIHBhY2thZ2UgcHJvdmlkZWQgYnkgVW5pdi4gb2YgVGVubmVzc2Vl\nLCAgICAtLQoqICAtLSBVbml2LiBvZiBDYWxpZm9ybmlhIEJlcmtlbGV5LCBVbml2LiBvZiBDb2xv\ncmFkbyBEZW52ZXIgYW5kIE5BRyBMdGQuLi0tCiogICAgIE5vdmVtYmVyIDIwMDYKKgoqICAgICAu\nLiBTY2FsYXIgQXJndW1lbnRzIC4uCiAgICAgIElOVEVHRVIgICAgICAgICAgICBJTkZPLCBOCiog\nICAgIC4uCiogICAgIC4uIEFycmF5IEFyZ3VtZW50cyAuLgogICAgICBJTlRFR0VSICAgICAgICAg\nICAgSVBJViggKiApCiAgICAgIFJFQUwgICAgICAgICAgICAgICBEKCAqICksIERMKCAqICksIERV\nKCAqICksIERVMiggKiApCiogICAgIC4uCioKKiAgUHVycG9zZQoqICA9PT09PT09CioKKiAgU0dU\nVFJGIGNvbXB1dGVzIGFuIExVIGZhY3Rvcml6YXRpb24gb2YgYSByZWFsIHRyaWRpYWdvbmFsIG1h\ndHJpeCBBCiogIHVzaW5nIGVsaW1pbmF0aW9uIHdpdGggcGFydGlhbCBwaXZvdGluZyBhbmQgcm93\nIGludGVyY2hhbmdlcy4KKgoqICBUaGUgZmFjdG9yaXphdGlvbiBoYXMgdGhlIGZvcm0KKiAgICAg\nQSA9IEwgKiBVCiogIHdoZXJlIEwgaXMgYSBwcm9kdWN0IG9mIHBlcm11dGF0aW9uIGFuZCB1bml0\nIGxvd2VyIGJpZGlhZ29uYWwKKiAgbWF0cmljZXMgYW5kIFUgaXMgdXBwZXIgdHJpYW5ndWxhciB3\naXRoIG5vbnplcm9zIGluIG9ubHkgdGhlIG1haW4KKiAgZGlhZ29uYWwgYW5kIGZpcnN0IHR3byBz\ndXBlcmRpYWdvbmFscy4KKgoqICBBcmd1bWVudHMKKiAgPT09PT09PT09CioKKiAgTiAgICAgICAo\naW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgb3JkZXIgb2YgdGhlIG1hdHJpeCBBLgoqCiog\nIERMICAgICAgKGlucHV0L291dHB1dCkgUkVBTCBhcnJheSwgZGltZW5zaW9uIChOLTEpCiogICAg\nICAgICAgT24gZW50cnksIERMIG11c3QgY29udGFpbiB0aGUgKG4tMSkgc3ViLWRpYWdvbmFsIGVs\nZW1lbnRzIG9mCiogICAgICAgICAgQS4KKgoqICAgICAgICAgIE9uIGV4aXQsIERMIGlzIG92ZXJ3\ncml0dGVuIGJ5IHRoZSAobi0xKSBtdWx0aXBsaWVycyB0aGF0CiogICAgICAgICAgZGVmaW5lIHRo\nZSBtYXRyaXggTCBmcm9tIHRoZSBMVSBmYWN0b3JpemF0aW9uIG9mIEEuCioKKiAgRCAgICAgICAo\naW5wdXQvb3V0cHV0KSBSRUFMIGFycmF5LCBkaW1lbnNpb24gKE4pCiogICAgICAgICAgT24gZW50\ncnksIEQgbXVzdCBjb250YWluIHRoZSBkaWFnb25hbCBlbGVtZW50cyBvZiBBLgoqCiogICAgICAg\nICAgT24gZXhpdCwgRCBpcyBvdmVyd3JpdHRlbiBieSB0aGUgbiBkaWFnb25hbCBlbGVtZW50cyBv\nZiB0aGUKKiAgICAgICAgICB1cHBlciB0cmlhbmd1bGFyIG1hdHJpeCBVIGZyb20gdGhlIExVIGZh\nY3Rvcml6YXRpb24gb2YgQS4KKgoqICBEVSAgICAgIChpbnB1dC9vdXRwdXQpIFJFQUwgYXJyYXks\nIGRpbWVuc2lvbiAoTi0xKQoqICAgICAgICAgIE9uIGVudHJ5LCBEVSBtdXN0IGNvbnRhaW4gdGhl\nIChuLTEpIHN1cGVyLWRpYWdvbmFsIGVsZW1lbnRzCiogICAgICAgICAgb2YgQS4KKgoqICAgICAg\nICAgIE9uIGV4aXQsIERVIGlzIG92ZXJ3cml0dGVuIGJ5IHRoZSAobi0xKSBlbGVtZW50cyBvZiB0\naGUgZmlyc3QKKiAgICAgICAgICBzdXBlci1kaWFnb25hbCBvZiBVLgoqCiogIERVMiAgICAgKG91\ndHB1dCkgUkVBTCBhcnJheSwgZGltZW5zaW9uIChOLTIpCiogICAgICAgICAgT24gZXhpdCwgRFUy\nIGlzIG92ZXJ3cml0dGVuIGJ5IHRoZSAobi0yKSBlbGVtZW50cyBvZiB0aGUKKiAgICAgICAgICBz\nZWNvbmQgc3VwZXItZGlhZ29uYWwgb2YgVS4KKgoqICBJUElWICAgIChvdXRwdXQpIElOVEVHRVIg\nYXJyYXksIGRpbWVuc2lvbiAoTikKKiAgICAgICAgICBUaGUgcGl2b3QgaW5kaWNlczsgZm9yIDEg\nPD0gaSA8PSBuLCByb3cgaSBvZiB0aGUgbWF0cml4IHdhcwoqICAgICAgICAgIGludGVyY2hhbmdl\nZCB3aXRoIHJvdyBJUElWKGkpLiAgSVBJVihpKSB3aWxsIGFsd2F5cyBiZSBlaXRoZXIKKiAgICAg\nICAgICBpIG9yIGkrMTsgSVBJVihpKSA9IGkgaW5kaWNhdGVzIGEgcm93IGludGVyY2hhbmdlIHdh\ncyBub3QKKiAgICAgICAgICByZXF1aXJlZC4KKgoqICBJTkZPICAgIChvdXRwdXQpIElOVEVHRVIK\nKiAgICAgICAgICA9IDA6ICBzdWNjZXNzZnVsIGV4aXQKKiAgICAgICAgICA8IDA6ICBpZiBJTkZP\nID0gLWssIHRoZSBrLXRoIGFyZ3VtZW50IGhhZCBhbiBpbGxlZ2FsIHZhbHVlCiogICAgICAgICAg\nPiAwOiAgaWYgSU5GTyA9IGssIFUoayxrKSBpcyBleGFjdGx5IHplcm8uIFRoZSBmYWN0b3JpemF0\naW9uCiogICAgICAgICAgICAgICAgaGFzIGJlZW4gY29tcGxldGVkLCBidXQgdGhlIGZhY3RvciBV\nIGlzIGV4YWN0bHkKKiAgICAgICAgICAgICAgICBzaW5ndWxhciwgYW5kIGRpdmlzaW9uIGJ5IHpl\ncm8gd2lsbCBvY2N1ciBpZiBpdCBpcyB1c2VkCiogICAgICAgICAgICAgICAgdG8gc29sdmUgYSBz\neXN0ZW0gb2YgZXF1YXRpb25zLgoqCnHmaJhomSmBced9cegoaJyJaJ1onnViaKmKAuUAaKpYDgAA\nAHNndHRyZl8yMjkudHh0cel1YmisigLlAGitWAUAAABndHRyZnHqaKmKAQl1YmiPaGZdaJCHUnHr\nfXHsKGiTWAcAAABnZW5lcmFsce1olVgLAAAAdHJpZGlhZ29uYWxx7mh3WHEAAABjb21wdXRlcyBh\nbiBMVSBmYWN0b3JpemF0aW9uIG9mIGEgdHJpZGlhZ29uYWwgbWF0cml4IHVzaW5nIGVsaW1pbmF0\naW9uIHdpdGggcGFydGlhbCBwaXZvdGluZyBhbmQgcm93IGludGVyY2hhbmdlc3HvaJhomSmBcfB9\ncfEoaJyJaJ1onnViaJ9YLAAAAGh0dHA6Ly93d3cubmV0bGliLm9yZy9sYXBhY2svZG91YmxlL2Rn\ndHRyZi5mcfJohFgBAAAAZGihaI9ool1okIdScfN9cfQoaKVYQgoAACAgICAgIFNVQlJPVVRJTkUg\nREdUVFJGKCBOLCBETCwgRCwgRFUsIERVMiwgSVBJViwgSU5GTyApCioKKiAgLS0gTEFQQUNLIHJv\ndXRpbmUgKHZlcnNpb24gMy4yKSAtLQoqICAtLSBMQVBBQ0sgaXMgYSBzb2Z0d2FyZSBwYWNrYWdl\nIHByb3ZpZGVkIGJ5IFVuaXYuIG9mIFRlbm5lc3NlZSwgICAgLS0KKiAgLS0gVW5pdi4gb2YgQ2Fs\naWZvcm5pYSBCZXJrZWxleSwgVW5pdi4gb2YgQ29sb3JhZG8gRGVudmVyIGFuZCBOQUcgTHRkLi4t\nLQoqICAgICBOb3ZlbWJlciAyMDA2CioKKiAgICAgLi4gU2NhbGFyIEFyZ3VtZW50cyAuLgogICAg\nICBJTlRFR0VSICAgICAgICAgICAgSU5GTywgTgoqICAgICAuLgoqICAgICAuLiBBcnJheSBBcmd1\nbWVudHMgLi4KICAgICAgSU5URUdFUiAgICAgICAgICAgIElQSVYoICogKQogICAgICBET1VCTEUg\nUFJFQ0lTSU9OICAgRCggKiApLCBETCggKiApLCBEVSggKiApLCBEVTIoICogKQoqICAgICAuLgoq\nCiogIFB1cnBvc2UKKiAgPT09PT09PQoqCiogIERHVFRSRiBjb21wdXRlcyBhbiBMVSBmYWN0b3Jp\nemF0aW9uIG9mIGEgcmVhbCB0cmlkaWFnb25hbCBtYXRyaXggQQoqICB1c2luZyBlbGltaW5hdGlv\nbiB3aXRoIHBhcnRpYWwgcGl2b3RpbmcgYW5kIHJvdyBpbnRlcmNoYW5nZXMuCioKKiAgVGhlIGZh\nY3Rvcml6YXRpb24gaGFzIHRoZSBmb3JtCiogICAgIEEgPSBMICogVQoqICB3aGVyZSBMIGlzIGEg\ncHJvZHVjdCBvZiBwZXJtdXRhdGlvbiBhbmQgdW5pdCBsb3dlciBiaWRpYWdvbmFsCiogIG1hdHJp\nY2VzIGFuZCBVIGlzIHVwcGVyIHRyaWFuZ3VsYXIgd2l0aCBub256ZXJvcyBpbiBvbmx5IHRoZSBt\nYWluCiogIGRpYWdvbmFsIGFuZCBmaXJzdCB0d28gc3VwZXJkaWFnb25hbHMuCioKKiAgQXJndW1l\nbnRzCiogID09PT09PT09PQoqCiogIE4gICAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAg\nVGhlIG9yZGVyIG9mIHRoZSBtYXRyaXggQS4KKgoqICBETCAgICAgIChpbnB1dC9vdXRwdXQpIERP\nVUJMRSBQUkVDSVNJT04gYXJyYXksIGRpbWVuc2lvbiAoTi0xKQoqICAgICAgICAgIE9uIGVudHJ5\nLCBETCBtdXN0IGNvbnRhaW4gdGhlIChuLTEpIHN1Yi1kaWFnb25hbCBlbGVtZW50cyBvZgoqICAg\nICAgICAgIEEuCioKKiAgICAgICAgICBPbiBleGl0LCBETCBpcyBvdmVyd3JpdHRlbiBieSB0aGUg\nKG4tMSkgbXVsdGlwbGllcnMgdGhhdAoqICAgICAgICAgIGRlZmluZSB0aGUgbWF0cml4IEwgZnJv\nbSB0aGUgTFUgZmFjdG9yaXphdGlvbiBvZiBBLgoqCiogIEQgICAgICAgKGlucHV0L291dHB1dCkg\nRE9VQkxFIFBSRUNJU0lPTiBhcnJheSwgZGltZW5zaW9uIChOKQoqICAgICAgICAgIE9uIGVudHJ5\nLCBEIG11c3QgY29udGFpbiB0aGUgZGlhZ29uYWwgZWxlbWVudHMgb2YgQS4KKgoqICAgICAgICAg\nIE9uIGV4aXQsIEQgaXMgb3ZlcndyaXR0ZW4gYnkgdGhlIG4gZGlhZ29uYWwgZWxlbWVudHMgb2Yg\ndGhlCiogICAgICAgICAgdXBwZXIgdHJpYW5ndWxhciBtYXRyaXggVSBmcm9tIHRoZSBMVSBmYWN0\nb3JpemF0aW9uIG9mIEEuCioKKiAgRFUgICAgICAoaW5wdXQvb3V0cHV0KSBET1VCTEUgUFJFQ0lT\nSU9OIGFycmF5LCBkaW1lbnNpb24gKE4tMSkKKiAgICAgICAgICBPbiBlbnRyeSwgRFUgbXVzdCBj\nb250YWluIHRoZSAobi0xKSBzdXBlci1kaWFnb25hbCBlbGVtZW50cwoqICAgICAgICAgIG9mIEEu\nCioKKiAgICAgICAgICBPbiBleGl0LCBEVSBpcyBvdmVyd3JpdHRlbiBieSB0aGUgKG4tMSkgZWxl\nbWVudHMgb2YgdGhlIGZpcnN0CiogICAgICAgICAgc3VwZXItZGlhZ29uYWwgb2YgVS4KKgoqICBE\nVTIgICAgIChvdXRwdXQpIERPVUJMRSBQUkVDSVNJT04gYXJyYXksIGRpbWVuc2lvbiAoTi0yKQoq\nICAgICAgICAgIE9uIGV4aXQsIERVMiBpcyBvdmVyd3JpdHRlbiBieSB0aGUgKG4tMikgZWxlbWVu\ndHMgb2YgdGhlCiogICAgICAgICAgc2Vjb25kIHN1cGVyLWRpYWdvbmFsIG9mIFUuCioKKiAgSVBJ\nViAgICAob3V0cHV0KSBJTlRFR0VSIGFycmF5LCBkaW1lbnNpb24gKE4pCiogICAgICAgICAgVGhl\nIHBpdm90IGluZGljZXM7IGZvciAxIDw9IGkgPD0gbiwgcm93IGkgb2YgdGhlIG1hdHJpeCB3YXMK\nKiAgICAgICAgICBpbnRlcmNoYW5nZWQgd2l0aCByb3cgSVBJVihpKS4gIElQSVYoaSkgd2lsbCBh\nbHdheXMgYmUgZWl0aGVyCiogICAgICAgICAgaSBvciBpKzE7IElQSVYoaSkgPSBpIGluZGljYXRl\ncyBhIHJvdyBpbnRlcmNoYW5nZSB3YXMgbm90CiogICAgICAgICAgcmVxdWlyZWQuCioKKiAgSU5G\nTyAgICAob3V0cHV0KSBJTlRFR0VSCiogICAgICAgICAgPSAwOiAgc3VjY2Vzc2Z1bCBleGl0Ciog\nICAgICAgICAgPCAwOiAgaWYgSU5GTyA9IC1rLCB0aGUgay10aCBhcmd1bWVudCBoYWQgYW4gaWxs\nZWdhbCB2YWx1ZQoqICAgICAgICAgID4gMDogIGlmIElORk8gPSBrLCBVKGssaykgaXMgZXhhY3Rs\neSB6ZXJvLiBUaGUgZmFjdG9yaXphdGlvbgoqICAgICAgICAgICAgICAgIGhhcyBiZWVuIGNvbXBs\nZXRlZCwgYnV0IHRoZSBmYWN0b3IgVSBpcyBleGFjdGx5CiogICAgICAgICAgICAgICAgc2luZ3Vs\nYXIsIGFuZCBkaXZpc2lvbiBieSB6ZXJvIHdpbGwgb2NjdXIgaWYgaXQgaXMgdXNlZAoqICAgICAg\nICAgICAgICAgIHRvIHNvbHZlIGEgc3lzdGVtIG9mIGVxdWF0aW9ucy4KKgpx9WiYaJkpgXH2fXH3\nKGiciWidaJ51YmipigLmAGiqWA4AAABkZ3R0cmZfMjMwLnR4dHH4dWJorIoC5gBorVgFAAAAZ3R0\ncmZx+WipigEKdWJoj2hmXWiQh1Jx+n1x+yhok1gDAAAAU1BEcfxolVgEAAAAZnVsbHH9aHdYNAAA\nAGNvbXB1dGVzIHRoZSBDaG9sZXNreSBmYWN0b3JpemF0aW9uIG9mIGFuIFNQRCBtYXRyaXhx/miY\naJkpgXH/fXIAAQAAKGiciWidaJ51YmifWCwAAABodHRwOi8vd3d3Lm5ldGxpYi5vcmcvbGFwYWNr\nL3NpbmdsZS9zcG90cmYuZnIBAQAAaIRYAQAAAHNooWiPaKJdaJCHUnICAQAAfXIDAQAAKGilWGQI\nAAAgICAgICBTVUJST1VUSU5FIFNQT1RSRiggVVBMTywgTiwgQSwgTERBLCBJTkZPICkKKgoqICAt\nLSBMQVBBQ0sgcm91dGluZSAodmVyc2lvbiAzLjMuMSkgLS0KKiAgLS0gTEFQQUNLIGlzIGEgc29m\ndHdhcmUgcGFja2FnZSBwcm92aWRlZCBieSBVbml2LiBvZiBUZW5uZXNzZWUsICAgIC0tCiogIC0t\nIFVuaXYuIG9mIENhbGlmb3JuaWEgQmVya2VsZXksIFVuaXYuIG9mIENvbG9yYWRvIERlbnZlciBh\nbmQgTkFHIEx0ZC4uLS0KKiAgLS0gQXByaWwgMjAxMSAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tCioKKiAgICAgLi4gU2NhbGFyIEFyZ3VtZW50\ncyAuLgogICAgICBDSEFSQUNURVIgICAgICAgICAgVVBMTwogICAgICBJTlRFR0VSICAgICAgICAg\nICAgSU5GTywgTERBLCBOCiogICAgIC4uCiogICAgIC4uIEFycmF5IEFyZ3VtZW50cyAuLgogICAg\nICBSRUFMICAgICAgICAgICAgICAgQSggTERBLCAqICkKKiAgICAgLi4KKgoqICBQdXJwb3NlCiog\nID09PT09PT0KKgoqICBTUE9UUkYgY29tcHV0ZXMgdGhlIENob2xlc2t5IGZhY3Rvcml6YXRpb24g\nb2YgYSByZWFsIHN5bW1ldHJpYwoqICBwb3NpdGl2ZSBkZWZpbml0ZSBtYXRyaXggQS4KKgoqICBU\naGUgZmFjdG9yaXphdGlvbiBoYXMgdGhlIGZvcm0KKiAgICAgQSA9IFUqKlQgKiBVLCAgaWYgVVBM\nTyA9ICdVJywgb3IKKiAgICAgQSA9IEwgICogTCoqVCwgIGlmIFVQTE8gPSAnTCcsCiogIHdoZXJl\nIFUgaXMgYW4gdXBwZXIgdHJpYW5ndWxhciBtYXRyaXggYW5kIEwgaXMgbG93ZXIgdHJpYW5ndWxh\nci4KKgoqICBUaGlzIGlzIHRoZSBibG9jayB2ZXJzaW9uIG9mIHRoZSBhbGdvcml0aG0sIGNhbGxp\nbmcgTGV2ZWwgMyBCTEFTLgoqCiogIEFyZ3VtZW50cwoqICA9PT09PT09PT0KKgoqICBVUExPICAg\nIChpbnB1dCkgQ0hBUkFDVEVSKjEKKiAgICAgICAgICA9ICdVJzogIFVwcGVyIHRyaWFuZ2xlIG9m\nIEEgaXMgc3RvcmVkOwoqICAgICAgICAgID0gJ0wnOiAgTG93ZXIgdHJpYW5nbGUgb2YgQSBpcyBz\ndG9yZWQuCioKKiAgTiAgICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgb3JkZXIg\nb2YgdGhlIG1hdHJpeCBBLiAgTiA+PSAwLgoqCiogIEEgICAgICAgKGlucHV0L291dHB1dCkgUkVB\nTCBhcnJheSwgZGltZW5zaW9uIChMREEsTikKKiAgICAgICAgICBPbiBlbnRyeSwgdGhlIHN5bW1l\ndHJpYyBtYXRyaXggQS4gIElmIFVQTE8gPSAnVScsIHRoZSBsZWFkaW5nCiogICAgICAgICAgTi1i\neS1OIHVwcGVyIHRyaWFuZ3VsYXIgcGFydCBvZiBBIGNvbnRhaW5zIHRoZSB1cHBlcgoqICAgICAg\nICAgIHRyaWFuZ3VsYXIgcGFydCBvZiB0aGUgbWF0cml4IEEsIGFuZCB0aGUgc3RyaWN0bHkgbG93\nZXIKKiAgICAgICAgICB0cmlhbmd1bGFyIHBhcnQgb2YgQSBpcyBub3QgcmVmZXJlbmNlZC4gIElm\nIFVQTE8gPSAnTCcsIHRoZQoqICAgICAgICAgIGxlYWRpbmcgTi1ieS1OIGxvd2VyIHRyaWFuZ3Vs\nYXIgcGFydCBvZiBBIGNvbnRhaW5zIHRoZSBsb3dlcgoqICAgICAgICAgIHRyaWFuZ3VsYXIgcGFy\ndCBvZiB0aGUgbWF0cml4IEEsIGFuZCB0aGUgc3RyaWN0bHkgdXBwZXIKKiAgICAgICAgICB0cmlh\nbmd1bGFyIHBhcnQgb2YgQSBpcyBub3QgcmVmZXJlbmNlZC4KKgoqICAgICAgICAgIE9uIGV4aXQs\nIGlmIElORk8gPSAwLCB0aGUgZmFjdG9yIFUgb3IgTCBmcm9tIHRoZSBDaG9sZXNreQoqICAgICAg\nICAgIGZhY3Rvcml6YXRpb24gQSA9IFUqKlQqVSBvciBBID0gTCpMKipULgoqCiogIExEQSAgICAg\nKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBh\ncnJheSBBLiAgTERBID49IG1heCgxLE4pLgoqCiogIElORk8gICAgKG91dHB1dCkgSU5URUdFUgoq\nICAgICAgICAgID0gMDogIHN1Y2Nlc3NmdWwgZXhpdAoqICAgICAgICAgIDwgMDogIGlmIElORk8g\nPSAtaSwgdGhlIGktdGggYXJndW1lbnQgaGFkIGFuIGlsbGVnYWwgdmFsdWUKKiAgICAgICAgICA+\nIDA6ICBpZiBJTkZPID0gaSwgdGhlIGxlYWRpbmcgbWlub3Igb2Ygb3JkZXIgaSBpcyBub3QKKiAg\nICAgICAgICAgICAgICBwb3NpdGl2ZSBkZWZpbml0ZSwgYW5kIHRoZSBmYWN0b3JpemF0aW9uIGNv\ndWxkIG5vdCBiZQoqICAgICAgICAgICAgICAgIGNvbXBsZXRlZC4KKgpyBAEAAGiYaJkpgXIFAQAA\nfXIGAQAAKGiciWidaJ51YmipigLpAGiqWA4AAABzcG90cmZfMjMzLnR4dHIHAQAAdWJorIoC6QBo\nrVgFAAAAcG90cmZyCAEAAGipigENdWJoj2hmXWiQh1JyCQEAAH1yCgEAAChok1gDAAAAU1BEcgsB\nAABolVgEAAAAZnVsbHIMAQAAaHdYNAAAAGNvbXB1dGVzIHRoZSBDaG9sZXNreSBmYWN0b3JpemF0\naW9uIG9mIGFuIFNQRCBtYXRyaXhyDQEAAGiYaJkpgXIOAQAAfXIPAQAAKGiciWidaJ51YmifWCwA\nAABodHRwOi8vd3d3Lm5ldGxpYi5vcmcvbGFwYWNrL2RvdWJsZS9kcG90cmYuZnIQAQAAaIRYAQAA\nAGRooWiPaKJdaJCHUnIRAQAAfXISAQAAKGilWHAIAAAgICAgICBTVUJST1VUSU5FIERQT1RSRigg\nVVBMTywgTiwgQSwgTERBLCBJTkZPICkKKgoqICAtLSBMQVBBQ0sgcm91dGluZSAodmVyc2lvbiAz\nLjMuMSkgLS0KKiAgLS0gTEFQQUNLIGlzIGEgc29mdHdhcmUgcGFja2FnZSBwcm92aWRlZCBieSBV\nbml2LiBvZiBUZW5uZXNzZWUsICAgIC0tCiogIC0tIFVuaXYuIG9mIENhbGlmb3JuaWEgQmVya2Vs\nZXksIFVuaXYuIG9mIENvbG9yYWRvIERlbnZlciBhbmQgTkFHIEx0ZC4uLS0KKiAgLS0gQXByaWwg\nMjAxMSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nIC0tCioKKiAgICAgLi4gU2NhbGFyIEFyZ3VtZW50cyAuLgogICAgICBDSEFSQUNURVIgICAgICAg\nICAgVVBMTwogICAgICBJTlRFR0VSICAgICAgICAgICAgSU5GTywgTERBLCBOCiogICAgIC4uCiog\nICAgIC4uIEFycmF5IEFyZ3VtZW50cyAuLgogICAgICBET1VCTEUgUFJFQ0lTSU9OICAgQSggTERB\nLCAqICkKKiAgICAgLi4KKgoqICBQdXJwb3NlCiogID09PT09PT0KKgoqICBEUE9UUkYgY29tcHV0\nZXMgdGhlIENob2xlc2t5IGZhY3Rvcml6YXRpb24gb2YgYSByZWFsIHN5bW1ldHJpYwoqICBwb3Np\ndGl2ZSBkZWZpbml0ZSBtYXRyaXggQS4KKgoqICBUaGUgZmFjdG9yaXphdGlvbiBoYXMgdGhlIGZv\ncm0KKiAgICAgQSA9IFUqKlQgKiBVLCAgaWYgVVBMTyA9ICdVJywgb3IKKiAgICAgQSA9IEwgICog\nTCoqVCwgIGlmIFVQTE8gPSAnTCcsCiogIHdoZXJlIFUgaXMgYW4gdXBwZXIgdHJpYW5ndWxhciBt\nYXRyaXggYW5kIEwgaXMgbG93ZXIgdHJpYW5ndWxhci4KKgoqICBUaGlzIGlzIHRoZSBibG9jayB2\nZXJzaW9uIG9mIHRoZSBhbGdvcml0aG0sIGNhbGxpbmcgTGV2ZWwgMyBCTEFTLgoqCiogIEFyZ3Vt\nZW50cwoqICA9PT09PT09PT0KKgoqICBVUExPICAgIChpbnB1dCkgQ0hBUkFDVEVSKjEKKiAgICAg\nICAgICA9ICdVJzogIFVwcGVyIHRyaWFuZ2xlIG9mIEEgaXMgc3RvcmVkOwoqICAgICAgICAgID0g\nJ0wnOiAgTG93ZXIgdHJpYW5nbGUgb2YgQSBpcyBzdG9yZWQuCioKKiAgTiAgICAgICAoaW5wdXQp\nIElOVEVHRVIKKiAgICAgICAgICBUaGUgb3JkZXIgb2YgdGhlIG1hdHJpeCBBLiAgTiA+PSAwLgoq\nCiogIEEgICAgICAgKGlucHV0L291dHB1dCkgRE9VQkxFIFBSRUNJU0lPTiBhcnJheSwgZGltZW5z\naW9uIChMREEsTikKKiAgICAgICAgICBPbiBlbnRyeSwgdGhlIHN5bW1ldHJpYyBtYXRyaXggQS4g\nIElmIFVQTE8gPSAnVScsIHRoZSBsZWFkaW5nCiogICAgICAgICAgTi1ieS1OIHVwcGVyIHRyaWFu\nZ3VsYXIgcGFydCBvZiBBIGNvbnRhaW5zIHRoZSB1cHBlcgoqICAgICAgICAgIHRyaWFuZ3VsYXIg\ncGFydCBvZiB0aGUgbWF0cml4IEEsIGFuZCB0aGUgc3RyaWN0bHkgbG93ZXIKKiAgICAgICAgICB0\ncmlhbmd1bGFyIHBhcnQgb2YgQSBpcyBub3QgcmVmZXJlbmNlZC4gIElmIFVQTE8gPSAnTCcsIHRo\nZQoqICAgICAgICAgIGxlYWRpbmcgTi1ieS1OIGxvd2VyIHRyaWFuZ3VsYXIgcGFydCBvZiBBIGNv\nbnRhaW5zIHRoZSBsb3dlcgoqICAgICAgICAgIHRyaWFuZ3VsYXIgcGFydCBvZiB0aGUgbWF0cml4\nIEEsIGFuZCB0aGUgc3RyaWN0bHkgdXBwZXIKKiAgICAgICAgICB0cmlhbmd1bGFyIHBhcnQgb2Yg\nQSBpcyBub3QgcmVmZXJlbmNlZC4KKgoqICAgICAgICAgIE9uIGV4aXQsIGlmIElORk8gPSAwLCB0\naGUgZmFjdG9yIFUgb3IgTCBmcm9tIHRoZSBDaG9sZXNreQoqICAgICAgICAgIGZhY3Rvcml6YXRp\nb24gQSA9IFUqKlQqVSBvciBBID0gTCpMKipULgoqCiogIExEQSAgICAgKGlucHV0KSBJTlRFR0VS\nCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBBLiAgTERBID49\nIG1heCgxLE4pLgoqCiogIElORk8gICAgKG91dHB1dCkgSU5URUdFUgoqICAgICAgICAgID0gMDog\nIHN1Y2Nlc3NmdWwgZXhpdAoqICAgICAgICAgIDwgMDogIGlmIElORk8gPSAtaSwgdGhlIGktdGgg\nYXJndW1lbnQgaGFkIGFuIGlsbGVnYWwgdmFsdWUKKiAgICAgICAgICA+IDA6ICBpZiBJTkZPID0g\naSwgdGhlIGxlYWRpbmcgbWlub3Igb2Ygb3JkZXIgaSBpcyBub3QKKiAgICAgICAgICAgICAgICBw\nb3NpdGl2ZSBkZWZpbml0ZSwgYW5kIHRoZSBmYWN0b3JpemF0aW9uIGNvdWxkIG5vdCBiZQoqICAg\nICAgICAgICAgICAgIGNvbXBsZXRlZC4KKgpyEwEAAGiYaJkpgXIUAQAAfXIVAQAAKGiciWidaJ51\nYmipigLqAGiqWA4AAABkcG90cmZfMjM0LnR4dHIWAQAAdWJorIoC6gBorVgFAAAAcG90cmZyFwEA\nAGipigEOdWJoj2hmXWiQh1JyGAEAAH1yGQEAAChok1gDAAAAU1BEchoBAABolVgGAAAAcGFja2Vk\nchsBAABod1hMAAAAY29tcHV0ZXMgdGhlIENob2xlc2t5IGZhY3Rvcml6YXRpb24gb2YgYW4gU1BE\nIG1hdHJpeCBzdG9yZWQgaW4gcGFja2VkIGZvcm1hdHIcAQAAaJhomSmBch0BAAB9ch4BAAAoaJyJ\naJ1onnViaJ9YLAAAAGh0dHA6Ly93d3cubmV0bGliLm9yZy9sYXBhY2svc2luZ2xlL3NwcHRyZi5m\nch8BAABohFgBAAAAc2ihaI9ool1okIdSciABAAB9ciEBAAAoaKVYqAcAACAgICAgIFNVQlJPVVRJ\nTkUgU1BQVFJGKCBVUExPLCBOLCBBUCwgSU5GTyApCioKKiAgLS0gTEFQQUNLIHJvdXRpbmUgKHZl\ncnNpb24gMy4zLjEpIC0tCiogIC0tIExBUEFDSyBpcyBhIHNvZnR3YXJlIHBhY2thZ2UgcHJvdmlk\nZWQgYnkgVW5pdi4gb2YgVGVubmVzc2VlLCAgICAtLQoqICAtLSBVbml2LiBvZiBDYWxpZm9ybmlh\nIEJlcmtlbGV5LCBVbml2LiBvZiBDb2xvcmFkbyBEZW52ZXIgYW5kIE5BRyBMdGQuLi0tCiogIC0t\nIEFwcmlsIDIwMTEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAtLQoqCiogICAgIC4uIFNjYWxhciBBcmd1bWVudHMgLi4KICAgICAgQ0hBUkFDVEVS\nICAgICAgICAgIFVQTE8KICAgICAgSU5URUdFUiAgICAgICAgICAgIElORk8sIE4KKiAgICAgLi4K\nKiAgICAgLi4gQXJyYXkgQXJndW1lbnRzIC4uCiAgICAgIFJFQUwgICAgICAgICAgICAgICBBUCgg\nKiApCiogICAgIC4uCioKKiAgUHVycG9zZQoqICA9PT09PT09CioKKiAgU1BQVFJGIGNvbXB1dGVz\nIHRoZSBDaG9sZXNreSBmYWN0b3JpemF0aW9uIG9mIGEgcmVhbCBzeW1tZXRyaWMKKiAgcG9zaXRp\ndmUgZGVmaW5pdGUgbWF0cml4IEEgc3RvcmVkIGluIHBhY2tlZCBmb3JtYXQuCioKKiAgVGhlIGZh\nY3Rvcml6YXRpb24gaGFzIHRoZSBmb3JtCiogICAgIEEgPSBVKipUICogVSwgIGlmIFVQTE8gPSAn\nVScsIG9yCiogICAgIEEgPSBMICAqIEwqKlQsICBpZiBVUExPID0gJ0wnLAoqICB3aGVyZSBVIGlz\nIGFuIHVwcGVyIHRyaWFuZ3VsYXIgbWF0cml4IGFuZCBMIGlzIGxvd2VyIHRyaWFuZ3VsYXIuCioK\nKiAgQXJndW1lbnRzCiogID09PT09PT09PQoqCiogIFVQTE8gICAgKGlucHV0KSBDSEFSQUNURVIq\nMQoqICAgICAgICAgID0gJ1UnOiAgVXBwZXIgdHJpYW5nbGUgb2YgQSBpcyBzdG9yZWQ7CiogICAg\nICAgICAgPSAnTCc6ICBMb3dlciB0cmlhbmdsZSBvZiBBIGlzIHN0b3JlZC4KKgoqICBOICAgICAg\nIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBvcmRlciBvZiB0aGUgbWF0cml4IEEuICBO\nID49IDAuCioKKiAgQVAgICAgICAoaW5wdXQvb3V0cHV0KSBSRUFMIGFycmF5LCBkaW1lbnNpb24g\nKE4qKE4rMSkvMikKKiAgICAgICAgICBPbiBlbnRyeSwgdGhlIHVwcGVyIG9yIGxvd2VyIHRyaWFu\nZ2xlIG9mIHRoZSBzeW1tZXRyaWMgbWF0cml4CiogICAgICAgICAgQSwgcGFja2VkIGNvbHVtbndp\nc2UgaW4gYSBsaW5lYXIgYXJyYXkuICBUaGUgai10aCBjb2x1bW4gb2YgQQoqICAgICAgICAgIGlz\nIHN0b3JlZCBpbiB0aGUgYXJyYXkgQVAgYXMgZm9sbG93czoKKiAgICAgICAgICBpZiBVUExPID0g\nJ1UnLCBBUChpICsgKGotMSkqai8yKSA9IEEoaSxqKSBmb3IgMTw9aTw9ajsKKiAgICAgICAgICBp\nZiBVUExPID0gJ0wnLCBBUChpICsgKGotMSkqKDJuLWopLzIpID0gQShpLGopIGZvciBqPD1pPD1u\nLgoqICAgICAgICAgIFNlZSBiZWxvdyBmb3IgZnVydGhlciBkZXRhaWxzLgoqCiogICAgICAgICAg\nT24gZXhpdCwgaWYgSU5GTyA9IDAsIHRoZSB0cmlhbmd1bGFyIGZhY3RvciBVIG9yIEwgZnJvbSB0\naGUKKiAgICAgICAgICBDaG9sZXNreSBmYWN0b3JpemF0aW9uIEEgPSBVKipUKlUgb3IgQSA9IEwq\nTCoqVCwgaW4gdGhlIHNhbWUKKiAgICAgICAgICBzdG9yYWdlIGZvcm1hdCBhcyBBLgoqCiogIElO\nRk8gICAgKG91dHB1dCkgSU5URUdFUgoqICAgICAgICAgID0gMDogIHN1Y2Nlc3NmdWwgZXhpdAoq\nICAgICAgICAgIDwgMDogIGlmIElORk8gPSAtaSwgdGhlIGktdGggYXJndW1lbnQgaGFkIGFuIGls\nbGVnYWwgdmFsdWUKKiAgICAgICAgICA+IDA6ICBpZiBJTkZPID0gaSwgdGhlIGxlYWRpbmcgbWlu\nb3Igb2Ygb3JkZXIgaSBpcyBub3QKKiAgICAgICAgICAgICAgICBwb3NpdGl2ZSBkZWZpbml0ZSwg\nYW5kIHRoZSBmYWN0b3JpemF0aW9uIGNvdWxkIG5vdCBiZQoqICAgICAgICAgICAgICAgIGNvbXBs\nZXRlZC4KKgpyIgEAAGiYaJkpgXIjAQAAfXIkAQAAKGiciWidaJ51YmipigLtAGiqWA4AAABzcHB0\ncmZfMjM3LnR4dHIlAQAAdWJorIoC7QBorVgFAAAAcHB0cmZyJgEAAGipigERdWJoj2hmXWiQh1Jy\nJwEAAH1yKAEAAChok1gDAAAAU1BEcikBAABolVgGAAAAcGFja2VkcioBAABod1hMAAAAY29tcHV0\nZXMgdGhlIENob2xlc2t5IGZhY3Rvcml6YXRpb24gb2YgYW4gU1BEIG1hdHJpeCBzdG9yZWQgaW4g\ncGFja2VkIGZvcm1hdHIrAQAAaJhomSmBciwBAAB9ci0BAAAoaJyJaJ1onnViaJ9YLAAAAGh0dHA6\nLy93d3cubmV0bGliLm9yZy9sYXBhY2svZG91YmxlL2RwcHRyZi5mci4BAABohFgBAAAAZGihaI9o\nol1okIdSci8BAAB9cjABAAAoaKVYtAcAACAgICAgIFNVQlJPVVRJTkUgRFBQVFJGKCBVUExPLCBO\nLCBBUCwgSU5GTyApCioKKiAgLS0gTEFQQUNLIHJvdXRpbmUgKHZlcnNpb24gMy4zLjEpIC0tCiog\nIC0tIExBUEFDSyBpcyBhIHNvZnR3YXJlIHBhY2thZ2UgcHJvdmlkZWQgYnkgVW5pdi4gb2YgVGVu\nbmVzc2VlLCAgICAtLQoqICAtLSBVbml2LiBvZiBDYWxpZm9ybmlhIEJlcmtlbGV5LCBVbml2LiBv\nZiBDb2xvcmFkbyBEZW52ZXIgYW5kIE5BRyBMdGQuLi0tCiogIC0tIEFwcmlsIDIwMTEgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLQoqCiogICAg\nIC4uIFNjYWxhciBBcmd1bWVudHMgLi4KICAgICAgQ0hBUkFDVEVSICAgICAgICAgIFVQTE8KICAg\nICAgSU5URUdFUiAgICAgICAgICAgIElORk8sIE4KKiAgICAgLi4KKiAgICAgLi4gQXJyYXkgQXJn\ndW1lbnRzIC4uCiAgICAgIERPVUJMRSBQUkVDSVNJT04gICBBUCggKiApCiogICAgIC4uCioKKiAg\nUHVycG9zZQoqICA9PT09PT09CioKKiAgRFBQVFJGIGNvbXB1dGVzIHRoZSBDaG9sZXNreSBmYWN0\nb3JpemF0aW9uIG9mIGEgcmVhbCBzeW1tZXRyaWMKKiAgcG9zaXRpdmUgZGVmaW5pdGUgbWF0cml4\nIEEgc3RvcmVkIGluIHBhY2tlZCBmb3JtYXQuCioKKiAgVGhlIGZhY3Rvcml6YXRpb24gaGFzIHRo\nZSBmb3JtCiogICAgIEEgPSBVKipUICogVSwgIGlmIFVQTE8gPSAnVScsIG9yCiogICAgIEEgPSBM\nICAqIEwqKlQsICBpZiBVUExPID0gJ0wnLAoqICB3aGVyZSBVIGlzIGFuIHVwcGVyIHRyaWFuZ3Vs\nYXIgbWF0cml4IGFuZCBMIGlzIGxvd2VyIHRyaWFuZ3VsYXIuCioKKiAgQXJndW1lbnRzCiogID09\nPT09PT09PQoqCiogIFVQTE8gICAgKGlucHV0KSBDSEFSQUNURVIqMQoqICAgICAgICAgID0gJ1Un\nOiAgVXBwZXIgdHJpYW5nbGUgb2YgQSBpcyBzdG9yZWQ7CiogICAgICAgICAgPSAnTCc6ICBMb3dl\nciB0cmlhbmdsZSBvZiBBIGlzIHN0b3JlZC4KKgoqICBOICAgICAgIChpbnB1dCkgSU5URUdFUgoq\nICAgICAgICAgIFRoZSBvcmRlciBvZiB0aGUgbWF0cml4IEEuICBOID49IDAuCioKKiAgQVAgICAg\nICAoaW5wdXQvb3V0cHV0KSBET1VCTEUgUFJFQ0lTSU9OIGFycmF5LCBkaW1lbnNpb24gKE4qKE4r\nMSkvMikKKiAgICAgICAgICBPbiBlbnRyeSwgdGhlIHVwcGVyIG9yIGxvd2VyIHRyaWFuZ2xlIG9m\nIHRoZSBzeW1tZXRyaWMgbWF0cml4CiogICAgICAgICAgQSwgcGFja2VkIGNvbHVtbndpc2UgaW4g\nYSBsaW5lYXIgYXJyYXkuICBUaGUgai10aCBjb2x1bW4gb2YgQQoqICAgICAgICAgIGlzIHN0b3Jl\nZCBpbiB0aGUgYXJyYXkgQVAgYXMgZm9sbG93czoKKiAgICAgICAgICBpZiBVUExPID0gJ1UnLCBB\nUChpICsgKGotMSkqai8yKSA9IEEoaSxqKSBmb3IgMTw9aTw9ajsKKiAgICAgICAgICBpZiBVUExP\nID0gJ0wnLCBBUChpICsgKGotMSkqKDJuLWopLzIpID0gQShpLGopIGZvciBqPD1pPD1uLgoqICAg\nICAgICAgIFNlZSBiZWxvdyBmb3IgZnVydGhlciBkZXRhaWxzLgoqCiogICAgICAgICAgT24gZXhp\ndCwgaWYgSU5GTyA9IDAsIHRoZSB0cmlhbmd1bGFyIGZhY3RvciBVIG9yIEwgZnJvbSB0aGUKKiAg\nICAgICAgICBDaG9sZXNreSBmYWN0b3JpemF0aW9uIEEgPSBVKipUKlUgb3IgQSA9IEwqTCoqVCwg\naW4gdGhlIHNhbWUKKiAgICAgICAgICBzdG9yYWdlIGZvcm1hdCBhcyBBLgoqCiogIElORk8gICAg\nKG91dHB1dCkgSU5URUdFUgoqICAgICAgICAgID0gMDogIHN1Y2Nlc3NmdWwgZXhpdAoqICAgICAg\nICAgIDwgMDogIGlmIElORk8gPSAtaSwgdGhlIGktdGggYXJndW1lbnQgaGFkIGFuIGlsbGVnYWwg\ndmFsdWUKKiAgICAgICAgICA+IDA6ICBpZiBJTkZPID0gaSwgdGhlIGxlYWRpbmcgbWlub3Igb2Yg\nb3JkZXIgaSBpcyBub3QKKiAgICAgICAgICAgICAgICBwb3NpdGl2ZSBkZWZpbml0ZSwgYW5kIHRo\nZSBmYWN0b3JpemF0aW9uIGNvdWxkIG5vdCBiZQoqICAgICAgICAgICAgICAgIGNvbXBsZXRlZC4K\nKgpyMQEAAGiYaJkpgXIyAQAAfXIzAQAAKGiciWidaJ51YmipigLuAGiqWA4AAABkcHB0cmZfMjM4\nLnR4dHI0AQAAdWJorIoC7gBorVgFAAAAcHB0cmZyNQEAAGipigESdWJoj2hmXWiQh1JyNgEAAH1y\nNwEAAChok1gDAAAAU1BEcjgBAABolVgEAAAAYmFuZHI5AQAAaHdYOQAAAGNvbXB1dGVzIHRoZSBD\naG9sZXNreSBmYWN0b3JpemF0aW9uIG9mIGFuIFNQRCBiYW5kIG1hdHJpeHI6AQAAaJhomSmBcjsB\nAAB9cjwBAAAoaJyJaJ1onnViaJ9YLAAAAGh0dHA6Ly93d3cubmV0bGliLm9yZy9sYXBhY2svc2lu\nZ2xlL3NwYnRyZi5mcj0BAABohFgBAAAAc2ihaI9ool1okIdScj4BAAB9cj8BAAAoaKVYlwgAACAg\nICAgIFNVQlJPVVRJTkUgU1BCVFJGKCBVUExPLCBOLCBLRCwgQUIsIExEQUIsIElORk8gKQoqCiog\nIC0tIExBUEFDSyByb3V0aW5lICh2ZXJzaW9uIDMuMikgLS0KKiAgLS0gTEFQQUNLIGlzIGEgc29m\ndHdhcmUgcGFja2FnZSBwcm92aWRlZCBieSBVbml2LiBvZiBUZW5uZXNzZWUsICAgIC0tCiogIC0t\nIFVuaXYuIG9mIENhbGlmb3JuaWEgQmVya2VsZXksIFVuaXYuIG9mIENvbG9yYWRvIERlbnZlciBh\nbmQgTkFHIEx0ZC4uLS0KKiAgICAgTm92ZW1iZXIgMjAwNgoqCiogICAgIC4uIFNjYWxhciBBcmd1\nbWVudHMgLi4KICAgICAgQ0hBUkFDVEVSICAgICAgICAgIFVQTE8KICAgICAgSU5URUdFUiAgICAg\nICAgICAgIElORk8sIEtELCBMREFCLCBOCiogICAgIC4uCiogICAgIC4uIEFycmF5IEFyZ3VtZW50\ncyAuLgogICAgICBSRUFMICAgICAgICAgICAgICAgQUIoIExEQUIsICogKQoqICAgICAuLgoqCiog\nIFB1cnBvc2UKKiAgPT09PT09PQoqCiogIFNQQlRSRiBjb21wdXRlcyB0aGUgQ2hvbGVza3kgZmFj\ndG9yaXphdGlvbiBvZiBhIHJlYWwgc3ltbWV0cmljCiogIHBvc2l0aXZlIGRlZmluaXRlIGJhbmQg\nbWF0cml4IEEuCioKKiAgVGhlIGZhY3Rvcml6YXRpb24gaGFzIHRoZSBmb3JtCiogICAgIEEgPSBV\nKipUICogVSwgIGlmIFVQTE8gPSAnVScsIG9yCiogICAgIEEgPSBMICAqIEwqKlQsICBpZiBVUExP\nID0gJ0wnLAoqICB3aGVyZSBVIGlzIGFuIHVwcGVyIHRyaWFuZ3VsYXIgbWF0cml4IGFuZCBMIGlz\nIGxvd2VyIHRyaWFuZ3VsYXIuCioKKiAgQXJndW1lbnRzCiogID09PT09PT09PQoqCiogIFVQTE8g\nICAgKGlucHV0KSBDSEFSQUNURVIqMQoqICAgICAgICAgID0gJ1UnOiAgVXBwZXIgdHJpYW5nbGUg\nb2YgQSBpcyBzdG9yZWQ7CiogICAgICAgICAgPSAnTCc6ICBMb3dlciB0cmlhbmdsZSBvZiBBIGlz\nIHN0b3JlZC4KKgoqICBOICAgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBvcmRl\nciBvZiB0aGUgbWF0cml4IEEuICBOID49IDAuCioKKiAgS0QgICAgICAoaW5wdXQpIElOVEVHRVIK\nKiAgICAgICAgICBUaGUgbnVtYmVyIG9mIHN1cGVyZGlhZ29uYWxzIG9mIHRoZSBtYXRyaXggQSBp\nZiBVUExPID0gJ1UnLAoqICAgICAgICAgIG9yIHRoZSBudW1iZXIgb2Ygc3ViZGlhZ29uYWxzIGlm\nIFVQTE8gPSAnTCcuICBLRCA+PSAwLgoqCiogIEFCICAgICAgKGlucHV0L291dHB1dCkgUkVBTCBh\ncnJheSwgZGltZW5zaW9uIChMREFCLE4pCiogICAgICAgICAgT24gZW50cnksIHRoZSB1cHBlciBv\nciBsb3dlciB0cmlhbmdsZSBvZiB0aGUgc3ltbWV0cmljIGJhbmQKKiAgICAgICAgICBtYXRyaXgg\nQSwgc3RvcmVkIGluIHRoZSBmaXJzdCBLRCsxIHJvd3Mgb2YgdGhlIGFycmF5LiAgVGhlCiogICAg\nICAgICAgai10aCBjb2x1bW4gb2YgQSBpcyBzdG9yZWQgaW4gdGhlIGotdGggY29sdW1uIG9mIHRo\nZSBhcnJheSBBQgoqICAgICAgICAgIGFzIGZvbGxvd3M6CiogICAgICAgICAgaWYgVVBMTyA9ICdV\nJywgQUIoa2QrMStpLWosaikgPSBBKGksaikgZm9yIG1heCgxLGota2QpPD1pPD1qOwoqICAgICAg\nICAgIGlmIFVQTE8gPSAnTCcsIEFCKDEraS1qLGopICAgID0gQShpLGopIGZvciBqPD1pPD1taW4o\nbixqK2tkKS4KKgoqICAgICAgICAgIE9uIGV4aXQsIGlmIElORk8gPSAwLCB0aGUgdHJpYW5ndWxh\nciBmYWN0b3IgVSBvciBMIGZyb20gdGhlCiogICAgICAgICAgQ2hvbGVza3kgZmFjdG9yaXphdGlv\nbiBBID0gVSoqVCpVIG9yIEEgPSBMKkwqKlQgb2YgdGhlIGJhbmQKKiAgICAgICAgICBtYXRyaXgg\nQSwgaW4gdGhlIHNhbWUgc3RvcmFnZSBmb3JtYXQgYXMgQS4KKgoqICBMREFCICAgIChpbnB1dCkg\nSU5URUdFUgoqICAgICAgICAgIFRoZSBsZWFkaW5nIGRpbWVuc2lvbiBvZiB0aGUgYXJyYXkgQUIu\nICBMREFCID49IEtEKzEuCioKKiAgSU5GTyAgICAob3V0cHV0KSBJTlRFR0VSCiogICAgICAgICAg\nPSAwOiAgc3VjY2Vzc2Z1bCBleGl0CiogICAgICAgICAgPCAwOiAgaWYgSU5GTyA9IC1pLCB0aGUg\naS10aCBhcmd1bWVudCBoYWQgYW4gaWxsZWdhbCB2YWx1ZQoqICAgICAgICAgID4gMDogIGlmIElO\nRk8gPSBpLCB0aGUgbGVhZGluZyBtaW5vciBvZiBvcmRlciBpIGlzIG5vdAoqICAgICAgICAgICAg\nICAgIHBvc2l0aXZlIGRlZmluaXRlLCBhbmQgdGhlIGZhY3Rvcml6YXRpb24gY291bGQgbm90IGJl\nCiogICAgICAgICAgICAgICAgY29tcGxldGVkLgoqCnJAAQAAaJhomSmBckEBAAB9ckIBAAAoaJyJ\naJ1onnViaKmKAvEAaKpYDgAAAHNwYnRyZl8yNDEudHh0ckMBAAB1YmisigLxAGitWAUAAABwYnRy\nZnJEAQAAaKmKARV1YmiPaGZdaJCHUnJFAQAAfXJGAQAAKGiTWAMAAABTUERyRwEAAGiVWAQAAABi\nYW5kckgBAABod1g5AAAAY29tcHV0ZXMgdGhlIENob2xlc2t5IGZhY3Rvcml6YXRpb24gb2YgYW4g\nU1BEIGJhbmQgbWF0cml4ckkBAABomGiZKYFySgEAAH1ySwEAAChonIlonWiedWJon1gsAAAAaHR0\ncDovL3d3dy5uZXRsaWIub3JnL2xhcGFjay9kb3VibGUvZHBidHJmLmZyTAEAAGiEWAEAAABkaKFo\nj2iiXWiQh1JyTQEAAH1yTgEAAChopVijCAAAICAgICAgU1VCUk9VVElORSBEUEJUUkYoIFVQTE8s\nIE4sIEtELCBBQiwgTERBQiwgSU5GTyApCioKKiAgLS0gTEFQQUNLIHJvdXRpbmUgKHZlcnNpb24g\nMy4yKSAtLQoqICAtLSBMQVBBQ0sgaXMgYSBzb2Z0d2FyZSBwYWNrYWdlIHByb3ZpZGVkIGJ5IFVu\naXYuIG9mIFRlbm5lc3NlZSwgICAgLS0KKiAgLS0gVW5pdi4gb2YgQ2FsaWZvcm5pYSBCZXJrZWxl\neSwgVW5pdi4gb2YgQ29sb3JhZG8gRGVudmVyIGFuZCBOQUcgTHRkLi4tLQoqICAgICBOb3ZlbWJl\nciAyMDA2CioKKiAgICAgLi4gU2NhbGFyIEFyZ3VtZW50cyAuLgogICAgICBDSEFSQUNURVIgICAg\nICAgICAgVVBMTwogICAgICBJTlRFR0VSICAgICAgICAgICAgSU5GTywgS0QsIExEQUIsIE4KKiAg\nICAgLi4KKiAgICAgLi4gQXJyYXkgQXJndW1lbnRzIC4uCiAgICAgIERPVUJMRSBQUkVDSVNJT04g\nICBBQiggTERBQiwgKiApCiogICAgIC4uCioKKiAgUHVycG9zZQoqICA9PT09PT09CioKKiAgRFBC\nVFJGIGNvbXB1dGVzIHRoZSBDaG9sZXNreSBmYWN0b3JpemF0aW9uIG9mIGEgcmVhbCBzeW1tZXRy\naWMKKiAgcG9zaXRpdmUgZGVmaW5pdGUgYmFuZCBtYXRyaXggQS4KKgoqICBUaGUgZmFjdG9yaXph\ndGlvbiBoYXMgdGhlIGZvcm0KKiAgICAgQSA9IFUqKlQgKiBVLCAgaWYgVVBMTyA9ICdVJywgb3IK\nKiAgICAgQSA9IEwgICogTCoqVCwgIGlmIFVQTE8gPSAnTCcsCiogIHdoZXJlIFUgaXMgYW4gdXBw\nZXIgdHJpYW5ndWxhciBtYXRyaXggYW5kIEwgaXMgbG93ZXIgdHJpYW5ndWxhci4KKgoqICBBcmd1\nbWVudHMKKiAgPT09PT09PT09CioKKiAgVVBMTyAgICAoaW5wdXQpIENIQVJBQ1RFUioxCiogICAg\nICAgICAgPSAnVSc6ICBVcHBlciB0cmlhbmdsZSBvZiBBIGlzIHN0b3JlZDsKKiAgICAgICAgICA9\nICdMJzogIExvd2VyIHRyaWFuZ2xlIG9mIEEgaXMgc3RvcmVkLgoqCiogIE4gICAgICAgKGlucHV0\nKSBJTlRFR0VSCiogICAgICAgICAgVGhlIG9yZGVyIG9mIHRoZSBtYXRyaXggQS4gIE4gPj0gMC4K\nKgoqICBLRCAgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2Ygc3Vw\nZXJkaWFnb25hbHMgb2YgdGhlIG1hdHJpeCBBIGlmIFVQTE8gPSAnVScsCiogICAgICAgICAgb3Ig\ndGhlIG51bWJlciBvZiBzdWJkaWFnb25hbHMgaWYgVVBMTyA9ICdMJy4gIEtEID49IDAuCioKKiAg\nQUIgICAgICAoaW5wdXQvb3V0cHV0KSBET1VCTEUgUFJFQ0lTSU9OIGFycmF5LCBkaW1lbnNpb24g\nKExEQUIsTikKKiAgICAgICAgICBPbiBlbnRyeSwgdGhlIHVwcGVyIG9yIGxvd2VyIHRyaWFuZ2xl\nIG9mIHRoZSBzeW1tZXRyaWMgYmFuZAoqICAgICAgICAgIG1hdHJpeCBBLCBzdG9yZWQgaW4gdGhl\nIGZpcnN0IEtEKzEgcm93cyBvZiB0aGUgYXJyYXkuICBUaGUKKiAgICAgICAgICBqLXRoIGNvbHVt\nbiBvZiBBIGlzIHN0b3JlZCBpbiB0aGUgai10aCBjb2x1bW4gb2YgdGhlIGFycmF5IEFCCiogICAg\nICAgICAgYXMgZm9sbG93czoKKiAgICAgICAgICBpZiBVUExPID0gJ1UnLCBBQihrZCsxK2ktaixq\nKSA9IEEoaSxqKSBmb3IgbWF4KDEsai1rZCk8PWk8PWo7CiogICAgICAgICAgaWYgVVBMTyA9ICdM\nJywgQUIoMStpLWosaikgICAgPSBBKGksaikgZm9yIGo8PWk8PW1pbihuLGora2QpLgoqCiogICAg\nICAgICAgT24gZXhpdCwgaWYgSU5GTyA9IDAsIHRoZSB0cmlhbmd1bGFyIGZhY3RvciBVIG9yIEwg\nZnJvbSB0aGUKKiAgICAgICAgICBDaG9sZXNreSBmYWN0b3JpemF0aW9uIEEgPSBVKipUKlUgb3Ig\nQSA9IEwqTCoqVCBvZiB0aGUgYmFuZAoqICAgICAgICAgIG1hdHJpeCBBLCBpbiB0aGUgc2FtZSBz\ndG9yYWdlIGZvcm1hdCBhcyBBLgoqCiogIExEQUIgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAg\nICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBBQi4gIExEQUIgPj0gS0QrMS4K\nKgoqICBJTkZPICAgIChvdXRwdXQpIElOVEVHRVIKKiAgICAgICAgICA9IDA6ICBzdWNjZXNzZnVs\nIGV4aXQKKiAgICAgICAgICA8IDA6ICBpZiBJTkZPID0gLWksIHRoZSBpLXRoIGFyZ3VtZW50IGhh\nZCBhbiBpbGxlZ2FsIHZhbHVlCiogICAgICAgICAgPiAwOiAgaWYgSU5GTyA9IGksIHRoZSBsZWFk\naW5nIG1pbm9yIG9mIG9yZGVyIGkgaXMgbm90CiogICAgICAgICAgICAgICAgcG9zaXRpdmUgZGVm\naW5pdGUsIGFuZCB0aGUgZmFjdG9yaXphdGlvbiBjb3VsZCBub3QgYmUKKiAgICAgICAgICAgICAg\nICBjb21wbGV0ZWQuCioKck8BAABomGiZKYFyUAEAAH1yUQEAAChonIlonWiedWJoqYoC8gBoqlgO\nAAAAZHBidHJmXzI0Mi50eHRyUgEAAHViaKyKAvIAaK1YBQAAAHBidHJmclMBAABoqYoBFnViaI9o\nZl1okIdSclQBAAB9clUBAAAoaJNYAwAAAFNQRHJWAQAAaJVYCwAAAHRyaWRpYWdvbmFsclcBAABo\nd1hAAAAAY29tcHV0ZXMgdGhlIEwqRCpMKipUIGZhY3Rvcml6YXRpb24gb2YgYW4gU1BEIHRyaWRp\nYWdvbmFsIG1hdHJpeHJYAQAAaJhomSmBclkBAAB9cloBAAAoaJyJaJ1onnViaJ9YLAAAAGh0dHA6\nLy93d3cubmV0bGliLm9yZy9sYXBhY2svc2luZ2xlL3NwdHRyZi5mclsBAABohFgBAAAAc2ihaI9o\nol1okIdSclwBAAB9cl0BAAAoaKVYDQcAACAgICAgIFNVQlJPVVRJTkUgU1BUVFJGKCBOLCBELCBF\nLCBJTkZPICkKKgoqICAtLSBMQVBBQ0sgcm91dGluZSAodmVyc2lvbiAzLjMuMSkgLS0KKiAgLS0g\nTEFQQUNLIGlzIGEgc29mdHdhcmUgcGFja2FnZSBwcm92aWRlZCBieSBVbml2LiBvZiBUZW5uZXNz\nZWUsICAgIC0tCiogIC0tIFVuaXYuIG9mIENhbGlmb3JuaWEgQmVya2VsZXksIFVuaXYuIG9mIENv\nbG9yYWRvIERlbnZlciBhbmQgTkFHIEx0ZC4uLS0KKiAgLS0gQXByaWwgMjAxMSAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tCioKKiAgICAgLi4g\nU2NhbGFyIEFyZ3VtZW50cyAuLgogICAgICBJTlRFR0VSICAgICAgICAgICAgSU5GTywgTgoqICAg\nICAuLgoqICAgICAuLiBBcnJheSBBcmd1bWVudHMgLi4KICAgICAgUkVBTCAgICAgICAgICAgICAg\nIEQoICogKSwgRSggKiApCiogICAgIC4uCioKKiAgUHVycG9zZQoqICA9PT09PT09CioKKiAgU1BU\nVFJGIGNvbXB1dGVzIHRoZSBMKkQqTCoqVCBmYWN0b3JpemF0aW9uIG9mIGEgcmVhbCBzeW1tZXRy\naWMKKiAgcG9zaXRpdmUgZGVmaW5pdGUgdHJpZGlhZ29uYWwgbWF0cml4IEEuICBUaGUgZmFjdG9y\naXphdGlvbiBtYXkgYWxzbwoqICBiZSByZWdhcmRlZCBhcyBoYXZpbmcgdGhlIGZvcm0gQSA9IFUq\nKlQqRCpVLgoqCiogIEFyZ3VtZW50cwoqICA9PT09PT09PT0KKgoqICBOICAgICAgIChpbnB1dCkg\nSU5URUdFUgoqICAgICAgICAgIFRoZSBvcmRlciBvZiB0aGUgbWF0cml4IEEuICBOID49IDAuCioK\nKiAgRCAgICAgICAoaW5wdXQvb3V0cHV0KSBSRUFMIGFycmF5LCBkaW1lbnNpb24gKE4pCiogICAg\nICAgICAgT24gZW50cnksIHRoZSBuIGRpYWdvbmFsIGVsZW1lbnRzIG9mIHRoZSB0cmlkaWFnb25h\nbCBtYXRyaXgKKiAgICAgICAgICBBLiAgT24gZXhpdCwgdGhlIG4gZGlhZ29uYWwgZWxlbWVudHMg\nb2YgdGhlIGRpYWdvbmFsIG1hdHJpeAoqICAgICAgICAgIEQgZnJvbSB0aGUgTCpEKkwqKlQgZmFj\ndG9yaXphdGlvbiBvZiBBLgoqCiogIEUgICAgICAgKGlucHV0L291dHB1dCkgUkVBTCBhcnJheSwg\nZGltZW5zaW9uIChOLTEpCiogICAgICAgICAgT24gZW50cnksIHRoZSAobi0xKSBzdWJkaWFnb25h\nbCBlbGVtZW50cyBvZiB0aGUgdHJpZGlhZ29uYWwKKiAgICAgICAgICBtYXRyaXggQS4gIE9uIGV4\naXQsIHRoZSAobi0xKSBzdWJkaWFnb25hbCBlbGVtZW50cyBvZiB0aGUKKiAgICAgICAgICB1bml0\nIGJpZGlhZ29uYWwgZmFjdG9yIEwgZnJvbSB0aGUgTCpEKkwqKlQgZmFjdG9yaXphdGlvbiBvZiBB\nLgoqICAgICAgICAgIEUgY2FuIGFsc28gYmUgcmVnYXJkZWQgYXMgdGhlIHN1cGVyZGlhZ29uYWwg\nb2YgdGhlIHVuaXQKKiAgICAgICAgICBiaWRpYWdvbmFsIGZhY3RvciBVIGZyb20gdGhlIFUqKlQq\nRCpVIGZhY3Rvcml6YXRpb24gb2YgQS4KKgoqICBJTkZPICAgIChvdXRwdXQpIElOVEVHRVIKKiAg\nICAgICAgICA9IDA6IHN1Y2Nlc3NmdWwgZXhpdAoqICAgICAgICAgIDwgMDogaWYgSU5GTyA9IC1r\nLCB0aGUgay10aCBhcmd1bWVudCBoYWQgYW4gaWxsZWdhbCB2YWx1ZQoqICAgICAgICAgID4gMDog\naWYgSU5GTyA9IGssIHRoZSBsZWFkaW5nIG1pbm9yIG9mIG9yZGVyIGsgaXMgbm90CiogICAgICAg\nICAgICAgICBwb3NpdGl2ZSBkZWZpbml0ZTsgaWYgayA8IE4sIHRoZSBmYWN0b3JpemF0aW9uIGNv\ndWxkIG5vdAoqICAgICAgICAgICAgICAgYmUgY29tcGxldGVkLCB3aGlsZSBpZiBrID0gTiwgdGhl\nIGZhY3Rvcml6YXRpb24gd2FzCiogICAgICAgICAgICAgICBjb21wbGV0ZWQsIGJ1dCBEKE4pIDw9\nIDAuCioKcl4BAABomGiZKYFyXwEAAH1yYAEAAChonIlonWiedWJoqYoC9QBoqlgOAAAAc3B0dHJm\nXzI0NS50eHRyYQEAAHViaKyKAvUAaK1YBQAAAHB0dHJmcmIBAABoqYoBGXViaI9oZl1okIdScmMB\nAAB9cmQBAAAoaJNYAwAAAFNQRHJlAQAAaJVYCwAAAHRyaWRpYWdvbmFscmYBAABod1hAAAAAY29t\ncHV0ZXMgdGhlIEwqRCpMKipUIGZhY3Rvcml6YXRpb24gb2YgYW4gU1BEIHRyaWRpYWdvbmFsIG1h\ndHJpeHJnAQAAaJhomSmBcmgBAAB9cmkBAAAoaJyJaJ1onnViaJ9YLAAAAGh0dHA6Ly93d3cubmV0\nbGliLm9yZy9sYXBhY2svZG91YmxlL2RwdHRyZi5mcmoBAABohFgBAAAAZGihaI9ool1okIdScmsB\nAAB9cmwBAAAoaKVYJQcAACAgICAgIFNVQlJPVVRJTkUgRFBUVFJGKCBOLCBELCBFLCBJTkZPICkK\nKgoqICAtLSBMQVBBQ0sgcm91dGluZSAodmVyc2lvbiAzLjMuMSkgLS0KKiAgLS0gTEFQQUNLIGlz\nIGEgc29mdHdhcmUgcGFja2FnZSBwcm92aWRlZCBieSBVbml2LiBvZiBUZW5uZXNzZWUsICAgIC0t\nCiogIC0tIFVuaXYuIG9mIENhbGlmb3JuaWEgQmVya2VsZXksIFVuaXYuIG9mIENvbG9yYWRvIERl\nbnZlciBhbmQgTkFHIEx0ZC4uLS0KKiAgLS0gQXByaWwgMjAxMSAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tCioKKiAgICAgLi4gU2NhbGFyIEFy\nZ3VtZW50cyAuLgogICAgICBJTlRFR0VSICAgICAgICAgICAgSU5GTywgTgoqICAgICAuLgoqICAg\nICAuLiBBcnJheSBBcmd1bWVudHMgLi4KICAgICAgRE9VQkxFIFBSRUNJU0lPTiAgIEQoICogKSwg\nRSggKiApCiogICAgIC4uCioKKiAgUHVycG9zZQoqICA9PT09PT09CioKKiAgRFBUVFJGIGNvbXB1\ndGVzIHRoZSBMKkQqTCoqVCBmYWN0b3JpemF0aW9uIG9mIGEgcmVhbCBzeW1tZXRyaWMKKiAgcG9z\naXRpdmUgZGVmaW5pdGUgdHJpZGlhZ29uYWwgbWF0cml4IEEuICBUaGUgZmFjdG9yaXphdGlvbiBt\nYXkgYWxzbwoqICBiZSByZWdhcmRlZCBhcyBoYXZpbmcgdGhlIGZvcm0gQSA9IFUqKlQqRCpVLgoq\nCiogIEFyZ3VtZW50cwoqICA9PT09PT09PT0KKgoqICBOICAgICAgIChpbnB1dCkgSU5URUdFUgoq\nICAgICAgICAgIFRoZSBvcmRlciBvZiB0aGUgbWF0cml4IEEuICBOID49IDAuCioKKiAgRCAgICAg\nICAoaW5wdXQvb3V0cHV0KSBET1VCTEUgUFJFQ0lTSU9OIGFycmF5LCBkaW1lbnNpb24gKE4pCiog\nICAgICAgICAgT24gZW50cnksIHRoZSBuIGRpYWdvbmFsIGVsZW1lbnRzIG9mIHRoZSB0cmlkaWFn\nb25hbCBtYXRyaXgKKiAgICAgICAgICBBLiAgT24gZXhpdCwgdGhlIG4gZGlhZ29uYWwgZWxlbWVu\ndHMgb2YgdGhlIGRpYWdvbmFsIG1hdHJpeAoqICAgICAgICAgIEQgZnJvbSB0aGUgTCpEKkwqKlQg\nZmFjdG9yaXphdGlvbiBvZiBBLgoqCiogIEUgICAgICAgKGlucHV0L291dHB1dCkgRE9VQkxFIFBS\nRUNJU0lPTiBhcnJheSwgZGltZW5zaW9uIChOLTEpCiogICAgICAgICAgT24gZW50cnksIHRoZSAo\nbi0xKSBzdWJkaWFnb25hbCBlbGVtZW50cyBvZiB0aGUgdHJpZGlhZ29uYWwKKiAgICAgICAgICBt\nYXRyaXggQS4gIE9uIGV4aXQsIHRoZSAobi0xKSBzdWJkaWFnb25hbCBlbGVtZW50cyBvZiB0aGUK\nKiAgICAgICAgICB1bml0IGJpZGlhZ29uYWwgZmFjdG9yIEwgZnJvbSB0aGUgTCpEKkwqKlQgZmFj\ndG9yaXphdGlvbiBvZiBBLgoqICAgICAgICAgIEUgY2FuIGFsc28gYmUgcmVnYXJkZWQgYXMgdGhl\nIHN1cGVyZGlhZ29uYWwgb2YgdGhlIHVuaXQKKiAgICAgICAgICBiaWRpYWdvbmFsIGZhY3RvciBV\nIGZyb20gdGhlIFUqKlQqRCpVIGZhY3Rvcml6YXRpb24gb2YgQS4KKgoqICBJTkZPICAgIChvdXRw\ndXQpIElOVEVHRVIKKiAgICAgICAgICA9IDA6IHN1Y2Nlc3NmdWwgZXhpdAoqICAgICAgICAgIDwg\nMDogaWYgSU5GTyA9IC1rLCB0aGUgay10aCBhcmd1bWVudCBoYWQgYW4gaWxsZWdhbCB2YWx1ZQoq\nICAgICAgICAgID4gMDogaWYgSU5GTyA9IGssIHRoZSBsZWFkaW5nIG1pbm9yIG9mIG9yZGVyIGsg\naXMgbm90CiogICAgICAgICAgICAgICBwb3NpdGl2ZSBkZWZpbml0ZTsgaWYgayA8IE4sIHRoZSBm\nYWN0b3JpemF0aW9uIGNvdWxkIG5vdAoqICAgICAgICAgICAgICAgYmUgY29tcGxldGVkLCB3aGls\nZSBpZiBrID0gTiwgdGhlIGZhY3Rvcml6YXRpb24gd2FzCiogICAgICAgICAgICAgICBjb21wbGV0\nZWQsIGJ1dCBEKE4pIDw9IDAuCioKcm0BAABomGiZKYFybgEAAH1ybwEAAChonIlonWiedWJoqYoC\n9gBoqlgOAAAAZHB0dHJmXzI0Ni50eHRycAEAAHViaKyKAvYAaK1YBQAAAHB0dHJmcnEBAABoqYoB\nGnViaI9oZl1okIdScnIBAAB9cnMBAAAoaJNYCQAAAHN5bW1ldHJpY3J0AQAAaJVYBAAAAGZ1bGxy\ndQEAAGh3WGYAAABjb21wdXRlcyB0aGUgZmFjdG9yaXphdGlvbiBvZiBhIHJlYWwgc3ltbWV0cmlj\nIG1hdHJpeCB1c2luZyB0aGUgQnVuY2gtS2F1Zm1hbiBkaWFnb25hbCBwaXZvdGluZyBtZXRob2Ry\ndgEAAGiYaJkpgXJ3AQAAfXJ4AQAAKGiciWidaJ51YmifWCwAAABodHRwOi8vd3d3Lm5ldGxpYi5v\ncmcvbGFwYWNrL3NpbmdsZS9zc3l0cmYuZnJ5AQAAaIRYAQAAAHNooWiPaKJdaJCHUnJ6AQAAfXJ7\nAQAAKGilWDEOAAAgICAgICBTVUJST1VUSU5FIFNTWVRSRiggVVBMTywgTiwgQSwgTERBLCBJUElW\nLCBXT1JLLCBMV09SSywgSU5GTyApCioKKiAgLS0gTEFQQUNLIHJvdXRpbmUgKHZlcnNpb24gMy4z\nLjEpIC0tCiogIC0tIExBUEFDSyBpcyBhIHNvZnR3YXJlIHBhY2thZ2UgcHJvdmlkZWQgYnkgVW5p\ndi4gb2YgVGVubmVzc2VlLCAgICAtLQoqICAtLSBVbml2LiBvZiBDYWxpZm9ybmlhIEJlcmtlbGV5\nLCBVbml2LiBvZiBDb2xvcmFkbyBEZW52ZXIgYW5kIE5BRyBMdGQuLi0tCiogIC0tIEFwcmlsIDIw\nMTEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAt\nLQoqCiogICAgIC4uIFNjYWxhciBBcmd1bWVudHMgLi4KICAgICAgQ0hBUkFDVEVSICAgICAgICAg\nIFVQTE8KICAgICAgSU5URUdFUiAgICAgICAgICAgIElORk8sIExEQSwgTFdPUkssIE4KKiAgICAg\nLi4KKiAgICAgLi4gQXJyYXkgQXJndW1lbnRzIC4uCiAgICAgIElOVEVHRVIgICAgICAgICAgICBJ\nUElWKCAqICkKICAgICAgUkVBTCAgICAgICAgICAgICAgIEEoIExEQSwgKiApLCBXT1JLKCAqICkK\nKiAgICAgLi4KKgoqICBQdXJwb3NlCiogID09PT09PT0KKgoqICBTU1lUUkYgY29tcHV0ZXMgdGhl\nIGZhY3Rvcml6YXRpb24gb2YgYSByZWFsIHN5bW1ldHJpYyBtYXRyaXggQSB1c2luZwoqICB0aGUg\nQnVuY2gtS2F1Zm1hbiBkaWFnb25hbCBwaXZvdGluZyBtZXRob2QuICBUaGUgZm9ybSBvZiB0aGUK\nKiAgZmFjdG9yaXphdGlvbiBpcwoqCiogICAgIEEgPSBVKkQqVSoqVCAgb3IgIEEgPSBMKkQqTCoq\nVAoqCiogIHdoZXJlIFUgKG9yIEwpIGlzIGEgcHJvZHVjdCBvZiBwZXJtdXRhdGlvbiBhbmQgdW5p\ndCB1cHBlciAobG93ZXIpCiogIHRyaWFuZ3VsYXIgbWF0cmljZXMsIGFuZCBEIGlzIHN5bW1ldHJp\nYyBhbmQgYmxvY2sgZGlhZ29uYWwgd2l0aCAKKiAgMS1ieS0xIGFuZCAyLWJ5LTIgZGlhZ29uYWwg\nYmxvY2tzLgoqCiogIFRoaXMgaXMgdGhlIGJsb2NrZWQgdmVyc2lvbiBvZiB0aGUgYWxnb3JpdGht\nLCBjYWxsaW5nIExldmVsIDMgQkxBUy4KKgoqICBBcmd1bWVudHMKKiAgPT09PT09PT09CioKKiAg\nVVBMTyAgICAoaW5wdXQpIENIQVJBQ1RFUioxCiogICAgICAgICAgPSAnVSc6ICBVcHBlciB0cmlh\nbmdsZSBvZiBBIGlzIHN0b3JlZDsKKiAgICAgICAgICA9ICdMJzogIExvd2VyIHRyaWFuZ2xlIG9m\nIEEgaXMgc3RvcmVkLgoqCiogIE4gICAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhl\nIG9yZGVyIG9mIHRoZSBtYXRyaXggQS4gIE4gPj0gMC4KKgoqICBBICAgICAgIChpbnB1dC9vdXRw\ndXQpIFJFQUwgYXJyYXksIGRpbWVuc2lvbiAoTERBLE4pCiogICAgICAgICAgT24gZW50cnksIHRo\nZSBzeW1tZXRyaWMgbWF0cml4IEEuICBJZiBVUExPID0gJ1UnLCB0aGUgbGVhZGluZwoqICAgICAg\nICAgIE4tYnktTiB1cHBlciB0cmlhbmd1bGFyIHBhcnQgb2YgQSBjb250YWlucyB0aGUgdXBwZXIK\nKiAgICAgICAgICB0cmlhbmd1bGFyIHBhcnQgb2YgdGhlIG1hdHJpeCBBLCBhbmQgdGhlIHN0cmlj\ndGx5IGxvd2VyCiogICAgICAgICAgdHJpYW5ndWxhciBwYXJ0IG9mIEEgaXMgbm90IHJlZmVyZW5j\nZWQuICBJZiBVUExPID0gJ0wnLCB0aGUKKiAgICAgICAgICBsZWFkaW5nIE4tYnktTiBsb3dlciB0\ncmlhbmd1bGFyIHBhcnQgb2YgQSBjb250YWlucyB0aGUgbG93ZXIKKiAgICAgICAgICB0cmlhbmd1\nbGFyIHBhcnQgb2YgdGhlIG1hdHJpeCBBLCBhbmQgdGhlIHN0cmljdGx5IHVwcGVyCiogICAgICAg\nICAgdHJpYW5ndWxhciBwYXJ0IG9mIEEgaXMgbm90IHJlZmVyZW5jZWQuCioKKiAgICAgICAgICBP\nbiBleGl0LCB0aGUgYmxvY2sgZGlhZ29uYWwgbWF0cml4IEQgYW5kIHRoZSBtdWx0aXBsaWVycyB1\nc2VkCiogICAgICAgICAgdG8gb2J0YWluIHRoZSBmYWN0b3IgVSBvciBMIChzZWUgYmVsb3cgZm9y\nIGZ1cnRoZXIgZGV0YWlscykuCioKKiAgTERBICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAg\nICBUaGUgbGVhZGluZyBkaW1lbnNpb24gb2YgdGhlIGFycmF5IEEuICBMREEgPj0gbWF4KDEsTiku\nCioKKiAgSVBJViAgICAob3V0cHV0KSBJTlRFR0VSIGFycmF5LCBkaW1lbnNpb24gKE4pCiogICAg\nICAgICAgRGV0YWlscyBvZiB0aGUgaW50ZXJjaGFuZ2VzIGFuZCB0aGUgYmxvY2sgc3RydWN0dXJl\nIG9mIEQuCiogICAgICAgICAgSWYgSVBJVihrKSA+IDAsIHRoZW4gcm93cyBhbmQgY29sdW1ucyBr\nIGFuZCBJUElWKGspIHdlcmUKKiAgICAgICAgICBpbnRlcmNoYW5nZWQgYW5kIEQoayxrKSBpcyBh\nIDEtYnktMSBkaWFnb25hbCBibG9jay4KKiAgICAgICAgICBJZiBVUExPID0gJ1UnIGFuZCBJUElW\nKGspID0gSVBJVihrLTEpIDwgMCwgdGhlbiByb3dzIGFuZAoqICAgICAgICAgIGNvbHVtbnMgay0x\nIGFuZCAtSVBJVihrKSB3ZXJlIGludGVyY2hhbmdlZCBhbmQgRChrLTE6ayxrLTE6aykKKiAgICAg\nICAgICBpcyBhIDItYnktMiBkaWFnb25hbCBibG9jay4gIElmIFVQTE8gPSAnTCcgYW5kIElQSVYo\naykgPQoqICAgICAgICAgIElQSVYoaysxKSA8IDAsIHRoZW4gcm93cyBhbmQgY29sdW1ucyBrKzEg\nYW5kIC1JUElWKGspIHdlcmUKKiAgICAgICAgICBpbnRlcmNoYW5nZWQgYW5kIEQoazprKzEsazpr\nKzEpIGlzIGEgMi1ieS0yIGRpYWdvbmFsIGJsb2NrLgoqCiogIFdPUksgICAgKHdvcmtzcGFjZS9v\ndXRwdXQpIFJFQUwgYXJyYXksIGRpbWVuc2lvbiAoTUFYKDEsTFdPUkspKQoqICAgICAgICAgIE9u\nIGV4aXQsIGlmIElORk8gPSAwLCBXT1JLKDEpIHJldHVybnMgdGhlIG9wdGltYWwgTFdPUksuCioK\nKiAgTFdPUksgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbGVuZ3RoIG9mIFdPUksu\nICBMV09SSyA+PTEuICBGb3IgYmVzdCBwZXJmb3JtYW5jZQoqICAgICAgICAgIExXT1JLID49IE4q\nTkIsIHdoZXJlIE5CIGlzIHRoZSBibG9jayBzaXplIHJldHVybmVkIGJ5IElMQUVOVi4KKgoqICAg\nICAgICAgIElmIExXT1JLID0gLTEsIHRoZW4gYSB3b3Jrc3BhY2UgcXVlcnkgaXMgYXNzdW1lZDsg\ndGhlIHJvdXRpbmUKKiAgICAgICAgICBvbmx5IGNhbGN1bGF0ZXMgdGhlIG9wdGltYWwgc2l6ZSBv\nZiB0aGUgV09SSyBhcnJheSwgcmV0dXJucwoqICAgICAgICAgIHRoaXMgdmFsdWUgYXMgdGhlIGZp\ncnN0IGVudHJ5IG9mIHRoZSBXT1JLIGFycmF5LCBhbmQgbm8gZXJyb3IKKiAgICAgICAgICBtZXNz\nYWdlIHJlbGF0ZWQgdG8gTFdPUksgaXMgaXNzdWVkIGJ5IFhFUkJMQS4KKgoqICBJTkZPICAgIChv\ndXRwdXQpIElOVEVHRVIKKiAgICAgICAgICA9IDA6ICBzdWNjZXNzZnVsIGV4aXQKKiAgICAgICAg\nICA8IDA6ICBpZiBJTkZPID0gLWksIHRoZSBpLXRoIGFyZ3VtZW50IGhhZCBhbiBpbGxlZ2FsIHZh\nbHVlCiogICAgICAgICAgPiAwOiAgaWYgSU5GTyA9IGksIEQoaSxpKSBpcyBleGFjdGx5IHplcm8u\nICBUaGUgZmFjdG9yaXphdGlvbgoqICAgICAgICAgICAgICAgIGhhcyBiZWVuIGNvbXBsZXRlZCwg\nYnV0IHRoZSBibG9jayBkaWFnb25hbCBtYXRyaXggRCBpcwoqICAgICAgICAgICAgICAgIGV4YWN0\nbHkgc2luZ3VsYXIsIGFuZCBkaXZpc2lvbiBieSB6ZXJvIHdpbGwgb2NjdXIgaWYgaXQKKiAgICAg\nICAgICAgICAgICBpcyB1c2VkIHRvIHNvbHZlIGEgc3lzdGVtIG9mIGVxdWF0aW9ucy4KKgpyfAEA\nAGiYaJkpgXJ9AQAAfXJ+AQAAKGiciWidaJ51YmipigL5AGiqWA4AAABzc3l0cmZfMjQ5LnR4dHJ/\nAQAAdWJorIoC+QBorVgFAAAAc3l0cmZygAEAAGipigEddWJoj2hmXWiQh1JygQEAAH1yggEAACho\nk1gJAAAAc3ltbWV0cmljcoMBAABolVgEAAAAZnVsbHKEAQAAaHdYZgAAAGNvbXB1dGVzIHRoZSBm\nYWN0b3JpemF0aW9uIG9mIGEgcmVhbCBzeW1tZXRyaWMgbWF0cml4IHVzaW5nIHRoZSBCdW5jaC1L\nYXVmbWFuIGRpYWdvbmFsIHBpdm90aW5nIG1ldGhvZHKFAQAAaJhomSmBcoYBAAB9cocBAAAoaJyJ\naJ1onnViaJ9YLAAAAGh0dHA6Ly93d3cubmV0bGliLm9yZy9sYXBhY2svZG91YmxlL2RzeXRyZi5m\ncogBAABohFgBAAAAZGihaI9ool1okIdScokBAAB9cooBAAAoaKVYSA4AACAgICAgIFNVQlJPVVRJ\nTkUgRFNZVFJGKCBVUExPLCBOLCBBLCBMREEsIElQSVYsIFdPUkssIExXT1JLLCBJTkZPICkKKgoq\nICAtLSBMQVBBQ0sgcm91dGluZSAodmVyc2lvbiAzLjMuMSkgLS0KKiAgLS0gTEFQQUNLIGlzIGEg\nc29mdHdhcmUgcGFja2FnZSBwcm92aWRlZCBieSBVbml2LiBvZiBUZW5uZXNzZWUsICAgIC0tCiog\nIC0tIFVuaXYuIG9mIENhbGlmb3JuaWEgQmVya2VsZXksIFVuaXYuIG9mIENvbG9yYWRvIERlbnZl\nciBhbmQgTkFHIEx0ZC4uLS0KKiAgLS0gQXByaWwgMjAxMSAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tCioKKiAgICAgLi4gU2NhbGFyIEFyZ3Vt\nZW50cyAuLgogICAgICBDSEFSQUNURVIgICAgICAgICAgVVBMTwogICAgICBJTlRFR0VSICAgICAg\nICAgICAgSU5GTywgTERBLCBMV09SSywgTgoqICAgICAuLgoqICAgICAuLiBBcnJheSBBcmd1bWVu\ndHMgLi4KICAgICAgSU5URUdFUiAgICAgICAgICAgIElQSVYoICogKQogICAgICBET1VCTEUgUFJF\nQ0lTSU9OICAgQSggTERBLCAqICksIFdPUksoICogKQoqICAgICAuLgoqCiogIFB1cnBvc2UKKiAg\nPT09PT09PQoqCiogIERTWVRSRiBjb21wdXRlcyB0aGUgZmFjdG9yaXphdGlvbiBvZiBhIHJlYWwg\nc3ltbWV0cmljIG1hdHJpeCBBIHVzaW5nCiogIHRoZSBCdW5jaC1LYXVmbWFuIGRpYWdvbmFsIHBp\ndm90aW5nIG1ldGhvZC4gIFRoZSBmb3JtIG9mIHRoZQoqICBmYWN0b3JpemF0aW9uIGlzCioKKiAg\nICAgQSA9IFUqRCpVKipUICBvciAgQSA9IEwqRCpMKipUCioKKiAgd2hlcmUgVSAob3IgTCkgaXMg\nYSBwcm9kdWN0IG9mIHBlcm11dGF0aW9uIGFuZCB1bml0IHVwcGVyIChsb3dlcikKKiAgdHJpYW5n\ndWxhciBtYXRyaWNlcywgYW5kIEQgaXMgc3ltbWV0cmljIGFuZCBibG9jayBkaWFnb25hbCB3aXRo\nCiogIDEtYnktMSBhbmQgMi1ieS0yIGRpYWdvbmFsIGJsb2Nrcy4KKgoqICBUaGlzIGlzIHRoZSBi\nbG9ja2VkIHZlcnNpb24gb2YgdGhlIGFsZ29yaXRobSwgY2FsbGluZyBMZXZlbCAzIEJMQVMuCioK\nKiAgQXJndW1lbnRzCiogID09PT09PT09PQoqCiogIFVQTE8gICAgKGlucHV0KSBDSEFSQUNURVIq\nMQoqICAgICAgICAgID0gJ1UnOiAgVXBwZXIgdHJpYW5nbGUgb2YgQSBpcyBzdG9yZWQ7CiogICAg\nICAgICAgPSAnTCc6ICBMb3dlciB0cmlhbmdsZSBvZiBBIGlzIHN0b3JlZC4KKgoqICBOICAgICAg\nIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBvcmRlciBvZiB0aGUgbWF0cml4IEEuICBO\nID49IDAuCioKKiAgQSAgICAgICAoaW5wdXQvb3V0cHV0KSBET1VCTEUgUFJFQ0lTSU9OIGFycmF5\nLCBkaW1lbnNpb24gKExEQSxOKQoqICAgICAgICAgIE9uIGVudHJ5LCB0aGUgc3ltbWV0cmljIG1h\ndHJpeCBBLiAgSWYgVVBMTyA9ICdVJywgdGhlIGxlYWRpbmcKKiAgICAgICAgICBOLWJ5LU4gdXBw\nZXIgdHJpYW5ndWxhciBwYXJ0IG9mIEEgY29udGFpbnMgdGhlIHVwcGVyCiogICAgICAgICAgdHJp\nYW5ndWxhciBwYXJ0IG9mIHRoZSBtYXRyaXggQSwgYW5kIHRoZSBzdHJpY3RseSBsb3dlcgoqICAg\nICAgICAgIHRyaWFuZ3VsYXIgcGFydCBvZiBBIGlzIG5vdCByZWZlcmVuY2VkLiAgSWYgVVBMTyA9\nICdMJywgdGhlCiogICAgICAgICAgbGVhZGluZyBOLWJ5LU4gbG93ZXIgdHJpYW5ndWxhciBwYXJ0\nIG9mIEEgY29udGFpbnMgdGhlIGxvd2VyCiogICAgICAgICAgdHJpYW5ndWxhciBwYXJ0IG9mIHRo\nZSBtYXRyaXggQSwgYW5kIHRoZSBzdHJpY3RseSB1cHBlcgoqICAgICAgICAgIHRyaWFuZ3VsYXIg\ncGFydCBvZiBBIGlzIG5vdCByZWZlcmVuY2VkLgoqCiogICAgICAgICAgT24gZXhpdCwgdGhlIGJs\nb2NrIGRpYWdvbmFsIG1hdHJpeCBEIGFuZCB0aGUgbXVsdGlwbGllcnMgdXNlZAoqICAgICAgICAg\nIHRvIG9idGFpbiB0aGUgZmFjdG9yIFUgb3IgTCAoc2VlIGJlbG93IGZvciBmdXJ0aGVyIGRldGFp\nbHMpLgoqCiogIExEQSAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcg\nZGltZW5zaW9uIG9mIHRoZSBhcnJheSBBLiAgTERBID49IG1heCgxLE4pLgoqCiogIElQSVYgICAg\nKG91dHB1dCkgSU5URUdFUiBhcnJheSwgZGltZW5zaW9uIChOKQoqICAgICAgICAgIERldGFpbHMg\nb2YgdGhlIGludGVyY2hhbmdlcyBhbmQgdGhlIGJsb2NrIHN0cnVjdHVyZSBvZiBELgoqICAgICAg\nICAgIElmIElQSVYoaykgPiAwLCB0aGVuIHJvd3MgYW5kIGNvbHVtbnMgayBhbmQgSVBJVihrKSB3\nZXJlCiogICAgICAgICAgaW50ZXJjaGFuZ2VkIGFuZCBEKGssaykgaXMgYSAxLWJ5LTEgZGlhZ29u\nYWwgYmxvY2suCiogICAgICAgICAgSWYgVVBMTyA9ICdVJyBhbmQgSVBJVihrKSA9IElQSVYoay0x\nKSA8IDAsIHRoZW4gcm93cyBhbmQKKiAgICAgICAgICBjb2x1bW5zIGstMSBhbmQgLUlQSVYoaykg\nd2VyZSBpbnRlcmNoYW5nZWQgYW5kIEQoay0xOmssay0xOmspCiogICAgICAgICAgaXMgYSAyLWJ5\nLTIgZGlhZ29uYWwgYmxvY2suICBJZiBVUExPID0gJ0wnIGFuZCBJUElWKGspID0KKiAgICAgICAg\nICBJUElWKGsrMSkgPCAwLCB0aGVuIHJvd3MgYW5kIGNvbHVtbnMgaysxIGFuZCAtSVBJVihrKSB3\nZXJlCiogICAgICAgICAgaW50ZXJjaGFuZ2VkIGFuZCBEKGs6aysxLGs6aysxKSBpcyBhIDItYnkt\nMiBkaWFnb25hbCBibG9jay4KKgoqICBXT1JLICAgICh3b3Jrc3BhY2Uvb3V0cHV0KSBET1VCTEUg\nUFJFQ0lTSU9OIGFycmF5LCBkaW1lbnNpb24gKE1BWCgxLExXT1JLKSkKKiAgICAgICAgICBPbiBl\neGl0LCBpZiBJTkZPID0gMCwgV09SSygxKSByZXR1cm5zIHRoZSBvcHRpbWFsIExXT1JLLgoqCiog\nIExXT1JLICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxlbmd0aCBvZiBXT1JLLiAg\nTFdPUksgPj0xLiAgRm9yIGJlc3QgcGVyZm9ybWFuY2UKKiAgICAgICAgICBMV09SSyA+PSBOKk5C\nLCB3aGVyZSBOQiBpcyB0aGUgYmxvY2sgc2l6ZSByZXR1cm5lZCBieSBJTEFFTlYuCioKKiAgICAg\nICAgICBJZiBMV09SSyA9IC0xLCB0aGVuIGEgd29ya3NwYWNlIHF1ZXJ5IGlzIGFzc3VtZWQ7IHRo\nZSByb3V0aW5lCiogICAgICAgICAgb25seSBjYWxjdWxhdGVzIHRoZSBvcHRpbWFsIHNpemUgb2Yg\ndGhlIFdPUksgYXJyYXksIHJldHVybnMKKiAgICAgICAgICB0aGlzIHZhbHVlIGFzIHRoZSBmaXJz\ndCBlbnRyeSBvZiB0aGUgV09SSyBhcnJheSwgYW5kIG5vIGVycm9yCiogICAgICAgICAgbWVzc2Fn\nZSByZWxhdGVkIHRvIExXT1JLIGlzIGlzc3VlZCBieSBYRVJCTEEuCioKKiAgSU5GTyAgICAob3V0\ncHV0KSBJTlRFR0VSCiogICAgICAgICAgPSAwOiAgc3VjY2Vzc2Z1bCBleGl0CiogICAgICAgICAg\nPCAwOiAgaWYgSU5GTyA9IC1pLCB0aGUgaS10aCBhcmd1bWVudCBoYWQgYW4gaWxsZWdhbCB2YWx1\nZQoqICAgICAgICAgID4gMDogIGlmIElORk8gPSBpLCBEKGksaSkgaXMgZXhhY3RseSB6ZXJvLiAg\nVGhlIGZhY3Rvcml6YXRpb24KKiAgICAgICAgICAgICAgICBoYXMgYmVlbiBjb21wbGV0ZWQsIGJ1\ndCB0aGUgYmxvY2sgZGlhZ29uYWwgbWF0cml4IEQgaXMKKiAgICAgICAgICAgICAgICBleGFjdGx5\nIHNpbmd1bGFyLCBhbmQgZGl2aXNpb24gYnkgemVybyB3aWxsIG9jY3VyIGlmIGl0CiogICAgICAg\nICAgICAgICAgaXMgdXNlZCB0byBzb2x2ZSBhIHN5c3RlbSBvZiBlcXVhdGlvbnMuCioKcosBAABo\nmGiZKYFyjAEAAH1yjQEAAChonIlonWiedWJoqYoC+gBoqlgOAAAAZHN5dHJmXzI1MC50eHRyjgEA\nAHViaKyKAvoAaK1YBQAAAHN5dHJmco8BAABoqYoBHnViaI9oZl1okIdScpABAAB9cpEBAAAoaJNY\nCQAAAHN5bW1ldHJpY3KSAQAAaJVYBgAAAHBhY2tlZHKTAQAAaHdYfgAAAGNvbXB1dGVzIHRoZSBm\nYWN0b3JpemF0aW9uIG9mIGEgcmVhbCBzeW1tZXRyaWMgbWF0cml4IHN0b3JlZCBpbiBwYWNrZWQg\nZm9ybWF0IHVzaW5nIHRoZSBCdW5jaC1LYXVmbWFuIGRpYWdvbmFsIHBpdm90aW5nIG1ldGhvZHKU\nAQAAaJhomSmBcpUBAAB9cpYBAAAoaJyJaJ1onnViaJ9YLAAAAGh0dHA6Ly93d3cubmV0bGliLm9y\nZy9sYXBhY2svc2luZ2xlL3NzcHRyZi5mcpcBAABohFgBAAAAc2ihaI9ool1okIdScpgBAAB9cpkB\nAAAoaKVYwgoAACAgICAgIFNVQlJPVVRJTkUgU1NQVFJGKCBVUExPLCBOLCBBUCwgSVBJViwgSU5G\nTyApCioKKiAgLS0gTEFQQUNLIHJvdXRpbmUgKHZlcnNpb24gMy4zLjEpIC0tCiogIC0tIExBUEFD\nSyBpcyBhIHNvZnR3YXJlIHBhY2thZ2UgcHJvdmlkZWQgYnkgVW5pdi4gb2YgVGVubmVzc2VlLCAg\nICAtLQoqICAtLSBVbml2LiBvZiBDYWxpZm9ybmlhIEJlcmtlbGV5LCBVbml2LiBvZiBDb2xvcmFk\nbyBEZW52ZXIgYW5kIE5BRyBMdGQuLi0tCiogIC0tIEFwcmlsIDIwMTEgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLQoqCiogICAgIC4uIFNjYWxh\nciBBcmd1bWVudHMgLi4KICAgICAgQ0hBUkFDVEVSICAgICAgICAgIFVQTE8KICAgICAgSU5URUdF\nUiAgICAgICAgICAgIElORk8sIE4KKiAgICAgLi4KKiAgICAgLi4gQXJyYXkgQXJndW1lbnRzIC4u\nCiAgICAgIElOVEVHRVIgICAgICAgICAgICBJUElWKCAqICkKICAgICAgUkVBTCAgICAgICAgICAg\nICAgIEFQKCAqICkKKiAgICAgLi4KKgoqICBQdXJwb3NlCiogID09PT09PT0KKgoqICBTU1BUUkYg\nY29tcHV0ZXMgdGhlIGZhY3Rvcml6YXRpb24gb2YgYSByZWFsIHN5bW1ldHJpYyBtYXRyaXggQSBz\ndG9yZWQKKiAgaW4gcGFja2VkIGZvcm1hdCB1c2luZyB0aGUgQnVuY2gtS2F1Zm1hbiBkaWFnb25h\nbCBwaXZvdGluZyBtZXRob2Q6CioKKiAgICAgQSA9IFUqRCpVKipUICBvciAgQSA9IEwqRCpMKipU\nCioKKiAgd2hlcmUgVSAob3IgTCkgaXMgYSBwcm9kdWN0IG9mIHBlcm11dGF0aW9uIGFuZCB1bml0\nIHVwcGVyIChsb3dlcikKKiAgdHJpYW5ndWxhciBtYXRyaWNlcywgYW5kIEQgaXMgc3ltbWV0cmlj\nIGFuZCBibG9jayBkaWFnb25hbCB3aXRoCiogIDEtYnktMSBhbmQgMi1ieS0yIGRpYWdvbmFsIGJs\nb2Nrcy4KKgoqICBBcmd1bWVudHMKKiAgPT09PT09PT09CioKKiAgVVBMTyAgICAoaW5wdXQpIENI\nQVJBQ1RFUioxCiogICAgICAgICAgPSAnVSc6ICBVcHBlciB0cmlhbmdsZSBvZiBBIGlzIHN0b3Jl\nZDsKKiAgICAgICAgICA9ICdMJzogIExvd2VyIHRyaWFuZ2xlIG9mIEEgaXMgc3RvcmVkLgoqCiog\nIE4gICAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG9yZGVyIG9mIHRoZSBtYXRy\naXggQS4gIE4gPj0gMC4KKgoqICBBUCAgICAgIChpbnB1dC9vdXRwdXQpIFJFQUwgYXJyYXksIGRp\nbWVuc2lvbiAoTiooTisxKS8yKQoqICAgICAgICAgIE9uIGVudHJ5LCB0aGUgdXBwZXIgb3IgbG93\nZXIgdHJpYW5nbGUgb2YgdGhlIHN5bW1ldHJpYyBtYXRyaXgKKiAgICAgICAgICBBLCBwYWNrZWQg\nY29sdW1ud2lzZSBpbiBhIGxpbmVhciBhcnJheS4gIFRoZSBqLXRoIGNvbHVtbiBvZiBBCiogICAg\nICAgICAgaXMgc3RvcmVkIGluIHRoZSBhcnJheSBBUCBhcyBmb2xsb3dzOgoqICAgICAgICAgIGlm\nIFVQTE8gPSAnVScsIEFQKGkgKyAoai0xKSpqLzIpID0gQShpLGopIGZvciAxPD1pPD1qOwoqICAg\nICAgICAgIGlmIFVQTE8gPSAnTCcsIEFQKGkgKyAoai0xKSooMm4taikvMikgPSBBKGksaikgZm9y\nIGo8PWk8PW4uCioKKiAgICAgICAgICBPbiBleGl0LCB0aGUgYmxvY2sgZGlhZ29uYWwgbWF0cml4\nIEQgYW5kIHRoZSBtdWx0aXBsaWVycyB1c2VkCiogICAgICAgICAgdG8gb2J0YWluIHRoZSBmYWN0\nb3IgVSBvciBMLCBzdG9yZWQgYXMgYSBwYWNrZWQgdHJpYW5ndWxhcgoqICAgICAgICAgIG1hdHJp\neCBvdmVyd3JpdGluZyBBIChzZWUgYmVsb3cgZm9yIGZ1cnRoZXIgZGV0YWlscykuCioKKiAgSVBJ\nViAgICAob3V0cHV0KSBJTlRFR0VSIGFycmF5LCBkaW1lbnNpb24gKE4pCiogICAgICAgICAgRGV0\nYWlscyBvZiB0aGUgaW50ZXJjaGFuZ2VzIGFuZCB0aGUgYmxvY2sgc3RydWN0dXJlIG9mIEQuCiog\nICAgICAgICAgSWYgSVBJVihrKSA+IDAsIHRoZW4gcm93cyBhbmQgY29sdW1ucyBrIGFuZCBJUElW\nKGspIHdlcmUKKiAgICAgICAgICBpbnRlcmNoYW5nZWQgYW5kIEQoayxrKSBpcyBhIDEtYnktMSBk\naWFnb25hbCBibG9jay4KKiAgICAgICAgICBJZiBVUExPID0gJ1UnIGFuZCBJUElWKGspID0gSVBJ\nVihrLTEpIDwgMCwgdGhlbiByb3dzIGFuZAoqICAgICAgICAgIGNvbHVtbnMgay0xIGFuZCAtSVBJ\nVihrKSB3ZXJlIGludGVyY2hhbmdlZCBhbmQgRChrLTE6ayxrLTE6aykKKiAgICAgICAgICBpcyBh\nIDItYnktMiBkaWFnb25hbCBibG9jay4gIElmIFVQTE8gPSAnTCcgYW5kIElQSVYoaykgPQoqICAg\nICAgICAgIElQSVYoaysxKSA8IDAsIHRoZW4gcm93cyBhbmQgY29sdW1ucyBrKzEgYW5kIC1JUElW\nKGspIHdlcmUKKiAgICAgICAgICBpbnRlcmNoYW5nZWQgYW5kIEQoazprKzEsazprKzEpIGlzIGEg\nMi1ieS0yIGRpYWdvbmFsIGJsb2NrLgoqCiogIElORk8gICAgKG91dHB1dCkgSU5URUdFUgoqICAg\nICAgICAgID0gMDogc3VjY2Vzc2Z1bCBleGl0CiogICAgICAgICAgPCAwOiBpZiBJTkZPID0gLWks\nIHRoZSBpLXRoIGFyZ3VtZW50IGhhZCBhbiBpbGxlZ2FsIHZhbHVlCiogICAgICAgICAgPiAwOiBp\nZiBJTkZPID0gaSwgRChpLGkpIGlzIGV4YWN0bHkgemVyby4gIFRoZSBmYWN0b3JpemF0aW9uCiog\nICAgICAgICAgICAgICBoYXMgYmVlbiBjb21wbGV0ZWQsIGJ1dCB0aGUgYmxvY2sgZGlhZ29uYWwg\nbWF0cml4IEQgaXMKKiAgICAgICAgICAgICAgIGV4YWN0bHkgc2luZ3VsYXIsIGFuZCBkaXZpc2lv\nbiBieSB6ZXJvIHdpbGwgb2NjdXIgaWYgaXQKKiAgICAgICAgICAgICAgIGlzIHVzZWQgdG8gc29s\ndmUgYSBzeXN0ZW0gb2YgZXF1YXRpb25zLgoqCnKaAQAAaJhomSmBcpsBAAB9cpwBAAAoaJyJaJ1o\nnnViaKmKAv8AaKpYDgAAAHNzcHRyZl8yNTUudHh0cp0BAAB1YmisigL/AGitWAUAAABzcHRyZnKe\nAQAAaKmKASN1YmiPaGZdaJCHUnKfAQAAfXKgAQAAKGiTWAkAAABzeW1tZXRyaWNyoQEAAGiVWAYA\nAABwYWNrZWRyogEAAGh3WH4AAABjb21wdXRlcyB0aGUgZmFjdG9yaXphdGlvbiBvZiBhIHJlYWwg\nc3ltbWV0cmljIG1hdHJpeCBzdG9yZWQgaW4gcGFja2VkIGZvcm1hdCB1c2luZyB0aGUgQnVuY2gt\nS2F1Zm1hbiBkaWFnb25hbCBwaXZvdGluZyBtZXRob2RyowEAAGiYaJkpgXKkAQAAfXKlAQAAKGic\niWidaJ51YmifWCwAAABodHRwOi8vd3d3Lm5ldGxpYi5vcmcvbGFwYWNrL2RvdWJsZS9kc3B0cmYu\nZnKmAQAAaIRYAQAAAGRooWiPaKJdaJCHUnKnAQAAfXKoAQAAKGilWM4KAAAgICAgICBTVUJST1VU\nSU5FIERTUFRSRiggVVBMTywgTiwgQVAsIElQSVYsIElORk8gKQoqCiogIC0tIExBUEFDSyByb3V0\naW5lICh2ZXJzaW9uIDMuMy4xKSAtLQoqICAtLSBMQVBBQ0sgaXMgYSBzb2Z0d2FyZSBwYWNrYWdl\nIHByb3ZpZGVkIGJ5IFVuaXYuIG9mIFRlbm5lc3NlZSwgICAgLS0KKiAgLS0gVW5pdi4gb2YgQ2Fs\naWZvcm5pYSBCZXJrZWxleSwgVW5pdi4gb2YgQ29sb3JhZG8gRGVudmVyIGFuZCBOQUcgTHRkLi4t\nLQoqICAtLSBBcHJpbCAyMDExICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgLS0KKgoqICAgICAuLiBTY2FsYXIgQXJndW1lbnRzIC4uCiAgICAgIENI\nQVJBQ1RFUiAgICAgICAgICBVUExPCiAgICAgIElOVEVHRVIgICAgICAgICAgICBJTkZPLCBOCiog\nICAgIC4uCiogICAgIC4uIEFycmF5IEFyZ3VtZW50cyAuLgogICAgICBJTlRFR0VSICAgICAgICAg\nICAgSVBJViggKiApCiAgICAgIERPVUJMRSBQUkVDSVNJT04gICBBUCggKiApCiogICAgIC4uCioK\nKiAgUHVycG9zZQoqICA9PT09PT09CioKKiAgRFNQVFJGIGNvbXB1dGVzIHRoZSBmYWN0b3JpemF0\naW9uIG9mIGEgcmVhbCBzeW1tZXRyaWMgbWF0cml4IEEgc3RvcmVkCiogIGluIHBhY2tlZCBmb3Jt\nYXQgdXNpbmcgdGhlIEJ1bmNoLUthdWZtYW4gZGlhZ29uYWwgcGl2b3RpbmcgbWV0aG9kOgoqCiog\nICAgIEEgPSBVKkQqVSoqVCAgb3IgIEEgPSBMKkQqTCoqVAoqCiogIHdoZXJlIFUgKG9yIEwpIGlz\nIGEgcHJvZHVjdCBvZiBwZXJtdXRhdGlvbiBhbmQgdW5pdCB1cHBlciAobG93ZXIpCiogIHRyaWFu\nZ3VsYXIgbWF0cmljZXMsIGFuZCBEIGlzIHN5bW1ldHJpYyBhbmQgYmxvY2sgZGlhZ29uYWwgd2l0\naAoqICAxLWJ5LTEgYW5kIDItYnktMiBkaWFnb25hbCBibG9ja3MuCioKKiAgQXJndW1lbnRzCiog\nID09PT09PT09PQoqCiogIFVQTE8gICAgKGlucHV0KSBDSEFSQUNURVIqMQoqICAgICAgICAgID0g\nJ1UnOiAgVXBwZXIgdHJpYW5nbGUgb2YgQSBpcyBzdG9yZWQ7CiogICAgICAgICAgPSAnTCc6ICBM\nb3dlciB0cmlhbmdsZSBvZiBBIGlzIHN0b3JlZC4KKgoqICBOICAgICAgIChpbnB1dCkgSU5URUdF\nUgoqICAgICAgICAgIFRoZSBvcmRlciBvZiB0aGUgbWF0cml4IEEuICBOID49IDAuCioKKiAgQVAg\nICAgICAoaW5wdXQvb3V0cHV0KSBET1VCTEUgUFJFQ0lTSU9OIGFycmF5LCBkaW1lbnNpb24gKE4q\nKE4rMSkvMikKKiAgICAgICAgICBPbiBlbnRyeSwgdGhlIHVwcGVyIG9yIGxvd2VyIHRyaWFuZ2xl\nIG9mIHRoZSBzeW1tZXRyaWMgbWF0cml4CiogICAgICAgICAgQSwgcGFja2VkIGNvbHVtbndpc2Ug\naW4gYSBsaW5lYXIgYXJyYXkuICBUaGUgai10aCBjb2x1bW4gb2YgQQoqICAgICAgICAgIGlzIHN0\nb3JlZCBpbiB0aGUgYXJyYXkgQVAgYXMgZm9sbG93czoKKiAgICAgICAgICBpZiBVUExPID0gJ1Un\nLCBBUChpICsgKGotMSkqai8yKSA9IEEoaSxqKSBmb3IgMTw9aTw9ajsKKiAgICAgICAgICBpZiBV\nUExPID0gJ0wnLCBBUChpICsgKGotMSkqKDJuLWopLzIpID0gQShpLGopIGZvciBqPD1pPD1uLgoq\nCiogICAgICAgICAgT24gZXhpdCwgdGhlIGJsb2NrIGRpYWdvbmFsIG1hdHJpeCBEIGFuZCB0aGUg\nbXVsdGlwbGllcnMgdXNlZAoqICAgICAgICAgIHRvIG9idGFpbiB0aGUgZmFjdG9yIFUgb3IgTCwg\nc3RvcmVkIGFzIGEgcGFja2VkIHRyaWFuZ3VsYXIKKiAgICAgICAgICBtYXRyaXggb3ZlcndyaXRp\nbmcgQSAoc2VlIGJlbG93IGZvciBmdXJ0aGVyIGRldGFpbHMpLgoqCiogIElQSVYgICAgKG91dHB1\ndCkgSU5URUdFUiBhcnJheSwgZGltZW5zaW9uIChOKQoqICAgICAgICAgIERldGFpbHMgb2YgdGhl\nIGludGVyY2hhbmdlcyBhbmQgdGhlIGJsb2NrIHN0cnVjdHVyZSBvZiBELgoqICAgICAgICAgIElm\nIElQSVYoaykgPiAwLCB0aGVuIHJvd3MgYW5kIGNvbHVtbnMgayBhbmQgSVBJVihrKSB3ZXJlCiog\nICAgICAgICAgaW50ZXJjaGFuZ2VkIGFuZCBEKGssaykgaXMgYSAxLWJ5LTEgZGlhZ29uYWwgYmxv\nY2suCiogICAgICAgICAgSWYgVVBMTyA9ICdVJyBhbmQgSVBJVihrKSA9IElQSVYoay0xKSA8IDAs\nIHRoZW4gcm93cyBhbmQKKiAgICAgICAgICBjb2x1bW5zIGstMSBhbmQgLUlQSVYoaykgd2VyZSBp\nbnRlcmNoYW5nZWQgYW5kIEQoay0xOmssay0xOmspCiogICAgICAgICAgaXMgYSAyLWJ5LTIgZGlh\nZ29uYWwgYmxvY2suICBJZiBVUExPID0gJ0wnIGFuZCBJUElWKGspID0KKiAgICAgICAgICBJUElW\nKGsrMSkgPCAwLCB0aGVuIHJvd3MgYW5kIGNvbHVtbnMgaysxIGFuZCAtSVBJVihrKSB3ZXJlCiog\nICAgICAgICAgaW50ZXJjaGFuZ2VkIGFuZCBEKGs6aysxLGs6aysxKSBpcyBhIDItYnktMiBkaWFn\nb25hbCBibG9jay4KKgoqICBJTkZPICAgIChvdXRwdXQpIElOVEVHRVIKKiAgICAgICAgICA9IDA6\nIHN1Y2Nlc3NmdWwgZXhpdAoqICAgICAgICAgIDwgMDogaWYgSU5GTyA9IC1pLCB0aGUgaS10aCBh\ncmd1bWVudCBoYWQgYW4gaWxsZWdhbCB2YWx1ZQoqICAgICAgICAgID4gMDogaWYgSU5GTyA9IGks\nIEQoaSxpKSBpcyBleGFjdGx5IHplcm8uICBUaGUgZmFjdG9yaXphdGlvbgoqICAgICAgICAgICAg\nICAgaGFzIGJlZW4gY29tcGxldGVkLCBidXQgdGhlIGJsb2NrIGRpYWdvbmFsIG1hdHJpeCBEIGlz\nCiogICAgICAgICAgICAgICBleGFjdGx5IHNpbmd1bGFyLCBhbmQgZGl2aXNpb24gYnkgemVybyB3\naWxsIG9jY3VyIGlmIGl0CiogICAgICAgICAgICAgICBpcyB1c2VkIHRvIHNvbHZlIGEgc3lzdGVt\nIG9mIGVxdWF0aW9ucy4KKgpyqQEAAGiYaJkpgXKqAQAAfXKrAQAAKGiciWidaJ51YmipigIAAWiq\nWA4AAABkc3B0cmZfMjU2LnR4dHKsAQAAdWJorIoCAAForVgFAAAAc3B0cmZyrQEAAGipigEkdWJl\ndWJVB3F1ZXJpZXNyrgEAAF1yrwEAAGNkamFuZ28uZGIubW9kZWxzLnF1ZXJ5X3V0aWxzClEKcrAB\nAAApgXKxAQAAfXKyAQAAKFUJY29ubmVjdG9ycrMBAABoWVUHbmVnYXRlZHK0AQAAiVUIY2hpbGRy\nZW5ytQEAAF1ytgEAAFUQbm90ZXNfX2ljb250YWluc2h6hnK3AQAAYVUPc3VidHJlZV9wYXJlbnRz\ncrgBAABdcrkBAAB1YmF1Lg==\n','2012-04-10 14:04:18'),('468cbed8a9997d0b1bbe0a96a42ab660','ZDVhZDRkNzgyMmUxY2Y1ZmE1Y2FkY2NkNGUxYzM0NmRkNTg1NTJjNTqAAn1xAS4=\n','2012-01-20 09:25:57'),('2084307ef81772a4a9da3ef70cd1ecfe','ZjBjNjI5ODQ3MGQ5ZjNjMWE4MWQzMjJiZDY5ODEzODFhZTYyYmJiOTqAAn1xAShVCEZ1bmN0aW9u\ncQJdcQMoY2RqYW5nby5mb3Jtcy5mb3JtcwpCb3VuZEZpZWxkCnEEKYFxBX1xBihVEWh0bWxfaW5p\ndGlhbF9uYW1lcQdYLAAAAGluaXRpYWwtTGluZWFyRXF1YXRpb25fY29tcHV0YXRpb25hbEZ1bmN0\naW9ucQhVBGZvcm1xCWNEcml2ZXIuZm9ybXMKTGluZWFyRXF1YXRpb25fY29tcHV0YXRpb25hbEZv\ncm0KcQopgXELfXEMKFUFZmlsZXNxDX1xDlUIaXNfYm91bmRxD4lVC2Vycm9yX2NsYXNzcRBjZGph\nbmdvLmZvcm1zLnV0aWwKRXJyb3JMaXN0CnERVQ9lbXB0eV9wZXJtaXR0ZWRxEolVBmZpZWxkc3ET\nY2RqYW5nby51dGlscy5kYXRhc3RydWN0dXJlcwpTb3J0ZWREaWN0CnEUKYFxFShVJExpbmVhckVx\ndWF0aW9uX2NvbXB1dGF0aW9uYWxGdW5jdGlvbnEWY2RqYW5nby5mb3Jtcy5maWVsZHMKTXVsdGlw\nbGVDaG9pY2VGaWVsZApxFymBcRh9cRkoVQZ3aWRnZXRxGmNkamFuZ28uZm9ybXMud2lkZ2V0cwpD\naGVja2JveFNlbGVjdE11bHRpcGxlCnEbKYFxHH1xHShVC2lzX3JlcXVpcmVkcR6IVQVhdHRyc3Ef\nfXEgVQdjaG9pY2VzcSFdcSIoVQZmYWN0b3JVGWZhY3RvciBhIG1hdHJpeCAoUEEgPSBMVSmGcSNV\nBWVycm9yVUxjb21wdXRlIGZvcndhcmQgb3IgYmFja3dhcmQgZXJyb3IgYm91bmRzIGZvciB0aGUg\nc29sdXRpb24gdG8gYSBsaW5lYXIgc3lzdGVthnEkVQZyZWZpbmVxJVUmcmVmaW5lIHRoZSBzb2x1\ndGlvbiB0byBhIGxpbmVhciBzeXN0ZW2GcSZVCWNvbmRpdGlvblUpZXN0aW1hdGUgdGhlIGNvbmRp\ndGlvbiBudW1iZXIgb2YgYSBtYXRyaXiGcSdVC2VxdWlsaWJyYXRlcShVFGVxdWlsaWJyYXRlIGEg\nbWF0cml4hnEpVQdpbnZlcnNlVTBpbnZlcnQgYSBtYXRyaXggdXNpbmcgcHJvdmlkZWQgZmFjdG9y\ncyAoUCwgTCwgVSmGcSpVBXNvbHZlVTZzb2x2ZSBhIGxpbmVhciBzeXN0ZW0gdXNpbmcgcHJvdmlk\nZWQgZmFjdG9ycyAoUCwgTCwgVSmGcStldWJVB2luaXRpYWxxLE5VCF9jaG9pY2VzcS1oIlUQY3Jl\nYXRpb25fY291bnRlcnEuSyRVCHJlcXVpcmVkcS+IVQVsYWJlbHEwTlUKdmFsaWRhdG9yc3ExXXEy\nVQloZWxwX3RleHRxM1gAAAAAVQhsb2NhbGl6ZXE0iVUOZXJyb3JfbWVzc2FnZXNxNX1xNihVDGlu\ndmFsaWRfbGlzdHE3Y2RqYW5nby51dGlscy5mdW5jdGlvbmFsCl9sYXp5X3Byb3h5X3VucGlja2xl\nCnE4KGNkamFuZ28udXRpbHMudHJhbnNsYXRpb24KdWdldHRleHQKcTlYFwAAAEVudGVyIGEgbGlz\ndCBvZiB2YWx1ZXMuhXE6fXE7Y19fYnVpbHRpbl9fCnVuaWNvZGUKcTx0UnE9aC9oOChoOVgXAAAA\nVGhpcyBmaWVsZCBpcyByZXF1aXJlZC6FcT59cT9oPHRScUBVDmludmFsaWRfY2hvaWNlcUFoOCho\nOVhFAAAAU2VsZWN0IGEgdmFsaWQgY2hvaWNlLiAlKHZhbHVlKXMgaXMgbm90IG9uZSBvZiB0aGUg\nYXZhaWxhYmxlIGNob2ljZXMuhXFCfXFDaDx0UnFEVQdpbnZhbGlkcUVoOChoOVgUAAAARW50ZXIg\nYSB2YWxpZCB2YWx1ZS6FcUZ9cUdoPHRScUh1VRNzaG93X2hpZGRlbl9pbml0aWFscUmJdWJVI0xp\nbmVhckVxdWF0aW9uX2NvbXB1dGF0aW9uYWxDb21wbGV4cUpoFymBcUt9cUwoaBpoGymBcU19cU4o\naB6IaB99cU9oIV1xUChVA3llc1UDeWVzhnFRVQJub1UCbm+GcVJldWJoLE5oLWhQaC5LJWgviGgw\nTmgxXXFTaDNYAAAAAGg0iWg1fXFUKGg3aD1oL2hAaEFoRGhFaEh1aEmJdWJVJkxpbmVhckVxdWF0\naW9uX2NvbXB1dGF0aW9uYWxNYXRyaXhUeXBlcVVoFymBcVZ9cVcoaBpoGymBcVh9cVkoaB6IaB99\ncVpoIV1xWyhVB2dlbmVyYWxxXGhchnFdVQlzeW1tZXRyaWNVCXN5bW1ldHJpY4ZxXlUDU1BEcV9o\nX4ZxYFUJSGVybWl0aWFucWFoYYZxYlUDSFBEcWNoY4ZxZFUKdHJpYW5ndWxhclUKdHJpYW5ndWxh\ncoZxZWV1YmgsTmgtaFtoLksmaC+IaDBOaDFdcWZoM1gAAAAAaDSJaDV9cWcoaDdoPWgvaEBoQWhE\naEVoSHVoSYl1YlUnTGluZWFyRXF1YXRpb25fY29tcHV0YXRpb25hbFN0b3JhZ2VUeXBlcWhoFymB\ncWl9cWooaBpoGymBcWt9cWwoaB6IaB99cW1oIV1xbihVBGZ1bGxxb2hvhnFwVQRiYW5kcXFocYZx\nclUGcGFja2VkcXNoc4ZxdFULdHJpZGlhZ29uYWxxdWh1hnF2ZXViaCxOaC1obmguSydoL4hoME5o\nMV1xd2gzWAAAAABoNIloNX1xeChoN2g9aC9oQGhBaERoRWhIdWhJiXViVSVMaW5lYXJFcXVhdGlv\nbl9jb21wdXRhdGlvbmFsUHJlY2lzaW9ucXloFymBcXp9cXsoaBpoGymBcXx9cX0oaB6IaB99cX5o\nIV1xfyhVBnNpbmdsZVUGc2luZ2xlhnGAVQZkb3VibGVVBmRvdWJsZYZxgWV1YmgsTmgtaH9oLkso\naC+IaDBOaDFdcYJoM1gAAAAAaDSJaDV9cYMoaDdoPWgvaEBoQWhEaEVoSHVoSYl1YnV9cYRVCGtl\neU9yZGVycYVdcYYoaBZoSmhVaGhoeWVzYmgsfXGHVQxsYWJlbF9zdWZmaXhxiFUBOlUGcHJlZml4\ncYlOVQ1fY2hhbmdlZF9kYXRhcYpOVQRkYXRhcYt9cYxVB19lcnJvcnNxjU5VB2F1dG9faWRxjlUF\naWRfJXNxj3ViVQlodG1sX25hbWVxkFgkAAAATGluZWFyRXF1YXRpb25fY29tcHV0YXRpb25hbEZ1\nbmN0aW9ucZFVD2h0bWxfaW5pdGlhbF9pZHGSWC8AAABpbml0aWFsLWlkX0xpbmVhckVxdWF0aW9u\nX2NvbXB1dGF0aW9uYWxGdW5jdGlvbnGTaDBYJAAAAExpbmVhcmVxdWF0aW9uIGNvbXB1dGF0aW9u\nYWxmdW5jdGlvbnGUVQVmaWVsZHGVaBhoM1UAVQRuYW1lcZZokXViaAQpgXGXfXGYKGgHWCUAAABp\nbml0aWFsLUxpbmVhckVxdWF0aW9uX3NpbXBsZUZ1bmN0aW9ucZloCWNEcml2ZXIuZm9ybXMKTGlu\nZWFyRXF1YXRpb25fc2ltcGxlRm9ybQpxmimBcZt9cZwoaA19cZ1oD4loEGgRaBKJaBNoFCmBcZ4o\nVR1MaW5lYXJFcXVhdGlvbl9zaW1wbGVGdW5jdGlvbnGfaBcpgXGgfXGhKGgaaBspgXGifXGjKGge\niGgffXGkaCFdcaVVBXNvbHZlVQRBWD1ChnGmYXViaCxdcadVBXNvbHZlcahhaC1opWguSyloL4ho\nME5oMV1xqWgzWAAAAABoNIloNX1xqihoN2g9aC9oQGhBaERoRWhIdWhJiXViVRxMaW5lYXJFcXVh\ndGlvbl9zaW1wbGVDb21wbGV4catoFymBcax9ca0oaBpoGymBca59ca8oaB6IaB99cbBoIV1xsSho\nUWhSZXViaCxOaC1osWguSypoL4hoME5oMV1xsmgzWAAAAABoNIloNX1xsyhoN2g9aC9oQGhBaERo\nRWhIdWhJiXViVR9MaW5lYXJFcXVhdGlvbl9zaW1wbGVNYXRyaXhUeXBlcbRoFymBcbV9cbYoaBpo\nGymBcbd9cbgoaB6IaB99cbloIV1xuihoXGhchnG7VQlzeW1tZXRyaWNVCXN5bW1ldHJpY4ZxvGhf\naF+Gcb1oYWhhhnG+aGNoY4Zxv2V1YmgsTmgtaLpoLksraC+IaDBOaDFdccBoM1gAAAAAaDSJaDV9\nccEoaDdoPWgvaEBoQWhEaEVoSHVoSYl1YlUgTGluZWFyRXF1YXRpb25fc2ltcGxlU3RvcmFnZVR5\ncGVxwmgXKYFxw31xxChoGmgbKYFxxX1xxihoHohoH31xx2ghXXHIKGhwaHJodGh2ZXViaCxOaC1o\nyGguSyxoL4hoME5oMV1xyWgzWAAAAABoNIloNX1xyihoN2g9aC9oQGhBaERoRWhIdWhJiXViVR5M\naW5lYXJFcXVhdGlvbl9zaW1wbGVQcmVjaXNpb25xy2gXKYFxzH1xzShoGmgbKYFxzn1xzyhoHoho\nH31x0GghXXHRKGiAaIFldWJoLE5oLWjRaC5LLWgviGgwTmgxXXHSaDNYAAAAAGg0iWg1fXHTKGg3\naD1oL2hAaEFoRGhFaEh1aEmJdWJ1fXHUaIVdcdUoaJ9oq2i0aMJoy2VzYmgsfXHWaIhVATpoiU5o\nik5oi31x12iNTmiOaI91YmiQWB0AAABMaW5lYXJFcXVhdGlvbl9zaW1wbGVGdW5jdGlvbnHYaJJY\nKAAAAGluaXRpYWwtaWRfTGluZWFyRXF1YXRpb25fc2ltcGxlRnVuY3Rpb25x2WgwWB0AAABMaW5l\nYXJlcXVhdGlvbiBzaW1wbGVmdW5jdGlvbnHaaJVooGgzVQBolmjYdWJlVQpNYXRyaXhUeXBlcdtd\ncdwoaAQpgXHdfXHeKGgHWC4AAABpbml0aWFsLUxpbmVhckVxdWF0aW9uX2NvbXB1dGF0aW9uYWxN\nYXRyaXhUeXBlcd9oCWgLaJBYJgAAAExpbmVhckVxdWF0aW9uX2NvbXB1dGF0aW9uYWxNYXRyaXhU\neXBlceBoklgxAAAAaW5pdGlhbC1pZF9MaW5lYXJFcXVhdGlvbl9jb21wdXRhdGlvbmFsTWF0cml4\nVHlwZXHhaDBYJgAAAExpbmVhcmVxdWF0aW9uIGNvbXB1dGF0aW9uYWxtYXRyaXh0eXBlceJolWhW\naDNVAGiWaOB1YmgEKYFx431x5ChoB1gnAAAAaW5pdGlhbC1MaW5lYXJFcXVhdGlvbl9zaW1wbGVN\nYXRyaXhUeXBlceVoCWibaJBYHwAAAExpbmVhckVxdWF0aW9uX3NpbXBsZU1hdHJpeFR5cGVx5miS\nWCoAAABpbml0aWFsLWlkX0xpbmVhckVxdWF0aW9uX3NpbXBsZU1hdHJpeFR5cGVx52gwWB8AAABM\naW5lYXJlcXVhdGlvbiBzaW1wbGVtYXRyaXh0eXBlceholWi1aDNVAGiWaOZ1YmVVC1N0b3JhZ2VU\neXBlceldceooaAQpgXHrfXHsKGgHWC8AAABpbml0aWFsLUxpbmVhckVxdWF0aW9uX2NvbXB1dGF0\naW9uYWxTdG9yYWdlVHlwZXHtaAloC2iQWCcAAABMaW5lYXJFcXVhdGlvbl9jb21wdXRhdGlvbmFs\nU3RvcmFnZVR5cGVx7miSWDIAAABpbml0aWFsLWlkX0xpbmVhckVxdWF0aW9uX2NvbXB1dGF0aW9u\nYWxTdG9yYWdlVHlwZXHvaDBYJwAAAExpbmVhcmVxdWF0aW9uIGNvbXB1dGF0aW9uYWxzdG9yYWdl\ndHlwZXHwaJVoaWgzVQBolmjudWJoBCmBcfF9cfIoaAdYKAAAAGluaXRpYWwtTGluZWFyRXF1YXRp\nb25fc2ltcGxlU3RvcmFnZVR5cGVx82gJaJtokFggAAAATGluZWFyRXF1YXRpb25fc2ltcGxlU3Rv\ncmFnZVR5cGVx9GiSWCsAAABpbml0aWFsLWlkX0xpbmVhckVxdWF0aW9uX3NpbXBsZVN0b3JhZ2VU\neXBlcfVoMFggAAAATGluZWFyZXF1YXRpb24gc2ltcGxlc3RvcmFnZXR5cGVx9miVaMNoM1UAaJZo\n9HViZVUJQXBwX01vZGVscfddcfgoWA0AAABDb21wdXRhdGlvbmFsWBwAAABMaW5lYXJFcXVhdGlv\nbl9jb21wdXRhdGlvbmFshnH5WAYAAABEcml2ZXJYFQAAAExpbmVhckVxdWF0aW9uX3NpbXBsZYZx\n+mVVCVByZWNpc2lvbnH7XXH8KGgEKYFx/X1x/ihoB1gtAAAAaW5pdGlhbC1MaW5lYXJFcXVhdGlv\nbl9jb21wdXRhdGlvbmFsUHJlY2lzaW9ucf9oCWgLaJBYJQAAAExpbmVhckVxdWF0aW9uX2NvbXB1\ndGF0aW9uYWxQcmVjaXNpb25yAAEAAGiSWDAAAABpbml0aWFsLWlkX0xpbmVhckVxdWF0aW9uX2Nv\nbXB1dGF0aW9uYWxQcmVjaXNpb25yAQEAAGgwWCUAAABMaW5lYXJlcXVhdGlvbiBjb21wdXRhdGlv\nbmFscHJlY2lzaW9ucgIBAABolWh6aDNVAGiWagABAAB1YmgEKYFyAwEAAH1yBAEAAChoB1gmAAAA\naW5pdGlhbC1MaW5lYXJFcXVhdGlvbl9zaW1wbGVQcmVjaXNpb25yBQEAAGgJaJtokFgeAAAATGlu\nZWFyRXF1YXRpb25fc2ltcGxlUHJlY2lzaW9ucgYBAABoklgpAAAAaW5pdGlhbC1pZF9MaW5lYXJF\ncXVhdGlvbl9zaW1wbGVQcmVjaXNpb25yBwEAAGgwWB4AAABMaW5lYXJlcXVhdGlvbiBzaW1wbGVw\ncmVjaXNpb25yCAEAAGiVaMxoM1UAaJZqBgEAAHViZVUFRm9ybXNyCQEAAF1yCgEAAChoC2ibZVUH\nQ29tcGxleHILAQAAXXIMAQAAKGgEKYFyDQEAAH1yDgEAAChoB1grAAAAaW5pdGlhbC1MaW5lYXJF\ncXVhdGlvbl9jb21wdXRhdGlvbmFsQ29tcGxleHIPAQAAaAloC2iQWCMAAABMaW5lYXJFcXVhdGlv\nbl9jb21wdXRhdGlvbmFsQ29tcGxleHIQAQAAaJJYLgAAAGluaXRpYWwtaWRfTGluZWFyRXF1YXRp\nb25fY29tcHV0YXRpb25hbENvbXBsZXhyEQEAAGgwWCMAAABMaW5lYXJlcXVhdGlvbiBjb21wdXRh\ndGlvbmFsY29tcGxleHISAQAAaJVoS2gzVQBolmoQAQAAdWJoBCmBchMBAAB9chQBAAAoaAdYJAAA\nAGluaXRpYWwtTGluZWFyRXF1YXRpb25fc2ltcGxlQ29tcGxleHIVAQAAaAlom2iQWBwAAABMaW5l\nYXJFcXVhdGlvbl9zaW1wbGVDb21wbGV4chYBAABoklgnAAAAaW5pdGlhbC1pZF9MaW5lYXJFcXVh\ndGlvbl9zaW1wbGVDb21wbGV4chcBAABoMFgcAAAATGluZWFyZXF1YXRpb24gc2ltcGxlY29tcGxl\neHIYAQAAaJVorGgzVQBolmoWAQAAdWJlVRFRdWVzdGlvbl9hZHZhbmNlZHIZAQAAXXIaAQAAKFUW\nQ29tcHV0YXRpb25hbCBSb3V0aW5lc3IbAQAAVRZTaW1wbGUgRHJpdmVyIFJvdXRpbmVzchwBAABl\ndS4=\n','2012-01-20 10:07:00'),('fc30ff07145c7dad1cac05e5783b451c','ZDVhZDRkNzgyMmUxY2Y1ZmE1Y2FkY2NkNGUxYzM0NmRkNTg1NTJjNTqAAn1xAS4=\n','2012-03-20 15:47:33'),('20b477f4a760acae59b4332268f9bdc1','OTExYjgxNjBjNmUxNjI4YmJjZWU3OTcyOWVhOTFmYWIyOWVmNDNkOTqAAn1xAShVEFF1ZXN0aW9u\nX3Byb2JsZW1xAl1xA1ghAAAAQ29tYmluZSBMaW5lYXJFcXVhdGlvbl9vbmx5IHNvbHZlcQRVHFNv\nbHZlIGEgbGluZWFyIGVxdWF0aW9uIG9ubHlxBYZxBmFVCFJvdXRpbmVzcQdjZGphbmdvLmRiLm1v\nZGVscy5xdWVyeQpRdWVyeVNldApxCCmBcQl9cQooVQVfaXRlcnELTlUKX2Zvcl93cml0ZXEMiVUO\nX3N0aWNreV9maWx0ZXJxDYlVBXF1ZXJ5cQ5jZGphbmdvLmRiLm1vZGVscy5zcWwucXVlcnkKUXVl\ncnkKcQ8pgXEQfXERKFUVYWdncmVnYXRlX3NlbGVjdF9tYXNrcRJOVRdfYWdncmVnYXRlX3NlbGVj\ndF9jYWNoZXETTlUFZXh0cmFxFGNkamFuZ28udXRpbHMuZGF0YXN0cnVjdHVyZXMKU29ydGVkRGlj\ndApxFSmBcRZ9cRdVCGtleU9yZGVycRhdcRlzYlUIam9pbl9tYXBxGn1xGyhOVRtDb21iaW5lX2xp\nbmVhcmVxdWF0aW9uX29ubHlxHE5OdHEdaByFcR5zVRVyZWxhdGVkX3NlbGVjdF9maWVsZHNxH11x\nIFUMZXh0cmFfdGFibGVzcSEpVQZzZWxlY3RxIl1xI1ULcXVvdGVfY2FjaGVxJH1xJVUMcmV2X2pv\naW5fbWFwcSZ9cSdoHGgdc1UMdXNlZF9hbGlhc2VzcShjX19idWlsdGluX18Kc2V0CnEpXXEqaBxh\nhVJxK1UIb3JkZXJfYnlxLF1xLVUIZGlzdGluY3RxLolVDmR1cGVfYXZvaWRhbmNlcS99cTBVCGdy\nb3VwX2J5cTFOVQlhbGlhc19tYXBxMn1xM2gcKGgcaBxOTk5OiXRxNHNVDnNlbGVjdF9yZWxhdGVk\ncTWJVRBkZWZlcnJlZF9sb2FkaW5ncTZoKV2FUnE3iIZxOFUNc2VsZWN0X2ZpZWxkc3E5XXE6VRNf\nZXh0cmFfc2VsZWN0X2NhY2hlcTtOVQltYXhfZGVwdGhxPEsFVRFzdGFuZGFyZF9vcmRlcmluZ3E9\niFUOZXh0cmFfb3JkZXJfYnlxPilVEGRlZmF1bHRfb3JkZXJpbmdxP4hVBnRhYmxlc3FAXXFBaBxh\nVQphZ2dyZWdhdGVzcUJoFSmBcUN9cURoGF1xRXNiVRFleHRyYV9zZWxlY3RfbWFza3FGTlUIbG93\nX21hcmtxR0sAVQ5hbGlhc19yZWZjb3VudHFIfXFJaBxLAXNVE3JlbGF0ZWRfc2VsZWN0X2NvbHNx\nSl1xS1UMZGVmYXVsdF9jb2xzcUyIVRBvcmRlcmluZ19hbGlhc2VzcU1dcU5VBmhhdmluZ3FPY2Rq\nYW5nby5kYi5tb2RlbHMuc3FsLndoZXJlCldoZXJlTm9kZQpxUCmBcVF9cVIoVQljb25uZWN0b3Jx\nU1UDQU5EcVRVB25lZ2F0ZWRxVYlVCGNoaWxkcmVucVZdcVdVD3N1YnRyZWVfcGFyZW50c3FYXXFZ\ndWJVGWluY2x1ZGVkX2luaGVyaXRlZF9tb2RlbHNxWn1xW05oHHNVCXRhYmxlX21hcHFcfXFdaBxd\ncV5oHGFzVQt3aGVyZV9jbGFzc3FfaFBVBW1vZGVscWBjQ29tYmluZS5tb2RlbHMKTGluZWFyRXF1\nYXRpb25fb25seQpxYVUFd2hlcmVxYmhQKYFxY31xZChoU2hUaFWJaFZdcWVoUCmBcWZ9cWcoaFNo\nVGhViWhWXXFoaFApgXFpfXFqKGhTaFRoVYloVl1xayhjZGphbmdvLmRiLm1vZGVscy5zcWwud2hl\ncmUKQ29uc3RyYWludApxbCmBcW19cW4oVQVhbGlhc3FvaBxoYGhhVQpmaWVsZF9uYW1lcXBVBW5v\ndGVzcXFVA2NvbHFyaHF1YlUJaWNvbnRhaW5ziFgFAAAAc29sdmVxc3RxdGFoWF1xdXViYWhYXXF2\ndWJhaFhdcXd1YlUJaGlnaF9tYXJrcXhOVRBmaWx0ZXJfaXNfc3RpY2t5cXmJdWJVA19kYnF6Tmhg\naGFVDV9yZXN1bHRfY2FjaGVxe11xfChjZGphbmdvLmRiLm1vZGVscy5iYXNlCm1vZGVsX3VucGlj\na2xlCnF9aGFdY2RqYW5nby5kYi5tb2RlbHMuYmFzZQpzaW1wbGVfY2xhc3NfZmFjdG9yeQpxfodS\ncX99cYAoVQptYXRyaXhUeXBlcYFYBwAAAGdlbmVyYWxxglULc3RvcmFnZVR5cGVxg1gEAAAAZnVs\nbHGEaHFYIQAAAGRyaXZlciBzaW1wbGUsIHNvbHZlIEEqWCA9IEIgb25seXGFVQZfc3RhdGVxhmNk\namFuZ28uZGIubW9kZWxzLmJhc2UKTW9kZWxTdGF0ZQpxhymBcYh9cYkoVQZhZGRpbmdxiolVAmRi\ncYtVB2RlZmF1bHRxjHViVQN1cmxxjVgrAAAAaHR0cDovL3d3dy5uZXRsaWIub3JnL2xhcGFjay9z\naW5nbGUvc2dlc3YuZnGOVQx0aGVQcmVjaXNpb25xj1gBAAAAc1ULX2luZm9fY2FjaGVxkGh9Y0Ry\naXZlci5tb2RlbHMKUm91dGluZUluZm8KcZFdaH6HUnGSfXGTKFUEaW5mb3GUWG0JAAAgICAgICBT\nVUJST1VUSU5FIFNHRVNWKCBOLCBOUkhTLCBBLCBMREEsIElQSVYsIEIsIExEQiwgSU5GTyApCioK\nKiAgLS0gTEFQQUNLIGRyaXZlciByb3V0aW5lICh2ZXJzaW9uIDMuMikgLS0KKiAgLS0gTEFQQUNL\nIGlzIGEgc29mdHdhcmUgcGFja2FnZSBwcm92aWRlZCBieSBVbml2LiBvZiBUZW5uZXNzZWUsICAg\nIC0tCiogIC0tIFVuaXYuIG9mIENhbGlmb3JuaWEgQmVya2VsZXksIFVuaXYuIG9mIENvbG9yYWRv\nIERlbnZlciBhbmQgTkFHIEx0ZC4uLS0KKiAgICAgTm92ZW1iZXIgMjAwNgoqCiogICAgIC4uIFNj\nYWxhciBBcmd1bWVudHMgLi4KICAgICAgSU5URUdFUiAgICAgICAgICAgIElORk8sIExEQSwgTERC\nLCBOLCBOUkhTCiogICAgIC4uCiogICAgIC4uIEFycmF5IEFyZ3VtZW50cyAuLgogICAgICBJTlRF\nR0VSICAgICAgICAgICAgSVBJViggKiApCiAgICAgIFJFQUwgICAgICAgICAgICAgICBBKCBMREEs\nICogKSwgQiggTERCLCAqICkKKiAgICAgLi4KKgoqICBQdXJwb3NlCiogID09PT09PT0KKgoqICBT\nR0VTViBjb21wdXRlcyB0aGUgc29sdXRpb24gdG8gYSByZWFsIHN5c3RlbSBvZiBsaW5lYXIgZXF1\nYXRpb25zCiogICAgIEEgKiBYID0gQiwKKiAgd2hlcmUgQSBpcyBhbiBOLWJ5LU4gbWF0cml4IGFu\nZCBYIGFuZCBCIGFyZSBOLWJ5LU5SSFMgbWF0cmljZXMuCioKKiAgVGhlIExVIGRlY29tcG9zaXRp\nb24gd2l0aCBwYXJ0aWFsIHBpdm90aW5nIGFuZCByb3cgaW50ZXJjaGFuZ2VzIGlzCiogIHVzZWQg\ndG8gZmFjdG9yIEEgYXMKKiAgICAgQSA9IFAgKiBMICogVSwKKiAgd2hlcmUgUCBpcyBhIHBlcm11\ndGF0aW9uIG1hdHJpeCwgTCBpcyB1bml0IGxvd2VyIHRyaWFuZ3VsYXIsIGFuZCBVIGlzCiogIHVw\ncGVyIHRyaWFuZ3VsYXIuICBUaGUgZmFjdG9yZWQgZm9ybSBvZiBBIGlzIHRoZW4gdXNlZCB0byBz\nb2x2ZSB0aGUKKiAgc3lzdGVtIG9mIGVxdWF0aW9ucyBBICogWCA9IEIuCioKKiAgQXJndW1lbnRz\nCiogID09PT09PT09PQoqCiogIE4gICAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhl\nIG51bWJlciBvZiBsaW5lYXIgZXF1YXRpb25zLCBpLmUuLCB0aGUgb3JkZXIgb2YgdGhlCiogICAg\nICAgICAgbWF0cml4IEEuICBOID49IDAuCioKKiAgTlJIUyAgICAoaW5wdXQpIElOVEVHRVIKKiAg\nICAgICAgICBUaGUgbnVtYmVyIG9mIHJpZ2h0IGhhbmQgc2lkZXMsIGkuZS4sIHRoZSBudW1iZXIg\nb2YgY29sdW1ucwoqICAgICAgICAgIG9mIHRoZSBtYXRyaXggQi4gIE5SSFMgPj0gMC4KKgoqICBB\nICAgICAgIChpbnB1dC9vdXRwdXQpIFJFQUwgYXJyYXksIGRpbWVuc2lvbiAoTERBLE4pCiogICAg\nICAgICAgT24gZW50cnksIHRoZSBOLWJ5LU4gY29lZmZpY2llbnQgbWF0cml4IEEuCiogICAgICAg\nICAgT24gZXhpdCwgdGhlIGZhY3RvcnMgTCBhbmQgVSBmcm9tIHRoZSBmYWN0b3JpemF0aW9uCiog\nICAgICAgICAgQSA9IFAqTCpVOyB0aGUgdW5pdCBkaWFnb25hbCBlbGVtZW50cyBvZiBMIGFyZSBu\nb3Qgc3RvcmVkLgoqCiogIExEQSAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxl\nYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBBLiAgTERBID49IG1heCgxLE4pLgoqCiogIElQ\nSVYgICAgKG91dHB1dCkgSU5URUdFUiBhcnJheSwgZGltZW5zaW9uIChOKQoqICAgICAgICAgIFRo\nZSBwaXZvdCBpbmRpY2VzIHRoYXQgZGVmaW5lIHRoZSBwZXJtdXRhdGlvbiBtYXRyaXggUDsKKiAg\nICAgICAgICByb3cgaSBvZiB0aGUgbWF0cml4IHdhcyBpbnRlcmNoYW5nZWQgd2l0aCByb3cgSVBJ\nVihpKS4KKgoqICBCICAgICAgIChpbnB1dC9vdXRwdXQpIFJFQUwgYXJyYXksIGRpbWVuc2lvbiAo\nTERCLE5SSFMpCiogICAgICAgICAgT24gZW50cnksIHRoZSBOLWJ5LU5SSFMgbWF0cml4IG9mIHJp\nZ2h0IGhhbmQgc2lkZSBtYXRyaXggQi4KKiAgICAgICAgICBPbiBleGl0LCBpZiBJTkZPID0gMCwg\ndGhlIE4tYnktTlJIUyBzb2x1dGlvbiBtYXRyaXggWC4KKgoqICBMREIgICAgIChpbnB1dCkgSU5U\nRUdFUgoqICAgICAgICAgIFRoZSBsZWFkaW5nIGRpbWVuc2lvbiBvZiB0aGUgYXJyYXkgQi4gIExE\nQiA+PSBtYXgoMSxOKS4KKgoqICBJTkZPICAgIChvdXRwdXQpIElOVEVHRVIKKiAgICAgICAgICA9\nIDA6ICBzdWNjZXNzZnVsIGV4aXQKKiAgICAgICAgICA8IDA6ICBpZiBJTkZPID0gLWksIHRoZSBp\nLXRoIGFyZ3VtZW50IGhhZCBhbiBpbGxlZ2FsIHZhbHVlCiogICAgICAgICAgPiAwOiAgaWYgSU5G\nTyA9IGksIFUoaSxpKSBpcyBleGFjdGx5IHplcm8uICBUaGUgZmFjdG9yaXphdGlvbgoqICAgICAg\nICAgICAgICAgIGhhcyBiZWVuIGNvbXBsZXRlZCwgYnV0IHRoZSBmYWN0b3IgVSBpcyBleGFjdGx5\nCiogICAgICAgICAgICAgICAgc2luZ3VsYXIsIHNvIHRoZSBzb2x1dGlvbiBjb3VsZCBub3QgYmUg\nY29tcHV0ZWQuCioKcZVohmiHKYFxln1xlyhoioloi2iMdWJVAmlkcZiKAQFVB3JvdXRpbmVxmVgL\nAAAAc2dlc3ZfMS50eHRxmnViVQdpbmZvX2lkcZuKAQFVC3JvdXRpbmVOYW1lcZxYBAAAAGdlc3Zx\nnWiYigEBdWJofWhhXWh+h1Jxnn1xnyhogVgHAAAAZ2VuZXJhbHGgaINYBAAAAGZ1bGxxoWhxWCEA\nAABkcml2ZXIgc2ltcGxlLCBzb2x2ZSBBKlggPSBCIG9ubHlxomiGaIcpgXGjfXGkKGiKiWiLaIx1\nYmiNWCsAAABodHRwOi8vd3d3Lm5ldGxpYi5vcmcvbGFwYWNrL2RvdWJsZS9kZ2Vzdi5mcaVoj1gB\nAAAAZGiQaH1okV1ofodScaZ9cacoaJRYhQkAACAgICAgIFNVQlJPVVRJTkUgREdFU1YoIE4sIE5S\nSFMsIEEsIExEQSwgSVBJViwgQiwgTERCLCBJTkZPICkKKgoqICAtLSBMQVBBQ0sgZHJpdmVyIHJv\ndXRpbmUgKHZlcnNpb24gMy4yKSAtLQoqICAtLSBMQVBBQ0sgaXMgYSBzb2Z0d2FyZSBwYWNrYWdl\nIHByb3ZpZGVkIGJ5IFVuaXYuIG9mIFRlbm5lc3NlZSwgICAgLS0KKiAgLS0gVW5pdi4gb2YgQ2Fs\naWZvcm5pYSBCZXJrZWxleSwgVW5pdi4gb2YgQ29sb3JhZG8gRGVudmVyIGFuZCBOQUcgTHRkLi4t\nLQoqICAgICBOb3ZlbWJlciAyMDA2CioKKiAgICAgLi4gU2NhbGFyIEFyZ3VtZW50cyAuLgogICAg\nICBJTlRFR0VSICAgICAgICAgICAgSU5GTywgTERBLCBMREIsIE4sIE5SSFMKKiAgICAgLi4KKiAg\nICAgLi4gQXJyYXkgQXJndW1lbnRzIC4uCiAgICAgIElOVEVHRVIgICAgICAgICAgICBJUElWKCAq\nICkKICAgICAgRE9VQkxFIFBSRUNJU0lPTiAgIEEoIExEQSwgKiApLCBCKCBMREIsICogKQoqICAg\nICAuLgoqCiogIFB1cnBvc2UKKiAgPT09PT09PQoqCiogIERHRVNWIGNvbXB1dGVzIHRoZSBzb2x1\ndGlvbiB0byBhIHJlYWwgc3lzdGVtIG9mIGxpbmVhciBlcXVhdGlvbnMKKiAgICAgQSAqIFggPSBC\nLAoqICB3aGVyZSBBIGlzIGFuIE4tYnktTiBtYXRyaXggYW5kIFggYW5kIEIgYXJlIE4tYnktTlJI\nUyBtYXRyaWNlcy4KKgoqICBUaGUgTFUgZGVjb21wb3NpdGlvbiB3aXRoIHBhcnRpYWwgcGl2b3Rp\nbmcgYW5kIHJvdyBpbnRlcmNoYW5nZXMgaXMKKiAgdXNlZCB0byBmYWN0b3IgQSBhcwoqICAgICBB\nID0gUCAqIEwgKiBVLAoqICB3aGVyZSBQIGlzIGEgcGVybXV0YXRpb24gbWF0cml4LCBMIGlzIHVu\naXQgbG93ZXIgdHJpYW5ndWxhciwgYW5kIFUgaXMKKiAgdXBwZXIgdHJpYW5ndWxhci4gIFRoZSBm\nYWN0b3JlZCBmb3JtIG9mIEEgaXMgdGhlbiB1c2VkIHRvIHNvbHZlIHRoZQoqICBzeXN0ZW0gb2Yg\nZXF1YXRpb25zIEEgKiBYID0gQi4KKgoqICBBcmd1bWVudHMKKiAgPT09PT09PT09CioKKiAgTiAg\nICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbnVtYmVyIG9mIGxpbmVhciBlcXVh\ndGlvbnMsIGkuZS4sIHRoZSBvcmRlciBvZiB0aGUKKiAgICAgICAgICBtYXRyaXggQS4gIE4gPj0g\nMC4KKgoqICBOUkhTICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2Yg\ncmlnaHQgaGFuZCBzaWRlcywgaS5lLiwgdGhlIG51bWJlciBvZiBjb2x1bW5zCiogICAgICAgICAg\nb2YgdGhlIG1hdHJpeCBCLiAgTlJIUyA+PSAwLgoqCiogIEEgICAgICAgKGlucHV0L291dHB1dCkg\nRE9VQkxFIFBSRUNJU0lPTiBhcnJheSwgZGltZW5zaW9uIChMREEsTikKKiAgICAgICAgICBPbiBl\nbnRyeSwgdGhlIE4tYnktTiBjb2VmZmljaWVudCBtYXRyaXggQS4KKiAgICAgICAgICBPbiBleGl0\nLCB0aGUgZmFjdG9ycyBMIGFuZCBVIGZyb20gdGhlIGZhY3Rvcml6YXRpb24KKiAgICAgICAgICBB\nID0gUCpMKlU7IHRoZSB1bml0IGRpYWdvbmFsIGVsZW1lbnRzIG9mIEwgYXJlIG5vdCBzdG9yZWQu\nCioKKiAgTERBICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbGVhZGluZyBkaW1l\nbnNpb24gb2YgdGhlIGFycmF5IEEuICBMREEgPj0gbWF4KDEsTikuCioKKiAgSVBJViAgICAob3V0\ncHV0KSBJTlRFR0VSIGFycmF5LCBkaW1lbnNpb24gKE4pCiogICAgICAgICAgVGhlIHBpdm90IGlu\nZGljZXMgdGhhdCBkZWZpbmUgdGhlIHBlcm11dGF0aW9uIG1hdHJpeCBQOwoqICAgICAgICAgIHJv\ndyBpIG9mIHRoZSBtYXRyaXggd2FzIGludGVyY2hhbmdlZCB3aXRoIHJvdyBJUElWKGkpLgoqCiog\nIEIgICAgICAgKGlucHV0L291dHB1dCkgRE9VQkxFIFBSRUNJU0lPTiBhcnJheSwgZGltZW5zaW9u\nIChMREIsTlJIUykKKiAgICAgICAgICBPbiBlbnRyeSwgdGhlIE4tYnktTlJIUyBtYXRyaXggb2Yg\ncmlnaHQgaGFuZCBzaWRlIG1hdHJpeCBCLgoqICAgICAgICAgIE9uIGV4aXQsIGlmIElORk8gPSAw\nLCB0aGUgTi1ieS1OUkhTIHNvbHV0aW9uIG1hdHJpeCBYLgoqCiogIExEQiAgICAgKGlucHV0KSBJ\nTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBCLiAg\nTERCID49IG1heCgxLE4pLgoqCiogIElORk8gICAgKG91dHB1dCkgSU5URUdFUgoqICAgICAgICAg\nID0gMDogIHN1Y2Nlc3NmdWwgZXhpdAoqICAgICAgICAgIDwgMDogIGlmIElORk8gPSAtaSwgdGhl\nIGktdGggYXJndW1lbnQgaGFkIGFuIGlsbGVnYWwgdmFsdWUKKiAgICAgICAgICA+IDA6ICBpZiBJ\nTkZPID0gaSwgVShpLGkpIGlzIGV4YWN0bHkgemVyby4gIFRoZSBmYWN0b3JpemF0aW9uCiogICAg\nICAgICAgICAgICAgaGFzIGJlZW4gY29tcGxldGVkLCBidXQgdGhlIGZhY3RvciBVIGlzIGV4YWN0\nbHkKKiAgICAgICAgICAgICAgICBzaW5ndWxhciwgc28gdGhlIHNvbHV0aW9uIGNvdWxkIG5vdCBi\nZSBjb21wdXRlZC4KKgpxqGiGaIcpgXGpfXGqKGiKiWiLaIx1YmiYigECaJlYCwAAAGRnZXN2XzIu\ndHh0cat1YmibigECaJxYBAAAAGdlc3ZxrGiYigECdWJofWhhXWh+h1JxrX1xrihogVgHAAAAZ2Vu\nZXJhbHGvaINYBAAAAGZ1bGxxsGhxWCEAAABkcml2ZXIgc2ltcGxlLCBzb2x2ZSBBKlggPSBCIG9u\nbHlxsWiGaIcpgXGyfXGzKGiKiWiLaIx1YmiNWCwAAABodHRwOi8vd3d3Lm5ldGxpYi5vcmcvbGFw\nYWNrL2NvbXBsZXgvY2dlc3YuZnG0aI9YAQAAAGNokGh9aJFdaH6HUnG1fXG2KGiUWHYJAAAgICAg\nICBTVUJST1VUSU5FIENHRVNWKCBOLCBOUkhTLCBBLCBMREEsIElQSVYsIEIsIExEQiwgSU5GTyAp\nCioKKiAgLS0gTEFQQUNLIGRyaXZlciByb3V0aW5lICh2ZXJzaW9uIDMuMikgLS0KKiAgLS0gTEFQ\nQUNLIGlzIGEgc29mdHdhcmUgcGFja2FnZSBwcm92aWRlZCBieSBVbml2LiBvZiBUZW5uZXNzZWUs\nICAgIC0tCiogIC0tIFVuaXYuIG9mIENhbGlmb3JuaWEgQmVya2VsZXksIFVuaXYuIG9mIENvbG9y\nYWRvIERlbnZlciBhbmQgTkFHIEx0ZC4uLS0KKiAgICAgTm92ZW1iZXIgMjAwNgoqCiogICAgIC4u\nIFNjYWxhciBBcmd1bWVudHMgLi4KICAgICAgSU5URUdFUiAgICAgICAgICAgIElORk8sIExEQSwg\nTERCLCBOLCBOUkhTCiogICAgIC4uCiogICAgIC4uIEFycmF5IEFyZ3VtZW50cyAuLgogICAgICBJ\nTlRFR0VSICAgICAgICAgICAgSVBJViggKiApCiAgICAgIENPTVBMRVggICAgICAgICAgICBBKCBM\nREEsICogKSwgQiggTERCLCAqICkKKiAgICAgLi4KKgoqICBQdXJwb3NlCiogID09PT09PT0KKgoq\nICBDR0VTViBjb21wdXRlcyB0aGUgc29sdXRpb24gdG8gYSBjb21wbGV4IHN5c3RlbSBvZiBsaW5l\nYXIgZXF1YXRpb25zCiogICAgIEEgKiBYID0gQiwKKiAgd2hlcmUgQSBpcyBhbiBOLWJ5LU4gbWF0\ncml4IGFuZCBYIGFuZCBCIGFyZSBOLWJ5LU5SSFMgbWF0cmljZXMuCioKKiAgVGhlIExVIGRlY29t\ncG9zaXRpb24gd2l0aCBwYXJ0aWFsIHBpdm90aW5nIGFuZCByb3cgaW50ZXJjaGFuZ2VzIGlzCiog\nIHVzZWQgdG8gZmFjdG9yIEEgYXMKKiAgICAgQSA9IFAgKiBMICogVSwKKiAgd2hlcmUgUCBpcyBh\nIHBlcm11dGF0aW9uIG1hdHJpeCwgTCBpcyB1bml0IGxvd2VyIHRyaWFuZ3VsYXIsIGFuZCBVIGlz\nCiogIHVwcGVyIHRyaWFuZ3VsYXIuICBUaGUgZmFjdG9yZWQgZm9ybSBvZiBBIGlzIHRoZW4gdXNl\nZCB0byBzb2x2ZSB0aGUKKiAgc3lzdGVtIG9mIGVxdWF0aW9ucyBBICogWCA9IEIuCioKKiAgQXJn\ndW1lbnRzCiogID09PT09PT09PQoqCiogIE4gICAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAg\nICAgVGhlIG51bWJlciBvZiBsaW5lYXIgZXF1YXRpb25zLCBpLmUuLCB0aGUgb3JkZXIgb2YgdGhl\nCiogICAgICAgICAgbWF0cml4IEEuICBOID49IDAuCioKKiAgTlJIUyAgICAoaW5wdXQpIElOVEVH\nRVIKKiAgICAgICAgICBUaGUgbnVtYmVyIG9mIHJpZ2h0IGhhbmQgc2lkZXMsIGkuZS4sIHRoZSBu\ndW1iZXIgb2YgY29sdW1ucwoqICAgICAgICAgIG9mIHRoZSBtYXRyaXggQi4gIE5SSFMgPj0gMC4K\nKgoqICBBICAgICAgIChpbnB1dC9vdXRwdXQpIENPTVBMRVggYXJyYXksIGRpbWVuc2lvbiAoTERB\nLE4pCiogICAgICAgICAgT24gZW50cnksIHRoZSBOLWJ5LU4gY29lZmZpY2llbnQgbWF0cml4IEEu\nCiogICAgICAgICAgT24gZXhpdCwgdGhlIGZhY3RvcnMgTCBhbmQgVSBmcm9tIHRoZSBmYWN0b3Jp\nemF0aW9uCiogICAgICAgICAgQSA9IFAqTCpVOyB0aGUgdW5pdCBkaWFnb25hbCBlbGVtZW50cyBv\nZiBMIGFyZSBub3Qgc3RvcmVkLgoqCiogIExEQSAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAg\nICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBBLiAgTERBID49IG1heCgxLE4p\nLgoqCiogIElQSVYgICAgKG91dHB1dCkgSU5URUdFUiBhcnJheSwgZGltZW5zaW9uIChOKQoqICAg\nICAgICAgIFRoZSBwaXZvdCBpbmRpY2VzIHRoYXQgZGVmaW5lIHRoZSBwZXJtdXRhdGlvbiBtYXRy\naXggUDsKKiAgICAgICAgICByb3cgaSBvZiB0aGUgbWF0cml4IHdhcyBpbnRlcmNoYW5nZWQgd2l0\naCByb3cgSVBJVihpKS4KKgoqICBCICAgICAgIChpbnB1dC9vdXRwdXQpIENPTVBMRVggYXJyYXks\nIGRpbWVuc2lvbiAoTERCLE5SSFMpCiogICAgICAgICAgT24gZW50cnksIHRoZSBOLWJ5LU5SSFMg\nbWF0cml4IG9mIHJpZ2h0IGhhbmQgc2lkZSBtYXRyaXggQi4KKiAgICAgICAgICBPbiBleGl0LCBp\nZiBJTkZPID0gMCwgdGhlIE4tYnktTlJIUyBzb2x1dGlvbiBtYXRyaXggWC4KKgoqICBMREIgICAg\nIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBsZWFkaW5nIGRpbWVuc2lvbiBvZiB0aGUg\nYXJyYXkgQi4gIExEQiA+PSBtYXgoMSxOKS4KKgoqICBJTkZPICAgIChvdXRwdXQpIElOVEVHRVIK\nKiAgICAgICAgICA9IDA6ICBzdWNjZXNzZnVsIGV4aXQKKiAgICAgICAgICA8IDA6ICBpZiBJTkZP\nID0gLWksIHRoZSBpLXRoIGFyZ3VtZW50IGhhZCBhbiBpbGxlZ2FsIHZhbHVlCiogICAgICAgICAg\nPiAwOiAgaWYgSU5GTyA9IGksIFUoaSxpKSBpcyBleGFjdGx5IHplcm8uICBUaGUgZmFjdG9yaXph\ndGlvbgoqICAgICAgICAgICAgICAgIGhhcyBiZWVuIGNvbXBsZXRlZCwgYnV0IHRoZSBmYWN0b3Ig\nVSBpcyBleGFjdGx5CiogICAgICAgICAgICAgICAgc2luZ3VsYXIsIHNvIHRoZSBzb2x1dGlvbiBj\nb3VsZCBub3QgYmUgY29tcHV0ZWQuCioKcbdohmiHKYFxuH1xuShoioloi2iMdWJomIoBA2iZWAsA\nAABjZ2Vzdl8zLnR4dHG6dWJom4oBA2icWAQAAABnZXN2cbtomIoBA3ViaH1oYV1ofodScbx9cb0o\naIFYBwAAAGdlbmVyYWxxvmiDWAQAAABmdWxscb9ocVghAAAAZHJpdmVyIHNpbXBsZSwgc29sdmUg\nQSpYID0gQiBvbmx5ccBohmiHKYFxwX1xwihoioloi2iMdWJojVguAAAAaHR0cDovL3d3dy5uZXRs\naWIub3JnL2xhcGFjay9jb21wbGV4MTYvemdlc3YuZnHDaI9YAQAAAHpokGh9aJFdaH6HUnHEfXHF\nKGiUWHwJAAAgICAgICBTVUJST1VUSU5FIFpHRVNWKCBOLCBOUkhTLCBBLCBMREEsIElQSVYsIEIs\nIExEQiwgSU5GTyApCioKKiAgLS0gTEFQQUNLIGRyaXZlciByb3V0aW5lICh2ZXJzaW9uIDMuMikg\nLS0KKiAgLS0gTEFQQUNLIGlzIGEgc29mdHdhcmUgcGFja2FnZSBwcm92aWRlZCBieSBVbml2LiBv\nZiBUZW5uZXNzZWUsICAgIC0tCiogIC0tIFVuaXYuIG9mIENhbGlmb3JuaWEgQmVya2VsZXksIFVu\naXYuIG9mIENvbG9yYWRvIERlbnZlciBhbmQgTkFHIEx0ZC4uLS0KKiAgICAgTm92ZW1iZXIgMjAw\nNgoqCiogICAgIC4uIFNjYWxhciBBcmd1bWVudHMgLi4KICAgICAgSU5URUdFUiAgICAgICAgICAg\nIElORk8sIExEQSwgTERCLCBOLCBOUkhTCiogICAgIC4uCiogICAgIC4uIEFycmF5IEFyZ3VtZW50\ncyAuLgogICAgICBJTlRFR0VSICAgICAgICAgICAgSVBJViggKiApCiAgICAgIENPTVBMRVgqMTYg\nICAgICAgICBBKCBMREEsICogKSwgQiggTERCLCAqICkKKiAgICAgLi4KKgoqICBQdXJwb3NlCiog\nID09PT09PT0KKgoqICBaR0VTViBjb21wdXRlcyB0aGUgc29sdXRpb24gdG8gYSBjb21wbGV4IHN5\nc3RlbSBvZiBsaW5lYXIgZXF1YXRpb25zCiogICAgIEEgKiBYID0gQiwKKiAgd2hlcmUgQSBpcyBh\nbiBOLWJ5LU4gbWF0cml4IGFuZCBYIGFuZCBCIGFyZSBOLWJ5LU5SSFMgbWF0cmljZXMuCioKKiAg\nVGhlIExVIGRlY29tcG9zaXRpb24gd2l0aCBwYXJ0aWFsIHBpdm90aW5nIGFuZCByb3cgaW50ZXJj\naGFuZ2VzIGlzCiogIHVzZWQgdG8gZmFjdG9yIEEgYXMKKiAgICAgQSA9IFAgKiBMICogVSwKKiAg\nd2hlcmUgUCBpcyBhIHBlcm11dGF0aW9uIG1hdHJpeCwgTCBpcyB1bml0IGxvd2VyIHRyaWFuZ3Vs\nYXIsIGFuZCBVIGlzCiogIHVwcGVyIHRyaWFuZ3VsYXIuICBUaGUgZmFjdG9yZWQgZm9ybSBvZiBB\nIGlzIHRoZW4gdXNlZCB0byBzb2x2ZSB0aGUKKiAgc3lzdGVtIG9mIGVxdWF0aW9ucyBBICogWCA9\nIEIuCioKKiAgQXJndW1lbnRzCiogID09PT09PT09PQoqCiogIE4gICAgICAgKGlucHV0KSBJTlRF\nR0VSCiogICAgICAgICAgVGhlIG51bWJlciBvZiBsaW5lYXIgZXF1YXRpb25zLCBpLmUuLCB0aGUg\nb3JkZXIgb2YgdGhlCiogICAgICAgICAgbWF0cml4IEEuICBOID49IDAuCioKKiAgTlJIUyAgICAo\naW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbnVtYmVyIG9mIHJpZ2h0IGhhbmQgc2lkZXMs\nIGkuZS4sIHRoZSBudW1iZXIgb2YgY29sdW1ucwoqICAgICAgICAgIG9mIHRoZSBtYXRyaXggQi4g\nIE5SSFMgPj0gMC4KKgoqICBBICAgICAgIChpbnB1dC9vdXRwdXQpIENPTVBMRVgqMTYgYXJyYXks\nIGRpbWVuc2lvbiAoTERBLE4pCiogICAgICAgICAgT24gZW50cnksIHRoZSBOLWJ5LU4gY29lZmZp\nY2llbnQgbWF0cml4IEEuCiogICAgICAgICAgT24gZXhpdCwgdGhlIGZhY3RvcnMgTCBhbmQgVSBm\ncm9tIHRoZSBmYWN0b3JpemF0aW9uCiogICAgICAgICAgQSA9IFAqTCpVOyB0aGUgdW5pdCBkaWFn\nb25hbCBlbGVtZW50cyBvZiBMIGFyZSBub3Qgc3RvcmVkLgoqCiogIExEQSAgICAgKGlucHV0KSBJ\nTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBBLiAg\nTERBID49IG1heCgxLE4pLgoqCiogIElQSVYgICAgKG91dHB1dCkgSU5URUdFUiBhcnJheSwgZGlt\nZW5zaW9uIChOKQoqICAgICAgICAgIFRoZSBwaXZvdCBpbmRpY2VzIHRoYXQgZGVmaW5lIHRoZSBw\nZXJtdXRhdGlvbiBtYXRyaXggUDsKKiAgICAgICAgICByb3cgaSBvZiB0aGUgbWF0cml4IHdhcyBp\nbnRlcmNoYW5nZWQgd2l0aCByb3cgSVBJVihpKS4KKgoqICBCICAgICAgIChpbnB1dC9vdXRwdXQp\nIENPTVBMRVgqMTYgYXJyYXksIGRpbWVuc2lvbiAoTERCLE5SSFMpCiogICAgICAgICAgT24gZW50\ncnksIHRoZSBOLWJ5LU5SSFMgbWF0cml4IG9mIHJpZ2h0IGhhbmQgc2lkZSBtYXRyaXggQi4KKiAg\nICAgICAgICBPbiBleGl0LCBpZiBJTkZPID0gMCwgdGhlIE4tYnktTlJIUyBzb2x1dGlvbiBtYXRy\naXggWC4KKgoqICBMREIgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBsZWFkaW5n\nIGRpbWVuc2lvbiBvZiB0aGUgYXJyYXkgQi4gIExEQiA+PSBtYXgoMSxOKS4KKgoqICBJTkZPICAg\nIChvdXRwdXQpIElOVEVHRVIKKiAgICAgICAgICA9IDA6ICBzdWNjZXNzZnVsIGV4aXQKKiAgICAg\nICAgICA8IDA6ICBpZiBJTkZPID0gLWksIHRoZSBpLXRoIGFyZ3VtZW50IGhhZCBhbiBpbGxlZ2Fs\nIHZhbHVlCiogICAgICAgICAgPiAwOiAgaWYgSU5GTyA9IGksIFUoaSxpKSBpcyBleGFjdGx5IHpl\ncm8uICBUaGUgZmFjdG9yaXphdGlvbgoqICAgICAgICAgICAgICAgIGhhcyBiZWVuIGNvbXBsZXRl\nZCwgYnV0IHRoZSBmYWN0b3IgVSBpcyBleGFjdGx5CiogICAgICAgICAgICAgICAgc2luZ3VsYXIs\nIHNvIHRoZSBzb2x1dGlvbiBjb3VsZCBub3QgYmUgY29tcHV0ZWQuCioKccZohmiHKYFxx31xyCho\nioloi2iMdWJomIoBBGiZWAsAAAB6Z2Vzdl80LnR4dHHJdWJom4oBBGicWAQAAABnZXN2ccpomIoB\nBHViaH1oYV1ofodScct9ccwoaIFYBwAAAGdlbmVyYWxxzWiDWAQAAABiYW5kcc5ocVghAAAAZHJp\ndmVyIHNpbXBsZSwgc29sdmUgQSpYID0gQiBvbmx5cc9ohmiHKYFx0H1x0Shoioloi2iMdWJojVgr\nAAAAaHR0cDovL3d3dy5uZXRsaWIub3JnL2xhcGFjay9zaW5nbGUvc2dic3YuZnHSaI9YAQAAAHNo\nkGh9aJFdaH6HUnHTfXHUKGiUWFAMAAAgICAgICBTVUJST1VUSU5FIFNHQlNWKCBOLCBLTCwgS1Us\nIE5SSFMsIEFCLCBMREFCLCBJUElWLCBCLCBMREIsIElORk8gKQoqCiogIC0tIExBUEFDSyBkcml2\nZXIgcm91dGluZSAodmVyc2lvbiAzLjIpIC0tCiogIC0tIExBUEFDSyBpcyBhIHNvZnR3YXJlIHBh\nY2thZ2UgcHJvdmlkZWQgYnkgVW5pdi4gb2YgVGVubmVzc2VlLCAgICAtLQoqICAtLSBVbml2LiBv\nZiBDYWxpZm9ybmlhIEJlcmtlbGV5LCBVbml2LiBvZiBDb2xvcmFkbyBEZW52ZXIgYW5kIE5BRyBM\ndGQuLi0tCiogICAgIE5vdmVtYmVyIDIwMDYKKgoqICAgICAuLiBTY2FsYXIgQXJndW1lbnRzIC4u\nCiAgICAgIElOVEVHRVIgICAgICAgICAgICBJTkZPLCBLTCwgS1UsIExEQUIsIExEQiwgTiwgTlJI\nUwoqICAgICAuLgoqICAgICAuLiBBcnJheSBBcmd1bWVudHMgLi4KICAgICAgSU5URUdFUiAgICAg\nICAgICAgIElQSVYoICogKQogICAgICBSRUFMICAgICAgICAgICAgICAgQUIoIExEQUIsICogKSwg\nQiggTERCLCAqICkKKiAgICAgLi4KKgoqICBQdXJwb3NlCiogID09PT09PT0KKgoqICBTR0JTViBj\nb21wdXRlcyB0aGUgc29sdXRpb24gdG8gYSByZWFsIHN5c3RlbSBvZiBsaW5lYXIgZXF1YXRpb25z\nCiogIEEgKiBYID0gQiwgd2hlcmUgQSBpcyBhIGJhbmQgbWF0cml4IG9mIG9yZGVyIE4gd2l0aCBL\nTCBzdWJkaWFnb25hbHMKKiAgYW5kIEtVIHN1cGVyZGlhZ29uYWxzLCBhbmQgWCBhbmQgQiBhcmUg\nTi1ieS1OUkhTIG1hdHJpY2VzLgoqCiogIFRoZSBMVSBkZWNvbXBvc2l0aW9uIHdpdGggcGFydGlh\nbCBwaXZvdGluZyBhbmQgcm93IGludGVyY2hhbmdlcyBpcwoqICB1c2VkIHRvIGZhY3RvciBBIGFz\nIEEgPSBMICogVSwgd2hlcmUgTCBpcyBhIHByb2R1Y3Qgb2YgcGVybXV0YXRpb24KKiAgYW5kIHVu\naXQgbG93ZXIgdHJpYW5ndWxhciBtYXRyaWNlcyB3aXRoIEtMIHN1YmRpYWdvbmFscywgYW5kIFUg\naXMKKiAgdXBwZXIgdHJpYW5ndWxhciB3aXRoIEtMK0tVIHN1cGVyZGlhZ29uYWxzLiAgVGhlIGZh\nY3RvcmVkIGZvcm0gb2YgQQoqICBpcyB0aGVuIHVzZWQgdG8gc29sdmUgdGhlIHN5c3RlbSBvZiBl\ncXVhdGlvbnMgQSAqIFggPSBCLgoqCiogIEFyZ3VtZW50cwoqICA9PT09PT09PT0KKgoqICBOICAg\nICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2YgbGluZWFyIGVxdWF0\naW9ucywgaS5lLiwgdGhlIG9yZGVyIG9mIHRoZQoqICAgICAgICAgIG1hdHJpeCBBLiAgTiA+PSAw\nLgoqCiogIEtMICAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG51bWJlciBvZiBz\ndWJkaWFnb25hbHMgd2l0aGluIHRoZSBiYW5kIG9mIEEuICBLTCA+PSAwLgoqCiogIEtVICAgICAg\nKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG51bWJlciBvZiBzdXBlcmRpYWdvbmFscyB3\naXRoaW4gdGhlIGJhbmQgb2YgQS4gIEtVID49IDAuCioKKiAgTlJIUyAgICAoaW5wdXQpIElOVEVH\nRVIKKiAgICAgICAgICBUaGUgbnVtYmVyIG9mIHJpZ2h0IGhhbmQgc2lkZXMsIGkuZS4sIHRoZSBu\ndW1iZXIgb2YgY29sdW1ucwoqICAgICAgICAgIG9mIHRoZSBtYXRyaXggQi4gIE5SSFMgPj0gMC4K\nKgoqICBBQiAgICAgIChpbnB1dC9vdXRwdXQpIFJFQUwgYXJyYXksIGRpbWVuc2lvbiAoTERBQixO\nKQoqICAgICAgICAgIE9uIGVudHJ5LCB0aGUgbWF0cml4IEEgaW4gYmFuZCBzdG9yYWdlLCBpbiBy\nb3dzIEtMKzEgdG8KKiAgICAgICAgICAyKktMK0tVKzE7IHJvd3MgMSB0byBLTCBvZiB0aGUgYXJy\nYXkgbmVlZCBub3QgYmUgc2V0LgoqICAgICAgICAgIFRoZSBqLXRoIGNvbHVtbiBvZiBBIGlzIHN0\nb3JlZCBpbiB0aGUgai10aCBjb2x1bW4gb2YgdGhlCiogICAgICAgICAgYXJyYXkgQUIgYXMgZm9s\nbG93czoKKiAgICAgICAgICBBQihLTCtLVSsxK2ktaixqKSA9IEEoaSxqKSBmb3IgbWF4KDEsai1L\nVSk8PWk8PW1pbihOLGorS0wpCiogICAgICAgICAgT24gZXhpdCwgZGV0YWlscyBvZiB0aGUgZmFj\ndG9yaXphdGlvbjogVSBpcyBzdG9yZWQgYXMgYW4KKiAgICAgICAgICB1cHBlciB0cmlhbmd1bGFy\nIGJhbmQgbWF0cml4IHdpdGggS0wrS1Ugc3VwZXJkaWFnb25hbHMgaW4KKiAgICAgICAgICByb3dz\nIDEgdG8gS0wrS1UrMSwgYW5kIHRoZSBtdWx0aXBsaWVycyB1c2VkIGR1cmluZyB0aGUKKiAgICAg\nICAgICBmYWN0b3JpemF0aW9uIGFyZSBzdG9yZWQgaW4gcm93cyBLTCtLVSsyIHRvIDIqS0wrS1Ur\nMS4KKiAgICAgICAgICBTZWUgYmVsb3cgZm9yIGZ1cnRoZXIgZGV0YWlscy4KKgoqICBMREFCICAg\nIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBsZWFkaW5nIGRpbWVuc2lvbiBvZiB0aGUg\nYXJyYXkgQUIuICBMREFCID49IDIqS0wrS1UrMS4KKgoqICBJUElWICAgIChvdXRwdXQpIElOVEVH\nRVIgYXJyYXksIGRpbWVuc2lvbiAoTikKKiAgICAgICAgICBUaGUgcGl2b3QgaW5kaWNlcyB0aGF0\nIGRlZmluZSB0aGUgcGVybXV0YXRpb24gbWF0cml4IFA7CiogICAgICAgICAgcm93IGkgb2YgdGhl\nIG1hdHJpeCB3YXMgaW50ZXJjaGFuZ2VkIHdpdGggcm93IElQSVYoaSkuCioKKiAgQiAgICAgICAo\naW5wdXQvb3V0cHV0KSBSRUFMIGFycmF5LCBkaW1lbnNpb24gKExEQixOUkhTKQoqICAgICAgICAg\nIE9uIGVudHJ5LCB0aGUgTi1ieS1OUkhTIHJpZ2h0IGhhbmQgc2lkZSBtYXRyaXggQi4KKiAgICAg\nICAgICBPbiBleGl0LCBpZiBJTkZPID0gMCwgdGhlIE4tYnktTlJIUyBzb2x1dGlvbiBtYXRyaXgg\nWC4KKgoqICBMREIgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBsZWFkaW5nIGRp\nbWVuc2lvbiBvZiB0aGUgYXJyYXkgQi4gIExEQiA+PSBtYXgoMSxOKS4KKgoqICBJTkZPICAgIChv\ndXRwdXQpIElOVEVHRVIKKiAgICAgICAgICA9IDA6ICBzdWNjZXNzZnVsIGV4aXQKKiAgICAgICAg\nICA8IDA6ICBpZiBJTkZPID0gLWksIHRoZSBpLXRoIGFyZ3VtZW50IGhhZCBhbiBpbGxlZ2FsIHZh\nbHVlCiogICAgICAgICAgPiAwOiAgaWYgSU5GTyA9IGksIFUoaSxpKSBpcyBleGFjdGx5IHplcm8u\nICBUaGUgZmFjdG9yaXphdGlvbgoqICAgICAgICAgICAgICAgIGhhcyBiZWVuIGNvbXBsZXRlZCwg\nYnV0IHRoZSBmYWN0b3IgVSBpcyBleGFjdGx5CiogICAgICAgICAgICAgICAgc2luZ3VsYXIsIGFu\nZCB0aGUgc29sdXRpb24gaGFzIG5vdCBiZWVuIGNvbXB1dGVkLgoqCnHVaIZohymBcdZ9cdcoaIqJ\naItojHViaJiKAQVomVgLAAAAc2dic3ZfNS50eHRx2HViaJuKAQVonFgEAAAAZ2JzdnHZaJiKAQV1\nYmh9aGFdaH6HUnHafXHbKGiBWAcAAABnZW5lcmFscdxog1gEAAAAYmFuZHHdaHFYIQAAAGRyaXZl\nciBzaW1wbGUsIHNvbHZlIEEqWCA9IEIgb25seXHeaIZohymBcd99ceAoaIqJaItojHViaI1YKwAA\nAGh0dHA6Ly93d3cubmV0bGliLm9yZy9sYXBhY2svZG91YmxlL2RnYnN2LmZx4WiPWAEAAABkaJBo\nfWiRXWh+h1Jx4n1x4yholFhoDAAAICAgICAgU1VCUk9VVElORSBER0JTViggTiwgS0wsIEtVLCBO\nUkhTLCBBQiwgTERBQiwgSVBJViwgQiwgTERCLCBJTkZPICkKKgoqICAtLSBMQVBBQ0sgZHJpdmVy\nIHJvdXRpbmUgKHZlcnNpb24gMy4yKSAtLQoqICAtLSBMQVBBQ0sgaXMgYSBzb2Z0d2FyZSBwYWNr\nYWdlIHByb3ZpZGVkIGJ5IFVuaXYuIG9mIFRlbm5lc3NlZSwgICAgLS0KKiAgLS0gVW5pdi4gb2Yg\nQ2FsaWZvcm5pYSBCZXJrZWxleSwgVW5pdi4gb2YgQ29sb3JhZG8gRGVudmVyIGFuZCBOQUcgTHRk\nLi4tLQoqICAgICBOb3ZlbWJlciAyMDA2CioKKiAgICAgLi4gU2NhbGFyIEFyZ3VtZW50cyAuLgog\nICAgICBJTlRFR0VSICAgICAgICAgICAgSU5GTywgS0wsIEtVLCBMREFCLCBMREIsIE4sIE5SSFMK\nKiAgICAgLi4KKiAgICAgLi4gQXJyYXkgQXJndW1lbnRzIC4uCiAgICAgIElOVEVHRVIgICAgICAg\nICAgICBJUElWKCAqICkKICAgICAgRE9VQkxFIFBSRUNJU0lPTiAgIEFCKCBMREFCLCAqICksIEIo\nIExEQiwgKiApCiogICAgIC4uCioKKiAgUHVycG9zZQoqICA9PT09PT09CioKKiAgREdCU1YgY29t\ncHV0ZXMgdGhlIHNvbHV0aW9uIHRvIGEgcmVhbCBzeXN0ZW0gb2YgbGluZWFyIGVxdWF0aW9ucwoq\nICBBICogWCA9IEIsIHdoZXJlIEEgaXMgYSBiYW5kIG1hdHJpeCBvZiBvcmRlciBOIHdpdGggS0wg\nc3ViZGlhZ29uYWxzCiogIGFuZCBLVSBzdXBlcmRpYWdvbmFscywgYW5kIFggYW5kIEIgYXJlIE4t\nYnktTlJIUyBtYXRyaWNlcy4KKgoqICBUaGUgTFUgZGVjb21wb3NpdGlvbiB3aXRoIHBhcnRpYWwg\ncGl2b3RpbmcgYW5kIHJvdyBpbnRlcmNoYW5nZXMgaXMKKiAgdXNlZCB0byBmYWN0b3IgQSBhcyBB\nID0gTCAqIFUsIHdoZXJlIEwgaXMgYSBwcm9kdWN0IG9mIHBlcm11dGF0aW9uCiogIGFuZCB1bml0\nIGxvd2VyIHRyaWFuZ3VsYXIgbWF0cmljZXMgd2l0aCBLTCBzdWJkaWFnb25hbHMsIGFuZCBVIGlz\nCiogIHVwcGVyIHRyaWFuZ3VsYXIgd2l0aCBLTCtLVSBzdXBlcmRpYWdvbmFscy4gIFRoZSBmYWN0\nb3JlZCBmb3JtIG9mIEEKKiAgaXMgdGhlbiB1c2VkIHRvIHNvbHZlIHRoZSBzeXN0ZW0gb2YgZXF1\nYXRpb25zIEEgKiBYID0gQi4KKgoqICBBcmd1bWVudHMKKiAgPT09PT09PT09CioKKiAgTiAgICAg\nICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbnVtYmVyIG9mIGxpbmVhciBlcXVhdGlv\nbnMsIGkuZS4sIHRoZSBvcmRlciBvZiB0aGUKKiAgICAgICAgICBtYXRyaXggQS4gIE4gPj0gMC4K\nKgoqICBLTCAgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2Ygc3Vi\nZGlhZ29uYWxzIHdpdGhpbiB0aGUgYmFuZCBvZiBBLiAgS0wgPj0gMC4KKgoqICBLVSAgICAgIChp\nbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2Ygc3VwZXJkaWFnb25hbHMgd2l0\naGluIHRoZSBiYW5kIG9mIEEuICBLVSA+PSAwLgoqCiogIE5SSFMgICAgKGlucHV0KSBJTlRFR0VS\nCiogICAgICAgICAgVGhlIG51bWJlciBvZiByaWdodCBoYW5kIHNpZGVzLCBpLmUuLCB0aGUgbnVt\nYmVyIG9mIGNvbHVtbnMKKiAgICAgICAgICBvZiB0aGUgbWF0cml4IEIuICBOUkhTID49IDAuCioK\nKiAgQUIgICAgICAoaW5wdXQvb3V0cHV0KSBET1VCTEUgUFJFQ0lTSU9OIGFycmF5LCBkaW1lbnNp\nb24gKExEQUIsTikKKiAgICAgICAgICBPbiBlbnRyeSwgdGhlIG1hdHJpeCBBIGluIGJhbmQgc3Rv\ncmFnZSwgaW4gcm93cyBLTCsxIHRvCiogICAgICAgICAgMipLTCtLVSsxOyByb3dzIDEgdG8gS0wg\nb2YgdGhlIGFycmF5IG5lZWQgbm90IGJlIHNldC4KKiAgICAgICAgICBUaGUgai10aCBjb2x1bW4g\nb2YgQSBpcyBzdG9yZWQgaW4gdGhlIGotdGggY29sdW1uIG9mIHRoZQoqICAgICAgICAgIGFycmF5\nIEFCIGFzIGZvbGxvd3M6CiogICAgICAgICAgQUIoS0wrS1UrMStpLWosaikgPSBBKGksaikgZm9y\nIG1heCgxLGotS1UpPD1pPD1taW4oTixqK0tMKQoqICAgICAgICAgIE9uIGV4aXQsIGRldGFpbHMg\nb2YgdGhlIGZhY3Rvcml6YXRpb246IFUgaXMgc3RvcmVkIGFzIGFuCiogICAgICAgICAgdXBwZXIg\ndHJpYW5ndWxhciBiYW5kIG1hdHJpeCB3aXRoIEtMK0tVIHN1cGVyZGlhZ29uYWxzIGluCiogICAg\nICAgICAgcm93cyAxIHRvIEtMK0tVKzEsIGFuZCB0aGUgbXVsdGlwbGllcnMgdXNlZCBkdXJpbmcg\ndGhlCiogICAgICAgICAgZmFjdG9yaXphdGlvbiBhcmUgc3RvcmVkIGluIHJvd3MgS0wrS1UrMiB0\nbyAyKktMK0tVKzEuCiogICAgICAgICAgU2VlIGJlbG93IGZvciBmdXJ0aGVyIGRldGFpbHMuCioK\nKiAgTERBQiAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbGVhZGluZyBkaW1lbnNp\nb24gb2YgdGhlIGFycmF5IEFCLiAgTERBQiA+PSAyKktMK0tVKzEuCioKKiAgSVBJViAgICAob3V0\ncHV0KSBJTlRFR0VSIGFycmF5LCBkaW1lbnNpb24gKE4pCiogICAgICAgICAgVGhlIHBpdm90IGlu\nZGljZXMgdGhhdCBkZWZpbmUgdGhlIHBlcm11dGF0aW9uIG1hdHJpeCBQOwoqICAgICAgICAgIHJv\ndyBpIG9mIHRoZSBtYXRyaXggd2FzIGludGVyY2hhbmdlZCB3aXRoIHJvdyBJUElWKGkpLgoqCiog\nIEIgICAgICAgKGlucHV0L291dHB1dCkgRE9VQkxFIFBSRUNJU0lPTiBhcnJheSwgZGltZW5zaW9u\nIChMREIsTlJIUykKKiAgICAgICAgICBPbiBlbnRyeSwgdGhlIE4tYnktTlJIUyByaWdodCBoYW5k\nIHNpZGUgbWF0cml4IEIuCiogICAgICAgICAgT24gZXhpdCwgaWYgSU5GTyA9IDAsIHRoZSBOLWJ5\nLU5SSFMgc29sdXRpb24gbWF0cml4IFguCioKKiAgTERCICAgICAoaW5wdXQpIElOVEVHRVIKKiAg\nICAgICAgICBUaGUgbGVhZGluZyBkaW1lbnNpb24gb2YgdGhlIGFycmF5IEIuICBMREIgPj0gbWF4\nKDEsTikuCioKKiAgSU5GTyAgICAob3V0cHV0KSBJTlRFR0VSCiogICAgICAgICAgPSAwOiAgc3Vj\nY2Vzc2Z1bCBleGl0CiogICAgICAgICAgPCAwOiAgaWYgSU5GTyA9IC1pLCB0aGUgaS10aCBhcmd1\nbWVudCBoYWQgYW4gaWxsZWdhbCB2YWx1ZQoqICAgICAgICAgID4gMDogIGlmIElORk8gPSBpLCBV\nKGksaSkgaXMgZXhhY3RseSB6ZXJvLiAgVGhlIGZhY3Rvcml6YXRpb24KKiAgICAgICAgICAgICAg\nICBoYXMgYmVlbiBjb21wbGV0ZWQsIGJ1dCB0aGUgZmFjdG9yIFUgaXMgZXhhY3RseQoqICAgICAg\nICAgICAgICAgIHNpbmd1bGFyLCBhbmQgdGhlIHNvbHV0aW9uIGhhcyBub3QgYmVlbiBjb21wdXRl\nZC4KKgpx5GiGaIcpgXHlfXHmKGiKiWiLaIx1YmiYigEGaJlYCwAAAGRnYnN2XzYudHh0ced1Ymib\nigEGaJxYBAAAAGdic3Zx6GiYigEGdWJofWhhXWh+h1Jx6X1x6ihogVgHAAAAZ2VuZXJhbHHraINY\nBAAAAGJhbmRx7GhxWCEAAABkcml2ZXIgc2ltcGxlLCBzb2x2ZSBBKlggPSBCIG9ubHlx7WiGaIcp\ngXHufXHvKGiKiWiLaIx1YmiNWCwAAABodHRwOi8vd3d3Lm5ldGxpYi5vcmcvbGFwYWNrL2NvbXBs\nZXgvY2dic3YuZnHwaI9YAQAAAGNokGh9aJFdaH6HUnHxfXHyKGiUWFkMAAAgICAgICBTVUJST1VU\nSU5FIENHQlNWKCBOLCBLTCwgS1UsIE5SSFMsIEFCLCBMREFCLCBJUElWLCBCLCBMREIsIElORk8g\nKQoqCiogIC0tIExBUEFDSyBkcml2ZXIgcm91dGluZSAodmVyc2lvbiAzLjIpIC0tCiogIC0tIExB\nUEFDSyBpcyBhIHNvZnR3YXJlIHBhY2thZ2UgcHJvdmlkZWQgYnkgVW5pdi4gb2YgVGVubmVzc2Vl\nLCAgICAtLQoqICAtLSBVbml2LiBvZiBDYWxpZm9ybmlhIEJlcmtlbGV5LCBVbml2LiBvZiBDb2xv\ncmFkbyBEZW52ZXIgYW5kIE5BRyBMdGQuLi0tCiogICAgIE5vdmVtYmVyIDIwMDYKKgoqICAgICAu\nLiBTY2FsYXIgQXJndW1lbnRzIC4uCiAgICAgIElOVEVHRVIgICAgICAgICAgICBJTkZPLCBLTCwg\nS1UsIExEQUIsIExEQiwgTiwgTlJIUwoqICAgICAuLgoqICAgICAuLiBBcnJheSBBcmd1bWVudHMg\nLi4KICAgICAgSU5URUdFUiAgICAgICAgICAgIElQSVYoICogKQogICAgICBDT01QTEVYICAgICAg\nICAgICAgQUIoIExEQUIsICogKSwgQiggTERCLCAqICkKKiAgICAgLi4KKgoqICBQdXJwb3NlCiog\nID09PT09PT0KKgoqICBDR0JTViBjb21wdXRlcyB0aGUgc29sdXRpb24gdG8gYSBjb21wbGV4IHN5\nc3RlbSBvZiBsaW5lYXIgZXF1YXRpb25zCiogIEEgKiBYID0gQiwgd2hlcmUgQSBpcyBhIGJhbmQg\nbWF0cml4IG9mIG9yZGVyIE4gd2l0aCBLTCBzdWJkaWFnb25hbHMKKiAgYW5kIEtVIHN1cGVyZGlh\nZ29uYWxzLCBhbmQgWCBhbmQgQiBhcmUgTi1ieS1OUkhTIG1hdHJpY2VzLgoqCiogIFRoZSBMVSBk\nZWNvbXBvc2l0aW9uIHdpdGggcGFydGlhbCBwaXZvdGluZyBhbmQgcm93IGludGVyY2hhbmdlcyBp\ncwoqICB1c2VkIHRvIGZhY3RvciBBIGFzIEEgPSBMICogVSwgd2hlcmUgTCBpcyBhIHByb2R1Y3Qg\nb2YgcGVybXV0YXRpb24KKiAgYW5kIHVuaXQgbG93ZXIgdHJpYW5ndWxhciBtYXRyaWNlcyB3aXRo\nIEtMIHN1YmRpYWdvbmFscywgYW5kIFUgaXMKKiAgdXBwZXIgdHJpYW5ndWxhciB3aXRoIEtMK0tV\nIHN1cGVyZGlhZ29uYWxzLiAgVGhlIGZhY3RvcmVkIGZvcm0gb2YgQQoqICBpcyB0aGVuIHVzZWQg\ndG8gc29sdmUgdGhlIHN5c3RlbSBvZiBlcXVhdGlvbnMgQSAqIFggPSBCLgoqCiogIEFyZ3VtZW50\ncwoqICA9PT09PT09PT0KKgoqICBOICAgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRo\nZSBudW1iZXIgb2YgbGluZWFyIGVxdWF0aW9ucywgaS5lLiwgdGhlIG9yZGVyIG9mIHRoZQoqICAg\nICAgICAgIG1hdHJpeCBBLiAgTiA+PSAwLgoqCiogIEtMICAgICAgKGlucHV0KSBJTlRFR0VSCiog\nICAgICAgICAgVGhlIG51bWJlciBvZiBzdWJkaWFnb25hbHMgd2l0aGluIHRoZSBiYW5kIG9mIEEu\nICBLTCA+PSAwLgoqCiogIEtVICAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG51\nbWJlciBvZiBzdXBlcmRpYWdvbmFscyB3aXRoaW4gdGhlIGJhbmQgb2YgQS4gIEtVID49IDAuCioK\nKiAgTlJIUyAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbnVtYmVyIG9mIHJpZ2h0\nIGhhbmQgc2lkZXMsIGkuZS4sIHRoZSBudW1iZXIgb2YgY29sdW1ucwoqICAgICAgICAgIG9mIHRo\nZSBtYXRyaXggQi4gIE5SSFMgPj0gMC4KKgoqICBBQiAgICAgIChpbnB1dC9vdXRwdXQpIENPTVBM\nRVggYXJyYXksIGRpbWVuc2lvbiAoTERBQixOKQoqICAgICAgICAgIE9uIGVudHJ5LCB0aGUgbWF0\ncml4IEEgaW4gYmFuZCBzdG9yYWdlLCBpbiByb3dzIEtMKzEgdG8KKiAgICAgICAgICAyKktMK0tV\nKzE7IHJvd3MgMSB0byBLTCBvZiB0aGUgYXJyYXkgbmVlZCBub3QgYmUgc2V0LgoqICAgICAgICAg\nIFRoZSBqLXRoIGNvbHVtbiBvZiBBIGlzIHN0b3JlZCBpbiB0aGUgai10aCBjb2x1bW4gb2YgdGhl\nCiogICAgICAgICAgYXJyYXkgQUIgYXMgZm9sbG93czoKKiAgICAgICAgICBBQihLTCtLVSsxK2kt\naixqKSA9IEEoaSxqKSBmb3IgbWF4KDEsai1LVSk8PWk8PW1pbihOLGorS0wpCiogICAgICAgICAg\nT24gZXhpdCwgZGV0YWlscyBvZiB0aGUgZmFjdG9yaXphdGlvbjogVSBpcyBzdG9yZWQgYXMgYW4K\nKiAgICAgICAgICB1cHBlciB0cmlhbmd1bGFyIGJhbmQgbWF0cml4IHdpdGggS0wrS1Ugc3VwZXJk\naWFnb25hbHMgaW4KKiAgICAgICAgICByb3dzIDEgdG8gS0wrS1UrMSwgYW5kIHRoZSBtdWx0aXBs\naWVycyB1c2VkIGR1cmluZyB0aGUKKiAgICAgICAgICBmYWN0b3JpemF0aW9uIGFyZSBzdG9yZWQg\naW4gcm93cyBLTCtLVSsyIHRvIDIqS0wrS1UrMS4KKiAgICAgICAgICBTZWUgYmVsb3cgZm9yIGZ1\ncnRoZXIgZGV0YWlscy4KKgoqICBMREFCICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRo\nZSBsZWFkaW5nIGRpbWVuc2lvbiBvZiB0aGUgYXJyYXkgQUIuICBMREFCID49IDIqS0wrS1UrMS4K\nKgoqICBJUElWICAgIChvdXRwdXQpIElOVEVHRVIgYXJyYXksIGRpbWVuc2lvbiAoTikKKiAgICAg\nICAgICBUaGUgcGl2b3QgaW5kaWNlcyB0aGF0IGRlZmluZSB0aGUgcGVybXV0YXRpb24gbWF0cml4\nIFA7CiogICAgICAgICAgcm93IGkgb2YgdGhlIG1hdHJpeCB3YXMgaW50ZXJjaGFuZ2VkIHdpdGgg\ncm93IElQSVYoaSkuCioKKiAgQiAgICAgICAoaW5wdXQvb3V0cHV0KSBDT01QTEVYIGFycmF5LCBk\naW1lbnNpb24gKExEQixOUkhTKQoqICAgICAgICAgIE9uIGVudHJ5LCB0aGUgTi1ieS1OUkhTIHJp\nZ2h0IGhhbmQgc2lkZSBtYXRyaXggQi4KKiAgICAgICAgICBPbiBleGl0LCBpZiBJTkZPID0gMCwg\ndGhlIE4tYnktTlJIUyBzb2x1dGlvbiBtYXRyaXggWC4KKgoqICBMREIgICAgIChpbnB1dCkgSU5U\nRUdFUgoqICAgICAgICAgIFRoZSBsZWFkaW5nIGRpbWVuc2lvbiBvZiB0aGUgYXJyYXkgQi4gIExE\nQiA+PSBtYXgoMSxOKS4KKgoqICBJTkZPICAgIChvdXRwdXQpIElOVEVHRVIKKiAgICAgICAgICA9\nIDA6ICBzdWNjZXNzZnVsIGV4aXQKKiAgICAgICAgICA8IDA6ICBpZiBJTkZPID0gLWksIHRoZSBp\nLXRoIGFyZ3VtZW50IGhhZCBhbiBpbGxlZ2FsIHZhbHVlCiogICAgICAgICAgPiAwOiAgaWYgSU5G\nTyA9IGksIFUoaSxpKSBpcyBleGFjdGx5IHplcm8uICBUaGUgZmFjdG9yaXphdGlvbgoqICAgICAg\nICAgICAgICAgIGhhcyBiZWVuIGNvbXBsZXRlZCwgYnV0IHRoZSBmYWN0b3IgVSBpcyBleGFjdGx5\nCiogICAgICAgICAgICAgICAgc2luZ3VsYXIsIGFuZCB0aGUgc29sdXRpb24gaGFzIG5vdCBiZWVu\nIGNvbXB1dGVkLgoqCnHzaIZohymBcfR9cfUoaIqJaItojHViaJiKAQdomVgLAAAAY2dic3ZfNy50\neHRx9nViaJuKAQdonFgEAAAAZ2JzdnH3aJiKAQd1Ymh9aGFdaH6HUnH4fXH5KGiBWAcAAABnZW5l\ncmFscfpog1gEAAAAYmFuZHH7aHFYIQAAAGRyaXZlciBzaW1wbGUsIHNvbHZlIEEqWCA9IEIgb25s\neXH8aIZohymBcf19cf4oaIqJaItojHViaI1YLgAAAGh0dHA6Ly93d3cubmV0bGliLm9yZy9sYXBh\nY2svY29tcGxleDE2L3pnYnN2LmZx/2iPWAEAAAB6aJBofWiRXWh+h1JyAAEAAH1yAQEAACholFhf\nDAAAICAgICAgU1VCUk9VVElORSBaR0JTViggTiwgS0wsIEtVLCBOUkhTLCBBQiwgTERBQiwgSVBJ\nViwgQiwgTERCLCBJTkZPICkKKgoqICAtLSBMQVBBQ0sgZHJpdmVyIHJvdXRpbmUgKHZlcnNpb24g\nMy4yKSAtLQoqICAtLSBMQVBBQ0sgaXMgYSBzb2Z0d2FyZSBwYWNrYWdlIHByb3ZpZGVkIGJ5IFVu\naXYuIG9mIFRlbm5lc3NlZSwgICAgLS0KKiAgLS0gVW5pdi4gb2YgQ2FsaWZvcm5pYSBCZXJrZWxl\neSwgVW5pdi4gb2YgQ29sb3JhZG8gRGVudmVyIGFuZCBOQUcgTHRkLi4tLQoqICAgICBOb3ZlbWJl\nciAyMDA2CioKKiAgICAgLi4gU2NhbGFyIEFyZ3VtZW50cyAuLgogICAgICBJTlRFR0VSICAgICAg\nICAgICAgSU5GTywgS0wsIEtVLCBMREFCLCBMREIsIE4sIE5SSFMKKiAgICAgLi4KKiAgICAgLi4g\nQXJyYXkgQXJndW1lbnRzIC4uCiAgICAgIElOVEVHRVIgICAgICAgICAgICBJUElWKCAqICkKICAg\nICAgQ09NUExFWCoxNiAgICAgICAgIEFCKCBMREFCLCAqICksIEIoIExEQiwgKiApCiogICAgIC4u\nCioKKiAgUHVycG9zZQoqICA9PT09PT09CioKKiAgWkdCU1YgY29tcHV0ZXMgdGhlIHNvbHV0aW9u\nIHRvIGEgY29tcGxleCBzeXN0ZW0gb2YgbGluZWFyIGVxdWF0aW9ucwoqICBBICogWCA9IEIsIHdo\nZXJlIEEgaXMgYSBiYW5kIG1hdHJpeCBvZiBvcmRlciBOIHdpdGggS0wgc3ViZGlhZ29uYWxzCiog\nIGFuZCBLVSBzdXBlcmRpYWdvbmFscywgYW5kIFggYW5kIEIgYXJlIE4tYnktTlJIUyBtYXRyaWNl\ncy4KKgoqICBUaGUgTFUgZGVjb21wb3NpdGlvbiB3aXRoIHBhcnRpYWwgcGl2b3RpbmcgYW5kIHJv\ndyBpbnRlcmNoYW5nZXMgaXMKKiAgdXNlZCB0byBmYWN0b3IgQSBhcyBBID0gTCAqIFUsIHdoZXJl\nIEwgaXMgYSBwcm9kdWN0IG9mIHBlcm11dGF0aW9uCiogIGFuZCB1bml0IGxvd2VyIHRyaWFuZ3Vs\nYXIgbWF0cmljZXMgd2l0aCBLTCBzdWJkaWFnb25hbHMsIGFuZCBVIGlzCiogIHVwcGVyIHRyaWFu\nZ3VsYXIgd2l0aCBLTCtLVSBzdXBlcmRpYWdvbmFscy4gIFRoZSBmYWN0b3JlZCBmb3JtIG9mIEEK\nKiAgaXMgdGhlbiB1c2VkIHRvIHNvbHZlIHRoZSBzeXN0ZW0gb2YgZXF1YXRpb25zIEEgKiBYID0g\nQi4KKgoqICBBcmd1bWVudHMKKiAgPT09PT09PT09CioKKiAgTiAgICAgICAoaW5wdXQpIElOVEVH\nRVIKKiAgICAgICAgICBUaGUgbnVtYmVyIG9mIGxpbmVhciBlcXVhdGlvbnMsIGkuZS4sIHRoZSBv\ncmRlciBvZiB0aGUKKiAgICAgICAgICBtYXRyaXggQS4gIE4gPj0gMC4KKgoqICBLTCAgICAgIChp\nbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2Ygc3ViZGlhZ29uYWxzIHdpdGhp\nbiB0aGUgYmFuZCBvZiBBLiAgS0wgPj0gMC4KKgoqICBLVSAgICAgIChpbnB1dCkgSU5URUdFUgoq\nICAgICAgICAgIFRoZSBudW1iZXIgb2Ygc3VwZXJkaWFnb25hbHMgd2l0aGluIHRoZSBiYW5kIG9m\nIEEuICBLVSA+PSAwLgoqCiogIE5SSFMgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhl\nIG51bWJlciBvZiByaWdodCBoYW5kIHNpZGVzLCBpLmUuLCB0aGUgbnVtYmVyIG9mIGNvbHVtbnMK\nKiAgICAgICAgICBvZiB0aGUgbWF0cml4IEIuICBOUkhTID49IDAuCioKKiAgQUIgICAgICAoaW5w\ndXQvb3V0cHV0KSBDT01QTEVYKjE2IGFycmF5LCBkaW1lbnNpb24gKExEQUIsTikKKiAgICAgICAg\nICBPbiBlbnRyeSwgdGhlIG1hdHJpeCBBIGluIGJhbmQgc3RvcmFnZSwgaW4gcm93cyBLTCsxIHRv\nCiogICAgICAgICAgMipLTCtLVSsxOyByb3dzIDEgdG8gS0wgb2YgdGhlIGFycmF5IG5lZWQgbm90\nIGJlIHNldC4KKiAgICAgICAgICBUaGUgai10aCBjb2x1bW4gb2YgQSBpcyBzdG9yZWQgaW4gdGhl\nIGotdGggY29sdW1uIG9mIHRoZQoqICAgICAgICAgIGFycmF5IEFCIGFzIGZvbGxvd3M6CiogICAg\nICAgICAgQUIoS0wrS1UrMStpLWosaikgPSBBKGksaikgZm9yIG1heCgxLGotS1UpPD1pPD1taW4o\nTixqK0tMKQoqICAgICAgICAgIE9uIGV4aXQsIGRldGFpbHMgb2YgdGhlIGZhY3Rvcml6YXRpb246\nIFUgaXMgc3RvcmVkIGFzIGFuCiogICAgICAgICAgdXBwZXIgdHJpYW5ndWxhciBiYW5kIG1hdHJp\neCB3aXRoIEtMK0tVIHN1cGVyZGlhZ29uYWxzIGluCiogICAgICAgICAgcm93cyAxIHRvIEtMK0tV\nKzEsIGFuZCB0aGUgbXVsdGlwbGllcnMgdXNlZCBkdXJpbmcgdGhlCiogICAgICAgICAgZmFjdG9y\naXphdGlvbiBhcmUgc3RvcmVkIGluIHJvd3MgS0wrS1UrMiB0byAyKktMK0tVKzEuCiogICAgICAg\nICAgU2VlIGJlbG93IGZvciBmdXJ0aGVyIGRldGFpbHMuCioKKiAgTERBQiAgICAoaW5wdXQpIElO\nVEVHRVIKKiAgICAgICAgICBUaGUgbGVhZGluZyBkaW1lbnNpb24gb2YgdGhlIGFycmF5IEFCLiAg\nTERBQiA+PSAyKktMK0tVKzEuCioKKiAgSVBJViAgICAob3V0cHV0KSBJTlRFR0VSIGFycmF5LCBk\naW1lbnNpb24gKE4pCiogICAgICAgICAgVGhlIHBpdm90IGluZGljZXMgdGhhdCBkZWZpbmUgdGhl\nIHBlcm11dGF0aW9uIG1hdHJpeCBQOwoqICAgICAgICAgIHJvdyBpIG9mIHRoZSBtYXRyaXggd2Fz\nIGludGVyY2hhbmdlZCB3aXRoIHJvdyBJUElWKGkpLgoqCiogIEIgICAgICAgKGlucHV0L291dHB1\ndCkgQ09NUExFWCoxNiBhcnJheSwgZGltZW5zaW9uIChMREIsTlJIUykKKiAgICAgICAgICBPbiBl\nbnRyeSwgdGhlIE4tYnktTlJIUyByaWdodCBoYW5kIHNpZGUgbWF0cml4IEIuCiogICAgICAgICAg\nT24gZXhpdCwgaWYgSU5GTyA9IDAsIHRoZSBOLWJ5LU5SSFMgc29sdXRpb24gbWF0cml4IFguCioK\nKiAgTERCICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbGVhZGluZyBkaW1lbnNp\nb24gb2YgdGhlIGFycmF5IEIuICBMREIgPj0gbWF4KDEsTikuCioKKiAgSU5GTyAgICAob3V0cHV0\nKSBJTlRFR0VSCiogICAgICAgICAgPSAwOiAgc3VjY2Vzc2Z1bCBleGl0CiogICAgICAgICAgPCAw\nOiAgaWYgSU5GTyA9IC1pLCB0aGUgaS10aCBhcmd1bWVudCBoYWQgYW4gaWxsZWdhbCB2YWx1ZQoq\nICAgICAgICAgID4gMDogIGlmIElORk8gPSBpLCBVKGksaSkgaXMgZXhhY3RseSB6ZXJvLiAgVGhl\nIGZhY3Rvcml6YXRpb24KKiAgICAgICAgICAgICAgICBoYXMgYmVlbiBjb21wbGV0ZWQsIGJ1dCB0\naGUgZmFjdG9yIFUgaXMgZXhhY3RseQoqICAgICAgICAgICAgICAgIHNpbmd1bGFyLCBhbmQgdGhl\nIHNvbHV0aW9uIGhhcyBub3QgYmVlbiBjb21wdXRlZC4KKgpyAgEAAGiGaIcpgXIDAQAAfXIEAQAA\nKGiKiWiLaIx1YmiYigEIaJlYCwAAAHpnYnN2XzgudHh0cgUBAAB1YmibigEIaJxYBAAAAGdic3Zy\nBgEAAGiYigEIdWJofWhhXWh+h1JyBwEAAH1yCAEAAChogVgHAAAAZ2VuZXJhbHIJAQAAaINYCwAA\nAHRyaWRpYWdvbmFscgoBAABocVghAAAAZHJpdmVyIHNpbXBsZSwgc29sdmUgQSpYID0gQiBvbmx5\ncgsBAABohmiHKYFyDAEAAH1yDQEAAChoioloi2iMdWJojVgrAAAAaHR0cDovL3d3dy5uZXRsaWIu\nb3JnL2xhcGFjay9zaW5nbGUvc2d0c3YuZnIOAQAAaI9YAQAAAHNokGh9aJFdaH6HUnIPAQAAfXIQ\nAQAAKGiUWHsJAAAgICAgICBTVUJST1VUSU5FIFNHVFNWKCBOLCBOUkhTLCBETCwgRCwgRFUsIEIs\nIExEQiwgSU5GTyApCioKKiAgLS0gTEFQQUNLIHJvdXRpbmUgKHZlcnNpb24gMy4zLjEpIC0tCiog\nIC0tIExBUEFDSyBpcyBhIHNvZnR3YXJlIHBhY2thZ2UgcHJvdmlkZWQgYnkgVW5pdi4gb2YgVGVu\nbmVzc2VlLCAgICAtLQoqICAtLSBVbml2LiBvZiBDYWxpZm9ybmlhIEJlcmtlbGV5LCBVbml2LiBv\nZiBDb2xvcmFkbyBEZW52ZXIgYW5kIE5BRyBMdGQuLi0tCiogIC0tIEFwcmlsIDIwMTEgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLQoqCiogICAg\nIC4uIFNjYWxhciBBcmd1bWVudHMgLi4KICAgICAgSU5URUdFUiAgICAgICAgICAgIElORk8sIExE\nQiwgTiwgTlJIUwoqICAgICAuLgoqICAgICAuLiBBcnJheSBBcmd1bWVudHMgLi4KICAgICAgUkVB\nTCAgICAgICAgICAgICAgIEIoIExEQiwgKiApLCBEKCAqICksIERMKCAqICksIERVKCAqICkKKiAg\nICAgLi4KKgoqICBQdXJwb3NlCiogID09PT09PT0KKgoqICBTR1RTViAgc29sdmVzIHRoZSBlcXVh\ndGlvbgoqCiogICAgIEEqWCA9IEIsCioKKiAgd2hlcmUgQSBpcyBhbiBuIGJ5IG4gdHJpZGlhZ29u\nYWwgbWF0cml4LCBieSBHYXVzc2lhbiBlbGltaW5hdGlvbiB3aXRoCiogIHBhcnRpYWwgcGl2b3Rp\nbmcuCioKKiAgTm90ZSB0aGF0IHRoZSBlcXVhdGlvbiAgQSoqVCpYID0gQiAgbWF5IGJlIHNvbHZl\nZCBieSBpbnRlcmNoYW5naW5nIHRoZQoqICBvcmRlciBvZiB0aGUgYXJndW1lbnRzIERVIGFuZCBE\nTC4KKgoqICBBcmd1bWVudHMKKiAgPT09PT09PT09CioKKiAgTiAgICAgICAoaW5wdXQpIElOVEVH\nRVIKKiAgICAgICAgICBUaGUgb3JkZXIgb2YgdGhlIG1hdHJpeCBBLiAgTiA+PSAwLgoqCiogIE5S\nSFMgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG51bWJlciBvZiByaWdodCBoYW5k\nIHNpZGVzLCBpLmUuLCB0aGUgbnVtYmVyIG9mIGNvbHVtbnMKKiAgICAgICAgICBvZiB0aGUgbWF0\ncml4IEIuICBOUkhTID49IDAuCioKKiAgREwgICAgICAoaW5wdXQvb3V0cHV0KSBSRUFMIGFycmF5\nLCBkaW1lbnNpb24gKE4tMSkKKiAgICAgICAgICBPbiBlbnRyeSwgREwgbXVzdCBjb250YWluIHRo\nZSAobi0xKSBzdWItZGlhZ29uYWwgZWxlbWVudHMgb2YKKiAgICAgICAgICBBLgoqCiogICAgICAg\nICAgT24gZXhpdCwgREwgaXMgb3ZlcndyaXR0ZW4gYnkgdGhlIChuLTIpIGVsZW1lbnRzIG9mIHRo\nZQoqICAgICAgICAgIHNlY29uZCBzdXBlci1kaWFnb25hbCBvZiB0aGUgdXBwZXIgdHJpYW5ndWxh\nciBtYXRyaXggVSBmcm9tCiogICAgICAgICAgdGhlIExVIGZhY3Rvcml6YXRpb24gb2YgQSwgaW4g\nREwoMSksIC4uLiwgREwobi0yKS4KKgoqICBEICAgICAgIChpbnB1dC9vdXRwdXQpIFJFQUwgYXJy\nYXksIGRpbWVuc2lvbiAoTikKKiAgICAgICAgICBPbiBlbnRyeSwgRCBtdXN0IGNvbnRhaW4gdGhl\nIGRpYWdvbmFsIGVsZW1lbnRzIG9mIEEuCioKKiAgICAgICAgICBPbiBleGl0LCBEIGlzIG92ZXJ3\ncml0dGVuIGJ5IHRoZSBuIGRpYWdvbmFsIGVsZW1lbnRzIG9mIFUuCioKKiAgRFUgICAgICAoaW5w\ndXQvb3V0cHV0KSBSRUFMIGFycmF5LCBkaW1lbnNpb24gKE4tMSkKKiAgICAgICAgICBPbiBlbnRy\neSwgRFUgbXVzdCBjb250YWluIHRoZSAobi0xKSBzdXBlci1kaWFnb25hbCBlbGVtZW50cwoqICAg\nICAgICAgIG9mIEEuCioKKiAgICAgICAgICBPbiBleGl0LCBEVSBpcyBvdmVyd3JpdHRlbiBieSB0\naGUgKG4tMSkgZWxlbWVudHMgb2YgdGhlIGZpcnN0CiogICAgICAgICAgc3VwZXItZGlhZ29uYWwg\nb2YgVS4KKgoqICBCICAgICAgIChpbnB1dC9vdXRwdXQpIFJFQUwgYXJyYXksIGRpbWVuc2lvbiAo\nTERCLE5SSFMpCiogICAgICAgICAgT24gZW50cnksIHRoZSBOIGJ5IE5SSFMgbWF0cml4IG9mIHJp\nZ2h0IGhhbmQgc2lkZSBtYXRyaXggQi4KKiAgICAgICAgICBPbiBleGl0LCBpZiBJTkZPID0gMCwg\ndGhlIE4gYnkgTlJIUyBzb2x1dGlvbiBtYXRyaXggWC4KKgoqICBMREIgICAgIChpbnB1dCkgSU5U\nRUdFUgoqICAgICAgICAgIFRoZSBsZWFkaW5nIGRpbWVuc2lvbiBvZiB0aGUgYXJyYXkgQi4gIExE\nQiA+PSBtYXgoMSxOKS4KKgoqICBJTkZPICAgIChvdXRwdXQpIElOVEVHRVIKKiAgICAgICAgICA9\nIDA6IHN1Y2Nlc3NmdWwgZXhpdAoqICAgICAgICAgIDwgMDogaWYgSU5GTyA9IC1pLCB0aGUgaS10\naCBhcmd1bWVudCBoYWQgYW4gaWxsZWdhbCB2YWx1ZQoqICAgICAgICAgID4gMDogaWYgSU5GTyA9\nIGksIFUoaSxpKSBpcyBleGFjdGx5IHplcm8sIGFuZCB0aGUgc29sdXRpb24KKiAgICAgICAgICAg\nICAgIGhhcyBub3QgYmVlbiBjb21wdXRlZC4gIFRoZSBmYWN0b3JpemF0aW9uIGhhcyBub3QgYmVl\nbgoqICAgICAgICAgICAgICAgY29tcGxldGVkIHVubGVzcyBpID0gTi4KKgpyEQEAAGiGaIcpgXIS\nAQAAfXITAQAAKGiKiWiLaIx1YmiYigEJaJlYCwAAAHNndHN2XzkudHh0chQBAAB1YmibigEJaJxY\nBAAAAGd0c3ZyFQEAAGiYigEJdWJofWhhXWh+h1JyFgEAAH1yFwEAAChogVgHAAAAZ2VuZXJhbHIY\nAQAAaINYCwAAAHRyaWRpYWdvbmFschkBAABocVghAAAAZHJpdmVyIHNpbXBsZSwgc29sdmUgQSpY\nID0gQiBvbmx5choBAABohmiHKYFyGwEAAH1yHAEAAChoioloi2iMdWJojVgrAAAAaHR0cDovL3d3\ndy5uZXRsaWIub3JnL2xhcGFjay9kb3VibGUvZGd0c3YuZnIdAQAAaI9YAQAAAGRokGh9aJFdaH6H\nUnIeAQAAfXIfAQAAKGiUWKsJAAAgICAgICBTVUJST1VUSU5FIERHVFNWKCBOLCBOUkhTLCBETCwg\nRCwgRFUsIEIsIExEQiwgSU5GTyApCioKKiAgLS0gTEFQQUNLIHJvdXRpbmUgKHZlcnNpb24gMy4z\nLjEpIC0tCiogIC0tIExBUEFDSyBpcyBhIHNvZnR3YXJlIHBhY2thZ2UgcHJvdmlkZWQgYnkgVW5p\ndi4gb2YgVGVubmVzc2VlLCAgICAtLQoqICAtLSBVbml2LiBvZiBDYWxpZm9ybmlhIEJlcmtlbGV5\nLCBVbml2LiBvZiBDb2xvcmFkbyBEZW52ZXIgYW5kIE5BRyBMdGQuLi0tCiogIC0tIEFwcmlsIDIw\nMTEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAt\nLQoqCiogICAgIC4uIFNjYWxhciBBcmd1bWVudHMgLi4KICAgICAgSU5URUdFUiAgICAgICAgICAg\nIElORk8sIExEQiwgTiwgTlJIUwoqICAgICAuLgoqICAgICAuLiBBcnJheSBBcmd1bWVudHMgLi4K\nICAgICAgRE9VQkxFIFBSRUNJU0lPTiAgIEIoIExEQiwgKiApLCBEKCAqICksIERMKCAqICksIERV\nKCAqICkKKiAgICAgLi4KKgoqICBQdXJwb3NlCiogID09PT09PT0KKgoqICBER1RTViAgc29sdmVz\nIHRoZSBlcXVhdGlvbgoqCiogICAgIEEqWCA9IEIsCioKKiAgd2hlcmUgQSBpcyBhbiBuIGJ5IG4g\ndHJpZGlhZ29uYWwgbWF0cml4LCBieSBHYXVzc2lhbiBlbGltaW5hdGlvbiB3aXRoCiogIHBhcnRp\nYWwgcGl2b3RpbmcuCioKKiAgTm90ZSB0aGF0IHRoZSBlcXVhdGlvbiAgQSoqVCpYID0gQiAgbWF5\nIGJlIHNvbHZlZCBieSBpbnRlcmNoYW5naW5nIHRoZQoqICBvcmRlciBvZiB0aGUgYXJndW1lbnRz\nIERVIGFuZCBETC4KKgoqICBBcmd1bWVudHMKKiAgPT09PT09PT09CioKKiAgTiAgICAgICAoaW5w\ndXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgb3JkZXIgb2YgdGhlIG1hdHJpeCBBLiAgTiA+PSAw\nLgoqCiogIE5SSFMgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG51bWJlciBvZiBy\naWdodCBoYW5kIHNpZGVzLCBpLmUuLCB0aGUgbnVtYmVyIG9mIGNvbHVtbnMKKiAgICAgICAgICBv\nZiB0aGUgbWF0cml4IEIuICBOUkhTID49IDAuCioKKiAgREwgICAgICAoaW5wdXQvb3V0cHV0KSBE\nT1VCTEUgUFJFQ0lTSU9OIGFycmF5LCBkaW1lbnNpb24gKE4tMSkKKiAgICAgICAgICBPbiBlbnRy\neSwgREwgbXVzdCBjb250YWluIHRoZSAobi0xKSBzdWItZGlhZ29uYWwgZWxlbWVudHMgb2YKKiAg\nICAgICAgICBBLgoqCiogICAgICAgICAgT24gZXhpdCwgREwgaXMgb3ZlcndyaXR0ZW4gYnkgdGhl\nIChuLTIpIGVsZW1lbnRzIG9mIHRoZQoqICAgICAgICAgIHNlY29uZCBzdXBlci1kaWFnb25hbCBv\nZiB0aGUgdXBwZXIgdHJpYW5ndWxhciBtYXRyaXggVSBmcm9tCiogICAgICAgICAgdGhlIExVIGZh\nY3Rvcml6YXRpb24gb2YgQSwgaW4gREwoMSksIC4uLiwgREwobi0yKS4KKgoqICBEICAgICAgIChp\nbnB1dC9vdXRwdXQpIERPVUJMRSBQUkVDSVNJT04gYXJyYXksIGRpbWVuc2lvbiAoTikKKiAgICAg\nICAgICBPbiBlbnRyeSwgRCBtdXN0IGNvbnRhaW4gdGhlIGRpYWdvbmFsIGVsZW1lbnRzIG9mIEEu\nCioKKiAgICAgICAgICBPbiBleGl0LCBEIGlzIG92ZXJ3cml0dGVuIGJ5IHRoZSBuIGRpYWdvbmFs\nIGVsZW1lbnRzIG9mIFUuCioKKiAgRFUgICAgICAoaW5wdXQvb3V0cHV0KSBET1VCTEUgUFJFQ0lT\nSU9OIGFycmF5LCBkaW1lbnNpb24gKE4tMSkKKiAgICAgICAgICBPbiBlbnRyeSwgRFUgbXVzdCBj\nb250YWluIHRoZSAobi0xKSBzdXBlci1kaWFnb25hbCBlbGVtZW50cwoqICAgICAgICAgIG9mIEEu\nCioKKiAgICAgICAgICBPbiBleGl0LCBEVSBpcyBvdmVyd3JpdHRlbiBieSB0aGUgKG4tMSkgZWxl\nbWVudHMgb2YgdGhlIGZpcnN0CiogICAgICAgICAgc3VwZXItZGlhZ29uYWwgb2YgVS4KKgoqICBC\nICAgICAgIChpbnB1dC9vdXRwdXQpIERPVUJMRSBQUkVDSVNJT04gYXJyYXksIGRpbWVuc2lvbiAo\nTERCLE5SSFMpCiogICAgICAgICAgT24gZW50cnksIHRoZSBOIGJ5IE5SSFMgbWF0cml4IG9mIHJp\nZ2h0IGhhbmQgc2lkZSBtYXRyaXggQi4KKiAgICAgICAgICBPbiBleGl0LCBpZiBJTkZPID0gMCwg\ndGhlIE4gYnkgTlJIUyBzb2x1dGlvbiBtYXRyaXggWC4KKgoqICBMREIgICAgIChpbnB1dCkgSU5U\nRUdFUgoqICAgICAgICAgIFRoZSBsZWFkaW5nIGRpbWVuc2lvbiBvZiB0aGUgYXJyYXkgQi4gIExE\nQiA+PSBtYXgoMSxOKS4KKgoqICBJTkZPICAgIChvdXRwdXQpIElOVEVHRVIKKiAgICAgICAgICA9\nIDA6IHN1Y2Nlc3NmdWwgZXhpdAoqICAgICAgICAgIDwgMDogaWYgSU5GTyA9IC1pLCB0aGUgaS10\naCBhcmd1bWVudCBoYWQgYW4gaWxsZWdhbCB2YWx1ZQoqICAgICAgICAgID4gMDogaWYgSU5GTyA9\nIGksIFUoaSxpKSBpcyBleGFjdGx5IHplcm8sIGFuZCB0aGUgc29sdXRpb24KKiAgICAgICAgICAg\nICAgIGhhcyBub3QgYmVlbiBjb21wdXRlZC4gIFRoZSBmYWN0b3JpemF0aW9uIGhhcyBub3QgYmVl\nbgoqICAgICAgICAgICAgICAgY29tcGxldGVkIHVubGVzcyBpID0gTi4KKgpyIAEAAGiGaIcpgXIh\nAQAAfXIiAQAAKGiKiWiLaIx1YmiYigEKaJlYDAAAAGRndHN2XzEwLnR4dHIjAQAAdWJom4oBCmic\nWAQAAABndHN2ciQBAABomIoBCnViaH1oYV1ofodSciUBAAB9ciYBAAAoaIFYBwAAAGdlbmVyYWxy\nJwEAAGiDWAsAAAB0cmlkaWFnb25hbHIoAQAAaHFYIQAAAGRyaXZlciBzaW1wbGUsIHNvbHZlIEEq\nWCA9IEIgb25seXIpAQAAaIZohymBcioBAAB9cisBAAAoaIqJaItojHViaI1YLAAAAGh0dHA6Ly93\nd3cubmV0bGliLm9yZy9sYXBhY2svY29tcGxleC9jZ3Rzdi5mciwBAABoj1gBAAAAY2iQaH1okV1o\nfodSci0BAAB9ci4BAAAoaJRYeQkAACAgICAgIFNVQlJPVVRJTkUgQ0dUU1YoIE4sIE5SSFMsIERM\nLCBELCBEVSwgQiwgTERCLCBJTkZPICkKKgoqICAtLSBMQVBBQ0sgcm91dGluZSAodmVyc2lvbiAz\nLjMuMSkgLS0KKiAgLS0gTEFQQUNLIGlzIGEgc29mdHdhcmUgcGFja2FnZSBwcm92aWRlZCBieSBV\nbml2LiBvZiBUZW5uZXNzZWUsICAgIC0tCiogIC0tIFVuaXYuIG9mIENhbGlmb3JuaWEgQmVya2Vs\nZXksIFVuaXYuIG9mIENvbG9yYWRvIERlbnZlciBhbmQgTkFHIEx0ZC4uLS0KKiAgLS0gQXByaWwg\nMjAxMSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nIC0tCioKKiAgICAgLi4gU2NhbGFyIEFyZ3VtZW50cyAuLgogICAgICBJTlRFR0VSICAgICAgICAg\nICAgSU5GTywgTERCLCBOLCBOUkhTCiogICAgIC4uCiogICAgIC4uIEFycmF5IEFyZ3VtZW50cyAu\nLgogICAgICBDT01QTEVYICAgICAgICAgICAgQiggTERCLCAqICksIEQoICogKSwgREwoICogKSwg\nRFUoICogKQoqICAgICAuLgoqCiogIFB1cnBvc2UKKiAgPT09PT09PQoqCiogIENHVFNWICBzb2x2\nZXMgdGhlIGVxdWF0aW9uCioKKiAgICAgQSpYID0gQiwKKgoqICB3aGVyZSBBIGlzIGFuIE4tYnkt\nTiB0cmlkaWFnb25hbCBtYXRyaXgsIGJ5IEdhdXNzaWFuIGVsaW1pbmF0aW9uIHdpdGgKKiAgcGFy\ndGlhbCBwaXZvdGluZy4KKgoqICBOb3RlIHRoYXQgdGhlIGVxdWF0aW9uICBBKipIICpYID0gQiAg\nbWF5IGJlIHNvbHZlZCBieSBpbnRlcmNoYW5naW5nIHRoZQoqICBvcmRlciBvZiB0aGUgYXJndW1l\nbnRzIERVIGFuZCBETC4KKgoqICBBcmd1bWVudHMKKiAgPT09PT09PT09CioKKiAgTiAgICAgICAo\naW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgb3JkZXIgb2YgdGhlIG1hdHJpeCBBLiAgTiA+\nPSAwLgoqCiogIE5SSFMgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG51bWJlciBv\nZiByaWdodCBoYW5kIHNpZGVzLCBpLmUuLCB0aGUgbnVtYmVyIG9mIGNvbHVtbnMKKiAgICAgICAg\nICBvZiB0aGUgbWF0cml4IEIuICBOUkhTID49IDAuCioKKiAgREwgICAgICAoaW5wdXQvb3V0cHV0\nKSBDT01QTEVYIGFycmF5LCBkaW1lbnNpb24gKE4tMSkKKiAgICAgICAgICBPbiBlbnRyeSwgREwg\nbXVzdCBjb250YWluIHRoZSAobi0xKSBzdWJkaWFnb25hbCBlbGVtZW50cyBvZgoqICAgICAgICAg\nIEEuCiogICAgICAgICAgT24gZXhpdCwgREwgaXMgb3ZlcndyaXR0ZW4gYnkgdGhlIChuLTIpIGVs\nZW1lbnRzIG9mIHRoZQoqICAgICAgICAgIHNlY29uZCBzdXBlcmRpYWdvbmFsIG9mIHRoZSB1cHBl\nciB0cmlhbmd1bGFyIG1hdHJpeCBVIGZyb20KKiAgICAgICAgICB0aGUgTFUgZmFjdG9yaXphdGlv\nbiBvZiBBLCBpbiBETCgxKSwgLi4uLCBETChuLTIpLgoqCiogIEQgICAgICAgKGlucHV0L291dHB1\ndCkgQ09NUExFWCBhcnJheSwgZGltZW5zaW9uIChOKQoqICAgICAgICAgIE9uIGVudHJ5LCBEIG11\nc3QgY29udGFpbiB0aGUgZGlhZ29uYWwgZWxlbWVudHMgb2YgQS4KKiAgICAgICAgICBPbiBleGl0\nLCBEIGlzIG92ZXJ3cml0dGVuIGJ5IHRoZSBuIGRpYWdvbmFsIGVsZW1lbnRzIG9mIFUuCioKKiAg\nRFUgICAgICAoaW5wdXQvb3V0cHV0KSBDT01QTEVYIGFycmF5LCBkaW1lbnNpb24gKE4tMSkKKiAg\nICAgICAgICBPbiBlbnRyeSwgRFUgbXVzdCBjb250YWluIHRoZSAobi0xKSBzdXBlcmRpYWdvbmFs\nIGVsZW1lbnRzCiogICAgICAgICAgb2YgQS4KKiAgICAgICAgICBPbiBleGl0LCBEVSBpcyBvdmVy\nd3JpdHRlbiBieSB0aGUgKG4tMSkgZWxlbWVudHMgb2YgdGhlIGZpcnN0CiogICAgICAgICAgc3Vw\nZXJkaWFnb25hbCBvZiBVLgoqCiogIEIgICAgICAgKGlucHV0L291dHB1dCkgQ09NUExFWCBhcnJh\neSwgZGltZW5zaW9uIChMREIsTlJIUykKKiAgICAgICAgICBPbiBlbnRyeSwgdGhlIE4tYnktTlJI\nUyByaWdodCBoYW5kIHNpZGUgbWF0cml4IEIuCiogICAgICAgICAgT24gZXhpdCwgaWYgSU5GTyA9\nIDAsIHRoZSBOLWJ5LU5SSFMgc29sdXRpb24gbWF0cml4IFguCioKKiAgTERCICAgICAoaW5wdXQp\nIElOVEVHRVIKKiAgICAgICAgICBUaGUgbGVhZGluZyBkaW1lbnNpb24gb2YgdGhlIGFycmF5IEIu\nICBMREIgPj0gbWF4KDEsTikuCioKKiAgSU5GTyAgICAob3V0cHV0KSBJTlRFR0VSCiogICAgICAg\nICAgPSAwOiAgc3VjY2Vzc2Z1bCBleGl0CiogICAgICAgICAgPCAwOiAgaWYgSU5GTyA9IC1pLCB0\naGUgaS10aCBhcmd1bWVudCBoYWQgYW4gaWxsZWdhbCB2YWx1ZQoqICAgICAgICAgID4gMDogIGlm\nIElORk8gPSBpLCBVKGksaSkgaXMgZXhhY3RseSB6ZXJvLCBhbmQgdGhlIHNvbHV0aW9uCiogICAg\nICAgICAgICAgICAgaGFzIG5vdCBiZWVuIGNvbXB1dGVkLiAgVGhlIGZhY3Rvcml6YXRpb24gaGFz\nIG5vdCBiZWVuCiogICAgICAgICAgICAgICAgY29tcGxldGVkIHVubGVzcyBpID0gTi4KKgpyLwEA\nAGiGaIcpgXIwAQAAfXIxAQAAKGiKiWiLaIx1YmiYigELaJlYDAAAAGNndHN2XzExLnR4dHIyAQAA\ndWJom4oBC2icWAQAAABndHN2cjMBAABomIoBC3ViaH1oYV1ofodScjQBAAB9cjUBAAAoaIFYBwAA\nAGdlbmVyYWxyNgEAAGiDWAsAAAB0cmlkaWFnb25hbHI3AQAAaHFYIQAAAGRyaXZlciBzaW1wbGUs\nIHNvbHZlIEEqWCA9IEIgb25seXI4AQAAaIZohymBcjkBAAB9cjoBAAAoaIqJaItojHViaI1YLgAA\nAGh0dHA6Ly93d3cubmV0bGliLm9yZy9sYXBhY2svY29tcGxleDE2L3pndHN2LmZyOwEAAGiPWAEA\nAAB6aJBofWiRXWh+h1JyPAEAAH1yPQEAACholFiFCQAAICAgICAgU1VCUk9VVElORSBaR1RTVigg\nTiwgTlJIUywgREwsIEQsIERVLCBCLCBMREIsIElORk8gKQoqCiogIC0tIExBUEFDSyByb3V0aW5l\nICh2ZXJzaW9uIDMuMy4xKSAtLQoqICAtLSBMQVBBQ0sgaXMgYSBzb2Z0d2FyZSBwYWNrYWdlIHBy\nb3ZpZGVkIGJ5IFVuaXYuIG9mIFRlbm5lc3NlZSwgICAgLS0KKiAgLS0gVW5pdi4gb2YgQ2FsaWZv\ncm5pYSBCZXJrZWxleSwgVW5pdi4gb2YgQ29sb3JhZG8gRGVudmVyIGFuZCBOQUcgTHRkLi4tLQoq\nICAtLSBBcHJpbCAyMDExICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgLS0KKgoqICAgICAuLiBTY2FsYXIgQXJndW1lbnRzIC4uCiAgICAgIElOVEVH\nRVIgICAgICAgICAgICBJTkZPLCBMREIsIE4sIE5SSFMKKiAgICAgLi4KKiAgICAgLi4gQXJyYXkg\nQXJndW1lbnRzIC4uCiAgICAgIENPTVBMRVgqMTYgICAgICAgICBCKCBMREIsICogKSwgRCggKiAp\nLCBETCggKiApLCBEVSggKiApCiogICAgIC4uCioKKiAgUHVycG9zZQoqICA9PT09PT09CioKKiAg\nWkdUU1YgIHNvbHZlcyB0aGUgZXF1YXRpb24KKgoqICAgICBBKlggPSBCLAoqCiogIHdoZXJlIEEg\naXMgYW4gTi1ieS1OIHRyaWRpYWdvbmFsIG1hdHJpeCwgYnkgR2F1c3NpYW4gZWxpbWluYXRpb24g\nd2l0aAoqICBwYXJ0aWFsIHBpdm90aW5nLgoqCiogIE5vdGUgdGhhdCB0aGUgZXF1YXRpb24gIEEq\nKkggKlggPSBCICBtYXkgYmUgc29sdmVkIGJ5IGludGVyY2hhbmdpbmcgdGhlCiogIG9yZGVyIG9m\nIHRoZSBhcmd1bWVudHMgRFUgYW5kIERMLgoqCiogIEFyZ3VtZW50cwoqICA9PT09PT09PT0KKgoq\nICBOICAgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBvcmRlciBvZiB0aGUgbWF0\ncml4IEEuICBOID49IDAuCioKKiAgTlJIUyAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBU\naGUgbnVtYmVyIG9mIHJpZ2h0IGhhbmQgc2lkZXMsIGkuZS4sIHRoZSBudW1iZXIgb2YgY29sdW1u\ncwoqICAgICAgICAgIG9mIHRoZSBtYXRyaXggQi4gIE5SSFMgPj0gMC4KKgoqICBETCAgICAgIChp\nbnB1dC9vdXRwdXQpIENPTVBMRVgqMTYgYXJyYXksIGRpbWVuc2lvbiAoTi0xKQoqICAgICAgICAg\nIE9uIGVudHJ5LCBETCBtdXN0IGNvbnRhaW4gdGhlIChuLTEpIHN1YmRpYWdvbmFsIGVsZW1lbnRz\nIG9mCiogICAgICAgICAgQS4KKiAgICAgICAgICBPbiBleGl0LCBETCBpcyBvdmVyd3JpdHRlbiBi\neSB0aGUgKG4tMikgZWxlbWVudHMgb2YgdGhlCiogICAgICAgICAgc2Vjb25kIHN1cGVyZGlhZ29u\nYWwgb2YgdGhlIHVwcGVyIHRyaWFuZ3VsYXIgbWF0cml4IFUgZnJvbQoqICAgICAgICAgIHRoZSBM\nVSBmYWN0b3JpemF0aW9uIG9mIEEsIGluIERMKDEpLCAuLi4sIERMKG4tMikuCioKKiAgRCAgICAg\nICAoaW5wdXQvb3V0cHV0KSBDT01QTEVYKjE2IGFycmF5LCBkaW1lbnNpb24gKE4pCiogICAgICAg\nICAgT24gZW50cnksIEQgbXVzdCBjb250YWluIHRoZSBkaWFnb25hbCBlbGVtZW50cyBvZiBBLgoq\nICAgICAgICAgIE9uIGV4aXQsIEQgaXMgb3ZlcndyaXR0ZW4gYnkgdGhlIG4gZGlhZ29uYWwgZWxl\nbWVudHMgb2YgVS4KKgoqICBEVSAgICAgIChpbnB1dC9vdXRwdXQpIENPTVBMRVgqMTYgYXJyYXks\nIGRpbWVuc2lvbiAoTi0xKQoqICAgICAgICAgIE9uIGVudHJ5LCBEVSBtdXN0IGNvbnRhaW4gdGhl\nIChuLTEpIHN1cGVyZGlhZ29uYWwgZWxlbWVudHMKKiAgICAgICAgICBvZiBBLgoqICAgICAgICAg\nIE9uIGV4aXQsIERVIGlzIG92ZXJ3cml0dGVuIGJ5IHRoZSAobi0xKSBlbGVtZW50cyBvZiB0aGUg\nZmlyc3QKKiAgICAgICAgICBzdXBlcmRpYWdvbmFsIG9mIFUuCioKKiAgQiAgICAgICAoaW5wdXQv\nb3V0cHV0KSBDT01QTEVYKjE2IGFycmF5LCBkaW1lbnNpb24gKExEQixOUkhTKQoqICAgICAgICAg\nIE9uIGVudHJ5LCB0aGUgTi1ieS1OUkhTIHJpZ2h0IGhhbmQgc2lkZSBtYXRyaXggQi4KKiAgICAg\nICAgICBPbiBleGl0LCBpZiBJTkZPID0gMCwgdGhlIE4tYnktTlJIUyBzb2x1dGlvbiBtYXRyaXgg\nWC4KKgoqICBMREIgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBsZWFkaW5nIGRp\nbWVuc2lvbiBvZiB0aGUgYXJyYXkgQi4gIExEQiA+PSBtYXgoMSxOKS4KKgoqICBJTkZPICAgIChv\ndXRwdXQpIElOVEVHRVIKKiAgICAgICAgICA9IDA6ICBzdWNjZXNzZnVsIGV4aXQKKiAgICAgICAg\nICA8IDA6ICBpZiBJTkZPID0gLWksIHRoZSBpLXRoIGFyZ3VtZW50IGhhZCBhbiBpbGxlZ2FsIHZh\nbHVlCiogICAgICAgICAgPiAwOiAgaWYgSU5GTyA9IGksIFUoaSxpKSBpcyBleGFjdGx5IHplcm8s\nIGFuZCB0aGUgc29sdXRpb24KKiAgICAgICAgICAgICAgICBoYXMgbm90IGJlZW4gY29tcHV0ZWQu\nICBUaGUgZmFjdG9yaXphdGlvbiBoYXMgbm90IGJlZW4KKiAgICAgICAgICAgICAgICBjb21wbGV0\nZWQgdW5sZXNzIGkgPSBOLgoqCnI+AQAAaIZohymBcj8BAAB9ckABAAAoaIqJaItojHViaJiKAQxo\nmVgMAAAAemd0c3ZfMTIudHh0ckEBAAB1YmibigEMaJxYBAAAAGd0c3ZyQgEAAGiYigEMdWJofWhh\nXWh+h1JyQwEAAH1yRAEAAChogVgJAAAASGVybWl0aWFuckUBAABog1gEAAAAZnVsbHJGAQAAaHFY\nIQAAAGRyaXZlciBzaW1wbGUsIHNvbHZlIEEqWCA9IEIgb25seXJHAQAAaIZohymBckgBAAB9ckkB\nAAAoaIqJaItojHViaI1YLAAAAGh0dHA6Ly93d3cubmV0bGliLm9yZy9sYXBhY2svY29tcGxleC9j\naGVzdi5mckoBAABoj1gBAAAAY2iQaH1okV1ofodScksBAAB9ckwBAAAoaJRYphEAACAgICAgIFNV\nQlJPVVRJTkUgQ0hFU1YoIFVQTE8sIE4sIE5SSFMsIEEsIExEQSwgSVBJViwgQiwgTERCLCBXT1JL\nLAogICAgICQgICAgICAgICAgICAgICAgICBMV09SSywgSU5GTyApCioKKiAgLS0gTEFQQUNLIGRy\naXZlciByb3V0aW5lICh2ZXJzaW9uIDMuMy4xKSAtLQoqICAtLSBMQVBBQ0sgaXMgYSBzb2Z0d2Fy\nZSBwYWNrYWdlIHByb3ZpZGVkIGJ5IFVuaXYuIG9mIFRlbm5lc3NlZSwgICAgLS0KKiAgLS0gVW5p\ndi4gb2YgQ2FsaWZvcm5pYSBCZXJrZWxleSwgVW5pdi4gb2YgQ29sb3JhZG8gRGVudmVyIGFuZCBO\nQUcgTHRkLi4tLQoqICAtLSBBcHJpbCAyMDExICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgLS0KKiBAZ2VuZXJhdGVkIGMKKgoqICAgICAuLiBTY2Fs\nYXIgQXJndW1lbnRzIC4uCiAgICAgIENIQVJBQ1RFUiAgICAgICAgICBVUExPCiAgICAgIElOVEVH\nRVIgICAgICAgICAgICBJTkZPLCBMREEsIExEQiwgTFdPUkssIE4sIE5SSFMKKiAgICAgLi4KKiAg\nICAgLi4gQXJyYXkgQXJndW1lbnRzIC4uCiAgICAgIElOVEVHRVIgICAgICAgICAgICBJUElWKCAq\nICkKICAgICAgQ09NUExFWCAgICAgICAgICAgIEEoIExEQSwgKiApLCBCKCBMREIsICogKSwgV09S\nSyggKiApCiogICAgIC4uCioKKiAgUHVycG9zZQoqICA9PT09PT09CioKKiAgQ0hFU1YgY29tcHV0\nZXMgdGhlIHNvbHV0aW9uIHRvIGEgY29tcGxleCBzeXN0ZW0gb2YgbGluZWFyIGVxdWF0aW9ucwoq\nICAgICBBICogWCA9IEIsCiogIHdoZXJlIEEgaXMgYW4gTi1ieS1OIEhlcm1pdGlhbiBtYXRyaXgg\nYW5kIFggYW5kIEIgYXJlIE4tYnktTlJIUwoqICBtYXRyaWNlcy4KKgoqICBUaGUgZGlhZ29uYWwg\ncGl2b3RpbmcgbWV0aG9kIGlzIHVzZWQgdG8gZmFjdG9yIEEgYXMKKiAgICAgQSA9IFUgKiBEICog\nVSoqSCwgIGlmIFVQTE8gPSAnVScsIG9yCiogICAgIEEgPSBMICogRCAqIEwqKkgsICBpZiBVUExP\nID0gJ0wnLAoqICB3aGVyZSBVIChvciBMKSBpcyBhIHByb2R1Y3Qgb2YgcGVybXV0YXRpb24gYW5k\nIHVuaXQgdXBwZXIgKGxvd2VyKQoqICB0cmlhbmd1bGFyIG1hdHJpY2VzLCBhbmQgRCBpcyBIZXJt\naXRpYW4gYW5kIGJsb2NrIGRpYWdvbmFsIHdpdGgKKiAgMS1ieS0xIGFuZCAyLWJ5LTIgZGlhZ29u\nYWwgYmxvY2tzLiAgVGhlIGZhY3RvcmVkIGZvcm0gb2YgQSBpcyB0aGVuCiogIHVzZWQgdG8gc29s\ndmUgdGhlIHN5c3RlbSBvZiBlcXVhdGlvbnMgQSAqIFggPSBCLgoqCiogIEFyZ3VtZW50cwoqICA9\nPT09PT09PT0KKgoqICBVUExPICAgIChpbnB1dCkgQ0hBUkFDVEVSKjEKKiAgICAgICAgICA9ICdV\nJzogIFVwcGVyIHRyaWFuZ2xlIG9mIEEgaXMgc3RvcmVkOwoqICAgICAgICAgID0gJ0wnOiAgTG93\nZXIgdHJpYW5nbGUgb2YgQSBpcyBzdG9yZWQuCioKKiAgTiAgICAgICAoaW5wdXQpIElOVEVHRVIK\nKiAgICAgICAgICBUaGUgbnVtYmVyIG9mIGxpbmVhciBlcXVhdGlvbnMsIGkuZS4sIHRoZSBvcmRl\nciBvZiB0aGUKKiAgICAgICAgICBtYXRyaXggQS4gIE4gPj0gMC4KKgoqICBOUkhTICAgIChpbnB1\ndCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2YgcmlnaHQgaGFuZCBzaWRlcywgaS5l\nLiwgdGhlIG51bWJlciBvZiBjb2x1bW5zCiogICAgICAgICAgb2YgdGhlIG1hdHJpeCBCLiAgTlJI\nUyA+PSAwLgoqCiogIEEgICAgICAgKGlucHV0L291dHB1dCkgQ09NUExFWCBhcnJheSwgZGltZW5z\naW9uIChMREEsTikKKiAgICAgICAgICBPbiBlbnRyeSwgdGhlIEhlcm1pdGlhbiBtYXRyaXggQS4g\nIElmIFVQTE8gPSAnVScsIHRoZSBsZWFkaW5nCiogICAgICAgICAgTi1ieS1OIHVwcGVyIHRyaWFu\nZ3VsYXIgcGFydCBvZiBBIGNvbnRhaW5zIHRoZSB1cHBlcgoqICAgICAgICAgIHRyaWFuZ3VsYXIg\ncGFydCBvZiB0aGUgbWF0cml4IEEsIGFuZCB0aGUgc3RyaWN0bHkgbG93ZXIKKiAgICAgICAgICB0\ncmlhbmd1bGFyIHBhcnQgb2YgQSBpcyBub3QgcmVmZXJlbmNlZC4gIElmIFVQTE8gPSAnTCcsIHRo\nZQoqICAgICAgICAgIGxlYWRpbmcgTi1ieS1OIGxvd2VyIHRyaWFuZ3VsYXIgcGFydCBvZiBBIGNv\nbnRhaW5zIHRoZSBsb3dlcgoqICAgICAgICAgIHRyaWFuZ3VsYXIgcGFydCBvZiB0aGUgbWF0cml4\nIEEsIGFuZCB0aGUgc3RyaWN0bHkgdXBwZXIKKiAgICAgICAgICB0cmlhbmd1bGFyIHBhcnQgb2Yg\nQSBpcyBub3QgcmVmZXJlbmNlZC4KKgoqICAgICAgICAgIE9uIGV4aXQsIGlmIElORk8gPSAwLCB0\naGUgYmxvY2sgZGlhZ29uYWwgbWF0cml4IEQgYW5kIHRoZQoqICAgICAgICAgIG11bHRpcGxpZXJz\nIHVzZWQgdG8gb2J0YWluIHRoZSBmYWN0b3IgVSBvciBMIGZyb20gdGhlCiogICAgICAgICAgZmFj\ndG9yaXphdGlvbiBBID0gVSpEKlUqKkggb3IgQSA9IEwqRCpMKipIIGFzIGNvbXB1dGVkIGJ5Ciog\nICAgICAgICAgQ0hFVFJGLgoqCiogIExEQSAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAg\nVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBBLiAgTERBID49IG1heCgxLE4pLgoq\nCiogIElQSVYgICAgKG91dHB1dCkgSU5URUdFUiBhcnJheSwgZGltZW5zaW9uIChOKQoqICAgICAg\nICAgIERldGFpbHMgb2YgdGhlIGludGVyY2hhbmdlcyBhbmQgdGhlIGJsb2NrIHN0cnVjdHVyZSBv\nZiBELCBhcwoqICAgICAgICAgIGRldGVybWluZWQgYnkgQ0hFVFJGLiAgSWYgSVBJVihrKSA+IDAs\nIHRoZW4gcm93cyBhbmQgY29sdW1ucwoqICAgICAgICAgIGsgYW5kIElQSVYoaykgd2VyZSBpbnRl\ncmNoYW5nZWQsIGFuZCBEKGssaykgaXMgYSAxLWJ5LTEKKiAgICAgICAgICBkaWFnb25hbCBibG9j\nay4gIElmIFVQTE8gPSAnVScgYW5kIElQSVYoaykgPSBJUElWKGstMSkgPCAwLAoqICAgICAgICAg\nIHRoZW4gcm93cyBhbmQgY29sdW1ucyBrLTEgYW5kIC1JUElWKGspIHdlcmUgaW50ZXJjaGFuZ2Vk\nIGFuZAoqICAgICAgICAgIEQoay0xOmssay0xOmspIGlzIGEgMi1ieS0yIGRpYWdvbmFsIGJsb2Nr\nLiAgSWYgVVBMTyA9ICdMJyBhbmQKKiAgICAgICAgICBJUElWKGspID0gSVBJVihrKzEpIDwgMCwg\ndGhlbiByb3dzIGFuZCBjb2x1bW5zIGsrMSBhbmQKKiAgICAgICAgICAtSVBJVihrKSB3ZXJlIGlu\ndGVyY2hhbmdlZCBhbmQgRChrOmsrMSxrOmsrMSkgaXMgYSAyLWJ5LTIKKiAgICAgICAgICBkaWFn\nb25hbCBibG9jay4KKgoqICBCICAgICAgIChpbnB1dC9vdXRwdXQpIENPTVBMRVggYXJyYXksIGRp\nbWVuc2lvbiAoTERCLE5SSFMpCiogICAgICAgICAgT24gZW50cnksIHRoZSBOLWJ5LU5SSFMgcmln\naHQgaGFuZCBzaWRlIG1hdHJpeCBCLgoqICAgICAgICAgIE9uIGV4aXQsIGlmIElORk8gPSAwLCB0\naGUgTi1ieS1OUkhTIHNvbHV0aW9uIG1hdHJpeCBYLgoqCiogIExEQiAgICAgKGlucHV0KSBJTlRF\nR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBCLiAgTERC\nID49IG1heCgxLE4pLgoqCiogIFdPUksgICAgKHdvcmtzcGFjZS9vdXRwdXQpIENPTVBMRVggYXJy\nYXksIGRpbWVuc2lvbiAoTUFYKDEsTFdPUkspKQoqICAgICAgICAgIE9uIGV4aXQsIGlmIElORk8g\nPSAwLCBXT1JLKDEpIHJldHVybnMgdGhlIG9wdGltYWwgTFdPUksuCioKKiAgTFdPUksgICAoaW5w\ndXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbGVuZ3RoIG9mIFdPUksuICBMV09SSyA+PSAxLCBh\nbmQgZm9yIGJlc3QgcGVyZm9ybWFuY2UKKiAgICAgICAgICBMV09SSyA+PSBtYXgoMSxOKk5CKSwg\nd2hlcmUgTkIgaXMgdGhlIG9wdGltYWwgYmxvY2tzaXplIGZvcgoqICAgICAgICAgIENIRVRSRi4K\nKiAgICAgICAgICBmb3IgTFdPUksgPCBOLCBUUlMgd2lsbCBiZSBkb25lIHdpdGggTGV2ZWwgQkxB\nUyAyCiogICAgICAgICAgZm9yIExXT1JLID49IE4sIFRSUyB3aWxsIGJlIGRvbmUgd2l0aCBMZXZl\nbCBCTEFTIDMKKgoqICAgICAgICAgIElmIExXT1JLID0gLTEsIHRoZW4gYSB3b3Jrc3BhY2UgcXVl\ncnkgaXMgYXNzdW1lZDsgdGhlIHJvdXRpbmUKKiAgICAgICAgICBvbmx5IGNhbGN1bGF0ZXMgdGhl\nIG9wdGltYWwgc2l6ZSBvZiB0aGUgV09SSyBhcnJheSwgcmV0dXJucwoqICAgICAgICAgIHRoaXMg\ndmFsdWUgYXMgdGhlIGZpcnN0IGVudHJ5IG9mIHRoZSBXT1JLIGFycmF5LCBhbmQgbm8gZXJyb3IK\nKiAgICAgICAgICBtZXNzYWdlIHJlbGF0ZWQgdG8gTFdPUksgaXMgaXNzdWVkIGJ5IFhFUkJMQS4K\nKgoqICBJTkZPICAgIChvdXRwdXQpIElOVEVHRVIKKiAgICAgICAgICA9IDA6IHN1Y2Nlc3NmdWwg\nZXhpdAoqICAgICAgICAgIDwgMDogaWYgSU5GTyA9IC1pLCB0aGUgaS10aCBhcmd1bWVudCBoYWQg\nYW4gaWxsZWdhbCB2YWx1ZQoqICAgICAgICAgID4gMDogaWYgSU5GTyA9IGksIEQoaSxpKSBpcyBl\neGFjdGx5IHplcm8uICBUaGUgZmFjdG9yaXphdGlvbgoqICAgICAgICAgICAgICAgaGFzIGJlZW4g\nY29tcGxldGVkLCBidXQgdGhlIGJsb2NrIGRpYWdvbmFsIG1hdHJpeCBEIGlzCiogICAgICAgICAg\nICAgICBleGFjdGx5IHNpbmd1bGFyLCBzbyB0aGUgc29sdXRpb24gY291bGQgbm90IGJlIGNvbXB1\ndGVkLgoqCnJNAQAAaIZohymBck4BAAB9ck8BAAAoaIqJaItojHViaJiKAQ1omVgMAAAAY2hlc3Zf\nMTMudHh0clABAAB1YmibigENaJxYBAAAAGhlc3ZyUQEAAGiYigENdWJofWhhXWh+h1JyUgEAAH1y\nUwEAAChogVgJAAAASGVybWl0aWFuclQBAABog1gEAAAAZnVsbHJVAQAAaHFYIQAAAGRyaXZlciBz\naW1wbGUsIHNvbHZlIEEqWCA9IEIgb25seXJWAQAAaIZohymBclcBAAB9clgBAAAoaIqJaItojHVi\naI1YLgAAAGh0dHA6Ly93d3cubmV0bGliLm9yZy9sYXBhY2svY29tcGxleDE2L3poZXN2LmZyWQEA\nAGiPWAEAAAB6aJBofWiRXWh+h1JyWgEAAH1yWwEAACholFi8EQAAICAgICAgU1VCUk9VVElORSBa\nSEVTViggVVBMTywgTiwgTlJIUywgQSwgTERBLCBJUElWLCBCLCBMREIsIFdPUkssCiAgICAgJCAg\nICAgICAgICAgICAgICAgIExXT1JLLCBJTkZPICkKKgoqICAtLSBMQVBBQ0sgZHJpdmVyIHJvdXRp\nbmUgKHZlcnNpb24gMy4zLjEpIC0tCiogIC0tIExBUEFDSyBpcyBhIHNvZnR3YXJlIHBhY2thZ2Ug\ncHJvdmlkZWQgYnkgVW5pdi4gb2YgVGVubmVzc2VlLCAgICAtLQoqICAtLSBVbml2LiBvZiBDYWxp\nZm9ybmlhIEJlcmtlbGV5LCBVbml2LiBvZiBDb2xvcmFkbyBEZW52ZXIgYW5kIE5BRyBMdGQuLi0t\nCiogIC0tIEFwcmlsIDIwMTEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAtLQoqIEBwcmVjaXNpb25zIG5vcm1hbCB6IC0+IGMKKgoqICAgICAuLiBT\nY2FsYXIgQXJndW1lbnRzIC4uCiAgICAgIENIQVJBQ1RFUiAgICAgICAgICBVUExPCiAgICAgIElO\nVEVHRVIgICAgICAgICAgICBJTkZPLCBMREEsIExEQiwgTFdPUkssIE4sIE5SSFMKKiAgICAgLi4K\nKiAgICAgLi4gQXJyYXkgQXJndW1lbnRzIC4uCiAgICAgIElOVEVHRVIgICAgICAgICAgICBJUElW\nKCAqICkKICAgICAgQ09NUExFWCoxNiAgICAgICAgIEEoIExEQSwgKiApLCBCKCBMREIsICogKSwg\nV09SSyggKiApCiogICAgIC4uCioKKiAgUHVycG9zZQoqICA9PT09PT09CioKKiAgWkhFU1YgY29t\ncHV0ZXMgdGhlIHNvbHV0aW9uIHRvIGEgY29tcGxleCBzeXN0ZW0gb2YgbGluZWFyIGVxdWF0aW9u\ncwoqICAgICBBICogWCA9IEIsCiogIHdoZXJlIEEgaXMgYW4gTi1ieS1OIEhlcm1pdGlhbiBtYXRy\naXggYW5kIFggYW5kIEIgYXJlIE4tYnktTlJIUwoqICBtYXRyaWNlcy4KKgoqICBUaGUgZGlhZ29u\nYWwgcGl2b3RpbmcgbWV0aG9kIGlzIHVzZWQgdG8gZmFjdG9yIEEgYXMKKiAgICAgQSA9IFUgKiBE\nICogVSoqSCwgIGlmIFVQTE8gPSAnVScsIG9yCiogICAgIEEgPSBMICogRCAqIEwqKkgsICBpZiBV\nUExPID0gJ0wnLAoqICB3aGVyZSBVIChvciBMKSBpcyBhIHByb2R1Y3Qgb2YgcGVybXV0YXRpb24g\nYW5kIHVuaXQgdXBwZXIgKGxvd2VyKQoqICB0cmlhbmd1bGFyIG1hdHJpY2VzLCBhbmQgRCBpcyBI\nZXJtaXRpYW4gYW5kIGJsb2NrIGRpYWdvbmFsIHdpdGgKKiAgMS1ieS0xIGFuZCAyLWJ5LTIgZGlh\nZ29uYWwgYmxvY2tzLiAgVGhlIGZhY3RvcmVkIGZvcm0gb2YgQSBpcyB0aGVuCiogIHVzZWQgdG8g\nc29sdmUgdGhlIHN5c3RlbSBvZiBlcXVhdGlvbnMgQSAqIFggPSBCLgoqCiogIEFyZ3VtZW50cwoq\nICA9PT09PT09PT0KKgoqICBVUExPICAgIChpbnB1dCkgQ0hBUkFDVEVSKjEKKiAgICAgICAgICA9\nICdVJzogIFVwcGVyIHRyaWFuZ2xlIG9mIEEgaXMgc3RvcmVkOwoqICAgICAgICAgID0gJ0wnOiAg\nTG93ZXIgdHJpYW5nbGUgb2YgQSBpcyBzdG9yZWQuCioKKiAgTiAgICAgICAoaW5wdXQpIElOVEVH\nRVIKKiAgICAgICAgICBUaGUgbnVtYmVyIG9mIGxpbmVhciBlcXVhdGlvbnMsIGkuZS4sIHRoZSBv\ncmRlciBvZiB0aGUKKiAgICAgICAgICBtYXRyaXggQS4gIE4gPj0gMC4KKgoqICBOUkhTICAgIChp\nbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2YgcmlnaHQgaGFuZCBzaWRlcywg\naS5lLiwgdGhlIG51bWJlciBvZiBjb2x1bW5zCiogICAgICAgICAgb2YgdGhlIG1hdHJpeCBCLiAg\nTlJIUyA+PSAwLgoqCiogIEEgICAgICAgKGlucHV0L291dHB1dCkgQ09NUExFWCoxNiBhcnJheSwg\nZGltZW5zaW9uIChMREEsTikKKiAgICAgICAgICBPbiBlbnRyeSwgdGhlIEhlcm1pdGlhbiBtYXRy\naXggQS4gIElmIFVQTE8gPSAnVScsIHRoZSBsZWFkaW5nCiogICAgICAgICAgTi1ieS1OIHVwcGVy\nIHRyaWFuZ3VsYXIgcGFydCBvZiBBIGNvbnRhaW5zIHRoZSB1cHBlcgoqICAgICAgICAgIHRyaWFu\nZ3VsYXIgcGFydCBvZiB0aGUgbWF0cml4IEEsIGFuZCB0aGUgc3RyaWN0bHkgbG93ZXIKKiAgICAg\nICAgICB0cmlhbmd1bGFyIHBhcnQgb2YgQSBpcyBub3QgcmVmZXJlbmNlZC4gIElmIFVQTE8gPSAn\nTCcsIHRoZQoqICAgICAgICAgIGxlYWRpbmcgTi1ieS1OIGxvd2VyIHRyaWFuZ3VsYXIgcGFydCBv\nZiBBIGNvbnRhaW5zIHRoZSBsb3dlcgoqICAgICAgICAgIHRyaWFuZ3VsYXIgcGFydCBvZiB0aGUg\nbWF0cml4IEEsIGFuZCB0aGUgc3RyaWN0bHkgdXBwZXIKKiAgICAgICAgICB0cmlhbmd1bGFyIHBh\ncnQgb2YgQSBpcyBub3QgcmVmZXJlbmNlZC4KKgoqICAgICAgICAgIE9uIGV4aXQsIGlmIElORk8g\nPSAwLCB0aGUgYmxvY2sgZGlhZ29uYWwgbWF0cml4IEQgYW5kIHRoZQoqICAgICAgICAgIG11bHRp\ncGxpZXJzIHVzZWQgdG8gb2J0YWluIHRoZSBmYWN0b3IgVSBvciBMIGZyb20gdGhlCiogICAgICAg\nICAgZmFjdG9yaXphdGlvbiBBID0gVSpEKlUqKkggb3IgQSA9IEwqRCpMKipIIGFzIGNvbXB1dGVk\nIGJ5CiogICAgICAgICAgWkhFVFJGLgoqCiogIExEQSAgICAgKGlucHV0KSBJTlRFR0VSCiogICAg\nICAgICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBBLiAgTERBID49IG1heCgx\nLE4pLgoqCiogIElQSVYgICAgKG91dHB1dCkgSU5URUdFUiBhcnJheSwgZGltZW5zaW9uIChOKQoq\nICAgICAgICAgIERldGFpbHMgb2YgdGhlIGludGVyY2hhbmdlcyBhbmQgdGhlIGJsb2NrIHN0cnVj\ndHVyZSBvZiBELCBhcwoqICAgICAgICAgIGRldGVybWluZWQgYnkgWkhFVFJGLiAgSWYgSVBJVihr\nKSA+IDAsIHRoZW4gcm93cyBhbmQgY29sdW1ucwoqICAgICAgICAgIGsgYW5kIElQSVYoaykgd2Vy\nZSBpbnRlcmNoYW5nZWQsIGFuZCBEKGssaykgaXMgYSAxLWJ5LTEKKiAgICAgICAgICBkaWFnb25h\nbCBibG9jay4gIElmIFVQTE8gPSAnVScgYW5kIElQSVYoaykgPSBJUElWKGstMSkgPCAwLAoqICAg\nICAgICAgIHRoZW4gcm93cyBhbmQgY29sdW1ucyBrLTEgYW5kIC1JUElWKGspIHdlcmUgaW50ZXJj\naGFuZ2VkIGFuZAoqICAgICAgICAgIEQoay0xOmssay0xOmspIGlzIGEgMi1ieS0yIGRpYWdvbmFs\nIGJsb2NrLiAgSWYgVVBMTyA9ICdMJyBhbmQKKiAgICAgICAgICBJUElWKGspID0gSVBJVihrKzEp\nIDwgMCwgdGhlbiByb3dzIGFuZCBjb2x1bW5zIGsrMSBhbmQKKiAgICAgICAgICAtSVBJVihrKSB3\nZXJlIGludGVyY2hhbmdlZCBhbmQgRChrOmsrMSxrOmsrMSkgaXMgYSAyLWJ5LTIKKiAgICAgICAg\nICBkaWFnb25hbCBibG9jay4KKgoqICBCICAgICAgIChpbnB1dC9vdXRwdXQpIENPTVBMRVgqMTYg\nYXJyYXksIGRpbWVuc2lvbiAoTERCLE5SSFMpCiogICAgICAgICAgT24gZW50cnksIHRoZSBOLWJ5\nLU5SSFMgcmlnaHQgaGFuZCBzaWRlIG1hdHJpeCBCLgoqICAgICAgICAgIE9uIGV4aXQsIGlmIElO\nRk8gPSAwLCB0aGUgTi1ieS1OUkhTIHNvbHV0aW9uIG1hdHJpeCBYLgoqCiogIExEQiAgICAgKGlu\ncHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJh\neSBCLiAgTERCID49IG1heCgxLE4pLgoqCiogIFdPUksgICAgKHdvcmtzcGFjZS9vdXRwdXQpIENP\nTVBMRVgqMTYgYXJyYXksIGRpbWVuc2lvbiAoTUFYKDEsTFdPUkspKQoqICAgICAgICAgIE9uIGV4\naXQsIGlmIElORk8gPSAwLCBXT1JLKDEpIHJldHVybnMgdGhlIG9wdGltYWwgTFdPUksuCioKKiAg\nTFdPUksgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbGVuZ3RoIG9mIFdPUksuICBM\nV09SSyA+PSAxLCBhbmQgZm9yIGJlc3QgcGVyZm9ybWFuY2UKKiAgICAgICAgICBMV09SSyA+PSBt\nYXgoMSxOKk5CKSwgd2hlcmUgTkIgaXMgdGhlIG9wdGltYWwgYmxvY2tzaXplIGZvcgoqICAgICAg\nICAgIFpIRVRSRi4KKiAgICAgICAgICBmb3IgTFdPUksgPCBOLCBUUlMgd2lsbCBiZSBkb25lIHdp\ndGggTGV2ZWwgQkxBUyAyCiogICAgICAgICAgZm9yIExXT1JLID49IE4sIFRSUyB3aWxsIGJlIGRv\nbmUgd2l0aCBMZXZlbCBCTEFTIDMKKgoqICAgICAgICAgIElmIExXT1JLID0gLTEsIHRoZW4gYSB3\nb3Jrc3BhY2UgcXVlcnkgaXMgYXNzdW1lZDsgdGhlIHJvdXRpbmUKKiAgICAgICAgICBvbmx5IGNh\nbGN1bGF0ZXMgdGhlIG9wdGltYWwgc2l6ZSBvZiB0aGUgV09SSyBhcnJheSwgcmV0dXJucwoqICAg\nICAgICAgIHRoaXMgdmFsdWUgYXMgdGhlIGZpcnN0IGVudHJ5IG9mIHRoZSBXT1JLIGFycmF5LCBh\nbmQgbm8gZXJyb3IKKiAgICAgICAgICBtZXNzYWdlIHJlbGF0ZWQgdG8gTFdPUksgaXMgaXNzdWVk\nIGJ5IFhFUkJMQS4KKgoqICBJTkZPICAgIChvdXRwdXQpIElOVEVHRVIKKiAgICAgICAgICA9IDA6\nIHN1Y2Nlc3NmdWwgZXhpdAoqICAgICAgICAgIDwgMDogaWYgSU5GTyA9IC1pLCB0aGUgaS10aCBh\ncmd1bWVudCBoYWQgYW4gaWxsZWdhbCB2YWx1ZQoqICAgICAgICAgID4gMDogaWYgSU5GTyA9IGks\nIEQoaSxpKSBpcyBleGFjdGx5IHplcm8uICBUaGUgZmFjdG9yaXphdGlvbgoqICAgICAgICAgICAg\nICAgaGFzIGJlZW4gY29tcGxldGVkLCBidXQgdGhlIGJsb2NrIGRpYWdvbmFsIG1hdHJpeCBEIGlz\nCiogICAgICAgICAgICAgICBleGFjdGx5IHNpbmd1bGFyLCBzbyB0aGUgc29sdXRpb24gY291bGQg\nbm90IGJlIGNvbXB1dGVkLgoqCnJcAQAAaIZohymBcl0BAAB9cl4BAAAoaIqJaItojHViaJiKAQ5o\nmVgMAAAAemhlc3ZfMTQudHh0cl8BAAB1YmibigEOaJxYBAAAAGhlc3ZyYAEAAGiYigEOdWJofWhh\nXWh+h1JyYQEAAH1yYgEAAChogVgJAAAASGVybWl0aWFucmMBAABog1gGAAAAcGFja2VkcmQBAABo\ncVghAAAAZHJpdmVyIHNpbXBsZSwgc29sdmUgQSpYID0gQiBvbmx5cmUBAABohmiHKYFyZgEAAH1y\nZwEAAChoioloi2iMdWJojVgsAAAAaHR0cDovL3d3dy5uZXRsaWIub3JnL2xhcGFjay9jb21wbGV4\nL2NocHN2LmZyaAEAAGiPWAEAAABjaJBofWiRXWh+h1JyaQEAAH1yagEAACholFgoDgAAICAgICAg\nU1VCUk9VVElORSBDSFBTViggVVBMTywgTiwgTlJIUywgQVAsIElQSVYsIEIsIExEQiwgSU5GTyAp\nCioKKiAgLS0gTEFQQUNLIGRyaXZlciByb3V0aW5lICh2ZXJzaW9uIDMuMy4xKSAtLQoqICAtLSBM\nQVBBQ0sgaXMgYSBzb2Z0d2FyZSBwYWNrYWdlIHByb3ZpZGVkIGJ5IFVuaXYuIG9mIFRlbm5lc3Nl\nZSwgICAgLS0KKiAgLS0gVW5pdi4gb2YgQ2FsaWZvcm5pYSBCZXJrZWxleSwgVW5pdi4gb2YgQ29s\nb3JhZG8gRGVudmVyIGFuZCBOQUcgTHRkLi4tLQoqICAtLSBBcHJpbCAyMDExICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0KKgoqICAgICAuLiBT\nY2FsYXIgQXJndW1lbnRzIC4uCiAgICAgIENIQVJBQ1RFUiAgICAgICAgICBVUExPCiAgICAgIElO\nVEVHRVIgICAgICAgICAgICBJTkZPLCBMREIsIE4sIE5SSFMKKiAgICAgLi4KKiAgICAgLi4gQXJy\nYXkgQXJndW1lbnRzIC4uCiAgICAgIElOVEVHRVIgICAgICAgICAgICBJUElWKCAqICkKICAgICAg\nQ09NUExFWCAgICAgICAgICAgIEFQKCAqICksIEIoIExEQiwgKiApCiogICAgIC4uCioKKiAgUHVy\ncG9zZQoqICA9PT09PT09CioKKiAgQ0hQU1YgY29tcHV0ZXMgdGhlIHNvbHV0aW9uIHRvIGEgY29t\ncGxleCBzeXN0ZW0gb2YgbGluZWFyIGVxdWF0aW9ucwoqICAgICBBICogWCA9IEIsCiogIHdoZXJl\nIEEgaXMgYW4gTi1ieS1OIEhlcm1pdGlhbiBtYXRyaXggc3RvcmVkIGluIHBhY2tlZCBmb3JtYXQg\nYW5kIFgKKiAgYW5kIEIgYXJlIE4tYnktTlJIUyBtYXRyaWNlcy4KKgoqICBUaGUgZGlhZ29uYWwg\ncGl2b3RpbmcgbWV0aG9kIGlzIHVzZWQgdG8gZmFjdG9yIEEgYXMKKiAgICAgQSA9IFUgKiBEICog\nVSoqSCwgIGlmIFVQTE8gPSAnVScsIG9yCiogICAgIEEgPSBMICogRCAqIEwqKkgsICBpZiBVUExP\nID0gJ0wnLAoqICB3aGVyZSBVIChvciBMKSBpcyBhIHByb2R1Y3Qgb2YgcGVybXV0YXRpb24gYW5k\nIHVuaXQgdXBwZXIgKGxvd2VyKQoqICB0cmlhbmd1bGFyIG1hdHJpY2VzLCBEIGlzIEhlcm1pdGlh\nbiBhbmQgYmxvY2sgZGlhZ29uYWwgd2l0aCAxLWJ5LTEKKiAgYW5kIDItYnktMiBkaWFnb25hbCBi\nbG9ja3MuICBUaGUgZmFjdG9yZWQgZm9ybSBvZiBBIGlzIHRoZW4gdXNlZCB0bwoqICBzb2x2ZSB0\naGUgc3lzdGVtIG9mIGVxdWF0aW9ucyBBICogWCA9IEIuCioKKiAgQXJndW1lbnRzCiogID09PT09\nPT09PQoqCiogIFVQTE8gICAgKGlucHV0KSBDSEFSQUNURVIqMQoqICAgICAgICAgID0gJ1UnOiAg\nVXBwZXIgdHJpYW5nbGUgb2YgQSBpcyBzdG9yZWQ7CiogICAgICAgICAgPSAnTCc6ICBMb3dlciB0\ncmlhbmdsZSBvZiBBIGlzIHN0b3JlZC4KKgoqICBOICAgICAgIChpbnB1dCkgSU5URUdFUgoqICAg\nICAgICAgIFRoZSBudW1iZXIgb2YgbGluZWFyIGVxdWF0aW9ucywgaS5lLiwgdGhlIG9yZGVyIG9m\nIHRoZQoqICAgICAgICAgIG1hdHJpeCBBLiAgTiA+PSAwLgoqCiogIE5SSFMgICAgKGlucHV0KSBJ\nTlRFR0VSCiogICAgICAgICAgVGhlIG51bWJlciBvZiByaWdodCBoYW5kIHNpZGVzLCBpLmUuLCB0\naGUgbnVtYmVyIG9mIGNvbHVtbnMKKiAgICAgICAgICBvZiB0aGUgbWF0cml4IEIuICBOUkhTID49\nIDAuCioKKiAgQVAgICAgICAoaW5wdXQvb3V0cHV0KSBDT01QTEVYIGFycmF5LCBkaW1lbnNpb24g\nKE4qKE4rMSkvMikKKiAgICAgICAgICBPbiBlbnRyeSwgdGhlIHVwcGVyIG9yIGxvd2VyIHRyaWFu\nZ2xlIG9mIHRoZSBIZXJtaXRpYW4gbWF0cml4CiogICAgICAgICAgQSwgcGFja2VkIGNvbHVtbndp\nc2UgaW4gYSBsaW5lYXIgYXJyYXkuICBUaGUgai10aCBjb2x1bW4gb2YgQQoqICAgICAgICAgIGlz\nIHN0b3JlZCBpbiB0aGUgYXJyYXkgQVAgYXMgZm9sbG93czoKKiAgICAgICAgICBpZiBVUExPID0g\nJ1UnLCBBUChpICsgKGotMSkqai8yKSA9IEEoaSxqKSBmb3IgMTw9aTw9ajsKKiAgICAgICAgICBp\nZiBVUExPID0gJ0wnLCBBUChpICsgKGotMSkqKDJuLWopLzIpID0gQShpLGopIGZvciBqPD1pPD1u\nLgoqICAgICAgICAgIFNlZSBiZWxvdyBmb3IgZnVydGhlciBkZXRhaWxzLgoqCiogICAgICAgICAg\nT24gZXhpdCwgdGhlIGJsb2NrIGRpYWdvbmFsIG1hdHJpeCBEIGFuZCB0aGUgbXVsdGlwbGllcnMg\ndXNlZAoqICAgICAgICAgIHRvIG9idGFpbiB0aGUgZmFjdG9yIFUgb3IgTCBmcm9tIHRoZSBmYWN0\nb3JpemF0aW9uCiogICAgICAgICAgQSA9IFUqRCpVKipIIG9yIEEgPSBMKkQqTCoqSCBhcyBjb21w\ndXRlZCBieSBDSFBUUkYsIHN0b3JlZCBhcwoqICAgICAgICAgIGEgcGFja2VkIHRyaWFuZ3VsYXIg\nbWF0cml4IGluIHRoZSBzYW1lIHN0b3JhZ2UgZm9ybWF0IGFzIEEuCioKKiAgSVBJViAgICAob3V0\ncHV0KSBJTlRFR0VSIGFycmF5LCBkaW1lbnNpb24gKE4pCiogICAgICAgICAgRGV0YWlscyBvZiB0\naGUgaW50ZXJjaGFuZ2VzIGFuZCB0aGUgYmxvY2sgc3RydWN0dXJlIG9mIEQsIGFzCiogICAgICAg\nICAgZGV0ZXJtaW5lZCBieSBDSFBUUkYuICBJZiBJUElWKGspID4gMCwgdGhlbiByb3dzIGFuZCBj\nb2x1bW5zCiogICAgICAgICAgayBhbmQgSVBJVihrKSB3ZXJlIGludGVyY2hhbmdlZCwgYW5kIEQo\nayxrKSBpcyBhIDEtYnktMQoqICAgICAgICAgIGRpYWdvbmFsIGJsb2NrLiAgSWYgVVBMTyA9ICdV\nJyBhbmQgSVBJVihrKSA9IElQSVYoay0xKSA8IDAsCiogICAgICAgICAgdGhlbiByb3dzIGFuZCBj\nb2x1bW5zIGstMSBhbmQgLUlQSVYoaykgd2VyZSBpbnRlcmNoYW5nZWQgYW5kCiogICAgICAgICAg\nRChrLTE6ayxrLTE6aykgaXMgYSAyLWJ5LTIgZGlhZ29uYWwgYmxvY2suICBJZiBVUExPID0gJ0wn\nIGFuZAoqICAgICAgICAgIElQSVYoaykgPSBJUElWKGsrMSkgPCAwLCB0aGVuIHJvd3MgYW5kIGNv\nbHVtbnMgaysxIGFuZAoqICAgICAgICAgIC1JUElWKGspIHdlcmUgaW50ZXJjaGFuZ2VkIGFuZCBE\nKGs6aysxLGs6aysxKSBpcyBhIDItYnktMgoqICAgICAgICAgIGRpYWdvbmFsIGJsb2NrLgoqCiog\nIEIgICAgICAgKGlucHV0L291dHB1dCkgQ09NUExFWCBhcnJheSwgZGltZW5zaW9uIChMREIsTlJI\nUykKKiAgICAgICAgICBPbiBlbnRyeSwgdGhlIE4tYnktTlJIUyByaWdodCBoYW5kIHNpZGUgbWF0\ncml4IEIuCiogICAgICAgICAgT24gZXhpdCwgaWYgSU5GTyA9IDAsIHRoZSBOLWJ5LU5SSFMgc29s\ndXRpb24gbWF0cml4IFguCioKKiAgTERCICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBU\naGUgbGVhZGluZyBkaW1lbnNpb24gb2YgdGhlIGFycmF5IEIuICBMREIgPj0gbWF4KDEsTikuCioK\nKiAgSU5GTyAgICAob3V0cHV0KSBJTlRFR0VSCiogICAgICAgICAgPSAwOiAgc3VjY2Vzc2Z1bCBl\neGl0CiogICAgICAgICAgPCAwOiAgaWYgSU5GTyA9IC1pLCB0aGUgaS10aCBhcmd1bWVudCBoYWQg\nYW4gaWxsZWdhbCB2YWx1ZQoqICAgICAgICAgID4gMDogIGlmIElORk8gPSBpLCBEKGksaSkgaXMg\nZXhhY3RseSB6ZXJvLiAgVGhlIGZhY3Rvcml6YXRpb24KKiAgICAgICAgICAgICAgICBoYXMgYmVl\nbiBjb21wbGV0ZWQsIGJ1dCB0aGUgYmxvY2sgZGlhZ29uYWwgbWF0cml4IEQgaXMKKiAgICAgICAg\nICAgICAgICBleGFjdGx5IHNpbmd1bGFyLCBzbyB0aGUgc29sdXRpb24gY291bGQgbm90IGJlCiog\nICAgICAgICAgICAgICAgY29tcHV0ZWQuCioKcmsBAABohmiHKYFybAEAAH1ybQEAAChoioloi2iM\ndWJomIoBD2iZWAwAAABjaHBzdl8xNS50eHRybgEAAHViaJuKAQ9onFgEAAAAaHBzdnJvAQAAaJiK\nAQ91Ymh9aGFdaH6HUnJwAQAAfXJxAQAAKGiBWAkAAABIZXJtaXRpYW5ycgEAAGiDWAYAAABwYWNr\nZWRycwEAAGhxWCEAAABkcml2ZXIgc2ltcGxlLCBzb2x2ZSBBKlggPSBCIG9ubHlydAEAAGiGaIcp\ngXJ1AQAAfXJ2AQAAKGiKiWiLaIx1YmiNWC4AAABodHRwOi8vd3d3Lm5ldGxpYi5vcmcvbGFwYWNr\nL2NvbXBsZXgxNi96aHBzdi5mcncBAABoj1gBAAAAemiQaH1okV1ofodScngBAAB9cnkBAAAoaJRY\nLg4AACAgICAgIFNVQlJPVVRJTkUgWkhQU1YoIFVQTE8sIE4sIE5SSFMsIEFQLCBJUElWLCBCLCBM\nREIsIElORk8gKQoqCiogIC0tIExBUEFDSyBkcml2ZXIgcm91dGluZSAodmVyc2lvbiAzLjMuMSkg\nLS0KKiAgLS0gTEFQQUNLIGlzIGEgc29mdHdhcmUgcGFja2FnZSBwcm92aWRlZCBieSBVbml2LiBv\nZiBUZW5uZXNzZWUsICAgIC0tCiogIC0tIFVuaXYuIG9mIENhbGlmb3JuaWEgQmVya2VsZXksIFVu\naXYuIG9mIENvbG9yYWRvIERlbnZlciBhbmQgTkFHIEx0ZC4uLS0KKiAgLS0gQXByaWwgMjAxMSAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tCioK\nKiAgICAgLi4gU2NhbGFyIEFyZ3VtZW50cyAuLgogICAgICBDSEFSQUNURVIgICAgICAgICAgVVBM\nTwogICAgICBJTlRFR0VSICAgICAgICAgICAgSU5GTywgTERCLCBOLCBOUkhTCiogICAgIC4uCiog\nICAgIC4uIEFycmF5IEFyZ3VtZW50cyAuLgogICAgICBJTlRFR0VSICAgICAgICAgICAgSVBJVigg\nKiApCiAgICAgIENPTVBMRVgqMTYgICAgICAgICBBUCggKiApLCBCKCBMREIsICogKQoqICAgICAu\nLgoqCiogIFB1cnBvc2UKKiAgPT09PT09PQoqCiogIFpIUFNWIGNvbXB1dGVzIHRoZSBzb2x1dGlv\nbiB0byBhIGNvbXBsZXggc3lzdGVtIG9mIGxpbmVhciBlcXVhdGlvbnMKKiAgICAgQSAqIFggPSBC\nLAoqICB3aGVyZSBBIGlzIGFuIE4tYnktTiBIZXJtaXRpYW4gbWF0cml4IHN0b3JlZCBpbiBwYWNr\nZWQgZm9ybWF0IGFuZCBYCiogIGFuZCBCIGFyZSBOLWJ5LU5SSFMgbWF0cmljZXMuCioKKiAgVGhl\nIGRpYWdvbmFsIHBpdm90aW5nIG1ldGhvZCBpcyB1c2VkIHRvIGZhY3RvciBBIGFzCiogICAgIEEg\nPSBVICogRCAqIFUqKkgsICBpZiBVUExPID0gJ1UnLCBvcgoqICAgICBBID0gTCAqIEQgKiBMKipI\nLCAgaWYgVVBMTyA9ICdMJywKKiAgd2hlcmUgVSAob3IgTCkgaXMgYSBwcm9kdWN0IG9mIHBlcm11\ndGF0aW9uIGFuZCB1bml0IHVwcGVyIChsb3dlcikKKiAgdHJpYW5ndWxhciBtYXRyaWNlcywgRCBp\ncyBIZXJtaXRpYW4gYW5kIGJsb2NrIGRpYWdvbmFsIHdpdGggMS1ieS0xCiogIGFuZCAyLWJ5LTIg\nZGlhZ29uYWwgYmxvY2tzLiAgVGhlIGZhY3RvcmVkIGZvcm0gb2YgQSBpcyB0aGVuIHVzZWQgdG8K\nKiAgc29sdmUgdGhlIHN5c3RlbSBvZiBlcXVhdGlvbnMgQSAqIFggPSBCLgoqCiogIEFyZ3VtZW50\ncwoqICA9PT09PT09PT0KKgoqICBVUExPICAgIChpbnB1dCkgQ0hBUkFDVEVSKjEKKiAgICAgICAg\nICA9ICdVJzogIFVwcGVyIHRyaWFuZ2xlIG9mIEEgaXMgc3RvcmVkOwoqICAgICAgICAgID0gJ0wn\nOiAgTG93ZXIgdHJpYW5nbGUgb2YgQSBpcyBzdG9yZWQuCioKKiAgTiAgICAgICAoaW5wdXQpIElO\nVEVHRVIKKiAgICAgICAgICBUaGUgbnVtYmVyIG9mIGxpbmVhciBlcXVhdGlvbnMsIGkuZS4sIHRo\nZSBvcmRlciBvZiB0aGUKKiAgICAgICAgICBtYXRyaXggQS4gIE4gPj0gMC4KKgoqICBOUkhTICAg\nIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2YgcmlnaHQgaGFuZCBzaWRl\ncywgaS5lLiwgdGhlIG51bWJlciBvZiBjb2x1bW5zCiogICAgICAgICAgb2YgdGhlIG1hdHJpeCBC\nLiAgTlJIUyA+PSAwLgoqCiogIEFQICAgICAgKGlucHV0L291dHB1dCkgQ09NUExFWCoxNiBhcnJh\neSwgZGltZW5zaW9uIChOKihOKzEpLzIpCiogICAgICAgICAgT24gZW50cnksIHRoZSB1cHBlciBv\nciBsb3dlciB0cmlhbmdsZSBvZiB0aGUgSGVybWl0aWFuIG1hdHJpeAoqICAgICAgICAgIEEsIHBh\nY2tlZCBjb2x1bW53aXNlIGluIGEgbGluZWFyIGFycmF5LiAgVGhlIGotdGggY29sdW1uIG9mIEEK\nKiAgICAgICAgICBpcyBzdG9yZWQgaW4gdGhlIGFycmF5IEFQIGFzIGZvbGxvd3M6CiogICAgICAg\nICAgaWYgVVBMTyA9ICdVJywgQVAoaSArIChqLTEpKmovMikgPSBBKGksaikgZm9yIDE8PWk8PWo7\nCiogICAgICAgICAgaWYgVVBMTyA9ICdMJywgQVAoaSArIChqLTEpKigybi1qKS8yKSA9IEEoaSxq\nKSBmb3Igajw9aTw9bi4KKiAgICAgICAgICBTZWUgYmVsb3cgZm9yIGZ1cnRoZXIgZGV0YWlscy4K\nKgoqICAgICAgICAgIE9uIGV4aXQsIHRoZSBibG9jayBkaWFnb25hbCBtYXRyaXggRCBhbmQgdGhl\nIG11bHRpcGxpZXJzIHVzZWQKKiAgICAgICAgICB0byBvYnRhaW4gdGhlIGZhY3RvciBVIG9yIEwg\nZnJvbSB0aGUgZmFjdG9yaXphdGlvbgoqICAgICAgICAgIEEgPSBVKkQqVSoqSCBvciBBID0gTCpE\nKkwqKkggYXMgY29tcHV0ZWQgYnkgWkhQVFJGLCBzdG9yZWQgYXMKKiAgICAgICAgICBhIHBhY2tl\nZCB0cmlhbmd1bGFyIG1hdHJpeCBpbiB0aGUgc2FtZSBzdG9yYWdlIGZvcm1hdCBhcyBBLgoqCiog\nIElQSVYgICAgKG91dHB1dCkgSU5URUdFUiBhcnJheSwgZGltZW5zaW9uIChOKQoqICAgICAgICAg\nIERldGFpbHMgb2YgdGhlIGludGVyY2hhbmdlcyBhbmQgdGhlIGJsb2NrIHN0cnVjdHVyZSBvZiBE\nLCBhcwoqICAgICAgICAgIGRldGVybWluZWQgYnkgWkhQVFJGLiAgSWYgSVBJVihrKSA+IDAsIHRo\nZW4gcm93cyBhbmQgY29sdW1ucwoqICAgICAgICAgIGsgYW5kIElQSVYoaykgd2VyZSBpbnRlcmNo\nYW5nZWQsIGFuZCBEKGssaykgaXMgYSAxLWJ5LTEKKiAgICAgICAgICBkaWFnb25hbCBibG9jay4g\nIElmIFVQTE8gPSAnVScgYW5kIElQSVYoaykgPSBJUElWKGstMSkgPCAwLAoqICAgICAgICAgIHRo\nZW4gcm93cyBhbmQgY29sdW1ucyBrLTEgYW5kIC1JUElWKGspIHdlcmUgaW50ZXJjaGFuZ2VkIGFu\nZAoqICAgICAgICAgIEQoay0xOmssay0xOmspIGlzIGEgMi1ieS0yIGRpYWdvbmFsIGJsb2NrLiAg\nSWYgVVBMTyA9ICdMJyBhbmQKKiAgICAgICAgICBJUElWKGspID0gSVBJVihrKzEpIDwgMCwgdGhl\nbiByb3dzIGFuZCBjb2x1bW5zIGsrMSBhbmQKKiAgICAgICAgICAtSVBJVihrKSB3ZXJlIGludGVy\nY2hhbmdlZCBhbmQgRChrOmsrMSxrOmsrMSkgaXMgYSAyLWJ5LTIKKiAgICAgICAgICBkaWFnb25h\nbCBibG9jay4KKgoqICBCICAgICAgIChpbnB1dC9vdXRwdXQpIENPTVBMRVgqMTYgYXJyYXksIGRp\nbWVuc2lvbiAoTERCLE5SSFMpCiogICAgICAgICAgT24gZW50cnksIHRoZSBOLWJ5LU5SSFMgcmln\naHQgaGFuZCBzaWRlIG1hdHJpeCBCLgoqICAgICAgICAgIE9uIGV4aXQsIGlmIElORk8gPSAwLCB0\naGUgTi1ieS1OUkhTIHNvbHV0aW9uIG1hdHJpeCBYLgoqCiogIExEQiAgICAgKGlucHV0KSBJTlRF\nR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBCLiAgTERC\nID49IG1heCgxLE4pLgoqCiogIElORk8gICAgKG91dHB1dCkgSU5URUdFUgoqICAgICAgICAgID0g\nMDogIHN1Y2Nlc3NmdWwgZXhpdAoqICAgICAgICAgIDwgMDogIGlmIElORk8gPSAtaSwgdGhlIGkt\ndGggYXJndW1lbnQgaGFkIGFuIGlsbGVnYWwgdmFsdWUKKiAgICAgICAgICA+IDA6ICBpZiBJTkZP\nID0gaSwgRChpLGkpIGlzIGV4YWN0bHkgemVyby4gIFRoZSBmYWN0b3JpemF0aW9uCiogICAgICAg\nICAgICAgICAgaGFzIGJlZW4gY29tcGxldGVkLCBidXQgdGhlIGJsb2NrIGRpYWdvbmFsIG1hdHJp\neCBEIGlzCiogICAgICAgICAgICAgICAgZXhhY3RseSBzaW5ndWxhciwgc28gdGhlIHNvbHV0aW9u\nIGNvdWxkIG5vdCBiZQoqICAgICAgICAgICAgICAgIGNvbXB1dGVkLgoqCnJ6AQAAaIZohymBcnsB\nAAB9cnwBAAAoaIqJaItojHViaJiKARBomVgMAAAAemhwc3ZfMTYudHh0cn0BAAB1YmibigEQaJxY\nBAAAAGhwc3ZyfgEAAGiYigEQdWJofWhhXWh+h1JyfwEAAH1ygAEAAChogVgDAAAAU1BEcoEBAABo\ng1gEAAAAZnVsbHKCAQAAaHFYIQAAAGRyaXZlciBzaW1wbGUsIHNvbHZlIEEqWCA9IEIgb25seXKD\nAQAAaIZohymBcoQBAAB9coUBAAAoaIqJaItojHViaI1YKwAAAGh0dHA6Ly93d3cubmV0bGliLm9y\nZy9sYXBhY2svc2luZ2xlL3Nwb3N2LmZyhgEAAGiPWAEAAABzaJBofWiRXWh+h1JyhwEAAH1yiAEA\nACholFgVCwAAICAgICAgU1VCUk9VVElORSBTUE9TViggVVBMTywgTiwgTlJIUywgQSwgTERBLCBC\nLCBMREIsIElORk8gKQoqCiogIC0tIExBUEFDSyBkcml2ZXIgcm91dGluZSAodmVyc2lvbiAzLjMu\nMSkgLS0KKiAgLS0gTEFQQUNLIGlzIGEgc29mdHdhcmUgcGFja2FnZSBwcm92aWRlZCBieSBVbml2\nLiBvZiBUZW5uZXNzZWUsICAgIC0tCiogIC0tIFVuaXYuIG9mIENhbGlmb3JuaWEgQmVya2VsZXks\nIFVuaXYuIG9mIENvbG9yYWRvIERlbnZlciBhbmQgTkFHIEx0ZC4uLS0KKiAgLS0gQXByaWwgMjAx\nMSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0t\nCioKKiAgICAgLi4gU2NhbGFyIEFyZ3VtZW50cyAuLgogICAgICBDSEFSQUNURVIgICAgICAgICAg\nVVBMTwogICAgICBJTlRFR0VSICAgICAgICAgICAgSU5GTywgTERBLCBMREIsIE4sIE5SSFMKKiAg\nICAgLi4KKiAgICAgLi4gQXJyYXkgQXJndW1lbnRzIC4uCiAgICAgIFJFQUwgICAgICAgICAgICAg\nICBBKCBMREEsICogKSwgQiggTERCLCAqICkKKiAgICAgLi4KKgoqICBQdXJwb3NlCiogID09PT09\nPT0KKgoqICBTUE9TViBjb21wdXRlcyB0aGUgc29sdXRpb24gdG8gYSByZWFsIHN5c3RlbSBvZiBs\naW5lYXIgZXF1YXRpb25zCiogICAgIEEgKiBYID0gQiwKKiAgd2hlcmUgQSBpcyBhbiBOLWJ5LU4g\nc3ltbWV0cmljIHBvc2l0aXZlIGRlZmluaXRlIG1hdHJpeCBhbmQgWCBhbmQgQgoqICBhcmUgTi1i\neS1OUkhTIG1hdHJpY2VzLgoqCiogIFRoZSBDaG9sZXNreSBkZWNvbXBvc2l0aW9uIGlzIHVzZWQg\ndG8gZmFjdG9yIEEgYXMKKiAgICAgQSA9IFUqKlQqIFUsICBpZiBVUExPID0gJ1UnLCBvcgoqICAg\nICBBID0gTCAqIEwqKlQsICBpZiBVUExPID0gJ0wnLAoqICB3aGVyZSBVIGlzIGFuIHVwcGVyIHRy\naWFuZ3VsYXIgbWF0cml4IGFuZCBMIGlzIGEgbG93ZXIgdHJpYW5ndWxhcgoqICBtYXRyaXguICBU\naGUgZmFjdG9yZWQgZm9ybSBvZiBBIGlzIHRoZW4gdXNlZCB0byBzb2x2ZSB0aGUgc3lzdGVtIG9m\nCiogIGVxdWF0aW9ucyBBICogWCA9IEIuCioKKiAgQXJndW1lbnRzCiogID09PT09PT09PQoqCiog\nIFVQTE8gICAgKGlucHV0KSBDSEFSQUNURVIqMQoqICAgICAgICAgID0gJ1UnOiAgVXBwZXIgdHJp\nYW5nbGUgb2YgQSBpcyBzdG9yZWQ7CiogICAgICAgICAgPSAnTCc6ICBMb3dlciB0cmlhbmdsZSBv\nZiBBIGlzIHN0b3JlZC4KKgoqICBOICAgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRo\nZSBudW1iZXIgb2YgbGluZWFyIGVxdWF0aW9ucywgaS5lLiwgdGhlIG9yZGVyIG9mIHRoZQoqICAg\nICAgICAgIG1hdHJpeCBBLiAgTiA+PSAwLgoqCiogIE5SSFMgICAgKGlucHV0KSBJTlRFR0VSCiog\nICAgICAgICAgVGhlIG51bWJlciBvZiByaWdodCBoYW5kIHNpZGVzLCBpLmUuLCB0aGUgbnVtYmVy\nIG9mIGNvbHVtbnMKKiAgICAgICAgICBvZiB0aGUgbWF0cml4IEIuICBOUkhTID49IDAuCioKKiAg\nQSAgICAgICAoaW5wdXQvb3V0cHV0KSBSRUFMIGFycmF5LCBkaW1lbnNpb24gKExEQSxOKQoqICAg\nICAgICAgIE9uIGVudHJ5LCB0aGUgc3ltbWV0cmljIG1hdHJpeCBBLiAgSWYgVVBMTyA9ICdVJywg\ndGhlIGxlYWRpbmcKKiAgICAgICAgICBOLWJ5LU4gdXBwZXIgdHJpYW5ndWxhciBwYXJ0IG9mIEEg\nY29udGFpbnMgdGhlIHVwcGVyCiogICAgICAgICAgdHJpYW5ndWxhciBwYXJ0IG9mIHRoZSBtYXRy\naXggQSwgYW5kIHRoZSBzdHJpY3RseSBsb3dlcgoqICAgICAgICAgIHRyaWFuZ3VsYXIgcGFydCBv\nZiBBIGlzIG5vdCByZWZlcmVuY2VkLiAgSWYgVVBMTyA9ICdMJywgdGhlCiogICAgICAgICAgbGVh\nZGluZyBOLWJ5LU4gbG93ZXIgdHJpYW5ndWxhciBwYXJ0IG9mIEEgY29udGFpbnMgdGhlIGxvd2Vy\nCiogICAgICAgICAgdHJpYW5ndWxhciBwYXJ0IG9mIHRoZSBtYXRyaXggQSwgYW5kIHRoZSBzdHJp\nY3RseSB1cHBlcgoqICAgICAgICAgIHRyaWFuZ3VsYXIgcGFydCBvZiBBIGlzIG5vdCByZWZlcmVu\nY2VkLgoqCiogICAgICAgICAgT24gZXhpdCwgaWYgSU5GTyA9IDAsIHRoZSBmYWN0b3IgVSBvciBM\nIGZyb20gdGhlIENob2xlc2t5CiogICAgICAgICAgZmFjdG9yaXphdGlvbiBBID0gVSoqVCpVIG9y\nIEEgPSBMKkwqKlQuCioKKiAgTERBICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUg\nbGVhZGluZyBkaW1lbnNpb24gb2YgdGhlIGFycmF5IEEuICBMREEgPj0gbWF4KDEsTikuCioKKiAg\nQiAgICAgICAoaW5wdXQvb3V0cHV0KSBSRUFMIGFycmF5LCBkaW1lbnNpb24gKExEQixOUkhTKQoq\nICAgICAgICAgIE9uIGVudHJ5LCB0aGUgTi1ieS1OUkhTIHJpZ2h0IGhhbmQgc2lkZSBtYXRyaXgg\nQi4KKiAgICAgICAgICBPbiBleGl0LCBpZiBJTkZPID0gMCwgdGhlIE4tYnktTlJIUyBzb2x1dGlv\nbiBtYXRyaXggWC4KKgoqICBMREIgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBs\nZWFkaW5nIGRpbWVuc2lvbiBvZiB0aGUgYXJyYXkgQi4gIExEQiA+PSBtYXgoMSxOKS4KKgoqICBJ\nTkZPICAgIChvdXRwdXQpIElOVEVHRVIKKiAgICAgICAgICA9IDA6ICBzdWNjZXNzZnVsIGV4aXQK\nKiAgICAgICAgICA8IDA6ICBpZiBJTkZPID0gLWksIHRoZSBpLXRoIGFyZ3VtZW50IGhhZCBhbiBp\nbGxlZ2FsIHZhbHVlCiogICAgICAgICAgPiAwOiAgaWYgSU5GTyA9IGksIHRoZSBsZWFkaW5nIG1p\nbm9yIG9mIG9yZGVyIGkgb2YgQSBpcyBub3QKKiAgICAgICAgICAgICAgICBwb3NpdGl2ZSBkZWZp\nbml0ZSwgc28gdGhlIGZhY3Rvcml6YXRpb24gY291bGQgbm90IGJlCiogICAgICAgICAgICAgICAg\nY29tcGxldGVkLCBhbmQgdGhlIHNvbHV0aW9uIGhhcyBub3QgYmVlbiBjb21wdXRlZC4KKgpyiQEA\nAGiGaIcpgXKKAQAAfXKLAQAAKGiKiWiLaIx1YmiYigERaJlYDAAAAHNwb3N2XzE3LnR4dHKMAQAA\ndWJom4oBEWicWAQAAABwb3N2co0BAABomIoBEXViaH1oYV1ofodSco4BAAB9co8BAAAoaIFYAwAA\nAFNQRHKQAQAAaINYBAAAAGZ1bGxykQEAAGhxWCEAAABkcml2ZXIgc2ltcGxlLCBzb2x2ZSBBKlgg\nPSBCIG9ubHlykgEAAGiGaIcpgXKTAQAAfXKUAQAAKGiKiWiLaIx1YmiNWCsAAABodHRwOi8vd3d3\nLm5ldGxpYi5vcmcvbGFwYWNrL2RvdWJsZS9kcG9zdi5mcpUBAABoj1gBAAAAZGiQaH1okV1ofodS\ncpYBAAB9cpcBAAAoaJRYLQsAACAgICAgIFNVQlJPVVRJTkUgRFBPU1YoIFVQTE8sIE4sIE5SSFMs\nIEEsIExEQSwgQiwgTERCLCBJTkZPICkKKgoqICAtLSBMQVBBQ0sgZHJpdmVyIHJvdXRpbmUgKHZl\ncnNpb24gMy4zLjEpIC0tCiogIC0tIExBUEFDSyBpcyBhIHNvZnR3YXJlIHBhY2thZ2UgcHJvdmlk\nZWQgYnkgVW5pdi4gb2YgVGVubmVzc2VlLCAgICAtLQoqICAtLSBVbml2LiBvZiBDYWxpZm9ybmlh\nIEJlcmtlbGV5LCBVbml2LiBvZiBDb2xvcmFkbyBEZW52ZXIgYW5kIE5BRyBMdGQuLi0tCiogIC0t\nIEFwcmlsIDIwMTEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAtLQoqCiogICAgIC4uIFNjYWxhciBBcmd1bWVudHMgLi4KICAgICAgQ0hBUkFDVEVS\nICAgICAgICAgIFVQTE8KICAgICAgSU5URUdFUiAgICAgICAgICAgIElORk8sIExEQSwgTERCLCBO\nLCBOUkhTCiogICAgIC4uCiogICAgIC4uIEFycmF5IEFyZ3VtZW50cyAuLgogICAgICBET1VCTEUg\nUFJFQ0lTSU9OICAgQSggTERBLCAqICksIEIoIExEQiwgKiApCiogICAgIC4uCioKKiAgUHVycG9z\nZQoqICA9PT09PT09CioKKiAgRFBPU1YgY29tcHV0ZXMgdGhlIHNvbHV0aW9uIHRvIGEgcmVhbCBz\neXN0ZW0gb2YgbGluZWFyIGVxdWF0aW9ucwoqICAgICBBICogWCA9IEIsCiogIHdoZXJlIEEgaXMg\nYW4gTi1ieS1OIHN5bW1ldHJpYyBwb3NpdGl2ZSBkZWZpbml0ZSBtYXRyaXggYW5kIFggYW5kIEIK\nKiAgYXJlIE4tYnktTlJIUyBtYXRyaWNlcy4KKgoqICBUaGUgQ2hvbGVza3kgZGVjb21wb3NpdGlv\nbiBpcyB1c2VkIHRvIGZhY3RvciBBIGFzCiogICAgIEEgPSBVKipUKiBVLCAgaWYgVVBMTyA9ICdV\nJywgb3IKKiAgICAgQSA9IEwgKiBMKipULCAgaWYgVVBMTyA9ICdMJywKKiAgd2hlcmUgVSBpcyBh\nbiB1cHBlciB0cmlhbmd1bGFyIG1hdHJpeCBhbmQgTCBpcyBhIGxvd2VyIHRyaWFuZ3VsYXIKKiAg\nbWF0cml4LiAgVGhlIGZhY3RvcmVkIGZvcm0gb2YgQSBpcyB0aGVuIHVzZWQgdG8gc29sdmUgdGhl\nIHN5c3RlbSBvZgoqICBlcXVhdGlvbnMgQSAqIFggPSBCLgoqCiogIEFyZ3VtZW50cwoqICA9PT09\nPT09PT0KKgoqICBVUExPICAgIChpbnB1dCkgQ0hBUkFDVEVSKjEKKiAgICAgICAgICA9ICdVJzog\nIFVwcGVyIHRyaWFuZ2xlIG9mIEEgaXMgc3RvcmVkOwoqICAgICAgICAgID0gJ0wnOiAgTG93ZXIg\ndHJpYW5nbGUgb2YgQSBpcyBzdG9yZWQuCioKKiAgTiAgICAgICAoaW5wdXQpIElOVEVHRVIKKiAg\nICAgICAgICBUaGUgbnVtYmVyIG9mIGxpbmVhciBlcXVhdGlvbnMsIGkuZS4sIHRoZSBvcmRlciBv\nZiB0aGUKKiAgICAgICAgICBtYXRyaXggQS4gIE4gPj0gMC4KKgoqICBOUkhTICAgIChpbnB1dCkg\nSU5URUdFUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2YgcmlnaHQgaGFuZCBzaWRlcywgaS5lLiwg\ndGhlIG51bWJlciBvZiBjb2x1bW5zCiogICAgICAgICAgb2YgdGhlIG1hdHJpeCBCLiAgTlJIUyA+\nPSAwLgoqCiogIEEgICAgICAgKGlucHV0L291dHB1dCkgRE9VQkxFIFBSRUNJU0lPTiBhcnJheSwg\nZGltZW5zaW9uIChMREEsTikKKiAgICAgICAgICBPbiBlbnRyeSwgdGhlIHN5bW1ldHJpYyBtYXRy\naXggQS4gIElmIFVQTE8gPSAnVScsIHRoZSBsZWFkaW5nCiogICAgICAgICAgTi1ieS1OIHVwcGVy\nIHRyaWFuZ3VsYXIgcGFydCBvZiBBIGNvbnRhaW5zIHRoZSB1cHBlcgoqICAgICAgICAgIHRyaWFu\nZ3VsYXIgcGFydCBvZiB0aGUgbWF0cml4IEEsIGFuZCB0aGUgc3RyaWN0bHkgbG93ZXIKKiAgICAg\nICAgICB0cmlhbmd1bGFyIHBhcnQgb2YgQSBpcyBub3QgcmVmZXJlbmNlZC4gIElmIFVQTE8gPSAn\nTCcsIHRoZQoqICAgICAgICAgIGxlYWRpbmcgTi1ieS1OIGxvd2VyIHRyaWFuZ3VsYXIgcGFydCBv\nZiBBIGNvbnRhaW5zIHRoZSBsb3dlcgoqICAgICAgICAgIHRyaWFuZ3VsYXIgcGFydCBvZiB0aGUg\nbWF0cml4IEEsIGFuZCB0aGUgc3RyaWN0bHkgdXBwZXIKKiAgICAgICAgICB0cmlhbmd1bGFyIHBh\ncnQgb2YgQSBpcyBub3QgcmVmZXJlbmNlZC4KKgoqICAgICAgICAgIE9uIGV4aXQsIGlmIElORk8g\nPSAwLCB0aGUgZmFjdG9yIFUgb3IgTCBmcm9tIHRoZSBDaG9sZXNreQoqICAgICAgICAgIGZhY3Rv\ncml6YXRpb24gQSA9IFUqKlQqVSBvciBBID0gTCpMKipULgoqCiogIExEQSAgICAgKGlucHV0KSBJ\nTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBBLiAg\nTERBID49IG1heCgxLE4pLgoqCiogIEIgICAgICAgKGlucHV0L291dHB1dCkgRE9VQkxFIFBSRUNJ\nU0lPTiBhcnJheSwgZGltZW5zaW9uIChMREIsTlJIUykKKiAgICAgICAgICBPbiBlbnRyeSwgdGhl\nIE4tYnktTlJIUyByaWdodCBoYW5kIHNpZGUgbWF0cml4IEIuCiogICAgICAgICAgT24gZXhpdCwg\naWYgSU5GTyA9IDAsIHRoZSBOLWJ5LU5SSFMgc29sdXRpb24gbWF0cml4IFguCioKKiAgTERCICAg\nICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbGVhZGluZyBkaW1lbnNpb24gb2YgdGhl\nIGFycmF5IEIuICBMREIgPj0gbWF4KDEsTikuCioKKiAgSU5GTyAgICAob3V0cHV0KSBJTlRFR0VS\nCiogICAgICAgICAgPSAwOiAgc3VjY2Vzc2Z1bCBleGl0CiogICAgICAgICAgPCAwOiAgaWYgSU5G\nTyA9IC1pLCB0aGUgaS10aCBhcmd1bWVudCBoYWQgYW4gaWxsZWdhbCB2YWx1ZQoqICAgICAgICAg\nID4gMDogIGlmIElORk8gPSBpLCB0aGUgbGVhZGluZyBtaW5vciBvZiBvcmRlciBpIG9mIEEgaXMg\nbm90CiogICAgICAgICAgICAgICAgcG9zaXRpdmUgZGVmaW5pdGUsIHNvIHRoZSBmYWN0b3JpemF0\naW9uIGNvdWxkIG5vdCBiZQoqICAgICAgICAgICAgICAgIGNvbXBsZXRlZCwgYW5kIHRoZSBzb2x1\ndGlvbiBoYXMgbm90IGJlZW4gY29tcHV0ZWQuCioKcpgBAABohmiHKYFymQEAAH1ymgEAAChoiolo\ni2iMdWJomIoBEmiZWAwAAABkcG9zdl8xOC50eHRymwEAAHViaJuKARJonFgEAAAAcG9zdnKcAQAA\naJiKARJ1Ymh9aGFdaH6HUnKdAQAAfXKeAQAAKGiBWAMAAABIUERynwEAAGiDWAQAAABmdWxscqAB\nAABocVghAAAAZHJpdmVyIHNpbXBsZSwgc29sdmUgQSpYID0gQiBvbmx5cqEBAABohmiHKYFyogEA\nAH1yowEAAChoioloi2iMdWJojVgsAAAAaHR0cDovL3d3dy5uZXRsaWIub3JnL2xhcGFjay9jb21w\nbGV4L2Nwb3N2LmZypAEAAGiPWAEAAABjaJBofWiRXWh+h1JypQEAAH1ypgEAACholFgfCwAAICAg\nICAgU1VCUk9VVElORSBDUE9TViggVVBMTywgTiwgTlJIUywgQSwgTERBLCBCLCBMREIsIElORk8g\nKQoqCiogIC0tIExBUEFDSyBkcml2ZXIgcm91dGluZSAodmVyc2lvbiAzLjMuMSkgLS0KKiAgLS0g\nTEFQQUNLIGlzIGEgc29mdHdhcmUgcGFja2FnZSBwcm92aWRlZCBieSBVbml2LiBvZiBUZW5uZXNz\nZWUsICAgIC0tCiogIC0tIFVuaXYuIG9mIENhbGlmb3JuaWEgQmVya2VsZXksIFVuaXYuIG9mIENv\nbG9yYWRvIERlbnZlciBhbmQgTkFHIEx0ZC4uLS0KKiAgLS0gQXByaWwgMjAxMSAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tCioKKiAgICAgLi4g\nU2NhbGFyIEFyZ3VtZW50cyAuLgogICAgICBDSEFSQUNURVIgICAgICAgICAgVVBMTwogICAgICBJ\nTlRFR0VSICAgICAgICAgICAgSU5GTywgTERBLCBMREIsIE4sIE5SSFMKKiAgICAgLi4KKiAgICAg\nLi4gQXJyYXkgQXJndW1lbnRzIC4uCiAgICAgIENPTVBMRVggICAgICAgICAgICBBKCBMREEsICog\nKSwgQiggTERCLCAqICkKKiAgICAgLi4KKgoqICBQdXJwb3NlCiogID09PT09PT0KKgoqICBDUE9T\nViBjb21wdXRlcyB0aGUgc29sdXRpb24gdG8gYSBjb21wbGV4IHN5c3RlbSBvZiBsaW5lYXIgZXF1\nYXRpb25zCiogICAgIEEgKiBYID0gQiwKKiAgd2hlcmUgQSBpcyBhbiBOLWJ5LU4gSGVybWl0aWFu\nIHBvc2l0aXZlIGRlZmluaXRlIG1hdHJpeCBhbmQgWCBhbmQgQgoqICBhcmUgTi1ieS1OUkhTIG1h\ndHJpY2VzLgoqCiogIFRoZSBDaG9sZXNreSBkZWNvbXBvc2l0aW9uIGlzIHVzZWQgdG8gZmFjdG9y\nIEEgYXMKKiAgICAgQSA9IFUqKkgqIFUsICBpZiBVUExPID0gJ1UnLCBvcgoqICAgICBBID0gTCAq\nIEwqKkgsICBpZiBVUExPID0gJ0wnLAoqICB3aGVyZSBVIGlzIGFuIHVwcGVyIHRyaWFuZ3VsYXIg\nbWF0cml4IGFuZCAgTCBpcyBhIGxvd2VyIHRyaWFuZ3VsYXIKKiAgbWF0cml4LiAgVGhlIGZhY3Rv\ncmVkIGZvcm0gb2YgQSBpcyB0aGVuIHVzZWQgdG8gc29sdmUgdGhlIHN5c3RlbSBvZgoqICBlcXVh\ndGlvbnMgQSAqIFggPSBCLgoqCiogIEFyZ3VtZW50cwoqICA9PT09PT09PT0KKgoqICBVUExPICAg\nIChpbnB1dCkgQ0hBUkFDVEVSKjEKKiAgICAgICAgICA9ICdVJzogIFVwcGVyIHRyaWFuZ2xlIG9m\nIEEgaXMgc3RvcmVkOwoqICAgICAgICAgID0gJ0wnOiAgTG93ZXIgdHJpYW5nbGUgb2YgQSBpcyBz\ndG9yZWQuCioKKiAgTiAgICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbnVtYmVy\nIG9mIGxpbmVhciBlcXVhdGlvbnMsIGkuZS4sIHRoZSBvcmRlciBvZiB0aGUKKiAgICAgICAgICBt\nYXRyaXggQS4gIE4gPj0gMC4KKgoqICBOUkhTICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAg\nIFRoZSBudW1iZXIgb2YgcmlnaHQgaGFuZCBzaWRlcywgaS5lLiwgdGhlIG51bWJlciBvZiBjb2x1\nbW5zCiogICAgICAgICAgb2YgdGhlIG1hdHJpeCBCLiAgTlJIUyA+PSAwLgoqCiogIEEgICAgICAg\nKGlucHV0L291dHB1dCkgQ09NUExFWCBhcnJheSwgZGltZW5zaW9uIChMREEsTikKKiAgICAgICAg\nICBPbiBlbnRyeSwgdGhlIEhlcm1pdGlhbiBtYXRyaXggQS4gIElmIFVQTE8gPSAnVScsIHRoZSBs\nZWFkaW5nCiogICAgICAgICAgTi1ieS1OIHVwcGVyIHRyaWFuZ3VsYXIgcGFydCBvZiBBIGNvbnRh\naW5zIHRoZSB1cHBlcgoqICAgICAgICAgIHRyaWFuZ3VsYXIgcGFydCBvZiB0aGUgbWF0cml4IEEs\nIGFuZCB0aGUgc3RyaWN0bHkgbG93ZXIKKiAgICAgICAgICB0cmlhbmd1bGFyIHBhcnQgb2YgQSBp\ncyBub3QgcmVmZXJlbmNlZC4gIElmIFVQTE8gPSAnTCcsIHRoZQoqICAgICAgICAgIGxlYWRpbmcg\nTi1ieS1OIGxvd2VyIHRyaWFuZ3VsYXIgcGFydCBvZiBBIGNvbnRhaW5zIHRoZSBsb3dlcgoqICAg\nICAgICAgIHRyaWFuZ3VsYXIgcGFydCBvZiB0aGUgbWF0cml4IEEsIGFuZCB0aGUgc3RyaWN0bHkg\ndXBwZXIKKiAgICAgICAgICB0cmlhbmd1bGFyIHBhcnQgb2YgQSBpcyBub3QgcmVmZXJlbmNlZC4K\nKgoqICAgICAgICAgIE9uIGV4aXQsIGlmIElORk8gPSAwLCB0aGUgZmFjdG9yIFUgb3IgTCBmcm9t\nIHRoZSBDaG9sZXNreQoqICAgICAgICAgIGZhY3Rvcml6YXRpb24gQSA9IFUqKkgqVSBvciBBID0g\nTCpMKipILgoqCiogIExEQSAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRp\nbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBBLiAgTERBID49IG1heCgxLE4pLgoqCiogIEIgICAg\nICAgKGlucHV0L291dHB1dCkgQ09NUExFWCBhcnJheSwgZGltZW5zaW9uIChMREIsTlJIUykKKiAg\nICAgICAgICBPbiBlbnRyeSwgdGhlIE4tYnktTlJIUyByaWdodCBoYW5kIHNpZGUgbWF0cml4IEIu\nCiogICAgICAgICAgT24gZXhpdCwgaWYgSU5GTyA9IDAsIHRoZSBOLWJ5LU5SSFMgc29sdXRpb24g\nbWF0cml4IFguCioKKiAgTERCICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbGVh\nZGluZyBkaW1lbnNpb24gb2YgdGhlIGFycmF5IEIuICBMREIgPj0gbWF4KDEsTikuCioKKiAgSU5G\nTyAgICAob3V0cHV0KSBJTlRFR0VSCiogICAgICAgICAgPSAwOiAgc3VjY2Vzc2Z1bCBleGl0Ciog\nICAgICAgICAgPCAwOiAgaWYgSU5GTyA9IC1pLCB0aGUgaS10aCBhcmd1bWVudCBoYWQgYW4gaWxs\nZWdhbCB2YWx1ZQoqICAgICAgICAgID4gMDogIGlmIElORk8gPSBpLCB0aGUgbGVhZGluZyBtaW5v\nciBvZiBvcmRlciBpIG9mIEEgaXMgbm90CiogICAgICAgICAgICAgICAgcG9zaXRpdmUgZGVmaW5p\ndGUsIHNvIHRoZSBmYWN0b3JpemF0aW9uIGNvdWxkIG5vdCBiZQoqICAgICAgICAgICAgICAgIGNv\nbXBsZXRlZCwgYW5kIHRoZSBzb2x1dGlvbiBoYXMgbm90IGJlZW4gY29tcHV0ZWQuCioKcqcBAABo\nhmiHKYFyqAEAAH1yqQEAAChoioloi2iMdWJomIoBE2iZWAwAAABjcG9zdl8xOS50eHRyqgEAAHVi\naJuKARNonFgEAAAAcG9zdnKrAQAAaJiKARN1Ymh9aGFdaH6HUnKsAQAAfXKtAQAAKGiBWAMAAABI\nUERyrgEAAGiDWAQAAABmdWxscq8BAABocVghAAAAZHJpdmVyIHNpbXBsZSwgc29sdmUgQSpYID0g\nQiBvbmx5crABAABohmiHKYFysQEAAH1ysgEAAChoioloi2iMdWJojVguAAAAaHR0cDovL3d3dy5u\nZXRsaWIub3JnL2xhcGFjay9jb21wbGV4MTYvenBvc3YuZnKzAQAAaI9YAQAAAHpokGh9aJFdaH6H\nUnK0AQAAfXK1AQAAKGiUWCYLAAAgICAgICBTVUJST1VUSU5FIFpQT1NWKCBVUExPLCBOLCBOUkhT\nLCBBLCBMREEsIEIsIExEQiwgSU5GTyApCioKKiAgLS0gTEFQQUNLIGRyaXZlciByb3V0aW5lICh2\nZXJzaW9uIDMuMy4xKSAtLQoqICAtLSBMQVBBQ0sgaXMgYSBzb2Z0d2FyZSBwYWNrYWdlIHByb3Zp\nZGVkIGJ5IFVuaXYuIG9mIFRlbm5lc3NlZSwgICAgLS0KKiAgLS0gVW5pdi4gb2YgQ2FsaWZvcm5p\nYSBCZXJrZWxleSwgVW5pdi4gb2YgQ29sb3JhZG8gRGVudmVyIGFuZCBOQUcgTHRkLi4tLQoqICAt\nLSBBcHJpbCAyMDExICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgLS0KKgoqICAgICAuLiBTY2FsYXIgQXJndW1lbnRzIC4uCiAgICAgIENIQVJBQ1RF\nUiAgICAgICAgICBVUExPCiAgICAgIElOVEVHRVIgICAgICAgICAgICBJTkZPLCBMREEsIExEQiwg\nTiwgTlJIUwoqICAgICAuLgoqICAgICAuLiBBcnJheSBBcmd1bWVudHMgLi4KICAgICAgQ09NUExF\nWCoxNiAgICAgICAgIEEoIExEQSwgKiApLCBCKCBMREIsICogKQoqICAgICAuLgoqCiogIFB1cnBv\nc2UKKiAgPT09PT09PQoqCiogIFpQT1NWIGNvbXB1dGVzIHRoZSBzb2x1dGlvbiB0byBhIGNvbXBs\nZXggc3lzdGVtIG9mIGxpbmVhciBlcXVhdGlvbnMKKiAgICAgQSAqIFggPSBCLAoqICB3aGVyZSBB\nIGlzIGFuIE4tYnktTiBIZXJtaXRpYW4gcG9zaXRpdmUgZGVmaW5pdGUgbWF0cml4IGFuZCBYIGFu\nZCBCCiogIGFyZSBOLWJ5LU5SSFMgbWF0cmljZXMuCioKKiAgVGhlIENob2xlc2t5IGRlY29tcG9z\naXRpb24gaXMgdXNlZCB0byBmYWN0b3IgQSBhcwoqICAgICBBID0gVSoqSCogVSwgIGlmIFVQTE8g\nPSAnVScsIG9yCiogICAgIEEgPSBMICogTCoqSCwgIGlmIFVQTE8gPSAnTCcsCiogIHdoZXJlIFUg\naXMgYW4gdXBwZXIgdHJpYW5ndWxhciBtYXRyaXggYW5kICBMIGlzIGEgbG93ZXIgdHJpYW5ndWxh\ncgoqICBtYXRyaXguICBUaGUgZmFjdG9yZWQgZm9ybSBvZiBBIGlzIHRoZW4gdXNlZCB0byBzb2x2\nZSB0aGUgc3lzdGVtIG9mCiogIGVxdWF0aW9ucyBBICogWCA9IEIuCioKKiAgQXJndW1lbnRzCiog\nID09PT09PT09PQoqCiogIFVQTE8gICAgKGlucHV0KSBDSEFSQUNURVIqMQoqICAgICAgICAgID0g\nJ1UnOiAgVXBwZXIgdHJpYW5nbGUgb2YgQSBpcyBzdG9yZWQ7CiogICAgICAgICAgPSAnTCc6ICBM\nb3dlciB0cmlhbmdsZSBvZiBBIGlzIHN0b3JlZC4KKgoqICBOICAgICAgIChpbnB1dCkgSU5URUdF\nUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2YgbGluZWFyIGVxdWF0aW9ucywgaS5lLiwgdGhlIG9y\nZGVyIG9mIHRoZQoqICAgICAgICAgIG1hdHJpeCBBLiAgTiA+PSAwLgoqCiogIE5SSFMgICAgKGlu\ncHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG51bWJlciBvZiByaWdodCBoYW5kIHNpZGVzLCBp\nLmUuLCB0aGUgbnVtYmVyIG9mIGNvbHVtbnMKKiAgICAgICAgICBvZiB0aGUgbWF0cml4IEIuICBO\nUkhTID49IDAuCioKKiAgQSAgICAgICAoaW5wdXQvb3V0cHV0KSBDT01QTEVYKjE2IGFycmF5LCBk\naW1lbnNpb24gKExEQSxOKQoqICAgICAgICAgIE9uIGVudHJ5LCB0aGUgSGVybWl0aWFuIG1hdHJp\neCBBLiAgSWYgVVBMTyA9ICdVJywgdGhlIGxlYWRpbmcKKiAgICAgICAgICBOLWJ5LU4gdXBwZXIg\ndHJpYW5ndWxhciBwYXJ0IG9mIEEgY29udGFpbnMgdGhlIHVwcGVyCiogICAgICAgICAgdHJpYW5n\ndWxhciBwYXJ0IG9mIHRoZSBtYXRyaXggQSwgYW5kIHRoZSBzdHJpY3RseSBsb3dlcgoqICAgICAg\nICAgIHRyaWFuZ3VsYXIgcGFydCBvZiBBIGlzIG5vdCByZWZlcmVuY2VkLiAgSWYgVVBMTyA9ICdM\nJywgdGhlCiogICAgICAgICAgbGVhZGluZyBOLWJ5LU4gbG93ZXIgdHJpYW5ndWxhciBwYXJ0IG9m\nIEEgY29udGFpbnMgdGhlIGxvd2VyCiogICAgICAgICAgdHJpYW5ndWxhciBwYXJ0IG9mIHRoZSBt\nYXRyaXggQSwgYW5kIHRoZSBzdHJpY3RseSB1cHBlcgoqICAgICAgICAgIHRyaWFuZ3VsYXIgcGFy\ndCBvZiBBIGlzIG5vdCByZWZlcmVuY2VkLgoqCiogICAgICAgICAgT24gZXhpdCwgaWYgSU5GTyA9\nIDAsIHRoZSBmYWN0b3IgVSBvciBMIGZyb20gdGhlIENob2xlc2t5CiogICAgICAgICAgZmFjdG9y\naXphdGlvbiBBID0gVSoqSCAqVSBvciBBID0gTCpMKipILgoqCiogIExEQSAgICAgKGlucHV0KSBJ\nTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBBLiAg\nTERBID49IG1heCgxLE4pLgoqCiogIEIgICAgICAgKGlucHV0L291dHB1dCkgQ09NUExFWCoxNiBh\ncnJheSwgZGltZW5zaW9uIChMREIsTlJIUykKKiAgICAgICAgICBPbiBlbnRyeSwgdGhlIE4tYnkt\nTlJIUyByaWdodCBoYW5kIHNpZGUgbWF0cml4IEIuCiogICAgICAgICAgT24gZXhpdCwgaWYgSU5G\nTyA9IDAsIHRoZSBOLWJ5LU5SSFMgc29sdXRpb24gbWF0cml4IFguCioKKiAgTERCICAgICAoaW5w\ndXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbGVhZGluZyBkaW1lbnNpb24gb2YgdGhlIGFycmF5\nIEIuICBMREIgPj0gbWF4KDEsTikuCioKKiAgSU5GTyAgICAob3V0cHV0KSBJTlRFR0VSCiogICAg\nICAgICAgPSAwOiAgc3VjY2Vzc2Z1bCBleGl0CiogICAgICAgICAgPCAwOiAgaWYgSU5GTyA9IC1p\nLCB0aGUgaS10aCBhcmd1bWVudCBoYWQgYW4gaWxsZWdhbCB2YWx1ZQoqICAgICAgICAgID4gMDog\nIGlmIElORk8gPSBpLCB0aGUgbGVhZGluZyBtaW5vciBvZiBvcmRlciBpIG9mIEEgaXMgbm90Ciog\nICAgICAgICAgICAgICAgcG9zaXRpdmUgZGVmaW5pdGUsIHNvIHRoZSBmYWN0b3JpemF0aW9uIGNv\ndWxkIG5vdCBiZQoqICAgICAgICAgICAgICAgIGNvbXBsZXRlZCwgYW5kIHRoZSBzb2x1dGlvbiBo\nYXMgbm90IGJlZW4gY29tcHV0ZWQuCioKcrYBAABohmiHKYFytwEAAH1yuAEAAChoioloi2iMdWJo\nmIoBFGiZWAwAAAB6cG9zdl8yMC50eHRyuQEAAHViaJuKARRonFgEAAAAcG9zdnK6AQAAaJiKARR1\nYmh9aGFdaH6HUnK7AQAAfXK8AQAAKGiBWAMAAABTUERyvQEAAGiDWAQAAABiYW5kcr4BAABocVgh\nAAAAZHJpdmVyIHNpbXBsZSwgc29sdmUgQSpYID0gQiBvbmx5cr8BAABohmiHKYFywAEAAH1ywQEA\nAChoioloi2iMdWJojVgrAAAAaHR0cDovL3d3dy5uZXRsaWIub3JnL2xhcGFjay9zaW5nbGUvc3Bi\nc3YuZnLCAQAAaI9YAQAAAHNokGh9aJFdaH6HUnLDAQAAfXLEAQAAKGiUWDwMAAAgICAgICBTVUJS\nT1VUSU5FIFNQQlNWKCBVUExPLCBOLCBLRCwgTlJIUywgQUIsIExEQUIsIEIsIExEQiwgSU5GTyAp\nCioKKiAgLS0gTEFQQUNLIGRyaXZlciByb3V0aW5lICh2ZXJzaW9uIDMuMy4xKSAtLQoqICAtLSBM\nQVBBQ0sgaXMgYSBzb2Z0d2FyZSBwYWNrYWdlIHByb3ZpZGVkIGJ5IFVuaXYuIG9mIFRlbm5lc3Nl\nZSwgICAgLS0KKiAgLS0gVW5pdi4gb2YgQ2FsaWZvcm5pYSBCZXJrZWxleSwgVW5pdi4gb2YgQ29s\nb3JhZG8gRGVudmVyIGFuZCBOQUcgTHRkLi4tLQoqICAtLSBBcHJpbCAyMDExICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0KKgoqICAgICAuLiBT\nY2FsYXIgQXJndW1lbnRzIC4uCiAgICAgIENIQVJBQ1RFUiAgICAgICAgICBVUExPCiAgICAgIElO\nVEVHRVIgICAgICAgICAgICBJTkZPLCBLRCwgTERBQiwgTERCLCBOLCBOUkhTCiogICAgIC4uCiog\nICAgIC4uIEFycmF5IEFyZ3VtZW50cyAuLgogICAgICBSRUFMICAgICAgICAgICAgICAgQUIoIExE\nQUIsICogKSwgQiggTERCLCAqICkKKiAgICAgLi4KKgoqICBQdXJwb3NlCiogID09PT09PT0KKgoq\nICBTUEJTViBjb21wdXRlcyB0aGUgc29sdXRpb24gdG8gYSByZWFsIHN5c3RlbSBvZiBsaW5lYXIg\nZXF1YXRpb25zCiogICAgIEEgKiBYID0gQiwKKiAgd2hlcmUgQSBpcyBhbiBOLWJ5LU4gc3ltbWV0\ncmljIHBvc2l0aXZlIGRlZmluaXRlIGJhbmQgbWF0cml4IGFuZCBYCiogIGFuZCBCIGFyZSBOLWJ5\nLU5SSFMgbWF0cmljZXMuCioKKiAgVGhlIENob2xlc2t5IGRlY29tcG9zaXRpb24gaXMgdXNlZCB0\nbyBmYWN0b3IgQSBhcwoqICAgICBBID0gVSoqVCAqIFUsICBpZiBVUExPID0gJ1UnLCBvcgoqICAg\nICBBID0gTCAqIEwqKlQsICBpZiBVUExPID0gJ0wnLAoqICB3aGVyZSBVIGlzIGFuIHVwcGVyIHRy\naWFuZ3VsYXIgYmFuZCBtYXRyaXgsIGFuZCBMIGlzIGEgbG93ZXIKKiAgdHJpYW5ndWxhciBiYW5k\nIG1hdHJpeCwgd2l0aCB0aGUgc2FtZSBudW1iZXIgb2Ygc3VwZXJkaWFnb25hbHMgb3IKKiAgc3Vi\nZGlhZ29uYWxzIGFzIEEuICBUaGUgZmFjdG9yZWQgZm9ybSBvZiBBIGlzIHRoZW4gdXNlZCB0byBz\nb2x2ZSB0aGUKKiAgc3lzdGVtIG9mIGVxdWF0aW9ucyBBICogWCA9IEIuCioKKiAgQXJndW1lbnRz\nCiogID09PT09PT09PQoqCiogIFVQTE8gICAgKGlucHV0KSBDSEFSQUNURVIqMQoqICAgICAgICAg\nID0gJ1UnOiAgVXBwZXIgdHJpYW5nbGUgb2YgQSBpcyBzdG9yZWQ7CiogICAgICAgICAgPSAnTCc6\nICBMb3dlciB0cmlhbmdsZSBvZiBBIGlzIHN0b3JlZC4KKgoqICBOICAgICAgIChpbnB1dCkgSU5U\nRUdFUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2YgbGluZWFyIGVxdWF0aW9ucywgaS5lLiwgdGhl\nIG9yZGVyIG9mIHRoZQoqICAgICAgICAgIG1hdHJpeCBBLiAgTiA+PSAwLgoqCiogIEtEICAgICAg\nKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG51bWJlciBvZiBzdXBlcmRpYWdvbmFscyBv\nZiB0aGUgbWF0cml4IEEgaWYgVVBMTyA9ICdVJywKKiAgICAgICAgICBvciB0aGUgbnVtYmVyIG9m\nIHN1YmRpYWdvbmFscyBpZiBVUExPID0gJ0wnLiAgS0QgPj0gMC4KKgoqICBOUkhTICAgIChpbnB1\ndCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2YgcmlnaHQgaGFuZCBzaWRlcywgaS5l\nLiwgdGhlIG51bWJlciBvZiBjb2x1bW5zCiogICAgICAgICAgb2YgdGhlIG1hdHJpeCBCLiAgTlJI\nUyA+PSAwLgoqCiogIEFCICAgICAgKGlucHV0L291dHB1dCkgUkVBTCBhcnJheSwgZGltZW5zaW9u\nIChMREFCLE4pCiogICAgICAgICAgT24gZW50cnksIHRoZSB1cHBlciBvciBsb3dlciB0cmlhbmds\nZSBvZiB0aGUgc3ltbWV0cmljIGJhbmQKKiAgICAgICAgICBtYXRyaXggQSwgc3RvcmVkIGluIHRo\nZSBmaXJzdCBLRCsxIHJvd3Mgb2YgdGhlIGFycmF5LiAgVGhlCiogICAgICAgICAgai10aCBjb2x1\nbW4gb2YgQSBpcyBzdG9yZWQgaW4gdGhlIGotdGggY29sdW1uIG9mIHRoZSBhcnJheSBBQgoqICAg\nICAgICAgIGFzIGZvbGxvd3M6CiogICAgICAgICAgaWYgVVBMTyA9ICdVJywgQUIoS0QrMStpLWos\naikgPSBBKGksaikgZm9yIG1heCgxLGotS0QpPD1pPD1qOwoqICAgICAgICAgIGlmIFVQTE8gPSAn\nTCcsIEFCKDEraS1qLGopICAgID0gQShpLGopIGZvciBqPD1pPD1taW4oTixqK0tEKS4KKiAgICAg\nICAgICBTZWUgYmVsb3cgZm9yIGZ1cnRoZXIgZGV0YWlscy4KKgoqICAgICAgICAgIE9uIGV4aXQs\nIGlmIElORk8gPSAwLCB0aGUgdHJpYW5ndWxhciBmYWN0b3IgVSBvciBMIGZyb20gdGhlCiogICAg\nICAgICAgQ2hvbGVza3kgZmFjdG9yaXphdGlvbiBBID0gVSoqVCpVIG9yIEEgPSBMKkwqKlQgb2Yg\ndGhlIGJhbmQKKiAgICAgICAgICBtYXRyaXggQSwgaW4gdGhlIHNhbWUgc3RvcmFnZSBmb3JtYXQg\nYXMgQS4KKgoqICBMREFCICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBsZWFkaW5n\nIGRpbWVuc2lvbiBvZiB0aGUgYXJyYXkgQUIuICBMREFCID49IEtEKzEuCioKKiAgQiAgICAgICAo\naW5wdXQvb3V0cHV0KSBSRUFMIGFycmF5LCBkaW1lbnNpb24gKExEQixOUkhTKQoqICAgICAgICAg\nIE9uIGVudHJ5LCB0aGUgTi1ieS1OUkhTIHJpZ2h0IGhhbmQgc2lkZSBtYXRyaXggQi4KKiAgICAg\nICAgICBPbiBleGl0LCBpZiBJTkZPID0gMCwgdGhlIE4tYnktTlJIUyBzb2x1dGlvbiBtYXRyaXgg\nWC4KKgoqICBMREIgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBsZWFkaW5nIGRp\nbWVuc2lvbiBvZiB0aGUgYXJyYXkgQi4gIExEQiA+PSBtYXgoMSxOKS4KKgoqICBJTkZPICAgIChv\ndXRwdXQpIElOVEVHRVIKKiAgICAgICAgICA9IDA6ICBzdWNjZXNzZnVsIGV4aXQKKiAgICAgICAg\nICA8IDA6ICBpZiBJTkZPID0gLWksIHRoZSBpLXRoIGFyZ3VtZW50IGhhZCBhbiBpbGxlZ2FsIHZh\nbHVlCiogICAgICAgICAgPiAwOiAgaWYgSU5GTyA9IGksIHRoZSBsZWFkaW5nIG1pbm9yIG9mIG9y\nZGVyIGkgb2YgQSBpcyBub3QKKiAgICAgICAgICAgICAgICBwb3NpdGl2ZSBkZWZpbml0ZSwgc28g\ndGhlIGZhY3Rvcml6YXRpb24gY291bGQgbm90IGJlCiogICAgICAgICAgICAgICAgY29tcGxldGVk\nLCBhbmQgdGhlIHNvbHV0aW9uIGhhcyBub3QgYmVlbiBjb21wdXRlZC4KKgpyxQEAAGiGaIcpgXLG\nAQAAfXLHAQAAKGiKiWiLaIx1YmiYigEVaJlYDAAAAHNwYnN2XzIxLnR4dHLIAQAAdWJom4oBFWic\nWAQAAABwYnN2cskBAABomIoBFXViaH1oYV1ofodScsoBAAB9cssBAAAoaIFYAwAAAFNQRHLMAQAA\naINYBAAAAGJhbmRyzQEAAGhxWCEAAABkcml2ZXIgc2ltcGxlLCBzb2x2ZSBBKlggPSBCIG9ubHly\nzgEAAGiGaIcpgXLPAQAAfXLQAQAAKGiKiWiLaIx1YmiNWCsAAABodHRwOi8vd3d3Lm5ldGxpYi5v\ncmcvbGFwYWNrL2RvdWJsZS9kcGJzdi5mctEBAABoj1gBAAAAZGiQaH1okV1ofodSctIBAAB9ctMB\nAAAoaJRYVAwAACAgICAgIFNVQlJPVVRJTkUgRFBCU1YoIFVQTE8sIE4sIEtELCBOUkhTLCBBQiwg\nTERBQiwgQiwgTERCLCBJTkZPICkKKgoqICAtLSBMQVBBQ0sgZHJpdmVyIHJvdXRpbmUgKHZlcnNp\nb24gMy4zLjEpIC0tCiogIC0tIExBUEFDSyBpcyBhIHNvZnR3YXJlIHBhY2thZ2UgcHJvdmlkZWQg\nYnkgVW5pdi4gb2YgVGVubmVzc2VlLCAgICAtLQoqICAtLSBVbml2LiBvZiBDYWxpZm9ybmlhIEJl\ncmtlbGV5LCBVbml2LiBvZiBDb2xvcmFkbyBEZW52ZXIgYW5kIE5BRyBMdGQuLi0tCiogIC0tIEFw\ncmlsIDIwMTEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAtLQoqCiogICAgIC4uIFNjYWxhciBBcmd1bWVudHMgLi4KICAgICAgQ0hBUkFDVEVSICAg\nICAgICAgIFVQTE8KICAgICAgSU5URUdFUiAgICAgICAgICAgIElORk8sIEtELCBMREFCLCBMREIs\nIE4sIE5SSFMKKiAgICAgLi4KKiAgICAgLi4gQXJyYXkgQXJndW1lbnRzIC4uCiAgICAgIERPVUJM\nRSBQUkVDSVNJT04gICBBQiggTERBQiwgKiApLCBCKCBMREIsICogKQoqICAgICAuLgoqCiogIFB1\ncnBvc2UKKiAgPT09PT09PQoqCiogIERQQlNWIGNvbXB1dGVzIHRoZSBzb2x1dGlvbiB0byBhIHJl\nYWwgc3lzdGVtIG9mIGxpbmVhciBlcXVhdGlvbnMKKiAgICAgQSAqIFggPSBCLAoqICB3aGVyZSBB\nIGlzIGFuIE4tYnktTiBzeW1tZXRyaWMgcG9zaXRpdmUgZGVmaW5pdGUgYmFuZCBtYXRyaXggYW5k\nIFgKKiAgYW5kIEIgYXJlIE4tYnktTlJIUyBtYXRyaWNlcy4KKgoqICBUaGUgQ2hvbGVza3kgZGVj\nb21wb3NpdGlvbiBpcyB1c2VkIHRvIGZhY3RvciBBIGFzCiogICAgIEEgPSBVKipUICogVSwgIGlm\nIFVQTE8gPSAnVScsIG9yCiogICAgIEEgPSBMICogTCoqVCwgIGlmIFVQTE8gPSAnTCcsCiogIHdo\nZXJlIFUgaXMgYW4gdXBwZXIgdHJpYW5ndWxhciBiYW5kIG1hdHJpeCwgYW5kIEwgaXMgYSBsb3dl\ncgoqICB0cmlhbmd1bGFyIGJhbmQgbWF0cml4LCB3aXRoIHRoZSBzYW1lIG51bWJlciBvZiBzdXBl\ncmRpYWdvbmFscyBvcgoqICBzdWJkaWFnb25hbHMgYXMgQS4gIFRoZSBmYWN0b3JlZCBmb3JtIG9m\nIEEgaXMgdGhlbiB1c2VkIHRvIHNvbHZlIHRoZQoqICBzeXN0ZW0gb2YgZXF1YXRpb25zIEEgKiBY\nID0gQi4KKgoqICBBcmd1bWVudHMKKiAgPT09PT09PT09CioKKiAgVVBMTyAgICAoaW5wdXQpIENI\nQVJBQ1RFUioxCiogICAgICAgICAgPSAnVSc6ICBVcHBlciB0cmlhbmdsZSBvZiBBIGlzIHN0b3Jl\nZDsKKiAgICAgICAgICA9ICdMJzogIExvd2VyIHRyaWFuZ2xlIG9mIEEgaXMgc3RvcmVkLgoqCiog\nIE4gICAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG51bWJlciBvZiBsaW5lYXIg\nZXF1YXRpb25zLCBpLmUuLCB0aGUgb3JkZXIgb2YgdGhlCiogICAgICAgICAgbWF0cml4IEEuICBO\nID49IDAuCioKKiAgS0QgICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbnVtYmVy\nIG9mIHN1cGVyZGlhZ29uYWxzIG9mIHRoZSBtYXRyaXggQSBpZiBVUExPID0gJ1UnLAoqICAgICAg\nICAgIG9yIHRoZSBudW1iZXIgb2Ygc3ViZGlhZ29uYWxzIGlmIFVQTE8gPSAnTCcuICBLRCA+PSAw\nLgoqCiogIE5SSFMgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG51bWJlciBvZiBy\naWdodCBoYW5kIHNpZGVzLCBpLmUuLCB0aGUgbnVtYmVyIG9mIGNvbHVtbnMKKiAgICAgICAgICBv\nZiB0aGUgbWF0cml4IEIuICBOUkhTID49IDAuCioKKiAgQUIgICAgICAoaW5wdXQvb3V0cHV0KSBE\nT1VCTEUgUFJFQ0lTSU9OIGFycmF5LCBkaW1lbnNpb24gKExEQUIsTikKKiAgICAgICAgICBPbiBl\nbnRyeSwgdGhlIHVwcGVyIG9yIGxvd2VyIHRyaWFuZ2xlIG9mIHRoZSBzeW1tZXRyaWMgYmFuZAoq\nICAgICAgICAgIG1hdHJpeCBBLCBzdG9yZWQgaW4gdGhlIGZpcnN0IEtEKzEgcm93cyBvZiB0aGUg\nYXJyYXkuICBUaGUKKiAgICAgICAgICBqLXRoIGNvbHVtbiBvZiBBIGlzIHN0b3JlZCBpbiB0aGUg\nai10aCBjb2x1bW4gb2YgdGhlIGFycmF5IEFCCiogICAgICAgICAgYXMgZm9sbG93czoKKiAgICAg\nICAgICBpZiBVUExPID0gJ1UnLCBBQihLRCsxK2ktaixqKSA9IEEoaSxqKSBmb3IgbWF4KDEsai1L\nRCk8PWk8PWo7CiogICAgICAgICAgaWYgVVBMTyA9ICdMJywgQUIoMStpLWosaikgICAgPSBBKGks\naikgZm9yIGo8PWk8PW1pbihOLGorS0QpLgoqICAgICAgICAgIFNlZSBiZWxvdyBmb3IgZnVydGhl\nciBkZXRhaWxzLgoqCiogICAgICAgICAgT24gZXhpdCwgaWYgSU5GTyA9IDAsIHRoZSB0cmlhbmd1\nbGFyIGZhY3RvciBVIG9yIEwgZnJvbSB0aGUKKiAgICAgICAgICBDaG9sZXNreSBmYWN0b3JpemF0\naW9uIEEgPSBVKipUKlUgb3IgQSA9IEwqTCoqVCBvZiB0aGUgYmFuZAoqICAgICAgICAgIG1hdHJp\neCBBLCBpbiB0aGUgc2FtZSBzdG9yYWdlIGZvcm1hdCBhcyBBLgoqCiogIExEQUIgICAgKGlucHV0\nKSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBB\nQi4gIExEQUIgPj0gS0QrMS4KKgoqICBCICAgICAgIChpbnB1dC9vdXRwdXQpIERPVUJMRSBQUkVD\nSVNJT04gYXJyYXksIGRpbWVuc2lvbiAoTERCLE5SSFMpCiogICAgICAgICAgT24gZW50cnksIHRo\nZSBOLWJ5LU5SSFMgcmlnaHQgaGFuZCBzaWRlIG1hdHJpeCBCLgoqICAgICAgICAgIE9uIGV4aXQs\nIGlmIElORk8gPSAwLCB0aGUgTi1ieS1OUkhTIHNvbHV0aW9uIG1hdHJpeCBYLgoqCiogIExEQiAg\nICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRo\nZSBhcnJheSBCLiAgTERCID49IG1heCgxLE4pLgoqCiogIElORk8gICAgKG91dHB1dCkgSU5URUdF\nUgoqICAgICAgICAgID0gMDogIHN1Y2Nlc3NmdWwgZXhpdAoqICAgICAgICAgIDwgMDogIGlmIElO\nRk8gPSAtaSwgdGhlIGktdGggYXJndW1lbnQgaGFkIGFuIGlsbGVnYWwgdmFsdWUKKiAgICAgICAg\nICA+IDA6ICBpZiBJTkZPID0gaSwgdGhlIGxlYWRpbmcgbWlub3Igb2Ygb3JkZXIgaSBvZiBBIGlz\nIG5vdAoqICAgICAgICAgICAgICAgIHBvc2l0aXZlIGRlZmluaXRlLCBzbyB0aGUgZmFjdG9yaXph\ndGlvbiBjb3VsZCBub3QgYmUKKiAgICAgICAgICAgICAgICBjb21wbGV0ZWQsIGFuZCB0aGUgc29s\ndXRpb24gaGFzIG5vdCBiZWVuIGNvbXB1dGVkLgoqCnLUAQAAaIZohymBctUBAAB9ctYBAAAoaIqJ\naItojHViaJiKARZomVgMAAAAZHBic3ZfMjIudHh0ctcBAAB1YmibigEWaJxYBAAAAHBic3Zy2AEA\nAGiYigEWdWJofWhhXWh+h1Jy2QEAAH1y2gEAAChogVgDAAAASFBEctsBAABog1gEAAAAYmFuZHLc\nAQAAaHFYIQAAAGRyaXZlciBzaW1wbGUsIHNvbHZlIEEqWCA9IEIgb25seXLdAQAAaIZohymBct4B\nAAB9ct8BAAAoaIqJaItojHViaI1YLAAAAGh0dHA6Ly93d3cubmV0bGliLm9yZy9sYXBhY2svY29t\ncGxleC9jcGJzdi5mcuABAABoj1gBAAAAY2iQaH1okV1ofodScuEBAAB9cuIBAAAoaJRYRQwAACAg\nICAgIFNVQlJPVVRJTkUgQ1BCU1YoIFVQTE8sIE4sIEtELCBOUkhTLCBBQiwgTERBQiwgQiwgTERC\nLCBJTkZPICkKKgoqICAtLSBMQVBBQ0sgZHJpdmVyIHJvdXRpbmUgKHZlcnNpb24gMy4zLjEpIC0t\nCiogIC0tIExBUEFDSyBpcyBhIHNvZnR3YXJlIHBhY2thZ2UgcHJvdmlkZWQgYnkgVW5pdi4gb2Yg\nVGVubmVzc2VlLCAgICAtLQoqICAtLSBVbml2LiBvZiBDYWxpZm9ybmlhIEJlcmtlbGV5LCBVbml2\nLiBvZiBDb2xvcmFkbyBEZW52ZXIgYW5kIE5BRyBMdGQuLi0tCiogIC0tIEFwcmlsIDIwMTEgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLQoqCiog\nICAgIC4uIFNjYWxhciBBcmd1bWVudHMgLi4KICAgICAgQ0hBUkFDVEVSICAgICAgICAgIFVQTE8K\nICAgICAgSU5URUdFUiAgICAgICAgICAgIElORk8sIEtELCBMREFCLCBMREIsIE4sIE5SSFMKKiAg\nICAgLi4KKiAgICAgLi4gQXJyYXkgQXJndW1lbnRzIC4uCiAgICAgIENPTVBMRVggICAgICAgICAg\nICBBQiggTERBQiwgKiApLCBCKCBMREIsICogKQoqICAgICAuLgoqCiogIFB1cnBvc2UKKiAgPT09\nPT09PQoqCiogIENQQlNWIGNvbXB1dGVzIHRoZSBzb2x1dGlvbiB0byBhIGNvbXBsZXggc3lzdGVt\nIG9mIGxpbmVhciBlcXVhdGlvbnMKKiAgICAgQSAqIFggPSBCLAoqICB3aGVyZSBBIGlzIGFuIE4t\nYnktTiBIZXJtaXRpYW4gcG9zaXRpdmUgZGVmaW5pdGUgYmFuZCBtYXRyaXggYW5kIFgKKiAgYW5k\nIEIgYXJlIE4tYnktTlJIUyBtYXRyaWNlcy4KKgoqICBUaGUgQ2hvbGVza3kgZGVjb21wb3NpdGlv\nbiBpcyB1c2VkIHRvIGZhY3RvciBBIGFzCiogICAgIEEgPSBVKipIICogVSwgIGlmIFVQTE8gPSAn\nVScsIG9yCiogICAgIEEgPSBMICogTCoqSCwgIGlmIFVQTE8gPSAnTCcsCiogIHdoZXJlIFUgaXMg\nYW4gdXBwZXIgdHJpYW5ndWxhciBiYW5kIG1hdHJpeCwgYW5kIEwgaXMgYSBsb3dlcgoqICB0cmlh\nbmd1bGFyIGJhbmQgbWF0cml4LCB3aXRoIHRoZSBzYW1lIG51bWJlciBvZiBzdXBlcmRpYWdvbmFs\ncyBvcgoqICBzdWJkaWFnb25hbHMgYXMgQS4gIFRoZSBmYWN0b3JlZCBmb3JtIG9mIEEgaXMgdGhl\nbiB1c2VkIHRvIHNvbHZlIHRoZQoqICBzeXN0ZW0gb2YgZXF1YXRpb25zIEEgKiBYID0gQi4KKgoq\nICBBcmd1bWVudHMKKiAgPT09PT09PT09CioKKiAgVVBMTyAgICAoaW5wdXQpIENIQVJBQ1RFUiox\nCiogICAgICAgICAgPSAnVSc6ICBVcHBlciB0cmlhbmdsZSBvZiBBIGlzIHN0b3JlZDsKKiAgICAg\nICAgICA9ICdMJzogIExvd2VyIHRyaWFuZ2xlIG9mIEEgaXMgc3RvcmVkLgoqCiogIE4gICAgICAg\nKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG51bWJlciBvZiBsaW5lYXIgZXF1YXRpb25z\nLCBpLmUuLCB0aGUgb3JkZXIgb2YgdGhlCiogICAgICAgICAgbWF0cml4IEEuICBOID49IDAuCioK\nKiAgS0QgICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbnVtYmVyIG9mIHN1cGVy\nZGlhZ29uYWxzIG9mIHRoZSBtYXRyaXggQSBpZiBVUExPID0gJ1UnLAoqICAgICAgICAgIG9yIHRo\nZSBudW1iZXIgb2Ygc3ViZGlhZ29uYWxzIGlmIFVQTE8gPSAnTCcuICBLRCA+PSAwLgoqCiogIE5S\nSFMgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG51bWJlciBvZiByaWdodCBoYW5k\nIHNpZGVzLCBpLmUuLCB0aGUgbnVtYmVyIG9mIGNvbHVtbnMKKiAgICAgICAgICBvZiB0aGUgbWF0\ncml4IEIuICBOUkhTID49IDAuCioKKiAgQUIgICAgICAoaW5wdXQvb3V0cHV0KSBDT01QTEVYIGFy\ncmF5LCBkaW1lbnNpb24gKExEQUIsTikKKiAgICAgICAgICBPbiBlbnRyeSwgdGhlIHVwcGVyIG9y\nIGxvd2VyIHRyaWFuZ2xlIG9mIHRoZSBIZXJtaXRpYW4gYmFuZAoqICAgICAgICAgIG1hdHJpeCBB\nLCBzdG9yZWQgaW4gdGhlIGZpcnN0IEtEKzEgcm93cyBvZiB0aGUgYXJyYXkuICBUaGUKKiAgICAg\nICAgICBqLXRoIGNvbHVtbiBvZiBBIGlzIHN0b3JlZCBpbiB0aGUgai10aCBjb2x1bW4gb2YgdGhl\nIGFycmF5IEFCCiogICAgICAgICAgYXMgZm9sbG93czoKKiAgICAgICAgICBpZiBVUExPID0gJ1Un\nLCBBQihLRCsxK2ktaixqKSA9IEEoaSxqKSBmb3IgbWF4KDEsai1LRCk8PWk8PWo7CiogICAgICAg\nICAgaWYgVVBMTyA9ICdMJywgQUIoMStpLWosaikgICAgPSBBKGksaikgZm9yIGo8PWk8PW1pbihO\nLGorS0QpLgoqICAgICAgICAgIFNlZSBiZWxvdyBmb3IgZnVydGhlciBkZXRhaWxzLgoqCiogICAg\nICAgICAgT24gZXhpdCwgaWYgSU5GTyA9IDAsIHRoZSB0cmlhbmd1bGFyIGZhY3RvciBVIG9yIEwg\nZnJvbSB0aGUKKiAgICAgICAgICBDaG9sZXNreSBmYWN0b3JpemF0aW9uIEEgPSBVKipIKlUgb3Ig\nQSA9IEwqTCoqSCBvZiB0aGUgYmFuZAoqICAgICAgICAgIG1hdHJpeCBBLCBpbiB0aGUgc2FtZSBz\ndG9yYWdlIGZvcm1hdCBhcyBBLgoqCiogIExEQUIgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAg\nICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBBQi4gIExEQUIgPj0gS0QrMS4K\nKgoqICBCICAgICAgIChpbnB1dC9vdXRwdXQpIENPTVBMRVggYXJyYXksIGRpbWVuc2lvbiAoTERC\nLE5SSFMpCiogICAgICAgICAgT24gZW50cnksIHRoZSBOLWJ5LU5SSFMgcmlnaHQgaGFuZCBzaWRl\nIG1hdHJpeCBCLgoqICAgICAgICAgIE9uIGV4aXQsIGlmIElORk8gPSAwLCB0aGUgTi1ieS1OUkhT\nIHNvbHV0aW9uIG1hdHJpeCBYLgoqCiogIExEQiAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAg\nICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBCLiAgTERCID49IG1heCgxLE4p\nLgoqCiogIElORk8gICAgKG91dHB1dCkgSU5URUdFUgoqICAgICAgICAgID0gMDogIHN1Y2Nlc3Nm\ndWwgZXhpdAoqICAgICAgICAgIDwgMDogIGlmIElORk8gPSAtaSwgdGhlIGktdGggYXJndW1lbnQg\naGFkIGFuIGlsbGVnYWwgdmFsdWUKKiAgICAgICAgICA+IDA6ICBpZiBJTkZPID0gaSwgdGhlIGxl\nYWRpbmcgbWlub3Igb2Ygb3JkZXIgaSBvZiBBIGlzIG5vdAoqICAgICAgICAgICAgICAgIHBvc2l0\naXZlIGRlZmluaXRlLCBzbyB0aGUgZmFjdG9yaXphdGlvbiBjb3VsZCBub3QgYmUKKiAgICAgICAg\nICAgICAgICBjb21wbGV0ZWQsIGFuZCB0aGUgc29sdXRpb24gaGFzIG5vdCBiZWVuIGNvbXB1dGVk\nLgoqCnLjAQAAaIZohymBcuQBAAB9cuUBAAAoaIqJaItojHViaJiKARdomVgMAAAAY3Bic3ZfMjMu\ndHh0cuYBAAB1YmibigEXaJxYBAAAAHBic3Zy5wEAAGiYigEXdWJofWhhXWh+h1Jy6AEAAH1y6QEA\nAChogVgDAAAASFBEcuoBAABog1gEAAAAYmFuZHLrAQAAaHFYIQAAAGRyaXZlciBzaW1wbGUsIHNv\nbHZlIEEqWCA9IEIgb25seXLsAQAAaIZohymBcu0BAAB9cu4BAAAoaIqJaItojHViaI1YLgAAAGh0\ndHA6Ly93d3cubmV0bGliLm9yZy9sYXBhY2svY29tcGxleDE2L3pwYnN2LmZy7wEAAGiPWAEAAAB6\naJBofWiRXWh+h1Jy8AEAAH1y8QEAACholFhMDAAAICAgICAgU1VCUk9VVElORSBaUEJTViggVVBM\nTywgTiwgS0QsIE5SSFMsIEFCLCBMREFCLCBCLCBMREIsIElORk8gKQoqCiogIC0tIExBUEFDSyBk\ncml2ZXIgcm91dGluZSAodmVyc2lvbiAzLjMuMSkgLS0KKiAgLS0gTEFQQUNLIGlzIGEgc29mdHdh\ncmUgcGFja2FnZSBwcm92aWRlZCBieSBVbml2LiBvZiBUZW5uZXNzZWUsICAgIC0tCiogIC0tIFVu\naXYuIG9mIENhbGlmb3JuaWEgQmVya2VsZXksIFVuaXYuIG9mIENvbG9yYWRvIERlbnZlciBhbmQg\nTkFHIEx0ZC4uLS0KKiAgLS0gQXByaWwgMjAxMSAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgIC0tCioKKiAgICAgLi4gU2NhbGFyIEFyZ3VtZW50cyAu\nLgogICAgICBDSEFSQUNURVIgICAgICAgICAgVVBMTwogICAgICBJTlRFR0VSICAgICAgICAgICAg\nSU5GTywgS0QsIExEQUIsIExEQiwgTiwgTlJIUwoqICAgICAuLgoqICAgICAuLiBBcnJheSBBcmd1\nbWVudHMgLi4KICAgICAgQ09NUExFWCoxNiAgICAgICAgIEFCKCBMREFCLCAqICksIEIoIExEQiwg\nKiApCiogICAgIC4uCioKKiAgUHVycG9zZQoqICA9PT09PT09CioKKiAgWlBCU1YgY29tcHV0ZXMg\ndGhlIHNvbHV0aW9uIHRvIGEgY29tcGxleCBzeXN0ZW0gb2YgbGluZWFyIGVxdWF0aW9ucwoqICAg\nICBBICogWCA9IEIsCiogIHdoZXJlIEEgaXMgYW4gTi1ieS1OIEhlcm1pdGlhbiBwb3NpdGl2ZSBk\nZWZpbml0ZSBiYW5kIG1hdHJpeCBhbmQgWAoqICBhbmQgQiBhcmUgTi1ieS1OUkhTIG1hdHJpY2Vz\nLgoqCiogIFRoZSBDaG9sZXNreSBkZWNvbXBvc2l0aW9uIGlzIHVzZWQgdG8gZmFjdG9yIEEgYXMK\nKiAgICAgQSA9IFUqKkggKiBVLCAgaWYgVVBMTyA9ICdVJywgb3IKKiAgICAgQSA9IEwgKiBMKipI\nLCAgaWYgVVBMTyA9ICdMJywKKiAgd2hlcmUgVSBpcyBhbiB1cHBlciB0cmlhbmd1bGFyIGJhbmQg\nbWF0cml4LCBhbmQgTCBpcyBhIGxvd2VyCiogIHRyaWFuZ3VsYXIgYmFuZCBtYXRyaXgsIHdpdGgg\ndGhlIHNhbWUgbnVtYmVyIG9mIHN1cGVyZGlhZ29uYWxzIG9yCiogIHN1YmRpYWdvbmFscyBhcyBB\nLiAgVGhlIGZhY3RvcmVkIGZvcm0gb2YgQSBpcyB0aGVuIHVzZWQgdG8gc29sdmUgdGhlCiogIHN5\nc3RlbSBvZiBlcXVhdGlvbnMgQSAqIFggPSBCLgoqCiogIEFyZ3VtZW50cwoqICA9PT09PT09PT0K\nKgoqICBVUExPICAgIChpbnB1dCkgQ0hBUkFDVEVSKjEKKiAgICAgICAgICA9ICdVJzogIFVwcGVy\nIHRyaWFuZ2xlIG9mIEEgaXMgc3RvcmVkOwoqICAgICAgICAgID0gJ0wnOiAgTG93ZXIgdHJpYW5n\nbGUgb2YgQSBpcyBzdG9yZWQuCioKKiAgTiAgICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAg\nICBUaGUgbnVtYmVyIG9mIGxpbmVhciBlcXVhdGlvbnMsIGkuZS4sIHRoZSBvcmRlciBvZiB0aGUK\nKiAgICAgICAgICBtYXRyaXggQS4gIE4gPj0gMC4KKgoqICBLRCAgICAgIChpbnB1dCkgSU5URUdF\nUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2Ygc3VwZXJkaWFnb25hbHMgb2YgdGhlIG1hdHJpeCBB\nIGlmIFVQTE8gPSAnVScsCiogICAgICAgICAgb3IgdGhlIG51bWJlciBvZiBzdWJkaWFnb25hbHMg\naWYgVVBMTyA9ICdMJy4gIEtEID49IDAuCioKKiAgTlJIUyAgICAoaW5wdXQpIElOVEVHRVIKKiAg\nICAgICAgICBUaGUgbnVtYmVyIG9mIHJpZ2h0IGhhbmQgc2lkZXMsIGkuZS4sIHRoZSBudW1iZXIg\nb2YgY29sdW1ucwoqICAgICAgICAgIG9mIHRoZSBtYXRyaXggQi4gIE5SSFMgPj0gMC4KKgoqICBB\nQiAgICAgIChpbnB1dC9vdXRwdXQpIENPTVBMRVgqMTYgYXJyYXksIGRpbWVuc2lvbiAoTERBQixO\nKQoqICAgICAgICAgIE9uIGVudHJ5LCB0aGUgdXBwZXIgb3IgbG93ZXIgdHJpYW5nbGUgb2YgdGhl\nIEhlcm1pdGlhbiBiYW5kCiogICAgICAgICAgbWF0cml4IEEsIHN0b3JlZCBpbiB0aGUgZmlyc3Qg\nS0QrMSByb3dzIG9mIHRoZSBhcnJheS4gIFRoZQoqICAgICAgICAgIGotdGggY29sdW1uIG9mIEEg\naXMgc3RvcmVkIGluIHRoZSBqLXRoIGNvbHVtbiBvZiB0aGUgYXJyYXkgQUIKKiAgICAgICAgICBh\ncyBmb2xsb3dzOgoqICAgICAgICAgIGlmIFVQTE8gPSAnVScsIEFCKEtEKzEraS1qLGopID0gQShp\nLGopIGZvciBtYXgoMSxqLUtEKTw9aTw9ajsKKiAgICAgICAgICBpZiBVUExPID0gJ0wnLCBBQigx\nK2ktaixqKSAgICA9IEEoaSxqKSBmb3Igajw9aTw9bWluKE4saitLRCkuCiogICAgICAgICAgU2Vl\nIGJlbG93IGZvciBmdXJ0aGVyIGRldGFpbHMuCioKKiAgICAgICAgICBPbiBleGl0LCBpZiBJTkZP\nID0gMCwgdGhlIHRyaWFuZ3VsYXIgZmFjdG9yIFUgb3IgTCBmcm9tIHRoZQoqICAgICAgICAgIENo\nb2xlc2t5IGZhY3Rvcml6YXRpb24gQSA9IFUqKkggKlUgb3IgQSA9IEwqTCoqSCBvZiB0aGUgYmFu\nZAoqICAgICAgICAgIG1hdHJpeCBBLCBpbiB0aGUgc2FtZSBzdG9yYWdlIGZvcm1hdCBhcyBBLgoq\nCiogIExEQUIgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGltZW5z\naW9uIG9mIHRoZSBhcnJheSBBQi4gIExEQUIgPj0gS0QrMS4KKgoqICBCICAgICAgIChpbnB1dC9v\ndXRwdXQpIENPTVBMRVgqMTYgYXJyYXksIGRpbWVuc2lvbiAoTERCLE5SSFMpCiogICAgICAgICAg\nT24gZW50cnksIHRoZSBOLWJ5LU5SSFMgcmlnaHQgaGFuZCBzaWRlIG1hdHJpeCBCLgoqICAgICAg\nICAgIE9uIGV4aXQsIGlmIElORk8gPSAwLCB0aGUgTi1ieS1OUkhTIHNvbHV0aW9uIG1hdHJpeCBY\nLgoqCiogIExEQiAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGlt\nZW5zaW9uIG9mIHRoZSBhcnJheSBCLiAgTERCID49IG1heCgxLE4pLgoqCiogIElORk8gICAgKG91\ndHB1dCkgSU5URUdFUgoqICAgICAgICAgID0gMDogIHN1Y2Nlc3NmdWwgZXhpdAoqICAgICAgICAg\nIDwgMDogIGlmIElORk8gPSAtaSwgdGhlIGktdGggYXJndW1lbnQgaGFkIGFuIGlsbGVnYWwgdmFs\ndWUKKiAgICAgICAgICA+IDA6ICBpZiBJTkZPID0gaSwgdGhlIGxlYWRpbmcgbWlub3Igb2Ygb3Jk\nZXIgaSBvZiBBIGlzIG5vdAoqICAgICAgICAgICAgICAgIHBvc2l0aXZlIGRlZmluaXRlLCBzbyB0\naGUgZmFjdG9yaXphdGlvbiBjb3VsZCBub3QgYmUKKiAgICAgICAgICAgICAgICBjb21wbGV0ZWQs\nIGFuZCB0aGUgc29sdXRpb24gaGFzIG5vdCBiZWVuIGNvbXB1dGVkLgoqCnLyAQAAaIZohymBcvMB\nAAB9cvQBAAAoaIqJaItojHViaJiKARhomVgMAAAAenBic3ZfMjQudHh0cvUBAAB1YmibigEYaJxY\nBAAAAHBic3Zy9gEAAGiYigEYdWJofWhhXWh+h1Jy9wEAAH1y+AEAAChogVgDAAAAU1BEcvkBAABo\ng1gGAAAAcGFja2VkcvoBAABocVghAAAAZHJpdmVyIHNpbXBsZSwgc29sdmUgQSpYID0gQiBvbmx5\ncvsBAABohmiHKYFy/AEAAH1y/QEAAChoioloi2iMdWJojVgrAAAAaHR0cDovL3d3dy5uZXRsaWIu\nb3JnL2xhcGFjay9zaW5nbGUvc3Bwc3YuZnL+AQAAaI9YAQAAAHNokGh9aJFdaH6HUnL/AQAAfXIA\nAgAAKGiUWJcKAAAgICAgICBTVUJST1VUSU5FIFNQUFNWKCBVUExPLCBOLCBOUkhTLCBBUCwgQiwg\nTERCLCBJTkZPICkKKgoqICAtLSBMQVBBQ0sgZHJpdmVyIHJvdXRpbmUgKHZlcnNpb24gMy4zLjEp\nIC0tCiogIC0tIExBUEFDSyBpcyBhIHNvZnR3YXJlIHBhY2thZ2UgcHJvdmlkZWQgYnkgVW5pdi4g\nb2YgVGVubmVzc2VlLCAgICAtLQoqICAtLSBVbml2LiBvZiBDYWxpZm9ybmlhIEJlcmtlbGV5LCBV\nbml2LiBvZiBDb2xvcmFkbyBEZW52ZXIgYW5kIE5BRyBMdGQuLi0tCiogIC0tIEFwcmlsIDIwMTEg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLQoq\nCiogICAgIC4uIFNjYWxhciBBcmd1bWVudHMgLi4KICAgICAgQ0hBUkFDVEVSICAgICAgICAgIFVQ\nTE8KICAgICAgSU5URUdFUiAgICAgICAgICAgIElORk8sIExEQiwgTiwgTlJIUwoqICAgICAuLgoq\nICAgICAuLiBBcnJheSBBcmd1bWVudHMgLi4KICAgICAgUkVBTCAgICAgICAgICAgICAgIEFQKCAq\nICksIEIoIExEQiwgKiApCiogICAgIC4uCioKKiAgUHVycG9zZQoqICA9PT09PT09CioKKiAgU1BQ\nU1YgY29tcHV0ZXMgdGhlIHNvbHV0aW9uIHRvIGEgcmVhbCBzeXN0ZW0gb2YgbGluZWFyIGVxdWF0\naW9ucwoqICAgICBBICogWCA9IEIsCiogIHdoZXJlIEEgaXMgYW4gTi1ieS1OIHN5bW1ldHJpYyBw\nb3NpdGl2ZSBkZWZpbml0ZSBtYXRyaXggc3RvcmVkIGluCiogIHBhY2tlZCBmb3JtYXQgYW5kIFgg\nYW5kIEIgYXJlIE4tYnktTlJIUyBtYXRyaWNlcy4KKgoqICBUaGUgQ2hvbGVza3kgZGVjb21wb3Np\ndGlvbiBpcyB1c2VkIHRvIGZhY3RvciBBIGFzCiogICAgIEEgPSBVKipUKiBVLCAgaWYgVVBMTyA9\nICdVJywgb3IKKiAgICAgQSA9IEwgKiBMKipULCAgaWYgVVBMTyA9ICdMJywKKiAgd2hlcmUgVSBp\ncyBhbiB1cHBlciB0cmlhbmd1bGFyIG1hdHJpeCBhbmQgTCBpcyBhIGxvd2VyIHRyaWFuZ3VsYXIK\nKiAgbWF0cml4LiAgVGhlIGZhY3RvcmVkIGZvcm0gb2YgQSBpcyB0aGVuIHVzZWQgdG8gc29sdmUg\ndGhlIHN5c3RlbSBvZgoqICBlcXVhdGlvbnMgQSAqIFggPSBCLgoqCiogIEFyZ3VtZW50cwoqICA9\nPT09PT09PT0KKgoqICBVUExPICAgIChpbnB1dCkgQ0hBUkFDVEVSKjEKKiAgICAgICAgICA9ICdV\nJzogIFVwcGVyIHRyaWFuZ2xlIG9mIEEgaXMgc3RvcmVkOwoqICAgICAgICAgID0gJ0wnOiAgTG93\nZXIgdHJpYW5nbGUgb2YgQSBpcyBzdG9yZWQuCioKKiAgTiAgICAgICAoaW5wdXQpIElOVEVHRVIK\nKiAgICAgICAgICBUaGUgbnVtYmVyIG9mIGxpbmVhciBlcXVhdGlvbnMsIGkuZS4sIHRoZSBvcmRl\nciBvZiB0aGUKKiAgICAgICAgICBtYXRyaXggQS4gIE4gPj0gMC4KKgoqICBOUkhTICAgIChpbnB1\ndCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2YgcmlnaHQgaGFuZCBzaWRlcywgaS5l\nLiwgdGhlIG51bWJlciBvZiBjb2x1bW5zCiogICAgICAgICAgb2YgdGhlIG1hdHJpeCBCLiAgTlJI\nUyA+PSAwLgoqCiogIEFQICAgICAgKGlucHV0L291dHB1dCkgUkVBTCBhcnJheSwgZGltZW5zaW9u\nIChOKihOKzEpLzIpCiogICAgICAgICAgT24gZW50cnksIHRoZSB1cHBlciBvciBsb3dlciB0cmlh\nbmdsZSBvZiB0aGUgc3ltbWV0cmljIG1hdHJpeAoqICAgICAgICAgIEEsIHBhY2tlZCBjb2x1bW53\naXNlIGluIGEgbGluZWFyIGFycmF5LiAgVGhlIGotdGggY29sdW1uIG9mIEEKKiAgICAgICAgICBp\ncyBzdG9yZWQgaW4gdGhlIGFycmF5IEFQIGFzIGZvbGxvd3M6CiogICAgICAgICAgaWYgVVBMTyA9\nICdVJywgQVAoaSArIChqLTEpKmovMikgPSBBKGksaikgZm9yIDE8PWk8PWo7CiogICAgICAgICAg\naWYgVVBMTyA9ICdMJywgQVAoaSArIChqLTEpKigybi1qKS8yKSA9IEEoaSxqKSBmb3Igajw9aTw9\nbi4KKiAgICAgICAgICBTZWUgYmVsb3cgZm9yIGZ1cnRoZXIgZGV0YWlscy4gIAoqCiogICAgICAg\nICAgT24gZXhpdCwgaWYgSU5GTyA9IDAsIHRoZSBmYWN0b3IgVSBvciBMIGZyb20gdGhlIENob2xl\nc2t5CiogICAgICAgICAgZmFjdG9yaXphdGlvbiBBID0gVSoqVCpVIG9yIEEgPSBMKkwqKlQsIGlu\nIHRoZSBzYW1lIHN0b3JhZ2UKKiAgICAgICAgICBmb3JtYXQgYXMgQS4KKgoqICBCICAgICAgIChp\nbnB1dC9vdXRwdXQpIFJFQUwgYXJyYXksIGRpbWVuc2lvbiAoTERCLE5SSFMpCiogICAgICAgICAg\nT24gZW50cnksIHRoZSBOLWJ5LU5SSFMgcmlnaHQgaGFuZCBzaWRlIG1hdHJpeCBCLgoqICAgICAg\nICAgIE9uIGV4aXQsIGlmIElORk8gPSAwLCB0aGUgTi1ieS1OUkhTIHNvbHV0aW9uIG1hdHJpeCBY\nLgoqCiogIExEQiAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGlt\nZW5zaW9uIG9mIHRoZSBhcnJheSBCLiAgTERCID49IG1heCgxLE4pLgoqCiogIElORk8gICAgKG91\ndHB1dCkgSU5URUdFUgoqICAgICAgICAgID0gMDogIHN1Y2Nlc3NmdWwgZXhpdAoqICAgICAgICAg\nIDwgMDogIGlmIElORk8gPSAtaSwgdGhlIGktdGggYXJndW1lbnQgaGFkIGFuIGlsbGVnYWwgdmFs\ndWUKKiAgICAgICAgICA+IDA6ICBpZiBJTkZPID0gaSwgdGhlIGxlYWRpbmcgbWlub3Igb2Ygb3Jk\nZXIgaSBvZiBBIGlzIG5vdAoqICAgICAgICAgICAgICAgIHBvc2l0aXZlIGRlZmluaXRlLCBzbyB0\naGUgZmFjdG9yaXphdGlvbiBjb3VsZCBub3QgYmUKKiAgICAgICAgICAgICAgICBjb21wbGV0ZWQs\nIGFuZCB0aGUgc29sdXRpb24gaGFzIG5vdCBiZWVuIGNvbXB1dGVkLgoqCnIBAgAAaIZohymBcgIC\nAAB9cgMCAAAoaIqJaItojHViaJiKARlomVgMAAAAc3Bwc3ZfMjUudHh0cgQCAAB1YmibigEZaJxY\nBAAAAHBwc3ZyBQIAAGiYigEZdWJofWhhXWh+h1JyBgIAAH1yBwIAAChogVgDAAAAU1BEcggCAABo\ng1gGAAAAcGFja2VkcgkCAABocVghAAAAZHJpdmVyIHNpbXBsZSwgc29sdmUgQSpYID0gQiBvbmx5\ncgoCAABohmiHKYFyCwIAAH1yDAIAAChoioloi2iMdWJojVgrAAAAaHR0cDovL3d3dy5uZXRsaWIu\nb3JnL2xhcGFjay9kb3VibGUvZHBwc3YuZnINAgAAaI9YAQAAAGRokGh9aJFdaH6HUnIOAgAAfXIP\nAgAAKGiUWK0KAAAgICAgICBTVUJST1VUSU5FIERQUFNWKCBVUExPLCBOLCBOUkhTLCBBUCwgQiwg\nTERCLCBJTkZPICkKKgoqICAtLSBMQVBBQ0sgZHJpdmVyIHJvdXRpbmUgKHZlcnNpb24gMy4zLjEp\nIC0tCiogIC0tIExBUEFDSyBpcyBhIHNvZnR3YXJlIHBhY2thZ2UgcHJvdmlkZWQgYnkgVW5pdi4g\nb2YgVGVubmVzc2VlLCAgICAtLQoqICAtLSBVbml2LiBvZiBDYWxpZm9ybmlhIEJlcmtlbGV5LCBV\nbml2LiBvZiBDb2xvcmFkbyBEZW52ZXIgYW5kIE5BRyBMdGQuLi0tCiogIC0tIEFwcmlsIDIwMTEg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLQoq\nCiogICAgIC4uIFNjYWxhciBBcmd1bWVudHMgLi4KICAgICAgQ0hBUkFDVEVSICAgICAgICAgIFVQ\nTE8KICAgICAgSU5URUdFUiAgICAgICAgICAgIElORk8sIExEQiwgTiwgTlJIUwoqICAgICAuLgoq\nICAgICAuLiBBcnJheSBBcmd1bWVudHMgLi4KICAgICAgRE9VQkxFIFBSRUNJU0lPTiAgIEFQKCAq\nICksIEIoIExEQiwgKiApCiogICAgIC4uCioKKiAgUHVycG9zZQoqICA9PT09PT09CioKKiAgRFBQ\nU1YgY29tcHV0ZXMgdGhlIHNvbHV0aW9uIHRvIGEgcmVhbCBzeXN0ZW0gb2YgbGluZWFyIGVxdWF0\naW9ucwoqICAgICBBICogWCA9IEIsCiogIHdoZXJlIEEgaXMgYW4gTi1ieS1OIHN5bW1ldHJpYyBw\nb3NpdGl2ZSBkZWZpbml0ZSBtYXRyaXggc3RvcmVkIGluCiogIHBhY2tlZCBmb3JtYXQgYW5kIFgg\nYW5kIEIgYXJlIE4tYnktTlJIUyBtYXRyaWNlcy4KKgoqICBUaGUgQ2hvbGVza3kgZGVjb21wb3Np\ndGlvbiBpcyB1c2VkIHRvIGZhY3RvciBBIGFzCiogICAgIEEgPSBVKipUKiBVLCAgaWYgVVBMTyA9\nICdVJywgb3IKKiAgICAgQSA9IEwgKiBMKipULCAgaWYgVVBMTyA9ICdMJywKKiAgd2hlcmUgVSBp\ncyBhbiB1cHBlciB0cmlhbmd1bGFyIG1hdHJpeCBhbmQgTCBpcyBhIGxvd2VyIHRyaWFuZ3VsYXIK\nKiAgbWF0cml4LiAgVGhlIGZhY3RvcmVkIGZvcm0gb2YgQSBpcyB0aGVuIHVzZWQgdG8gc29sdmUg\ndGhlIHN5c3RlbSBvZgoqICBlcXVhdGlvbnMgQSAqIFggPSBCLgoqCiogIEFyZ3VtZW50cwoqICA9\nPT09PT09PT0KKgoqICBVUExPICAgIChpbnB1dCkgQ0hBUkFDVEVSKjEKKiAgICAgICAgICA9ICdV\nJzogIFVwcGVyIHRyaWFuZ2xlIG9mIEEgaXMgc3RvcmVkOwoqICAgICAgICAgID0gJ0wnOiAgTG93\nZXIgdHJpYW5nbGUgb2YgQSBpcyBzdG9yZWQuCioKKiAgTiAgICAgICAoaW5wdXQpIElOVEVHRVIK\nKiAgICAgICAgICBUaGUgbnVtYmVyIG9mIGxpbmVhciBlcXVhdGlvbnMsIGkuZS4sIHRoZSBvcmRl\nciBvZiB0aGUKKiAgICAgICAgICBtYXRyaXggQS4gIE4gPj0gMC4KKgoqICBOUkhTICAgIChpbnB1\ndCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2YgcmlnaHQgaGFuZCBzaWRlcywgaS5l\nLiwgdGhlIG51bWJlciBvZiBjb2x1bW5zCiogICAgICAgICAgb2YgdGhlIG1hdHJpeCBCLiAgTlJI\nUyA+PSAwLgoqCiogIEFQICAgICAgKGlucHV0L291dHB1dCkgRE9VQkxFIFBSRUNJU0lPTiBhcnJh\neSwgZGltZW5zaW9uIChOKihOKzEpLzIpCiogICAgICAgICAgT24gZW50cnksIHRoZSB1cHBlciBv\nciBsb3dlciB0cmlhbmdsZSBvZiB0aGUgc3ltbWV0cmljIG1hdHJpeAoqICAgICAgICAgIEEsIHBh\nY2tlZCBjb2x1bW53aXNlIGluIGEgbGluZWFyIGFycmF5LiAgVGhlIGotdGggY29sdW1uIG9mIEEK\nKiAgICAgICAgICBpcyBzdG9yZWQgaW4gdGhlIGFycmF5IEFQIGFzIGZvbGxvd3M6CiogICAgICAg\nICAgaWYgVVBMTyA9ICdVJywgQVAoaSArIChqLTEpKmovMikgPSBBKGksaikgZm9yIDE8PWk8PWo7\nCiogICAgICAgICAgaWYgVVBMTyA9ICdMJywgQVAoaSArIChqLTEpKigybi1qKS8yKSA9IEEoaSxq\nKSBmb3Igajw9aTw9bi4KKiAgICAgICAgICBTZWUgYmVsb3cgZm9yIGZ1cnRoZXIgZGV0YWlscy4K\nKgoqICAgICAgICAgIE9uIGV4aXQsIGlmIElORk8gPSAwLCB0aGUgZmFjdG9yIFUgb3IgTCBmcm9t\nIHRoZSBDaG9sZXNreQoqICAgICAgICAgIGZhY3Rvcml6YXRpb24gQSA9IFUqKlQqVSBvciBBID0g\nTCpMKipULCBpbiB0aGUgc2FtZSBzdG9yYWdlCiogICAgICAgICAgZm9ybWF0IGFzIEEuCioKKiAg\nQiAgICAgICAoaW5wdXQvb3V0cHV0KSBET1VCTEUgUFJFQ0lTSU9OIGFycmF5LCBkaW1lbnNpb24g\nKExEQixOUkhTKQoqICAgICAgICAgIE9uIGVudHJ5LCB0aGUgTi1ieS1OUkhTIHJpZ2h0IGhhbmQg\nc2lkZSBtYXRyaXggQi4KKiAgICAgICAgICBPbiBleGl0LCBpZiBJTkZPID0gMCwgdGhlIE4tYnkt\nTlJIUyBzb2x1dGlvbiBtYXRyaXggWC4KKgoqICBMREIgICAgIChpbnB1dCkgSU5URUdFUgoqICAg\nICAgICAgIFRoZSBsZWFkaW5nIGRpbWVuc2lvbiBvZiB0aGUgYXJyYXkgQi4gIExEQiA+PSBtYXgo\nMSxOKS4KKgoqICBJTkZPICAgIChvdXRwdXQpIElOVEVHRVIKKiAgICAgICAgICA9IDA6ICBzdWNj\nZXNzZnVsIGV4aXQKKiAgICAgICAgICA8IDA6ICBpZiBJTkZPID0gLWksIHRoZSBpLXRoIGFyZ3Vt\nZW50IGhhZCBhbiBpbGxlZ2FsIHZhbHVlCiogICAgICAgICAgPiAwOiAgaWYgSU5GTyA9IGksIHRo\nZSBsZWFkaW5nIG1pbm9yIG9mIG9yZGVyIGkgb2YgQSBpcyBub3QKKiAgICAgICAgICAgICAgICBw\nb3NpdGl2ZSBkZWZpbml0ZSwgc28gdGhlIGZhY3Rvcml6YXRpb24gY291bGQgbm90IGJlCiogICAg\nICAgICAgICAgICAgY29tcGxldGVkLCBhbmQgdGhlIHNvbHV0aW9uIGhhcyBub3QgYmVlbiBjb21w\ndXRlZC4KKgpyEAIAAGiGaIcpgXIRAgAAfXISAgAAKGiKiWiLaIx1YmiYigEaaJlYDAAAAGRwcHN2\nXzI2LnR4dHITAgAAdWJom4oBGmicWAQAAABwcHN2chQCAABomIoBGnViaH1oYV1ofodSchUCAAB9\nchYCAAAoaIFYAwAAAEhQRHIXAgAAaINYBgAAAHBhY2tlZHIYAgAAaHFYIQAAAGRyaXZlciBzaW1w\nbGUsIHNvbHZlIEEqWCA9IEIgb25seXIZAgAAaIZohymBchoCAAB9chsCAAAoaIqJaItojHViaI1Y\nLAAAAGh0dHA6Ly93d3cubmV0bGliLm9yZy9sYXBhY2svY29tcGxleC9jcHBzdi5mchwCAABoj1gB\nAAAAY2iQaH1okV1ofodSch0CAAB9ch4CAAAoaJRYnwoAACAgICAgIFNVQlJPVVRJTkUgQ1BQU1Yo\nIFVQTE8sIE4sIE5SSFMsIEFQLCBCLCBMREIsIElORk8gKQoqCiogIC0tIExBUEFDSyBkcml2ZXIg\ncm91dGluZSAodmVyc2lvbiAzLjMuMSkgLS0KKiAgLS0gTEFQQUNLIGlzIGEgc29mdHdhcmUgcGFj\na2FnZSBwcm92aWRlZCBieSBVbml2LiBvZiBUZW5uZXNzZWUsICAgIC0tCiogIC0tIFVuaXYuIG9m\nIENhbGlmb3JuaWEgQmVya2VsZXksIFVuaXYuIG9mIENvbG9yYWRvIERlbnZlciBhbmQgTkFHIEx0\nZC4uLS0KKiAgLS0gQXByaWwgMjAxMSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgIC0tCioKKiAgICAgLi4gU2NhbGFyIEFyZ3VtZW50cyAuLgogICAg\nICBDSEFSQUNURVIgICAgICAgICAgVVBMTwogICAgICBJTlRFR0VSICAgICAgICAgICAgSU5GTywg\nTERCLCBOLCBOUkhTCiogICAgIC4uCiogICAgIC4uIEFycmF5IEFyZ3VtZW50cyAuLgogICAgICBD\nT01QTEVYICAgICAgICAgICAgQVAoICogKSwgQiggTERCLCAqICkKKiAgICAgLi4KKgoqICBQdXJw\nb3NlCiogID09PT09PT0KKgoqICBDUFBTViBjb21wdXRlcyB0aGUgc29sdXRpb24gdG8gYSBjb21w\nbGV4IHN5c3RlbSBvZiBsaW5lYXIgZXF1YXRpb25zCiogICAgIEEgKiBYID0gQiwKKiAgd2hlcmUg\nQSBpcyBhbiBOLWJ5LU4gSGVybWl0aWFuIHBvc2l0aXZlIGRlZmluaXRlIG1hdHJpeCBzdG9yZWQg\naW4KKiAgcGFja2VkIGZvcm1hdCBhbmQgWCBhbmQgQiBhcmUgTi1ieS1OUkhTIG1hdHJpY2VzLgoq\nCiogIFRoZSBDaG9sZXNreSBkZWNvbXBvc2l0aW9uIGlzIHVzZWQgdG8gZmFjdG9yIEEgYXMKKiAg\nICAgQSA9IFUqKkggKiBVLCAgaWYgVVBMTyA9ICdVJywgb3IKKiAgICAgQSA9IEwgKiBMKipILCAg\naWYgVVBMTyA9ICdMJywKKiAgd2hlcmUgVSBpcyBhbiB1cHBlciB0cmlhbmd1bGFyIG1hdHJpeCBh\nbmQgTCBpcyBhIGxvd2VyIHRyaWFuZ3VsYXIKKiAgbWF0cml4LiAgVGhlIGZhY3RvcmVkIGZvcm0g\nb2YgQSBpcyB0aGVuIHVzZWQgdG8gc29sdmUgdGhlIHN5c3RlbSBvZgoqICBlcXVhdGlvbnMgQSAq\nIFggPSBCLgoqCiogIEFyZ3VtZW50cwoqICA9PT09PT09PT0KKgoqICBVUExPICAgIChpbnB1dCkg\nQ0hBUkFDVEVSKjEKKiAgICAgICAgICA9ICdVJzogIFVwcGVyIHRyaWFuZ2xlIG9mIEEgaXMgc3Rv\ncmVkOwoqICAgICAgICAgID0gJ0wnOiAgTG93ZXIgdHJpYW5nbGUgb2YgQSBpcyBzdG9yZWQuCioK\nKiAgTiAgICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbnVtYmVyIG9mIGxpbmVh\nciBlcXVhdGlvbnMsIGkuZS4sIHRoZSBvcmRlciBvZiB0aGUKKiAgICAgICAgICBtYXRyaXggQS4g\nIE4gPj0gMC4KKgoqICBOUkhTICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBudW1i\nZXIgb2YgcmlnaHQgaGFuZCBzaWRlcywgaS5lLiwgdGhlIG51bWJlciBvZiBjb2x1bW5zCiogICAg\nICAgICAgb2YgdGhlIG1hdHJpeCBCLiAgTlJIUyA+PSAwLgoqCiogIEFQICAgICAgKGlucHV0L291\ndHB1dCkgQ09NUExFWCBhcnJheSwgZGltZW5zaW9uIChOKihOKzEpLzIpCiogICAgICAgICAgT24g\nZW50cnksIHRoZSB1cHBlciBvciBsb3dlciB0cmlhbmdsZSBvZiB0aGUgSGVybWl0aWFuIG1hdHJp\neAoqICAgICAgICAgIEEsIHBhY2tlZCBjb2x1bW53aXNlIGluIGEgbGluZWFyIGFycmF5LiAgVGhl\nIGotdGggY29sdW1uIG9mIEEKKiAgICAgICAgICBpcyBzdG9yZWQgaW4gdGhlIGFycmF5IEFQIGFz\nIGZvbGxvd3M6CiogICAgICAgICAgaWYgVVBMTyA9ICdVJywgQVAoaSArIChqLTEpKmovMikgPSBB\nKGksaikgZm9yIDE8PWk8PWo7CiogICAgICAgICAgaWYgVVBMTyA9ICdMJywgQVAoaSArIChqLTEp\nKigybi1qKS8yKSA9IEEoaSxqKSBmb3Igajw9aTw9bi4KKiAgICAgICAgICBTZWUgYmVsb3cgZm9y\nIGZ1cnRoZXIgZGV0YWlscy4KKgoqICAgICAgICAgIE9uIGV4aXQsIGlmIElORk8gPSAwLCB0aGUg\nZmFjdG9yIFUgb3IgTCBmcm9tIHRoZSBDaG9sZXNreQoqICAgICAgICAgIGZhY3Rvcml6YXRpb24g\nQSA9IFUqKkgqVSBvciBBID0gTCpMKipILCBpbiB0aGUgc2FtZSBzdG9yYWdlCiogICAgICAgICAg\nZm9ybWF0IGFzIEEuCioKKiAgQiAgICAgICAoaW5wdXQvb3V0cHV0KSBDT01QTEVYIGFycmF5LCBk\naW1lbnNpb24gKExEQixOUkhTKQoqICAgICAgICAgIE9uIGVudHJ5LCB0aGUgTi1ieS1OUkhTIHJp\nZ2h0IGhhbmQgc2lkZSBtYXRyaXggQi4KKiAgICAgICAgICBPbiBleGl0LCBpZiBJTkZPID0gMCwg\ndGhlIE4tYnktTlJIUyBzb2x1dGlvbiBtYXRyaXggWC4KKgoqICBMREIgICAgIChpbnB1dCkgSU5U\nRUdFUgoqICAgICAgICAgIFRoZSBsZWFkaW5nIGRpbWVuc2lvbiBvZiB0aGUgYXJyYXkgQi4gIExE\nQiA+PSBtYXgoMSxOKS4KKgoqICBJTkZPICAgIChvdXRwdXQpIElOVEVHRVIKKiAgICAgICAgICA9\nIDA6ICBzdWNjZXNzZnVsIGV4aXQKKiAgICAgICAgICA8IDA6ICBpZiBJTkZPID0gLWksIHRoZSBp\nLXRoIGFyZ3VtZW50IGhhZCBhbiBpbGxlZ2FsIHZhbHVlCiogICAgICAgICAgPiAwOiAgaWYgSU5G\nTyA9IGksIHRoZSBsZWFkaW5nIG1pbm9yIG9mIG9yZGVyIGkgb2YgQSBpcyBub3QKKiAgICAgICAg\nICAgICAgICBwb3NpdGl2ZSBkZWZpbml0ZSwgc28gdGhlIGZhY3Rvcml6YXRpb24gY291bGQgbm90\nIGJlCiogICAgICAgICAgICAgICAgY29tcGxldGVkLCBhbmQgdGhlIHNvbHV0aW9uIGhhcyBub3Qg\nYmVlbiBjb21wdXRlZC4KKgpyHwIAAGiGaIcpgXIgAgAAfXIhAgAAKGiKiWiLaIx1YmiYigEbaJlY\nDAAAAGNwcHN2XzI3LnR4dHIiAgAAdWJom4oBG2icWAQAAABwcHN2ciMCAABomIoBG3ViaH1oYV1o\nfodSciQCAAB9ciUCAAAoaIFYAwAAAEhQRHImAgAAaINYBgAAAHBhY2tlZHInAgAAaHFYIQAAAGRy\naXZlciBzaW1wbGUsIHNvbHZlIEEqWCA9IEIgb25seXIoAgAAaIZohymBcikCAAB9cioCAAAoaIqJ\naItojHViaI1YLgAAAGh0dHA6Ly93d3cubmV0bGliLm9yZy9sYXBhY2svY29tcGxleDE2L3pwcHN2\nLmZyKwIAAGiPWAEAAAB6aJBofWiRXWh+h1JyLAIAAH1yLQIAACholFilCgAAICAgICAgU1VCUk9V\nVElORSBaUFBTViggVVBMTywgTiwgTlJIUywgQVAsIEIsIExEQiwgSU5GTyApCioKKiAgLS0gTEFQ\nQUNLIGRyaXZlciByb3V0aW5lICh2ZXJzaW9uIDMuMy4xKSAtLQoqICAtLSBMQVBBQ0sgaXMgYSBz\nb2Z0d2FyZSBwYWNrYWdlIHByb3ZpZGVkIGJ5IFVuaXYuIG9mIFRlbm5lc3NlZSwgICAgLS0KKiAg\nLS0gVW5pdi4gb2YgQ2FsaWZvcm5pYSBCZXJrZWxleSwgVW5pdi4gb2YgQ29sb3JhZG8gRGVudmVy\nIGFuZCBOQUcgTHRkLi4tLQoqICAtLSBBcHJpbCAyMDExICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0KKgoqICAgICAuLiBTY2FsYXIgQXJndW1l\nbnRzIC4uCiAgICAgIENIQVJBQ1RFUiAgICAgICAgICBVUExPCiAgICAgIElOVEVHRVIgICAgICAg\nICAgICBJTkZPLCBMREIsIE4sIE5SSFMKKiAgICAgLi4KKiAgICAgLi4gQXJyYXkgQXJndW1lbnRz\nIC4uCiAgICAgIENPTVBMRVgqMTYgICAgICAgICBBUCggKiApLCBCKCBMREIsICogKQoqICAgICAu\nLgoqCiogIFB1cnBvc2UKKiAgPT09PT09PQoqCiogIFpQUFNWIGNvbXB1dGVzIHRoZSBzb2x1dGlv\nbiB0byBhIGNvbXBsZXggc3lzdGVtIG9mIGxpbmVhciBlcXVhdGlvbnMKKiAgICAgQSAqIFggPSBC\nLAoqICB3aGVyZSBBIGlzIGFuIE4tYnktTiBIZXJtaXRpYW4gcG9zaXRpdmUgZGVmaW5pdGUgbWF0\ncml4IHN0b3JlZCBpbgoqICBwYWNrZWQgZm9ybWF0IGFuZCBYIGFuZCBCIGFyZSBOLWJ5LU5SSFMg\nbWF0cmljZXMuCioKKiAgVGhlIENob2xlc2t5IGRlY29tcG9zaXRpb24gaXMgdXNlZCB0byBmYWN0\nb3IgQSBhcwoqICAgICBBID0gVSoqSCAqIFUsICBpZiBVUExPID0gJ1UnLCBvcgoqICAgICBBID0g\nTCAqIEwqKkgsICBpZiBVUExPID0gJ0wnLAoqICB3aGVyZSBVIGlzIGFuIHVwcGVyIHRyaWFuZ3Vs\nYXIgbWF0cml4IGFuZCBMIGlzIGEgbG93ZXIgdHJpYW5ndWxhcgoqICBtYXRyaXguICBUaGUgZmFj\ndG9yZWQgZm9ybSBvZiBBIGlzIHRoZW4gdXNlZCB0byBzb2x2ZSB0aGUgc3lzdGVtIG9mCiogIGVx\ndWF0aW9ucyBBICogWCA9IEIuCioKKiAgQXJndW1lbnRzCiogID09PT09PT09PQoqCiogIFVQTE8g\nICAgKGlucHV0KSBDSEFSQUNURVIqMQoqICAgICAgICAgID0gJ1UnOiAgVXBwZXIgdHJpYW5nbGUg\nb2YgQSBpcyBzdG9yZWQ7CiogICAgICAgICAgPSAnTCc6ICBMb3dlciB0cmlhbmdsZSBvZiBBIGlz\nIHN0b3JlZC4KKgoqICBOICAgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBudW1i\nZXIgb2YgbGluZWFyIGVxdWF0aW9ucywgaS5lLiwgdGhlIG9yZGVyIG9mIHRoZQoqICAgICAgICAg\nIG1hdHJpeCBBLiAgTiA+PSAwLgoqCiogIE5SSFMgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAg\nICAgVGhlIG51bWJlciBvZiByaWdodCBoYW5kIHNpZGVzLCBpLmUuLCB0aGUgbnVtYmVyIG9mIGNv\nbHVtbnMKKiAgICAgICAgICBvZiB0aGUgbWF0cml4IEIuICBOUkhTID49IDAuCioKKiAgQVAgICAg\nICAoaW5wdXQvb3V0cHV0KSBDT01QTEVYKjE2IGFycmF5LCBkaW1lbnNpb24gKE4qKE4rMSkvMikK\nKiAgICAgICAgICBPbiBlbnRyeSwgdGhlIHVwcGVyIG9yIGxvd2VyIHRyaWFuZ2xlIG9mIHRoZSBI\nZXJtaXRpYW4gbWF0cml4CiogICAgICAgICAgQSwgcGFja2VkIGNvbHVtbndpc2UgaW4gYSBsaW5l\nYXIgYXJyYXkuICBUaGUgai10aCBjb2x1bW4gb2YgQQoqICAgICAgICAgIGlzIHN0b3JlZCBpbiB0\naGUgYXJyYXkgQVAgYXMgZm9sbG93czoKKiAgICAgICAgICBpZiBVUExPID0gJ1UnLCBBUChpICsg\nKGotMSkqai8yKSA9IEEoaSxqKSBmb3IgMTw9aTw9ajsKKiAgICAgICAgICBpZiBVUExPID0gJ0wn\nLCBBUChpICsgKGotMSkqKDJuLWopLzIpID0gQShpLGopIGZvciBqPD1pPD1uLgoqICAgICAgICAg\nIFNlZSBiZWxvdyBmb3IgZnVydGhlciBkZXRhaWxzLgoqCiogICAgICAgICAgT24gZXhpdCwgaWYg\nSU5GTyA9IDAsIHRoZSBmYWN0b3IgVSBvciBMIGZyb20gdGhlIENob2xlc2t5CiogICAgICAgICAg\nZmFjdG9yaXphdGlvbiBBID0gVSoqSCpVIG9yIEEgPSBMKkwqKkgsIGluIHRoZSBzYW1lIHN0b3Jh\nZ2UKKiAgICAgICAgICBmb3JtYXQgYXMgQS4KKgoqICBCICAgICAgIChpbnB1dC9vdXRwdXQpIENP\nTVBMRVgqMTYgYXJyYXksIGRpbWVuc2lvbiAoTERCLE5SSFMpCiogICAgICAgICAgT24gZW50cnks\nIHRoZSBOLWJ5LU5SSFMgcmlnaHQgaGFuZCBzaWRlIG1hdHJpeCBCLgoqICAgICAgICAgIE9uIGV4\naXQsIGlmIElORk8gPSAwLCB0aGUgTi1ieS1OUkhTIHNvbHV0aW9uIG1hdHJpeCBYLgoqCiogIExE\nQiAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9m\nIHRoZSBhcnJheSBCLiAgTERCID49IG1heCgxLE4pLgoqCiogIElORk8gICAgKG91dHB1dCkgSU5U\nRUdFUgoqICAgICAgICAgID0gMDogIHN1Y2Nlc3NmdWwgZXhpdAoqICAgICAgICAgIDwgMDogIGlm\nIElORk8gPSAtaSwgdGhlIGktdGggYXJndW1lbnQgaGFkIGFuIGlsbGVnYWwgdmFsdWUKKiAgICAg\nICAgICA+IDA6ICBpZiBJTkZPID0gaSwgdGhlIGxlYWRpbmcgbWlub3Igb2Ygb3JkZXIgaSBvZiBB\nIGlzIG5vdAoqICAgICAgICAgICAgICAgIHBvc2l0aXZlIGRlZmluaXRlLCBzbyB0aGUgZmFjdG9y\naXphdGlvbiBjb3VsZCBub3QgYmUKKiAgICAgICAgICAgICAgICBjb21wbGV0ZWQsIGFuZCB0aGUg\nc29sdXRpb24gaGFzIG5vdCBiZWVuIGNvbXB1dGVkLgoqCnIuAgAAaIZohymBci8CAAB9cjACAAAo\naIqJaItojHViaJiKARxomVgMAAAAenBwc3ZfMjgudHh0cjECAAB1YmibigEcaJxYBAAAAHBwc3Zy\nMgIAAGiYigEcdWJofWhhXWh+h1JyMwIAAH1yNAIAAChogVgDAAAAU1BEcjUCAABog1gLAAAAdHJp\nZGlhZ29uYWxyNgIAAGhxWCEAAABkcml2ZXIgc2ltcGxlLCBzb2x2ZSBBKlggPSBCIG9ubHlyNwIA\nAGiGaIcpgXI4AgAAfXI5AgAAKGiKiWiLaIx1YmiNWCsAAABodHRwOi8vd3d3Lm5ldGxpYi5vcmcv\nbGFwYWNrL3NpbmdsZS9zcHRzdi5mcjoCAABoj1gBAAAAc2iQaH1okV1ofodScjsCAAB9cjwCAAAo\naJRYQgkAACAgICAgIFNVQlJPVVRJTkUgU1BUU1YoIE4sIE5SSFMsIEQsIEUsIEIsIExEQiwgSU5G\nTyApCioKKiAgLS0gTEFQQUNLIHJvdXRpbmUgKHZlcnNpb24gMy4zLjEpIC0tCiogIC0tIExBUEFD\nSyBpcyBhIHNvZnR3YXJlIHBhY2thZ2UgcHJvdmlkZWQgYnkgVW5pdi4gb2YgVGVubmVzc2VlLCAg\nICAtLQoqICAtLSBVbml2LiBvZiBDYWxpZm9ybmlhIEJlcmtlbGV5LCBVbml2LiBvZiBDb2xvcmFk\nbyBEZW52ZXIgYW5kIE5BRyBMdGQuLi0tCiogIC0tIEFwcmlsIDIwMTEgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLQoqCiogICAgIC4uIFNjYWxh\nciBBcmd1bWVudHMgLi4KICAgICAgSU5URUdFUiAgICAgICAgICAgIElORk8sIExEQiwgTiwgTlJI\nUwoqICAgICAuLgoqICAgICAuLiBBcnJheSBBcmd1bWVudHMgLi4KICAgICAgUkVBTCAgICAgICAg\nICAgICAgIEIoIExEQiwgKiApLCBEKCAqICksIEUoICogKQoqICAgICAuLgoqCiogIFB1cnBvc2UK\nKiAgPT09PT09PQoqCiogIFNQVFNWIGNvbXB1dGVzIHRoZSBzb2x1dGlvbiB0byBhIHJlYWwgc3lz\ndGVtIG9mIGxpbmVhciBlcXVhdGlvbnMKKiAgQSpYID0gQiwgd2hlcmUgQSBpcyBhbiBOLWJ5LU4g\nc3ltbWV0cmljIHBvc2l0aXZlIGRlZmluaXRlIHRyaWRpYWdvbmFsCiogIG1hdHJpeCwgYW5kIFgg\nYW5kIEIgYXJlIE4tYnktTlJIUyBtYXRyaWNlcy4KKgoqICBBIGlzIGZhY3RvcmVkIGFzIEEgPSBM\nKkQqTCoqVCwgYW5kIHRoZSBmYWN0b3JlZCBmb3JtIG9mIEEgaXMgdGhlbgoqICB1c2VkIHRvIHNv\nbHZlIHRoZSBzeXN0ZW0gb2YgZXF1YXRpb25zLgoqCiogIEFyZ3VtZW50cwoqICA9PT09PT09PT0K\nKgoqICBOICAgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBvcmRlciBvZiB0aGUg\nbWF0cml4IEEuICBOID49IDAuCioKKiAgTlJIUyAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAg\nICBUaGUgbnVtYmVyIG9mIHJpZ2h0IGhhbmQgc2lkZXMsIGkuZS4sIHRoZSBudW1iZXIgb2YgY29s\ndW1ucwoqICAgICAgICAgIG9mIHRoZSBtYXRyaXggQi4gIE5SSFMgPj0gMC4KKgoqICBEICAgICAg\nIChpbnB1dC9vdXRwdXQpIFJFQUwgYXJyYXksIGRpbWVuc2lvbiAoTikKKiAgICAgICAgICBPbiBl\nbnRyeSwgdGhlIG4gZGlhZ29uYWwgZWxlbWVudHMgb2YgdGhlIHRyaWRpYWdvbmFsIG1hdHJpeAoq\nICAgICAgICAgIEEuICBPbiBleGl0LCB0aGUgbiBkaWFnb25hbCBlbGVtZW50cyBvZiB0aGUgZGlh\nZ29uYWwgbWF0cml4CiogICAgICAgICAgRCBmcm9tIHRoZSBmYWN0b3JpemF0aW9uIEEgPSBMKkQq\nTCoqVC4KKgoqICBFICAgICAgIChpbnB1dC9vdXRwdXQpIFJFQUwgYXJyYXksIGRpbWVuc2lvbiAo\nTi0xKQoqICAgICAgICAgIE9uIGVudHJ5LCB0aGUgKG4tMSkgc3ViZGlhZ29uYWwgZWxlbWVudHMg\nb2YgdGhlIHRyaWRpYWdvbmFsCiogICAgICAgICAgbWF0cml4IEEuICBPbiBleGl0LCB0aGUgKG4t\nMSkgc3ViZGlhZ29uYWwgZWxlbWVudHMgb2YgdGhlCiogICAgICAgICAgdW5pdCBiaWRpYWdvbmFs\nIGZhY3RvciBMIGZyb20gdGhlIEwqRCpMKipUIGZhY3Rvcml6YXRpb24gb2YKKiAgICAgICAgICBB\nLiAgKEUgY2FuIGFsc28gYmUgcmVnYXJkZWQgYXMgdGhlIHN1cGVyZGlhZ29uYWwgb2YgdGhlIHVu\naXQKKiAgICAgICAgICBiaWRpYWdvbmFsIGZhY3RvciBVIGZyb20gdGhlIFUqKlQqRCpVIGZhY3Rv\ncml6YXRpb24gb2YgQS4pCioKKiAgQiAgICAgICAoaW5wdXQvb3V0cHV0KSBSRUFMIGFycmF5LCBk\naW1lbnNpb24gKExEQixOUkhTKQoqICAgICAgICAgIE9uIGVudHJ5LCB0aGUgTi1ieS1OUkhTIHJp\nZ2h0IGhhbmQgc2lkZSBtYXRyaXggQi4KKiAgICAgICAgICBPbiBleGl0LCBpZiBJTkZPID0gMCwg\ndGhlIE4tYnktTlJIUyBzb2x1dGlvbiBtYXRyaXggWC4KKgoqICBMREIgICAgIChpbnB1dCkgSU5U\nRUdFUgoqICAgICAgICAgIFRoZSBsZWFkaW5nIGRpbWVuc2lvbiBvZiB0aGUgYXJyYXkgQi4gIExE\nQiA+PSBtYXgoMSxOKS4KKgoqICBJTkZPICAgIChvdXRwdXQpIElOVEVHRVIKKiAgICAgICAgICA9\nIDA6ICBzdWNjZXNzZnVsIGV4aXQKKiAgICAgICAgICA8IDA6ICBpZiBJTkZPID0gLWksIHRoZSBp\nLXRoIGFyZ3VtZW50IGhhZCBhbiBpbGxlZ2FsIHZhbHVlCiogICAgICAgICAgPiAwOiAgaWYgSU5G\nTyA9IGksIHRoZSBsZWFkaW5nIG1pbm9yIG9mIG9yZGVyIGkgaXMgbm90CiogICAgICAgICAgICAg\nICAgcG9zaXRpdmUgZGVmaW5pdGUsIGFuZCB0aGUgc29sdXRpb24gaGFzIG5vdCBiZWVuCiogICAg\nICAgICAgICAgICAgY29tcHV0ZWQuICBUaGUgZmFjdG9yaXphdGlvbiBoYXMgbm90IGJlZW4gY29t\ncGxldGVkCiogICAgICAgICAgICAgICAgdW5sZXNzIGkgPSBOLgoqCnI9AgAAaIZohymBcj4CAAB9\ncj8CAAAoaIqJaItojHViaJiKAR1omVgMAAAAc3B0c3ZfMjkudHh0ckACAAB1YmibigEdaJxYBAAA\nAHB0c3ZyQQIAAGiYigEddWJofWhhXWh+h1JyQgIAAH1yQwIAAChogVgDAAAAU1BEckQCAABog1gL\nAAAAdHJpZGlhZ29uYWxyRQIAAGhxWCEAAABkcml2ZXIgc2ltcGxlLCBzb2x2ZSBBKlggPSBCIG9u\nbHlyRgIAAGiGaIcpgXJHAgAAfXJIAgAAKGiKiWiLaIx1YmiNWCsAAABodHRwOi8vd3d3Lm5ldGxp\nYi5vcmcvbGFwYWNrL2RvdWJsZS9kcHRzdi5mckkCAABoj1gBAAAAZGiQaH1okV1ofodSckoCAAB9\ncksCAAAoaJRYZgkAACAgICAgIFNVQlJPVVRJTkUgRFBUU1YoIE4sIE5SSFMsIEQsIEUsIEIsIExE\nQiwgSU5GTyApCioKKiAgLS0gTEFQQUNLIHJvdXRpbmUgKHZlcnNpb24gMy4zLjEpIC0tCiogIC0t\nIExBUEFDSyBpcyBhIHNvZnR3YXJlIHBhY2thZ2UgcHJvdmlkZWQgYnkgVW5pdi4gb2YgVGVubmVz\nc2VlLCAgICAtLQoqICAtLSBVbml2LiBvZiBDYWxpZm9ybmlhIEJlcmtlbGV5LCBVbml2LiBvZiBD\nb2xvcmFkbyBEZW52ZXIgYW5kIE5BRyBMdGQuLi0tCiogIC0tIEFwcmlsIDIwMTEgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLQoqCiogICAgIC4u\nIFNjYWxhciBBcmd1bWVudHMgLi4KICAgICAgSU5URUdFUiAgICAgICAgICAgIElORk8sIExEQiwg\nTiwgTlJIUwoqICAgICAuLgoqICAgICAuLiBBcnJheSBBcmd1bWVudHMgLi4KICAgICAgRE9VQkxF\nIFBSRUNJU0lPTiAgIEIoIExEQiwgKiApLCBEKCAqICksIEUoICogKQoqICAgICAuLgoqCiogIFB1\ncnBvc2UKKiAgPT09PT09PQoqCiogIERQVFNWIGNvbXB1dGVzIHRoZSBzb2x1dGlvbiB0byBhIHJl\nYWwgc3lzdGVtIG9mIGxpbmVhciBlcXVhdGlvbnMKKiAgQSpYID0gQiwgd2hlcmUgQSBpcyBhbiBO\nLWJ5LU4gc3ltbWV0cmljIHBvc2l0aXZlIGRlZmluaXRlIHRyaWRpYWdvbmFsCiogIG1hdHJpeCwg\nYW5kIFggYW5kIEIgYXJlIE4tYnktTlJIUyBtYXRyaWNlcy4KKgoqICBBIGlzIGZhY3RvcmVkIGFz\nIEEgPSBMKkQqTCoqVCwgYW5kIHRoZSBmYWN0b3JlZCBmb3JtIG9mIEEgaXMgdGhlbgoqICB1c2Vk\nIHRvIHNvbHZlIHRoZSBzeXN0ZW0gb2YgZXF1YXRpb25zLgoqCiogIEFyZ3VtZW50cwoqICA9PT09\nPT09PT0KKgoqICBOICAgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBvcmRlciBv\nZiB0aGUgbWF0cml4IEEuICBOID49IDAuCioKKiAgTlJIUyAgICAoaW5wdXQpIElOVEVHRVIKKiAg\nICAgICAgICBUaGUgbnVtYmVyIG9mIHJpZ2h0IGhhbmQgc2lkZXMsIGkuZS4sIHRoZSBudW1iZXIg\nb2YgY29sdW1ucwoqICAgICAgICAgIG9mIHRoZSBtYXRyaXggQi4gIE5SSFMgPj0gMC4KKgoqICBE\nICAgICAgIChpbnB1dC9vdXRwdXQpIERPVUJMRSBQUkVDSVNJT04gYXJyYXksIGRpbWVuc2lvbiAo\nTikKKiAgICAgICAgICBPbiBlbnRyeSwgdGhlIG4gZGlhZ29uYWwgZWxlbWVudHMgb2YgdGhlIHRy\naWRpYWdvbmFsIG1hdHJpeAoqICAgICAgICAgIEEuICBPbiBleGl0LCB0aGUgbiBkaWFnb25hbCBl\nbGVtZW50cyBvZiB0aGUgZGlhZ29uYWwgbWF0cml4CiogICAgICAgICAgRCBmcm9tIHRoZSBmYWN0\nb3JpemF0aW9uIEEgPSBMKkQqTCoqVC4KKgoqICBFICAgICAgIChpbnB1dC9vdXRwdXQpIERPVUJM\nRSBQUkVDSVNJT04gYXJyYXksIGRpbWVuc2lvbiAoTi0xKQoqICAgICAgICAgIE9uIGVudHJ5LCB0\naGUgKG4tMSkgc3ViZGlhZ29uYWwgZWxlbWVudHMgb2YgdGhlIHRyaWRpYWdvbmFsCiogICAgICAg\nICAgbWF0cml4IEEuICBPbiBleGl0LCB0aGUgKG4tMSkgc3ViZGlhZ29uYWwgZWxlbWVudHMgb2Yg\ndGhlCiogICAgICAgICAgdW5pdCBiaWRpYWdvbmFsIGZhY3RvciBMIGZyb20gdGhlIEwqRCpMKipU\nIGZhY3Rvcml6YXRpb24gb2YKKiAgICAgICAgICBBLiAgKEUgY2FuIGFsc28gYmUgcmVnYXJkZWQg\nYXMgdGhlIHN1cGVyZGlhZ29uYWwgb2YgdGhlIHVuaXQKKiAgICAgICAgICBiaWRpYWdvbmFsIGZh\nY3RvciBVIGZyb20gdGhlIFUqKlQqRCpVIGZhY3Rvcml6YXRpb24gb2YgQS4pCioKKiAgQiAgICAg\nICAoaW5wdXQvb3V0cHV0KSBET1VCTEUgUFJFQ0lTSU9OIGFycmF5LCBkaW1lbnNpb24gKExEQixO\nUkhTKQoqICAgICAgICAgIE9uIGVudHJ5LCB0aGUgTi1ieS1OUkhTIHJpZ2h0IGhhbmQgc2lkZSBt\nYXRyaXggQi4KKiAgICAgICAgICBPbiBleGl0LCBpZiBJTkZPID0gMCwgdGhlIE4tYnktTlJIUyBz\nb2x1dGlvbiBtYXRyaXggWC4KKgoqICBMREIgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAg\nIFRoZSBsZWFkaW5nIGRpbWVuc2lvbiBvZiB0aGUgYXJyYXkgQi4gIExEQiA+PSBtYXgoMSxOKS4K\nKgoqICBJTkZPICAgIChvdXRwdXQpIElOVEVHRVIKKiAgICAgICAgICA9IDA6ICBzdWNjZXNzZnVs\nIGV4aXQKKiAgICAgICAgICA8IDA6ICBpZiBJTkZPID0gLWksIHRoZSBpLXRoIGFyZ3VtZW50IGhh\nZCBhbiBpbGxlZ2FsIHZhbHVlCiogICAgICAgICAgPiAwOiAgaWYgSU5GTyA9IGksIHRoZSBsZWFk\naW5nIG1pbm9yIG9mIG9yZGVyIGkgaXMgbm90CiogICAgICAgICAgICAgICAgcG9zaXRpdmUgZGVm\naW5pdGUsIGFuZCB0aGUgc29sdXRpb24gaGFzIG5vdCBiZWVuCiogICAgICAgICAgICAgICAgY29t\ncHV0ZWQuICBUaGUgZmFjdG9yaXphdGlvbiBoYXMgbm90IGJlZW4gY29tcGxldGVkCiogICAgICAg\nICAgICAgICAgdW5sZXNzIGkgPSBOLgoqCnJMAgAAaIZohymBck0CAAB9ck4CAAAoaIqJaItojHVi\naJiKAR5omVgMAAAAZHB0c3ZfMzAudHh0ck8CAAB1YmibigEeaJxYBAAAAHB0c3ZyUAIAAGiYigEe\ndWJofWhhXWh+h1JyUQIAAH1yUgIAAChogVgDAAAASFBEclMCAABog1gLAAAAdHJpZGlhZ29uYWxy\nVAIAAGhxWCEAAABkcml2ZXIgc2ltcGxlLCBzb2x2ZSBBKlggPSBCIG9ubHlyVQIAAGiGaIcpgXJW\nAgAAfXJXAgAAKGiKiWiLaIx1YmiNWCwAAABodHRwOi8vd3d3Lm5ldGxpYi5vcmcvbGFwYWNrL2Nv\nbXBsZXgvY3B0c3YuZnJYAgAAaI9YAQAAAGNokGh9aJFdaH6HUnJZAgAAfXJaAgAAKGiUWGEJAAAg\nICAgICBTVUJST1VUSU5FIENQVFNWKCBOLCBOUkhTLCBELCBFLCBCLCBMREIsIElORk8gKQoqCiog\nIC0tIExBUEFDSyByb3V0aW5lICh2ZXJzaW9uIDMuMy4xKSAtLQoqICAtLSBMQVBBQ0sgaXMgYSBz\nb2Z0d2FyZSBwYWNrYWdlIHByb3ZpZGVkIGJ5IFVuaXYuIG9mIFRlbm5lc3NlZSwgICAgLS0KKiAg\nLS0gVW5pdi4gb2YgQ2FsaWZvcm5pYSBCZXJrZWxleSwgVW5pdi4gb2YgQ29sb3JhZG8gRGVudmVy\nIGFuZCBOQUcgTHRkLi4tLQoqICAtLSBBcHJpbCAyMDExICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0KKgoqICAgICAuLiBTY2FsYXIgQXJndW1l\nbnRzIC4uCiAgICAgIElOVEVHRVIgICAgICAgICAgICBJTkZPLCBMREIsIE4sIE5SSFMKKiAgICAg\nLi4KKiAgICAgLi4gQXJyYXkgQXJndW1lbnRzIC4uCiAgICAgIFJFQUwgICAgICAgICAgICAgICBE\nKCAqICkKICAgICAgQ09NUExFWCAgICAgICAgICAgIEIoIExEQiwgKiApLCBFKCAqICkKKiAgICAg\nLi4KKgoqICBQdXJwb3NlCiogID09PT09PT0KKgoqICBDUFRTViBjb21wdXRlcyB0aGUgc29sdXRp\nb24gdG8gYSBjb21wbGV4IHN5c3RlbSBvZiBsaW5lYXIgZXF1YXRpb25zCiogIEEqWCA9IEIsIHdo\nZXJlIEEgaXMgYW4gTi1ieS1OIEhlcm1pdGlhbiBwb3NpdGl2ZSBkZWZpbml0ZSB0cmlkaWFnb25h\nbAoqICBtYXRyaXgsIGFuZCBYIGFuZCBCIGFyZSBOLWJ5LU5SSFMgbWF0cmljZXMuCioKKiAgQSBp\ncyBmYWN0b3JlZCBhcyBBID0gTCpEKkwqKkgsIGFuZCB0aGUgZmFjdG9yZWQgZm9ybSBvZiBBIGlz\nIHRoZW4KKiAgdXNlZCB0byBzb2x2ZSB0aGUgc3lzdGVtIG9mIGVxdWF0aW9ucy4KKgoqICBBcmd1\nbWVudHMKKiAgPT09PT09PT09CioKKiAgTiAgICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAg\nICBUaGUgb3JkZXIgb2YgdGhlIG1hdHJpeCBBLiAgTiA+PSAwLgoqCiogIE5SSFMgICAgKGlucHV0\nKSBJTlRFR0VSCiogICAgICAgICAgVGhlIG51bWJlciBvZiByaWdodCBoYW5kIHNpZGVzLCBpLmUu\nLCB0aGUgbnVtYmVyIG9mIGNvbHVtbnMKKiAgICAgICAgICBvZiB0aGUgbWF0cml4IEIuICBOUkhT\nID49IDAuCioKKiAgRCAgICAgICAoaW5wdXQvb3V0cHV0KSBSRUFMIGFycmF5LCBkaW1lbnNpb24g\nKE4pCiogICAgICAgICAgT24gZW50cnksIHRoZSBuIGRpYWdvbmFsIGVsZW1lbnRzIG9mIHRoZSB0\ncmlkaWFnb25hbCBtYXRyaXgKKiAgICAgICAgICBBLiAgT24gZXhpdCwgdGhlIG4gZGlhZ29uYWwg\nZWxlbWVudHMgb2YgdGhlIGRpYWdvbmFsIG1hdHJpeAoqICAgICAgICAgIEQgZnJvbSB0aGUgZmFj\ndG9yaXphdGlvbiBBID0gTCpEKkwqKkguCioKKiAgRSAgICAgICAoaW5wdXQvb3V0cHV0KSBDT01Q\nTEVYIGFycmF5LCBkaW1lbnNpb24gKE4tMSkKKiAgICAgICAgICBPbiBlbnRyeSwgdGhlIChuLTEp\nIHN1YmRpYWdvbmFsIGVsZW1lbnRzIG9mIHRoZSB0cmlkaWFnb25hbAoqICAgICAgICAgIG1hdHJp\neCBBLiAgT24gZXhpdCwgdGhlIChuLTEpIHN1YmRpYWdvbmFsIGVsZW1lbnRzIG9mIHRoZQoqICAg\nICAgICAgIHVuaXQgYmlkaWFnb25hbCBmYWN0b3IgTCBmcm9tIHRoZSBMKkQqTCoqSCBmYWN0b3Jp\nemF0aW9uIG9mCiogICAgICAgICAgQS4gIEUgY2FuIGFsc28gYmUgcmVnYXJkZWQgYXMgdGhlIHN1\ncGVyZGlhZ29uYWwgb2YgdGhlIHVuaXQKKiAgICAgICAgICBiaWRpYWdvbmFsIGZhY3RvciBVIGZy\nb20gdGhlIFUqKkgqRCpVIGZhY3Rvcml6YXRpb24gb2YgQS4KKgoqICBCICAgICAgIChpbnB1dC9v\ndXRwdXQpIENPTVBMRVggYXJyYXksIGRpbWVuc2lvbiAoTERCLE5SSFMpCiogICAgICAgICAgT24g\nZW50cnksIHRoZSBOLWJ5LU5SSFMgcmlnaHQgaGFuZCBzaWRlIG1hdHJpeCBCLgoqICAgICAgICAg\nIE9uIGV4aXQsIGlmIElORk8gPSAwLCB0aGUgTi1ieS1OUkhTIHNvbHV0aW9uIG1hdHJpeCBYLgoq\nCiogIExEQiAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGltZW5z\naW9uIG9mIHRoZSBhcnJheSBCLiAgTERCID49IG1heCgxLE4pLgoqCiogIElORk8gICAgKG91dHB1\ndCkgSU5URUdFUgoqICAgICAgICAgID0gMDogIHN1Y2Nlc3NmdWwgZXhpdAoqICAgICAgICAgIDwg\nMDogIGlmIElORk8gPSAtaSwgdGhlIGktdGggYXJndW1lbnQgaGFkIGFuIGlsbGVnYWwgdmFsdWUK\nKiAgICAgICAgICA+IDA6ICBpZiBJTkZPID0gaSwgdGhlIGxlYWRpbmcgbWlub3Igb2Ygb3JkZXIg\naSBpcyBub3QKKiAgICAgICAgICAgICAgICBwb3NpdGl2ZSBkZWZpbml0ZSwgYW5kIHRoZSBzb2x1\ndGlvbiBoYXMgbm90IGJlZW4KKiAgICAgICAgICAgICAgICBjb21wdXRlZC4gIFRoZSBmYWN0b3Jp\nemF0aW9uIGhhcyBub3QgYmVlbiBjb21wbGV0ZWQKKiAgICAgICAgICAgICAgICB1bmxlc3MgaSA9\nIE4uCioKclsCAABohmiHKYFyXAIAAH1yXQIAAChoioloi2iMdWJomIoBH2iZWAwAAABjcHRzdl8z\nMS50eHRyXgIAAHViaJuKAR9onFgEAAAAcHRzdnJfAgAAaJiKAR91Ymh9aGFdaH6HUnJgAgAAfXJh\nAgAAKGiBWAMAAABIUERyYgIAAGiDWAsAAAB0cmlkaWFnb25hbHJjAgAAaHFYIQAAAGRyaXZlciBz\naW1wbGUsIHNvbHZlIEEqWCA9IEIgb25seXJkAgAAaIZohymBcmUCAAB9cmYCAAAoaIqJaItojHVi\naI1YLgAAAGh0dHA6Ly93d3cubmV0bGliLm9yZy9sYXBhY2svY29tcGxleDE2L3pwdHN2LmZyZwIA\nAGiPWAEAAAB6aJBofWiRXWh+h1JyaAIAAH1yaQIAACholFhzCQAAICAgICAgU1VCUk9VVElORSBa\nUFRTViggTiwgTlJIUywgRCwgRSwgQiwgTERCLCBJTkZPICkKKgoqICAtLSBMQVBBQ0sgcm91dGlu\nZSAodmVyc2lvbiAzLjMuMSkgLS0KKiAgLS0gTEFQQUNLIGlzIGEgc29mdHdhcmUgcGFja2FnZSBw\ncm92aWRlZCBieSBVbml2LiBvZiBUZW5uZXNzZWUsICAgIC0tCiogIC0tIFVuaXYuIG9mIENhbGlm\nb3JuaWEgQmVya2VsZXksIFVuaXYuIG9mIENvbG9yYWRvIERlbnZlciBhbmQgTkFHIEx0ZC4uLS0K\nKiAgLS0gQXByaWwgMjAxMSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgIC0tCioKKiAgICAgLi4gU2NhbGFyIEFyZ3VtZW50cyAuLgogICAgICBJTlRF\nR0VSICAgICAgICAgICAgSU5GTywgTERCLCBOLCBOUkhTCiogICAgIC4uCiogICAgIC4uIEFycmF5\nIEFyZ3VtZW50cyAuLgogICAgICBET1VCTEUgUFJFQ0lTSU9OICAgRCggKiApCiAgICAgIENPTVBM\nRVgqMTYgICAgICAgICBCKCBMREIsICogKSwgRSggKiApCiogICAgIC4uCioKKiAgUHVycG9zZQoq\nICA9PT09PT09CioKKiAgWlBUU1YgY29tcHV0ZXMgdGhlIHNvbHV0aW9uIHRvIGEgY29tcGxleCBz\neXN0ZW0gb2YgbGluZWFyIGVxdWF0aW9ucwoqICBBKlggPSBCLCB3aGVyZSBBIGlzIGFuIE4tYnkt\nTiBIZXJtaXRpYW4gcG9zaXRpdmUgZGVmaW5pdGUgdHJpZGlhZ29uYWwKKiAgbWF0cml4LCBhbmQg\nWCBhbmQgQiBhcmUgTi1ieS1OUkhTIG1hdHJpY2VzLgoqCiogIEEgaXMgZmFjdG9yZWQgYXMgQSA9\nIEwqRCpMKipILCBhbmQgdGhlIGZhY3RvcmVkIGZvcm0gb2YgQSBpcyB0aGVuCiogIHVzZWQgdG8g\nc29sdmUgdGhlIHN5c3RlbSBvZiBlcXVhdGlvbnMuCioKKiAgQXJndW1lbnRzCiogID09PT09PT09\nPQoqCiogIE4gICAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG9yZGVyIG9mIHRo\nZSBtYXRyaXggQS4gIE4gPj0gMC4KKgoqICBOUkhTICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAg\nICAgIFRoZSBudW1iZXIgb2YgcmlnaHQgaGFuZCBzaWRlcywgaS5lLiwgdGhlIG51bWJlciBvZiBj\nb2x1bW5zCiogICAgICAgICAgb2YgdGhlIG1hdHJpeCBCLiAgTlJIUyA+PSAwLgoqCiogIEQgICAg\nICAgKGlucHV0L291dHB1dCkgRE9VQkxFIFBSRUNJU0lPTiBhcnJheSwgZGltZW5zaW9uIChOKQoq\nICAgICAgICAgIE9uIGVudHJ5LCB0aGUgbiBkaWFnb25hbCBlbGVtZW50cyBvZiB0aGUgdHJpZGlh\nZ29uYWwgbWF0cml4CiogICAgICAgICAgQS4gIE9uIGV4aXQsIHRoZSBuIGRpYWdvbmFsIGVsZW1l\nbnRzIG9mIHRoZSBkaWFnb25hbCBtYXRyaXgKKiAgICAgICAgICBEIGZyb20gdGhlIGZhY3Rvcml6\nYXRpb24gQSA9IEwqRCpMKipILgoqCiogIEUgICAgICAgKGlucHV0L291dHB1dCkgQ09NUExFWCox\nNiBhcnJheSwgZGltZW5zaW9uIChOLTEpCiogICAgICAgICAgT24gZW50cnksIHRoZSAobi0xKSBz\ndWJkaWFnb25hbCBlbGVtZW50cyBvZiB0aGUgdHJpZGlhZ29uYWwKKiAgICAgICAgICBtYXRyaXgg\nQS4gIE9uIGV4aXQsIHRoZSAobi0xKSBzdWJkaWFnb25hbCBlbGVtZW50cyBvZiB0aGUKKiAgICAg\nICAgICB1bml0IGJpZGlhZ29uYWwgZmFjdG9yIEwgZnJvbSB0aGUgTCpEKkwqKkggZmFjdG9yaXph\ndGlvbiBvZgoqICAgICAgICAgIEEuICBFIGNhbiBhbHNvIGJlIHJlZ2FyZGVkIGFzIHRoZSBzdXBl\ncmRpYWdvbmFsIG9mIHRoZSB1bml0CiogICAgICAgICAgYmlkaWFnb25hbCBmYWN0b3IgVSBmcm9t\nIHRoZSBVKipIKkQqVSBmYWN0b3JpemF0aW9uIG9mIEEuCioKKiAgQiAgICAgICAoaW5wdXQvb3V0\ncHV0KSBDT01QTEVYKjE2IGFycmF5LCBkaW1lbnNpb24gKExEQixOUkhTKQoqICAgICAgICAgIE9u\nIGVudHJ5LCB0aGUgTi1ieS1OUkhTIHJpZ2h0IGhhbmQgc2lkZSBtYXRyaXggQi4KKiAgICAgICAg\nICBPbiBleGl0LCBpZiBJTkZPID0gMCwgdGhlIE4tYnktTlJIUyBzb2x1dGlvbiBtYXRyaXggWC4K\nKgoqICBMREIgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBsZWFkaW5nIGRpbWVu\nc2lvbiBvZiB0aGUgYXJyYXkgQi4gIExEQiA+PSBtYXgoMSxOKS4KKgoqICBJTkZPICAgIChvdXRw\ndXQpIElOVEVHRVIKKiAgICAgICAgICA9IDA6ICBzdWNjZXNzZnVsIGV4aXQKKiAgICAgICAgICA8\nIDA6ICBpZiBJTkZPID0gLWksIHRoZSBpLXRoIGFyZ3VtZW50IGhhZCBhbiBpbGxlZ2FsIHZhbHVl\nCiogICAgICAgICAgPiAwOiAgaWYgSU5GTyA9IGksIHRoZSBsZWFkaW5nIG1pbm9yIG9mIG9yZGVy\nIGkgaXMgbm90CiogICAgICAgICAgICAgICAgcG9zaXRpdmUgZGVmaW5pdGUsIGFuZCB0aGUgc29s\ndXRpb24gaGFzIG5vdCBiZWVuCiogICAgICAgICAgICAgICAgY29tcHV0ZWQuICBUaGUgZmFjdG9y\naXphdGlvbiBoYXMgbm90IGJlZW4gY29tcGxldGVkCiogICAgICAgICAgICAgICAgdW5sZXNzIGkg\nPSBOLgoqCnJqAgAAaIZohymBcmsCAAB9cmwCAAAoaIqJaItojHViaJiKASBomVgMAAAAenB0c3Zf\nMzIudHh0cm0CAAB1YmibigEgaJxYBAAAAHB0c3ZybgIAAGiYigEgdWJofWhhXWh+h1JybwIAAH1y\ncAIAAChogVgJAAAAc3ltbWV0cmljcnECAABog1gEAAAAZnVsbHJyAgAAaHFYIQAAAGRyaXZlciBz\naW1wbGUsIHNvbHZlIEEqWCA9IEIgb25seXJzAgAAaIZohymBcnQCAAB9cnUCAAAoaIqJaItojHVi\naI1YKwAAAGh0dHA6Ly93d3cubmV0bGliLm9yZy9sYXBhY2svc2luZ2xlL3NzeXN2LmZydgIAAGiP\nWAEAAABzaJBofWiRXWh+h1JydwIAAH1yeAIAACholFiaEQAAICAgICAgU1VCUk9VVElORSBTU1lT\nViggVVBMTywgTiwgTlJIUywgQSwgTERBLCBJUElWLCBCLCBMREIsIFdPUkssCiAgICAgJCAgICAg\nICAgICAgICAgICAgIExXT1JLLCBJTkZPICkKKgoqICAtLSBMQVBBQ0sgZHJpdmVyIHJvdXRpbmUg\nKHZlcnNpb24gMy4zLjEpIC0tCiogIC0tIExBUEFDSyBpcyBhIHNvZnR3YXJlIHBhY2thZ2UgcHJv\ndmlkZWQgYnkgVW5pdi4gb2YgVGVubmVzc2VlLCAgICAtLQoqICAtLSBVbml2LiBvZiBDYWxpZm9y\nbmlhIEJlcmtlbGV5LCBVbml2LiBvZiBDb2xvcmFkbyBEZW52ZXIgYW5kIE5BRyBMdGQuLi0tCiog\nIC0tIEFwcmlsIDIwMTEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAtLQoqIEBnZW5lcmF0ZWQgcwoqCiogICAgIC4uIFNjYWxhciBBcmd1bWVudHMg\nLi4KICAgICAgQ0hBUkFDVEVSICAgICAgICAgIFVQTE8KICAgICAgSU5URUdFUiAgICAgICAgICAg\nIElORk8sIExEQSwgTERCLCBMV09SSywgTiwgTlJIUwoqICAgICAuLgoqICAgICAuLiBBcnJheSBB\ncmd1bWVudHMgLi4KICAgICAgSU5URUdFUiAgICAgICAgICAgIElQSVYoICogKQogICAgICBSRUFM\nICAgICAgICAgICAgICAgQSggTERBLCAqICksIEIoIExEQiwgKiApLCBXT1JLKCAqICkKKiAgICAg\nLi4KKgoqICBQdXJwb3NlCiogID09PT09PT0KKgoqICBTU1lTViBjb21wdXRlcyB0aGUgc29sdXRp\nb24gdG8gYSByZWFsIHN5c3RlbSBvZiBsaW5lYXIgZXF1YXRpb25zCiogICAgIEEgKiBYID0gQiwK\nKiAgd2hlcmUgQSBpcyBhbiBOLWJ5LU4gc3ltbWV0cmljIG1hdHJpeCBhbmQgWCBhbmQgQiBhcmUg\nTi1ieS1OUkhTCiogIG1hdHJpY2VzLgoqCiogIFRoZSBkaWFnb25hbCBwaXZvdGluZyBtZXRob2Qg\naXMgdXNlZCB0byBmYWN0b3IgQSBhcwoqICAgICBBID0gVSAqIEQgKiBVKipULCAgaWYgVVBMTyA9\nICdVJywgb3IKKiAgICAgQSA9IEwgKiBEICogTCoqVCwgIGlmIFVQTE8gPSAnTCcsCiogIHdoZXJl\nIFUgKG9yIEwpIGlzIGEgcHJvZHVjdCBvZiBwZXJtdXRhdGlvbiBhbmQgdW5pdCB1cHBlciAobG93\nZXIpCiogIHRyaWFuZ3VsYXIgbWF0cmljZXMsIGFuZCBEIGlzIHN5bW1ldHJpYyBhbmQgYmxvY2sg\nZGlhZ29uYWwgd2l0aAoqICAxLWJ5LTEgYW5kIDItYnktMiBkaWFnb25hbCBibG9ja3MuICBUaGUg\nZmFjdG9yZWQgZm9ybSBvZiBBIGlzIHRoZW4KKiAgdXNlZCB0byBzb2x2ZSB0aGUgc3lzdGVtIG9m\nIGVxdWF0aW9ucyBBICogWCA9IEIuCioKKiAgQXJndW1lbnRzCiogID09PT09PT09PQoqCiogIFVQ\nTE8gICAgKGlucHV0KSBDSEFSQUNURVIqMQoqICAgICAgICAgID0gJ1UnOiAgVXBwZXIgdHJpYW5n\nbGUgb2YgQSBpcyBzdG9yZWQ7CiogICAgICAgICAgPSAnTCc6ICBMb3dlciB0cmlhbmdsZSBvZiBB\nIGlzIHN0b3JlZC4KKgoqICBOICAgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBu\ndW1iZXIgb2YgbGluZWFyIGVxdWF0aW9ucywgaS5lLiwgdGhlIG9yZGVyIG9mIHRoZQoqICAgICAg\nICAgIG1hdHJpeCBBLiAgTiA+PSAwLgoqCiogIE5SSFMgICAgKGlucHV0KSBJTlRFR0VSCiogICAg\nICAgICAgVGhlIG51bWJlciBvZiByaWdodCBoYW5kIHNpZGVzLCBpLmUuLCB0aGUgbnVtYmVyIG9m\nIGNvbHVtbnMKKiAgICAgICAgICBvZiB0aGUgbWF0cml4IEIuICBOUkhTID49IDAuCioKKiAgQSAg\nICAgICAoaW5wdXQvb3V0cHV0KSBSRUFMIGFycmF5LCBkaW1lbnNpb24gKExEQSxOKQoqICAgICAg\nICAgIE9uIGVudHJ5LCB0aGUgc3ltbWV0cmljIG1hdHJpeCBBLiAgSWYgVVBMTyA9ICdVJywgdGhl\nIGxlYWRpbmcKKiAgICAgICAgICBOLWJ5LU4gdXBwZXIgdHJpYW5ndWxhciBwYXJ0IG9mIEEgY29u\ndGFpbnMgdGhlIHVwcGVyCiogICAgICAgICAgdHJpYW5ndWxhciBwYXJ0IG9mIHRoZSBtYXRyaXgg\nQSwgYW5kIHRoZSBzdHJpY3RseSBsb3dlcgoqICAgICAgICAgIHRyaWFuZ3VsYXIgcGFydCBvZiBB\nIGlzIG5vdCByZWZlcmVuY2VkLiAgSWYgVVBMTyA9ICdMJywgdGhlCiogICAgICAgICAgbGVhZGlu\nZyBOLWJ5LU4gbG93ZXIgdHJpYW5ndWxhciBwYXJ0IG9mIEEgY29udGFpbnMgdGhlIGxvd2VyCiog\nICAgICAgICAgdHJpYW5ndWxhciBwYXJ0IG9mIHRoZSBtYXRyaXggQSwgYW5kIHRoZSBzdHJpY3Rs\neSB1cHBlcgoqICAgICAgICAgIHRyaWFuZ3VsYXIgcGFydCBvZiBBIGlzIG5vdCByZWZlcmVuY2Vk\nLgoqCiogICAgICAgICAgT24gZXhpdCwgaWYgSU5GTyA9IDAsIHRoZSBibG9jayBkaWFnb25hbCBt\nYXRyaXggRCBhbmQgdGhlCiogICAgICAgICAgbXVsdGlwbGllcnMgdXNlZCB0byBvYnRhaW4gdGhl\nIGZhY3RvciBVIG9yIEwgZnJvbSB0aGUKKiAgICAgICAgICBmYWN0b3JpemF0aW9uIEEgPSBVKkQq\nVSoqVCBvciBBID0gTCpEKkwqKlQgYXMgY29tcHV0ZWQgYnkKKiAgICAgICAgICBTU1lUUkYuCioK\nKiAgTERBICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbGVhZGluZyBkaW1lbnNp\nb24gb2YgdGhlIGFycmF5IEEuICBMREEgPj0gbWF4KDEsTikuCioKKiAgSVBJViAgICAob3V0cHV0\nKSBJTlRFR0VSIGFycmF5LCBkaW1lbnNpb24gKE4pCiogICAgICAgICAgRGV0YWlscyBvZiB0aGUg\naW50ZXJjaGFuZ2VzIGFuZCB0aGUgYmxvY2sgc3RydWN0dXJlIG9mIEQsIGFzCiogICAgICAgICAg\nZGV0ZXJtaW5lZCBieSBTU1lUUkYuICBJZiBJUElWKGspID4gMCwgdGhlbiByb3dzIGFuZCBjb2x1\nbW5zCiogICAgICAgICAgayBhbmQgSVBJVihrKSB3ZXJlIGludGVyY2hhbmdlZCwgYW5kIEQoayxr\nKSBpcyBhIDEtYnktMQoqICAgICAgICAgIGRpYWdvbmFsIGJsb2NrLiAgSWYgVVBMTyA9ICdVJyBh\nbmQgSVBJVihrKSA9IElQSVYoay0xKSA8IDAsCiogICAgICAgICAgdGhlbiByb3dzIGFuZCBjb2x1\nbW5zIGstMSBhbmQgLUlQSVYoaykgd2VyZSBpbnRlcmNoYW5nZWQgYW5kCiogICAgICAgICAgRChr\nLTE6ayxrLTE6aykgaXMgYSAyLWJ5LTIgZGlhZ29uYWwgYmxvY2suICBJZiBVUExPID0gJ0wnIGFu\nZAoqICAgICAgICAgIElQSVYoaykgPSBJUElWKGsrMSkgPCAwLCB0aGVuIHJvd3MgYW5kIGNvbHVt\nbnMgaysxIGFuZAoqICAgICAgICAgIC1JUElWKGspIHdlcmUgaW50ZXJjaGFuZ2VkIGFuZCBEKGs6\naysxLGs6aysxKSBpcyBhIDItYnktMgoqICAgICAgICAgIGRpYWdvbmFsIGJsb2NrLgoqCiogIEIg\nICAgICAgKGlucHV0L291dHB1dCkgUkVBTCBhcnJheSwgZGltZW5zaW9uIChMREIsTlJIUykKKiAg\nICAgICAgICBPbiBlbnRyeSwgdGhlIE4tYnktTlJIUyByaWdodCBoYW5kIHNpZGUgbWF0cml4IEIu\nCiogICAgICAgICAgT24gZXhpdCwgaWYgSU5GTyA9IDAsIHRoZSBOLWJ5LU5SSFMgc29sdXRpb24g\nbWF0cml4IFguCioKKiAgTERCICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbGVh\nZGluZyBkaW1lbnNpb24gb2YgdGhlIGFycmF5IEIuICBMREIgPj0gbWF4KDEsTikuCioKKiAgV09S\nSyAgICAod29ya3NwYWNlL291dHB1dCkgUkVBTCBhcnJheSwgZGltZW5zaW9uIChNQVgoMSxMV09S\nSykpCiogICAgICAgICAgT24gZXhpdCwgaWYgSU5GTyA9IDAsIFdPUksoMSkgcmV0dXJucyB0aGUg\nb3B0aW1hbCBMV09SSy4KKgoqICBMV09SSyAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRo\nZSBsZW5ndGggb2YgV09SSy4gIExXT1JLID49IDEsIGFuZCBmb3IgYmVzdCBwZXJmb3JtYW5jZQoq\nICAgICAgICAgIExXT1JLID49IG1heCgxLE4qTkIpLCB3aGVyZSBOQiBpcyB0aGUgb3B0aW1hbCBi\nbG9ja3NpemUgZm9yCiogICAgICAgICAgU1NZVFJGLgoqICAgICAgICAgIGZvciBMV09SSyA8IE4s\nIFRSUyB3aWxsIGJlIGRvbmUgd2l0aCBMZXZlbCBCTEFTIDIKKiAgICAgICAgICBmb3IgTFdPUksg\nPj0gTiwgVFJTIHdpbGwgYmUgZG9uZSB3aXRoIExldmVsIEJMQVMgMwoqCiogICAgICAgICAgSWYg\nTFdPUksgPSAtMSwgdGhlbiBhIHdvcmtzcGFjZSBxdWVyeSBpcyBhc3N1bWVkOyB0aGUgcm91dGlu\nZQoqICAgICAgICAgIG9ubHkgY2FsY3VsYXRlcyB0aGUgb3B0aW1hbCBzaXplIG9mIHRoZSBXT1JL\nIGFycmF5LCByZXR1cm5zCiogICAgICAgICAgdGhpcyB2YWx1ZSBhcyB0aGUgZmlyc3QgZW50cnkg\nb2YgdGhlIFdPUksgYXJyYXksIGFuZCBubyBlcnJvcgoqICAgICAgICAgIG1lc3NhZ2UgcmVsYXRl\nZCB0byBMV09SSyBpcyBpc3N1ZWQgYnkgWEVSQkxBLgoqCiogIElORk8gICAgKG91dHB1dCkgSU5U\nRUdFUgoqICAgICAgICAgID0gMDogc3VjY2Vzc2Z1bCBleGl0CiogICAgICAgICAgPCAwOiBpZiBJ\nTkZPID0gLWksIHRoZSBpLXRoIGFyZ3VtZW50IGhhZCBhbiBpbGxlZ2FsIHZhbHVlCiogICAgICAg\nICAgPiAwOiBpZiBJTkZPID0gaSwgRChpLGkpIGlzIGV4YWN0bHkgemVyby4gIFRoZSBmYWN0b3Jp\nemF0aW9uCiogICAgICAgICAgICAgICBoYXMgYmVlbiBjb21wbGV0ZWQsIGJ1dCB0aGUgYmxvY2sg\nZGlhZ29uYWwgbWF0cml4IEQgaXMKKiAgICAgICAgICAgICAgIGV4YWN0bHkgc2luZ3VsYXIsIHNv\nIHRoZSBzb2x1dGlvbiBjb3VsZCBub3QgYmUgY29tcHV0ZWQuCioKcnkCAABohmiHKYFyegIAAH1y\newIAAChoioloi2iMdWJomIoBIWiZWAwAAABzc3lzdl8zMy50eHRyfAIAAHViaJuKASFonFgEAAAA\nc3lzdnJ9AgAAaJiKASF1Ymh9aGFdaH6HUnJ+AgAAfXJ/AgAAKGiBWAkAAABzeW1tZXRyaWNygAIA\nAGiDWAQAAABmdWxscoECAABocVghAAAAZHJpdmVyIHNpbXBsZSwgc29sdmUgQSpYID0gQiBvbmx5\ncoICAABohmiHKYFygwIAAH1yhAIAAChoioloi2iMdWJojVgrAAAAaHR0cDovL3d3dy5uZXRsaWIu\nb3JnL2xhcGFjay9kb3VibGUvZHN5c3YuZnKFAgAAaI9YAQAAAGRokGh9aJFdaH6HUnKGAgAAfXKH\nAgAAKGiUWL4RAAAgICAgICBTVUJST1VUSU5FIERTWVNWKCBVUExPLCBOLCBOUkhTLCBBLCBMREEs\nIElQSVYsIEIsIExEQiwgV09SSywKICAgICAkICAgICAgICAgICAgICAgICAgTFdPUkssIElORk8g\nKQoqCiogIC0tIExBUEFDSyBkcml2ZXIgcm91dGluZSAodmVyc2lvbiAzLjMuMSkgLS0KKiAgLS0g\nTEFQQUNLIGlzIGEgc29mdHdhcmUgcGFja2FnZSBwcm92aWRlZCBieSBVbml2LiBvZiBUZW5uZXNz\nZWUsICAgIC0tCiogIC0tIFVuaXYuIG9mIENhbGlmb3JuaWEgQmVya2VsZXksIFVuaXYuIG9mIENv\nbG9yYWRvIERlbnZlciBhbmQgTkFHIEx0ZC4uLS0KKiAgLS0gQXByaWwgMjAxMSAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tCiogQGdlbmVyYXRl\nZCBkCioKKiAgICAgLi4gU2NhbGFyIEFyZ3VtZW50cyAuLgogICAgICBDSEFSQUNURVIgICAgICAg\nICAgVVBMTwogICAgICBJTlRFR0VSICAgICAgICAgICAgSU5GTywgTERBLCBMREIsIExXT1JLLCBO\nLCBOUkhTCiogICAgIC4uCiogICAgIC4uIEFycmF5IEFyZ3VtZW50cyAuLgogICAgICBJTlRFR0VS\nICAgICAgICAgICAgSVBJViggKiApCiAgICAgIERPVUJMRSBQUkVDSVNJT04gICBBKCBMREEsICog\nKSwgQiggTERCLCAqICksIFdPUksoICogKQoqICAgICAuLgoqCiogIFB1cnBvc2UKKiAgPT09PT09\nPQoqCiogIERTWVNWIGNvbXB1dGVzIHRoZSBzb2x1dGlvbiB0byBhIHJlYWwgc3lzdGVtIG9mIGxp\nbmVhciBlcXVhdGlvbnMKKiAgICAgQSAqIFggPSBCLAoqICB3aGVyZSBBIGlzIGFuIE4tYnktTiBz\neW1tZXRyaWMgbWF0cml4IGFuZCBYIGFuZCBCIGFyZSBOLWJ5LU5SSFMKKiAgbWF0cmljZXMuCioK\nKiAgVGhlIGRpYWdvbmFsIHBpdm90aW5nIG1ldGhvZCBpcyB1c2VkIHRvIGZhY3RvciBBIGFzCiog\nICAgIEEgPSBVICogRCAqIFUqKlQsICBpZiBVUExPID0gJ1UnLCBvcgoqICAgICBBID0gTCAqIEQg\nKiBMKipULCAgaWYgVVBMTyA9ICdMJywKKiAgd2hlcmUgVSAob3IgTCkgaXMgYSBwcm9kdWN0IG9m\nIHBlcm11dGF0aW9uIGFuZCB1bml0IHVwcGVyIChsb3dlcikKKiAgdHJpYW5ndWxhciBtYXRyaWNl\ncywgYW5kIEQgaXMgc3ltbWV0cmljIGFuZCBibG9jayBkaWFnb25hbCB3aXRoCiogIDEtYnktMSBh\nbmQgMi1ieS0yIGRpYWdvbmFsIGJsb2Nrcy4gIFRoZSBmYWN0b3JlZCBmb3JtIG9mIEEgaXMgdGhl\nbgoqICB1c2VkIHRvIHNvbHZlIHRoZSBzeXN0ZW0gb2YgZXF1YXRpb25zIEEgKiBYID0gQi4KKgoq\nICBBcmd1bWVudHMKKiAgPT09PT09PT09CioKKiAgVVBMTyAgICAoaW5wdXQpIENIQVJBQ1RFUiox\nCiogICAgICAgICAgPSAnVSc6ICBVcHBlciB0cmlhbmdsZSBvZiBBIGlzIHN0b3JlZDsKKiAgICAg\nICAgICA9ICdMJzogIExvd2VyIHRyaWFuZ2xlIG9mIEEgaXMgc3RvcmVkLgoqCiogIE4gICAgICAg\nKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG51bWJlciBvZiBsaW5lYXIgZXF1YXRpb25z\nLCBpLmUuLCB0aGUgb3JkZXIgb2YgdGhlCiogICAgICAgICAgbWF0cml4IEEuICBOID49IDAuCioK\nKiAgTlJIUyAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbnVtYmVyIG9mIHJpZ2h0\nIGhhbmQgc2lkZXMsIGkuZS4sIHRoZSBudW1iZXIgb2YgY29sdW1ucwoqICAgICAgICAgIG9mIHRo\nZSBtYXRyaXggQi4gIE5SSFMgPj0gMC4KKgoqICBBICAgICAgIChpbnB1dC9vdXRwdXQpIERPVUJM\nRSBQUkVDSVNJT04gYXJyYXksIGRpbWVuc2lvbiAoTERBLE4pCiogICAgICAgICAgT24gZW50cnks\nIHRoZSBzeW1tZXRyaWMgbWF0cml4IEEuICBJZiBVUExPID0gJ1UnLCB0aGUgbGVhZGluZwoqICAg\nICAgICAgIE4tYnktTiB1cHBlciB0cmlhbmd1bGFyIHBhcnQgb2YgQSBjb250YWlucyB0aGUgdXBw\nZXIKKiAgICAgICAgICB0cmlhbmd1bGFyIHBhcnQgb2YgdGhlIG1hdHJpeCBBLCBhbmQgdGhlIHN0\ncmljdGx5IGxvd2VyCiogICAgICAgICAgdHJpYW5ndWxhciBwYXJ0IG9mIEEgaXMgbm90IHJlZmVy\nZW5jZWQuICBJZiBVUExPID0gJ0wnLCB0aGUKKiAgICAgICAgICBsZWFkaW5nIE4tYnktTiBsb3dl\nciB0cmlhbmd1bGFyIHBhcnQgb2YgQSBjb250YWlucyB0aGUgbG93ZXIKKiAgICAgICAgICB0cmlh\nbmd1bGFyIHBhcnQgb2YgdGhlIG1hdHJpeCBBLCBhbmQgdGhlIHN0cmljdGx5IHVwcGVyCiogICAg\nICAgICAgdHJpYW5ndWxhciBwYXJ0IG9mIEEgaXMgbm90IHJlZmVyZW5jZWQuCioKKiAgICAgICAg\nICBPbiBleGl0LCBpZiBJTkZPID0gMCwgdGhlIGJsb2NrIGRpYWdvbmFsIG1hdHJpeCBEIGFuZCB0\naGUKKiAgICAgICAgICBtdWx0aXBsaWVycyB1c2VkIHRvIG9idGFpbiB0aGUgZmFjdG9yIFUgb3Ig\nTCBmcm9tIHRoZQoqICAgICAgICAgIGZhY3Rvcml6YXRpb24gQSA9IFUqRCpVKipUIG9yIEEgPSBM\nKkQqTCoqVCBhcyBjb21wdXRlZCBieQoqICAgICAgICAgIERTWVRSRi4KKgoqICBMREEgICAgIChp\nbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBsZWFkaW5nIGRpbWVuc2lvbiBvZiB0aGUgYXJy\nYXkgQS4gIExEQSA+PSBtYXgoMSxOKS4KKgoqICBJUElWICAgIChvdXRwdXQpIElOVEVHRVIgYXJy\nYXksIGRpbWVuc2lvbiAoTikKKiAgICAgICAgICBEZXRhaWxzIG9mIHRoZSBpbnRlcmNoYW5nZXMg\nYW5kIHRoZSBibG9jayBzdHJ1Y3R1cmUgb2YgRCwgYXMKKiAgICAgICAgICBkZXRlcm1pbmVkIGJ5\nIERTWVRSRi4gIElmIElQSVYoaykgPiAwLCB0aGVuIHJvd3MgYW5kIGNvbHVtbnMKKiAgICAgICAg\nICBrIGFuZCBJUElWKGspIHdlcmUgaW50ZXJjaGFuZ2VkLCBhbmQgRChrLGspIGlzIGEgMS1ieS0x\nCiogICAgICAgICAgZGlhZ29uYWwgYmxvY2suICBJZiBVUExPID0gJ1UnIGFuZCBJUElWKGspID0g\nSVBJVihrLTEpIDwgMCwKKiAgICAgICAgICB0aGVuIHJvd3MgYW5kIGNvbHVtbnMgay0xIGFuZCAt\nSVBJVihrKSB3ZXJlIGludGVyY2hhbmdlZCBhbmQKKiAgICAgICAgICBEKGstMTprLGstMTprKSBp\ncyBhIDItYnktMiBkaWFnb25hbCBibG9jay4gIElmIFVQTE8gPSAnTCcgYW5kCiogICAgICAgICAg\nSVBJVihrKSA9IElQSVYoaysxKSA8IDAsIHRoZW4gcm93cyBhbmQgY29sdW1ucyBrKzEgYW5kCiog\nICAgICAgICAgLUlQSVYoaykgd2VyZSBpbnRlcmNoYW5nZWQgYW5kIEQoazprKzEsazprKzEpIGlz\nIGEgMi1ieS0yCiogICAgICAgICAgZGlhZ29uYWwgYmxvY2suCioKKiAgQiAgICAgICAoaW5wdXQv\nb3V0cHV0KSBET1VCTEUgUFJFQ0lTSU9OIGFycmF5LCBkaW1lbnNpb24gKExEQixOUkhTKQoqICAg\nICAgICAgIE9uIGVudHJ5LCB0aGUgTi1ieS1OUkhTIHJpZ2h0IGhhbmQgc2lkZSBtYXRyaXggQi4K\nKiAgICAgICAgICBPbiBleGl0LCBpZiBJTkZPID0gMCwgdGhlIE4tYnktTlJIUyBzb2x1dGlvbiBt\nYXRyaXggWC4KKgoqICBMREIgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBsZWFk\naW5nIGRpbWVuc2lvbiBvZiB0aGUgYXJyYXkgQi4gIExEQiA+PSBtYXgoMSxOKS4KKgoqICBXT1JL\nICAgICh3b3Jrc3BhY2Uvb3V0cHV0KSBET1VCTEUgUFJFQ0lTSU9OIGFycmF5LCBkaW1lbnNpb24g\nKE1BWCgxLExXT1JLKSkKKiAgICAgICAgICBPbiBleGl0LCBpZiBJTkZPID0gMCwgV09SSygxKSBy\nZXR1cm5zIHRoZSBvcHRpbWFsIExXT1JLLgoqCiogIExXT1JLICAgKGlucHV0KSBJTlRFR0VSCiog\nICAgICAgICAgVGhlIGxlbmd0aCBvZiBXT1JLLiAgTFdPUksgPj0gMSwgYW5kIGZvciBiZXN0IHBl\ncmZvcm1hbmNlCiogICAgICAgICAgTFdPUksgPj0gbWF4KDEsTipOQiksIHdoZXJlIE5CIGlzIHRo\nZSBvcHRpbWFsIGJsb2Nrc2l6ZSBmb3IKKiAgICAgICAgICBEU1lUUkYuCiogICAgICAgICAgZm9y\nIExXT1JLIDwgTiwgVFJTIHdpbGwgYmUgZG9uZSB3aXRoIExldmVsIEJMQVMgMgoqICAgICAgICAg\nIGZvciBMV09SSyA+PSBOLCBUUlMgd2lsbCBiZSBkb25lIHdpdGggTGV2ZWwgQkxBUyAzCioKKiAg\nICAgICAgICBJZiBMV09SSyA9IC0xLCB0aGVuIGEgd29ya3NwYWNlIHF1ZXJ5IGlzIGFzc3VtZWQ7\nIHRoZSByb3V0aW5lCiogICAgICAgICAgb25seSBjYWxjdWxhdGVzIHRoZSBvcHRpbWFsIHNpemUg\nb2YgdGhlIFdPUksgYXJyYXksIHJldHVybnMKKiAgICAgICAgICB0aGlzIHZhbHVlIGFzIHRoZSBm\naXJzdCBlbnRyeSBvZiB0aGUgV09SSyBhcnJheSwgYW5kIG5vIGVycm9yCiogICAgICAgICAgbWVz\nc2FnZSByZWxhdGVkIHRvIExXT1JLIGlzIGlzc3VlZCBieSBYRVJCTEEuCioKKiAgSU5GTyAgICAo\nb3V0cHV0KSBJTlRFR0VSCiogICAgICAgICAgPSAwOiBzdWNjZXNzZnVsIGV4aXQKKiAgICAgICAg\nICA8IDA6IGlmIElORk8gPSAtaSwgdGhlIGktdGggYXJndW1lbnQgaGFkIGFuIGlsbGVnYWwgdmFs\ndWUKKiAgICAgICAgICA+IDA6IGlmIElORk8gPSBpLCBEKGksaSkgaXMgZXhhY3RseSB6ZXJvLiAg\nVGhlIGZhY3Rvcml6YXRpb24KKiAgICAgICAgICAgICAgIGhhcyBiZWVuIGNvbXBsZXRlZCwgYnV0\nIHRoZSBibG9jayBkaWFnb25hbCBtYXRyaXggRCBpcwoqICAgICAgICAgICAgICAgZXhhY3RseSBz\naW5ndWxhciwgc28gdGhlIHNvbHV0aW9uIGNvdWxkIG5vdCBiZSBjb21wdXRlZC4KKgpyiAIAAGiG\naIcpgXKJAgAAfXKKAgAAKGiKiWiLaIx1YmiYigEiaJlYDAAAAGRzeXN2XzM0LnR4dHKLAgAAdWJo\nm4oBImicWAQAAABzeXN2cowCAABomIoBInViaH1oYV1ofodSco0CAAB9co4CAAAoaIFYCQAAAHN5\nbW1ldHJpY3KPAgAAaINYBAAAAGZ1bGxykAIAAGhxWCEAAABkcml2ZXIgc2ltcGxlLCBzb2x2ZSBB\nKlggPSBCIG9ubHlykQIAAGiGaIcpgXKSAgAAfXKTAgAAKGiKiWiLaIx1YmiNWCwAAABodHRwOi8v\nd3d3Lm5ldGxpYi5vcmcvbGFwYWNrL2NvbXBsZXgvY3N5c3YuZnKUAgAAaI9YAQAAAGNokGh9aJFd\naH6HUnKVAgAAfXKWAgAAKGiUWKYRAAAgICAgICBTVUJST1VUSU5FIENTWVNWKCBVUExPLCBOLCBO\nUkhTLCBBLCBMREEsIElQSVYsIEIsIExEQiwgV09SSywKICAgICAkICAgICAgICAgICAgICAgICAg\nTFdPUkssIElORk8gKQoqCiogIC0tIExBUEFDSyBkcml2ZXIgcm91dGluZSAodmVyc2lvbiAzLjMu\nMSkgLS0KKiAgLS0gTEFQQUNLIGlzIGEgc29mdHdhcmUgcGFja2FnZSBwcm92aWRlZCBieSBVbml2\nLiBvZiBUZW5uZXNzZWUsICAgIC0tCiogIC0tIFVuaXYuIG9mIENhbGlmb3JuaWEgQmVya2VsZXks\nIFVuaXYuIG9mIENvbG9yYWRvIERlbnZlciBhbmQgTkFHIEx0ZC4uLS0KKiAgLS0gQXByaWwgMjAx\nMSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0t\nCiogQGdlbmVyYXRlZCBjCioKKiAgICAgLi4gU2NhbGFyIEFyZ3VtZW50cyAuLgogICAgICBDSEFS\nQUNURVIgICAgICAgICAgVVBMTwogICAgICBJTlRFR0VSICAgICAgICAgICAgSU5GTywgTERBLCBM\nREIsIExXT1JLLCBOLCBOUkhTCiogICAgIC4uCiogICAgIC4uIEFycmF5IEFyZ3VtZW50cyAuLgog\nICAgICBJTlRFR0VSICAgICAgICAgICAgSVBJViggKiApCiAgICAgIENPTVBMRVggICAgICAgICAg\nICBBKCBMREEsICogKSwgQiggTERCLCAqICksIFdPUksoICogKQoqICAgICAuLgoqCiogIFB1cnBv\nc2UKKiAgPT09PT09PQoqCiogIENTWVNWIGNvbXB1dGVzIHRoZSBzb2x1dGlvbiB0byBhIGNvbXBs\nZXggc3lzdGVtIG9mIGxpbmVhciBlcXVhdGlvbnMKKiAgICAgQSAqIFggPSBCLAoqICB3aGVyZSBB\nIGlzIGFuIE4tYnktTiBzeW1tZXRyaWMgbWF0cml4IGFuZCBYIGFuZCBCIGFyZSBOLWJ5LU5SSFMK\nKiAgbWF0cmljZXMuCioKKiAgVGhlIGRpYWdvbmFsIHBpdm90aW5nIG1ldGhvZCBpcyB1c2VkIHRv\nIGZhY3RvciBBIGFzCiogICAgIEEgPSBVICogRCAqIFUqKlQsICBpZiBVUExPID0gJ1UnLCBvcgoq\nICAgICBBID0gTCAqIEQgKiBMKipULCAgaWYgVVBMTyA9ICdMJywKKiAgd2hlcmUgVSAob3IgTCkg\naXMgYSBwcm9kdWN0IG9mIHBlcm11dGF0aW9uIGFuZCB1bml0IHVwcGVyIChsb3dlcikKKiAgdHJp\nYW5ndWxhciBtYXRyaWNlcywgYW5kIEQgaXMgc3ltbWV0cmljIGFuZCBibG9jayBkaWFnb25hbCB3\naXRoCiogIDEtYnktMSBhbmQgMi1ieS0yIGRpYWdvbmFsIGJsb2Nrcy4gIFRoZSBmYWN0b3JlZCBm\nb3JtIG9mIEEgaXMgdGhlbgoqICB1c2VkIHRvIHNvbHZlIHRoZSBzeXN0ZW0gb2YgZXF1YXRpb25z\nIEEgKiBYID0gQi4KKgoqICBBcmd1bWVudHMKKiAgPT09PT09PT09CioKKiAgVVBMTyAgICAoaW5w\ndXQpIENIQVJBQ1RFUioxCiogICAgICAgICAgPSAnVSc6ICBVcHBlciB0cmlhbmdsZSBvZiBBIGlz\nIHN0b3JlZDsKKiAgICAgICAgICA9ICdMJzogIExvd2VyIHRyaWFuZ2xlIG9mIEEgaXMgc3RvcmVk\nLgoqCiogIE4gICAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG51bWJlciBvZiBs\naW5lYXIgZXF1YXRpb25zLCBpLmUuLCB0aGUgb3JkZXIgb2YgdGhlCiogICAgICAgICAgbWF0cml4\nIEEuICBOID49IDAuCioKKiAgTlJIUyAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUg\nbnVtYmVyIG9mIHJpZ2h0IGhhbmQgc2lkZXMsIGkuZS4sIHRoZSBudW1iZXIgb2YgY29sdW1ucwoq\nICAgICAgICAgIG9mIHRoZSBtYXRyaXggQi4gIE5SSFMgPj0gMC4KKgoqICBBICAgICAgIChpbnB1\ndC9vdXRwdXQpIENPTVBMRVggYXJyYXksIGRpbWVuc2lvbiAoTERBLE4pCiogICAgICAgICAgT24g\nZW50cnksIHRoZSBzeW1tZXRyaWMgbWF0cml4IEEuICBJZiBVUExPID0gJ1UnLCB0aGUgbGVhZGlu\nZwoqICAgICAgICAgIE4tYnktTiB1cHBlciB0cmlhbmd1bGFyIHBhcnQgb2YgQSBjb250YWlucyB0\naGUgdXBwZXIKKiAgICAgICAgICB0cmlhbmd1bGFyIHBhcnQgb2YgdGhlIG1hdHJpeCBBLCBhbmQg\ndGhlIHN0cmljdGx5IGxvd2VyCiogICAgICAgICAgdHJpYW5ndWxhciBwYXJ0IG9mIEEgaXMgbm90\nIHJlZmVyZW5jZWQuICBJZiBVUExPID0gJ0wnLCB0aGUKKiAgICAgICAgICBsZWFkaW5nIE4tYnkt\nTiBsb3dlciB0cmlhbmd1bGFyIHBhcnQgb2YgQSBjb250YWlucyB0aGUgbG93ZXIKKiAgICAgICAg\nICB0cmlhbmd1bGFyIHBhcnQgb2YgdGhlIG1hdHJpeCBBLCBhbmQgdGhlIHN0cmljdGx5IHVwcGVy\nCiogICAgICAgICAgdHJpYW5ndWxhciBwYXJ0IG9mIEEgaXMgbm90IHJlZmVyZW5jZWQuCioKKiAg\nICAgICAgICBPbiBleGl0LCBpZiBJTkZPID0gMCwgdGhlIGJsb2NrIGRpYWdvbmFsIG1hdHJpeCBE\nIGFuZCB0aGUKKiAgICAgICAgICBtdWx0aXBsaWVycyB1c2VkIHRvIG9idGFpbiB0aGUgZmFjdG9y\nIFUgb3IgTCBmcm9tIHRoZQoqICAgICAgICAgIGZhY3Rvcml6YXRpb24gQSA9IFUqRCpVKipUIG9y\nIEEgPSBMKkQqTCoqVCBhcyBjb21wdXRlZCBieQoqICAgICAgICAgIENTWVRSRi4KKgoqICBMREEg\nICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBsZWFkaW5nIGRpbWVuc2lvbiBvZiB0\naGUgYXJyYXkgQS4gIExEQSA+PSBtYXgoMSxOKS4KKgoqICBJUElWICAgIChvdXRwdXQpIElOVEVH\nRVIgYXJyYXksIGRpbWVuc2lvbiAoTikKKiAgICAgICAgICBEZXRhaWxzIG9mIHRoZSBpbnRlcmNo\nYW5nZXMgYW5kIHRoZSBibG9jayBzdHJ1Y3R1cmUgb2YgRCwgYXMKKiAgICAgICAgICBkZXRlcm1p\nbmVkIGJ5IENTWVRSRi4gIElmIElQSVYoaykgPiAwLCB0aGVuIHJvd3MgYW5kIGNvbHVtbnMKKiAg\nICAgICAgICBrIGFuZCBJUElWKGspIHdlcmUgaW50ZXJjaGFuZ2VkLCBhbmQgRChrLGspIGlzIGEg\nMS1ieS0xCiogICAgICAgICAgZGlhZ29uYWwgYmxvY2suICBJZiBVUExPID0gJ1UnIGFuZCBJUElW\nKGspID0gSVBJVihrLTEpIDwgMCwKKiAgICAgICAgICB0aGVuIHJvd3MgYW5kIGNvbHVtbnMgay0x\nIGFuZCAtSVBJVihrKSB3ZXJlIGludGVyY2hhbmdlZCBhbmQKKiAgICAgICAgICBEKGstMTprLGst\nMTprKSBpcyBhIDItYnktMiBkaWFnb25hbCBibG9jay4gIElmIFVQTE8gPSAnTCcgYW5kCiogICAg\nICAgICAgSVBJVihrKSA9IElQSVYoaysxKSA8IDAsIHRoZW4gcm93cyBhbmQgY29sdW1ucyBrKzEg\nYW5kCiogICAgICAgICAgLUlQSVYoaykgd2VyZSBpbnRlcmNoYW5nZWQgYW5kIEQoazprKzEsazpr\nKzEpIGlzIGEgMi1ieS0yCiogICAgICAgICAgZGlhZ29uYWwgYmxvY2suCioKKiAgQiAgICAgICAo\naW5wdXQvb3V0cHV0KSBDT01QTEVYIGFycmF5LCBkaW1lbnNpb24gKExEQixOUkhTKQoqICAgICAg\nICAgIE9uIGVudHJ5LCB0aGUgTi1ieS1OUkhTIHJpZ2h0IGhhbmQgc2lkZSBtYXRyaXggQi4KKiAg\nICAgICAgICBPbiBleGl0LCBpZiBJTkZPID0gMCwgdGhlIE4tYnktTlJIUyBzb2x1dGlvbiBtYXRy\naXggWC4KKgoqICBMREIgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBsZWFkaW5n\nIGRpbWVuc2lvbiBvZiB0aGUgYXJyYXkgQi4gIExEQiA+PSBtYXgoMSxOKS4KKgoqICBXT1JLICAg\nICh3b3Jrc3BhY2Uvb3V0cHV0KSBDT01QTEVYIGFycmF5LCBkaW1lbnNpb24gKE1BWCgxLExXT1JL\nKSkKKiAgICAgICAgICBPbiBleGl0LCBpZiBJTkZPID0gMCwgV09SSygxKSByZXR1cm5zIHRoZSBv\ncHRpbWFsIExXT1JLLgoqCiogIExXT1JLICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhl\nIGxlbmd0aCBvZiBXT1JLLiAgTFdPUksgPj0gMSwgYW5kIGZvciBiZXN0IHBlcmZvcm1hbmNlCiog\nICAgICAgICAgTFdPUksgPj0gbWF4KDEsTipOQiksIHdoZXJlIE5CIGlzIHRoZSBvcHRpbWFsIGJs\nb2Nrc2l6ZSBmb3IKKiAgICAgICAgICBDU1lUUkYuCiogICAgICAgICAgZm9yIExXT1JLIDwgTiwg\nVFJTIHdpbGwgYmUgZG9uZSB3aXRoIExldmVsIEJMQVMgMgoqICAgICAgICAgIGZvciBMV09SSyA+\nPSBOLCBUUlMgd2lsbCBiZSBkb25lIHdpdGggTGV2ZWwgQkxBUyAzCioKKiAgICAgICAgICBJZiBM\nV09SSyA9IC0xLCB0aGVuIGEgd29ya3NwYWNlIHF1ZXJ5IGlzIGFzc3VtZWQ7IHRoZSByb3V0aW5l\nCiogICAgICAgICAgb25seSBjYWxjdWxhdGVzIHRoZSBvcHRpbWFsIHNpemUgb2YgdGhlIFdPUksg\nYXJyYXksIHJldHVybnMKKiAgICAgICAgICB0aGlzIHZhbHVlIGFzIHRoZSBmaXJzdCBlbnRyeSBv\nZiB0aGUgV09SSyBhcnJheSwgYW5kIG5vIGVycm9yCiogICAgICAgICAgbWVzc2FnZSByZWxhdGVk\nIHRvIExXT1JLIGlzIGlzc3VlZCBieSBYRVJCTEEuCioKKiAgSU5GTyAgICAob3V0cHV0KSBJTlRF\nR0VSCiogICAgICAgICAgPSAwOiBzdWNjZXNzZnVsIGV4aXQKKiAgICAgICAgICA8IDA6IGlmIElO\nRk8gPSAtaSwgdGhlIGktdGggYXJndW1lbnQgaGFkIGFuIGlsbGVnYWwgdmFsdWUKKiAgICAgICAg\nICA+IDA6IGlmIElORk8gPSBpLCBEKGksaSkgaXMgZXhhY3RseSB6ZXJvLiAgVGhlIGZhY3Rvcml6\nYXRpb24KKiAgICAgICAgICAgICAgIGhhcyBiZWVuIGNvbXBsZXRlZCwgYnV0IHRoZSBibG9jayBk\naWFnb25hbCBtYXRyaXggRCBpcwoqICAgICAgICAgICAgICAgZXhhY3RseSBzaW5ndWxhciwgc28g\ndGhlIHNvbHV0aW9uIGNvdWxkIG5vdCBiZSBjb21wdXRlZC4KKgpylwIAAGiGaIcpgXKYAgAAfXKZ\nAgAAKGiKiWiLaIx1YmiYigEjaJlYDAAAAGNzeXN2XzM1LnR4dHKaAgAAdWJom4oBI2icWAQAAABz\neXN2cpsCAABomIoBI3ViaH1oYV1ofodScpwCAAB9cp0CAAAoaIFYCQAAAHN5bW1ldHJpY3KeAgAA\naINYBAAAAGZ1bGxynwIAAGhxWCEAAABkcml2ZXIgc2ltcGxlLCBzb2x2ZSBBKlggPSBCIG9ubHly\noAIAAGiGaIcpgXKhAgAAfXKiAgAAKGiKiWiLaIx1YmiNWC4AAABodHRwOi8vd3d3Lm5ldGxpYi5v\ncmcvbGFwYWNrL2NvbXBsZXgxNi96c3lzdi5mcqMCAABoj1gBAAAAemiQaH1okV1ofodScqQCAAB9\ncqUCAAAoaJRYwBEAACAgICAgIFNVQlJPVVRJTkUgWlNZU1YoIFVQTE8sIE4sIE5SSFMsIEEsIExE\nQSwgSVBJViwgQiwgTERCLCBXT1JLLAogICAgICQgICAgICAgICAgICAgICAgICBMV09SSywgSU5G\nTyApCioKKiAgLS0gTEFQQUNLIGRyaXZlciByb3V0aW5lICh2ZXJzaW9uIDMuMy4xKSAtLQoqICAt\nLSBMQVBBQ0sgaXMgYSBzb2Z0d2FyZSBwYWNrYWdlIHByb3ZpZGVkIGJ5IFVuaXYuIG9mIFRlbm5l\nc3NlZSwgICAgLS0KKiAgLS0gVW5pdi4gb2YgQ2FsaWZvcm5pYSBCZXJrZWxleSwgVW5pdi4gb2Yg\nQ29sb3JhZG8gRGVudmVyIGFuZCBOQUcgTHRkLi4tLQoqICAtLSBBcHJpbCAyMDExICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0KKiBAcHJlY2lz\naW9ucyBub3JtYWwgeiAtPiBzIGQgYwoqCiogICAgIC4uIFNjYWxhciBBcmd1bWVudHMgLi4KICAg\nICAgQ0hBUkFDVEVSICAgICAgICAgIFVQTE8KICAgICAgSU5URUdFUiAgICAgICAgICAgIElORk8s\nIExEQSwgTERCLCBMV09SSywgTiwgTlJIUwoqICAgICAuLgoqICAgICAuLiBBcnJheSBBcmd1bWVu\ndHMgLi4KICAgICAgSU5URUdFUiAgICAgICAgICAgIElQSVYoICogKQogICAgICBDT01QTEVYKjE2\nICAgICAgICAgQSggTERBLCAqICksIEIoIExEQiwgKiApLCBXT1JLKCAqICkKKiAgICAgLi4KKgoq\nICBQdXJwb3NlCiogID09PT09PT0KKgoqICBaU1lTViBjb21wdXRlcyB0aGUgc29sdXRpb24gdG8g\nYSBjb21wbGV4IHN5c3RlbSBvZiBsaW5lYXIgZXF1YXRpb25zCiogICAgIEEgKiBYID0gQiwKKiAg\nd2hlcmUgQSBpcyBhbiBOLWJ5LU4gc3ltbWV0cmljIG1hdHJpeCBhbmQgWCBhbmQgQiBhcmUgTi1i\neS1OUkhTCiogIG1hdHJpY2VzLgoqCiogIFRoZSBkaWFnb25hbCBwaXZvdGluZyBtZXRob2QgaXMg\ndXNlZCB0byBmYWN0b3IgQSBhcwoqICAgICBBID0gVSAqIEQgKiBVKipULCAgaWYgVVBMTyA9ICdV\nJywgb3IKKiAgICAgQSA9IEwgKiBEICogTCoqVCwgIGlmIFVQTE8gPSAnTCcsCiogIHdoZXJlIFUg\nKG9yIEwpIGlzIGEgcHJvZHVjdCBvZiBwZXJtdXRhdGlvbiBhbmQgdW5pdCB1cHBlciAobG93ZXIp\nCiogIHRyaWFuZ3VsYXIgbWF0cmljZXMsIGFuZCBEIGlzIHN5bW1ldHJpYyBhbmQgYmxvY2sgZGlh\nZ29uYWwgd2l0aAoqICAxLWJ5LTEgYW5kIDItYnktMiBkaWFnb25hbCBibG9ja3MuICBUaGUgZmFj\ndG9yZWQgZm9ybSBvZiBBIGlzIHRoZW4KKiAgdXNlZCB0byBzb2x2ZSB0aGUgc3lzdGVtIG9mIGVx\ndWF0aW9ucyBBICogWCA9IEIuCioKKiAgQXJndW1lbnRzCiogID09PT09PT09PQoqCiogIFVQTE8g\nICAgKGlucHV0KSBDSEFSQUNURVIqMQoqICAgICAgICAgID0gJ1UnOiAgVXBwZXIgdHJpYW5nbGUg\nb2YgQSBpcyBzdG9yZWQ7CiogICAgICAgICAgPSAnTCc6ICBMb3dlciB0cmlhbmdsZSBvZiBBIGlz\nIHN0b3JlZC4KKgoqICBOICAgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBudW1i\nZXIgb2YgbGluZWFyIGVxdWF0aW9ucywgaS5lLiwgdGhlIG9yZGVyIG9mIHRoZQoqICAgICAgICAg\nIG1hdHJpeCBBLiAgTiA+PSAwLgoqCiogIE5SSFMgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAg\nICAgVGhlIG51bWJlciBvZiByaWdodCBoYW5kIHNpZGVzLCBpLmUuLCB0aGUgbnVtYmVyIG9mIGNv\nbHVtbnMKKiAgICAgICAgICBvZiB0aGUgbWF0cml4IEIuICBOUkhTID49IDAuCioKKiAgQSAgICAg\nICAoaW5wdXQvb3V0cHV0KSBDT01QTEVYKjE2IGFycmF5LCBkaW1lbnNpb24gKExEQSxOKQoqICAg\nICAgICAgIE9uIGVudHJ5LCB0aGUgc3ltbWV0cmljIG1hdHJpeCBBLiAgSWYgVVBMTyA9ICdVJywg\ndGhlIGxlYWRpbmcKKiAgICAgICAgICBOLWJ5LU4gdXBwZXIgdHJpYW5ndWxhciBwYXJ0IG9mIEEg\nY29udGFpbnMgdGhlIHVwcGVyCiogICAgICAgICAgdHJpYW5ndWxhciBwYXJ0IG9mIHRoZSBtYXRy\naXggQSwgYW5kIHRoZSBzdHJpY3RseSBsb3dlcgoqICAgICAgICAgIHRyaWFuZ3VsYXIgcGFydCBv\nZiBBIGlzIG5vdCByZWZlcmVuY2VkLiAgSWYgVVBMTyA9ICdMJywgdGhlCiogICAgICAgICAgbGVh\nZGluZyBOLWJ5LU4gbG93ZXIgdHJpYW5ndWxhciBwYXJ0IG9mIEEgY29udGFpbnMgdGhlIGxvd2Vy\nCiogICAgICAgICAgdHJpYW5ndWxhciBwYXJ0IG9mIHRoZSBtYXRyaXggQSwgYW5kIHRoZSBzdHJp\nY3RseSB1cHBlcgoqICAgICAgICAgIHRyaWFuZ3VsYXIgcGFydCBvZiBBIGlzIG5vdCByZWZlcmVu\nY2VkLgoqCiogICAgICAgICAgT24gZXhpdCwgaWYgSU5GTyA9IDAsIHRoZSBibG9jayBkaWFnb25h\nbCBtYXRyaXggRCBhbmQgdGhlCiogICAgICAgICAgbXVsdGlwbGllcnMgdXNlZCB0byBvYnRhaW4g\ndGhlIGZhY3RvciBVIG9yIEwgZnJvbSB0aGUKKiAgICAgICAgICBmYWN0b3JpemF0aW9uIEEgPSBV\nKkQqVSoqVCBvciBBID0gTCpEKkwqKlQgYXMgY29tcHV0ZWQgYnkKKiAgICAgICAgICBaU1lUUkYu\nCioKKiAgTERBICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbGVhZGluZyBkaW1l\nbnNpb24gb2YgdGhlIGFycmF5IEEuICBMREEgPj0gbWF4KDEsTikuCioKKiAgSVBJViAgICAob3V0\ncHV0KSBJTlRFR0VSIGFycmF5LCBkaW1lbnNpb24gKE4pCiogICAgICAgICAgRGV0YWlscyBvZiB0\naGUgaW50ZXJjaGFuZ2VzIGFuZCB0aGUgYmxvY2sgc3RydWN0dXJlIG9mIEQsIGFzCiogICAgICAg\nICAgZGV0ZXJtaW5lZCBieSBaU1lUUkYuICBJZiBJUElWKGspID4gMCwgdGhlbiByb3dzIGFuZCBj\nb2x1bW5zCiogICAgICAgICAgayBhbmQgSVBJVihrKSB3ZXJlIGludGVyY2hhbmdlZCwgYW5kIEQo\nayxrKSBpcyBhIDEtYnktMQoqICAgICAgICAgIGRpYWdvbmFsIGJsb2NrLiAgSWYgVVBMTyA9ICdV\nJyBhbmQgSVBJVihrKSA9IElQSVYoay0xKSA8IDAsCiogICAgICAgICAgdGhlbiByb3dzIGFuZCBj\nb2x1bW5zIGstMSBhbmQgLUlQSVYoaykgd2VyZSBpbnRlcmNoYW5nZWQgYW5kCiogICAgICAgICAg\nRChrLTE6ayxrLTE6aykgaXMgYSAyLWJ5LTIgZGlhZ29uYWwgYmxvY2suICBJZiBVUExPID0gJ0wn\nIGFuZAoqICAgICAgICAgIElQSVYoaykgPSBJUElWKGsrMSkgPCAwLCB0aGVuIHJvd3MgYW5kIGNv\nbHVtbnMgaysxIGFuZAoqICAgICAgICAgIC1JUElWKGspIHdlcmUgaW50ZXJjaGFuZ2VkIGFuZCBE\nKGs6aysxLGs6aysxKSBpcyBhIDItYnktMgoqICAgICAgICAgIGRpYWdvbmFsIGJsb2NrLgoqCiog\nIEIgICAgICAgKGlucHV0L291dHB1dCkgQ09NUExFWCoxNiBhcnJheSwgZGltZW5zaW9uIChMREIs\nTlJIUykKKiAgICAgICAgICBPbiBlbnRyeSwgdGhlIE4tYnktTlJIUyByaWdodCBoYW5kIHNpZGUg\nbWF0cml4IEIuCiogICAgICAgICAgT24gZXhpdCwgaWYgSU5GTyA9IDAsIHRoZSBOLWJ5LU5SSFMg\nc29sdXRpb24gbWF0cml4IFguCioKKiAgTERCICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAg\nICBUaGUgbGVhZGluZyBkaW1lbnNpb24gb2YgdGhlIGFycmF5IEIuICBMREIgPj0gbWF4KDEsTiku\nCioKKiAgV09SSyAgICAod29ya3NwYWNlL291dHB1dCkgQ09NUExFWCoxNiBhcnJheSwgZGltZW5z\naW9uIChNQVgoMSxMV09SSykpCiogICAgICAgICAgT24gZXhpdCwgaWYgSU5GTyA9IDAsIFdPUkso\nMSkgcmV0dXJucyB0aGUgb3B0aW1hbCBMV09SSy4KKgoqICBMV09SSyAgIChpbnB1dCkgSU5URUdF\nUgoqICAgICAgICAgIFRoZSBsZW5ndGggb2YgV09SSy4gIExXT1JLID49IDEsIGFuZCBmb3IgYmVz\ndCBwZXJmb3JtYW5jZQoqICAgICAgICAgIExXT1JLID49IG1heCgxLE4qTkIpLCB3aGVyZSBOQiBp\ncyB0aGUgb3B0aW1hbCBibG9ja3NpemUgZm9yCiogICAgICAgICAgWlNZVFJGLgoqICAgICAgICAg\nIGZvciBMV09SSyA8IE4sIFRSUyB3aWxsIGJlIGRvbmUgd2l0aCBMZXZlbCBCTEFTIDIKKiAgICAg\nICAgICBmb3IgTFdPUksgPj0gTiwgVFJTIHdpbGwgYmUgZG9uZSB3aXRoIExldmVsIEJMQVMgMwoq\nCiogICAgICAgICAgSWYgTFdPUksgPSAtMSwgdGhlbiBhIHdvcmtzcGFjZSBxdWVyeSBpcyBhc3N1\nbWVkOyB0aGUgcm91dGluZQoqICAgICAgICAgIG9ubHkgY2FsY3VsYXRlcyB0aGUgb3B0aW1hbCBz\naXplIG9mIHRoZSBXT1JLIGFycmF5LCByZXR1cm5zCiogICAgICAgICAgdGhpcyB2YWx1ZSBhcyB0\naGUgZmlyc3QgZW50cnkgb2YgdGhlIFdPUksgYXJyYXksIGFuZCBubyBlcnJvcgoqICAgICAgICAg\nIG1lc3NhZ2UgcmVsYXRlZCB0byBMV09SSyBpcyBpc3N1ZWQgYnkgWEVSQkxBLgoqCiogIElORk8g\nICAgKG91dHB1dCkgSU5URUdFUgoqICAgICAgICAgID0gMDogc3VjY2Vzc2Z1bCBleGl0CiogICAg\nICAgICAgPCAwOiBpZiBJTkZPID0gLWksIHRoZSBpLXRoIGFyZ3VtZW50IGhhZCBhbiBpbGxlZ2Fs\nIHZhbHVlCiogICAgICAgICAgPiAwOiBpZiBJTkZPID0gaSwgRChpLGkpIGlzIGV4YWN0bHkgemVy\nby4gIFRoZSBmYWN0b3JpemF0aW9uCiogICAgICAgICAgICAgICBoYXMgYmVlbiBjb21wbGV0ZWQs\nIGJ1dCB0aGUgYmxvY2sgZGlhZ29uYWwgbWF0cml4IEQgaXMKKiAgICAgICAgICAgICAgIGV4YWN0\nbHkgc2luZ3VsYXIsIHNvIHRoZSBzb2x1dGlvbiBjb3VsZCBub3QgYmUgY29tcHV0ZWQuCioKcqYC\nAABohmiHKYFypwIAAH1yqAIAAChoioloi2iMdWJomIoBJGiZWAwAAAB6c3lzdl8zNi50eHRyqQIA\nAHViaJuKASRonFgEAAAAc3lzdnKqAgAAaJiKASR1Ymh9aGFdaH6HUnKrAgAAfXKsAgAAKGiBWAkA\nAABzeW1tZXRyaWNyrQIAAGiDWAYAAABwYWNrZWRyrgIAAGhxWCEAAABkcml2ZXIgc2ltcGxlLCBz\nb2x2ZSBBKlggPSBCIG9ubHlyrwIAAGiGaIcpgXKwAgAAfXKxAgAAKGiKiWiLaIx1YmiNWCsAAABo\ndHRwOi8vd3d3Lm5ldGxpYi5vcmcvbGFwYWNrL3NpbmdsZS9zc3Bzdi5mcrICAABoj1gBAAAAc2iQ\naH1okV1ofodScrMCAAB9crQCAAAoaJRYHw4AACAgICAgIFNVQlJPVVRJTkUgU1NQU1YoIFVQTE8s\nIE4sIE5SSFMsIEFQLCBJUElWLCBCLCBMREIsIElORk8gKQoqCiogIC0tIExBUEFDSyBkcml2ZXIg\ncm91dGluZSAodmVyc2lvbiAzLjMuMSkgLS0KKiAgLS0gTEFQQUNLIGlzIGEgc29mdHdhcmUgcGFj\na2FnZSBwcm92aWRlZCBieSBVbml2LiBvZiBUZW5uZXNzZWUsICAgIC0tCiogIC0tIFVuaXYuIG9m\nIENhbGlmb3JuaWEgQmVya2VsZXksIFVuaXYuIG9mIENvbG9yYWRvIERlbnZlciBhbmQgTkFHIEx0\nZC4uLS0KKiAgLS0gQXByaWwgMjAxMSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgIC0tCioKKiAgICAgLi4gU2NhbGFyIEFyZ3VtZW50cyAuLgogICAg\nICBDSEFSQUNURVIgICAgICAgICAgVVBMTwogICAgICBJTlRFR0VSICAgICAgICAgICAgSU5GTywg\nTERCLCBOLCBOUkhTCiogICAgIC4uCiogICAgIC4uIEFycmF5IEFyZ3VtZW50cyAuLgogICAgICBJ\nTlRFR0VSICAgICAgICAgICAgSVBJViggKiApCiAgICAgIFJFQUwgICAgICAgICAgICAgICBBUCgg\nKiApLCBCKCBMREIsICogKQoqICAgICAuLgoqCiogIFB1cnBvc2UKKiAgPT09PT09PQoqCiogIFNT\nUFNWIGNvbXB1dGVzIHRoZSBzb2x1dGlvbiB0byBhIHJlYWwgc3lzdGVtIG9mIGxpbmVhciBlcXVh\ndGlvbnMKKiAgICAgQSAqIFggPSBCLAoqICB3aGVyZSBBIGlzIGFuIE4tYnktTiBzeW1tZXRyaWMg\nbWF0cml4IHN0b3JlZCBpbiBwYWNrZWQgZm9ybWF0IGFuZCBYCiogIGFuZCBCIGFyZSBOLWJ5LU5S\nSFMgbWF0cmljZXMuCioKKiAgVGhlIGRpYWdvbmFsIHBpdm90aW5nIG1ldGhvZCBpcyB1c2VkIHRv\nIGZhY3RvciBBIGFzCiogICAgIEEgPSBVICogRCAqIFUqKlQsICBpZiBVUExPID0gJ1UnLCBvcgoq\nICAgICBBID0gTCAqIEQgKiBMKipULCAgaWYgVVBMTyA9ICdMJywKKiAgd2hlcmUgVSAob3IgTCkg\naXMgYSBwcm9kdWN0IG9mIHBlcm11dGF0aW9uIGFuZCB1bml0IHVwcGVyIChsb3dlcikKKiAgdHJp\nYW5ndWxhciBtYXRyaWNlcywgRCBpcyBzeW1tZXRyaWMgYW5kIGJsb2NrIGRpYWdvbmFsIHdpdGgg\nMS1ieS0xCiogIGFuZCAyLWJ5LTIgZGlhZ29uYWwgYmxvY2tzLiAgVGhlIGZhY3RvcmVkIGZvcm0g\nb2YgQSBpcyB0aGVuIHVzZWQgdG8KKiAgc29sdmUgdGhlIHN5c3RlbSBvZiBlcXVhdGlvbnMgQSAq\nIFggPSBCLgoqCiogIEFyZ3VtZW50cwoqICA9PT09PT09PT0KKgoqICBVUExPICAgIChpbnB1dCkg\nQ0hBUkFDVEVSKjEKKiAgICAgICAgICA9ICdVJzogIFVwcGVyIHRyaWFuZ2xlIG9mIEEgaXMgc3Rv\ncmVkOwoqICAgICAgICAgID0gJ0wnOiAgTG93ZXIgdHJpYW5nbGUgb2YgQSBpcyBzdG9yZWQuCioK\nKiAgTiAgICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbnVtYmVyIG9mIGxpbmVh\nciBlcXVhdGlvbnMsIGkuZS4sIHRoZSBvcmRlciBvZiB0aGUKKiAgICAgICAgICBtYXRyaXggQS4g\nIE4gPj0gMC4KKgoqICBOUkhTICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBudW1i\nZXIgb2YgcmlnaHQgaGFuZCBzaWRlcywgaS5lLiwgdGhlIG51bWJlciBvZiBjb2x1bW5zCiogICAg\nICAgICAgb2YgdGhlIG1hdHJpeCBCLiAgTlJIUyA+PSAwLgoqCiogIEFQICAgICAgKGlucHV0L291\ndHB1dCkgUkVBTCBhcnJheSwgZGltZW5zaW9uIChOKihOKzEpLzIpCiogICAgICAgICAgT24gZW50\ncnksIHRoZSB1cHBlciBvciBsb3dlciB0cmlhbmdsZSBvZiB0aGUgc3ltbWV0cmljIG1hdHJpeAoq\nICAgICAgICAgIEEsIHBhY2tlZCBjb2x1bW53aXNlIGluIGEgbGluZWFyIGFycmF5LiAgVGhlIGot\ndGggY29sdW1uIG9mIEEKKiAgICAgICAgICBpcyBzdG9yZWQgaW4gdGhlIGFycmF5IEFQIGFzIGZv\nbGxvd3M6CiogICAgICAgICAgaWYgVVBMTyA9ICdVJywgQVAoaSArIChqLTEpKmovMikgPSBBKGks\naikgZm9yIDE8PWk8PWo7CiogICAgICAgICAgaWYgVVBMTyA9ICdMJywgQVAoaSArIChqLTEpKigy\nbi1qKS8yKSA9IEEoaSxqKSBmb3Igajw9aTw9bi4KKiAgICAgICAgICBTZWUgYmVsb3cgZm9yIGZ1\ncnRoZXIgZGV0YWlscy4KKgoqICAgICAgICAgIE9uIGV4aXQsIHRoZSBibG9jayBkaWFnb25hbCBt\nYXRyaXggRCBhbmQgdGhlIG11bHRpcGxpZXJzIHVzZWQKKiAgICAgICAgICB0byBvYnRhaW4gdGhl\nIGZhY3RvciBVIG9yIEwgZnJvbSB0aGUgZmFjdG9yaXphdGlvbgoqICAgICAgICAgIEEgPSBVKkQq\nVSoqVCBvciBBID0gTCpEKkwqKlQgYXMgY29tcHV0ZWQgYnkgU1NQVFJGLCBzdG9yZWQgYXMKKiAg\nICAgICAgICBhIHBhY2tlZCB0cmlhbmd1bGFyIG1hdHJpeCBpbiB0aGUgc2FtZSBzdG9yYWdlIGZv\ncm1hdCBhcyBBLgoqCiogIElQSVYgICAgKG91dHB1dCkgSU5URUdFUiBhcnJheSwgZGltZW5zaW9u\nIChOKQoqICAgICAgICAgIERldGFpbHMgb2YgdGhlIGludGVyY2hhbmdlcyBhbmQgdGhlIGJsb2Nr\nIHN0cnVjdHVyZSBvZiBELCBhcwoqICAgICAgICAgIGRldGVybWluZWQgYnkgU1NQVFJGLiAgSWYg\nSVBJVihrKSA+IDAsIHRoZW4gcm93cyBhbmQgY29sdW1ucwoqICAgICAgICAgIGsgYW5kIElQSVYo\naykgd2VyZSBpbnRlcmNoYW5nZWQsIGFuZCBEKGssaykgaXMgYSAxLWJ5LTEKKiAgICAgICAgICBk\naWFnb25hbCBibG9jay4gIElmIFVQTE8gPSAnVScgYW5kIElQSVYoaykgPSBJUElWKGstMSkgPCAw\nLAoqICAgICAgICAgIHRoZW4gcm93cyBhbmQgY29sdW1ucyBrLTEgYW5kIC1JUElWKGspIHdlcmUg\naW50ZXJjaGFuZ2VkIGFuZAoqICAgICAgICAgIEQoay0xOmssay0xOmspIGlzIGEgMi1ieS0yIGRp\nYWdvbmFsIGJsb2NrLiAgSWYgVVBMTyA9ICdMJyBhbmQKKiAgICAgICAgICBJUElWKGspID0gSVBJ\nVihrKzEpIDwgMCwgdGhlbiByb3dzIGFuZCBjb2x1bW5zIGsrMSBhbmQKKiAgICAgICAgICAtSVBJ\nVihrKSB3ZXJlIGludGVyY2hhbmdlZCBhbmQgRChrOmsrMSxrOmsrMSkgaXMgYSAyLWJ5LTIKKiAg\nICAgICAgICBkaWFnb25hbCBibG9jay4KKgoqICBCICAgICAgIChpbnB1dC9vdXRwdXQpIFJFQUwg\nYXJyYXksIGRpbWVuc2lvbiAoTERCLE5SSFMpCiogICAgICAgICAgT24gZW50cnksIHRoZSBOLWJ5\nLU5SSFMgcmlnaHQgaGFuZCBzaWRlIG1hdHJpeCBCLgoqICAgICAgICAgIE9uIGV4aXQsIGlmIElO\nRk8gPSAwLCB0aGUgTi1ieS1OUkhTIHNvbHV0aW9uIG1hdHJpeCBYLgoqCiogIExEQiAgICAgKGlu\ncHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJh\neSBCLiAgTERCID49IG1heCgxLE4pLgoqCiogIElORk8gICAgKG91dHB1dCkgSU5URUdFUgoqICAg\nICAgICAgID0gMDogIHN1Y2Nlc3NmdWwgZXhpdAoqICAgICAgICAgIDwgMDogIGlmIElORk8gPSAt\naSwgdGhlIGktdGggYXJndW1lbnQgaGFkIGFuIGlsbGVnYWwgdmFsdWUKKiAgICAgICAgICA+IDA6\nICBpZiBJTkZPID0gaSwgRChpLGkpIGlzIGV4YWN0bHkgemVyby4gIFRoZSBmYWN0b3JpemF0aW9u\nCiogICAgICAgICAgICAgICAgaGFzIGJlZW4gY29tcGxldGVkLCBidXQgdGhlIGJsb2NrIGRpYWdv\nbmFsIG1hdHJpeCBEIGlzCiogICAgICAgICAgICAgICAgZXhhY3RseSBzaW5ndWxhciwgc28gdGhl\nIHNvbHV0aW9uIGNvdWxkIG5vdCBiZQoqICAgICAgICAgICAgICAgIGNvbXB1dGVkLgoqCnK1AgAA\naIZohymBcrYCAAB9crcCAAAoaIqJaItojHViaJiKASVomVgMAAAAc3Nwc3ZfMzcudHh0crgCAAB1\nYmibigElaJxYBAAAAHNwc3ZyuQIAAGiYigEldWJofWhhXWh+h1JyugIAAH1yuwIAAChogVgJAAAA\nc3ltbWV0cmljcrwCAABog1gGAAAAcGFja2Vkcr0CAABocVghAAAAZHJpdmVyIHNpbXBsZSwgc29s\ndmUgQSpYID0gQiBvbmx5cr4CAABohmiHKYFyvwIAAH1ywAIAAChoioloi2iMdWJojVgrAAAAaHR0\ncDovL3d3dy5uZXRsaWIub3JnL2xhcGFjay9kb3VibGUvZHNwc3YuZnLBAgAAaI9YAQAAAGRokGh9\naJFdaH6HUnLCAgAAfXLDAgAAKGiUWDcOAAAgICAgICBTVUJST1VUSU5FIERTUFNWKCBVUExPLCBO\nLCBOUkhTLCBBUCwgSVBJViwgQiwgTERCLCBJTkZPICkKKgoqICAtLSBMQVBBQ0sgZHJpdmVyIHJv\ndXRpbmUgKHZlcnNpb24gMy4zLjEpIC0tCiogIC0tIExBUEFDSyBpcyBhIHNvZnR3YXJlIHBhY2th\nZ2UgcHJvdmlkZWQgYnkgVW5pdi4gb2YgVGVubmVzc2VlLCAgICAtLQoqICAtLSBVbml2LiBvZiBD\nYWxpZm9ybmlhIEJlcmtlbGV5LCBVbml2LiBvZiBDb2xvcmFkbyBEZW52ZXIgYW5kIE5BRyBMdGQu\nLi0tCiogIC0tIEFwcmlsIDIwMTEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAtLQoqCiogICAgIC4uIFNjYWxhciBBcmd1bWVudHMgLi4KICAgICAg\nQ0hBUkFDVEVSICAgICAgICAgIFVQTE8KICAgICAgSU5URUdFUiAgICAgICAgICAgIElORk8sIExE\nQiwgTiwgTlJIUwoqICAgICAuLgoqICAgICAuLiBBcnJheSBBcmd1bWVudHMgLi4KICAgICAgSU5U\nRUdFUiAgICAgICAgICAgIElQSVYoICogKQogICAgICBET1VCTEUgUFJFQ0lTSU9OICAgQVAoICog\nKSwgQiggTERCLCAqICkKKiAgICAgLi4KKgoqICBQdXJwb3NlCiogID09PT09PT0KKgoqICBEU1BT\nViBjb21wdXRlcyB0aGUgc29sdXRpb24gdG8gYSByZWFsIHN5c3RlbSBvZiBsaW5lYXIgZXF1YXRp\nb25zCiogICAgIEEgKiBYID0gQiwKKiAgd2hlcmUgQSBpcyBhbiBOLWJ5LU4gc3ltbWV0cmljIG1h\ndHJpeCBzdG9yZWQgaW4gcGFja2VkIGZvcm1hdCBhbmQgWAoqICBhbmQgQiBhcmUgTi1ieS1OUkhT\nIG1hdHJpY2VzLgoqCiogIFRoZSBkaWFnb25hbCBwaXZvdGluZyBtZXRob2QgaXMgdXNlZCB0byBm\nYWN0b3IgQSBhcwoqICAgICBBID0gVSAqIEQgKiBVKipULCAgaWYgVVBMTyA9ICdVJywgb3IKKiAg\nICAgQSA9IEwgKiBEICogTCoqVCwgIGlmIFVQTE8gPSAnTCcsCiogIHdoZXJlIFUgKG9yIEwpIGlz\nIGEgcHJvZHVjdCBvZiBwZXJtdXRhdGlvbiBhbmQgdW5pdCB1cHBlciAobG93ZXIpCiogIHRyaWFu\nZ3VsYXIgbWF0cmljZXMsIEQgaXMgc3ltbWV0cmljIGFuZCBibG9jayBkaWFnb25hbCB3aXRoIDEt\nYnktMQoqICBhbmQgMi1ieS0yIGRpYWdvbmFsIGJsb2Nrcy4gIFRoZSBmYWN0b3JlZCBmb3JtIG9m\nIEEgaXMgdGhlbiB1c2VkIHRvCiogIHNvbHZlIHRoZSBzeXN0ZW0gb2YgZXF1YXRpb25zIEEgKiBY\nID0gQi4KKgoqICBBcmd1bWVudHMKKiAgPT09PT09PT09CioKKiAgVVBMTyAgICAoaW5wdXQpIENI\nQVJBQ1RFUioxCiogICAgICAgICAgPSAnVSc6ICBVcHBlciB0cmlhbmdsZSBvZiBBIGlzIHN0b3Jl\nZDsKKiAgICAgICAgICA9ICdMJzogIExvd2VyIHRyaWFuZ2xlIG9mIEEgaXMgc3RvcmVkLgoqCiog\nIE4gICAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG51bWJlciBvZiBsaW5lYXIg\nZXF1YXRpb25zLCBpLmUuLCB0aGUgb3JkZXIgb2YgdGhlCiogICAgICAgICAgbWF0cml4IEEuICBO\nID49IDAuCioKKiAgTlJIUyAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbnVtYmVy\nIG9mIHJpZ2h0IGhhbmQgc2lkZXMsIGkuZS4sIHRoZSBudW1iZXIgb2YgY29sdW1ucwoqICAgICAg\nICAgIG9mIHRoZSBtYXRyaXggQi4gIE5SSFMgPj0gMC4KKgoqICBBUCAgICAgIChpbnB1dC9vdXRw\ndXQpIERPVUJMRSBQUkVDSVNJT04gYXJyYXksIGRpbWVuc2lvbiAoTiooTisxKS8yKQoqICAgICAg\nICAgIE9uIGVudHJ5LCB0aGUgdXBwZXIgb3IgbG93ZXIgdHJpYW5nbGUgb2YgdGhlIHN5bW1ldHJp\nYyBtYXRyaXgKKiAgICAgICAgICBBLCBwYWNrZWQgY29sdW1ud2lzZSBpbiBhIGxpbmVhciBhcnJh\neS4gIFRoZSBqLXRoIGNvbHVtbiBvZiBBCiogICAgICAgICAgaXMgc3RvcmVkIGluIHRoZSBhcnJh\neSBBUCBhcyBmb2xsb3dzOgoqICAgICAgICAgIGlmIFVQTE8gPSAnVScsIEFQKGkgKyAoai0xKSpq\nLzIpID0gQShpLGopIGZvciAxPD1pPD1qOwoqICAgICAgICAgIGlmIFVQTE8gPSAnTCcsIEFQKGkg\nKyAoai0xKSooMm4taikvMikgPSBBKGksaikgZm9yIGo8PWk8PW4uCiogICAgICAgICAgU2VlIGJl\nbG93IGZvciBmdXJ0aGVyIGRldGFpbHMuCioKKiAgICAgICAgICBPbiBleGl0LCB0aGUgYmxvY2sg\nZGlhZ29uYWwgbWF0cml4IEQgYW5kIHRoZSBtdWx0aXBsaWVycyB1c2VkCiogICAgICAgICAgdG8g\nb2J0YWluIHRoZSBmYWN0b3IgVSBvciBMIGZyb20gdGhlIGZhY3Rvcml6YXRpb24KKiAgICAgICAg\nICBBID0gVSpEKlUqKlQgb3IgQSA9IEwqRCpMKipUIGFzIGNvbXB1dGVkIGJ5IERTUFRSRiwgc3Rv\ncmVkIGFzCiogICAgICAgICAgYSBwYWNrZWQgdHJpYW5ndWxhciBtYXRyaXggaW4gdGhlIHNhbWUg\nc3RvcmFnZSBmb3JtYXQgYXMgQS4KKgoqICBJUElWICAgIChvdXRwdXQpIElOVEVHRVIgYXJyYXks\nIGRpbWVuc2lvbiAoTikKKiAgICAgICAgICBEZXRhaWxzIG9mIHRoZSBpbnRlcmNoYW5nZXMgYW5k\nIHRoZSBibG9jayBzdHJ1Y3R1cmUgb2YgRCwgYXMKKiAgICAgICAgICBkZXRlcm1pbmVkIGJ5IERT\nUFRSRi4gIElmIElQSVYoaykgPiAwLCB0aGVuIHJvd3MgYW5kIGNvbHVtbnMKKiAgICAgICAgICBr\nIGFuZCBJUElWKGspIHdlcmUgaW50ZXJjaGFuZ2VkLCBhbmQgRChrLGspIGlzIGEgMS1ieS0xCiog\nICAgICAgICAgZGlhZ29uYWwgYmxvY2suICBJZiBVUExPID0gJ1UnIGFuZCBJUElWKGspID0gSVBJ\nVihrLTEpIDwgMCwKKiAgICAgICAgICB0aGVuIHJvd3MgYW5kIGNvbHVtbnMgay0xIGFuZCAtSVBJ\nVihrKSB3ZXJlIGludGVyY2hhbmdlZCBhbmQKKiAgICAgICAgICBEKGstMTprLGstMTprKSBpcyBh\nIDItYnktMiBkaWFnb25hbCBibG9jay4gIElmIFVQTE8gPSAnTCcgYW5kCiogICAgICAgICAgSVBJ\nVihrKSA9IElQSVYoaysxKSA8IDAsIHRoZW4gcm93cyBhbmQgY29sdW1ucyBrKzEgYW5kCiogICAg\nICAgICAgLUlQSVYoaykgd2VyZSBpbnRlcmNoYW5nZWQgYW5kIEQoazprKzEsazprKzEpIGlzIGEg\nMi1ieS0yCiogICAgICAgICAgZGlhZ29uYWwgYmxvY2suCioKKiAgQiAgICAgICAoaW5wdXQvb3V0\ncHV0KSBET1VCTEUgUFJFQ0lTSU9OIGFycmF5LCBkaW1lbnNpb24gKExEQixOUkhTKQoqICAgICAg\nICAgIE9uIGVudHJ5LCB0aGUgTi1ieS1OUkhTIHJpZ2h0IGhhbmQgc2lkZSBtYXRyaXggQi4KKiAg\nICAgICAgICBPbiBleGl0LCBpZiBJTkZPID0gMCwgdGhlIE4tYnktTlJIUyBzb2x1dGlvbiBtYXRy\naXggWC4KKgoqICBMREIgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBsZWFkaW5n\nIGRpbWVuc2lvbiBvZiB0aGUgYXJyYXkgQi4gIExEQiA+PSBtYXgoMSxOKS4KKgoqICBJTkZPICAg\nIChvdXRwdXQpIElOVEVHRVIKKiAgICAgICAgICA9IDA6ICBzdWNjZXNzZnVsIGV4aXQKKiAgICAg\nICAgICA8IDA6ICBpZiBJTkZPID0gLWksIHRoZSBpLXRoIGFyZ3VtZW50IGhhZCBhbiBpbGxlZ2Fs\nIHZhbHVlCiogICAgICAgICAgPiAwOiAgaWYgSU5GTyA9IGksIEQoaSxpKSBpcyBleGFjdGx5IHpl\ncm8uICBUaGUgZmFjdG9yaXphdGlvbgoqICAgICAgICAgICAgICAgIGhhcyBiZWVuIGNvbXBsZXRl\nZCwgYnV0IHRoZSBibG9jayBkaWFnb25hbCBtYXRyaXggRCBpcwoqICAgICAgICAgICAgICAgIGV4\nYWN0bHkgc2luZ3VsYXIsIHNvIHRoZSBzb2x1dGlvbiBjb3VsZCBub3QgYmUKKiAgICAgICAgICAg\nICAgICBjb21wdXRlZC4KKgpyxAIAAGiGaIcpgXLFAgAAfXLGAgAAKGiKiWiLaIx1YmiYigEmaJlY\nDAAAAGRzcHN2XzM4LnR4dHLHAgAAdWJom4oBJmicWAQAAABzcHN2csgCAABomIoBJnViaH1oYV1o\nfodScskCAAB9csoCAAAoaIFYCQAAAHN5bW1ldHJpY3LLAgAAaINYBgAAAHBhY2tlZHLMAgAAaHFY\nIQAAAGRyaXZlciBzaW1wbGUsIHNvbHZlIEEqWCA9IEIgb25seXLNAgAAaIZohymBcs4CAAB9cs8C\nAAAoaIqJaItojHViaI1YLAAAAGh0dHA6Ly93d3cubmV0bGliLm9yZy9sYXBhY2svY29tcGxleC9j\nc3Bzdi5mctACAABoj1gBAAAAY2iQaH1okV1ofodSctECAAB9ctICAAAoaJRYKA4AACAgICAgIFNV\nQlJPVVRJTkUgQ1NQU1YoIFVQTE8sIE4sIE5SSFMsIEFQLCBJUElWLCBCLCBMREIsIElORk8gKQoq\nCiogIC0tIExBUEFDSyBkcml2ZXIgcm91dGluZSAodmVyc2lvbiAzLjMuMSkgLS0KKiAgLS0gTEFQ\nQUNLIGlzIGEgc29mdHdhcmUgcGFja2FnZSBwcm92aWRlZCBieSBVbml2LiBvZiBUZW5uZXNzZWUs\nICAgIC0tCiogIC0tIFVuaXYuIG9mIENhbGlmb3JuaWEgQmVya2VsZXksIFVuaXYuIG9mIENvbG9y\nYWRvIERlbnZlciBhbmQgTkFHIEx0ZC4uLS0KKiAgLS0gQXByaWwgMjAxMSAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tCioKKiAgICAgLi4gU2Nh\nbGFyIEFyZ3VtZW50cyAuLgogICAgICBDSEFSQUNURVIgICAgICAgICAgVVBMTwogICAgICBJTlRF\nR0VSICAgICAgICAgICAgSU5GTywgTERCLCBOLCBOUkhTCiogICAgIC4uCiogICAgIC4uIEFycmF5\nIEFyZ3VtZW50cyAuLgogICAgICBJTlRFR0VSICAgICAgICAgICAgSVBJViggKiApCiAgICAgIENP\nTVBMRVggICAgICAgICAgICBBUCggKiApLCBCKCBMREIsICogKQoqICAgICAuLgoqCiogIFB1cnBv\nc2UKKiAgPT09PT09PQoqCiogIENTUFNWIGNvbXB1dGVzIHRoZSBzb2x1dGlvbiB0byBhIGNvbXBs\nZXggc3lzdGVtIG9mIGxpbmVhciBlcXVhdGlvbnMKKiAgICAgQSAqIFggPSBCLAoqICB3aGVyZSBB\nIGlzIGFuIE4tYnktTiBzeW1tZXRyaWMgbWF0cml4IHN0b3JlZCBpbiBwYWNrZWQgZm9ybWF0IGFu\nZCBYCiogIGFuZCBCIGFyZSBOLWJ5LU5SSFMgbWF0cmljZXMuCioKKiAgVGhlIGRpYWdvbmFsIHBp\ndm90aW5nIG1ldGhvZCBpcyB1c2VkIHRvIGZhY3RvciBBIGFzCiogICAgIEEgPSBVICogRCAqIFUq\nKlQsICBpZiBVUExPID0gJ1UnLCBvcgoqICAgICBBID0gTCAqIEQgKiBMKipULCAgaWYgVVBMTyA9\nICdMJywKKiAgd2hlcmUgVSAob3IgTCkgaXMgYSBwcm9kdWN0IG9mIHBlcm11dGF0aW9uIGFuZCB1\nbml0IHVwcGVyIChsb3dlcikKKiAgdHJpYW5ndWxhciBtYXRyaWNlcywgRCBpcyBzeW1tZXRyaWMg\nYW5kIGJsb2NrIGRpYWdvbmFsIHdpdGggMS1ieS0xCiogIGFuZCAyLWJ5LTIgZGlhZ29uYWwgYmxv\nY2tzLiAgVGhlIGZhY3RvcmVkIGZvcm0gb2YgQSBpcyB0aGVuIHVzZWQgdG8KKiAgc29sdmUgdGhl\nIHN5c3RlbSBvZiBlcXVhdGlvbnMgQSAqIFggPSBCLgoqCiogIEFyZ3VtZW50cwoqICA9PT09PT09\nPT0KKgoqICBVUExPICAgIChpbnB1dCkgQ0hBUkFDVEVSKjEKKiAgICAgICAgICA9ICdVJzogIFVw\ncGVyIHRyaWFuZ2xlIG9mIEEgaXMgc3RvcmVkOwoqICAgICAgICAgID0gJ0wnOiAgTG93ZXIgdHJp\nYW5nbGUgb2YgQSBpcyBzdG9yZWQuCioKKiAgTiAgICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAg\nICAgICBUaGUgbnVtYmVyIG9mIGxpbmVhciBlcXVhdGlvbnMsIGkuZS4sIHRoZSBvcmRlciBvZiB0\naGUKKiAgICAgICAgICBtYXRyaXggQS4gIE4gPj0gMC4KKgoqICBOUkhTICAgIChpbnB1dCkgSU5U\nRUdFUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2YgcmlnaHQgaGFuZCBzaWRlcywgaS5lLiwgdGhl\nIG51bWJlciBvZiBjb2x1bW5zCiogICAgICAgICAgb2YgdGhlIG1hdHJpeCBCLiAgTlJIUyA+PSAw\nLgoqCiogIEFQICAgICAgKGlucHV0L291dHB1dCkgQ09NUExFWCBhcnJheSwgZGltZW5zaW9uIChO\nKihOKzEpLzIpCiogICAgICAgICAgT24gZW50cnksIHRoZSB1cHBlciBvciBsb3dlciB0cmlhbmds\nZSBvZiB0aGUgc3ltbWV0cmljIG1hdHJpeAoqICAgICAgICAgIEEsIHBhY2tlZCBjb2x1bW53aXNl\nIGluIGEgbGluZWFyIGFycmF5LiAgVGhlIGotdGggY29sdW1uIG9mIEEKKiAgICAgICAgICBpcyBz\ndG9yZWQgaW4gdGhlIGFycmF5IEFQIGFzIGZvbGxvd3M6CiogICAgICAgICAgaWYgVVBMTyA9ICdV\nJywgQVAoaSArIChqLTEpKmovMikgPSBBKGksaikgZm9yIDE8PWk8PWo7CiogICAgICAgICAgaWYg\nVVBMTyA9ICdMJywgQVAoaSArIChqLTEpKigybi1qKS8yKSA9IEEoaSxqKSBmb3Igajw9aTw9bi4K\nKiAgICAgICAgICBTZWUgYmVsb3cgZm9yIGZ1cnRoZXIgZGV0YWlscy4KKgoqICAgICAgICAgIE9u\nIGV4aXQsIHRoZSBibG9jayBkaWFnb25hbCBtYXRyaXggRCBhbmQgdGhlIG11bHRpcGxpZXJzIHVz\nZWQKKiAgICAgICAgICB0byBvYnRhaW4gdGhlIGZhY3RvciBVIG9yIEwgZnJvbSB0aGUgZmFjdG9y\naXphdGlvbgoqICAgICAgICAgIEEgPSBVKkQqVSoqVCBvciBBID0gTCpEKkwqKlQgYXMgY29tcHV0\nZWQgYnkgQ1NQVFJGLCBzdG9yZWQgYXMKKiAgICAgICAgICBhIHBhY2tlZCB0cmlhbmd1bGFyIG1h\ndHJpeCBpbiB0aGUgc2FtZSBzdG9yYWdlIGZvcm1hdCBhcyBBLgoqCiogIElQSVYgICAgKG91dHB1\ndCkgSU5URUdFUiBhcnJheSwgZGltZW5zaW9uIChOKQoqICAgICAgICAgIERldGFpbHMgb2YgdGhl\nIGludGVyY2hhbmdlcyBhbmQgdGhlIGJsb2NrIHN0cnVjdHVyZSBvZiBELCBhcwoqICAgICAgICAg\nIGRldGVybWluZWQgYnkgQ1NQVFJGLiAgSWYgSVBJVihrKSA+IDAsIHRoZW4gcm93cyBhbmQgY29s\ndW1ucwoqICAgICAgICAgIGsgYW5kIElQSVYoaykgd2VyZSBpbnRlcmNoYW5nZWQsIGFuZCBEKGss\naykgaXMgYSAxLWJ5LTEKKiAgICAgICAgICBkaWFnb25hbCBibG9jay4gIElmIFVQTE8gPSAnVScg\nYW5kIElQSVYoaykgPSBJUElWKGstMSkgPCAwLAoqICAgICAgICAgIHRoZW4gcm93cyBhbmQgY29s\ndW1ucyBrLTEgYW5kIC1JUElWKGspIHdlcmUgaW50ZXJjaGFuZ2VkIGFuZAoqICAgICAgICAgIEQo\nay0xOmssay0xOmspIGlzIGEgMi1ieS0yIGRpYWdvbmFsIGJsb2NrLiAgSWYgVVBMTyA9ICdMJyBh\nbmQKKiAgICAgICAgICBJUElWKGspID0gSVBJVihrKzEpIDwgMCwgdGhlbiByb3dzIGFuZCBjb2x1\nbW5zIGsrMSBhbmQKKiAgICAgICAgICAtSVBJVihrKSB3ZXJlIGludGVyY2hhbmdlZCBhbmQgRChr\nOmsrMSxrOmsrMSkgaXMgYSAyLWJ5LTIKKiAgICAgICAgICBkaWFnb25hbCBibG9jay4KKgoqICBC\nICAgICAgIChpbnB1dC9vdXRwdXQpIENPTVBMRVggYXJyYXksIGRpbWVuc2lvbiAoTERCLE5SSFMp\nCiogICAgICAgICAgT24gZW50cnksIHRoZSBOLWJ5LU5SSFMgcmlnaHQgaGFuZCBzaWRlIG1hdHJp\neCBCLgoqICAgICAgICAgIE9uIGV4aXQsIGlmIElORk8gPSAwLCB0aGUgTi1ieS1OUkhTIHNvbHV0\naW9uIG1hdHJpeCBYLgoqCiogIExEQiAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhl\nIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBCLiAgTERCID49IG1heCgxLE4pLgoqCiog\nIElORk8gICAgKG91dHB1dCkgSU5URUdFUgoqICAgICAgICAgID0gMDogIHN1Y2Nlc3NmdWwgZXhp\ndAoqICAgICAgICAgIDwgMDogIGlmIElORk8gPSAtaSwgdGhlIGktdGggYXJndW1lbnQgaGFkIGFu\nIGlsbGVnYWwgdmFsdWUKKiAgICAgICAgICA+IDA6ICBpZiBJTkZPID0gaSwgRChpLGkpIGlzIGV4\nYWN0bHkgemVyby4gIFRoZSBmYWN0b3JpemF0aW9uCiogICAgICAgICAgICAgICAgaGFzIGJlZW4g\nY29tcGxldGVkLCBidXQgdGhlIGJsb2NrIGRpYWdvbmFsIG1hdHJpeCBEIGlzCiogICAgICAgICAg\nICAgICAgZXhhY3RseSBzaW5ndWxhciwgc28gdGhlIHNvbHV0aW9uIGNvdWxkIG5vdCBiZQoqICAg\nICAgICAgICAgICAgIGNvbXB1dGVkLgoqCnLTAgAAaIZohymBctQCAAB9ctUCAAAoaIqJaItojHVi\naJiKASdomVgMAAAAY3Nwc3ZfMzkudHh0ctYCAAB1YmibigEnaJxYBAAAAHNwc3Zy1wIAAGiYigEn\ndWJofWhhXWh+h1Jy2AIAAH1y2QIAAChogVgJAAAAc3ltbWV0cmljctoCAABog1gGAAAAcGFja2Vk\nctsCAABocVghAAAAZHJpdmVyIHNpbXBsZSwgc29sdmUgQSpYID0gQiBvbmx5ctwCAABohmiHKYFy\n3QIAAH1y3gIAAChoioloi2iMdWJojVguAAAAaHR0cDovL3d3dy5uZXRsaWIub3JnL2xhcGFjay9j\nb21wbGV4MTYvenNwc3YuZnLfAgAAaI9YAQAAAHpokGh9aJFdaH6HUnLgAgAAfXLhAgAAKGiUWC4O\nAAAgICAgICBTVUJST1VUSU5FIFpTUFNWKCBVUExPLCBOLCBOUkhTLCBBUCwgSVBJViwgQiwgTERC\nLCBJTkZPICkKKgoqICAtLSBMQVBBQ0sgZHJpdmVyIHJvdXRpbmUgKHZlcnNpb24gMy4zLjEpIC0t\nCiogIC0tIExBUEFDSyBpcyBhIHNvZnR3YXJlIHBhY2thZ2UgcHJvdmlkZWQgYnkgVW5pdi4gb2Yg\nVGVubmVzc2VlLCAgICAtLQoqICAtLSBVbml2LiBvZiBDYWxpZm9ybmlhIEJlcmtlbGV5LCBVbml2\nLiBvZiBDb2xvcmFkbyBEZW52ZXIgYW5kIE5BRyBMdGQuLi0tCiogIC0tIEFwcmlsIDIwMTEgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLQoqCiog\nICAgIC4uIFNjYWxhciBBcmd1bWVudHMgLi4KICAgICAgQ0hBUkFDVEVSICAgICAgICAgIFVQTE8K\nICAgICAgSU5URUdFUiAgICAgICAgICAgIElORk8sIExEQiwgTiwgTlJIUwoqICAgICAuLgoqICAg\nICAuLiBBcnJheSBBcmd1bWVudHMgLi4KICAgICAgSU5URUdFUiAgICAgICAgICAgIElQSVYoICog\nKQogICAgICBDT01QTEVYKjE2ICAgICAgICAgQVAoICogKSwgQiggTERCLCAqICkKKiAgICAgLi4K\nKgoqICBQdXJwb3NlCiogID09PT09PT0KKgoqICBaU1BTViBjb21wdXRlcyB0aGUgc29sdXRpb24g\ndG8gYSBjb21wbGV4IHN5c3RlbSBvZiBsaW5lYXIgZXF1YXRpb25zCiogICAgIEEgKiBYID0gQiwK\nKiAgd2hlcmUgQSBpcyBhbiBOLWJ5LU4gc3ltbWV0cmljIG1hdHJpeCBzdG9yZWQgaW4gcGFja2Vk\nIGZvcm1hdCBhbmQgWAoqICBhbmQgQiBhcmUgTi1ieS1OUkhTIG1hdHJpY2VzLgoqCiogIFRoZSBk\naWFnb25hbCBwaXZvdGluZyBtZXRob2QgaXMgdXNlZCB0byBmYWN0b3IgQSBhcwoqICAgICBBID0g\nVSAqIEQgKiBVKipULCAgaWYgVVBMTyA9ICdVJywgb3IKKiAgICAgQSA9IEwgKiBEICogTCoqVCwg\nIGlmIFVQTE8gPSAnTCcsCiogIHdoZXJlIFUgKG9yIEwpIGlzIGEgcHJvZHVjdCBvZiBwZXJtdXRh\ndGlvbiBhbmQgdW5pdCB1cHBlciAobG93ZXIpCiogIHRyaWFuZ3VsYXIgbWF0cmljZXMsIEQgaXMg\nc3ltbWV0cmljIGFuZCBibG9jayBkaWFnb25hbCB3aXRoIDEtYnktMQoqICBhbmQgMi1ieS0yIGRp\nYWdvbmFsIGJsb2Nrcy4gIFRoZSBmYWN0b3JlZCBmb3JtIG9mIEEgaXMgdGhlbiB1c2VkIHRvCiog\nIHNvbHZlIHRoZSBzeXN0ZW0gb2YgZXF1YXRpb25zIEEgKiBYID0gQi4KKgoqICBBcmd1bWVudHMK\nKiAgPT09PT09PT09CioKKiAgVVBMTyAgICAoaW5wdXQpIENIQVJBQ1RFUioxCiogICAgICAgICAg\nPSAnVSc6ICBVcHBlciB0cmlhbmdsZSBvZiBBIGlzIHN0b3JlZDsKKiAgICAgICAgICA9ICdMJzog\nIExvd2VyIHRyaWFuZ2xlIG9mIEEgaXMgc3RvcmVkLgoqCiogIE4gICAgICAgKGlucHV0KSBJTlRF\nR0VSCiogICAgICAgICAgVGhlIG51bWJlciBvZiBsaW5lYXIgZXF1YXRpb25zLCBpLmUuLCB0aGUg\nb3JkZXIgb2YgdGhlCiogICAgICAgICAgbWF0cml4IEEuICBOID49IDAuCioKKiAgTlJIUyAgICAo\naW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbnVtYmVyIG9mIHJpZ2h0IGhhbmQgc2lkZXMs\nIGkuZS4sIHRoZSBudW1iZXIgb2YgY29sdW1ucwoqICAgICAgICAgIG9mIHRoZSBtYXRyaXggQi4g\nIE5SSFMgPj0gMC4KKgoqICBBUCAgICAgIChpbnB1dC9vdXRwdXQpIENPTVBMRVgqMTYgYXJyYXks\nIGRpbWVuc2lvbiAoTiooTisxKS8yKQoqICAgICAgICAgIE9uIGVudHJ5LCB0aGUgdXBwZXIgb3Ig\nbG93ZXIgdHJpYW5nbGUgb2YgdGhlIHN5bW1ldHJpYyBtYXRyaXgKKiAgICAgICAgICBBLCBwYWNr\nZWQgY29sdW1ud2lzZSBpbiBhIGxpbmVhciBhcnJheS4gIFRoZSBqLXRoIGNvbHVtbiBvZiBBCiog\nICAgICAgICAgaXMgc3RvcmVkIGluIHRoZSBhcnJheSBBUCBhcyBmb2xsb3dzOgoqICAgICAgICAg\nIGlmIFVQTE8gPSAnVScsIEFQKGkgKyAoai0xKSpqLzIpID0gQShpLGopIGZvciAxPD1pPD1qOwoq\nICAgICAgICAgIGlmIFVQTE8gPSAnTCcsIEFQKGkgKyAoai0xKSooMm4taikvMikgPSBBKGksaikg\nZm9yIGo8PWk8PW4uCiogICAgICAgICAgU2VlIGJlbG93IGZvciBmdXJ0aGVyIGRldGFpbHMuCioK\nKiAgICAgICAgICBPbiBleGl0LCB0aGUgYmxvY2sgZGlhZ29uYWwgbWF0cml4IEQgYW5kIHRoZSBt\ndWx0aXBsaWVycyB1c2VkCiogICAgICAgICAgdG8gb2J0YWluIHRoZSBmYWN0b3IgVSBvciBMIGZy\nb20gdGhlIGZhY3Rvcml6YXRpb24KKiAgICAgICAgICBBID0gVSpEKlUqKlQgb3IgQSA9IEwqRCpM\nKipUIGFzIGNvbXB1dGVkIGJ5IFpTUFRSRiwgc3RvcmVkIGFzCiogICAgICAgICAgYSBwYWNrZWQg\ndHJpYW5ndWxhciBtYXRyaXggaW4gdGhlIHNhbWUgc3RvcmFnZSBmb3JtYXQgYXMgQS4KKgoqICBJ\nUElWICAgIChvdXRwdXQpIElOVEVHRVIgYXJyYXksIGRpbWVuc2lvbiAoTikKKiAgICAgICAgICBE\nZXRhaWxzIG9mIHRoZSBpbnRlcmNoYW5nZXMgYW5kIHRoZSBibG9jayBzdHJ1Y3R1cmUgb2YgRCwg\nYXMKKiAgICAgICAgICBkZXRlcm1pbmVkIGJ5IFpTUFRSRi4gIElmIElQSVYoaykgPiAwLCB0aGVu\nIHJvd3MgYW5kIGNvbHVtbnMKKiAgICAgICAgICBrIGFuZCBJUElWKGspIHdlcmUgaW50ZXJjaGFu\nZ2VkLCBhbmQgRChrLGspIGlzIGEgMS1ieS0xCiogICAgICAgICAgZGlhZ29uYWwgYmxvY2suICBJ\nZiBVUExPID0gJ1UnIGFuZCBJUElWKGspID0gSVBJVihrLTEpIDwgMCwKKiAgICAgICAgICB0aGVu\nIHJvd3MgYW5kIGNvbHVtbnMgay0xIGFuZCAtSVBJVihrKSB3ZXJlIGludGVyY2hhbmdlZCBhbmQK\nKiAgICAgICAgICBEKGstMTprLGstMTprKSBpcyBhIDItYnktMiBkaWFnb25hbCBibG9jay4gIElm\nIFVQTE8gPSAnTCcgYW5kCiogICAgICAgICAgSVBJVihrKSA9IElQSVYoaysxKSA8IDAsIHRoZW4g\ncm93cyBhbmQgY29sdW1ucyBrKzEgYW5kCiogICAgICAgICAgLUlQSVYoaykgd2VyZSBpbnRlcmNo\nYW5nZWQgYW5kIEQoazprKzEsazprKzEpIGlzIGEgMi1ieS0yCiogICAgICAgICAgZGlhZ29uYWwg\nYmxvY2suCioKKiAgQiAgICAgICAoaW5wdXQvb3V0cHV0KSBDT01QTEVYKjE2IGFycmF5LCBkaW1l\nbnNpb24gKExEQixOUkhTKQoqICAgICAgICAgIE9uIGVudHJ5LCB0aGUgTi1ieS1OUkhTIHJpZ2h0\nIGhhbmQgc2lkZSBtYXRyaXggQi4KKiAgICAgICAgICBPbiBleGl0LCBpZiBJTkZPID0gMCwgdGhl\nIE4tYnktTlJIUyBzb2x1dGlvbiBtYXRyaXggWC4KKgoqICBMREIgICAgIChpbnB1dCkgSU5URUdF\nUgoqICAgICAgICAgIFRoZSBsZWFkaW5nIGRpbWVuc2lvbiBvZiB0aGUgYXJyYXkgQi4gIExEQiA+\nPSBtYXgoMSxOKS4KKgoqICBJTkZPICAgIChvdXRwdXQpIElOVEVHRVIKKiAgICAgICAgICA9IDA6\nICBzdWNjZXNzZnVsIGV4aXQKKiAgICAgICAgICA8IDA6ICBpZiBJTkZPID0gLWksIHRoZSBpLXRo\nIGFyZ3VtZW50IGhhZCBhbiBpbGxlZ2FsIHZhbHVlCiogICAgICAgICAgPiAwOiAgaWYgSU5GTyA9\nIGksIEQoaSxpKSBpcyBleGFjdGx5IHplcm8uICBUaGUgZmFjdG9yaXphdGlvbgoqICAgICAgICAg\nICAgICAgIGhhcyBiZWVuIGNvbXBsZXRlZCwgYnV0IHRoZSBibG9jayBkaWFnb25hbCBtYXRyaXgg\nRCBpcwoqICAgICAgICAgICAgICAgIGV4YWN0bHkgc2luZ3VsYXIsIHNvIHRoZSBzb2x1dGlvbiBj\nb3VsZCBub3QgYmUKKiAgICAgICAgICAgICAgICBjb21wdXRlZC4KKgpy4gIAAGiGaIcpgXLjAgAA\nfXLkAgAAKGiKiWiLaIx1YmiYigEoaJlYDAAAAHpzcHN2XzQwLnR4dHLlAgAAdWJom4oBKGicWAQA\nAABzcHN2cuYCAABomIoBKHViaH1oYV1ofodScucCAAB9cugCAAAoaIFYBwAAAGdlbmVyYWxy6QIA\nAGiDWAQAAABmdWxscuoCAABocVhkAAAAZHJpdmVyIGV4cGVydCwgc29sdmUgQSpYID0gQiwgQ29u\nZGl0aW9uIE51bWJlciwgRXJyb3IgQm91bmRzLCBSZWZpbmUsIEZhY3RvciwgRXF1aWxpYnJhdGUs\nIFRyYW5zcG9zZXLrAgAAaIZohymBcuwCAAB9cu0CAAAoaIqJaItojHViaI1YLAAAAGh0dHA6Ly93\nd3cubmV0bGliLm9yZy9sYXBhY2svc2luZ2xlL3NnZXN2eC5mcu4CAABoj1gBAAAAc2iQaH1okV1o\nfodScu8CAAB9cvACAAAoaJRYuiwAACAgICAgIFNVQlJPVVRJTkUgU0dFU1ZYKCBGQUNULCBUUkFO\nUywgTiwgTlJIUywgQSwgTERBLCBBRiwgTERBRiwgSVBJViwKICAgICAkICAgICAgICAgICAgICAg\nICAgIEVRVUVELCBSLCBDLCBCLCBMREIsIFgsIExEWCwgUkNPTkQsIEZFUlIsIEJFUlIsCiAgICAg\nJCAgICAgICAgICAgICAgICAgICBXT1JLLCBJV09SSywgSU5GTyApCioKKiAgLS0gTEFQQUNLIGRy\naXZlciByb3V0aW5lICh2ZXJzaW9uIDMuMikgLS0KKiAgLS0gTEFQQUNLIGlzIGEgc29mdHdhcmUg\ncGFja2FnZSBwcm92aWRlZCBieSBVbml2LiBvZiBUZW5uZXNzZWUsICAgIC0tCiogIC0tIFVuaXYu\nIG9mIENhbGlmb3JuaWEgQmVya2VsZXksIFVuaXYuIG9mIENvbG9yYWRvIERlbnZlciBhbmQgTkFH\nIEx0ZC4uLS0KKiAgICAgTm92ZW1iZXIgMjAwNgoqCiogICAgIC4uIFNjYWxhciBBcmd1bWVudHMg\nLi4KICAgICAgQ0hBUkFDVEVSICAgICAgICAgIEVRVUVELCBGQUNULCBUUkFOUwogICAgICBJTlRF\nR0VSICAgICAgICAgICAgSU5GTywgTERBLCBMREFGLCBMREIsIExEWCwgTiwgTlJIUwogICAgICBS\nRUFMICAgICAgICAgICAgICAgUkNPTkQKKiAgICAgLi4KKiAgICAgLi4gQXJyYXkgQXJndW1lbnRz\nIC4uCiAgICAgIElOVEVHRVIgICAgICAgICAgICBJUElWKCAqICksIElXT1JLKCAqICkKICAgICAg\nUkVBTCAgICAgICAgICAgICAgIEEoIExEQSwgKiApLCBBRiggTERBRiwgKiApLCBCKCBMREIsICog\nKSwKICAgICAkICAgICAgICAgICAgICAgICAgIEJFUlIoICogKSwgQyggKiApLCBGRVJSKCAqICks\nIFIoICogKSwKICAgICAkICAgICAgICAgICAgICAgICAgIFdPUksoICogKSwgWCggTERYLCAqICkK\nKiAgICAgLi4KKgoqICBQdXJwb3NlCiogID09PT09PT0KKgoqICBTR0VTVlggdXNlcyB0aGUgTFUg\nZmFjdG9yaXphdGlvbiB0byBjb21wdXRlIHRoZSBzb2x1dGlvbiB0byBhIHJlYWwKKiAgc3lzdGVt\nIG9mIGxpbmVhciBlcXVhdGlvbnMKKiAgICAgQSAqIFggPSBCLAoqICB3aGVyZSBBIGlzIGFuIE4t\nYnktTiBtYXRyaXggYW5kIFggYW5kIEIgYXJlIE4tYnktTlJIUyBtYXRyaWNlcy4KKgoqICBFcnJv\nciBib3VuZHMgb24gdGhlIHNvbHV0aW9uIGFuZCBhIGNvbmRpdGlvbiBlc3RpbWF0ZSBhcmUgYWxz\nbwoqICBwcm92aWRlZC4KKgoqICBEZXNjcmlwdGlvbgoqICA9PT09PT09PT09PQoqCiogIFRoZSBm\nb2xsb3dpbmcgc3RlcHMgYXJlIHBlcmZvcm1lZDoKKgoqICAxLiBJZiBGQUNUID0gJ0UnLCByZWFs\nIHNjYWxpbmcgZmFjdG9ycyBhcmUgY29tcHV0ZWQgdG8gZXF1aWxpYnJhdGUKKiAgICAgdGhlIHN5\nc3RlbToKKiAgICAgICAgVFJBTlMgPSAnTic6ICBkaWFnKFIpKkEqZGlhZyhDKSAgICAgKmludihk\naWFnKEMpKSpYID0gZGlhZyhSKSpCCiogICAgICAgIFRSQU5TID0gJ1QnOiAoZGlhZyhSKSpBKmRp\nYWcoQykpKipUICppbnYoZGlhZyhSKSkqWCA9IGRpYWcoQykqQgoqICAgICAgICBUUkFOUyA9ICdD\nJzogKGRpYWcoUikqQSpkaWFnKEMpKSoqSCAqaW52KGRpYWcoUikpKlggPSBkaWFnKEMpKkIKKiAg\nICAgV2hldGhlciBvciBub3QgdGhlIHN5c3RlbSB3aWxsIGJlIGVxdWlsaWJyYXRlZCBkZXBlbmRz\nIG9uIHRoZQoqICAgICBzY2FsaW5nIG9mIHRoZSBtYXRyaXggQSwgYnV0IGlmIGVxdWlsaWJyYXRp\nb24gaXMgdXNlZCwgQSBpcwoqICAgICBvdmVyd3JpdHRlbiBieSBkaWFnKFIpKkEqZGlhZyhDKSBh\nbmQgQiBieSBkaWFnKFIpKkIgKGlmIFRSQU5TPSdOJykKKiAgICAgb3IgZGlhZyhDKSpCIChpZiBU\nUkFOUyA9ICdUJyBvciAnQycpLgoqCiogIDIuIElmIEZBQ1QgPSAnTicgb3IgJ0UnLCB0aGUgTFUg\nZGVjb21wb3NpdGlvbiBpcyB1c2VkIHRvIGZhY3RvciB0aGUKKiAgICAgbWF0cml4IEEgKGFmdGVy\nIGVxdWlsaWJyYXRpb24gaWYgRkFDVCA9ICdFJykgYXMKKiAgICAgICAgQSA9IFAgKiBMICogVSwK\nKiAgICAgd2hlcmUgUCBpcyBhIHBlcm11dGF0aW9uIG1hdHJpeCwgTCBpcyBhIHVuaXQgbG93ZXIg\ndHJpYW5ndWxhcgoqICAgICBtYXRyaXgsIGFuZCBVIGlzIHVwcGVyIHRyaWFuZ3VsYXIuCioKKiAg\nMy4gSWYgc29tZSBVKGksaSk9MCwgc28gdGhhdCBVIGlzIGV4YWN0bHkgc2luZ3VsYXIsIHRoZW4g\ndGhlIHJvdXRpbmUKKiAgICAgcmV0dXJucyB3aXRoIElORk8gPSBpLiBPdGhlcndpc2UsIHRoZSBm\nYWN0b3JlZCBmb3JtIG9mIEEgaXMgdXNlZAoqICAgICB0byBlc3RpbWF0ZSB0aGUgY29uZGl0aW9u\nIG51bWJlciBvZiB0aGUgbWF0cml4IEEuICBJZiB0aGUKKiAgICAgcmVjaXByb2NhbCBvZiB0aGUg\nY29uZGl0aW9uIG51bWJlciBpcyBsZXNzIHRoYW4gbWFjaGluZSBwcmVjaXNpb24sCiogICAgIElO\nRk8gPSBOKzEgaXMgcmV0dXJuZWQgYXMgYSB3YXJuaW5nLCBidXQgdGhlIHJvdXRpbmUgc3RpbGwg\nZ29lcyBvbgoqICAgICB0byBzb2x2ZSBmb3IgWCBhbmQgY29tcHV0ZSBlcnJvciBib3VuZHMgYXMg\nZGVzY3JpYmVkIGJlbG93LgoqCiogIDQuIFRoZSBzeXN0ZW0gb2YgZXF1YXRpb25zIGlzIHNvbHZl\nZCBmb3IgWCB1c2luZyB0aGUgZmFjdG9yZWQgZm9ybQoqICAgICBvZiBBLgoqCiogIDUuIEl0ZXJh\ndGl2ZSByZWZpbmVtZW50IGlzIGFwcGxpZWQgdG8gaW1wcm92ZSB0aGUgY29tcHV0ZWQgc29sdXRp\nb24KKiAgICAgbWF0cml4IGFuZCBjYWxjdWxhdGUgZXJyb3IgYm91bmRzIGFuZCBiYWNrd2FyZCBl\ncnJvciBlc3RpbWF0ZXMKKiAgICAgZm9yIGl0LgoqCiogIDYuIElmIGVxdWlsaWJyYXRpb24gd2Fz\nIHVzZWQsIHRoZSBtYXRyaXggWCBpcyBwcmVtdWx0aXBsaWVkIGJ5CiogICAgIGRpYWcoQykgKGlm\nIFRSQU5TID0gJ04nKSBvciBkaWFnKFIpIChpZiBUUkFOUyA9ICdUJyBvciAnQycpIHNvCiogICAg\nIHRoYXQgaXQgc29sdmVzIHRoZSBvcmlnaW5hbCBzeXN0ZW0gYmVmb3JlIGVxdWlsaWJyYXRpb24u\nCioKKiAgQXJndW1lbnRzCiogID09PT09PT09PQoqCiogIEZBQ1QgICAgKGlucHV0KSBDSEFSQUNU\nRVIqMQoqICAgICAgICAgIFNwZWNpZmllcyB3aGV0aGVyIG9yIG5vdCB0aGUgZmFjdG9yZWQgZm9y\nbSBvZiB0aGUgbWF0cml4IEEgaXMKKiAgICAgICAgICBzdXBwbGllZCBvbiBlbnRyeSwgYW5kIGlm\nIG5vdCwgd2hldGhlciB0aGUgbWF0cml4IEEgc2hvdWxkIGJlCiogICAgICAgICAgZXF1aWxpYnJh\ndGVkIGJlZm9yZSBpdCBpcyBmYWN0b3JlZC4KKiAgICAgICAgICA9ICdGJzogIE9uIGVudHJ5LCBB\nRiBhbmQgSVBJViBjb250YWluIHRoZSBmYWN0b3JlZCBmb3JtIG9mIEEuCiogICAgICAgICAgICAg\nICAgICBJZiBFUVVFRCBpcyBub3QgJ04nLCB0aGUgbWF0cml4IEEgaGFzIGJlZW4KKiAgICAgICAg\nICAgICAgICAgIGVxdWlsaWJyYXRlZCB3aXRoIHNjYWxpbmcgZmFjdG9ycyBnaXZlbiBieSBSIGFu\nZCBDLgoqICAgICAgICAgICAgICAgICAgQSwgQUYsIGFuZCBJUElWIGFyZSBub3QgbW9kaWZpZWQu\nCiogICAgICAgICAgPSAnTic6ICBUaGUgbWF0cml4IEEgd2lsbCBiZSBjb3BpZWQgdG8gQUYgYW5k\nIGZhY3RvcmVkLgoqICAgICAgICAgID0gJ0UnOiAgVGhlIG1hdHJpeCBBIHdpbGwgYmUgZXF1aWxp\nYnJhdGVkIGlmIG5lY2Vzc2FyeSwgdGhlbgoqICAgICAgICAgICAgICAgICAgY29waWVkIHRvIEFG\nIGFuZCBmYWN0b3JlZC4KKgoqICBUUkFOUyAgIChpbnB1dCkgQ0hBUkFDVEVSKjEKKiAgICAgICAg\nICBTcGVjaWZpZXMgdGhlIGZvcm0gb2YgdGhlIHN5c3RlbSBvZiBlcXVhdGlvbnM6CiogICAgICAg\nICAgPSAnTic6ICBBICogWCA9IEIgICAgIChObyB0cmFuc3Bvc2UpCiogICAgICAgICAgPSAnVCc6\nICBBKipUICogWCA9IEIgIChUcmFuc3Bvc2UpCiogICAgICAgICAgPSAnQyc6ICBBKipIICogWCA9\nIEIgIChUcmFuc3Bvc2UpCioKKiAgTiAgICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBU\naGUgbnVtYmVyIG9mIGxpbmVhciBlcXVhdGlvbnMsIGkuZS4sIHRoZSBvcmRlciBvZiB0aGUKKiAg\nICAgICAgICBtYXRyaXggQS4gIE4gPj0gMC4KKgoqICBOUkhTICAgIChpbnB1dCkgSU5URUdFUgoq\nICAgICAgICAgIFRoZSBudW1iZXIgb2YgcmlnaHQgaGFuZCBzaWRlcywgaS5lLiwgdGhlIG51bWJl\nciBvZiBjb2x1bW5zCiogICAgICAgICAgb2YgdGhlIG1hdHJpY2VzIEIgYW5kIFguICBOUkhTID49\nIDAuCioKKiAgQSAgICAgICAoaW5wdXQvb3V0cHV0KSBSRUFMIGFycmF5LCBkaW1lbnNpb24gKExE\nQSxOKQoqICAgICAgICAgIE9uIGVudHJ5LCB0aGUgTi1ieS1OIG1hdHJpeCBBLiAgSWYgRkFDVCA9\nICdGJyBhbmQgRVFVRUQgaXMKKiAgICAgICAgICBub3QgJ04nLCB0aGVuIEEgbXVzdCBoYXZlIGJl\nZW4gZXF1aWxpYnJhdGVkIGJ5IHRoZSBzY2FsaW5nCiogICAgICAgICAgZmFjdG9ycyBpbiBSIGFu\nZC9vciBDLiAgQSBpcyBub3QgbW9kaWZpZWQgaWYgRkFDVCA9ICdGJyBvcgoqICAgICAgICAgICdO\nJywgb3IgaWYgRkFDVCA9ICdFJyBhbmQgRVFVRUQgPSAnTicgb24gZXhpdC4KKgoqICAgICAgICAg\nIE9uIGV4aXQsIGlmIEVRVUVEIC5uZS4gJ04nLCBBIGlzIHNjYWxlZCBhcyBmb2xsb3dzOgoqICAg\nICAgICAgIEVRVUVEID0gJ1InOiAgQSA6PSBkaWFnKFIpICogQQoqICAgICAgICAgIEVRVUVEID0g\nJ0MnOiAgQSA6PSBBICogZGlhZyhDKQoqICAgICAgICAgIEVRVUVEID0gJ0InOiAgQSA6PSBkaWFn\nKFIpICogQSAqIGRpYWcoQykuCioKKiAgTERBICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAg\nICBUaGUgbGVhZGluZyBkaW1lbnNpb24gb2YgdGhlIGFycmF5IEEuICBMREEgPj0gbWF4KDEsTiku\nCioKKiAgQUYgICAgICAoaW5wdXQgb3Igb3V0cHV0KSBSRUFMIGFycmF5LCBkaW1lbnNpb24gKExE\nQUYsTikKKiAgICAgICAgICBJZiBGQUNUID0gJ0YnLCB0aGVuIEFGIGlzIGFuIGlucHV0IGFyZ3Vt\nZW50IGFuZCBvbiBlbnRyeQoqICAgICAgICAgIGNvbnRhaW5zIHRoZSBmYWN0b3JzIEwgYW5kIFUg\nZnJvbSB0aGUgZmFjdG9yaXphdGlvbgoqICAgICAgICAgIEEgPSBQKkwqVSBhcyBjb21wdXRlZCBi\neSBTR0VUUkYuICBJZiBFUVVFRCAubmUuICdOJywgdGhlbgoqICAgICAgICAgIEFGIGlzIHRoZSBm\nYWN0b3JlZCBmb3JtIG9mIHRoZSBlcXVpbGlicmF0ZWQgbWF0cml4IEEuCioKKiAgICAgICAgICBJ\nZiBGQUNUID0gJ04nLCB0aGVuIEFGIGlzIGFuIG91dHB1dCBhcmd1bWVudCBhbmQgb24gZXhpdAoq\nICAgICAgICAgIHJldHVybnMgdGhlIGZhY3RvcnMgTCBhbmQgVSBmcm9tIHRoZSBmYWN0b3JpemF0\naW9uIEEgPSBQKkwqVQoqICAgICAgICAgIG9mIHRoZSBvcmlnaW5hbCBtYXRyaXggQS4KKgoqICAg\nICAgICAgIElmIEZBQ1QgPSAnRScsIHRoZW4gQUYgaXMgYW4gb3V0cHV0IGFyZ3VtZW50IGFuZCBv\nbiBleGl0CiogICAgICAgICAgcmV0dXJucyB0aGUgZmFjdG9ycyBMIGFuZCBVIGZyb20gdGhlIGZh\nY3Rvcml6YXRpb24gQSA9IFAqTCpVCiogICAgICAgICAgb2YgdGhlIGVxdWlsaWJyYXRlZCBtYXRy\naXggQSAoc2VlIHRoZSBkZXNjcmlwdGlvbiBvZiBBIGZvcgoqICAgICAgICAgIHRoZSBmb3JtIG9m\nIHRoZSBlcXVpbGlicmF0ZWQgbWF0cml4KS4KKgoqICBMREFGICAgIChpbnB1dCkgSU5URUdFUgoq\nICAgICAgICAgIFRoZSBsZWFkaW5nIGRpbWVuc2lvbiBvZiB0aGUgYXJyYXkgQUYuICBMREFGID49\nIG1heCgxLE4pLgoqCiogIElQSVYgICAgKGlucHV0IG9yIG91dHB1dCkgSU5URUdFUiBhcnJheSwg\nZGltZW5zaW9uIChOKQoqICAgICAgICAgIElmIEZBQ1QgPSAnRicsIHRoZW4gSVBJViBpcyBhbiBp\nbnB1dCBhcmd1bWVudCBhbmQgb24gZW50cnkKKiAgICAgICAgICBjb250YWlucyB0aGUgcGl2b3Qg\naW5kaWNlcyBmcm9tIHRoZSBmYWN0b3JpemF0aW9uIEEgPSBQKkwqVQoqICAgICAgICAgIGFzIGNv\nbXB1dGVkIGJ5IFNHRVRSRjsgcm93IGkgb2YgdGhlIG1hdHJpeCB3YXMgaW50ZXJjaGFuZ2VkCiog\nICAgICAgICAgd2l0aCByb3cgSVBJVihpKS4KKgoqICAgICAgICAgIElmIEZBQ1QgPSAnTicsIHRo\nZW4gSVBJViBpcyBhbiBvdXRwdXQgYXJndW1lbnQgYW5kIG9uIGV4aXQKKiAgICAgICAgICBjb250\nYWlucyB0aGUgcGl2b3QgaW5kaWNlcyBmcm9tIHRoZSBmYWN0b3JpemF0aW9uIEEgPSBQKkwqVQoq\nICAgICAgICAgIG9mIHRoZSBvcmlnaW5hbCBtYXRyaXggQS4KKgoqICAgICAgICAgIElmIEZBQ1Qg\nPSAnRScsIHRoZW4gSVBJViBpcyBhbiBvdXRwdXQgYXJndW1lbnQgYW5kIG9uIGV4aXQKKiAgICAg\nICAgICBjb250YWlucyB0aGUgcGl2b3QgaW5kaWNlcyBmcm9tIHRoZSBmYWN0b3JpemF0aW9uIEEg\nPSBQKkwqVQoqICAgICAgICAgIG9mIHRoZSBlcXVpbGlicmF0ZWQgbWF0cml4IEEuCioKKiAgRVFV\nRUQgICAoaW5wdXQgb3Igb3V0cHV0KSBDSEFSQUNURVIqMQoqICAgICAgICAgIFNwZWNpZmllcyB0\naGUgZm9ybSBvZiBlcXVpbGlicmF0aW9uIHRoYXQgd2FzIGRvbmUuCiogICAgICAgICAgPSAnTic6\nICBObyBlcXVpbGlicmF0aW9uIChhbHdheXMgdHJ1ZSBpZiBGQUNUID0gJ04nKS4KKiAgICAgICAg\nICA9ICdSJzogIFJvdyBlcXVpbGlicmF0aW9uLCBpLmUuLCBBIGhhcyBiZWVuIHByZW11bHRpcGxp\nZWQgYnkKKiAgICAgICAgICAgICAgICAgIGRpYWcoUikuCiogICAgICAgICAgPSAnQyc6ICBDb2x1\nbW4gZXF1aWxpYnJhdGlvbiwgaS5lLiwgQSBoYXMgYmVlbiBwb3N0bXVsdGlwbGllZAoqICAgICAg\nICAgICAgICAgICAgYnkgZGlhZyhDKS4KKiAgICAgICAgICA9ICdCJzogIEJvdGggcm93IGFuZCBj\nb2x1bW4gZXF1aWxpYnJhdGlvbiwgaS5lLiwgQSBoYXMgYmVlbgoqICAgICAgICAgICAgICAgICAg\ncmVwbGFjZWQgYnkgZGlhZyhSKSAqIEEgKiBkaWFnKEMpLgoqICAgICAgICAgIEVRVUVEIGlzIGFu\nIGlucHV0IGFyZ3VtZW50IGlmIEZBQ1QgPSAnRic7IG90aGVyd2lzZSwgaXQgaXMgYW4KKiAgICAg\nICAgICBvdXRwdXQgYXJndW1lbnQuCioKKiAgUiAgICAgICAoaW5wdXQgb3Igb3V0cHV0KSBSRUFM\nIGFycmF5LCBkaW1lbnNpb24gKE4pCiogICAgICAgICAgVGhlIHJvdyBzY2FsZSBmYWN0b3JzIGZv\nciBBLiAgSWYgRVFVRUQgPSAnUicgb3IgJ0InLCBBIGlzCiogICAgICAgICAgbXVsdGlwbGllZCBv\nbiB0aGUgbGVmdCBieSBkaWFnKFIpOyBpZiBFUVVFRCA9ICdOJyBvciAnQycsIFIKKiAgICAgICAg\nICBpcyBub3QgYWNjZXNzZWQuICBSIGlzIGFuIGlucHV0IGFyZ3VtZW50IGlmIEZBQ1QgPSAnRic7\nCiogICAgICAgICAgb3RoZXJ3aXNlLCBSIGlzIGFuIG91dHB1dCBhcmd1bWVudC4gIElmIEZBQ1Qg\nPSAnRicgYW5kCiogICAgICAgICAgRVFVRUQgPSAnUicgb3IgJ0InLCBlYWNoIGVsZW1lbnQgb2Yg\nUiBtdXN0IGJlIHBvc2l0aXZlLgoqCiogIEMgICAgICAgKGlucHV0IG9yIG91dHB1dCkgUkVBTCBh\ncnJheSwgZGltZW5zaW9uIChOKQoqICAgICAgICAgIFRoZSBjb2x1bW4gc2NhbGUgZmFjdG9ycyBm\nb3IgQS4gIElmIEVRVUVEID0gJ0MnIG9yICdCJywgQSBpcwoqICAgICAgICAgIG11bHRpcGxpZWQg\nb24gdGhlIHJpZ2h0IGJ5IGRpYWcoQyk7IGlmIEVRVUVEID0gJ04nIG9yICdSJywgQwoqICAgICAg\nICAgIGlzIG5vdCBhY2Nlc3NlZC4gIEMgaXMgYW4gaW5wdXQgYXJndW1lbnQgaWYgRkFDVCA9ICdG\nJzsKKiAgICAgICAgICBvdGhlcndpc2UsIEMgaXMgYW4gb3V0cHV0IGFyZ3VtZW50LiAgSWYgRkFD\nVCA9ICdGJyBhbmQKKiAgICAgICAgICBFUVVFRCA9ICdDJyBvciAnQicsIGVhY2ggZWxlbWVudCBv\nZiBDIG11c3QgYmUgcG9zaXRpdmUuCioKKiAgQiAgICAgICAoaW5wdXQvb3V0cHV0KSBSRUFMIGFy\ncmF5LCBkaW1lbnNpb24gKExEQixOUkhTKQoqICAgICAgICAgIE9uIGVudHJ5LCB0aGUgTi1ieS1O\nUkhTIHJpZ2h0IGhhbmQgc2lkZSBtYXRyaXggQi4KKiAgICAgICAgICBPbiBleGl0LAoqICAgICAg\nICAgIGlmIEVRVUVEID0gJ04nLCBCIGlzIG5vdCBtb2RpZmllZDsKKiAgICAgICAgICBpZiBUUkFO\nUyA9ICdOJyBhbmQgRVFVRUQgPSAnUicgb3IgJ0InLCBCIGlzIG92ZXJ3cml0dGVuIGJ5CiogICAg\nICAgICAgZGlhZyhSKSpCOwoqICAgICAgICAgIGlmIFRSQU5TID0gJ1QnIG9yICdDJyBhbmQgRVFV\nRUQgPSAnQycgb3IgJ0InLCBCIGlzCiogICAgICAgICAgb3ZlcndyaXR0ZW4gYnkgZGlhZyhDKSpC\nLgoqCiogIExEQiAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGlt\nZW5zaW9uIG9mIHRoZSBhcnJheSBCLiAgTERCID49IG1heCgxLE4pLgoqCiogIFggICAgICAgKG91\ndHB1dCkgUkVBTCBhcnJheSwgZGltZW5zaW9uIChMRFgsTlJIUykKKiAgICAgICAgICBJZiBJTkZP\nID0gMCBvciBJTkZPID0gTisxLCB0aGUgTi1ieS1OUkhTIHNvbHV0aW9uIG1hdHJpeCBYCiogICAg\nICAgICAgdG8gdGhlIG9yaWdpbmFsIHN5c3RlbSBvZiBlcXVhdGlvbnMuICBOb3RlIHRoYXQgQSBh\nbmQgQiBhcmUKKiAgICAgICAgICBtb2RpZmllZCBvbiBleGl0IGlmIEVRVUVEIC5uZS4gJ04nLCBh\nbmQgdGhlIHNvbHV0aW9uIHRvIHRoZQoqICAgICAgICAgIGVxdWlsaWJyYXRlZCBzeXN0ZW0gaXMg\naW52KGRpYWcoQykpKlggaWYgVFJBTlMgPSAnTicgYW5kCiogICAgICAgICAgRVFVRUQgPSAnQycg\nb3IgJ0InLCBvciBpbnYoZGlhZyhSKSkqWCBpZiBUUkFOUyA9ICdUJyBvciAnQycKKiAgICAgICAg\nICBhbmQgRVFVRUQgPSAnUicgb3IgJ0InLgoqCiogIExEWCAgICAgKGlucHV0KSBJTlRFR0VSCiog\nICAgICAgICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBYLiAgTERYID49IG1h\neCgxLE4pLgoqCiogIFJDT05EICAgKG91dHB1dCkgUkVBTAoqICAgICAgICAgIFRoZSBlc3RpbWF0\nZSBvZiB0aGUgcmVjaXByb2NhbCBjb25kaXRpb24gbnVtYmVyIG9mIHRoZSBtYXRyaXgKKiAgICAg\nICAgICBBIGFmdGVyIGVxdWlsaWJyYXRpb24gKGlmIGRvbmUpLiAgSWYgUkNPTkQgaXMgbGVzcyB0\naGFuIHRoZQoqICAgICAgICAgIG1hY2hpbmUgcHJlY2lzaW9uIChpbiBwYXJ0aWN1bGFyLCBpZiBS\nQ09ORCA9IDApLCB0aGUgbWF0cml4CiogICAgICAgICAgaXMgc2luZ3VsYXIgdG8gd29ya2luZyBw\ncmVjaXNpb24uICBUaGlzIGNvbmRpdGlvbiBpcwoqICAgICAgICAgIGluZGljYXRlZCBieSBhIHJl\ndHVybiBjb2RlIG9mIElORk8gPiAwLgoqCiogIEZFUlIgICAgKG91dHB1dCkgUkVBTCBhcnJheSwg\nZGltZW5zaW9uIChOUkhTKQoqICAgICAgICAgIFRoZSBlc3RpbWF0ZWQgZm9yd2FyZCBlcnJvciBi\nb3VuZCBmb3IgZWFjaCBzb2x1dGlvbiB2ZWN0b3IKKiAgICAgICAgICBYKGopICh0aGUgai10aCBj\nb2x1bW4gb2YgdGhlIHNvbHV0aW9uIG1hdHJpeCBYKS4KKiAgICAgICAgICBJZiBYVFJVRSBpcyB0\naGUgdHJ1ZSBzb2x1dGlvbiBjb3JyZXNwb25kaW5nIHRvIFgoaiksIEZFUlIoaikKKiAgICAgICAg\nICBpcyBhbiBlc3RpbWF0ZWQgdXBwZXIgYm91bmQgZm9yIHRoZSBtYWduaXR1ZGUgb2YgdGhlIGxh\ncmdlc3QKKiAgICAgICAgICBlbGVtZW50IGluIChYKGopIC0gWFRSVUUpIGRpdmlkZWQgYnkgdGhl\nIG1hZ25pdHVkZSBvZiB0aGUKKiAgICAgICAgICBsYXJnZXN0IGVsZW1lbnQgaW4gWChqKS4gIFRo\nZSBlc3RpbWF0ZSBpcyBhcyByZWxpYWJsZSBhcwoqICAgICAgICAgIHRoZSBlc3RpbWF0ZSBmb3Ig\nUkNPTkQsIGFuZCBpcyBhbG1vc3QgYWx3YXlzIGEgc2xpZ2h0CiogICAgICAgICAgb3ZlcmVzdGlt\nYXRlIG9mIHRoZSB0cnVlIGVycm9yLgoqCiogIEJFUlIgICAgKG91dHB1dCkgUkVBTCBhcnJheSwg\nZGltZW5zaW9uIChOUkhTKQoqICAgICAgICAgIFRoZSBjb21wb25lbnR3aXNlIHJlbGF0aXZlIGJh\nY2t3YXJkIGVycm9yIG9mIGVhY2ggc29sdXRpb24KKiAgICAgICAgICB2ZWN0b3IgWChqKSAoaS5l\nLiwgdGhlIHNtYWxsZXN0IHJlbGF0aXZlIGNoYW5nZSBpbgoqICAgICAgICAgIGFueSBlbGVtZW50\nIG9mIEEgb3IgQiB0aGF0IG1ha2VzIFgoaikgYW4gZXhhY3Qgc29sdXRpb24pLgoqCiogIFdPUksg\nICAgKHdvcmtzcGFjZS9vdXRwdXQpIFJFQUwgYXJyYXksIGRpbWVuc2lvbiAoNCpOKQoqICAgICAg\nICAgIE9uIGV4aXQsIFdPUksoMSkgY29udGFpbnMgdGhlIHJlY2lwcm9jYWwgcGl2b3QgZ3Jvd3Ro\nCiogICAgICAgICAgZmFjdG9yIG5vcm0oQSkvbm9ybShVKS4gVGhlICJtYXggYWJzb2x1dGUgZWxl\nbWVudCIgbm9ybSBpcwoqICAgICAgICAgIHVzZWQuIElmIFdPUksoMSkgaXMgbXVjaCBsZXNzIHRo\nYW4gMSwgdGhlbiB0aGUgc3RhYmlsaXR5CiogICAgICAgICAgb2YgdGhlIExVIGZhY3Rvcml6YXRp\nb24gb2YgdGhlIChlcXVpbGlicmF0ZWQpIG1hdHJpeCBBCiogICAgICAgICAgY291bGQgYmUgcG9v\nci4gVGhpcyBhbHNvIG1lYW5zIHRoYXQgdGhlIHNvbHV0aW9uIFgsIGNvbmRpdGlvbgoqICAgICAg\nICAgIGVzdGltYXRvciBSQ09ORCwgYW5kIGZvcndhcmQgZXJyb3IgYm91bmQgRkVSUiBjb3VsZCBi\nZQoqICAgICAgICAgIHVucmVsaWFibGUuIElmIGZhY3Rvcml6YXRpb24gZmFpbHMgd2l0aCAwPElO\nRk88PU4sIHRoZW4KKiAgICAgICAgICBXT1JLKDEpIGNvbnRhaW5zIHRoZSByZWNpcHJvY2FsIHBp\ndm90IGdyb3d0aCBmYWN0b3IgZm9yIHRoZQoqICAgICAgICAgIGxlYWRpbmcgSU5GTyBjb2x1bW5z\nIG9mIEEuCioKKiAgSVdPUksgICAod29ya3NwYWNlKSBJTlRFR0VSIGFycmF5LCBkaW1lbnNpb24g\nKE4pCioKKiAgSU5GTyAgICAob3V0cHV0KSBJTlRFR0VSCiogICAgICAgICAgPSAwOiAgc3VjY2Vz\nc2Z1bCBleGl0CiogICAgICAgICAgPCAwOiAgaWYgSU5GTyA9IC1pLCB0aGUgaS10aCBhcmd1bWVu\ndCBoYWQgYW4gaWxsZWdhbCB2YWx1ZQoqICAgICAgICAgID4gMDogIGlmIElORk8gPSBpLCBhbmQg\naSBpcwoqICAgICAgICAgICAgICAgIDw9IE46ICBVKGksaSkgaXMgZXhhY3RseSB6ZXJvLiAgVGhl\nIGZhY3Rvcml6YXRpb24gaGFzCiogICAgICAgICAgICAgICAgICAgICAgIGJlZW4gY29tcGxldGVk\nLCBidXQgdGhlIGZhY3RvciBVIGlzIGV4YWN0bHkKKiAgICAgICAgICAgICAgICAgICAgICAgc2lu\nZ3VsYXIsIHNvIHRoZSBzb2x1dGlvbiBhbmQgZXJyb3IgYm91bmRzCiogICAgICAgICAgICAgICAg\nICAgICAgIGNvdWxkIG5vdCBiZSBjb21wdXRlZC4gUkNPTkQgPSAwIGlzIHJldHVybmVkLgoqICAg\nICAgICAgICAgICAgID0gTisxOiBVIGlzIG5vbnNpbmd1bGFyLCBidXQgUkNPTkQgaXMgbGVzcyB0\naGFuIG1hY2hpbmUKKiAgICAgICAgICAgICAgICAgICAgICAgcHJlY2lzaW9uLCBtZWFuaW5nIHRo\nYXQgdGhlIG1hdHJpeCBpcyBzaW5ndWxhcgoqICAgICAgICAgICAgICAgICAgICAgICB0byB3b3Jr\naW5nIHByZWNpc2lvbi4gIE5ldmVydGhlbGVzcywgdGhlCiogICAgICAgICAgICAgICAgICAgICAg\nIHNvbHV0aW9uIGFuZCBlcnJvciBib3VuZHMgYXJlIGNvbXB1dGVkIGJlY2F1c2UKKiAgICAgICAg\nICAgICAgICAgICAgICAgdGhlcmUgYXJlIGEgbnVtYmVyIG9mIHNpdHVhdGlvbnMgd2hlcmUgdGhl\nCiogICAgICAgICAgICAgICAgICAgICAgIGNvbXB1dGVkIHNvbHV0aW9uIGNhbiBiZSBtb3JlIGFj\nY3VyYXRlIHRoYW4gdGhlCiogICAgICAgICAgICAgICAgICAgICAgIHZhbHVlIG9mIFJDT05EIHdv\ndWxkIHN1Z2dlc3QuCioKcvECAABohmiHKYFy8gIAAH1y8wIAAChoioloi2iMdWJomIoBKWiZWA0A\nAABzZ2VzdnhfNDEudHh0cvQCAAB1YmibigEpaJxYBQAAAGdlc3Z4cvUCAABomIoBKXViaH1oYV1o\nfodScvYCAAB9cvcCAAAoaIFYBwAAAGdlbmVyYWxy+AIAAGiDWAQAAABmdWxscvkCAABocVhkAAAA\nZHJpdmVyIGV4cGVydCwgc29sdmUgQSpYID0gQiwgQ29uZGl0aW9uIE51bWJlciwgRXJyb3IgQm91\nbmRzLCBSZWZpbmUsIEZhY3RvciwgRXF1aWxpYnJhdGUsIFRyYW5zcG9zZXL6AgAAaIZohymBcvsC\nAAB9cvwCAAAoaIqJaItojHViaI1YLAAAAGh0dHA6Ly93d3cubmV0bGliLm9yZy9sYXBhY2svZG91\nYmxlL2RnZXN2eC5mcv0CAABoj1gBAAAAZGiQaH1okV1ofodScv4CAAB9cv8CAAAoaJRYMi0AACAg\nICAgIFNVQlJPVVRJTkUgREdFU1ZYKCBGQUNULCBUUkFOUywgTiwgTlJIUywgQSwgTERBLCBBRiwg\nTERBRiwgSVBJViwKICAgICAkICAgICAgICAgICAgICAgICAgIEVRVUVELCBSLCBDLCBCLCBMREIs\nIFgsIExEWCwgUkNPTkQsIEZFUlIsIEJFUlIsCiAgICAgJCAgICAgICAgICAgICAgICAgICBXT1JL\nLCBJV09SSywgSU5GTyApCioKKiAgLS0gTEFQQUNLIGRyaXZlciByb3V0aW5lICh2ZXJzaW9uIDMu\nMikgLS0KKiAgLS0gTEFQQUNLIGlzIGEgc29mdHdhcmUgcGFja2FnZSBwcm92aWRlZCBieSBVbml2\nLiBvZiBUZW5uZXNzZWUsICAgIC0tCiogIC0tIFVuaXYuIG9mIENhbGlmb3JuaWEgQmVya2VsZXks\nIFVuaXYuIG9mIENvbG9yYWRvIERlbnZlciBhbmQgTkFHIEx0ZC4uLS0KKiAgICAgTm92ZW1iZXIg\nMjAwNgoqCiogICAgIC4uIFNjYWxhciBBcmd1bWVudHMgLi4KICAgICAgQ0hBUkFDVEVSICAgICAg\nICAgIEVRVUVELCBGQUNULCBUUkFOUwogICAgICBJTlRFR0VSICAgICAgICAgICAgSU5GTywgTERB\nLCBMREFGLCBMREIsIExEWCwgTiwgTlJIUwogICAgICBET1VCTEUgUFJFQ0lTSU9OICAgUkNPTkQK\nKiAgICAgLi4KKiAgICAgLi4gQXJyYXkgQXJndW1lbnRzIC4uCiAgICAgIElOVEVHRVIgICAgICAg\nICAgICBJUElWKCAqICksIElXT1JLKCAqICkKICAgICAgRE9VQkxFIFBSRUNJU0lPTiAgIEEoIExE\nQSwgKiApLCBBRiggTERBRiwgKiApLCBCKCBMREIsICogKSwKICAgICAkICAgICAgICAgICAgICAg\nICAgIEJFUlIoICogKSwgQyggKiApLCBGRVJSKCAqICksIFIoICogKSwKICAgICAkICAgICAgICAg\nICAgICAgICAgIFdPUksoICogKSwgWCggTERYLCAqICkKKiAgICAgLi4KKgoqICBQdXJwb3NlCiog\nID09PT09PT0KKgoqICBER0VTVlggdXNlcyB0aGUgTFUgZmFjdG9yaXphdGlvbiB0byBjb21wdXRl\nIHRoZSBzb2x1dGlvbiB0byBhIHJlYWwKKiAgc3lzdGVtIG9mIGxpbmVhciBlcXVhdGlvbnMKKiAg\nICAgQSAqIFggPSBCLAoqICB3aGVyZSBBIGlzIGFuIE4tYnktTiBtYXRyaXggYW5kIFggYW5kIEIg\nYXJlIE4tYnktTlJIUyBtYXRyaWNlcy4KKgoqICBFcnJvciBib3VuZHMgb24gdGhlIHNvbHV0aW9u\nIGFuZCBhIGNvbmRpdGlvbiBlc3RpbWF0ZSBhcmUgYWxzbwoqICBwcm92aWRlZC4KKgoqICBEZXNj\ncmlwdGlvbgoqICA9PT09PT09PT09PQoqCiogIFRoZSBmb2xsb3dpbmcgc3RlcHMgYXJlIHBlcmZv\ncm1lZDoKKgoqICAxLiBJZiBGQUNUID0gJ0UnLCByZWFsIHNjYWxpbmcgZmFjdG9ycyBhcmUgY29t\ncHV0ZWQgdG8gZXF1aWxpYnJhdGUKKiAgICAgdGhlIHN5c3RlbToKKiAgICAgICAgVFJBTlMgPSAn\nTic6ICBkaWFnKFIpKkEqZGlhZyhDKSAgICAgKmludihkaWFnKEMpKSpYID0gZGlhZyhSKSpCCiog\nICAgICAgIFRSQU5TID0gJ1QnOiAoZGlhZyhSKSpBKmRpYWcoQykpKipUICppbnYoZGlhZyhSKSkq\nWCA9IGRpYWcoQykqQgoqICAgICAgICBUUkFOUyA9ICdDJzogKGRpYWcoUikqQSpkaWFnKEMpKSoq\nSCAqaW52KGRpYWcoUikpKlggPSBkaWFnKEMpKkIKKiAgICAgV2hldGhlciBvciBub3QgdGhlIHN5\nc3RlbSB3aWxsIGJlIGVxdWlsaWJyYXRlZCBkZXBlbmRzIG9uIHRoZQoqICAgICBzY2FsaW5nIG9m\nIHRoZSBtYXRyaXggQSwgYnV0IGlmIGVxdWlsaWJyYXRpb24gaXMgdXNlZCwgQSBpcwoqICAgICBv\ndmVyd3JpdHRlbiBieSBkaWFnKFIpKkEqZGlhZyhDKSBhbmQgQiBieSBkaWFnKFIpKkIgKGlmIFRS\nQU5TPSdOJykKKiAgICAgb3IgZGlhZyhDKSpCIChpZiBUUkFOUyA9ICdUJyBvciAnQycpLgoqCiog\nIDIuIElmIEZBQ1QgPSAnTicgb3IgJ0UnLCB0aGUgTFUgZGVjb21wb3NpdGlvbiBpcyB1c2VkIHRv\nIGZhY3RvciB0aGUKKiAgICAgbWF0cml4IEEgKGFmdGVyIGVxdWlsaWJyYXRpb24gaWYgRkFDVCA9\nICdFJykgYXMKKiAgICAgICAgQSA9IFAgKiBMICogVSwKKiAgICAgd2hlcmUgUCBpcyBhIHBlcm11\ndGF0aW9uIG1hdHJpeCwgTCBpcyBhIHVuaXQgbG93ZXIgdHJpYW5ndWxhcgoqICAgICBtYXRyaXgs\nIGFuZCBVIGlzIHVwcGVyIHRyaWFuZ3VsYXIuCioKKiAgMy4gSWYgc29tZSBVKGksaSk9MCwgc28g\ndGhhdCBVIGlzIGV4YWN0bHkgc2luZ3VsYXIsIHRoZW4gdGhlIHJvdXRpbmUKKiAgICAgcmV0dXJu\ncyB3aXRoIElORk8gPSBpLiBPdGhlcndpc2UsIHRoZSBmYWN0b3JlZCBmb3JtIG9mIEEgaXMgdXNl\nZAoqICAgICB0byBlc3RpbWF0ZSB0aGUgY29uZGl0aW9uIG51bWJlciBvZiB0aGUgbWF0cml4IEEu\nICBJZiB0aGUKKiAgICAgcmVjaXByb2NhbCBvZiB0aGUgY29uZGl0aW9uIG51bWJlciBpcyBsZXNz\nIHRoYW4gbWFjaGluZSBwcmVjaXNpb24sCiogICAgIElORk8gPSBOKzEgaXMgcmV0dXJuZWQgYXMg\nYSB3YXJuaW5nLCBidXQgdGhlIHJvdXRpbmUgc3RpbGwgZ29lcyBvbgoqICAgICB0byBzb2x2ZSBm\nb3IgWCBhbmQgY29tcHV0ZSBlcnJvciBib3VuZHMgYXMgZGVzY3JpYmVkIGJlbG93LgoqCiogIDQu\nIFRoZSBzeXN0ZW0gb2YgZXF1YXRpb25zIGlzIHNvbHZlZCBmb3IgWCB1c2luZyB0aGUgZmFjdG9y\nZWQgZm9ybQoqICAgICBvZiBBLgoqCiogIDUuIEl0ZXJhdGl2ZSByZWZpbmVtZW50IGlzIGFwcGxp\nZWQgdG8gaW1wcm92ZSB0aGUgY29tcHV0ZWQgc29sdXRpb24KKiAgICAgbWF0cml4IGFuZCBjYWxj\ndWxhdGUgZXJyb3IgYm91bmRzIGFuZCBiYWNrd2FyZCBlcnJvciBlc3RpbWF0ZXMKKiAgICAgZm9y\nIGl0LgoqCiogIDYuIElmIGVxdWlsaWJyYXRpb24gd2FzIHVzZWQsIHRoZSBtYXRyaXggWCBpcyBw\ncmVtdWx0aXBsaWVkIGJ5CiogICAgIGRpYWcoQykgKGlmIFRSQU5TID0gJ04nKSBvciBkaWFnKFIp\nIChpZiBUUkFOUyA9ICdUJyBvciAnQycpIHNvCiogICAgIHRoYXQgaXQgc29sdmVzIHRoZSBvcmln\naW5hbCBzeXN0ZW0gYmVmb3JlIGVxdWlsaWJyYXRpb24uCioKKiAgQXJndW1lbnRzCiogID09PT09\nPT09PQoqCiogIEZBQ1QgICAgKGlucHV0KSBDSEFSQUNURVIqMQoqICAgICAgICAgIFNwZWNpZmll\ncyB3aGV0aGVyIG9yIG5vdCB0aGUgZmFjdG9yZWQgZm9ybSBvZiB0aGUgbWF0cml4IEEgaXMKKiAg\nICAgICAgICBzdXBwbGllZCBvbiBlbnRyeSwgYW5kIGlmIG5vdCwgd2hldGhlciB0aGUgbWF0cml4\nIEEgc2hvdWxkIGJlCiogICAgICAgICAgZXF1aWxpYnJhdGVkIGJlZm9yZSBpdCBpcyBmYWN0b3Jl\nZC4KKiAgICAgICAgICA9ICdGJzogIE9uIGVudHJ5LCBBRiBhbmQgSVBJViBjb250YWluIHRoZSBm\nYWN0b3JlZCBmb3JtIG9mIEEuCiogICAgICAgICAgICAgICAgICBJZiBFUVVFRCBpcyBub3QgJ04n\nLCB0aGUgbWF0cml4IEEgaGFzIGJlZW4KKiAgICAgICAgICAgICAgICAgIGVxdWlsaWJyYXRlZCB3\naXRoIHNjYWxpbmcgZmFjdG9ycyBnaXZlbiBieSBSIGFuZCBDLgoqICAgICAgICAgICAgICAgICAg\nQSwgQUYsIGFuZCBJUElWIGFyZSBub3QgbW9kaWZpZWQuCiogICAgICAgICAgPSAnTic6ICBUaGUg\nbWF0cml4IEEgd2lsbCBiZSBjb3BpZWQgdG8gQUYgYW5kIGZhY3RvcmVkLgoqICAgICAgICAgID0g\nJ0UnOiAgVGhlIG1hdHJpeCBBIHdpbGwgYmUgZXF1aWxpYnJhdGVkIGlmIG5lY2Vzc2FyeSwgdGhl\nbgoqICAgICAgICAgICAgICAgICAgY29waWVkIHRvIEFGIGFuZCBmYWN0b3JlZC4KKgoqICBUUkFO\nUyAgIChpbnB1dCkgQ0hBUkFDVEVSKjEKKiAgICAgICAgICBTcGVjaWZpZXMgdGhlIGZvcm0gb2Yg\ndGhlIHN5c3RlbSBvZiBlcXVhdGlvbnM6CiogICAgICAgICAgPSAnTic6ICBBICogWCA9IEIgICAg\nIChObyB0cmFuc3Bvc2UpCiogICAgICAgICAgPSAnVCc6ICBBKipUICogWCA9IEIgIChUcmFuc3Bv\nc2UpCiogICAgICAgICAgPSAnQyc6ICBBKipIICogWCA9IEIgIChUcmFuc3Bvc2UpCioKKiAgTiAg\nICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbnVtYmVyIG9mIGxpbmVhciBlcXVh\ndGlvbnMsIGkuZS4sIHRoZSBvcmRlciBvZiB0aGUKKiAgICAgICAgICBtYXRyaXggQS4gIE4gPj0g\nMC4KKgoqICBOUkhTICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2Yg\ncmlnaHQgaGFuZCBzaWRlcywgaS5lLiwgdGhlIG51bWJlciBvZiBjb2x1bW5zCiogICAgICAgICAg\nb2YgdGhlIG1hdHJpY2VzIEIgYW5kIFguICBOUkhTID49IDAuCioKKiAgQSAgICAgICAoaW5wdXQv\nb3V0cHV0KSBET1VCTEUgUFJFQ0lTSU9OIGFycmF5LCBkaW1lbnNpb24gKExEQSxOKQoqICAgICAg\nICAgIE9uIGVudHJ5LCB0aGUgTi1ieS1OIG1hdHJpeCBBLiAgSWYgRkFDVCA9ICdGJyBhbmQgRVFV\nRUQgaXMKKiAgICAgICAgICBub3QgJ04nLCB0aGVuIEEgbXVzdCBoYXZlIGJlZW4gZXF1aWxpYnJh\ndGVkIGJ5IHRoZSBzY2FsaW5nCiogICAgICAgICAgZmFjdG9ycyBpbiBSIGFuZC9vciBDLiAgQSBp\ncyBub3QgbW9kaWZpZWQgaWYgRkFDVCA9ICdGJyBvcgoqICAgICAgICAgICdOJywgb3IgaWYgRkFD\nVCA9ICdFJyBhbmQgRVFVRUQgPSAnTicgb24gZXhpdC4KKgoqICAgICAgICAgIE9uIGV4aXQsIGlm\nIEVRVUVEIC5uZS4gJ04nLCBBIGlzIHNjYWxlZCBhcyBmb2xsb3dzOgoqICAgICAgICAgIEVRVUVE\nID0gJ1InOiAgQSA6PSBkaWFnKFIpICogQQoqICAgICAgICAgIEVRVUVEID0gJ0MnOiAgQSA6PSBB\nICogZGlhZyhDKQoqICAgICAgICAgIEVRVUVEID0gJ0InOiAgQSA6PSBkaWFnKFIpICogQSAqIGRp\nYWcoQykuCioKKiAgTERBICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbGVhZGlu\nZyBkaW1lbnNpb24gb2YgdGhlIGFycmF5IEEuICBMREEgPj0gbWF4KDEsTikuCioKKiAgQUYgICAg\nICAoaW5wdXQgb3Igb3V0cHV0KSBET1VCTEUgUFJFQ0lTSU9OIGFycmF5LCBkaW1lbnNpb24gKExE\nQUYsTikKKiAgICAgICAgICBJZiBGQUNUID0gJ0YnLCB0aGVuIEFGIGlzIGFuIGlucHV0IGFyZ3Vt\nZW50IGFuZCBvbiBlbnRyeQoqICAgICAgICAgIGNvbnRhaW5zIHRoZSBmYWN0b3JzIEwgYW5kIFUg\nZnJvbSB0aGUgZmFjdG9yaXphdGlvbgoqICAgICAgICAgIEEgPSBQKkwqVSBhcyBjb21wdXRlZCBi\neSBER0VUUkYuICBJZiBFUVVFRCAubmUuICdOJywgdGhlbgoqICAgICAgICAgIEFGIGlzIHRoZSBm\nYWN0b3JlZCBmb3JtIG9mIHRoZSBlcXVpbGlicmF0ZWQgbWF0cml4IEEuCioKKiAgICAgICAgICBJ\nZiBGQUNUID0gJ04nLCB0aGVuIEFGIGlzIGFuIG91dHB1dCBhcmd1bWVudCBhbmQgb24gZXhpdAoq\nICAgICAgICAgIHJldHVybnMgdGhlIGZhY3RvcnMgTCBhbmQgVSBmcm9tIHRoZSBmYWN0b3JpemF0\naW9uIEEgPSBQKkwqVQoqICAgICAgICAgIG9mIHRoZSBvcmlnaW5hbCBtYXRyaXggQS4KKgoqICAg\nICAgICAgIElmIEZBQ1QgPSAnRScsIHRoZW4gQUYgaXMgYW4gb3V0cHV0IGFyZ3VtZW50IGFuZCBv\nbiBleGl0CiogICAgICAgICAgcmV0dXJucyB0aGUgZmFjdG9ycyBMIGFuZCBVIGZyb20gdGhlIGZh\nY3Rvcml6YXRpb24gQSA9IFAqTCpVCiogICAgICAgICAgb2YgdGhlIGVxdWlsaWJyYXRlZCBtYXRy\naXggQSAoc2VlIHRoZSBkZXNjcmlwdGlvbiBvZiBBIGZvcgoqICAgICAgICAgIHRoZSBmb3JtIG9m\nIHRoZSBlcXVpbGlicmF0ZWQgbWF0cml4KS4KKgoqICBMREFGICAgIChpbnB1dCkgSU5URUdFUgoq\nICAgICAgICAgIFRoZSBsZWFkaW5nIGRpbWVuc2lvbiBvZiB0aGUgYXJyYXkgQUYuICBMREFGID49\nIG1heCgxLE4pLgoqCiogIElQSVYgICAgKGlucHV0IG9yIG91dHB1dCkgSU5URUdFUiBhcnJheSwg\nZGltZW5zaW9uIChOKQoqICAgICAgICAgIElmIEZBQ1QgPSAnRicsIHRoZW4gSVBJViBpcyBhbiBp\nbnB1dCBhcmd1bWVudCBhbmQgb24gZW50cnkKKiAgICAgICAgICBjb250YWlucyB0aGUgcGl2b3Qg\naW5kaWNlcyBmcm9tIHRoZSBmYWN0b3JpemF0aW9uIEEgPSBQKkwqVQoqICAgICAgICAgIGFzIGNv\nbXB1dGVkIGJ5IERHRVRSRjsgcm93IGkgb2YgdGhlIG1hdHJpeCB3YXMgaW50ZXJjaGFuZ2VkCiog\nICAgICAgICAgd2l0aCByb3cgSVBJVihpKS4KKgoqICAgICAgICAgIElmIEZBQ1QgPSAnTicsIHRo\nZW4gSVBJViBpcyBhbiBvdXRwdXQgYXJndW1lbnQgYW5kIG9uIGV4aXQKKiAgICAgICAgICBjb250\nYWlucyB0aGUgcGl2b3QgaW5kaWNlcyBmcm9tIHRoZSBmYWN0b3JpemF0aW9uIEEgPSBQKkwqVQoq\nICAgICAgICAgIG9mIHRoZSBvcmlnaW5hbCBtYXRyaXggQS4KKgoqICAgICAgICAgIElmIEZBQ1Qg\nPSAnRScsIHRoZW4gSVBJViBpcyBhbiBvdXRwdXQgYXJndW1lbnQgYW5kIG9uIGV4aXQKKiAgICAg\nICAgICBjb250YWlucyB0aGUgcGl2b3QgaW5kaWNlcyBmcm9tIHRoZSBmYWN0b3JpemF0aW9uIEEg\nPSBQKkwqVQoqICAgICAgICAgIG9mIHRoZSBlcXVpbGlicmF0ZWQgbWF0cml4IEEuCioKKiAgRVFV\nRUQgICAoaW5wdXQgb3Igb3V0cHV0KSBDSEFSQUNURVIqMQoqICAgICAgICAgIFNwZWNpZmllcyB0\naGUgZm9ybSBvZiBlcXVpbGlicmF0aW9uIHRoYXQgd2FzIGRvbmUuCiogICAgICAgICAgPSAnTic6\nICBObyBlcXVpbGlicmF0aW9uIChhbHdheXMgdHJ1ZSBpZiBGQUNUID0gJ04nKS4KKiAgICAgICAg\nICA9ICdSJzogIFJvdyBlcXVpbGlicmF0aW9uLCBpLmUuLCBBIGhhcyBiZWVuIHByZW11bHRpcGxp\nZWQgYnkKKiAgICAgICAgICAgICAgICAgIGRpYWcoUikuCiogICAgICAgICAgPSAnQyc6ICBDb2x1\nbW4gZXF1aWxpYnJhdGlvbiwgaS5lLiwgQSBoYXMgYmVlbiBwb3N0bXVsdGlwbGllZAoqICAgICAg\nICAgICAgICAgICAgYnkgZGlhZyhDKS4KKiAgICAgICAgICA9ICdCJzogIEJvdGggcm93IGFuZCBj\nb2x1bW4gZXF1aWxpYnJhdGlvbiwgaS5lLiwgQSBoYXMgYmVlbgoqICAgICAgICAgICAgICAgICAg\ncmVwbGFjZWQgYnkgZGlhZyhSKSAqIEEgKiBkaWFnKEMpLgoqICAgICAgICAgIEVRVUVEIGlzIGFu\nIGlucHV0IGFyZ3VtZW50IGlmIEZBQ1QgPSAnRic7IG90aGVyd2lzZSwgaXQgaXMgYW4KKiAgICAg\nICAgICBvdXRwdXQgYXJndW1lbnQuCioKKiAgUiAgICAgICAoaW5wdXQgb3Igb3V0cHV0KSBET1VC\nTEUgUFJFQ0lTSU9OIGFycmF5LCBkaW1lbnNpb24gKE4pCiogICAgICAgICAgVGhlIHJvdyBzY2Fs\nZSBmYWN0b3JzIGZvciBBLiAgSWYgRVFVRUQgPSAnUicgb3IgJ0InLCBBIGlzCiogICAgICAgICAg\nbXVsdGlwbGllZCBvbiB0aGUgbGVmdCBieSBkaWFnKFIpOyBpZiBFUVVFRCA9ICdOJyBvciAnQycs\nIFIKKiAgICAgICAgICBpcyBub3QgYWNjZXNzZWQuICBSIGlzIGFuIGlucHV0IGFyZ3VtZW50IGlm\nIEZBQ1QgPSAnRic7CiogICAgICAgICAgb3RoZXJ3aXNlLCBSIGlzIGFuIG91dHB1dCBhcmd1bWVu\ndC4gIElmIEZBQ1QgPSAnRicgYW5kCiogICAgICAgICAgRVFVRUQgPSAnUicgb3IgJ0InLCBlYWNo\nIGVsZW1lbnQgb2YgUiBtdXN0IGJlIHBvc2l0aXZlLgoqCiogIEMgICAgICAgKGlucHV0IG9yIG91\ndHB1dCkgRE9VQkxFIFBSRUNJU0lPTiBhcnJheSwgZGltZW5zaW9uIChOKQoqICAgICAgICAgIFRo\nZSBjb2x1bW4gc2NhbGUgZmFjdG9ycyBmb3IgQS4gIElmIEVRVUVEID0gJ0MnIG9yICdCJywgQSBp\ncwoqICAgICAgICAgIG11bHRpcGxpZWQgb24gdGhlIHJpZ2h0IGJ5IGRpYWcoQyk7IGlmIEVRVUVE\nID0gJ04nIG9yICdSJywgQwoqICAgICAgICAgIGlzIG5vdCBhY2Nlc3NlZC4gIEMgaXMgYW4gaW5w\ndXQgYXJndW1lbnQgaWYgRkFDVCA9ICdGJzsKKiAgICAgICAgICBvdGhlcndpc2UsIEMgaXMgYW4g\nb3V0cHV0IGFyZ3VtZW50LiAgSWYgRkFDVCA9ICdGJyBhbmQKKiAgICAgICAgICBFUVVFRCA9ICdD\nJyBvciAnQicsIGVhY2ggZWxlbWVudCBvZiBDIG11c3QgYmUgcG9zaXRpdmUuCioKKiAgQiAgICAg\nICAoaW5wdXQvb3V0cHV0KSBET1VCTEUgUFJFQ0lTSU9OIGFycmF5LCBkaW1lbnNpb24gKExEQixO\nUkhTKQoqICAgICAgICAgIE9uIGVudHJ5LCB0aGUgTi1ieS1OUkhTIHJpZ2h0IGhhbmQgc2lkZSBt\nYXRyaXggQi4KKiAgICAgICAgICBPbiBleGl0LAoqICAgICAgICAgIGlmIEVRVUVEID0gJ04nLCBC\nIGlzIG5vdCBtb2RpZmllZDsKKiAgICAgICAgICBpZiBUUkFOUyA9ICdOJyBhbmQgRVFVRUQgPSAn\nUicgb3IgJ0InLCBCIGlzIG92ZXJ3cml0dGVuIGJ5CiogICAgICAgICAgZGlhZyhSKSpCOwoqICAg\nICAgICAgIGlmIFRSQU5TID0gJ1QnIG9yICdDJyBhbmQgRVFVRUQgPSAnQycgb3IgJ0InLCBCIGlz\nCiogICAgICAgICAgb3ZlcndyaXR0ZW4gYnkgZGlhZyhDKSpCLgoqCiogIExEQiAgICAgKGlucHV0\nKSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBC\nLiAgTERCID49IG1heCgxLE4pLgoqCiogIFggICAgICAgKG91dHB1dCkgRE9VQkxFIFBSRUNJU0lP\nTiBhcnJheSwgZGltZW5zaW9uIChMRFgsTlJIUykKKiAgICAgICAgICBJZiBJTkZPID0gMCBvciBJ\nTkZPID0gTisxLCB0aGUgTi1ieS1OUkhTIHNvbHV0aW9uIG1hdHJpeCBYCiogICAgICAgICAgdG8g\ndGhlIG9yaWdpbmFsIHN5c3RlbSBvZiBlcXVhdGlvbnMuICBOb3RlIHRoYXQgQSBhbmQgQiBhcmUK\nKiAgICAgICAgICBtb2RpZmllZCBvbiBleGl0IGlmIEVRVUVEIC5uZS4gJ04nLCBhbmQgdGhlIHNv\nbHV0aW9uIHRvIHRoZQoqICAgICAgICAgIGVxdWlsaWJyYXRlZCBzeXN0ZW0gaXMgaW52KGRpYWco\nQykpKlggaWYgVFJBTlMgPSAnTicgYW5kCiogICAgICAgICAgRVFVRUQgPSAnQycgb3IgJ0InLCBv\nciBpbnYoZGlhZyhSKSkqWCBpZiBUUkFOUyA9ICdUJyBvciAnQycKKiAgICAgICAgICBhbmQgRVFV\nRUQgPSAnUicgb3IgJ0InLgoqCiogIExEWCAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAg\nVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBYLiAgTERYID49IG1heCgxLE4pLgoq\nCiogIFJDT05EICAgKG91dHB1dCkgRE9VQkxFIFBSRUNJU0lPTgoqICAgICAgICAgIFRoZSBlc3Rp\nbWF0ZSBvZiB0aGUgcmVjaXByb2NhbCBjb25kaXRpb24gbnVtYmVyIG9mIHRoZSBtYXRyaXgKKiAg\nICAgICAgICBBIGFmdGVyIGVxdWlsaWJyYXRpb24gKGlmIGRvbmUpLiAgSWYgUkNPTkQgaXMgbGVz\ncyB0aGFuIHRoZQoqICAgICAgICAgIG1hY2hpbmUgcHJlY2lzaW9uIChpbiBwYXJ0aWN1bGFyLCBp\nZiBSQ09ORCA9IDApLCB0aGUgbWF0cml4CiogICAgICAgICAgaXMgc2luZ3VsYXIgdG8gd29ya2lu\nZyBwcmVjaXNpb24uICBUaGlzIGNvbmRpdGlvbiBpcwoqICAgICAgICAgIGluZGljYXRlZCBieSBh\nIHJldHVybiBjb2RlIG9mIElORk8gPiAwLgoqCiogIEZFUlIgICAgKG91dHB1dCkgRE9VQkxFIFBS\nRUNJU0lPTiBhcnJheSwgZGltZW5zaW9uIChOUkhTKQoqICAgICAgICAgIFRoZSBlc3RpbWF0ZWQg\nZm9yd2FyZCBlcnJvciBib3VuZCBmb3IgZWFjaCBzb2x1dGlvbiB2ZWN0b3IKKiAgICAgICAgICBY\nKGopICh0aGUgai10aCBjb2x1bW4gb2YgdGhlIHNvbHV0aW9uIG1hdHJpeCBYKS4KKiAgICAgICAg\nICBJZiBYVFJVRSBpcyB0aGUgdHJ1ZSBzb2x1dGlvbiBjb3JyZXNwb25kaW5nIHRvIFgoaiksIEZF\nUlIoaikKKiAgICAgICAgICBpcyBhbiBlc3RpbWF0ZWQgdXBwZXIgYm91bmQgZm9yIHRoZSBtYWdu\naXR1ZGUgb2YgdGhlIGxhcmdlc3QKKiAgICAgICAgICBlbGVtZW50IGluIChYKGopIC0gWFRSVUUp\nIGRpdmlkZWQgYnkgdGhlIG1hZ25pdHVkZSBvZiB0aGUKKiAgICAgICAgICBsYXJnZXN0IGVsZW1l\nbnQgaW4gWChqKS4gIFRoZSBlc3RpbWF0ZSBpcyBhcyByZWxpYWJsZSBhcwoqICAgICAgICAgIHRo\nZSBlc3RpbWF0ZSBmb3IgUkNPTkQsIGFuZCBpcyBhbG1vc3QgYWx3YXlzIGEgc2xpZ2h0CiogICAg\nICAgICAgb3ZlcmVzdGltYXRlIG9mIHRoZSB0cnVlIGVycm9yLgoqCiogIEJFUlIgICAgKG91dHB1\ndCkgRE9VQkxFIFBSRUNJU0lPTiBhcnJheSwgZGltZW5zaW9uIChOUkhTKQoqICAgICAgICAgIFRo\nZSBjb21wb25lbnR3aXNlIHJlbGF0aXZlIGJhY2t3YXJkIGVycm9yIG9mIGVhY2ggc29sdXRpb24K\nKiAgICAgICAgICB2ZWN0b3IgWChqKSAoaS5lLiwgdGhlIHNtYWxsZXN0IHJlbGF0aXZlIGNoYW5n\nZSBpbgoqICAgICAgICAgIGFueSBlbGVtZW50IG9mIEEgb3IgQiB0aGF0IG1ha2VzIFgoaikgYW4g\nZXhhY3Qgc29sdXRpb24pLgoqCiogIFdPUksgICAgKHdvcmtzcGFjZS9vdXRwdXQpIERPVUJMRSBQ\nUkVDSVNJT04gYXJyYXksIGRpbWVuc2lvbiAoNCpOKQoqICAgICAgICAgIE9uIGV4aXQsIFdPUkso\nMSkgY29udGFpbnMgdGhlIHJlY2lwcm9jYWwgcGl2b3QgZ3Jvd3RoCiogICAgICAgICAgZmFjdG9y\nIG5vcm0oQSkvbm9ybShVKS4gVGhlICJtYXggYWJzb2x1dGUgZWxlbWVudCIgbm9ybSBpcwoqICAg\nICAgICAgIHVzZWQuIElmIFdPUksoMSkgaXMgbXVjaCBsZXNzIHRoYW4gMSwgdGhlbiB0aGUgc3Rh\nYmlsaXR5CiogICAgICAgICAgb2YgdGhlIExVIGZhY3Rvcml6YXRpb24gb2YgdGhlIChlcXVpbGli\ncmF0ZWQpIG1hdHJpeCBBCiogICAgICAgICAgY291bGQgYmUgcG9vci4gVGhpcyBhbHNvIG1lYW5z\nIHRoYXQgdGhlIHNvbHV0aW9uIFgsIGNvbmRpdGlvbgoqICAgICAgICAgIGVzdGltYXRvciBSQ09O\nRCwgYW5kIGZvcndhcmQgZXJyb3IgYm91bmQgRkVSUiBjb3VsZCBiZQoqICAgICAgICAgIHVucmVs\naWFibGUuIElmIGZhY3Rvcml6YXRpb24gZmFpbHMgd2l0aCAwPElORk88PU4sIHRoZW4KKiAgICAg\nICAgICBXT1JLKDEpIGNvbnRhaW5zIHRoZSByZWNpcHJvY2FsIHBpdm90IGdyb3d0aCBmYWN0b3Ig\nZm9yIHRoZQoqICAgICAgICAgIGxlYWRpbmcgSU5GTyBjb2x1bW5zIG9mIEEuCioKKiAgSVdPUksg\nICAod29ya3NwYWNlKSBJTlRFR0VSIGFycmF5LCBkaW1lbnNpb24gKE4pCioKKiAgSU5GTyAgICAo\nb3V0cHV0KSBJTlRFR0VSCiogICAgICAgICAgPSAwOiAgc3VjY2Vzc2Z1bCBleGl0CiogICAgICAg\nICAgPCAwOiAgaWYgSU5GTyA9IC1pLCB0aGUgaS10aCBhcmd1bWVudCBoYWQgYW4gaWxsZWdhbCB2\nYWx1ZQoqICAgICAgICAgID4gMDogIGlmIElORk8gPSBpLCBhbmQgaSBpcwoqICAgICAgICAgICAg\nICAgIDw9IE46ICBVKGksaSkgaXMgZXhhY3RseSB6ZXJvLiAgVGhlIGZhY3Rvcml6YXRpb24gaGFz\nCiogICAgICAgICAgICAgICAgICAgICAgIGJlZW4gY29tcGxldGVkLCBidXQgdGhlIGZhY3RvciBV\nIGlzIGV4YWN0bHkKKiAgICAgICAgICAgICAgICAgICAgICAgc2luZ3VsYXIsIHNvIHRoZSBzb2x1\ndGlvbiBhbmQgZXJyb3IgYm91bmRzCiogICAgICAgICAgICAgICAgICAgICAgIGNvdWxkIG5vdCBi\nZSBjb21wdXRlZC4gUkNPTkQgPSAwIGlzIHJldHVybmVkLgoqICAgICAgICAgICAgICAgID0gTisx\nOiBVIGlzIG5vbnNpbmd1bGFyLCBidXQgUkNPTkQgaXMgbGVzcyB0aGFuIG1hY2hpbmUKKiAgICAg\nICAgICAgICAgICAgICAgICAgcHJlY2lzaW9uLCBtZWFuaW5nIHRoYXQgdGhlIG1hdHJpeCBpcyBz\naW5ndWxhcgoqICAgICAgICAgICAgICAgICAgICAgICB0byB3b3JraW5nIHByZWNpc2lvbi4gIE5l\ndmVydGhlbGVzcywgdGhlCiogICAgICAgICAgICAgICAgICAgICAgIHNvbHV0aW9uIGFuZCBlcnJv\nciBib3VuZHMgYXJlIGNvbXB1dGVkIGJlY2F1c2UKKiAgICAgICAgICAgICAgICAgICAgICAgdGhl\ncmUgYXJlIGEgbnVtYmVyIG9mIHNpdHVhdGlvbnMgd2hlcmUgdGhlCiogICAgICAgICAgICAgICAg\nICAgICAgIGNvbXB1dGVkIHNvbHV0aW9uIGNhbiBiZSBtb3JlIGFjY3VyYXRlIHRoYW4gdGhlCiog\nICAgICAgICAgICAgICAgICAgICAgIHZhbHVlIG9mIFJDT05EIHdvdWxkIHN1Z2dlc3QuCioKcgAD\nAABohmiHKYFyAQMAAH1yAgMAAChoioloi2iMdWJomIoBKmiZWA0AAABkZ2VzdnhfNDIudHh0cgMD\nAAB1YmibigEqaJxYBQAAAGdlc3Z4cgQDAABomIoBKnViaH1oYV1ofodScgUDAAB9cgYDAAAoaIFY\nBwAAAGdlbmVyYWxyBwMAAGiDWAQAAABmdWxscggDAABocVhkAAAAZHJpdmVyIGV4cGVydCwgc29s\ndmUgQSpYID0gQiwgQ29uZGl0aW9uIE51bWJlciwgRXJyb3IgQm91bmRzLCBSZWZpbmUsIEZhY3Rv\nciwgRXF1aWxpYnJhdGUsIFRyYW5zcG9zZXIJAwAAaIZohymBcgoDAAB9cgsDAAAoaIqJaItojHVi\naI1YLQAAAGh0dHA6Ly93d3cubmV0bGliLm9yZy9sYXBhY2svY29tcGxleC9jZ2VzdnguZnIMAwAA\naI9YAQAAAGNokGh9aJFdaH6HUnINAwAAfXIOAwAAKGiUWPAsAAAgICAgICBTVUJST1VUSU5FIENH\nRVNWWCggRkFDVCwgVFJBTlMsIE4sIE5SSFMsIEEsIExEQSwgQUYsIExEQUYsIElQSVYsCiAgICAg\nJCAgICAgICAgICAgICAgICAgICBFUVVFRCwgUiwgQywgQiwgTERCLCBYLCBMRFgsIFJDT05ELCBG\nRVJSLCBCRVJSLAogICAgICQgICAgICAgICAgICAgICAgICAgV09SSywgUldPUkssIElORk8gKQoq\nCiogIC0tIExBUEFDSyBkcml2ZXIgcm91dGluZSAodmVyc2lvbiAzLjIpIC0tCiogIC0tIExBUEFD\nSyBpcyBhIHNvZnR3YXJlIHBhY2thZ2UgcHJvdmlkZWQgYnkgVW5pdi4gb2YgVGVubmVzc2VlLCAg\nICAtLQoqICAtLSBVbml2LiBvZiBDYWxpZm9ybmlhIEJlcmtlbGV5LCBVbml2LiBvZiBDb2xvcmFk\nbyBEZW52ZXIgYW5kIE5BRyBMdGQuLi0tCiogICAgIE5vdmVtYmVyIDIwMDYKKgoqICAgICAuLiBT\nY2FsYXIgQXJndW1lbnRzIC4uCiAgICAgIENIQVJBQ1RFUiAgICAgICAgICBFUVVFRCwgRkFDVCwg\nVFJBTlMKICAgICAgSU5URUdFUiAgICAgICAgICAgIElORk8sIExEQSwgTERBRiwgTERCLCBMRFgs\nIE4sIE5SSFMKICAgICAgUkVBTCAgICAgICAgICAgICAgIFJDT05ECiogICAgIC4uCiogICAgIC4u\nIEFycmF5IEFyZ3VtZW50cyAuLgogICAgICBJTlRFR0VSICAgICAgICAgICAgSVBJViggKiApCiAg\nICAgIFJFQUwgICAgICAgICAgICAgICBCRVJSKCAqICksIEMoICogKSwgRkVSUiggKiApLCBSKCAq\nICksCiAgICAgJCAgICAgICAgICAgICAgICAgICBSV09SSyggKiApCiAgICAgIENPTVBMRVggICAg\nICAgICAgICBBKCBMREEsICogKSwgQUYoIExEQUYsICogKSwgQiggTERCLCAqICksCiAgICAgJCAg\nICAgICAgICAgICAgICAgICBXT1JLKCAqICksIFgoIExEWCwgKiApCiogICAgIC4uCioKKiAgUHVy\ncG9zZQoqICA9PT09PT09CioKKiAgQ0dFU1ZYIHVzZXMgdGhlIExVIGZhY3Rvcml6YXRpb24gdG8g\nY29tcHV0ZSB0aGUgc29sdXRpb24gdG8gYSBjb21wbGV4CiogIHN5c3RlbSBvZiBsaW5lYXIgZXF1\nYXRpb25zCiogICAgIEEgKiBYID0gQiwKKiAgd2hlcmUgQSBpcyBhbiBOLWJ5LU4gbWF0cml4IGFu\nZCBYIGFuZCBCIGFyZSBOLWJ5LU5SSFMgbWF0cmljZXMuCioKKiAgRXJyb3IgYm91bmRzIG9uIHRo\nZSBzb2x1dGlvbiBhbmQgYSBjb25kaXRpb24gZXN0aW1hdGUgYXJlIGFsc28KKiAgcHJvdmlkZWQu\nCioKKiAgRGVzY3JpcHRpb24KKiAgPT09PT09PT09PT0KKgoqICBUaGUgZm9sbG93aW5nIHN0ZXBz\nIGFyZSBwZXJmb3JtZWQ6CioKKiAgMS4gSWYgRkFDVCA9ICdFJywgcmVhbCBzY2FsaW5nIGZhY3Rv\ncnMgYXJlIGNvbXB1dGVkIHRvIGVxdWlsaWJyYXRlCiogICAgIHRoZSBzeXN0ZW06CiogICAgICAg\nIFRSQU5TID0gJ04nOiAgZGlhZyhSKSpBKmRpYWcoQykgICAgICppbnYoZGlhZyhDKSkqWCA9IGRp\nYWcoUikqQgoqICAgICAgICBUUkFOUyA9ICdUJzogKGRpYWcoUikqQSpkaWFnKEMpKSoqVCAqaW52\nKGRpYWcoUikpKlggPSBkaWFnKEMpKkIKKiAgICAgICAgVFJBTlMgPSAnQyc6IChkaWFnKFIpKkEq\nZGlhZyhDKSkqKkggKmludihkaWFnKFIpKSpYID0gZGlhZyhDKSpCCiogICAgIFdoZXRoZXIgb3Ig\nbm90IHRoZSBzeXN0ZW0gd2lsbCBiZSBlcXVpbGlicmF0ZWQgZGVwZW5kcyBvbiB0aGUKKiAgICAg\nc2NhbGluZyBvZiB0aGUgbWF0cml4IEEsIGJ1dCBpZiBlcXVpbGlicmF0aW9uIGlzIHVzZWQsIEEg\naXMKKiAgICAgb3ZlcndyaXR0ZW4gYnkgZGlhZyhSKSpBKmRpYWcoQykgYW5kIEIgYnkgZGlhZyhS\nKSpCIChpZiBUUkFOUz0nTicpCiogICAgIG9yIGRpYWcoQykqQiAoaWYgVFJBTlMgPSAnVCcgb3Ig\nJ0MnKS4KKgoqICAyLiBJZiBGQUNUID0gJ04nIG9yICdFJywgdGhlIExVIGRlY29tcG9zaXRpb24g\naXMgdXNlZCB0byBmYWN0b3IgdGhlCiogICAgIG1hdHJpeCBBIChhZnRlciBlcXVpbGlicmF0aW9u\nIGlmIEZBQ1QgPSAnRScpIGFzCiogICAgICAgIEEgPSBQICogTCAqIFUsCiogICAgIHdoZXJlIFAg\naXMgYSBwZXJtdXRhdGlvbiBtYXRyaXgsIEwgaXMgYSB1bml0IGxvd2VyIHRyaWFuZ3VsYXIKKiAg\nICAgbWF0cml4LCBhbmQgVSBpcyB1cHBlciB0cmlhbmd1bGFyLgoqCiogIDMuIElmIHNvbWUgVShp\nLGkpPTAsIHNvIHRoYXQgVSBpcyBleGFjdGx5IHNpbmd1bGFyLCB0aGVuIHRoZSByb3V0aW5lCiog\nICAgIHJldHVybnMgd2l0aCBJTkZPID0gaS4gT3RoZXJ3aXNlLCB0aGUgZmFjdG9yZWQgZm9ybSBv\nZiBBIGlzIHVzZWQKKiAgICAgdG8gZXN0aW1hdGUgdGhlIGNvbmRpdGlvbiBudW1iZXIgb2YgdGhl\nIG1hdHJpeCBBLiAgSWYgdGhlCiogICAgIHJlY2lwcm9jYWwgb2YgdGhlIGNvbmRpdGlvbiBudW1i\nZXIgaXMgbGVzcyB0aGFuIG1hY2hpbmUgcHJlY2lzaW9uLAoqICAgICBJTkZPID0gTisxIGlzIHJl\ndHVybmVkIGFzIGEgd2FybmluZywgYnV0IHRoZSByb3V0aW5lIHN0aWxsIGdvZXMgb24KKiAgICAg\ndG8gc29sdmUgZm9yIFggYW5kIGNvbXB1dGUgZXJyb3IgYm91bmRzIGFzIGRlc2NyaWJlZCBiZWxv\ndy4KKgoqICA0LiBUaGUgc3lzdGVtIG9mIGVxdWF0aW9ucyBpcyBzb2x2ZWQgZm9yIFggdXNpbmcg\ndGhlIGZhY3RvcmVkIGZvcm0KKiAgICAgb2YgQS4KKgoqICA1LiBJdGVyYXRpdmUgcmVmaW5lbWVu\ndCBpcyBhcHBsaWVkIHRvIGltcHJvdmUgdGhlIGNvbXB1dGVkIHNvbHV0aW9uCiogICAgIG1hdHJp\neCBhbmQgY2FsY3VsYXRlIGVycm9yIGJvdW5kcyBhbmQgYmFja3dhcmQgZXJyb3IgZXN0aW1hdGVz\nCiogICAgIGZvciBpdC4KKgoqICA2LiBJZiBlcXVpbGlicmF0aW9uIHdhcyB1c2VkLCB0aGUgbWF0\ncml4IFggaXMgcHJlbXVsdGlwbGllZCBieQoqICAgICBkaWFnKEMpIChpZiBUUkFOUyA9ICdOJykg\nb3IgZGlhZyhSKSAoaWYgVFJBTlMgPSAnVCcgb3IgJ0MnKSBzbwoqICAgICB0aGF0IGl0IHNvbHZl\ncyB0aGUgb3JpZ2luYWwgc3lzdGVtIGJlZm9yZSBlcXVpbGlicmF0aW9uLgoqCiogIEFyZ3VtZW50\ncwoqICA9PT09PT09PT0KKgoqICBGQUNUICAgIChpbnB1dCkgQ0hBUkFDVEVSKjEKKiAgICAgICAg\nICBTcGVjaWZpZXMgd2hldGhlciBvciBub3QgdGhlIGZhY3RvcmVkIGZvcm0gb2YgdGhlIG1hdHJp\neCBBIGlzCiogICAgICAgICAgc3VwcGxpZWQgb24gZW50cnksIGFuZCBpZiBub3QsIHdoZXRoZXIg\ndGhlIG1hdHJpeCBBIHNob3VsZCBiZQoqICAgICAgICAgIGVxdWlsaWJyYXRlZCBiZWZvcmUgaXQg\naXMgZmFjdG9yZWQuCiogICAgICAgICAgPSAnRic6ICBPbiBlbnRyeSwgQUYgYW5kIElQSVYgY29u\ndGFpbiB0aGUgZmFjdG9yZWQgZm9ybSBvZiBBLgoqICAgICAgICAgICAgICAgICAgSWYgRVFVRUQg\naXMgbm90ICdOJywgdGhlIG1hdHJpeCBBIGhhcyBiZWVuCiogICAgICAgICAgICAgICAgICBlcXVp\nbGlicmF0ZWQgd2l0aCBzY2FsaW5nIGZhY3RvcnMgZ2l2ZW4gYnkgUiBhbmQgQy4KKiAgICAgICAg\nICAgICAgICAgIEEsIEFGLCBhbmQgSVBJViBhcmUgbm90IG1vZGlmaWVkLgoqICAgICAgICAgID0g\nJ04nOiAgVGhlIG1hdHJpeCBBIHdpbGwgYmUgY29waWVkIHRvIEFGIGFuZCBmYWN0b3JlZC4KKiAg\nICAgICAgICA9ICdFJzogIFRoZSBtYXRyaXggQSB3aWxsIGJlIGVxdWlsaWJyYXRlZCBpZiBuZWNl\nc3NhcnksIHRoZW4KKiAgICAgICAgICAgICAgICAgIGNvcGllZCB0byBBRiBhbmQgZmFjdG9yZWQu\nCioKKiAgVFJBTlMgICAoaW5wdXQpIENIQVJBQ1RFUioxCiogICAgICAgICAgU3BlY2lmaWVzIHRo\nZSBmb3JtIG9mIHRoZSBzeXN0ZW0gb2YgZXF1YXRpb25zOgoqICAgICAgICAgID0gJ04nOiAgQSAq\nIFggPSBCICAgICAoTm8gdHJhbnNwb3NlKQoqICAgICAgICAgID0gJ1QnOiAgQSoqVCAqIFggPSBC\nICAoVHJhbnNwb3NlKQoqICAgICAgICAgID0gJ0MnOiAgQSoqSCAqIFggPSBCICAoQ29uanVnYXRl\nIHRyYW5zcG9zZSkKKgoqICBOICAgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBu\ndW1iZXIgb2YgbGluZWFyIGVxdWF0aW9ucywgaS5lLiwgdGhlIG9yZGVyIG9mIHRoZQoqICAgICAg\nICAgIG1hdHJpeCBBLiAgTiA+PSAwLgoqCiogIE5SSFMgICAgKGlucHV0KSBJTlRFR0VSCiogICAg\nICAgICAgVGhlIG51bWJlciBvZiByaWdodCBoYW5kIHNpZGVzLCBpLmUuLCB0aGUgbnVtYmVyIG9m\nIGNvbHVtbnMKKiAgICAgICAgICBvZiB0aGUgbWF0cmljZXMgQiBhbmQgWC4gIE5SSFMgPj0gMC4K\nKgoqICBBICAgICAgIChpbnB1dC9vdXRwdXQpIENPTVBMRVggYXJyYXksIGRpbWVuc2lvbiAoTERB\nLE4pCiogICAgICAgICAgT24gZW50cnksIHRoZSBOLWJ5LU4gbWF0cml4IEEuICBJZiBGQUNUID0g\nJ0YnIGFuZCBFUVVFRCBpcwoqICAgICAgICAgIG5vdCAnTicsIHRoZW4gQSBtdXN0IGhhdmUgYmVl\nbiBlcXVpbGlicmF0ZWQgYnkgdGhlIHNjYWxpbmcKKiAgICAgICAgICBmYWN0b3JzIGluIFIgYW5k\nL29yIEMuICBBIGlzIG5vdCBtb2RpZmllZCBpZiBGQUNUID0gJ0YnIG9yCiogICAgICAgICAgJ04n\nLCBvciBpZiBGQUNUID0gJ0UnIGFuZCBFUVVFRCA9ICdOJyBvbiBleGl0LgoqCiogICAgICAgICAg\nT24gZXhpdCwgaWYgRVFVRUQgLm5lLiAnTicsIEEgaXMgc2NhbGVkIGFzIGZvbGxvd3M6CiogICAg\nICAgICAgRVFVRUQgPSAnUic6ICBBIDo9IGRpYWcoUikgKiBBCiogICAgICAgICAgRVFVRUQgPSAn\nQyc6ICBBIDo9IEEgKiBkaWFnKEMpCiogICAgICAgICAgRVFVRUQgPSAnQic6ICBBIDo9IGRpYWco\nUikgKiBBICogZGlhZyhDKS4KKgoqICBMREEgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAg\nIFRoZSBsZWFkaW5nIGRpbWVuc2lvbiBvZiB0aGUgYXJyYXkgQS4gIExEQSA+PSBtYXgoMSxOKS4K\nKgoqICBBRiAgICAgIChpbnB1dCBvciBvdXRwdXQpIENPTVBMRVggYXJyYXksIGRpbWVuc2lvbiAo\nTERBRixOKQoqICAgICAgICAgIElmIEZBQ1QgPSAnRicsIHRoZW4gQUYgaXMgYW4gaW5wdXQgYXJn\ndW1lbnQgYW5kIG9uIGVudHJ5CiogICAgICAgICAgY29udGFpbnMgdGhlIGZhY3RvcnMgTCBhbmQg\nVSBmcm9tIHRoZSBmYWN0b3JpemF0aW9uCiogICAgICAgICAgQSA9IFAqTCpVIGFzIGNvbXB1dGVk\nIGJ5IENHRVRSRi4gIElmIEVRVUVEIC5uZS4gJ04nLCB0aGVuCiogICAgICAgICAgQUYgaXMgdGhl\nIGZhY3RvcmVkIGZvcm0gb2YgdGhlIGVxdWlsaWJyYXRlZCBtYXRyaXggQS4KKgoqICAgICAgICAg\nIElmIEZBQ1QgPSAnTicsIHRoZW4gQUYgaXMgYW4gb3V0cHV0IGFyZ3VtZW50IGFuZCBvbiBleGl0\nCiogICAgICAgICAgcmV0dXJucyB0aGUgZmFjdG9ycyBMIGFuZCBVIGZyb20gdGhlIGZhY3Rvcml6\nYXRpb24gQSA9IFAqTCpVCiogICAgICAgICAgb2YgdGhlIG9yaWdpbmFsIG1hdHJpeCBBLgoqCiog\nICAgICAgICAgSWYgRkFDVCA9ICdFJywgdGhlbiBBRiBpcyBhbiBvdXRwdXQgYXJndW1lbnQgYW5k\nIG9uIGV4aXQKKiAgICAgICAgICByZXR1cm5zIHRoZSBmYWN0b3JzIEwgYW5kIFUgZnJvbSB0aGUg\nZmFjdG9yaXphdGlvbiBBID0gUCpMKlUKKiAgICAgICAgICBvZiB0aGUgZXF1aWxpYnJhdGVkIG1h\ndHJpeCBBIChzZWUgdGhlIGRlc2NyaXB0aW9uIG9mIEEgZm9yCiogICAgICAgICAgdGhlIGZvcm0g\nb2YgdGhlIGVxdWlsaWJyYXRlZCBtYXRyaXgpLgoqCiogIExEQUYgICAgKGlucHV0KSBJTlRFR0VS\nCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBBRi4gIExEQUYg\nPj0gbWF4KDEsTikuCioKKiAgSVBJViAgICAoaW5wdXQgb3Igb3V0cHV0KSBJTlRFR0VSIGFycmF5\nLCBkaW1lbnNpb24gKE4pCiogICAgICAgICAgSWYgRkFDVCA9ICdGJywgdGhlbiBJUElWIGlzIGFu\nIGlucHV0IGFyZ3VtZW50IGFuZCBvbiBlbnRyeQoqICAgICAgICAgIGNvbnRhaW5zIHRoZSBwaXZv\ndCBpbmRpY2VzIGZyb20gdGhlIGZhY3Rvcml6YXRpb24gQSA9IFAqTCpVCiogICAgICAgICAgYXMg\nY29tcHV0ZWQgYnkgQ0dFVFJGOyByb3cgaSBvZiB0aGUgbWF0cml4IHdhcyBpbnRlcmNoYW5nZWQK\nKiAgICAgICAgICB3aXRoIHJvdyBJUElWKGkpLgoqCiogICAgICAgICAgSWYgRkFDVCA9ICdOJywg\ndGhlbiBJUElWIGlzIGFuIG91dHB1dCBhcmd1bWVudCBhbmQgb24gZXhpdAoqICAgICAgICAgIGNv\nbnRhaW5zIHRoZSBwaXZvdCBpbmRpY2VzIGZyb20gdGhlIGZhY3Rvcml6YXRpb24gQSA9IFAqTCpV\nCiogICAgICAgICAgb2YgdGhlIG9yaWdpbmFsIG1hdHJpeCBBLgoqCiogICAgICAgICAgSWYgRkFD\nVCA9ICdFJywgdGhlbiBJUElWIGlzIGFuIG91dHB1dCBhcmd1bWVudCBhbmQgb24gZXhpdAoqICAg\nICAgICAgIGNvbnRhaW5zIHRoZSBwaXZvdCBpbmRpY2VzIGZyb20gdGhlIGZhY3Rvcml6YXRpb24g\nQSA9IFAqTCpVCiogICAgICAgICAgb2YgdGhlIGVxdWlsaWJyYXRlZCBtYXRyaXggQS4KKgoqICBF\nUVVFRCAgIChpbnB1dCBvciBvdXRwdXQpIENIQVJBQ1RFUioxCiogICAgICAgICAgU3BlY2lmaWVz\nIHRoZSBmb3JtIG9mIGVxdWlsaWJyYXRpb24gdGhhdCB3YXMgZG9uZS4KKiAgICAgICAgICA9ICdO\nJzogIE5vIGVxdWlsaWJyYXRpb24gKGFsd2F5cyB0cnVlIGlmIEZBQ1QgPSAnTicpLgoqICAgICAg\nICAgID0gJ1InOiAgUm93IGVxdWlsaWJyYXRpb24sIGkuZS4sIEEgaGFzIGJlZW4gcHJlbXVsdGlw\nbGllZCBieQoqICAgICAgICAgICAgICAgICAgZGlhZyhSKS4KKiAgICAgICAgICA9ICdDJzogIENv\nbHVtbiBlcXVpbGlicmF0aW9uLCBpLmUuLCBBIGhhcyBiZWVuIHBvc3RtdWx0aXBsaWVkCiogICAg\nICAgICAgICAgICAgICBieSBkaWFnKEMpLgoqICAgICAgICAgID0gJ0InOiAgQm90aCByb3cgYW5k\nIGNvbHVtbiBlcXVpbGlicmF0aW9uLCBpLmUuLCBBIGhhcyBiZWVuCiogICAgICAgICAgICAgICAg\nICByZXBsYWNlZCBieSBkaWFnKFIpICogQSAqIGRpYWcoQykuCiogICAgICAgICAgRVFVRUQgaXMg\nYW4gaW5wdXQgYXJndW1lbnQgaWYgRkFDVCA9ICdGJzsgb3RoZXJ3aXNlLCBpdCBpcyBhbgoqICAg\nICAgICAgIG91dHB1dCBhcmd1bWVudC4KKgoqICBSICAgICAgIChpbnB1dCBvciBvdXRwdXQpIFJF\nQUwgYXJyYXksIGRpbWVuc2lvbiAoTikKKiAgICAgICAgICBUaGUgcm93IHNjYWxlIGZhY3RvcnMg\nZm9yIEEuICBJZiBFUVVFRCA9ICdSJyBvciAnQicsIEEgaXMKKiAgICAgICAgICBtdWx0aXBsaWVk\nIG9uIHRoZSBsZWZ0IGJ5IGRpYWcoUik7IGlmIEVRVUVEID0gJ04nIG9yICdDJywgUgoqICAgICAg\nICAgIGlzIG5vdCBhY2Nlc3NlZC4gIFIgaXMgYW4gaW5wdXQgYXJndW1lbnQgaWYgRkFDVCA9ICdG\nJzsKKiAgICAgICAgICBvdGhlcndpc2UsIFIgaXMgYW4gb3V0cHV0IGFyZ3VtZW50LiAgSWYgRkFD\nVCA9ICdGJyBhbmQKKiAgICAgICAgICBFUVVFRCA9ICdSJyBvciAnQicsIGVhY2ggZWxlbWVudCBv\nZiBSIG11c3QgYmUgcG9zaXRpdmUuCioKKiAgQyAgICAgICAoaW5wdXQgb3Igb3V0cHV0KSBSRUFM\nIGFycmF5LCBkaW1lbnNpb24gKE4pCiogICAgICAgICAgVGhlIGNvbHVtbiBzY2FsZSBmYWN0b3Jz\nIGZvciBBLiAgSWYgRVFVRUQgPSAnQycgb3IgJ0InLCBBIGlzCiogICAgICAgICAgbXVsdGlwbGll\nZCBvbiB0aGUgcmlnaHQgYnkgZGlhZyhDKTsgaWYgRVFVRUQgPSAnTicgb3IgJ1InLCBDCiogICAg\nICAgICAgaXMgbm90IGFjY2Vzc2VkLiAgQyBpcyBhbiBpbnB1dCBhcmd1bWVudCBpZiBGQUNUID0g\nJ0YnOwoqICAgICAgICAgIG90aGVyd2lzZSwgQyBpcyBhbiBvdXRwdXQgYXJndW1lbnQuICBJZiBG\nQUNUID0gJ0YnIGFuZAoqICAgICAgICAgIEVRVUVEID0gJ0MnIG9yICdCJywgZWFjaCBlbGVtZW50\nIG9mIEMgbXVzdCBiZSBwb3NpdGl2ZS4KKgoqICBCICAgICAgIChpbnB1dC9vdXRwdXQpIENPTVBM\nRVggYXJyYXksIGRpbWVuc2lvbiAoTERCLE5SSFMpCiogICAgICAgICAgT24gZW50cnksIHRoZSBO\nLWJ5LU5SSFMgcmlnaHQgaGFuZCBzaWRlIG1hdHJpeCBCLgoqICAgICAgICAgIE9uIGV4aXQsCiog\nICAgICAgICAgaWYgRVFVRUQgPSAnTicsIEIgaXMgbm90IG1vZGlmaWVkOwoqICAgICAgICAgIGlm\nIFRSQU5TID0gJ04nIGFuZCBFUVVFRCA9ICdSJyBvciAnQicsIEIgaXMgb3ZlcndyaXR0ZW4gYnkK\nKiAgICAgICAgICBkaWFnKFIpKkI7CiogICAgICAgICAgaWYgVFJBTlMgPSAnVCcgb3IgJ0MnIGFu\nZCBFUVVFRCA9ICdDJyBvciAnQicsIEIgaXMKKiAgICAgICAgICBvdmVyd3JpdHRlbiBieSBkaWFn\nKEMpKkIuCioKKiAgTERCICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbGVhZGlu\nZyBkaW1lbnNpb24gb2YgdGhlIGFycmF5IEIuICBMREIgPj0gbWF4KDEsTikuCioKKiAgWCAgICAg\nICAob3V0cHV0KSBDT01QTEVYIGFycmF5LCBkaW1lbnNpb24gKExEWCxOUkhTKQoqICAgICAgICAg\nIElmIElORk8gPSAwIG9yIElORk8gPSBOKzEsIHRoZSBOLWJ5LU5SSFMgc29sdXRpb24gbWF0cml4\nIFgKKiAgICAgICAgICB0byB0aGUgb3JpZ2luYWwgc3lzdGVtIG9mIGVxdWF0aW9ucy4gIE5vdGUg\ndGhhdCBBIGFuZCBCIGFyZQoqICAgICAgICAgIG1vZGlmaWVkIG9uIGV4aXQgaWYgRVFVRUQgLm5l\nLiAnTicsIGFuZCB0aGUgc29sdXRpb24gdG8gdGhlCiogICAgICAgICAgZXF1aWxpYnJhdGVkIHN5\nc3RlbSBpcyBpbnYoZGlhZyhDKSkqWCBpZiBUUkFOUyA9ICdOJyBhbmQKKiAgICAgICAgICBFUVVF\nRCA9ICdDJyBvciAnQicsIG9yIGludihkaWFnKFIpKSpYIGlmIFRSQU5TID0gJ1QnIG9yICdDJwoq\nICAgICAgICAgIGFuZCBFUVVFRCA9ICdSJyBvciAnQicuCioKKiAgTERYICAgICAoaW5wdXQpIElO\nVEVHRVIKKiAgICAgICAgICBUaGUgbGVhZGluZyBkaW1lbnNpb24gb2YgdGhlIGFycmF5IFguICBM\nRFggPj0gbWF4KDEsTikuCioKKiAgUkNPTkQgICAob3V0cHV0KSBSRUFMCiogICAgICAgICAgVGhl\nIGVzdGltYXRlIG9mIHRoZSByZWNpcHJvY2FsIGNvbmRpdGlvbiBudW1iZXIgb2YgdGhlIG1hdHJp\neAoqICAgICAgICAgIEEgYWZ0ZXIgZXF1aWxpYnJhdGlvbiAoaWYgZG9uZSkuICBJZiBSQ09ORCBp\ncyBsZXNzIHRoYW4gdGhlCiogICAgICAgICAgbWFjaGluZSBwcmVjaXNpb24gKGluIHBhcnRpY3Vs\nYXIsIGlmIFJDT05EID0gMCksIHRoZSBtYXRyaXgKKiAgICAgICAgICBpcyBzaW5ndWxhciB0byB3\nb3JraW5nIHByZWNpc2lvbi4gIFRoaXMgY29uZGl0aW9uIGlzCiogICAgICAgICAgaW5kaWNhdGVk\nIGJ5IGEgcmV0dXJuIGNvZGUgb2YgSU5GTyA+IDAuCioKKiAgRkVSUiAgICAob3V0cHV0KSBSRUFM\nIGFycmF5LCBkaW1lbnNpb24gKE5SSFMpCiogICAgICAgICAgVGhlIGVzdGltYXRlZCBmb3J3YXJk\nIGVycm9yIGJvdW5kIGZvciBlYWNoIHNvbHV0aW9uIHZlY3RvcgoqICAgICAgICAgIFgoaikgKHRo\nZSBqLXRoIGNvbHVtbiBvZiB0aGUgc29sdXRpb24gbWF0cml4IFgpLgoqICAgICAgICAgIElmIFhU\nUlVFIGlzIHRoZSB0cnVlIHNvbHV0aW9uIGNvcnJlc3BvbmRpbmcgdG8gWChqKSwgRkVSUihqKQoq\nICAgICAgICAgIGlzIGFuIGVzdGltYXRlZCB1cHBlciBib3VuZCBmb3IgdGhlIG1hZ25pdHVkZSBv\nZiB0aGUgbGFyZ2VzdAoqICAgICAgICAgIGVsZW1lbnQgaW4gKFgoaikgLSBYVFJVRSkgZGl2aWRl\nZCBieSB0aGUgbWFnbml0dWRlIG9mIHRoZQoqICAgICAgICAgIGxhcmdlc3QgZWxlbWVudCBpbiBY\nKGopLiAgVGhlIGVzdGltYXRlIGlzIGFzIHJlbGlhYmxlIGFzCiogICAgICAgICAgdGhlIGVzdGlt\nYXRlIGZvciBSQ09ORCwgYW5kIGlzIGFsbW9zdCBhbHdheXMgYSBzbGlnaHQKKiAgICAgICAgICBv\ndmVyZXN0aW1hdGUgb2YgdGhlIHRydWUgZXJyb3IuCioKKiAgQkVSUiAgICAob3V0cHV0KSBSRUFM\nIGFycmF5LCBkaW1lbnNpb24gKE5SSFMpCiogICAgICAgICAgVGhlIGNvbXBvbmVudHdpc2UgcmVs\nYXRpdmUgYmFja3dhcmQgZXJyb3Igb2YgZWFjaCBzb2x1dGlvbgoqICAgICAgICAgIHZlY3RvciBY\nKGopIChpLmUuLCB0aGUgc21hbGxlc3QgcmVsYXRpdmUgY2hhbmdlIGluCiogICAgICAgICAgYW55\nIGVsZW1lbnQgb2YgQSBvciBCIHRoYXQgbWFrZXMgWChqKSBhbiBleGFjdCBzb2x1dGlvbikuCioK\nKiAgV09SSyAgICAod29ya3NwYWNlKSBDT01QTEVYIGFycmF5LCBkaW1lbnNpb24gKDIqTikKKgoq\nICBSV09SSyAgICh3b3Jrc3BhY2Uvb3V0cHV0KSBSRUFMIGFycmF5LCBkaW1lbnNpb24gKDIqTikK\nKiAgICAgICAgICBPbiBleGl0LCBSV09SSygxKSBjb250YWlucyB0aGUgcmVjaXByb2NhbCBwaXZv\ndCBncm93dGgKKiAgICAgICAgICBmYWN0b3Igbm9ybShBKS9ub3JtKFUpLiBUaGUgIm1heCBhYnNv\nbHV0ZSBlbGVtZW50IiBub3JtIGlzCiogICAgICAgICAgdXNlZC4gSWYgUldPUksoMSkgaXMgbXVj\naCBsZXNzIHRoYW4gMSwgdGhlbiB0aGUgc3RhYmlsaXR5CiogICAgICAgICAgb2YgdGhlIExVIGZh\nY3Rvcml6YXRpb24gb2YgdGhlIChlcXVpbGlicmF0ZWQpIG1hdHJpeCBBCiogICAgICAgICAgY291\nbGQgYmUgcG9vci4gVGhpcyBhbHNvIG1lYW5zIHRoYXQgdGhlIHNvbHV0aW9uIFgsIGNvbmRpdGlv\nbgoqICAgICAgICAgIGVzdGltYXRvciBSQ09ORCwgYW5kIGZvcndhcmQgZXJyb3IgYm91bmQgRkVS\nUiBjb3VsZCBiZQoqICAgICAgICAgIHVucmVsaWFibGUuIElmIGZhY3Rvcml6YXRpb24gZmFpbHMg\nd2l0aCAwPElORk88PU4sIHRoZW4KKiAgICAgICAgICBSV09SSygxKSBjb250YWlucyB0aGUgcmVj\naXByb2NhbCBwaXZvdCBncm93dGggZmFjdG9yIGZvciB0aGUKKiAgICAgICAgICBsZWFkaW5nIElO\nRk8gY29sdW1ucyBvZiBBLgoqCiogIElORk8gICAgKG91dHB1dCkgSU5URUdFUgoqICAgICAgICAg\nID0gMDogIHN1Y2Nlc3NmdWwgZXhpdAoqICAgICAgICAgIDwgMDogIGlmIElORk8gPSAtaSwgdGhl\nIGktdGggYXJndW1lbnQgaGFkIGFuIGlsbGVnYWwgdmFsdWUKKiAgICAgICAgICA+IDA6ICBpZiBJ\nTkZPID0gaSwgYW5kIGkgaXMKKiAgICAgICAgICAgICAgICA8PSBOOiAgVShpLGkpIGlzIGV4YWN0\nbHkgemVyby4gIFRoZSBmYWN0b3JpemF0aW9uIGhhcwoqICAgICAgICAgICAgICAgICAgICAgICBi\nZWVuIGNvbXBsZXRlZCwgYnV0IHRoZSBmYWN0b3IgVSBpcyBleGFjdGx5CiogICAgICAgICAgICAg\nICAgICAgICAgIHNpbmd1bGFyLCBzbyB0aGUgc29sdXRpb24gYW5kIGVycm9yIGJvdW5kcwoqICAg\nICAgICAgICAgICAgICAgICAgICBjb3VsZCBub3QgYmUgY29tcHV0ZWQuIFJDT05EID0gMCBpcyBy\nZXR1cm5lZC4KKiAgICAgICAgICAgICAgICA9IE4rMTogVSBpcyBub25zaW5ndWxhciwgYnV0IFJD\nT05EIGlzIGxlc3MgdGhhbiBtYWNoaW5lCiogICAgICAgICAgICAgICAgICAgICAgIHByZWNpc2lv\nbiwgbWVhbmluZyB0aGF0IHRoZSBtYXRyaXggaXMgc2luZ3VsYXIKKiAgICAgICAgICAgICAgICAg\nICAgICAgdG8gd29ya2luZyBwcmVjaXNpb24uICBOZXZlcnRoZWxlc3MsIHRoZQoqICAgICAgICAg\nICAgICAgICAgICAgICBzb2x1dGlvbiBhbmQgZXJyb3IgYm91bmRzIGFyZSBjb21wdXRlZCBiZWNh\ndXNlCiogICAgICAgICAgICAgICAgICAgICAgIHRoZXJlIGFyZSBhIG51bWJlciBvZiBzaXR1YXRp\nb25zIHdoZXJlIHRoZQoqICAgICAgICAgICAgICAgICAgICAgICBjb21wdXRlZCBzb2x1dGlvbiBj\nYW4gYmUgbW9yZSBhY2N1cmF0ZSB0aGFuIHRoZQoqICAgICAgICAgICAgICAgICAgICAgICB2YWx1\nZSBvZiBSQ09ORCB3b3VsZCBzdWdnZXN0LgoqCnIPAwAAaIZohymBchADAAB9chEDAAAoaIqJaIto\njHViaJiKAStomVgNAAAAY2dlc3Z4XzQzLnR4dHISAwAAdWJom4oBK2icWAUAAABnZXN2eHITAwAA\naJiKASt1Ymh9aGFdaH6HUnIUAwAAfXIVAwAAKGiBWAcAAABnZW5lcmFschYDAABog1gEAAAAZnVs\nbHIXAwAAaHFYZAAAAGRyaXZlciBleHBlcnQsIHNvbHZlIEEqWCA9IEIsIENvbmRpdGlvbiBOdW1i\nZXIsIEVycm9yIEJvdW5kcywgUmVmaW5lLCBGYWN0b3IsIEVxdWlsaWJyYXRlLCBUcmFuc3Bvc2Vy\nGAMAAGiGaIcpgXIZAwAAfXIaAwAAKGiKiWiLaIx1YmiNWC8AAABodHRwOi8vd3d3Lm5ldGxpYi5v\ncmcvbGFwYWNrL2NvbXBsZXgxNi96Z2VzdnguZnIbAwAAaI9YAQAAAHpokGh9aJFdaH6HUnIcAwAA\nfXIdAwAAKGiUWEctAAAgICAgICBTVUJST1VUSU5FIFpHRVNWWCggRkFDVCwgVFJBTlMsIE4sIE5S\nSFMsIEEsIExEQSwgQUYsIExEQUYsIElQSVYsCiAgICAgJCAgICAgICAgICAgICAgICAgICBFUVVF\nRCwgUiwgQywgQiwgTERCLCBYLCBMRFgsIFJDT05ELCBGRVJSLCBCRVJSLAogICAgICQgICAgICAg\nICAgICAgICAgICAgV09SSywgUldPUkssIElORk8gKQoqCiogIC0tIExBUEFDSyBkcml2ZXIgcm91\ndGluZSAodmVyc2lvbiAzLjIpIC0tCiogIC0tIExBUEFDSyBpcyBhIHNvZnR3YXJlIHBhY2thZ2Ug\ncHJvdmlkZWQgYnkgVW5pdi4gb2YgVGVubmVzc2VlLCAgICAtLQoqICAtLSBVbml2LiBvZiBDYWxp\nZm9ybmlhIEJlcmtlbGV5LCBVbml2LiBvZiBDb2xvcmFkbyBEZW52ZXIgYW5kIE5BRyBMdGQuLi0t\nCiogICAgIE5vdmVtYmVyIDIwMDYKKgoqICAgICAuLiBTY2FsYXIgQXJndW1lbnRzIC4uCiAgICAg\nIENIQVJBQ1RFUiAgICAgICAgICBFUVVFRCwgRkFDVCwgVFJBTlMKICAgICAgSU5URUdFUiAgICAg\nICAgICAgIElORk8sIExEQSwgTERBRiwgTERCLCBMRFgsIE4sIE5SSFMKICAgICAgRE9VQkxFIFBS\nRUNJU0lPTiAgIFJDT05ECiogICAgIC4uCiogICAgIC4uIEFycmF5IEFyZ3VtZW50cyAuLgogICAg\nICBJTlRFR0VSICAgICAgICAgICAgSVBJViggKiApCiAgICAgIERPVUJMRSBQUkVDSVNJT04gICBC\nRVJSKCAqICksIEMoICogKSwgRkVSUiggKiApLCBSKCAqICksCiAgICAgJCAgICAgICAgICAgICAg\nICAgICBSV09SSyggKiApCiAgICAgIENPTVBMRVgqMTYgICAgICAgICBBKCBMREEsICogKSwgQUYo\nIExEQUYsICogKSwgQiggTERCLCAqICksCiAgICAgJCAgICAgICAgICAgICAgICAgICBXT1JLKCAq\nICksIFgoIExEWCwgKiApCiogICAgIC4uCioKKiAgUHVycG9zZQoqICA9PT09PT09CioKKiAgWkdF\nU1ZYIHVzZXMgdGhlIExVIGZhY3Rvcml6YXRpb24gdG8gY29tcHV0ZSB0aGUgc29sdXRpb24gdG8g\nYSBjb21wbGV4CiogIHN5c3RlbSBvZiBsaW5lYXIgZXF1YXRpb25zCiogICAgIEEgKiBYID0gQiwK\nKiAgd2hlcmUgQSBpcyBhbiBOLWJ5LU4gbWF0cml4IGFuZCBYIGFuZCBCIGFyZSBOLWJ5LU5SSFMg\nbWF0cmljZXMuCioKKiAgRXJyb3IgYm91bmRzIG9uIHRoZSBzb2x1dGlvbiBhbmQgYSBjb25kaXRp\nb24gZXN0aW1hdGUgYXJlIGFsc28KKiAgcHJvdmlkZWQuCioKKiAgRGVzY3JpcHRpb24KKiAgPT09\nPT09PT09PT0KKgoqICBUaGUgZm9sbG93aW5nIHN0ZXBzIGFyZSBwZXJmb3JtZWQ6CioKKiAgMS4g\nSWYgRkFDVCA9ICdFJywgcmVhbCBzY2FsaW5nIGZhY3RvcnMgYXJlIGNvbXB1dGVkIHRvIGVxdWls\naWJyYXRlCiogICAgIHRoZSBzeXN0ZW06CiogICAgICAgIFRSQU5TID0gJ04nOiAgZGlhZyhSKSpB\nKmRpYWcoQykgICAgICppbnYoZGlhZyhDKSkqWCA9IGRpYWcoUikqQgoqICAgICAgICBUUkFOUyA9\nICdUJzogKGRpYWcoUikqQSpkaWFnKEMpKSoqVCAqaW52KGRpYWcoUikpKlggPSBkaWFnKEMpKkIK\nKiAgICAgICAgVFJBTlMgPSAnQyc6IChkaWFnKFIpKkEqZGlhZyhDKSkqKkggKmludihkaWFnKFIp\nKSpYID0gZGlhZyhDKSpCCiogICAgIFdoZXRoZXIgb3Igbm90IHRoZSBzeXN0ZW0gd2lsbCBiZSBl\ncXVpbGlicmF0ZWQgZGVwZW5kcyBvbiB0aGUKKiAgICAgc2NhbGluZyBvZiB0aGUgbWF0cml4IEEs\nIGJ1dCBpZiBlcXVpbGlicmF0aW9uIGlzIHVzZWQsIEEgaXMKKiAgICAgb3ZlcndyaXR0ZW4gYnkg\nZGlhZyhSKSpBKmRpYWcoQykgYW5kIEIgYnkgZGlhZyhSKSpCIChpZiBUUkFOUz0nTicpCiogICAg\nIG9yIGRpYWcoQykqQiAoaWYgVFJBTlMgPSAnVCcgb3IgJ0MnKS4KKgoqICAyLiBJZiBGQUNUID0g\nJ04nIG9yICdFJywgdGhlIExVIGRlY29tcG9zaXRpb24gaXMgdXNlZCB0byBmYWN0b3IgdGhlCiog\nICAgIG1hdHJpeCBBIChhZnRlciBlcXVpbGlicmF0aW9uIGlmIEZBQ1QgPSAnRScpIGFzCiogICAg\nICAgIEEgPSBQICogTCAqIFUsCiogICAgIHdoZXJlIFAgaXMgYSBwZXJtdXRhdGlvbiBtYXRyaXgs\nIEwgaXMgYSB1bml0IGxvd2VyIHRyaWFuZ3VsYXIKKiAgICAgbWF0cml4LCBhbmQgVSBpcyB1cHBl\nciB0cmlhbmd1bGFyLgoqCiogIDMuIElmIHNvbWUgVShpLGkpPTAsIHNvIHRoYXQgVSBpcyBleGFj\ndGx5IHNpbmd1bGFyLCB0aGVuIHRoZSByb3V0aW5lCiogICAgIHJldHVybnMgd2l0aCBJTkZPID0g\naS4gT3RoZXJ3aXNlLCB0aGUgZmFjdG9yZWQgZm9ybSBvZiBBIGlzIHVzZWQKKiAgICAgdG8gZXN0\naW1hdGUgdGhlIGNvbmRpdGlvbiBudW1iZXIgb2YgdGhlIG1hdHJpeCBBLiAgSWYgdGhlCiogICAg\nIHJlY2lwcm9jYWwgb2YgdGhlIGNvbmRpdGlvbiBudW1iZXIgaXMgbGVzcyB0aGFuIG1hY2hpbmUg\ncHJlY2lzaW9uLAoqICAgICBJTkZPID0gTisxIGlzIHJldHVybmVkIGFzIGEgd2FybmluZywgYnV0\nIHRoZSByb3V0aW5lIHN0aWxsIGdvZXMgb24KKiAgICAgdG8gc29sdmUgZm9yIFggYW5kIGNvbXB1\ndGUgZXJyb3IgYm91bmRzIGFzIGRlc2NyaWJlZCBiZWxvdy4KKgoqICA0LiBUaGUgc3lzdGVtIG9m\nIGVxdWF0aW9ucyBpcyBzb2x2ZWQgZm9yIFggdXNpbmcgdGhlIGZhY3RvcmVkIGZvcm0KKiAgICAg\nb2YgQS4KKgoqICA1LiBJdGVyYXRpdmUgcmVmaW5lbWVudCBpcyBhcHBsaWVkIHRvIGltcHJvdmUg\ndGhlIGNvbXB1dGVkIHNvbHV0aW9uCiogICAgIG1hdHJpeCBhbmQgY2FsY3VsYXRlIGVycm9yIGJv\ndW5kcyBhbmQgYmFja3dhcmQgZXJyb3IgZXN0aW1hdGVzCiogICAgIGZvciBpdC4KKgoqICA2LiBJ\nZiBlcXVpbGlicmF0aW9uIHdhcyB1c2VkLCB0aGUgbWF0cml4IFggaXMgcHJlbXVsdGlwbGllZCBi\neQoqICAgICBkaWFnKEMpIChpZiBUUkFOUyA9ICdOJykgb3IgZGlhZyhSKSAoaWYgVFJBTlMgPSAn\nVCcgb3IgJ0MnKSBzbwoqICAgICB0aGF0IGl0IHNvbHZlcyB0aGUgb3JpZ2luYWwgc3lzdGVtIGJl\nZm9yZSBlcXVpbGlicmF0aW9uLgoqCiogIEFyZ3VtZW50cwoqICA9PT09PT09PT0KKgoqICBGQUNU\nICAgIChpbnB1dCkgQ0hBUkFDVEVSKjEKKiAgICAgICAgICBTcGVjaWZpZXMgd2hldGhlciBvciBu\nb3QgdGhlIGZhY3RvcmVkIGZvcm0gb2YgdGhlIG1hdHJpeCBBIGlzCiogICAgICAgICAgc3VwcGxp\nZWQgb24gZW50cnksIGFuZCBpZiBub3QsIHdoZXRoZXIgdGhlIG1hdHJpeCBBIHNob3VsZCBiZQoq\nICAgICAgICAgIGVxdWlsaWJyYXRlZCBiZWZvcmUgaXQgaXMgZmFjdG9yZWQuCiogICAgICAgICAg\nPSAnRic6ICBPbiBlbnRyeSwgQUYgYW5kIElQSVYgY29udGFpbiB0aGUgZmFjdG9yZWQgZm9ybSBv\nZiBBLgoqICAgICAgICAgICAgICAgICAgSWYgRVFVRUQgaXMgbm90ICdOJywgdGhlIG1hdHJpeCBB\nIGhhcyBiZWVuCiogICAgICAgICAgICAgICAgICBlcXVpbGlicmF0ZWQgd2l0aCBzY2FsaW5nIGZh\nY3RvcnMgZ2l2ZW4gYnkgUiBhbmQgQy4KKiAgICAgICAgICAgICAgICAgIEEsIEFGLCBhbmQgSVBJ\nViBhcmUgbm90IG1vZGlmaWVkLgoqICAgICAgICAgID0gJ04nOiAgVGhlIG1hdHJpeCBBIHdpbGwg\nYmUgY29waWVkIHRvIEFGIGFuZCBmYWN0b3JlZC4KKiAgICAgICAgICA9ICdFJzogIFRoZSBtYXRy\naXggQSB3aWxsIGJlIGVxdWlsaWJyYXRlZCBpZiBuZWNlc3NhcnksIHRoZW4KKiAgICAgICAgICAg\nICAgICAgIGNvcGllZCB0byBBRiBhbmQgZmFjdG9yZWQuCioKKiAgVFJBTlMgICAoaW5wdXQpIENI\nQVJBQ1RFUioxCiogICAgICAgICAgU3BlY2lmaWVzIHRoZSBmb3JtIG9mIHRoZSBzeXN0ZW0gb2Yg\nZXF1YXRpb25zOgoqICAgICAgICAgID0gJ04nOiAgQSAqIFggPSBCICAgICAoTm8gdHJhbnNwb3Nl\nKQoqICAgICAgICAgID0gJ1QnOiAgQSoqVCAqIFggPSBCICAoVHJhbnNwb3NlKQoqICAgICAgICAg\nID0gJ0MnOiAgQSoqSCAqIFggPSBCICAoQ29uanVnYXRlIHRyYW5zcG9zZSkKKgoqICBOICAgICAg\nIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2YgbGluZWFyIGVxdWF0aW9u\ncywgaS5lLiwgdGhlIG9yZGVyIG9mIHRoZQoqICAgICAgICAgIG1hdHJpeCBBLiAgTiA+PSAwLgoq\nCiogIE5SSFMgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG51bWJlciBvZiByaWdo\ndCBoYW5kIHNpZGVzLCBpLmUuLCB0aGUgbnVtYmVyIG9mIGNvbHVtbnMKKiAgICAgICAgICBvZiB0\naGUgbWF0cmljZXMgQiBhbmQgWC4gIE5SSFMgPj0gMC4KKgoqICBBICAgICAgIChpbnB1dC9vdXRw\ndXQpIENPTVBMRVgqMTYgYXJyYXksIGRpbWVuc2lvbiAoTERBLE4pCiogICAgICAgICAgT24gZW50\ncnksIHRoZSBOLWJ5LU4gbWF0cml4IEEuICBJZiBGQUNUID0gJ0YnIGFuZCBFUVVFRCBpcwoqICAg\nICAgICAgIG5vdCAnTicsIHRoZW4gQSBtdXN0IGhhdmUgYmVlbiBlcXVpbGlicmF0ZWQgYnkgdGhl\nIHNjYWxpbmcKKiAgICAgICAgICBmYWN0b3JzIGluIFIgYW5kL29yIEMuICBBIGlzIG5vdCBtb2Rp\nZmllZCBpZiBGQUNUID0gJ0YnIG9yCiogICAgICAgICAgJ04nLCBvciBpZiBGQUNUID0gJ0UnIGFu\nZCBFUVVFRCA9ICdOJyBvbiBleGl0LgoqCiogICAgICAgICAgT24gZXhpdCwgaWYgRVFVRUQgLm5l\nLiAnTicsIEEgaXMgc2NhbGVkIGFzIGZvbGxvd3M6CiogICAgICAgICAgRVFVRUQgPSAnUic6ICBB\nIDo9IGRpYWcoUikgKiBBCiogICAgICAgICAgRVFVRUQgPSAnQyc6ICBBIDo9IEEgKiBkaWFnKEMp\nCiogICAgICAgICAgRVFVRUQgPSAnQic6ICBBIDo9IGRpYWcoUikgKiBBICogZGlhZyhDKS4KKgoq\nICBMREEgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBsZWFkaW5nIGRpbWVuc2lv\nbiBvZiB0aGUgYXJyYXkgQS4gIExEQSA+PSBtYXgoMSxOKS4KKgoqICBBRiAgICAgIChpbnB1dCBv\nciBvdXRwdXQpIENPTVBMRVgqMTYgYXJyYXksIGRpbWVuc2lvbiAoTERBRixOKQoqICAgICAgICAg\nIElmIEZBQ1QgPSAnRicsIHRoZW4gQUYgaXMgYW4gaW5wdXQgYXJndW1lbnQgYW5kIG9uIGVudHJ5\nCiogICAgICAgICAgY29udGFpbnMgdGhlIGZhY3RvcnMgTCBhbmQgVSBmcm9tIHRoZSBmYWN0b3Jp\nemF0aW9uCiogICAgICAgICAgQSA9IFAqTCpVIGFzIGNvbXB1dGVkIGJ5IFpHRVRSRi4gIElmIEVR\nVUVEIC5uZS4gJ04nLCB0aGVuCiogICAgICAgICAgQUYgaXMgdGhlIGZhY3RvcmVkIGZvcm0gb2Yg\ndGhlIGVxdWlsaWJyYXRlZCBtYXRyaXggQS4KKgoqICAgICAgICAgIElmIEZBQ1QgPSAnTicsIHRo\nZW4gQUYgaXMgYW4gb3V0cHV0IGFyZ3VtZW50IGFuZCBvbiBleGl0CiogICAgICAgICAgcmV0dXJu\ncyB0aGUgZmFjdG9ycyBMIGFuZCBVIGZyb20gdGhlIGZhY3Rvcml6YXRpb24gQSA9IFAqTCpVCiog\nICAgICAgICAgb2YgdGhlIG9yaWdpbmFsIG1hdHJpeCBBLgoqCiogICAgICAgICAgSWYgRkFDVCA9\nICdFJywgdGhlbiBBRiBpcyBhbiBvdXRwdXQgYXJndW1lbnQgYW5kIG9uIGV4aXQKKiAgICAgICAg\nICByZXR1cm5zIHRoZSBmYWN0b3JzIEwgYW5kIFUgZnJvbSB0aGUgZmFjdG9yaXphdGlvbiBBID0g\nUCpMKlUKKiAgICAgICAgICBvZiB0aGUgZXF1aWxpYnJhdGVkIG1hdHJpeCBBIChzZWUgdGhlIGRl\nc2NyaXB0aW9uIG9mIEEgZm9yCiogICAgICAgICAgdGhlIGZvcm0gb2YgdGhlIGVxdWlsaWJyYXRl\nZCBtYXRyaXgpLgoqCiogIExEQUYgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxl\nYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBBRi4gIExEQUYgPj0gbWF4KDEsTikuCioKKiAg\nSVBJViAgICAoaW5wdXQgb3Igb3V0cHV0KSBJTlRFR0VSIGFycmF5LCBkaW1lbnNpb24gKE4pCiog\nICAgICAgICAgSWYgRkFDVCA9ICdGJywgdGhlbiBJUElWIGlzIGFuIGlucHV0IGFyZ3VtZW50IGFu\nZCBvbiBlbnRyeQoqICAgICAgICAgIGNvbnRhaW5zIHRoZSBwaXZvdCBpbmRpY2VzIGZyb20gdGhl\nIGZhY3Rvcml6YXRpb24gQSA9IFAqTCpVCiogICAgICAgICAgYXMgY29tcHV0ZWQgYnkgWkdFVFJG\nOyByb3cgaSBvZiB0aGUgbWF0cml4IHdhcyBpbnRlcmNoYW5nZWQKKiAgICAgICAgICB3aXRoIHJv\ndyBJUElWKGkpLgoqCiogICAgICAgICAgSWYgRkFDVCA9ICdOJywgdGhlbiBJUElWIGlzIGFuIG91\ndHB1dCBhcmd1bWVudCBhbmQgb24gZXhpdAoqICAgICAgICAgIGNvbnRhaW5zIHRoZSBwaXZvdCBp\nbmRpY2VzIGZyb20gdGhlIGZhY3Rvcml6YXRpb24gQSA9IFAqTCpVCiogICAgICAgICAgb2YgdGhl\nIG9yaWdpbmFsIG1hdHJpeCBBLgoqCiogICAgICAgICAgSWYgRkFDVCA9ICdFJywgdGhlbiBJUElW\nIGlzIGFuIG91dHB1dCBhcmd1bWVudCBhbmQgb24gZXhpdAoqICAgICAgICAgIGNvbnRhaW5zIHRo\nZSBwaXZvdCBpbmRpY2VzIGZyb20gdGhlIGZhY3Rvcml6YXRpb24gQSA9IFAqTCpVCiogICAgICAg\nICAgb2YgdGhlIGVxdWlsaWJyYXRlZCBtYXRyaXggQS4KKgoqICBFUVVFRCAgIChpbnB1dCBvciBv\ndXRwdXQpIENIQVJBQ1RFUioxCiogICAgICAgICAgU3BlY2lmaWVzIHRoZSBmb3JtIG9mIGVxdWls\naWJyYXRpb24gdGhhdCB3YXMgZG9uZS4KKiAgICAgICAgICA9ICdOJzogIE5vIGVxdWlsaWJyYXRp\nb24gKGFsd2F5cyB0cnVlIGlmIEZBQ1QgPSAnTicpLgoqICAgICAgICAgID0gJ1InOiAgUm93IGVx\ndWlsaWJyYXRpb24sIGkuZS4sIEEgaGFzIGJlZW4gcHJlbXVsdGlwbGllZCBieQoqICAgICAgICAg\nICAgICAgICAgZGlhZyhSKS4KKiAgICAgICAgICA9ICdDJzogIENvbHVtbiBlcXVpbGlicmF0aW9u\nLCBpLmUuLCBBIGhhcyBiZWVuIHBvc3RtdWx0aXBsaWVkCiogICAgICAgICAgICAgICAgICBieSBk\naWFnKEMpLgoqICAgICAgICAgID0gJ0InOiAgQm90aCByb3cgYW5kIGNvbHVtbiBlcXVpbGlicmF0\naW9uLCBpLmUuLCBBIGhhcyBiZWVuCiogICAgICAgICAgICAgICAgICByZXBsYWNlZCBieSBkaWFn\nKFIpICogQSAqIGRpYWcoQykuCiogICAgICAgICAgRVFVRUQgaXMgYW4gaW5wdXQgYXJndW1lbnQg\naWYgRkFDVCA9ICdGJzsgb3RoZXJ3aXNlLCBpdCBpcyBhbgoqICAgICAgICAgIG91dHB1dCBhcmd1\nbWVudC4KKgoqICBSICAgICAgIChpbnB1dCBvciBvdXRwdXQpIERPVUJMRSBQUkVDSVNJT04gYXJy\nYXksIGRpbWVuc2lvbiAoTikKKiAgICAgICAgICBUaGUgcm93IHNjYWxlIGZhY3RvcnMgZm9yIEEu\nICBJZiBFUVVFRCA9ICdSJyBvciAnQicsIEEgaXMKKiAgICAgICAgICBtdWx0aXBsaWVkIG9uIHRo\nZSBsZWZ0IGJ5IGRpYWcoUik7IGlmIEVRVUVEID0gJ04nIG9yICdDJywgUgoqICAgICAgICAgIGlz\nIG5vdCBhY2Nlc3NlZC4gIFIgaXMgYW4gaW5wdXQgYXJndW1lbnQgaWYgRkFDVCA9ICdGJzsKKiAg\nICAgICAgICBvdGhlcndpc2UsIFIgaXMgYW4gb3V0cHV0IGFyZ3VtZW50LiAgSWYgRkFDVCA9ICdG\nJyBhbmQKKiAgICAgICAgICBFUVVFRCA9ICdSJyBvciAnQicsIGVhY2ggZWxlbWVudCBvZiBSIG11\nc3QgYmUgcG9zaXRpdmUuCioKKiAgQyAgICAgICAoaW5wdXQgb3Igb3V0cHV0KSBET1VCTEUgUFJF\nQ0lTSU9OIGFycmF5LCBkaW1lbnNpb24gKE4pCiogICAgICAgICAgVGhlIGNvbHVtbiBzY2FsZSBm\nYWN0b3JzIGZvciBBLiAgSWYgRVFVRUQgPSAnQycgb3IgJ0InLCBBIGlzCiogICAgICAgICAgbXVs\ndGlwbGllZCBvbiB0aGUgcmlnaHQgYnkgZGlhZyhDKTsgaWYgRVFVRUQgPSAnTicgb3IgJ1InLCBD\nCiogICAgICAgICAgaXMgbm90IGFjY2Vzc2VkLiAgQyBpcyBhbiBpbnB1dCBhcmd1bWVudCBpZiBG\nQUNUID0gJ0YnOwoqICAgICAgICAgIG90aGVyd2lzZSwgQyBpcyBhbiBvdXRwdXQgYXJndW1lbnQu\nICBJZiBGQUNUID0gJ0YnIGFuZAoqICAgICAgICAgIEVRVUVEID0gJ0MnIG9yICdCJywgZWFjaCBl\nbGVtZW50IG9mIEMgbXVzdCBiZSBwb3NpdGl2ZS4KKgoqICBCICAgICAgIChpbnB1dC9vdXRwdXQp\nIENPTVBMRVgqMTYgYXJyYXksIGRpbWVuc2lvbiAoTERCLE5SSFMpCiogICAgICAgICAgT24gZW50\ncnksIHRoZSBOLWJ5LU5SSFMgcmlnaHQgaGFuZCBzaWRlIG1hdHJpeCBCLgoqICAgICAgICAgIE9u\nIGV4aXQsCiogICAgICAgICAgaWYgRVFVRUQgPSAnTicsIEIgaXMgbm90IG1vZGlmaWVkOwoqICAg\nICAgICAgIGlmIFRSQU5TID0gJ04nIGFuZCBFUVVFRCA9ICdSJyBvciAnQicsIEIgaXMgb3Zlcndy\naXR0ZW4gYnkKKiAgICAgICAgICBkaWFnKFIpKkI7CiogICAgICAgICAgaWYgVFJBTlMgPSAnVCcg\nb3IgJ0MnIGFuZCBFUVVFRCA9ICdDJyBvciAnQicsIEIgaXMKKiAgICAgICAgICBvdmVyd3JpdHRl\nbiBieSBkaWFnKEMpKkIuCioKKiAgTERCICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBU\naGUgbGVhZGluZyBkaW1lbnNpb24gb2YgdGhlIGFycmF5IEIuICBMREIgPj0gbWF4KDEsTikuCioK\nKiAgWCAgICAgICAob3V0cHV0KSBDT01QTEVYKjE2IGFycmF5LCBkaW1lbnNpb24gKExEWCxOUkhT\nKQoqICAgICAgICAgIElmIElORk8gPSAwIG9yIElORk8gPSBOKzEsIHRoZSBOLWJ5LU5SSFMgc29s\ndXRpb24gbWF0cml4IFgKKiAgICAgICAgICB0byB0aGUgb3JpZ2luYWwgc3lzdGVtIG9mIGVxdWF0\naW9ucy4gIE5vdGUgdGhhdCBBIGFuZCBCIGFyZQoqICAgICAgICAgIG1vZGlmaWVkIG9uIGV4aXQg\naWYgRVFVRUQgLm5lLiAnTicsIGFuZCB0aGUgc29sdXRpb24gdG8gdGhlCiogICAgICAgICAgZXF1\naWxpYnJhdGVkIHN5c3RlbSBpcyBpbnYoZGlhZyhDKSkqWCBpZiBUUkFOUyA9ICdOJyBhbmQKKiAg\nICAgICAgICBFUVVFRCA9ICdDJyBvciAnQicsIG9yIGludihkaWFnKFIpKSpYIGlmIFRSQU5TID0g\nJ1QnIG9yICdDJwoqICAgICAgICAgIGFuZCBFUVVFRCA9ICdSJyBvciAnQicuCioKKiAgTERYICAg\nICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbGVhZGluZyBkaW1lbnNpb24gb2YgdGhl\nIGFycmF5IFguICBMRFggPj0gbWF4KDEsTikuCioKKiAgUkNPTkQgICAob3V0cHV0KSBET1VCTEUg\nUFJFQ0lTSU9OCiogICAgICAgICAgVGhlIGVzdGltYXRlIG9mIHRoZSByZWNpcHJvY2FsIGNvbmRp\ndGlvbiBudW1iZXIgb2YgdGhlIG1hdHJpeAoqICAgICAgICAgIEEgYWZ0ZXIgZXF1aWxpYnJhdGlv\nbiAoaWYgZG9uZSkuICBJZiBSQ09ORCBpcyBsZXNzIHRoYW4gdGhlCiogICAgICAgICAgbWFjaGlu\nZSBwcmVjaXNpb24gKGluIHBhcnRpY3VsYXIsIGlmIFJDT05EID0gMCksIHRoZSBtYXRyaXgKKiAg\nICAgICAgICBpcyBzaW5ndWxhciB0byB3b3JraW5nIHByZWNpc2lvbi4gIFRoaXMgY29uZGl0aW9u\nIGlzCiogICAgICAgICAgaW5kaWNhdGVkIGJ5IGEgcmV0dXJuIGNvZGUgb2YgSU5GTyA+IDAuCioK\nKiAgRkVSUiAgICAob3V0cHV0KSBET1VCTEUgUFJFQ0lTSU9OIGFycmF5LCBkaW1lbnNpb24gKE5S\nSFMpCiogICAgICAgICAgVGhlIGVzdGltYXRlZCBmb3J3YXJkIGVycm9yIGJvdW5kIGZvciBlYWNo\nIHNvbHV0aW9uIHZlY3RvcgoqICAgICAgICAgIFgoaikgKHRoZSBqLXRoIGNvbHVtbiBvZiB0aGUg\nc29sdXRpb24gbWF0cml4IFgpLgoqICAgICAgICAgIElmIFhUUlVFIGlzIHRoZSB0cnVlIHNvbHV0\naW9uIGNvcnJlc3BvbmRpbmcgdG8gWChqKSwgRkVSUihqKQoqICAgICAgICAgIGlzIGFuIGVzdGlt\nYXRlZCB1cHBlciBib3VuZCBmb3IgdGhlIG1hZ25pdHVkZSBvZiB0aGUgbGFyZ2VzdAoqICAgICAg\nICAgIGVsZW1lbnQgaW4gKFgoaikgLSBYVFJVRSkgZGl2aWRlZCBieSB0aGUgbWFnbml0dWRlIG9m\nIHRoZQoqICAgICAgICAgIGxhcmdlc3QgZWxlbWVudCBpbiBYKGopLiAgVGhlIGVzdGltYXRlIGlz\nIGFzIHJlbGlhYmxlIGFzCiogICAgICAgICAgdGhlIGVzdGltYXRlIGZvciBSQ09ORCwgYW5kIGlz\nIGFsbW9zdCBhbHdheXMgYSBzbGlnaHQKKiAgICAgICAgICBvdmVyZXN0aW1hdGUgb2YgdGhlIHRy\ndWUgZXJyb3IuCioKKiAgQkVSUiAgICAob3V0cHV0KSBET1VCTEUgUFJFQ0lTSU9OIGFycmF5LCBk\naW1lbnNpb24gKE5SSFMpCiogICAgICAgICAgVGhlIGNvbXBvbmVudHdpc2UgcmVsYXRpdmUgYmFj\na3dhcmQgZXJyb3Igb2YgZWFjaCBzb2x1dGlvbgoqICAgICAgICAgIHZlY3RvciBYKGopIChpLmUu\nLCB0aGUgc21hbGxlc3QgcmVsYXRpdmUgY2hhbmdlIGluCiogICAgICAgICAgYW55IGVsZW1lbnQg\nb2YgQSBvciBCIHRoYXQgbWFrZXMgWChqKSBhbiBleGFjdCBzb2x1dGlvbikuCioKKiAgV09SSyAg\nICAod29ya3NwYWNlKSBDT01QTEVYKjE2IGFycmF5LCBkaW1lbnNpb24gKDIqTikKKgoqICBSV09S\nSyAgICh3b3Jrc3BhY2Uvb3V0cHV0KSBET1VCTEUgUFJFQ0lTSU9OIGFycmF5LCBkaW1lbnNpb24g\nKDIqTikKKiAgICAgICAgICBPbiBleGl0LCBSV09SSygxKSBjb250YWlucyB0aGUgcmVjaXByb2Nh\nbCBwaXZvdCBncm93dGgKKiAgICAgICAgICBmYWN0b3Igbm9ybShBKS9ub3JtKFUpLiBUaGUgIm1h\neCBhYnNvbHV0ZSBlbGVtZW50IiBub3JtIGlzCiogICAgICAgICAgdXNlZC4gSWYgUldPUksoMSkg\naXMgbXVjaCBsZXNzIHRoYW4gMSwgdGhlbiB0aGUgc3RhYmlsaXR5CiogICAgICAgICAgb2YgdGhl\nIExVIGZhY3Rvcml6YXRpb24gb2YgdGhlIChlcXVpbGlicmF0ZWQpIG1hdHJpeCBBCiogICAgICAg\nICAgY291bGQgYmUgcG9vci4gVGhpcyBhbHNvIG1lYW5zIHRoYXQgdGhlIHNvbHV0aW9uIFgsIGNv\nbmRpdGlvbgoqICAgICAgICAgIGVzdGltYXRvciBSQ09ORCwgYW5kIGZvcndhcmQgZXJyb3IgYm91\nbmQgRkVSUiBjb3VsZCBiZQoqICAgICAgICAgIHVucmVsaWFibGUuIElmIGZhY3Rvcml6YXRpb24g\nZmFpbHMgd2l0aCAwPElORk88PU4sIHRoZW4KKiAgICAgICAgICBSV09SSygxKSBjb250YWlucyB0\naGUgcmVjaXByb2NhbCBwaXZvdCBncm93dGggZmFjdG9yIGZvciB0aGUKKiAgICAgICAgICBsZWFk\naW5nIElORk8gY29sdW1ucyBvZiBBLgoqCiogIElORk8gICAgKG91dHB1dCkgSU5URUdFUgoqICAg\nICAgICAgID0gMDogIHN1Y2Nlc3NmdWwgZXhpdAoqICAgICAgICAgIDwgMDogIGlmIElORk8gPSAt\naSwgdGhlIGktdGggYXJndW1lbnQgaGFkIGFuIGlsbGVnYWwgdmFsdWUKKiAgICAgICAgICA+IDA6\nICBpZiBJTkZPID0gaSwgYW5kIGkgaXMKKiAgICAgICAgICAgICAgICA8PSBOOiAgVShpLGkpIGlz\nIGV4YWN0bHkgemVyby4gIFRoZSBmYWN0b3JpemF0aW9uIGhhcwoqICAgICAgICAgICAgICAgICAg\nICAgICBiZWVuIGNvbXBsZXRlZCwgYnV0IHRoZSBmYWN0b3IgVSBpcyBleGFjdGx5CiogICAgICAg\nICAgICAgICAgICAgICAgIHNpbmd1bGFyLCBzbyB0aGUgc29sdXRpb24gYW5kIGVycm9yIGJvdW5k\ncwoqICAgICAgICAgICAgICAgICAgICAgICBjb3VsZCBub3QgYmUgY29tcHV0ZWQuIFJDT05EID0g\nMCBpcyByZXR1cm5lZC4KKiAgICAgICAgICAgICAgICA9IE4rMTogVSBpcyBub25zaW5ndWxhciwg\nYnV0IFJDT05EIGlzIGxlc3MgdGhhbiBtYWNoaW5lCiogICAgICAgICAgICAgICAgICAgICAgIHBy\nZWNpc2lvbiwgbWVhbmluZyB0aGF0IHRoZSBtYXRyaXggaXMgc2luZ3VsYXIKKiAgICAgICAgICAg\nICAgICAgICAgICAgdG8gd29ya2luZyBwcmVjaXNpb24uICBOZXZlcnRoZWxlc3MsIHRoZQoqICAg\nICAgICAgICAgICAgICAgICAgICBzb2x1dGlvbiBhbmQgZXJyb3IgYm91bmRzIGFyZSBjb21wdXRl\nZCBiZWNhdXNlCiogICAgICAgICAgICAgICAgICAgICAgIHRoZXJlIGFyZSBhIG51bWJlciBvZiBz\naXR1YXRpb25zIHdoZXJlIHRoZQoqICAgICAgICAgICAgICAgICAgICAgICBjb21wdXRlZCBzb2x1\ndGlvbiBjYW4gYmUgbW9yZSBhY2N1cmF0ZSB0aGFuIHRoZQoqICAgICAgICAgICAgICAgICAgICAg\nICB2YWx1ZSBvZiBSQ09ORCB3b3VsZCBzdWdnZXN0LgoqCnIeAwAAaIZohymBch8DAAB9ciADAAAo\naIqJaItojHViaJiKASxomVgNAAAAemdlc3Z4XzQ0LnR4dHIhAwAAdWJom4oBLGicWAUAAABnZXN2\neHIiAwAAaJiKASx1Ymh9aGFdaH6HUnIjAwAAfXIkAwAAKGiBWAcAAABnZW5lcmFsciUDAABog1gE\nAAAAYmFuZHImAwAAaHFYZAAAAGRyaXZlciBleHBlcnQsIHNvbHZlIEEqWCA9IEIsIENvbmRpdGlv\nbiBOdW1iZXIsIEVycm9yIEJvdW5kcywgUmVmaW5lLCBGYWN0b3IsIEVxdWlsaWJyYXRlLCBUcmFu\nc3Bvc2VyJwMAAGiGaIcpgXIoAwAAfXIpAwAAKGiKiWiLaIx1YmiNWCwAAABodHRwOi8vd3d3Lm5l\ndGxpYi5vcmcvbGFwYWNrL3NpbmdsZS9zZ2JzdnguZnIqAwAAaI9YAQAAAHNokGh9aJFdaH6HUnIr\nAwAAfXIsAwAAKGiUWJovAAAgICAgICBTVUJST1VUSU5FIFNHQlNWWCggRkFDVCwgVFJBTlMsIE4s\nIEtMLCBLVSwgTlJIUywgQUIsIExEQUIsIEFGQiwKICAgICAkICAgICAgICAgICAgICAgICAgIExE\nQUZCLCBJUElWLCBFUVVFRCwgUiwgQywgQiwgTERCLCBYLCBMRFgsCiAgICAgJCAgICAgICAgICAg\nICAgICAgICBSQ09ORCwgRkVSUiwgQkVSUiwgV09SSywgSVdPUkssIElORk8gKQoqCiogIC0tIExB\nUEFDSyBkcml2ZXIgcm91dGluZSAodmVyc2lvbiAzLjIpIC0tCiogIC0tIExBUEFDSyBpcyBhIHNv\nZnR3YXJlIHBhY2thZ2UgcHJvdmlkZWQgYnkgVW5pdi4gb2YgVGVubmVzc2VlLCAgICAtLQoqICAt\nLSBVbml2LiBvZiBDYWxpZm9ybmlhIEJlcmtlbGV5LCBVbml2LiBvZiBDb2xvcmFkbyBEZW52ZXIg\nYW5kIE5BRyBMdGQuLi0tCiogICAgIE5vdmVtYmVyIDIwMDYKKgoqICAgICAuLiBTY2FsYXIgQXJn\ndW1lbnRzIC4uCiAgICAgIENIQVJBQ1RFUiAgICAgICAgICBFUVVFRCwgRkFDVCwgVFJBTlMKICAg\nICAgSU5URUdFUiAgICAgICAgICAgIElORk8sIEtMLCBLVSwgTERBQiwgTERBRkIsIExEQiwgTERY\nLCBOLCBOUkhTCiAgICAgIFJFQUwgICAgICAgICAgICAgICBSQ09ORAoqICAgICAuLgoqICAgICAu\nLiBBcnJheSBBcmd1bWVudHMgLi4KICAgICAgSU5URUdFUiAgICAgICAgICAgIElQSVYoICogKSwg\nSVdPUksoICogKQogICAgICBSRUFMICAgICAgICAgICAgICAgQUIoIExEQUIsICogKSwgQUZCKCBM\nREFGQiwgKiApLCBCKCBMREIsICogKSwKICAgICAkICAgICAgICAgICAgICAgICAgIEJFUlIoICog\nKSwgQyggKiApLCBGRVJSKCAqICksIFIoICogKSwKICAgICAkICAgICAgICAgICAgICAgICAgIFdP\nUksoICogKSwgWCggTERYLCAqICkKKiAgICAgLi4KKgoqICBQdXJwb3NlCiogID09PT09PT0KKgoq\nICBTR0JTVlggdXNlcyB0aGUgTFUgZmFjdG9yaXphdGlvbiB0byBjb21wdXRlIHRoZSBzb2x1dGlv\nbiB0byBhIHJlYWwKKiAgc3lzdGVtIG9mIGxpbmVhciBlcXVhdGlvbnMgQSAqIFggPSBCLCBBKipU\nICogWCA9IEIsIG9yIEEqKkggKiBYID0gQiwKKiAgd2hlcmUgQSBpcyBhIGJhbmQgbWF0cml4IG9m\nIG9yZGVyIE4gd2l0aCBLTCBzdWJkaWFnb25hbHMgYW5kIEtVCiogIHN1cGVyZGlhZ29uYWxzLCBh\nbmQgWCBhbmQgQiBhcmUgTi1ieS1OUkhTIG1hdHJpY2VzLgoqCiogIEVycm9yIGJvdW5kcyBvbiB0\naGUgc29sdXRpb24gYW5kIGEgY29uZGl0aW9uIGVzdGltYXRlIGFyZSBhbHNvCiogIHByb3ZpZGVk\nLgoqCiogIERlc2NyaXB0aW9uCiogID09PT09PT09PT09CioKKiAgVGhlIGZvbGxvd2luZyBzdGVw\ncyBhcmUgcGVyZm9ybWVkIGJ5IHRoaXMgc3Vicm91dGluZToKKgoqICAxLiBJZiBGQUNUID0gJ0Un\nLCByZWFsIHNjYWxpbmcgZmFjdG9ycyBhcmUgY29tcHV0ZWQgdG8gZXF1aWxpYnJhdGUKKiAgICAg\ndGhlIHN5c3RlbToKKiAgICAgICAgVFJBTlMgPSAnTic6ICBkaWFnKFIpKkEqZGlhZyhDKSAgICAg\nKmludihkaWFnKEMpKSpYID0gZGlhZyhSKSpCCiogICAgICAgIFRSQU5TID0gJ1QnOiAoZGlhZyhS\nKSpBKmRpYWcoQykpKipUICppbnYoZGlhZyhSKSkqWCA9IGRpYWcoQykqQgoqICAgICAgICBUUkFO\nUyA9ICdDJzogKGRpYWcoUikqQSpkaWFnKEMpKSoqSCAqaW52KGRpYWcoUikpKlggPSBkaWFnKEMp\nKkIKKiAgICAgV2hldGhlciBvciBub3QgdGhlIHN5c3RlbSB3aWxsIGJlIGVxdWlsaWJyYXRlZCBk\nZXBlbmRzIG9uIHRoZQoqICAgICBzY2FsaW5nIG9mIHRoZSBtYXRyaXggQSwgYnV0IGlmIGVxdWls\naWJyYXRpb24gaXMgdXNlZCwgQSBpcwoqICAgICBvdmVyd3JpdHRlbiBieSBkaWFnKFIpKkEqZGlh\nZyhDKSBhbmQgQiBieSBkaWFnKFIpKkIgKGlmIFRSQU5TPSdOJykKKiAgICAgb3IgZGlhZyhDKSpC\nIChpZiBUUkFOUyA9ICdUJyBvciAnQycpLgoqCiogIDIuIElmIEZBQ1QgPSAnTicgb3IgJ0UnLCB0\naGUgTFUgZGVjb21wb3NpdGlvbiBpcyB1c2VkIHRvIGZhY3RvciB0aGUKKiAgICAgbWF0cml4IEEg\nKGFmdGVyIGVxdWlsaWJyYXRpb24gaWYgRkFDVCA9ICdFJykgYXMKKiAgICAgICAgQSA9IEwgKiBV\nLAoqICAgICB3aGVyZSBMIGlzIGEgcHJvZHVjdCBvZiBwZXJtdXRhdGlvbiBhbmQgdW5pdCBsb3dl\nciB0cmlhbmd1bGFyCiogICAgIG1hdHJpY2VzIHdpdGggS0wgc3ViZGlhZ29uYWxzLCBhbmQgVSBp\ncyB1cHBlciB0cmlhbmd1bGFyIHdpdGgKKiAgICAgS0wrS1Ugc3VwZXJkaWFnb25hbHMuCioKKiAg\nMy4gSWYgc29tZSBVKGksaSk9MCwgc28gdGhhdCBVIGlzIGV4YWN0bHkgc2luZ3VsYXIsIHRoZW4g\ndGhlIHJvdXRpbmUKKiAgICAgcmV0dXJucyB3aXRoIElORk8gPSBpLiBPdGhlcndpc2UsIHRoZSBm\nYWN0b3JlZCBmb3JtIG9mIEEgaXMgdXNlZAoqICAgICB0byBlc3RpbWF0ZSB0aGUgY29uZGl0aW9u\nIG51bWJlciBvZiB0aGUgbWF0cml4IEEuICBJZiB0aGUKKiAgICAgcmVjaXByb2NhbCBvZiB0aGUg\nY29uZGl0aW9uIG51bWJlciBpcyBsZXNzIHRoYW4gbWFjaGluZSBwcmVjaXNpb24sCiogICAgIElO\nRk8gPSBOKzEgaXMgcmV0dXJuZWQgYXMgYSB3YXJuaW5nLCBidXQgdGhlIHJvdXRpbmUgc3RpbGwg\nZ29lcyBvbgoqICAgICB0byBzb2x2ZSBmb3IgWCBhbmQgY29tcHV0ZSBlcnJvciBib3VuZHMgYXMg\nZGVzY3JpYmVkIGJlbG93LgoqCiogIDQuIFRoZSBzeXN0ZW0gb2YgZXF1YXRpb25zIGlzIHNvbHZl\nZCBmb3IgWCB1c2luZyB0aGUgZmFjdG9yZWQgZm9ybQoqICAgICBvZiBBLgoqCiogIDUuIEl0ZXJh\ndGl2ZSByZWZpbmVtZW50IGlzIGFwcGxpZWQgdG8gaW1wcm92ZSB0aGUgY29tcHV0ZWQgc29sdXRp\nb24KKiAgICAgbWF0cml4IGFuZCBjYWxjdWxhdGUgZXJyb3IgYm91bmRzIGFuZCBiYWNrd2FyZCBl\ncnJvciBlc3RpbWF0ZXMKKiAgICAgZm9yIGl0LgoqCiogIDYuIElmIGVxdWlsaWJyYXRpb24gd2Fz\nIHVzZWQsIHRoZSBtYXRyaXggWCBpcyBwcmVtdWx0aXBsaWVkIGJ5CiogICAgIGRpYWcoQykgKGlm\nIFRSQU5TID0gJ04nKSBvciBkaWFnKFIpIChpZiBUUkFOUyA9ICdUJyBvciAnQycpIHNvCiogICAg\nIHRoYXQgaXQgc29sdmVzIHRoZSBvcmlnaW5hbCBzeXN0ZW0gYmVmb3JlIGVxdWlsaWJyYXRpb24u\nCioKKiAgQXJndW1lbnRzCiogID09PT09PT09PQoqCiogIEZBQ1QgICAgKGlucHV0KSBDSEFSQUNU\nRVIqMQoqICAgICAgICAgIFNwZWNpZmllcyB3aGV0aGVyIG9yIG5vdCB0aGUgZmFjdG9yZWQgZm9y\nbSBvZiB0aGUgbWF0cml4IEEgaXMKKiAgICAgICAgICBzdXBwbGllZCBvbiBlbnRyeSwgYW5kIGlm\nIG5vdCwgd2hldGhlciB0aGUgbWF0cml4IEEgc2hvdWxkIGJlCiogICAgICAgICAgZXF1aWxpYnJh\ndGVkIGJlZm9yZSBpdCBpcyBmYWN0b3JlZC4KKiAgICAgICAgICA9ICdGJzogIE9uIGVudHJ5LCBB\nRkIgYW5kIElQSVYgY29udGFpbiB0aGUgZmFjdG9yZWQgZm9ybSBvZgoqICAgICAgICAgICAgICAg\nICAgQS4gIElmIEVRVUVEIGlzIG5vdCAnTicsIHRoZSBtYXRyaXggQSBoYXMgYmVlbgoqICAgICAg\nICAgICAgICAgICAgZXF1aWxpYnJhdGVkIHdpdGggc2NhbGluZyBmYWN0b3JzIGdpdmVuIGJ5IFIg\nYW5kIEMuCiogICAgICAgICAgICAgICAgICBBQiwgQUZCLCBhbmQgSVBJViBhcmUgbm90IG1vZGlm\naWVkLgoqICAgICAgICAgID0gJ04nOiAgVGhlIG1hdHJpeCBBIHdpbGwgYmUgY29waWVkIHRvIEFG\nQiBhbmQgZmFjdG9yZWQuCiogICAgICAgICAgPSAnRSc6ICBUaGUgbWF0cml4IEEgd2lsbCBiZSBl\ncXVpbGlicmF0ZWQgaWYgbmVjZXNzYXJ5LCB0aGVuCiogICAgICAgICAgICAgICAgICBjb3BpZWQg\ndG8gQUZCIGFuZCBmYWN0b3JlZC4KKgoqICBUUkFOUyAgIChpbnB1dCkgQ0hBUkFDVEVSKjEKKiAg\nICAgICAgICBTcGVjaWZpZXMgdGhlIGZvcm0gb2YgdGhlIHN5c3RlbSBvZiBlcXVhdGlvbnMuCiog\nICAgICAgICAgPSAnTic6ICBBICogWCA9IEIgICAgIChObyB0cmFuc3Bvc2UpCiogICAgICAgICAg\nPSAnVCc6ICBBKipUICogWCA9IEIgIChUcmFuc3Bvc2UpCiogICAgICAgICAgPSAnQyc6ICBBKipI\nICogWCA9IEIgIChUcmFuc3Bvc2UpCioKKiAgTiAgICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAg\nICAgICBUaGUgbnVtYmVyIG9mIGxpbmVhciBlcXVhdGlvbnMsIGkuZS4sIHRoZSBvcmRlciBvZiB0\naGUKKiAgICAgICAgICBtYXRyaXggQS4gIE4gPj0gMC4KKgoqICBLTCAgICAgIChpbnB1dCkgSU5U\nRUdFUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2Ygc3ViZGlhZ29uYWxzIHdpdGhpbiB0aGUgYmFu\nZCBvZiBBLiAgS0wgPj0gMC4KKgoqICBLVSAgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAg\nIFRoZSBudW1iZXIgb2Ygc3VwZXJkaWFnb25hbHMgd2l0aGluIHRoZSBiYW5kIG9mIEEuICBLVSA+\nPSAwLgoqCiogIE5SSFMgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG51bWJlciBv\nZiByaWdodCBoYW5kIHNpZGVzLCBpLmUuLCB0aGUgbnVtYmVyIG9mIGNvbHVtbnMKKiAgICAgICAg\nICBvZiB0aGUgbWF0cmljZXMgQiBhbmQgWC4gIE5SSFMgPj0gMC4KKgoqICBBQiAgICAgIChpbnB1\ndC9vdXRwdXQpIFJFQUwgYXJyYXksIGRpbWVuc2lvbiAoTERBQixOKQoqICAgICAgICAgIE9uIGVu\ndHJ5LCB0aGUgbWF0cml4IEEgaW4gYmFuZCBzdG9yYWdlLCBpbiByb3dzIDEgdG8gS0wrS1UrMS4K\nKiAgICAgICAgICBUaGUgai10aCBjb2x1bW4gb2YgQSBpcyBzdG9yZWQgaW4gdGhlIGotdGggY29s\ndW1uIG9mIHRoZQoqICAgICAgICAgIGFycmF5IEFCIGFzIGZvbGxvd3M6CiogICAgICAgICAgQUIo\nS1UrMStpLWosaikgPSBBKGksaikgZm9yIG1heCgxLGotS1UpPD1pPD1taW4oTixqK2tsKQoqCiog\nICAgICAgICAgSWYgRkFDVCA9ICdGJyBhbmQgRVFVRUQgaXMgbm90ICdOJywgdGhlbiBBIG11c3Qg\naGF2ZSBiZWVuCiogICAgICAgICAgZXF1aWxpYnJhdGVkIGJ5IHRoZSBzY2FsaW5nIGZhY3RvcnMg\naW4gUiBhbmQvb3IgQy4gIEFCIGlzIG5vdAoqICAgICAgICAgIG1vZGlmaWVkIGlmIEZBQ1QgPSAn\nRicgb3IgJ04nLCBvciBpZiBGQUNUID0gJ0UnIGFuZAoqICAgICAgICAgIEVRVUVEID0gJ04nIG9u\nIGV4aXQuCioKKiAgICAgICAgICBPbiBleGl0LCBpZiBFUVVFRCAubmUuICdOJywgQSBpcyBzY2Fs\nZWQgYXMgZm9sbG93czoKKiAgICAgICAgICBFUVVFRCA9ICdSJzogIEEgOj0gZGlhZyhSKSAqIEEK\nKiAgICAgICAgICBFUVVFRCA9ICdDJzogIEEgOj0gQSAqIGRpYWcoQykKKiAgICAgICAgICBFUVVF\nRCA9ICdCJzogIEEgOj0gZGlhZyhSKSAqIEEgKiBkaWFnKEMpLgoqCiogIExEQUIgICAgKGlucHV0\nKSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBB\nQi4gIExEQUIgPj0gS0wrS1UrMS4KKgoqICBBRkIgICAgIChpbnB1dCBvciBvdXRwdXQpIFJFQUwg\nYXJyYXksIGRpbWVuc2lvbiAoTERBRkIsTikKKiAgICAgICAgICBJZiBGQUNUID0gJ0YnLCB0aGVu\nIEFGQiBpcyBhbiBpbnB1dCBhcmd1bWVudCBhbmQgb24gZW50cnkKKiAgICAgICAgICBjb250YWlu\ncyBkZXRhaWxzIG9mIHRoZSBMVSBmYWN0b3JpemF0aW9uIG9mIHRoZSBiYW5kIG1hdHJpeAoqICAg\nICAgICAgIEEsIGFzIGNvbXB1dGVkIGJ5IFNHQlRSRi4gIFUgaXMgc3RvcmVkIGFzIGFuIHVwcGVy\nIHRyaWFuZ3VsYXIKKiAgICAgICAgICBiYW5kIG1hdHJpeCB3aXRoIEtMK0tVIHN1cGVyZGlhZ29u\nYWxzIGluIHJvd3MgMSB0byBLTCtLVSsxLAoqICAgICAgICAgIGFuZCB0aGUgbXVsdGlwbGllcnMg\ndXNlZCBkdXJpbmcgdGhlIGZhY3Rvcml6YXRpb24gYXJlIHN0b3JlZAoqICAgICAgICAgIGluIHJv\nd3MgS0wrS1UrMiB0byAyKktMK0tVKzEuICBJZiBFUVVFRCAubmUuICdOJywgdGhlbiBBRkIgaXMK\nKiAgICAgICAgICB0aGUgZmFjdG9yZWQgZm9ybSBvZiB0aGUgZXF1aWxpYnJhdGVkIG1hdHJpeCBB\nLgoqCiogICAgICAgICAgSWYgRkFDVCA9ICdOJywgdGhlbiBBRkIgaXMgYW4gb3V0cHV0IGFyZ3Vt\nZW50IGFuZCBvbiBleGl0CiogICAgICAgICAgcmV0dXJucyBkZXRhaWxzIG9mIHRoZSBMVSBmYWN0\nb3JpemF0aW9uIG9mIEEuCioKKiAgICAgICAgICBJZiBGQUNUID0gJ0UnLCB0aGVuIEFGQiBpcyBh\nbiBvdXRwdXQgYXJndW1lbnQgYW5kIG9uIGV4aXQKKiAgICAgICAgICByZXR1cm5zIGRldGFpbHMg\nb2YgdGhlIExVIGZhY3Rvcml6YXRpb24gb2YgdGhlIGVxdWlsaWJyYXRlZAoqICAgICAgICAgIG1h\ndHJpeCBBIChzZWUgdGhlIGRlc2NyaXB0aW9uIG9mIEFCIGZvciB0aGUgZm9ybSBvZiB0aGUKKiAg\nICAgICAgICBlcXVpbGlicmF0ZWQgbWF0cml4KS4KKgoqICBMREFGQiAgIChpbnB1dCkgSU5URUdF\nUgoqICAgICAgICAgIFRoZSBsZWFkaW5nIGRpbWVuc2lvbiBvZiB0aGUgYXJyYXkgQUZCLiAgTERB\nRkIgPj0gMipLTCtLVSsxLgoqCiogIElQSVYgICAgKGlucHV0IG9yIG91dHB1dCkgSU5URUdFUiBh\ncnJheSwgZGltZW5zaW9uIChOKQoqICAgICAgICAgIElmIEZBQ1QgPSAnRicsIHRoZW4gSVBJViBp\ncyBhbiBpbnB1dCBhcmd1bWVudCBhbmQgb24gZW50cnkKKiAgICAgICAgICBjb250YWlucyB0aGUg\ncGl2b3QgaW5kaWNlcyBmcm9tIHRoZSBmYWN0b3JpemF0aW9uIEEgPSBMKlUKKiAgICAgICAgICBh\ncyBjb21wdXRlZCBieSBTR0JUUkY7IHJvdyBpIG9mIHRoZSBtYXRyaXggd2FzIGludGVyY2hhbmdl\nZAoqICAgICAgICAgIHdpdGggcm93IElQSVYoaSkuCioKKiAgICAgICAgICBJZiBGQUNUID0gJ04n\nLCB0aGVuIElQSVYgaXMgYW4gb3V0cHV0IGFyZ3VtZW50IGFuZCBvbiBleGl0CiogICAgICAgICAg\nY29udGFpbnMgdGhlIHBpdm90IGluZGljZXMgZnJvbSB0aGUgZmFjdG9yaXphdGlvbiBBID0gTCpV\nCiogICAgICAgICAgb2YgdGhlIG9yaWdpbmFsIG1hdHJpeCBBLgoqCiogICAgICAgICAgSWYgRkFD\nVCA9ICdFJywgdGhlbiBJUElWIGlzIGFuIG91dHB1dCBhcmd1bWVudCBhbmQgb24gZXhpdAoqICAg\nICAgICAgIGNvbnRhaW5zIHRoZSBwaXZvdCBpbmRpY2VzIGZyb20gdGhlIGZhY3Rvcml6YXRpb24g\nQSA9IEwqVQoqICAgICAgICAgIG9mIHRoZSBlcXVpbGlicmF0ZWQgbWF0cml4IEEuCioKKiAgRVFV\nRUQgICAoaW5wdXQgb3Igb3V0cHV0KSBDSEFSQUNURVIqMQoqICAgICAgICAgIFNwZWNpZmllcyB0\naGUgZm9ybSBvZiBlcXVpbGlicmF0aW9uIHRoYXQgd2FzIGRvbmUuCiogICAgICAgICAgPSAnTic6\nICBObyBlcXVpbGlicmF0aW9uIChhbHdheXMgdHJ1ZSBpZiBGQUNUID0gJ04nKS4KKiAgICAgICAg\nICA9ICdSJzogIFJvdyBlcXVpbGlicmF0aW9uLCBpLmUuLCBBIGhhcyBiZWVuIHByZW11bHRpcGxp\nZWQgYnkKKiAgICAgICAgICAgICAgICAgIGRpYWcoUikuCiogICAgICAgICAgPSAnQyc6ICBDb2x1\nbW4gZXF1aWxpYnJhdGlvbiwgaS5lLiwgQSBoYXMgYmVlbiBwb3N0bXVsdGlwbGllZAoqICAgICAg\nICAgICAgICAgICAgYnkgZGlhZyhDKS4KKiAgICAgICAgICA9ICdCJzogIEJvdGggcm93IGFuZCBj\nb2x1bW4gZXF1aWxpYnJhdGlvbiwgaS5lLiwgQSBoYXMgYmVlbgoqICAgICAgICAgICAgICAgICAg\ncmVwbGFjZWQgYnkgZGlhZyhSKSAqIEEgKiBkaWFnKEMpLgoqICAgICAgICAgIEVRVUVEIGlzIGFu\nIGlucHV0IGFyZ3VtZW50IGlmIEZBQ1QgPSAnRic7IG90aGVyd2lzZSwgaXQgaXMgYW4KKiAgICAg\nICAgICBvdXRwdXQgYXJndW1lbnQuCioKKiAgUiAgICAgICAoaW5wdXQgb3Igb3V0cHV0KSBSRUFM\nIGFycmF5LCBkaW1lbnNpb24gKE4pCiogICAgICAgICAgVGhlIHJvdyBzY2FsZSBmYWN0b3JzIGZv\nciBBLiAgSWYgRVFVRUQgPSAnUicgb3IgJ0InLCBBIGlzCiogICAgICAgICAgbXVsdGlwbGllZCBv\nbiB0aGUgbGVmdCBieSBkaWFnKFIpOyBpZiBFUVVFRCA9ICdOJyBvciAnQycsIFIKKiAgICAgICAg\nICBpcyBub3QgYWNjZXNzZWQuICBSIGlzIGFuIGlucHV0IGFyZ3VtZW50IGlmIEZBQ1QgPSAnRic7\nCiogICAgICAgICAgb3RoZXJ3aXNlLCBSIGlzIGFuIG91dHB1dCBhcmd1bWVudC4gIElmIEZBQ1Qg\nPSAnRicgYW5kCiogICAgICAgICAgRVFVRUQgPSAnUicgb3IgJ0InLCBlYWNoIGVsZW1lbnQgb2Yg\nUiBtdXN0IGJlIHBvc2l0aXZlLgoqCiogIEMgICAgICAgKGlucHV0IG9yIG91dHB1dCkgUkVBTCBh\ncnJheSwgZGltZW5zaW9uIChOKQoqICAgICAgICAgIFRoZSBjb2x1bW4gc2NhbGUgZmFjdG9ycyBm\nb3IgQS4gIElmIEVRVUVEID0gJ0MnIG9yICdCJywgQSBpcwoqICAgICAgICAgIG11bHRpcGxpZWQg\nb24gdGhlIHJpZ2h0IGJ5IGRpYWcoQyk7IGlmIEVRVUVEID0gJ04nIG9yICdSJywgQwoqICAgICAg\nICAgIGlzIG5vdCBhY2Nlc3NlZC4gIEMgaXMgYW4gaW5wdXQgYXJndW1lbnQgaWYgRkFDVCA9ICdG\nJzsKKiAgICAgICAgICBvdGhlcndpc2UsIEMgaXMgYW4gb3V0cHV0IGFyZ3VtZW50LiAgSWYgRkFD\nVCA9ICdGJyBhbmQKKiAgICAgICAgICBFUVVFRCA9ICdDJyBvciAnQicsIGVhY2ggZWxlbWVudCBv\nZiBDIG11c3QgYmUgcG9zaXRpdmUuCioKKiAgQiAgICAgICAoaW5wdXQvb3V0cHV0KSBSRUFMIGFy\ncmF5LCBkaW1lbnNpb24gKExEQixOUkhTKQoqICAgICAgICAgIE9uIGVudHJ5LCB0aGUgcmlnaHQg\naGFuZCBzaWRlIG1hdHJpeCBCLgoqICAgICAgICAgIE9uIGV4aXQsCiogICAgICAgICAgaWYgRVFV\nRUQgPSAnTicsIEIgaXMgbm90IG1vZGlmaWVkOwoqICAgICAgICAgIGlmIFRSQU5TID0gJ04nIGFu\nZCBFUVVFRCA9ICdSJyBvciAnQicsIEIgaXMgb3ZlcndyaXR0ZW4gYnkKKiAgICAgICAgICBkaWFn\nKFIpKkI7CiogICAgICAgICAgaWYgVFJBTlMgPSAnVCcgb3IgJ0MnIGFuZCBFUVVFRCA9ICdDJyBv\nciAnQicsIEIgaXMKKiAgICAgICAgICBvdmVyd3JpdHRlbiBieSBkaWFnKEMpKkIuCioKKiAgTERC\nICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbGVhZGluZyBkaW1lbnNpb24gb2Yg\ndGhlIGFycmF5IEIuICBMREIgPj0gbWF4KDEsTikuCioKKiAgWCAgICAgICAob3V0cHV0KSBSRUFM\nIGFycmF5LCBkaW1lbnNpb24gKExEWCxOUkhTKQoqICAgICAgICAgIElmIElORk8gPSAwIG9yIElO\nRk8gPSBOKzEsIHRoZSBOLWJ5LU5SSFMgc29sdXRpb24gbWF0cml4IFgKKiAgICAgICAgICB0byB0\naGUgb3JpZ2luYWwgc3lzdGVtIG9mIGVxdWF0aW9ucy4gIE5vdGUgdGhhdCBBIGFuZCBCIGFyZQoq\nICAgICAgICAgIG1vZGlmaWVkIG9uIGV4aXQgaWYgRVFVRUQgLm5lLiAnTicsIGFuZCB0aGUgc29s\ndXRpb24gdG8gdGhlCiogICAgICAgICAgZXF1aWxpYnJhdGVkIHN5c3RlbSBpcyBpbnYoZGlhZyhD\nKSkqWCBpZiBUUkFOUyA9ICdOJyBhbmQKKiAgICAgICAgICBFUVVFRCA9ICdDJyBvciAnQicsIG9y\nIGludihkaWFnKFIpKSpYIGlmIFRSQU5TID0gJ1QnIG9yICdDJwoqICAgICAgICAgIGFuZCBFUVVF\nRCA9ICdSJyBvciAnQicuCioKKiAgTERYICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBU\naGUgbGVhZGluZyBkaW1lbnNpb24gb2YgdGhlIGFycmF5IFguICBMRFggPj0gbWF4KDEsTikuCioK\nKiAgUkNPTkQgICAob3V0cHV0KSBSRUFMCiogICAgICAgICAgVGhlIGVzdGltYXRlIG9mIHRoZSBy\nZWNpcHJvY2FsIGNvbmRpdGlvbiBudW1iZXIgb2YgdGhlIG1hdHJpeAoqICAgICAgICAgIEEgYWZ0\nZXIgZXF1aWxpYnJhdGlvbiAoaWYgZG9uZSkuICBJZiBSQ09ORCBpcyBsZXNzIHRoYW4gdGhlCiog\nICAgICAgICAgbWFjaGluZSBwcmVjaXNpb24gKGluIHBhcnRpY3VsYXIsIGlmIFJDT05EID0gMCks\nIHRoZSBtYXRyaXgKKiAgICAgICAgICBpcyBzaW5ndWxhciB0byB3b3JraW5nIHByZWNpc2lvbi4g\nIFRoaXMgY29uZGl0aW9uIGlzCiogICAgICAgICAgaW5kaWNhdGVkIGJ5IGEgcmV0dXJuIGNvZGUg\nb2YgSU5GTyA+IDAuCioKKiAgRkVSUiAgICAob3V0cHV0KSBSRUFMIGFycmF5LCBkaW1lbnNpb24g\nKE5SSFMpCiogICAgICAgICAgVGhlIGVzdGltYXRlZCBmb3J3YXJkIGVycm9yIGJvdW5kIGZvciBl\nYWNoIHNvbHV0aW9uIHZlY3RvcgoqICAgICAgICAgIFgoaikgKHRoZSBqLXRoIGNvbHVtbiBvZiB0\naGUgc29sdXRpb24gbWF0cml4IFgpLgoqICAgICAgICAgIElmIFhUUlVFIGlzIHRoZSB0cnVlIHNv\nbHV0aW9uIGNvcnJlc3BvbmRpbmcgdG8gWChqKSwgRkVSUihqKQoqICAgICAgICAgIGlzIGFuIGVz\ndGltYXRlZCB1cHBlciBib3VuZCBmb3IgdGhlIG1hZ25pdHVkZSBvZiB0aGUgbGFyZ2VzdAoqICAg\nICAgICAgIGVsZW1lbnQgaW4gKFgoaikgLSBYVFJVRSkgZGl2aWRlZCBieSB0aGUgbWFnbml0dWRl\nIG9mIHRoZQoqICAgICAgICAgIGxhcmdlc3QgZWxlbWVudCBpbiBYKGopLiAgVGhlIGVzdGltYXRl\nIGlzIGFzIHJlbGlhYmxlIGFzCiogICAgICAgICAgdGhlIGVzdGltYXRlIGZvciBSQ09ORCwgYW5k\nIGlzIGFsbW9zdCBhbHdheXMgYSBzbGlnaHQKKiAgICAgICAgICBvdmVyZXN0aW1hdGUgb2YgdGhl\nIHRydWUgZXJyb3IuCioKKiAgQkVSUiAgICAob3V0cHV0KSBSRUFMIGFycmF5LCBkaW1lbnNpb24g\nKE5SSFMpCiogICAgICAgICAgVGhlIGNvbXBvbmVudHdpc2UgcmVsYXRpdmUgYmFja3dhcmQgZXJy\nb3Igb2YgZWFjaCBzb2x1dGlvbgoqICAgICAgICAgIHZlY3RvciBYKGopIChpLmUuLCB0aGUgc21h\nbGxlc3QgcmVsYXRpdmUgY2hhbmdlIGluCiogICAgICAgICAgYW55IGVsZW1lbnQgb2YgQSBvciBC\nIHRoYXQgbWFrZXMgWChqKSBhbiBleGFjdCBzb2x1dGlvbikuCioKKiAgV09SSyAgICAod29ya3Nw\nYWNlL291dHB1dCkgUkVBTCBhcnJheSwgZGltZW5zaW9uICgzKk4pCiogICAgICAgICAgT24gZXhp\ndCwgV09SSygxKSBjb250YWlucyB0aGUgcmVjaXByb2NhbCBwaXZvdCBncm93dGgKKiAgICAgICAg\nICBmYWN0b3Igbm9ybShBKS9ub3JtKFUpLiBUaGUgIm1heCBhYnNvbHV0ZSBlbGVtZW50IiBub3Jt\nIGlzCiogICAgICAgICAgdXNlZC4gSWYgV09SSygxKSBpcyBtdWNoIGxlc3MgdGhhbiAxLCB0aGVu\nIHRoZSBzdGFiaWxpdHkKKiAgICAgICAgICBvZiB0aGUgTFUgZmFjdG9yaXphdGlvbiBvZiB0aGUg\nKGVxdWlsaWJyYXRlZCkgbWF0cml4IEEKKiAgICAgICAgICBjb3VsZCBiZSBwb29yLiBUaGlzIGFs\nc28gbWVhbnMgdGhhdCB0aGUgc29sdXRpb24gWCwgY29uZGl0aW9uCiogICAgICAgICAgZXN0aW1h\ndG9yIFJDT05ELCBhbmQgZm9yd2FyZCBlcnJvciBib3VuZCBGRVJSIGNvdWxkIGJlCiogICAgICAg\nICAgdW5yZWxpYWJsZS4gSWYgZmFjdG9yaXphdGlvbiBmYWlscyB3aXRoIDA8SU5GTzw9TiwgdGhl\nbgoqICAgICAgICAgIFdPUksoMSkgY29udGFpbnMgdGhlIHJlY2lwcm9jYWwgcGl2b3QgZ3Jvd3Ro\nIGZhY3RvciBmb3IgdGhlCiogICAgICAgICAgbGVhZGluZyBJTkZPIGNvbHVtbnMgb2YgQS4KKgoq\nICBJV09SSyAgICh3b3Jrc3BhY2UpIElOVEVHRVIgYXJyYXksIGRpbWVuc2lvbiAoTikKKgoqICBJ\nTkZPICAgIChvdXRwdXQpIElOVEVHRVIKKiAgICAgICAgICA9IDA6ICBzdWNjZXNzZnVsIGV4aXQK\nKiAgICAgICAgICA8IDA6ICBpZiBJTkZPID0gLWksIHRoZSBpLXRoIGFyZ3VtZW50IGhhZCBhbiBp\nbGxlZ2FsIHZhbHVlCiogICAgICAgICAgPiAwOiAgaWYgSU5GTyA9IGksIGFuZCBpIGlzCiogICAg\nICAgICAgICAgICAgPD0gTjogIFUoaSxpKSBpcyBleGFjdGx5IHplcm8uICBUaGUgZmFjdG9yaXph\ndGlvbgoqICAgICAgICAgICAgICAgICAgICAgICBoYXMgYmVlbiBjb21wbGV0ZWQsIGJ1dCB0aGUg\nZmFjdG9yIFUgaXMgZXhhY3RseQoqICAgICAgICAgICAgICAgICAgICAgICBzaW5ndWxhciwgc28g\ndGhlIHNvbHV0aW9uIGFuZCBlcnJvciBib3VuZHMKKiAgICAgICAgICAgICAgICAgICAgICAgY291\nbGQgbm90IGJlIGNvbXB1dGVkLiBSQ09ORCA9IDAgaXMgcmV0dXJuZWQuCiogICAgICAgICAgICAg\nICAgPSBOKzE6IFUgaXMgbm9uc2luZ3VsYXIsIGJ1dCBSQ09ORCBpcyBsZXNzIHRoYW4gbWFjaGlu\nZQoqICAgICAgICAgICAgICAgICAgICAgICBwcmVjaXNpb24sIG1lYW5pbmcgdGhhdCB0aGUgbWF0\ncml4IGlzIHNpbmd1bGFyCiogICAgICAgICAgICAgICAgICAgICAgIHRvIHdvcmtpbmcgcHJlY2lz\naW9uLiAgTmV2ZXJ0aGVsZXNzLCB0aGUKKiAgICAgICAgICAgICAgICAgICAgICAgc29sdXRpb24g\nYW5kIGVycm9yIGJvdW5kcyBhcmUgY29tcHV0ZWQgYmVjYXVzZQoqICAgICAgICAgICAgICAgICAg\nICAgICB0aGVyZSBhcmUgYSBudW1iZXIgb2Ygc2l0dWF0aW9ucyB3aGVyZSB0aGUKKiAgICAgICAg\nICAgICAgICAgICAgICAgY29tcHV0ZWQgc29sdXRpb24gY2FuIGJlIG1vcmUgYWNjdXJhdGUgdGhh\nbiB0aGUKKgoqICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSBvZiBSQ09ORCB3b3VsZCBzdWdn\nZXN0LgpyLQMAAGiGaIcpgXIuAwAAfXIvAwAAKGiKiWiLaIx1YmiYigEtaJlYDQAAAHNnYnN2eF80\nNS50eHRyMAMAAHViaJuKAS1onFgFAAAAZ2JzdnhyMQMAAGiYigEtdWJofWhhXWh+h1JyMgMAAH1y\nMwMAAChogVgHAAAAZ2VuZXJhbHI0AwAAaINYBAAAAGJhbmRyNQMAAGhxWGQAAABkcml2ZXIgZXhw\nZXJ0LCBzb2x2ZSBBKlggPSBCLCBDb25kaXRpb24gTnVtYmVyLCBFcnJvciBCb3VuZHMsIFJlZmlu\nZSwgRmFjdG9yLCBFcXVpbGlicmF0ZSwgVHJhbnNwb3NlcjYDAABohmiHKYFyNwMAAH1yOAMAACho\nioloi2iMdWJojVgsAAAAaHR0cDovL3d3dy5uZXRsaWIub3JnL2xhcGFjay9kb3VibGUvZGdic3Z4\nLmZyOQMAAGiPWAEAAABkaJBofWiRXWh+h1JyOgMAAH1yOwMAACholFgSMAAAICAgICAgU1VCUk9V\nVElORSBER0JTVlgoIEZBQ1QsIFRSQU5TLCBOLCBLTCwgS1UsIE5SSFMsIEFCLCBMREFCLCBBRkIs\nCiAgICAgJCAgICAgICAgICAgICAgICAgICBMREFGQiwgSVBJViwgRVFVRUQsIFIsIEMsIEIsIExE\nQiwgWCwgTERYLAogICAgICQgICAgICAgICAgICAgICAgICAgUkNPTkQsIEZFUlIsIEJFUlIsIFdP\nUkssIElXT1JLLCBJTkZPICkKKgoqICAtLSBMQVBBQ0sgZHJpdmVyIHJvdXRpbmUgKHZlcnNpb24g\nMy4yKSAtLQoqICAtLSBMQVBBQ0sgaXMgYSBzb2Z0d2FyZSBwYWNrYWdlIHByb3ZpZGVkIGJ5IFVu\naXYuIG9mIFRlbm5lc3NlZSwgICAgLS0KKiAgLS0gVW5pdi4gb2YgQ2FsaWZvcm5pYSBCZXJrZWxl\neSwgVW5pdi4gb2YgQ29sb3JhZG8gRGVudmVyIGFuZCBOQUcgTHRkLi4tLQoqICAgICBOb3ZlbWJl\nciAyMDA2CioKKiAgICAgLi4gU2NhbGFyIEFyZ3VtZW50cyAuLgogICAgICBDSEFSQUNURVIgICAg\nICAgICAgRVFVRUQsIEZBQ1QsIFRSQU5TCiAgICAgIElOVEVHRVIgICAgICAgICAgICBJTkZPLCBL\nTCwgS1UsIExEQUIsIExEQUZCLCBMREIsIExEWCwgTiwgTlJIUwogICAgICBET1VCTEUgUFJFQ0lT\nSU9OICAgUkNPTkQKKiAgICAgLi4KKiAgICAgLi4gQXJyYXkgQXJndW1lbnRzIC4uCiAgICAgIElO\nVEVHRVIgICAgICAgICAgICBJUElWKCAqICksIElXT1JLKCAqICkKICAgICAgRE9VQkxFIFBSRUNJ\nU0lPTiAgIEFCKCBMREFCLCAqICksIEFGQiggTERBRkIsICogKSwgQiggTERCLCAqICksCiAgICAg\nJCAgICAgICAgICAgICAgICAgICBCRVJSKCAqICksIEMoICogKSwgRkVSUiggKiApLCBSKCAqICks\nCiAgICAgJCAgICAgICAgICAgICAgICAgICBXT1JLKCAqICksIFgoIExEWCwgKiApCiogICAgIC4u\nCioKKiAgUHVycG9zZQoqICA9PT09PT09CioKKiAgREdCU1ZYIHVzZXMgdGhlIExVIGZhY3Rvcml6\nYXRpb24gdG8gY29tcHV0ZSB0aGUgc29sdXRpb24gdG8gYSByZWFsCiogIHN5c3RlbSBvZiBsaW5l\nYXIgZXF1YXRpb25zIEEgKiBYID0gQiwgQSoqVCAqIFggPSBCLCBvciBBKipIICogWCA9IEIsCiog\nIHdoZXJlIEEgaXMgYSBiYW5kIG1hdHJpeCBvZiBvcmRlciBOIHdpdGggS0wgc3ViZGlhZ29uYWxz\nIGFuZCBLVQoqICBzdXBlcmRpYWdvbmFscywgYW5kIFggYW5kIEIgYXJlIE4tYnktTlJIUyBtYXRy\naWNlcy4KKgoqICBFcnJvciBib3VuZHMgb24gdGhlIHNvbHV0aW9uIGFuZCBhIGNvbmRpdGlvbiBl\nc3RpbWF0ZSBhcmUgYWxzbwoqICBwcm92aWRlZC4KKgoqICBEZXNjcmlwdGlvbgoqICA9PT09PT09\nPT09PQoqCiogIFRoZSBmb2xsb3dpbmcgc3RlcHMgYXJlIHBlcmZvcm1lZCBieSB0aGlzIHN1YnJv\ndXRpbmU6CioKKiAgMS4gSWYgRkFDVCA9ICdFJywgcmVhbCBzY2FsaW5nIGZhY3RvcnMgYXJlIGNv\nbXB1dGVkIHRvIGVxdWlsaWJyYXRlCiogICAgIHRoZSBzeXN0ZW06CiogICAgICAgIFRSQU5TID0g\nJ04nOiAgZGlhZyhSKSpBKmRpYWcoQykgICAgICppbnYoZGlhZyhDKSkqWCA9IGRpYWcoUikqQgoq\nICAgICAgICBUUkFOUyA9ICdUJzogKGRpYWcoUikqQSpkaWFnKEMpKSoqVCAqaW52KGRpYWcoUikp\nKlggPSBkaWFnKEMpKkIKKiAgICAgICAgVFJBTlMgPSAnQyc6IChkaWFnKFIpKkEqZGlhZyhDKSkq\nKkggKmludihkaWFnKFIpKSpYID0gZGlhZyhDKSpCCiogICAgIFdoZXRoZXIgb3Igbm90IHRoZSBz\neXN0ZW0gd2lsbCBiZSBlcXVpbGlicmF0ZWQgZGVwZW5kcyBvbiB0aGUKKiAgICAgc2NhbGluZyBv\nZiB0aGUgbWF0cml4IEEsIGJ1dCBpZiBlcXVpbGlicmF0aW9uIGlzIHVzZWQsIEEgaXMKKiAgICAg\nb3ZlcndyaXR0ZW4gYnkgZGlhZyhSKSpBKmRpYWcoQykgYW5kIEIgYnkgZGlhZyhSKSpCIChpZiBU\nUkFOUz0nTicpCiogICAgIG9yIGRpYWcoQykqQiAoaWYgVFJBTlMgPSAnVCcgb3IgJ0MnKS4KKgoq\nICAyLiBJZiBGQUNUID0gJ04nIG9yICdFJywgdGhlIExVIGRlY29tcG9zaXRpb24gaXMgdXNlZCB0\nbyBmYWN0b3IgdGhlCiogICAgIG1hdHJpeCBBIChhZnRlciBlcXVpbGlicmF0aW9uIGlmIEZBQ1Qg\nPSAnRScpIGFzCiogICAgICAgIEEgPSBMICogVSwKKiAgICAgd2hlcmUgTCBpcyBhIHByb2R1Y3Qg\nb2YgcGVybXV0YXRpb24gYW5kIHVuaXQgbG93ZXIgdHJpYW5ndWxhcgoqICAgICBtYXRyaWNlcyB3\naXRoIEtMIHN1YmRpYWdvbmFscywgYW5kIFUgaXMgdXBwZXIgdHJpYW5ndWxhciB3aXRoCiogICAg\nIEtMK0tVIHN1cGVyZGlhZ29uYWxzLgoqCiogIDMuIElmIHNvbWUgVShpLGkpPTAsIHNvIHRoYXQg\nVSBpcyBleGFjdGx5IHNpbmd1bGFyLCB0aGVuIHRoZSByb3V0aW5lCiogICAgIHJldHVybnMgd2l0\naCBJTkZPID0gaS4gT3RoZXJ3aXNlLCB0aGUgZmFjdG9yZWQgZm9ybSBvZiBBIGlzIHVzZWQKKiAg\nICAgdG8gZXN0aW1hdGUgdGhlIGNvbmRpdGlvbiBudW1iZXIgb2YgdGhlIG1hdHJpeCBBLiAgSWYg\ndGhlCiogICAgIHJlY2lwcm9jYWwgb2YgdGhlIGNvbmRpdGlvbiBudW1iZXIgaXMgbGVzcyB0aGFu\nIG1hY2hpbmUgcHJlY2lzaW9uLAoqICAgICBJTkZPID0gTisxIGlzIHJldHVybmVkIGFzIGEgd2Fy\nbmluZywgYnV0IHRoZSByb3V0aW5lIHN0aWxsIGdvZXMgb24KKiAgICAgdG8gc29sdmUgZm9yIFgg\nYW5kIGNvbXB1dGUgZXJyb3IgYm91bmRzIGFzIGRlc2NyaWJlZCBiZWxvdy4KKgoqICA0LiBUaGUg\nc3lzdGVtIG9mIGVxdWF0aW9ucyBpcyBzb2x2ZWQgZm9yIFggdXNpbmcgdGhlIGZhY3RvcmVkIGZv\ncm0KKiAgICAgb2YgQS4KKgoqICA1LiBJdGVyYXRpdmUgcmVmaW5lbWVudCBpcyBhcHBsaWVkIHRv\nIGltcHJvdmUgdGhlIGNvbXB1dGVkIHNvbHV0aW9uCiogICAgIG1hdHJpeCBhbmQgY2FsY3VsYXRl\nIGVycm9yIGJvdW5kcyBhbmQgYmFja3dhcmQgZXJyb3IgZXN0aW1hdGVzCiogICAgIGZvciBpdC4K\nKgoqICA2LiBJZiBlcXVpbGlicmF0aW9uIHdhcyB1c2VkLCB0aGUgbWF0cml4IFggaXMgcHJlbXVs\ndGlwbGllZCBieQoqICAgICBkaWFnKEMpIChpZiBUUkFOUyA9ICdOJykgb3IgZGlhZyhSKSAoaWYg\nVFJBTlMgPSAnVCcgb3IgJ0MnKSBzbwoqICAgICB0aGF0IGl0IHNvbHZlcyB0aGUgb3JpZ2luYWwg\nc3lzdGVtIGJlZm9yZSBlcXVpbGlicmF0aW9uLgoqCiogIEFyZ3VtZW50cwoqICA9PT09PT09PT0K\nKgoqICBGQUNUICAgIChpbnB1dCkgQ0hBUkFDVEVSKjEKKiAgICAgICAgICBTcGVjaWZpZXMgd2hl\ndGhlciBvciBub3QgdGhlIGZhY3RvcmVkIGZvcm0gb2YgdGhlIG1hdHJpeCBBIGlzCiogICAgICAg\nICAgc3VwcGxpZWQgb24gZW50cnksIGFuZCBpZiBub3QsIHdoZXRoZXIgdGhlIG1hdHJpeCBBIHNo\nb3VsZCBiZQoqICAgICAgICAgIGVxdWlsaWJyYXRlZCBiZWZvcmUgaXQgaXMgZmFjdG9yZWQuCiog\nICAgICAgICAgPSAnRic6ICBPbiBlbnRyeSwgQUZCIGFuZCBJUElWIGNvbnRhaW4gdGhlIGZhY3Rv\ncmVkIGZvcm0gb2YKKiAgICAgICAgICAgICAgICAgIEEuICBJZiBFUVVFRCBpcyBub3QgJ04nLCB0\naGUgbWF0cml4IEEgaGFzIGJlZW4KKiAgICAgICAgICAgICAgICAgIGVxdWlsaWJyYXRlZCB3aXRo\nIHNjYWxpbmcgZmFjdG9ycyBnaXZlbiBieSBSIGFuZCBDLgoqICAgICAgICAgICAgICAgICAgQUIs\nIEFGQiwgYW5kIElQSVYgYXJlIG5vdCBtb2RpZmllZC4KKiAgICAgICAgICA9ICdOJzogIFRoZSBt\nYXRyaXggQSB3aWxsIGJlIGNvcGllZCB0byBBRkIgYW5kIGZhY3RvcmVkLgoqICAgICAgICAgID0g\nJ0UnOiAgVGhlIG1hdHJpeCBBIHdpbGwgYmUgZXF1aWxpYnJhdGVkIGlmIG5lY2Vzc2FyeSwgdGhl\nbgoqICAgICAgICAgICAgICAgICAgY29waWVkIHRvIEFGQiBhbmQgZmFjdG9yZWQuCioKKiAgVFJB\nTlMgICAoaW5wdXQpIENIQVJBQ1RFUioxCiogICAgICAgICAgU3BlY2lmaWVzIHRoZSBmb3JtIG9m\nIHRoZSBzeXN0ZW0gb2YgZXF1YXRpb25zLgoqICAgICAgICAgID0gJ04nOiAgQSAqIFggPSBCICAg\nICAoTm8gdHJhbnNwb3NlKQoqICAgICAgICAgID0gJ1QnOiAgQSoqVCAqIFggPSBCICAoVHJhbnNw\nb3NlKQoqICAgICAgICAgID0gJ0MnOiAgQSoqSCAqIFggPSBCICAoVHJhbnNwb3NlKQoqCiogIE4g\nICAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG51bWJlciBvZiBsaW5lYXIgZXF1\nYXRpb25zLCBpLmUuLCB0aGUgb3JkZXIgb2YgdGhlCiogICAgICAgICAgbWF0cml4IEEuICBOID49\nIDAuCioKKiAgS0wgICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbnVtYmVyIG9m\nIHN1YmRpYWdvbmFscyB3aXRoaW4gdGhlIGJhbmQgb2YgQS4gIEtMID49IDAuCioKKiAgS1UgICAg\nICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbnVtYmVyIG9mIHN1cGVyZGlhZ29uYWxz\nIHdpdGhpbiB0aGUgYmFuZCBvZiBBLiAgS1UgPj0gMC4KKgoqICBOUkhTICAgIChpbnB1dCkgSU5U\nRUdFUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2YgcmlnaHQgaGFuZCBzaWRlcywgaS5lLiwgdGhl\nIG51bWJlciBvZiBjb2x1bW5zCiogICAgICAgICAgb2YgdGhlIG1hdHJpY2VzIEIgYW5kIFguICBO\nUkhTID49IDAuCioKKiAgQUIgICAgICAoaW5wdXQvb3V0cHV0KSBET1VCTEUgUFJFQ0lTSU9OIGFy\ncmF5LCBkaW1lbnNpb24gKExEQUIsTikKKiAgICAgICAgICBPbiBlbnRyeSwgdGhlIG1hdHJpeCBB\nIGluIGJhbmQgc3RvcmFnZSwgaW4gcm93cyAxIHRvIEtMK0tVKzEuCiogICAgICAgICAgVGhlIGot\ndGggY29sdW1uIG9mIEEgaXMgc3RvcmVkIGluIHRoZSBqLXRoIGNvbHVtbiBvZiB0aGUKKiAgICAg\nICAgICBhcnJheSBBQiBhcyBmb2xsb3dzOgoqICAgICAgICAgIEFCKEtVKzEraS1qLGopID0gQShp\nLGopIGZvciBtYXgoMSxqLUtVKTw9aTw9bWluKE4saitrbCkKKgoqICAgICAgICAgIElmIEZBQ1Qg\nPSAnRicgYW5kIEVRVUVEIGlzIG5vdCAnTicsIHRoZW4gQSBtdXN0IGhhdmUgYmVlbgoqICAgICAg\nICAgIGVxdWlsaWJyYXRlZCBieSB0aGUgc2NhbGluZyBmYWN0b3JzIGluIFIgYW5kL29yIEMuICBB\nQiBpcyBub3QKKiAgICAgICAgICBtb2RpZmllZCBpZiBGQUNUID0gJ0YnIG9yICdOJywgb3IgaWYg\nRkFDVCA9ICdFJyBhbmQKKiAgICAgICAgICBFUVVFRCA9ICdOJyBvbiBleGl0LgoqCiogICAgICAg\nICAgT24gZXhpdCwgaWYgRVFVRUQgLm5lLiAnTicsIEEgaXMgc2NhbGVkIGFzIGZvbGxvd3M6Ciog\nICAgICAgICAgRVFVRUQgPSAnUic6ICBBIDo9IGRpYWcoUikgKiBBCiogICAgICAgICAgRVFVRUQg\nPSAnQyc6ICBBIDo9IEEgKiBkaWFnKEMpCiogICAgICAgICAgRVFVRUQgPSAnQic6ICBBIDo9IGRp\nYWcoUikgKiBBICogZGlhZyhDKS4KKgoqICBMREFCICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAg\nICAgIFRoZSBsZWFkaW5nIGRpbWVuc2lvbiBvZiB0aGUgYXJyYXkgQUIuICBMREFCID49IEtMK0tV\nKzEuCioKKiAgQUZCICAgICAoaW5wdXQgb3Igb3V0cHV0KSBET1VCTEUgUFJFQ0lTSU9OIGFycmF5\nLCBkaW1lbnNpb24gKExEQUZCLE4pCiogICAgICAgICAgSWYgRkFDVCA9ICdGJywgdGhlbiBBRkIg\naXMgYW4gaW5wdXQgYXJndW1lbnQgYW5kIG9uIGVudHJ5CiogICAgICAgICAgY29udGFpbnMgZGV0\nYWlscyBvZiB0aGUgTFUgZmFjdG9yaXphdGlvbiBvZiB0aGUgYmFuZCBtYXRyaXgKKiAgICAgICAg\nICBBLCBhcyBjb21wdXRlZCBieSBER0JUUkYuICBVIGlzIHN0b3JlZCBhcyBhbiB1cHBlciB0cmlh\nbmd1bGFyCiogICAgICAgICAgYmFuZCBtYXRyaXggd2l0aCBLTCtLVSBzdXBlcmRpYWdvbmFscyBp\nbiByb3dzIDEgdG8gS0wrS1UrMSwKKiAgICAgICAgICBhbmQgdGhlIG11bHRpcGxpZXJzIHVzZWQg\nZHVyaW5nIHRoZSBmYWN0b3JpemF0aW9uIGFyZSBzdG9yZWQKKiAgICAgICAgICBpbiByb3dzIEtM\nK0tVKzIgdG8gMipLTCtLVSsxLiAgSWYgRVFVRUQgLm5lLiAnTicsIHRoZW4gQUZCIGlzCiogICAg\nICAgICAgdGhlIGZhY3RvcmVkIGZvcm0gb2YgdGhlIGVxdWlsaWJyYXRlZCBtYXRyaXggQS4KKgoq\nICAgICAgICAgIElmIEZBQ1QgPSAnTicsIHRoZW4gQUZCIGlzIGFuIG91dHB1dCBhcmd1bWVudCBh\nbmQgb24gZXhpdAoqICAgICAgICAgIHJldHVybnMgZGV0YWlscyBvZiB0aGUgTFUgZmFjdG9yaXph\ndGlvbiBvZiBBLgoqCiogICAgICAgICAgSWYgRkFDVCA9ICdFJywgdGhlbiBBRkIgaXMgYW4gb3V0\ncHV0IGFyZ3VtZW50IGFuZCBvbiBleGl0CiogICAgICAgICAgcmV0dXJucyBkZXRhaWxzIG9mIHRo\nZSBMVSBmYWN0b3JpemF0aW9uIG9mIHRoZSBlcXVpbGlicmF0ZWQKKiAgICAgICAgICBtYXRyaXgg\nQSAoc2VlIHRoZSBkZXNjcmlwdGlvbiBvZiBBQiBmb3IgdGhlIGZvcm0gb2YgdGhlCiogICAgICAg\nICAgZXF1aWxpYnJhdGVkIG1hdHJpeCkuCioKKiAgTERBRkIgICAoaW5wdXQpIElOVEVHRVIKKiAg\nICAgICAgICBUaGUgbGVhZGluZyBkaW1lbnNpb24gb2YgdGhlIGFycmF5IEFGQi4gIExEQUZCID49\nIDIqS0wrS1UrMS4KKgoqICBJUElWICAgIChpbnB1dCBvciBvdXRwdXQpIElOVEVHRVIgYXJyYXks\nIGRpbWVuc2lvbiAoTikKKiAgICAgICAgICBJZiBGQUNUID0gJ0YnLCB0aGVuIElQSVYgaXMgYW4g\naW5wdXQgYXJndW1lbnQgYW5kIG9uIGVudHJ5CiogICAgICAgICAgY29udGFpbnMgdGhlIHBpdm90\nIGluZGljZXMgZnJvbSB0aGUgZmFjdG9yaXphdGlvbiBBID0gTCpVCiogICAgICAgICAgYXMgY29t\ncHV0ZWQgYnkgREdCVFJGOyByb3cgaSBvZiB0aGUgbWF0cml4IHdhcyBpbnRlcmNoYW5nZWQKKiAg\nICAgICAgICB3aXRoIHJvdyBJUElWKGkpLgoqCiogICAgICAgICAgSWYgRkFDVCA9ICdOJywgdGhl\nbiBJUElWIGlzIGFuIG91dHB1dCBhcmd1bWVudCBhbmQgb24gZXhpdAoqICAgICAgICAgIGNvbnRh\naW5zIHRoZSBwaXZvdCBpbmRpY2VzIGZyb20gdGhlIGZhY3Rvcml6YXRpb24gQSA9IEwqVQoqICAg\nICAgICAgIG9mIHRoZSBvcmlnaW5hbCBtYXRyaXggQS4KKgoqICAgICAgICAgIElmIEZBQ1QgPSAn\nRScsIHRoZW4gSVBJViBpcyBhbiBvdXRwdXQgYXJndW1lbnQgYW5kIG9uIGV4aXQKKiAgICAgICAg\nICBjb250YWlucyB0aGUgcGl2b3QgaW5kaWNlcyBmcm9tIHRoZSBmYWN0b3JpemF0aW9uIEEgPSBM\nKlUKKiAgICAgICAgICBvZiB0aGUgZXF1aWxpYnJhdGVkIG1hdHJpeCBBLgoqCiogIEVRVUVEICAg\nKGlucHV0IG9yIG91dHB1dCkgQ0hBUkFDVEVSKjEKKiAgICAgICAgICBTcGVjaWZpZXMgdGhlIGZv\ncm0gb2YgZXF1aWxpYnJhdGlvbiB0aGF0IHdhcyBkb25lLgoqICAgICAgICAgID0gJ04nOiAgTm8g\nZXF1aWxpYnJhdGlvbiAoYWx3YXlzIHRydWUgaWYgRkFDVCA9ICdOJykuCiogICAgICAgICAgPSAn\nUic6ICBSb3cgZXF1aWxpYnJhdGlvbiwgaS5lLiwgQSBoYXMgYmVlbiBwcmVtdWx0aXBsaWVkIGJ5\nCiogICAgICAgICAgICAgICAgICBkaWFnKFIpLgoqICAgICAgICAgID0gJ0MnOiAgQ29sdW1uIGVx\ndWlsaWJyYXRpb24sIGkuZS4sIEEgaGFzIGJlZW4gcG9zdG11bHRpcGxpZWQKKiAgICAgICAgICAg\nICAgICAgIGJ5IGRpYWcoQykuCiogICAgICAgICAgPSAnQic6ICBCb3RoIHJvdyBhbmQgY29sdW1u\nIGVxdWlsaWJyYXRpb24sIGkuZS4sIEEgaGFzIGJlZW4KKiAgICAgICAgICAgICAgICAgIHJlcGxh\nY2VkIGJ5IGRpYWcoUikgKiBBICogZGlhZyhDKS4KKiAgICAgICAgICBFUVVFRCBpcyBhbiBpbnB1\ndCBhcmd1bWVudCBpZiBGQUNUID0gJ0YnOyBvdGhlcndpc2UsIGl0IGlzIGFuCiogICAgICAgICAg\nb3V0cHV0IGFyZ3VtZW50LgoqCiogIFIgICAgICAgKGlucHV0IG9yIG91dHB1dCkgRE9VQkxFIFBS\nRUNJU0lPTiBhcnJheSwgZGltZW5zaW9uIChOKQoqICAgICAgICAgIFRoZSByb3cgc2NhbGUgZmFj\ndG9ycyBmb3IgQS4gIElmIEVRVUVEID0gJ1InIG9yICdCJywgQSBpcwoqICAgICAgICAgIG11bHRp\ncGxpZWQgb24gdGhlIGxlZnQgYnkgZGlhZyhSKTsgaWYgRVFVRUQgPSAnTicgb3IgJ0MnLCBSCiog\nICAgICAgICAgaXMgbm90IGFjY2Vzc2VkLiAgUiBpcyBhbiBpbnB1dCBhcmd1bWVudCBpZiBGQUNU\nID0gJ0YnOwoqICAgICAgICAgIG90aGVyd2lzZSwgUiBpcyBhbiBvdXRwdXQgYXJndW1lbnQuICBJ\nZiBGQUNUID0gJ0YnIGFuZAoqICAgICAgICAgIEVRVUVEID0gJ1InIG9yICdCJywgZWFjaCBlbGVt\nZW50IG9mIFIgbXVzdCBiZSBwb3NpdGl2ZS4KKgoqICBDICAgICAgIChpbnB1dCBvciBvdXRwdXQp\nIERPVUJMRSBQUkVDSVNJT04gYXJyYXksIGRpbWVuc2lvbiAoTikKKiAgICAgICAgICBUaGUgY29s\ndW1uIHNjYWxlIGZhY3RvcnMgZm9yIEEuICBJZiBFUVVFRCA9ICdDJyBvciAnQicsIEEgaXMKKiAg\nICAgICAgICBtdWx0aXBsaWVkIG9uIHRoZSByaWdodCBieSBkaWFnKEMpOyBpZiBFUVVFRCA9ICdO\nJyBvciAnUicsIEMKKiAgICAgICAgICBpcyBub3QgYWNjZXNzZWQuICBDIGlzIGFuIGlucHV0IGFy\nZ3VtZW50IGlmIEZBQ1QgPSAnRic7CiogICAgICAgICAgb3RoZXJ3aXNlLCBDIGlzIGFuIG91dHB1\ndCBhcmd1bWVudC4gIElmIEZBQ1QgPSAnRicgYW5kCiogICAgICAgICAgRVFVRUQgPSAnQycgb3Ig\nJ0InLCBlYWNoIGVsZW1lbnQgb2YgQyBtdXN0IGJlIHBvc2l0aXZlLgoqCiogIEIgICAgICAgKGlu\ncHV0L291dHB1dCkgRE9VQkxFIFBSRUNJU0lPTiBhcnJheSwgZGltZW5zaW9uIChMREIsTlJIUykK\nKiAgICAgICAgICBPbiBlbnRyeSwgdGhlIHJpZ2h0IGhhbmQgc2lkZSBtYXRyaXggQi4KKiAgICAg\nICAgICBPbiBleGl0LAoqICAgICAgICAgIGlmIEVRVUVEID0gJ04nLCBCIGlzIG5vdCBtb2RpZmll\nZDsKKiAgICAgICAgICBpZiBUUkFOUyA9ICdOJyBhbmQgRVFVRUQgPSAnUicgb3IgJ0InLCBCIGlz\nIG92ZXJ3cml0dGVuIGJ5CiogICAgICAgICAgZGlhZyhSKSpCOwoqICAgICAgICAgIGlmIFRSQU5T\nID0gJ1QnIG9yICdDJyBhbmQgRVFVRUQgPSAnQycgb3IgJ0InLCBCIGlzCiogICAgICAgICAgb3Zl\ncndyaXR0ZW4gYnkgZGlhZyhDKSpCLgoqCiogIExEQiAgICAgKGlucHV0KSBJTlRFR0VSCiogICAg\nICAgICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBCLiAgTERCID49IG1heCgx\nLE4pLgoqCiogIFggICAgICAgKG91dHB1dCkgRE9VQkxFIFBSRUNJU0lPTiBhcnJheSwgZGltZW5z\naW9uIChMRFgsTlJIUykKKiAgICAgICAgICBJZiBJTkZPID0gMCBvciBJTkZPID0gTisxLCB0aGUg\nTi1ieS1OUkhTIHNvbHV0aW9uIG1hdHJpeCBYCiogICAgICAgICAgdG8gdGhlIG9yaWdpbmFsIHN5\nc3RlbSBvZiBlcXVhdGlvbnMuICBOb3RlIHRoYXQgQSBhbmQgQiBhcmUKKiAgICAgICAgICBtb2Rp\nZmllZCBvbiBleGl0IGlmIEVRVUVEIC5uZS4gJ04nLCBhbmQgdGhlIHNvbHV0aW9uIHRvIHRoZQoq\nICAgICAgICAgIGVxdWlsaWJyYXRlZCBzeXN0ZW0gaXMgaW52KGRpYWcoQykpKlggaWYgVFJBTlMg\nPSAnTicgYW5kCiogICAgICAgICAgRVFVRUQgPSAnQycgb3IgJ0InLCBvciBpbnYoZGlhZyhSKSkq\nWCBpZiBUUkFOUyA9ICdUJyBvciAnQycKKiAgICAgICAgICBhbmQgRVFVRUQgPSAnUicgb3IgJ0In\nLgoqCiogIExEWCAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGlt\nZW5zaW9uIG9mIHRoZSBhcnJheSBYLiAgTERYID49IG1heCgxLE4pLgoqCiogIFJDT05EICAgKG91\ndHB1dCkgRE9VQkxFIFBSRUNJU0lPTgoqICAgICAgICAgIFRoZSBlc3RpbWF0ZSBvZiB0aGUgcmVj\naXByb2NhbCBjb25kaXRpb24gbnVtYmVyIG9mIHRoZSBtYXRyaXgKKiAgICAgICAgICBBIGFmdGVy\nIGVxdWlsaWJyYXRpb24gKGlmIGRvbmUpLiAgSWYgUkNPTkQgaXMgbGVzcyB0aGFuIHRoZQoqICAg\nICAgICAgIG1hY2hpbmUgcHJlY2lzaW9uIChpbiBwYXJ0aWN1bGFyLCBpZiBSQ09ORCA9IDApLCB0\naGUgbWF0cml4CiogICAgICAgICAgaXMgc2luZ3VsYXIgdG8gd29ya2luZyBwcmVjaXNpb24uICBU\naGlzIGNvbmRpdGlvbiBpcwoqICAgICAgICAgIGluZGljYXRlZCBieSBhIHJldHVybiBjb2RlIG9m\nIElORk8gPiAwLgoqCiogIEZFUlIgICAgKG91dHB1dCkgRE9VQkxFIFBSRUNJU0lPTiBhcnJheSwg\nZGltZW5zaW9uIChOUkhTKQoqICAgICAgICAgIFRoZSBlc3RpbWF0ZWQgZm9yd2FyZCBlcnJvciBi\nb3VuZCBmb3IgZWFjaCBzb2x1dGlvbiB2ZWN0b3IKKiAgICAgICAgICBYKGopICh0aGUgai10aCBj\nb2x1bW4gb2YgdGhlIHNvbHV0aW9uIG1hdHJpeCBYKS4KKiAgICAgICAgICBJZiBYVFJVRSBpcyB0\naGUgdHJ1ZSBzb2x1dGlvbiBjb3JyZXNwb25kaW5nIHRvIFgoaiksIEZFUlIoaikKKiAgICAgICAg\nICBpcyBhbiBlc3RpbWF0ZWQgdXBwZXIgYm91bmQgZm9yIHRoZSBtYWduaXR1ZGUgb2YgdGhlIGxh\ncmdlc3QKKiAgICAgICAgICBlbGVtZW50IGluIChYKGopIC0gWFRSVUUpIGRpdmlkZWQgYnkgdGhl\nIG1hZ25pdHVkZSBvZiB0aGUKKiAgICAgICAgICBsYXJnZXN0IGVsZW1lbnQgaW4gWChqKS4gIFRo\nZSBlc3RpbWF0ZSBpcyBhcyByZWxpYWJsZSBhcwoqICAgICAgICAgIHRoZSBlc3RpbWF0ZSBmb3Ig\nUkNPTkQsIGFuZCBpcyBhbG1vc3QgYWx3YXlzIGEgc2xpZ2h0CiogICAgICAgICAgb3ZlcmVzdGlt\nYXRlIG9mIHRoZSB0cnVlIGVycm9yLgoqCiogIEJFUlIgICAgKG91dHB1dCkgRE9VQkxFIFBSRUNJ\nU0lPTiBhcnJheSwgZGltZW5zaW9uIChOUkhTKQoqICAgICAgICAgIFRoZSBjb21wb25lbnR3aXNl\nIHJlbGF0aXZlIGJhY2t3YXJkIGVycm9yIG9mIGVhY2ggc29sdXRpb24KKiAgICAgICAgICB2ZWN0\nb3IgWChqKSAoaS5lLiwgdGhlIHNtYWxsZXN0IHJlbGF0aXZlIGNoYW5nZSBpbgoqICAgICAgICAg\nIGFueSBlbGVtZW50IG9mIEEgb3IgQiB0aGF0IG1ha2VzIFgoaikgYW4gZXhhY3Qgc29sdXRpb24p\nLgoqCiogIFdPUksgICAgKHdvcmtzcGFjZS9vdXRwdXQpIERPVUJMRSBQUkVDSVNJT04gYXJyYXks\nIGRpbWVuc2lvbiAoMypOKQoqICAgICAgICAgIE9uIGV4aXQsIFdPUksoMSkgY29udGFpbnMgdGhl\nIHJlY2lwcm9jYWwgcGl2b3QgZ3Jvd3RoCiogICAgICAgICAgZmFjdG9yIG5vcm0oQSkvbm9ybShV\nKS4gVGhlICJtYXggYWJzb2x1dGUgZWxlbWVudCIgbm9ybSBpcwoqICAgICAgICAgIHVzZWQuIElm\nIFdPUksoMSkgaXMgbXVjaCBsZXNzIHRoYW4gMSwgdGhlbiB0aGUgc3RhYmlsaXR5CiogICAgICAg\nICAgb2YgdGhlIExVIGZhY3Rvcml6YXRpb24gb2YgdGhlIChlcXVpbGlicmF0ZWQpIG1hdHJpeCBB\nCiogICAgICAgICAgY291bGQgYmUgcG9vci4gVGhpcyBhbHNvIG1lYW5zIHRoYXQgdGhlIHNvbHV0\naW9uIFgsIGNvbmRpdGlvbgoqICAgICAgICAgIGVzdGltYXRvciBSQ09ORCwgYW5kIGZvcndhcmQg\nZXJyb3IgYm91bmQgRkVSUiBjb3VsZCBiZQoqICAgICAgICAgIHVucmVsaWFibGUuIElmIGZhY3Rv\ncml6YXRpb24gZmFpbHMgd2l0aCAwPElORk88PU4sIHRoZW4KKiAgICAgICAgICBXT1JLKDEpIGNv\nbnRhaW5zIHRoZSByZWNpcHJvY2FsIHBpdm90IGdyb3d0aCBmYWN0b3IgZm9yIHRoZQoqICAgICAg\nICAgIGxlYWRpbmcgSU5GTyBjb2x1bW5zIG9mIEEuCioKKiAgSVdPUksgICAod29ya3NwYWNlKSBJ\nTlRFR0VSIGFycmF5LCBkaW1lbnNpb24gKE4pCioKKiAgSU5GTyAgICAob3V0cHV0KSBJTlRFR0VS\nCiogICAgICAgICAgPSAwOiAgc3VjY2Vzc2Z1bCBleGl0CiogICAgICAgICAgPCAwOiAgaWYgSU5G\nTyA9IC1pLCB0aGUgaS10aCBhcmd1bWVudCBoYWQgYW4gaWxsZWdhbCB2YWx1ZQoqICAgICAgICAg\nID4gMDogIGlmIElORk8gPSBpLCBhbmQgaSBpcwoqICAgICAgICAgICAgICAgIDw9IE46ICBVKGks\naSkgaXMgZXhhY3RseSB6ZXJvLiAgVGhlIGZhY3Rvcml6YXRpb24KKiAgICAgICAgICAgICAgICAg\nICAgICAgaGFzIGJlZW4gY29tcGxldGVkLCBidXQgdGhlIGZhY3RvciBVIGlzIGV4YWN0bHkKKiAg\nICAgICAgICAgICAgICAgICAgICAgc2luZ3VsYXIsIHNvIHRoZSBzb2x1dGlvbiBhbmQgZXJyb3Ig\nYm91bmRzCiogICAgICAgICAgICAgICAgICAgICAgIGNvdWxkIG5vdCBiZSBjb21wdXRlZC4gUkNP\nTkQgPSAwIGlzIHJldHVybmVkLgoqICAgICAgICAgICAgICAgID0gTisxOiBVIGlzIG5vbnNpbmd1\nbGFyLCBidXQgUkNPTkQgaXMgbGVzcyB0aGFuIG1hY2hpbmUKKiAgICAgICAgICAgICAgICAgICAg\nICAgcHJlY2lzaW9uLCBtZWFuaW5nIHRoYXQgdGhlIG1hdHJpeCBpcyBzaW5ndWxhcgoqICAgICAg\nICAgICAgICAgICAgICAgICB0byB3b3JraW5nIHByZWNpc2lvbi4gIE5ldmVydGhlbGVzcywgdGhl\nCiogICAgICAgICAgICAgICAgICAgICAgIHNvbHV0aW9uIGFuZCBlcnJvciBib3VuZHMgYXJlIGNv\nbXB1dGVkIGJlY2F1c2UKKiAgICAgICAgICAgICAgICAgICAgICAgdGhlcmUgYXJlIGEgbnVtYmVy\nIG9mIHNpdHVhdGlvbnMgd2hlcmUgdGhlCiogICAgICAgICAgICAgICAgICAgICAgIGNvbXB1dGVk\nIHNvbHV0aW9uIGNhbiBiZSBtb3JlIGFjY3VyYXRlIHRoYW4gdGhlCiogICAgICAgICAgICAgICAg\nICAgICAgIHZhbHVlIG9mIFJDT05EIHdvdWxkIHN1Z2dlc3QuCioKcjwDAABohmiHKYFyPQMAAH1y\nPgMAAChoioloi2iMdWJomIoBLmiZWA0AAABkZ2JzdnhfNDYudHh0cj8DAAB1YmibigEuaJxYBQAA\nAGdic3Z4ckADAABomIoBLnViaH1oYV1ofodSckEDAAB9ckIDAAAoaIFYBwAAAGdlbmVyYWxyQwMA\nAGiDWAQAAABiYW5kckQDAABocVhkAAAAZHJpdmVyIGV4cGVydCwgc29sdmUgQSpYID0gQiwgQ29u\nZGl0aW9uIE51bWJlciwgRXJyb3IgQm91bmRzLCBSZWZpbmUsIEZhY3RvciwgRXF1aWxpYnJhdGUs\nIFRyYW5zcG9zZXJFAwAAaIZohymBckYDAAB9ckcDAAAoaIqJaItojHViaI1YLQAAAGh0dHA6Ly93\nd3cubmV0bGliLm9yZy9sYXBhY2svY29tcGxleC9jZ2JzdnguZnJIAwAAaI9YAQAAAGNokGh9aJFd\naH6HUnJJAwAAfXJKAwAAKGiUWM4vAAAgICAgICBTVUJST1VUSU5FIENHQlNWWCggRkFDVCwgVFJB\nTlMsIE4sIEtMLCBLVSwgTlJIUywgQUIsIExEQUIsIEFGQiwKICAgICAkICAgICAgICAgICAgICAg\nICAgIExEQUZCLCBJUElWLCBFUVVFRCwgUiwgQywgQiwgTERCLCBYLCBMRFgsCiAgICAgJCAgICAg\nICAgICAgICAgICAgICBSQ09ORCwgRkVSUiwgQkVSUiwgV09SSywgUldPUkssIElORk8gKQoqCiog\nIC0tIExBUEFDSyBkcml2ZXIgcm91dGluZSAodmVyc2lvbiAzLjIpIC0tCiogIC0tIExBUEFDSyBp\ncyBhIHNvZnR3YXJlIHBhY2thZ2UgcHJvdmlkZWQgYnkgVW5pdi4gb2YgVGVubmVzc2VlLCAgICAt\nLQoqICAtLSBVbml2LiBvZiBDYWxpZm9ybmlhIEJlcmtlbGV5LCBVbml2LiBvZiBDb2xvcmFkbyBE\nZW52ZXIgYW5kIE5BRyBMdGQuLi0tCiogICAgIE5vdmVtYmVyIDIwMDYKKgoqICAgICAuLiBTY2Fs\nYXIgQXJndW1lbnRzIC4uCiAgICAgIENIQVJBQ1RFUiAgICAgICAgICBFUVVFRCwgRkFDVCwgVFJB\nTlMKICAgICAgSU5URUdFUiAgICAgICAgICAgIElORk8sIEtMLCBLVSwgTERBQiwgTERBRkIsIExE\nQiwgTERYLCBOLCBOUkhTCiAgICAgIFJFQUwgICAgICAgICAgICAgICBSQ09ORAoqICAgICAuLgoq\nICAgICAuLiBBcnJheSBBcmd1bWVudHMgLi4KICAgICAgSU5URUdFUiAgICAgICAgICAgIElQSVYo\nICogKQogICAgICBSRUFMICAgICAgICAgICAgICAgQkVSUiggKiApLCBDKCAqICksIEZFUlIoICog\nKSwgUiggKiApLAogICAgICQgICAgICAgICAgICAgICAgICAgUldPUksoICogKQogICAgICBDT01Q\nTEVYICAgICAgICAgICAgQUIoIExEQUIsICogKSwgQUZCKCBMREFGQiwgKiApLCBCKCBMREIsICog\nKSwKICAgICAkICAgICAgICAgICAgICAgICAgIFdPUksoICogKSwgWCggTERYLCAqICkKKiAgICAg\nLi4KKgoqICBQdXJwb3NlCiogID09PT09PT0KKgoqICBDR0JTVlggdXNlcyB0aGUgTFUgZmFjdG9y\naXphdGlvbiB0byBjb21wdXRlIHRoZSBzb2x1dGlvbiB0byBhIGNvbXBsZXgKKiAgc3lzdGVtIG9m\nIGxpbmVhciBlcXVhdGlvbnMgQSAqIFggPSBCLCBBKipUICogWCA9IEIsIG9yIEEqKkggKiBYID0g\nQiwKKiAgd2hlcmUgQSBpcyBhIGJhbmQgbWF0cml4IG9mIG9yZGVyIE4gd2l0aCBLTCBzdWJkaWFn\nb25hbHMgYW5kIEtVCiogIHN1cGVyZGlhZ29uYWxzLCBhbmQgWCBhbmQgQiBhcmUgTi1ieS1OUkhT\nIG1hdHJpY2VzLgoqCiogIEVycm9yIGJvdW5kcyBvbiB0aGUgc29sdXRpb24gYW5kIGEgY29uZGl0\naW9uIGVzdGltYXRlIGFyZSBhbHNvCiogIHByb3ZpZGVkLgoqCiogIERlc2NyaXB0aW9uCiogID09\nPT09PT09PT09CioKKiAgVGhlIGZvbGxvd2luZyBzdGVwcyBhcmUgcGVyZm9ybWVkIGJ5IHRoaXMg\nc3Vicm91dGluZToKKgoqICAxLiBJZiBGQUNUID0gJ0UnLCByZWFsIHNjYWxpbmcgZmFjdG9ycyBh\ncmUgY29tcHV0ZWQgdG8gZXF1aWxpYnJhdGUKKiAgICAgdGhlIHN5c3RlbToKKiAgICAgICAgVFJB\nTlMgPSAnTic6ICBkaWFnKFIpKkEqZGlhZyhDKSAgICAgKmludihkaWFnKEMpKSpYID0gZGlhZyhS\nKSpCCiogICAgICAgIFRSQU5TID0gJ1QnOiAoZGlhZyhSKSpBKmRpYWcoQykpKipUICppbnYoZGlh\nZyhSKSkqWCA9IGRpYWcoQykqQgoqICAgICAgICBUUkFOUyA9ICdDJzogKGRpYWcoUikqQSpkaWFn\nKEMpKSoqSCAqaW52KGRpYWcoUikpKlggPSBkaWFnKEMpKkIKKiAgICAgV2hldGhlciBvciBub3Qg\ndGhlIHN5c3RlbSB3aWxsIGJlIGVxdWlsaWJyYXRlZCBkZXBlbmRzIG9uIHRoZQoqICAgICBzY2Fs\naW5nIG9mIHRoZSBtYXRyaXggQSwgYnV0IGlmIGVxdWlsaWJyYXRpb24gaXMgdXNlZCwgQSBpcwoq\nICAgICBvdmVyd3JpdHRlbiBieSBkaWFnKFIpKkEqZGlhZyhDKSBhbmQgQiBieSBkaWFnKFIpKkIg\nKGlmIFRSQU5TPSdOJykKKiAgICAgb3IgZGlhZyhDKSpCIChpZiBUUkFOUyA9ICdUJyBvciAnQycp\nLgoqCiogIDIuIElmIEZBQ1QgPSAnTicgb3IgJ0UnLCB0aGUgTFUgZGVjb21wb3NpdGlvbiBpcyB1\nc2VkIHRvIGZhY3RvciB0aGUKKiAgICAgbWF0cml4IEEgKGFmdGVyIGVxdWlsaWJyYXRpb24gaWYg\nRkFDVCA9ICdFJykgYXMKKiAgICAgICAgQSA9IEwgKiBVLAoqICAgICB3aGVyZSBMIGlzIGEgcHJv\nZHVjdCBvZiBwZXJtdXRhdGlvbiBhbmQgdW5pdCBsb3dlciB0cmlhbmd1bGFyCiogICAgIG1hdHJp\nY2VzIHdpdGggS0wgc3ViZGlhZ29uYWxzLCBhbmQgVSBpcyB1cHBlciB0cmlhbmd1bGFyIHdpdGgK\nKiAgICAgS0wrS1Ugc3VwZXJkaWFnb25hbHMuCioKKiAgMy4gSWYgc29tZSBVKGksaSk9MCwgc28g\ndGhhdCBVIGlzIGV4YWN0bHkgc2luZ3VsYXIsIHRoZW4gdGhlIHJvdXRpbmUKKiAgICAgcmV0dXJu\ncyB3aXRoIElORk8gPSBpLiBPdGhlcndpc2UsIHRoZSBmYWN0b3JlZCBmb3JtIG9mIEEgaXMgdXNl\nZAoqICAgICB0byBlc3RpbWF0ZSB0aGUgY29uZGl0aW9uIG51bWJlciBvZiB0aGUgbWF0cml4IEEu\nICBJZiB0aGUKKiAgICAgcmVjaXByb2NhbCBvZiB0aGUgY29uZGl0aW9uIG51bWJlciBpcyBsZXNz\nIHRoYW4gbWFjaGluZSBwcmVjaXNpb24sCiogICAgIElORk8gPSBOKzEgaXMgcmV0dXJuZWQgYXMg\nYSB3YXJuaW5nLCBidXQgdGhlIHJvdXRpbmUgc3RpbGwgZ29lcyBvbgoqICAgICB0byBzb2x2ZSBm\nb3IgWCBhbmQgY29tcHV0ZSBlcnJvciBib3VuZHMgYXMgZGVzY3JpYmVkIGJlbG93LgoqCiogIDQu\nIFRoZSBzeXN0ZW0gb2YgZXF1YXRpb25zIGlzIHNvbHZlZCBmb3IgWCB1c2luZyB0aGUgZmFjdG9y\nZWQgZm9ybQoqICAgICBvZiBBLgoqCiogIDUuIEl0ZXJhdGl2ZSByZWZpbmVtZW50IGlzIGFwcGxp\nZWQgdG8gaW1wcm92ZSB0aGUgY29tcHV0ZWQgc29sdXRpb24KKiAgICAgbWF0cml4IGFuZCBjYWxj\ndWxhdGUgZXJyb3IgYm91bmRzIGFuZCBiYWNrd2FyZCBlcnJvciBlc3RpbWF0ZXMKKiAgICAgZm9y\nIGl0LgoqCiogIDYuIElmIGVxdWlsaWJyYXRpb24gd2FzIHVzZWQsIHRoZSBtYXRyaXggWCBpcyBw\ncmVtdWx0aXBsaWVkIGJ5CiogICAgIGRpYWcoQykgKGlmIFRSQU5TID0gJ04nKSBvciBkaWFnKFIp\nIChpZiBUUkFOUyA9ICdUJyBvciAnQycpIHNvCiogICAgIHRoYXQgaXQgc29sdmVzIHRoZSBvcmln\naW5hbCBzeXN0ZW0gYmVmb3JlIGVxdWlsaWJyYXRpb24uCioKKiAgQXJndW1lbnRzCiogID09PT09\nPT09PQoqCiogIEZBQ1QgICAgKGlucHV0KSBDSEFSQUNURVIqMQoqICAgICAgICAgIFNwZWNpZmll\ncyB3aGV0aGVyIG9yIG5vdCB0aGUgZmFjdG9yZWQgZm9ybSBvZiB0aGUgbWF0cml4IEEgaXMKKiAg\nICAgICAgICBzdXBwbGllZCBvbiBlbnRyeSwgYW5kIGlmIG5vdCwgd2hldGhlciB0aGUgbWF0cml4\nIEEgc2hvdWxkIGJlCiogICAgICAgICAgZXF1aWxpYnJhdGVkIGJlZm9yZSBpdCBpcyBmYWN0b3Jl\nZC4KKiAgICAgICAgICA9ICdGJzogIE9uIGVudHJ5LCBBRkIgYW5kIElQSVYgY29udGFpbiB0aGUg\nZmFjdG9yZWQgZm9ybSBvZgoqICAgICAgICAgICAgICAgICAgQS4gIElmIEVRVUVEIGlzIG5vdCAn\nTicsIHRoZSBtYXRyaXggQSBoYXMgYmVlbgoqICAgICAgICAgICAgICAgICAgZXF1aWxpYnJhdGVk\nIHdpdGggc2NhbGluZyBmYWN0b3JzIGdpdmVuIGJ5IFIgYW5kIEMuCiogICAgICAgICAgICAgICAg\nICBBQiwgQUZCLCBhbmQgSVBJViBhcmUgbm90IG1vZGlmaWVkLgoqICAgICAgICAgID0gJ04nOiAg\nVGhlIG1hdHJpeCBBIHdpbGwgYmUgY29waWVkIHRvIEFGQiBhbmQgZmFjdG9yZWQuCiogICAgICAg\nICAgPSAnRSc6ICBUaGUgbWF0cml4IEEgd2lsbCBiZSBlcXVpbGlicmF0ZWQgaWYgbmVjZXNzYXJ5\nLCB0aGVuCiogICAgICAgICAgICAgICAgICBjb3BpZWQgdG8gQUZCIGFuZCBmYWN0b3JlZC4KKgoq\nICBUUkFOUyAgIChpbnB1dCkgQ0hBUkFDVEVSKjEKKiAgICAgICAgICBTcGVjaWZpZXMgdGhlIGZv\ncm0gb2YgdGhlIHN5c3RlbSBvZiBlcXVhdGlvbnMuCiogICAgICAgICAgPSAnTic6ICBBICogWCA9\nIEIgICAgIChObyB0cmFuc3Bvc2UpCiogICAgICAgICAgPSAnVCc6ICBBKipUICogWCA9IEIgIChU\ncmFuc3Bvc2UpCiogICAgICAgICAgPSAnQyc6ICBBKipIICogWCA9IEIgIChDb25qdWdhdGUgdHJh\nbnNwb3NlKQoqCiogIE4gICAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG51bWJl\nciBvZiBsaW5lYXIgZXF1YXRpb25zLCBpLmUuLCB0aGUgb3JkZXIgb2YgdGhlCiogICAgICAgICAg\nbWF0cml4IEEuICBOID49IDAuCioKKiAgS0wgICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAg\nICBUaGUgbnVtYmVyIG9mIHN1YmRpYWdvbmFscyB3aXRoaW4gdGhlIGJhbmQgb2YgQS4gIEtMID49\nIDAuCioKKiAgS1UgICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbnVtYmVyIG9m\nIHN1cGVyZGlhZ29uYWxzIHdpdGhpbiB0aGUgYmFuZCBvZiBBLiAgS1UgPj0gMC4KKgoqICBOUkhT\nICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2YgcmlnaHQgaGFuZCBz\naWRlcywgaS5lLiwgdGhlIG51bWJlciBvZiBjb2x1bW5zCiogICAgICAgICAgb2YgdGhlIG1hdHJp\nY2VzIEIgYW5kIFguICBOUkhTID49IDAuCioKKiAgQUIgICAgICAoaW5wdXQvb3V0cHV0KSBDT01Q\nTEVYIGFycmF5LCBkaW1lbnNpb24gKExEQUIsTikKKiAgICAgICAgICBPbiBlbnRyeSwgdGhlIG1h\ndHJpeCBBIGluIGJhbmQgc3RvcmFnZSwgaW4gcm93cyAxIHRvIEtMK0tVKzEuCiogICAgICAgICAg\nVGhlIGotdGggY29sdW1uIG9mIEEgaXMgc3RvcmVkIGluIHRoZSBqLXRoIGNvbHVtbiBvZiB0aGUK\nKiAgICAgICAgICBhcnJheSBBQiBhcyBmb2xsb3dzOgoqICAgICAgICAgIEFCKEtVKzEraS1qLGop\nID0gQShpLGopIGZvciBtYXgoMSxqLUtVKTw9aTw9bWluKE4saitrbCkKKgoqICAgICAgICAgIElm\nIEZBQ1QgPSAnRicgYW5kIEVRVUVEIGlzIG5vdCAnTicsIHRoZW4gQSBtdXN0IGhhdmUgYmVlbgoq\nICAgICAgICAgIGVxdWlsaWJyYXRlZCBieSB0aGUgc2NhbGluZyBmYWN0b3JzIGluIFIgYW5kL29y\nIEMuICBBQiBpcyBub3QKKiAgICAgICAgICBtb2RpZmllZCBpZiBGQUNUID0gJ0YnIG9yICdOJywg\nb3IgaWYgRkFDVCA9ICdFJyBhbmQKKiAgICAgICAgICBFUVVFRCA9ICdOJyBvbiBleGl0LgoqCiog\nICAgICAgICAgT24gZXhpdCwgaWYgRVFVRUQgLm5lLiAnTicsIEEgaXMgc2NhbGVkIGFzIGZvbGxv\nd3M6CiogICAgICAgICAgRVFVRUQgPSAnUic6ICBBIDo9IGRpYWcoUikgKiBBCiogICAgICAgICAg\nRVFVRUQgPSAnQyc6ICBBIDo9IEEgKiBkaWFnKEMpCiogICAgICAgICAgRVFVRUQgPSAnQic6ICBB\nIDo9IGRpYWcoUikgKiBBICogZGlhZyhDKS4KKgoqICBMREFCICAgIChpbnB1dCkgSU5URUdFUgoq\nICAgICAgICAgIFRoZSBsZWFkaW5nIGRpbWVuc2lvbiBvZiB0aGUgYXJyYXkgQUIuICBMREFCID49\nIEtMK0tVKzEuCioKKiAgQUZCICAgICAoaW5wdXQgb3Igb3V0cHV0KSBDT01QTEVYIGFycmF5LCBk\naW1lbnNpb24gKExEQUZCLE4pCiogICAgICAgICAgSWYgRkFDVCA9ICdGJywgdGhlbiBBRkIgaXMg\nYW4gaW5wdXQgYXJndW1lbnQgYW5kIG9uIGVudHJ5CiogICAgICAgICAgY29udGFpbnMgZGV0YWls\ncyBvZiB0aGUgTFUgZmFjdG9yaXphdGlvbiBvZiB0aGUgYmFuZCBtYXRyaXgKKiAgICAgICAgICBB\nLCBhcyBjb21wdXRlZCBieSBDR0JUUkYuICBVIGlzIHN0b3JlZCBhcyBhbiB1cHBlciB0cmlhbmd1\nbGFyCiogICAgICAgICAgYmFuZCBtYXRyaXggd2l0aCBLTCtLVSBzdXBlcmRpYWdvbmFscyBpbiBy\nb3dzIDEgdG8gS0wrS1UrMSwKKiAgICAgICAgICBhbmQgdGhlIG11bHRpcGxpZXJzIHVzZWQgZHVy\naW5nIHRoZSBmYWN0b3JpemF0aW9uIGFyZSBzdG9yZWQKKiAgICAgICAgICBpbiByb3dzIEtMK0tV\nKzIgdG8gMipLTCtLVSsxLiAgSWYgRVFVRUQgLm5lLiAnTicsIHRoZW4gQUZCIGlzCiogICAgICAg\nICAgdGhlIGZhY3RvcmVkIGZvcm0gb2YgdGhlIGVxdWlsaWJyYXRlZCBtYXRyaXggQS4KKgoqICAg\nICAgICAgIElmIEZBQ1QgPSAnTicsIHRoZW4gQUZCIGlzIGFuIG91dHB1dCBhcmd1bWVudCBhbmQg\nb24gZXhpdAoqICAgICAgICAgIHJldHVybnMgZGV0YWlscyBvZiB0aGUgTFUgZmFjdG9yaXphdGlv\nbiBvZiBBLgoqCiogICAgICAgICAgSWYgRkFDVCA9ICdFJywgdGhlbiBBRkIgaXMgYW4gb3V0cHV0\nIGFyZ3VtZW50IGFuZCBvbiBleGl0CiogICAgICAgICAgcmV0dXJucyBkZXRhaWxzIG9mIHRoZSBM\nVSBmYWN0b3JpemF0aW9uIG9mIHRoZSBlcXVpbGlicmF0ZWQKKiAgICAgICAgICBtYXRyaXggQSAo\nc2VlIHRoZSBkZXNjcmlwdGlvbiBvZiBBQiBmb3IgdGhlIGZvcm0gb2YgdGhlCiogICAgICAgICAg\nZXF1aWxpYnJhdGVkIG1hdHJpeCkuCioKKiAgTERBRkIgICAoaW5wdXQpIElOVEVHRVIKKiAgICAg\nICAgICBUaGUgbGVhZGluZyBkaW1lbnNpb24gb2YgdGhlIGFycmF5IEFGQi4gIExEQUZCID49IDIq\nS0wrS1UrMS4KKgoqICBJUElWICAgIChpbnB1dCBvciBvdXRwdXQpIElOVEVHRVIgYXJyYXksIGRp\nbWVuc2lvbiAoTikKKiAgICAgICAgICBJZiBGQUNUID0gJ0YnLCB0aGVuIElQSVYgaXMgYW4gaW5w\ndXQgYXJndW1lbnQgYW5kIG9uIGVudHJ5CiogICAgICAgICAgY29udGFpbnMgdGhlIHBpdm90IGlu\nZGljZXMgZnJvbSB0aGUgZmFjdG9yaXphdGlvbiBBID0gTCpVCiogICAgICAgICAgYXMgY29tcHV0\nZWQgYnkgQ0dCVFJGOyByb3cgaSBvZiB0aGUgbWF0cml4IHdhcyBpbnRlcmNoYW5nZWQKKiAgICAg\nICAgICB3aXRoIHJvdyBJUElWKGkpLgoqCiogICAgICAgICAgSWYgRkFDVCA9ICdOJywgdGhlbiBJ\nUElWIGlzIGFuIG91dHB1dCBhcmd1bWVudCBhbmQgb24gZXhpdAoqICAgICAgICAgIGNvbnRhaW5z\nIHRoZSBwaXZvdCBpbmRpY2VzIGZyb20gdGhlIGZhY3Rvcml6YXRpb24gQSA9IEwqVQoqICAgICAg\nICAgIG9mIHRoZSBvcmlnaW5hbCBtYXRyaXggQS4KKgoqICAgICAgICAgIElmIEZBQ1QgPSAnRScs\nIHRoZW4gSVBJViBpcyBhbiBvdXRwdXQgYXJndW1lbnQgYW5kIG9uIGV4aXQKKiAgICAgICAgICBj\nb250YWlucyB0aGUgcGl2b3QgaW5kaWNlcyBmcm9tIHRoZSBmYWN0b3JpemF0aW9uIEEgPSBMKlUK\nKiAgICAgICAgICBvZiB0aGUgZXF1aWxpYnJhdGVkIG1hdHJpeCBBLgoqCiogIEVRVUVEICAgKGlu\ncHV0IG9yIG91dHB1dCkgQ0hBUkFDVEVSKjEKKiAgICAgICAgICBTcGVjaWZpZXMgdGhlIGZvcm0g\nb2YgZXF1aWxpYnJhdGlvbiB0aGF0IHdhcyBkb25lLgoqICAgICAgICAgID0gJ04nOiAgTm8gZXF1\naWxpYnJhdGlvbiAoYWx3YXlzIHRydWUgaWYgRkFDVCA9ICdOJykuCiogICAgICAgICAgPSAnUic6\nICBSb3cgZXF1aWxpYnJhdGlvbiwgaS5lLiwgQSBoYXMgYmVlbiBwcmVtdWx0aXBsaWVkIGJ5Ciog\nICAgICAgICAgICAgICAgICBkaWFnKFIpLgoqICAgICAgICAgID0gJ0MnOiAgQ29sdW1uIGVxdWls\naWJyYXRpb24sIGkuZS4sIEEgaGFzIGJlZW4gcG9zdG11bHRpcGxpZWQKKiAgICAgICAgICAgICAg\nICAgIGJ5IGRpYWcoQykuCiogICAgICAgICAgPSAnQic6ICBCb3RoIHJvdyBhbmQgY29sdW1uIGVx\ndWlsaWJyYXRpb24sIGkuZS4sIEEgaGFzIGJlZW4KKiAgICAgICAgICAgICAgICAgIHJlcGxhY2Vk\nIGJ5IGRpYWcoUikgKiBBICogZGlhZyhDKS4KKiAgICAgICAgICBFUVVFRCBpcyBhbiBpbnB1dCBh\ncmd1bWVudCBpZiBGQUNUID0gJ0YnOyBvdGhlcndpc2UsIGl0IGlzIGFuCiogICAgICAgICAgb3V0\ncHV0IGFyZ3VtZW50LgoqCiogIFIgICAgICAgKGlucHV0IG9yIG91dHB1dCkgUkVBTCBhcnJheSwg\nZGltZW5zaW9uIChOKQoqICAgICAgICAgIFRoZSByb3cgc2NhbGUgZmFjdG9ycyBmb3IgQS4gIElm\nIEVRVUVEID0gJ1InIG9yICdCJywgQSBpcwoqICAgICAgICAgIG11bHRpcGxpZWQgb24gdGhlIGxl\nZnQgYnkgZGlhZyhSKTsgaWYgRVFVRUQgPSAnTicgb3IgJ0MnLCBSCiogICAgICAgICAgaXMgbm90\nIGFjY2Vzc2VkLiAgUiBpcyBhbiBpbnB1dCBhcmd1bWVudCBpZiBGQUNUID0gJ0YnOwoqICAgICAg\nICAgIG90aGVyd2lzZSwgUiBpcyBhbiBvdXRwdXQgYXJndW1lbnQuICBJZiBGQUNUID0gJ0YnIGFu\nZAoqICAgICAgICAgIEVRVUVEID0gJ1InIG9yICdCJywgZWFjaCBlbGVtZW50IG9mIFIgbXVzdCBi\nZSBwb3NpdGl2ZS4KKgoqICBDICAgICAgIChpbnB1dCBvciBvdXRwdXQpIFJFQUwgYXJyYXksIGRp\nbWVuc2lvbiAoTikKKiAgICAgICAgICBUaGUgY29sdW1uIHNjYWxlIGZhY3RvcnMgZm9yIEEuICBJ\nZiBFUVVFRCA9ICdDJyBvciAnQicsIEEgaXMKKiAgICAgICAgICBtdWx0aXBsaWVkIG9uIHRoZSBy\naWdodCBieSBkaWFnKEMpOyBpZiBFUVVFRCA9ICdOJyBvciAnUicsIEMKKiAgICAgICAgICBpcyBu\nb3QgYWNjZXNzZWQuICBDIGlzIGFuIGlucHV0IGFyZ3VtZW50IGlmIEZBQ1QgPSAnRic7CiogICAg\nICAgICAgb3RoZXJ3aXNlLCBDIGlzIGFuIG91dHB1dCBhcmd1bWVudC4gIElmIEZBQ1QgPSAnRicg\nYW5kCiogICAgICAgICAgRVFVRUQgPSAnQycgb3IgJ0InLCBlYWNoIGVsZW1lbnQgb2YgQyBtdXN0\nIGJlIHBvc2l0aXZlLgoqCiogIEIgICAgICAgKGlucHV0L291dHB1dCkgQ09NUExFWCBhcnJheSwg\nZGltZW5zaW9uIChMREIsTlJIUykKKiAgICAgICAgICBPbiBlbnRyeSwgdGhlIHJpZ2h0IGhhbmQg\nc2lkZSBtYXRyaXggQi4KKiAgICAgICAgICBPbiBleGl0LAoqICAgICAgICAgIGlmIEVRVUVEID0g\nJ04nLCBCIGlzIG5vdCBtb2RpZmllZDsKKiAgICAgICAgICBpZiBUUkFOUyA9ICdOJyBhbmQgRVFV\nRUQgPSAnUicgb3IgJ0InLCBCIGlzIG92ZXJ3cml0dGVuIGJ5CiogICAgICAgICAgZGlhZyhSKSpC\nOwoqICAgICAgICAgIGlmIFRSQU5TID0gJ1QnIG9yICdDJyBhbmQgRVFVRUQgPSAnQycgb3IgJ0In\nLCBCIGlzCiogICAgICAgICAgb3ZlcndyaXR0ZW4gYnkgZGlhZyhDKSpCLgoqCiogIExEQiAgICAg\nKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBh\ncnJheSBCLiAgTERCID49IG1heCgxLE4pLgoqCiogIFggICAgICAgKG91dHB1dCkgQ09NUExFWCBh\ncnJheSwgZGltZW5zaW9uIChMRFgsTlJIUykKKiAgICAgICAgICBJZiBJTkZPID0gMCBvciBJTkZP\nID0gTisxLCB0aGUgTi1ieS1OUkhTIHNvbHV0aW9uIG1hdHJpeCBYCiogICAgICAgICAgdG8gdGhl\nIG9yaWdpbmFsIHN5c3RlbSBvZiBlcXVhdGlvbnMuICBOb3RlIHRoYXQgQSBhbmQgQiBhcmUKKiAg\nICAgICAgICBtb2RpZmllZCBvbiBleGl0IGlmIEVRVUVEIC5uZS4gJ04nLCBhbmQgdGhlIHNvbHV0\naW9uIHRvIHRoZQoqICAgICAgICAgIGVxdWlsaWJyYXRlZCBzeXN0ZW0gaXMgaW52KGRpYWcoQykp\nKlggaWYgVFJBTlMgPSAnTicgYW5kCiogICAgICAgICAgRVFVRUQgPSAnQycgb3IgJ0InLCBvciBp\nbnYoZGlhZyhSKSkqWCBpZiBUUkFOUyA9ICdUJyBvciAnQycKKiAgICAgICAgICBhbmQgRVFVRUQg\nPSAnUicgb3IgJ0InLgoqCiogIExEWCAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhl\nIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBYLiAgTERYID49IG1heCgxLE4pLgoqCiog\nIFJDT05EICAgKG91dHB1dCkgUkVBTAoqICAgICAgICAgIFRoZSBlc3RpbWF0ZSBvZiB0aGUgcmVj\naXByb2NhbCBjb25kaXRpb24gbnVtYmVyIG9mIHRoZSBtYXRyaXgKKiAgICAgICAgICBBIGFmdGVy\nIGVxdWlsaWJyYXRpb24gKGlmIGRvbmUpLiAgSWYgUkNPTkQgaXMgbGVzcyB0aGFuIHRoZQoqICAg\nICAgICAgIG1hY2hpbmUgcHJlY2lzaW9uIChpbiBwYXJ0aWN1bGFyLCBpZiBSQ09ORCA9IDApLCB0\naGUgbWF0cml4CiogICAgICAgICAgaXMgc2luZ3VsYXIgdG8gd29ya2luZyBwcmVjaXNpb24uICBU\naGlzIGNvbmRpdGlvbiBpcwoqICAgICAgICAgIGluZGljYXRlZCBieSBhIHJldHVybiBjb2RlIG9m\nIElORk8gPiAwLgoqCiogIEZFUlIgICAgKG91dHB1dCkgUkVBTCBhcnJheSwgZGltZW5zaW9uIChO\nUkhTKQoqICAgICAgICAgIFRoZSBlc3RpbWF0ZWQgZm9yd2FyZCBlcnJvciBib3VuZCBmb3IgZWFj\naCBzb2x1dGlvbiB2ZWN0b3IKKiAgICAgICAgICBYKGopICh0aGUgai10aCBjb2x1bW4gb2YgdGhl\nIHNvbHV0aW9uIG1hdHJpeCBYKS4KKiAgICAgICAgICBJZiBYVFJVRSBpcyB0aGUgdHJ1ZSBzb2x1\ndGlvbiBjb3JyZXNwb25kaW5nIHRvIFgoaiksIEZFUlIoaikKKiAgICAgICAgICBpcyBhbiBlc3Rp\nbWF0ZWQgdXBwZXIgYm91bmQgZm9yIHRoZSBtYWduaXR1ZGUgb2YgdGhlIGxhcmdlc3QKKiAgICAg\nICAgICBlbGVtZW50IGluIChYKGopIC0gWFRSVUUpIGRpdmlkZWQgYnkgdGhlIG1hZ25pdHVkZSBv\nZiB0aGUKKiAgICAgICAgICBsYXJnZXN0IGVsZW1lbnQgaW4gWChqKS4gIFRoZSBlc3RpbWF0ZSBp\ncyBhcyByZWxpYWJsZSBhcwoqICAgICAgICAgIHRoZSBlc3RpbWF0ZSBmb3IgUkNPTkQsIGFuZCBp\ncyBhbG1vc3QgYWx3YXlzIGEgc2xpZ2h0CiogICAgICAgICAgb3ZlcmVzdGltYXRlIG9mIHRoZSB0\ncnVlIGVycm9yLgoqCiogIEJFUlIgICAgKG91dHB1dCkgUkVBTCBhcnJheSwgZGltZW5zaW9uIChO\nUkhTKQoqICAgICAgICAgIFRoZSBjb21wb25lbnR3aXNlIHJlbGF0aXZlIGJhY2t3YXJkIGVycm9y\nIG9mIGVhY2ggc29sdXRpb24KKiAgICAgICAgICB2ZWN0b3IgWChqKSAoaS5lLiwgdGhlIHNtYWxs\nZXN0IHJlbGF0aXZlIGNoYW5nZSBpbgoqICAgICAgICAgIGFueSBlbGVtZW50IG9mIEEgb3IgQiB0\naGF0IG1ha2VzIFgoaikgYW4gZXhhY3Qgc29sdXRpb24pLgoqCiogIFdPUksgICAgKHdvcmtzcGFj\nZSkgQ09NUExFWCBhcnJheSwgZGltZW5zaW9uICgyKk4pCioKKiAgUldPUksgICAod29ya3NwYWNl\nL291dHB1dCkgUkVBTCBhcnJheSwgZGltZW5zaW9uIChOKQoqICAgICAgICAgIE9uIGV4aXQsIFJX\nT1JLKDEpIGNvbnRhaW5zIHRoZSByZWNpcHJvY2FsIHBpdm90IGdyb3d0aAoqICAgICAgICAgIGZh\nY3RvciBub3JtKEEpL25vcm0oVSkuIFRoZSAibWF4IGFic29sdXRlIGVsZW1lbnQiIG5vcm0gaXMK\nKiAgICAgICAgICB1c2VkLiBJZiBSV09SSygxKSBpcyBtdWNoIGxlc3MgdGhhbiAxLCB0aGVuIHRo\nZSBzdGFiaWxpdHkKKiAgICAgICAgICBvZiB0aGUgTFUgZmFjdG9yaXphdGlvbiBvZiB0aGUgKGVx\ndWlsaWJyYXRlZCkgbWF0cml4IEEKKiAgICAgICAgICBjb3VsZCBiZSBwb29yLiBUaGlzIGFsc28g\nbWVhbnMgdGhhdCB0aGUgc29sdXRpb24gWCwgY29uZGl0aW9uCiogICAgICAgICAgZXN0aW1hdG9y\nIFJDT05ELCBhbmQgZm9yd2FyZCBlcnJvciBib3VuZCBGRVJSIGNvdWxkIGJlCiogICAgICAgICAg\ndW5yZWxpYWJsZS4gSWYgZmFjdG9yaXphdGlvbiBmYWlscyB3aXRoIDA8SU5GTzw9TiwgdGhlbgoq\nICAgICAgICAgIFJXT1JLKDEpIGNvbnRhaW5zIHRoZSByZWNpcHJvY2FsIHBpdm90IGdyb3d0aCBm\nYWN0b3IgZm9yIHRoZQoqICAgICAgICAgIGxlYWRpbmcgSU5GTyBjb2x1bW5zIG9mIEEuCioKKiAg\nSU5GTyAgICAob3V0cHV0KSBJTlRFR0VSCiogICAgICAgICAgPSAwOiAgc3VjY2Vzc2Z1bCBleGl0\nCiogICAgICAgICAgPCAwOiAgaWYgSU5GTyA9IC1pLCB0aGUgaS10aCBhcmd1bWVudCBoYWQgYW4g\naWxsZWdhbCB2YWx1ZQoqICAgICAgICAgID4gMDogIGlmIElORk8gPSBpLCBhbmQgaSBpcwoqICAg\nICAgICAgICAgICAgIDw9IE46ICBVKGksaSkgaXMgZXhhY3RseSB6ZXJvLiAgVGhlIGZhY3Rvcml6\nYXRpb24KKiAgICAgICAgICAgICAgICAgICAgICAgaGFzIGJlZW4gY29tcGxldGVkLCBidXQgdGhl\nIGZhY3RvciBVIGlzIGV4YWN0bHkKKiAgICAgICAgICAgICAgICAgICAgICAgc2luZ3VsYXIsIHNv\nIHRoZSBzb2x1dGlvbiBhbmQgZXJyb3IgYm91bmRzCiogICAgICAgICAgICAgICAgICAgICAgIGNv\ndWxkIG5vdCBiZSBjb21wdXRlZC4gUkNPTkQgPSAwIGlzIHJldHVybmVkLgoqICAgICAgICAgICAg\nICAgID0gTisxOiBVIGlzIG5vbnNpbmd1bGFyLCBidXQgUkNPTkQgaXMgbGVzcyB0aGFuIG1hY2hp\nbmUKKiAgICAgICAgICAgICAgICAgICAgICAgcHJlY2lzaW9uLCBtZWFuaW5nIHRoYXQgdGhlIG1h\ndHJpeCBpcyBzaW5ndWxhcgoqICAgICAgICAgICAgICAgICAgICAgICB0byB3b3JraW5nIHByZWNp\nc2lvbi4gIE5ldmVydGhlbGVzcywgdGhlCiogICAgICAgICAgICAgICAgICAgICAgIHNvbHV0aW9u\nIGFuZCBlcnJvciBib3VuZHMgYXJlIGNvbXB1dGVkIGJlY2F1c2UKKiAgICAgICAgICAgICAgICAg\nICAgICAgdGhlcmUgYXJlIGEgbnVtYmVyIG9mIHNpdHVhdGlvbnMgd2hlcmUgdGhlCiogICAgICAg\nICAgICAgICAgICAgICAgIGNvbXB1dGVkIHNvbHV0aW9uIGNhbiBiZSBtb3JlIGFjY3VyYXRlIHRo\nYW4gdGhlCiogICAgICAgICAgICAgICAgICAgICAgIHZhbHVlIG9mIFJDT05EIHdvdWxkIHN1Z2dl\nc3QuCioKcksDAABohmiHKYFyTAMAAH1yTQMAAChoioloi2iMdWJomIoBL2iZWA0AAABjZ2Jzdnhf\nNDcudHh0ck4DAAB1YmibigEvaJxYBQAAAGdic3Z4ck8DAABomIoBL3ViaH1oYV1ofodSclADAAB9\nclEDAAAoaIFYBwAAAGdlbmVyYWxyUgMAAGiDWAQAAABiYW5kclMDAABocVhkAAAAZHJpdmVyIGV4\ncGVydCwgc29sdmUgQSpYID0gQiwgQ29uZGl0aW9uIE51bWJlciwgRXJyb3IgQm91bmRzLCBSZWZp\nbmUsIEZhY3RvciwgRXF1aWxpYnJhdGUsIFRyYW5zcG9zZXJUAwAAaIZohymBclUDAAB9clYDAAAo\naIqJaItojHViaI1YLwAAAGh0dHA6Ly93d3cubmV0bGliLm9yZy9sYXBhY2svY29tcGxleDE2L3pn\nYnN2eC5mclcDAABoj1gBAAAAemiQaH1okV1ofodSclgDAAB9clkDAAAoaJRYJTAAACAgICAgIFNV\nQlJPVVRJTkUgWkdCU1ZYKCBGQUNULCBUUkFOUywgTiwgS0wsIEtVLCBOUkhTLCBBQiwgTERBQiwg\nQUZCLAogICAgICQgICAgICAgICAgICAgICAgICAgTERBRkIsIElQSVYsIEVRVUVELCBSLCBDLCBC\nLCBMREIsIFgsIExEWCwKICAgICAkICAgICAgICAgICAgICAgICAgIFJDT05ELCBGRVJSLCBCRVJS\nLCBXT1JLLCBSV09SSywgSU5GTyApCioKKiAgLS0gTEFQQUNLIGRyaXZlciByb3V0aW5lICh2ZXJz\naW9uIDMuMikgLS0KKiAgLS0gTEFQQUNLIGlzIGEgc29mdHdhcmUgcGFja2FnZSBwcm92aWRlZCBi\neSBVbml2LiBvZiBUZW5uZXNzZWUsICAgIC0tCiogIC0tIFVuaXYuIG9mIENhbGlmb3JuaWEgQmVy\na2VsZXksIFVuaXYuIG9mIENvbG9yYWRvIERlbnZlciBhbmQgTkFHIEx0ZC4uLS0KKiAgICAgTm92\nZW1iZXIgMjAwNgoqCiogICAgIC4uIFNjYWxhciBBcmd1bWVudHMgLi4KICAgICAgQ0hBUkFDVEVS\nICAgICAgICAgIEVRVUVELCBGQUNULCBUUkFOUwogICAgICBJTlRFR0VSICAgICAgICAgICAgSU5G\nTywgS0wsIEtVLCBMREFCLCBMREFGQiwgTERCLCBMRFgsIE4sIE5SSFMKICAgICAgRE9VQkxFIFBS\nRUNJU0lPTiAgIFJDT05ECiogICAgIC4uCiogICAgIC4uIEFycmF5IEFyZ3VtZW50cyAuLgogICAg\nICBJTlRFR0VSICAgICAgICAgICAgSVBJViggKiApCiAgICAgIERPVUJMRSBQUkVDSVNJT04gICBC\nRVJSKCAqICksIEMoICogKSwgRkVSUiggKiApLCBSKCAqICksCiAgICAgJCAgICAgICAgICAgICAg\nICAgICBSV09SSyggKiApCiAgICAgIENPTVBMRVgqMTYgICAgICAgICBBQiggTERBQiwgKiApLCBB\nRkIoIExEQUZCLCAqICksIEIoIExEQiwgKiApLAogICAgICQgICAgICAgICAgICAgICAgICAgV09S\nSyggKiApLCBYKCBMRFgsICogKQoqICAgICAuLgoqCiogIFB1cnBvc2UKKiAgPT09PT09PQoqCiog\nIFpHQlNWWCB1c2VzIHRoZSBMVSBmYWN0b3JpemF0aW9uIHRvIGNvbXB1dGUgdGhlIHNvbHV0aW9u\nIHRvIGEgY29tcGxleAoqICBzeXN0ZW0gb2YgbGluZWFyIGVxdWF0aW9ucyBBICogWCA9IEIsIEEq\nKlQgKiBYID0gQiwgb3IgQSoqSCAqIFggPSBCLAoqICB3aGVyZSBBIGlzIGEgYmFuZCBtYXRyaXgg\nb2Ygb3JkZXIgTiB3aXRoIEtMIHN1YmRpYWdvbmFscyBhbmQgS1UKKiAgc3VwZXJkaWFnb25hbHMs\nIGFuZCBYIGFuZCBCIGFyZSBOLWJ5LU5SSFMgbWF0cmljZXMuCioKKiAgRXJyb3IgYm91bmRzIG9u\nIHRoZSBzb2x1dGlvbiBhbmQgYSBjb25kaXRpb24gZXN0aW1hdGUgYXJlIGFsc28KKiAgcHJvdmlk\nZWQuCioKKiAgRGVzY3JpcHRpb24KKiAgPT09PT09PT09PT0KKgoqICBUaGUgZm9sbG93aW5nIHN0\nZXBzIGFyZSBwZXJmb3JtZWQgYnkgdGhpcyBzdWJyb3V0aW5lOgoqCiogIDEuIElmIEZBQ1QgPSAn\nRScsIHJlYWwgc2NhbGluZyBmYWN0b3JzIGFyZSBjb21wdXRlZCB0byBlcXVpbGlicmF0ZQoqICAg\nICB0aGUgc3lzdGVtOgoqICAgICAgICBUUkFOUyA9ICdOJzogIGRpYWcoUikqQSpkaWFnKEMpICAg\nICAqaW52KGRpYWcoQykpKlggPSBkaWFnKFIpKkIKKiAgICAgICAgVFJBTlMgPSAnVCc6IChkaWFn\nKFIpKkEqZGlhZyhDKSkqKlQgKmludihkaWFnKFIpKSpYID0gZGlhZyhDKSpCCiogICAgICAgIFRS\nQU5TID0gJ0MnOiAoZGlhZyhSKSpBKmRpYWcoQykpKipIICppbnYoZGlhZyhSKSkqWCA9IGRpYWco\nQykqQgoqICAgICBXaGV0aGVyIG9yIG5vdCB0aGUgc3lzdGVtIHdpbGwgYmUgZXF1aWxpYnJhdGVk\nIGRlcGVuZHMgb24gdGhlCiogICAgIHNjYWxpbmcgb2YgdGhlIG1hdHJpeCBBLCBidXQgaWYgZXF1\naWxpYnJhdGlvbiBpcyB1c2VkLCBBIGlzCiogICAgIG92ZXJ3cml0dGVuIGJ5IGRpYWcoUikqQSpk\naWFnKEMpIGFuZCBCIGJ5IGRpYWcoUikqQiAoaWYgVFJBTlM9J04nKQoqICAgICBvciBkaWFnKEMp\nKkIgKGlmIFRSQU5TID0gJ1QnIG9yICdDJykuCioKKiAgMi4gSWYgRkFDVCA9ICdOJyBvciAnRScs\nIHRoZSBMVSBkZWNvbXBvc2l0aW9uIGlzIHVzZWQgdG8gZmFjdG9yIHRoZQoqICAgICBtYXRyaXgg\nQSAoYWZ0ZXIgZXF1aWxpYnJhdGlvbiBpZiBGQUNUID0gJ0UnKSBhcwoqICAgICAgICBBID0gTCAq\nIFUsCiogICAgIHdoZXJlIEwgaXMgYSBwcm9kdWN0IG9mIHBlcm11dGF0aW9uIGFuZCB1bml0IGxv\nd2VyIHRyaWFuZ3VsYXIKKiAgICAgbWF0cmljZXMgd2l0aCBLTCBzdWJkaWFnb25hbHMsIGFuZCBV\nIGlzIHVwcGVyIHRyaWFuZ3VsYXIgd2l0aAoqICAgICBLTCtLVSBzdXBlcmRpYWdvbmFscy4KKgoq\nICAzLiBJZiBzb21lIFUoaSxpKT0wLCBzbyB0aGF0IFUgaXMgZXhhY3RseSBzaW5ndWxhciwgdGhl\nbiB0aGUgcm91dGluZQoqICAgICByZXR1cm5zIHdpdGggSU5GTyA9IGkuIE90aGVyd2lzZSwgdGhl\nIGZhY3RvcmVkIGZvcm0gb2YgQSBpcyB1c2VkCiogICAgIHRvIGVzdGltYXRlIHRoZSBjb25kaXRp\nb24gbnVtYmVyIG9mIHRoZSBtYXRyaXggQS4gIElmIHRoZQoqICAgICByZWNpcHJvY2FsIG9mIHRo\nZSBjb25kaXRpb24gbnVtYmVyIGlzIGxlc3MgdGhhbiBtYWNoaW5lIHByZWNpc2lvbiwKKiAgICAg\nSU5GTyA9IE4rMSBpcyByZXR1cm5lZCBhcyBhIHdhcm5pbmcsIGJ1dCB0aGUgcm91dGluZSBzdGls\nbCBnb2VzIG9uCiogICAgIHRvIHNvbHZlIGZvciBYIGFuZCBjb21wdXRlIGVycm9yIGJvdW5kcyBh\ncyBkZXNjcmliZWQgYmVsb3cuCioKKiAgNC4gVGhlIHN5c3RlbSBvZiBlcXVhdGlvbnMgaXMgc29s\ndmVkIGZvciBYIHVzaW5nIHRoZSBmYWN0b3JlZCBmb3JtCiogICAgIG9mIEEuCioKKiAgNS4gSXRl\ncmF0aXZlIHJlZmluZW1lbnQgaXMgYXBwbGllZCB0byBpbXByb3ZlIHRoZSBjb21wdXRlZCBzb2x1\ndGlvbgoqICAgICBtYXRyaXggYW5kIGNhbGN1bGF0ZSBlcnJvciBib3VuZHMgYW5kIGJhY2t3YXJk\nIGVycm9yIGVzdGltYXRlcwoqICAgICBmb3IgaXQuCioKKiAgNi4gSWYgZXF1aWxpYnJhdGlvbiB3\nYXMgdXNlZCwgdGhlIG1hdHJpeCBYIGlzIHByZW11bHRpcGxpZWQgYnkKKiAgICAgZGlhZyhDKSAo\naWYgVFJBTlMgPSAnTicpIG9yIGRpYWcoUikgKGlmIFRSQU5TID0gJ1QnIG9yICdDJykgc28KKiAg\nICAgdGhhdCBpdCBzb2x2ZXMgdGhlIG9yaWdpbmFsIHN5c3RlbSBiZWZvcmUgZXF1aWxpYnJhdGlv\nbi4KKgoqICBBcmd1bWVudHMKKiAgPT09PT09PT09CioKKiAgRkFDVCAgICAoaW5wdXQpIENIQVJB\nQ1RFUioxCiogICAgICAgICAgU3BlY2lmaWVzIHdoZXRoZXIgb3Igbm90IHRoZSBmYWN0b3JlZCBm\nb3JtIG9mIHRoZSBtYXRyaXggQSBpcwoqICAgICAgICAgIHN1cHBsaWVkIG9uIGVudHJ5LCBhbmQg\naWYgbm90LCB3aGV0aGVyIHRoZSBtYXRyaXggQSBzaG91bGQgYmUKKiAgICAgICAgICBlcXVpbGli\ncmF0ZWQgYmVmb3JlIGl0IGlzIGZhY3RvcmVkLgoqICAgICAgICAgID0gJ0YnOiAgT24gZW50cnks\nIEFGQiBhbmQgSVBJViBjb250YWluIHRoZSBmYWN0b3JlZCBmb3JtIG9mCiogICAgICAgICAgICAg\nICAgICBBLiAgSWYgRVFVRUQgaXMgbm90ICdOJywgdGhlIG1hdHJpeCBBIGhhcyBiZWVuCiogICAg\nICAgICAgICAgICAgICBlcXVpbGlicmF0ZWQgd2l0aCBzY2FsaW5nIGZhY3RvcnMgZ2l2ZW4gYnkg\nUiBhbmQgQy4KKiAgICAgICAgICAgICAgICAgIEFCLCBBRkIsIGFuZCBJUElWIGFyZSBub3QgbW9k\naWZpZWQuCiogICAgICAgICAgPSAnTic6ICBUaGUgbWF0cml4IEEgd2lsbCBiZSBjb3BpZWQgdG8g\nQUZCIGFuZCBmYWN0b3JlZC4KKiAgICAgICAgICA9ICdFJzogIFRoZSBtYXRyaXggQSB3aWxsIGJl\nIGVxdWlsaWJyYXRlZCBpZiBuZWNlc3NhcnksIHRoZW4KKiAgICAgICAgICAgICAgICAgIGNvcGll\nZCB0byBBRkIgYW5kIGZhY3RvcmVkLgoqCiogIFRSQU5TICAgKGlucHV0KSBDSEFSQUNURVIqMQoq\nICAgICAgICAgIFNwZWNpZmllcyB0aGUgZm9ybSBvZiB0aGUgc3lzdGVtIG9mIGVxdWF0aW9ucy4K\nKiAgICAgICAgICA9ICdOJzogIEEgKiBYID0gQiAgICAgKE5vIHRyYW5zcG9zZSkKKiAgICAgICAg\nICA9ICdUJzogIEEqKlQgKiBYID0gQiAgKFRyYW5zcG9zZSkKKiAgICAgICAgICA9ICdDJzogIEEq\nKkggKiBYID0gQiAgKENvbmp1Z2F0ZSB0cmFuc3Bvc2UpCioKKiAgTiAgICAgICAoaW5wdXQpIElO\nVEVHRVIKKiAgICAgICAgICBUaGUgbnVtYmVyIG9mIGxpbmVhciBlcXVhdGlvbnMsIGkuZS4sIHRo\nZSBvcmRlciBvZiB0aGUKKiAgICAgICAgICBtYXRyaXggQS4gIE4gPj0gMC4KKgoqICBLTCAgICAg\nIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2Ygc3ViZGlhZ29uYWxzIHdp\ndGhpbiB0aGUgYmFuZCBvZiBBLiAgS0wgPj0gMC4KKgoqICBLVSAgICAgIChpbnB1dCkgSU5URUdF\nUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2Ygc3VwZXJkaWFnb25hbHMgd2l0aGluIHRoZSBiYW5k\nIG9mIEEuICBLVSA+PSAwLgoqCiogIE5SSFMgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAg\nVGhlIG51bWJlciBvZiByaWdodCBoYW5kIHNpZGVzLCBpLmUuLCB0aGUgbnVtYmVyIG9mIGNvbHVt\nbnMKKiAgICAgICAgICBvZiB0aGUgbWF0cmljZXMgQiBhbmQgWC4gIE5SSFMgPj0gMC4KKgoqICBB\nQiAgICAgIChpbnB1dC9vdXRwdXQpIENPTVBMRVgqMTYgYXJyYXksIGRpbWVuc2lvbiAoTERBQixO\nKQoqICAgICAgICAgIE9uIGVudHJ5LCB0aGUgbWF0cml4IEEgaW4gYmFuZCBzdG9yYWdlLCBpbiBy\nb3dzIDEgdG8gS0wrS1UrMS4KKiAgICAgICAgICBUaGUgai10aCBjb2x1bW4gb2YgQSBpcyBzdG9y\nZWQgaW4gdGhlIGotdGggY29sdW1uIG9mIHRoZQoqICAgICAgICAgIGFycmF5IEFCIGFzIGZvbGxv\nd3M6CiogICAgICAgICAgQUIoS1UrMStpLWosaikgPSBBKGksaikgZm9yIG1heCgxLGotS1UpPD1p\nPD1taW4oTixqK2tsKQoqCiogICAgICAgICAgSWYgRkFDVCA9ICdGJyBhbmQgRVFVRUQgaXMgbm90\nICdOJywgdGhlbiBBIG11c3QgaGF2ZSBiZWVuCiogICAgICAgICAgZXF1aWxpYnJhdGVkIGJ5IHRo\nZSBzY2FsaW5nIGZhY3RvcnMgaW4gUiBhbmQvb3IgQy4gIEFCIGlzIG5vdAoqICAgICAgICAgIG1v\nZGlmaWVkIGlmIEZBQ1QgPSAnRicgb3IgJ04nLCBvciBpZiBGQUNUID0gJ0UnIGFuZAoqICAgICAg\nICAgIEVRVUVEID0gJ04nIG9uIGV4aXQuCioKKiAgICAgICAgICBPbiBleGl0LCBpZiBFUVVFRCAu\nbmUuICdOJywgQSBpcyBzY2FsZWQgYXMgZm9sbG93czoKKiAgICAgICAgICBFUVVFRCA9ICdSJzog\nIEEgOj0gZGlhZyhSKSAqIEEKKiAgICAgICAgICBFUVVFRCA9ICdDJzogIEEgOj0gQSAqIGRpYWco\nQykKKiAgICAgICAgICBFUVVFRCA9ICdCJzogIEEgOj0gZGlhZyhSKSAqIEEgKiBkaWFnKEMpLgoq\nCiogIExEQUIgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGltZW5z\naW9uIG9mIHRoZSBhcnJheSBBQi4gIExEQUIgPj0gS0wrS1UrMS4KKgoqICBBRkIgICAgIChpbnB1\ndCBvciBvdXRwdXQpIENPTVBMRVgqMTYgYXJyYXksIGRpbWVuc2lvbiAoTERBRkIsTikKKiAgICAg\nICAgICBJZiBGQUNUID0gJ0YnLCB0aGVuIEFGQiBpcyBhbiBpbnB1dCBhcmd1bWVudCBhbmQgb24g\nZW50cnkKKiAgICAgICAgICBjb250YWlucyBkZXRhaWxzIG9mIHRoZSBMVSBmYWN0b3JpemF0aW9u\nIG9mIHRoZSBiYW5kIG1hdHJpeAoqICAgICAgICAgIEEsIGFzIGNvbXB1dGVkIGJ5IFpHQlRSRi4g\nIFUgaXMgc3RvcmVkIGFzIGFuIHVwcGVyIHRyaWFuZ3VsYXIKKiAgICAgICAgICBiYW5kIG1hdHJp\neCB3aXRoIEtMK0tVIHN1cGVyZGlhZ29uYWxzIGluIHJvd3MgMSB0byBLTCtLVSsxLAoqICAgICAg\nICAgIGFuZCB0aGUgbXVsdGlwbGllcnMgdXNlZCBkdXJpbmcgdGhlIGZhY3Rvcml6YXRpb24gYXJl\nIHN0b3JlZAoqICAgICAgICAgIGluIHJvd3MgS0wrS1UrMiB0byAyKktMK0tVKzEuICBJZiBFUVVF\nRCAubmUuICdOJywgdGhlbiBBRkIgaXMKKiAgICAgICAgICB0aGUgZmFjdG9yZWQgZm9ybSBvZiB0\naGUgZXF1aWxpYnJhdGVkIG1hdHJpeCBBLgoqCiogICAgICAgICAgSWYgRkFDVCA9ICdOJywgdGhl\nbiBBRkIgaXMgYW4gb3V0cHV0IGFyZ3VtZW50IGFuZCBvbiBleGl0CiogICAgICAgICAgcmV0dXJu\ncyBkZXRhaWxzIG9mIHRoZSBMVSBmYWN0b3JpemF0aW9uIG9mIEEuCioKKiAgICAgICAgICBJZiBG\nQUNUID0gJ0UnLCB0aGVuIEFGQiBpcyBhbiBvdXRwdXQgYXJndW1lbnQgYW5kIG9uIGV4aXQKKiAg\nICAgICAgICByZXR1cm5zIGRldGFpbHMgb2YgdGhlIExVIGZhY3Rvcml6YXRpb24gb2YgdGhlIGVx\ndWlsaWJyYXRlZAoqICAgICAgICAgIG1hdHJpeCBBIChzZWUgdGhlIGRlc2NyaXB0aW9uIG9mIEFC\nIGZvciB0aGUgZm9ybSBvZiB0aGUKKiAgICAgICAgICBlcXVpbGlicmF0ZWQgbWF0cml4KS4KKgoq\nICBMREFGQiAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBsZWFkaW5nIGRpbWVuc2lv\nbiBvZiB0aGUgYXJyYXkgQUZCLiAgTERBRkIgPj0gMipLTCtLVSsxLgoqCiogIElQSVYgICAgKGlu\ncHV0IG9yIG91dHB1dCkgSU5URUdFUiBhcnJheSwgZGltZW5zaW9uIChOKQoqICAgICAgICAgIElm\nIEZBQ1QgPSAnRicsIHRoZW4gSVBJViBpcyBhbiBpbnB1dCBhcmd1bWVudCBhbmQgb24gZW50cnkK\nKiAgICAgICAgICBjb250YWlucyB0aGUgcGl2b3QgaW5kaWNlcyBmcm9tIHRoZSBmYWN0b3JpemF0\naW9uIEEgPSBMKlUKKiAgICAgICAgICBhcyBjb21wdXRlZCBieSBaR0JUUkY7IHJvdyBpIG9mIHRo\nZSBtYXRyaXggd2FzIGludGVyY2hhbmdlZAoqICAgICAgICAgIHdpdGggcm93IElQSVYoaSkuCioK\nKiAgICAgICAgICBJZiBGQUNUID0gJ04nLCB0aGVuIElQSVYgaXMgYW4gb3V0cHV0IGFyZ3VtZW50\nIGFuZCBvbiBleGl0CiogICAgICAgICAgY29udGFpbnMgdGhlIHBpdm90IGluZGljZXMgZnJvbSB0\naGUgZmFjdG9yaXphdGlvbiBBID0gTCpVCiogICAgICAgICAgb2YgdGhlIG9yaWdpbmFsIG1hdHJp\neCBBLgoqCiogICAgICAgICAgSWYgRkFDVCA9ICdFJywgdGhlbiBJUElWIGlzIGFuIG91dHB1dCBh\ncmd1bWVudCBhbmQgb24gZXhpdAoqICAgICAgICAgIGNvbnRhaW5zIHRoZSBwaXZvdCBpbmRpY2Vz\nIGZyb20gdGhlIGZhY3Rvcml6YXRpb24gQSA9IEwqVQoqICAgICAgICAgIG9mIHRoZSBlcXVpbGli\ncmF0ZWQgbWF0cml4IEEuCioKKiAgRVFVRUQgICAoaW5wdXQgb3Igb3V0cHV0KSBDSEFSQUNURVIq\nMQoqICAgICAgICAgIFNwZWNpZmllcyB0aGUgZm9ybSBvZiBlcXVpbGlicmF0aW9uIHRoYXQgd2Fz\nIGRvbmUuCiogICAgICAgICAgPSAnTic6ICBObyBlcXVpbGlicmF0aW9uIChhbHdheXMgdHJ1ZSBp\nZiBGQUNUID0gJ04nKS4KKiAgICAgICAgICA9ICdSJzogIFJvdyBlcXVpbGlicmF0aW9uLCBpLmUu\nLCBBIGhhcyBiZWVuIHByZW11bHRpcGxpZWQgYnkKKiAgICAgICAgICAgICAgICAgIGRpYWcoUiku\nCiogICAgICAgICAgPSAnQyc6ICBDb2x1bW4gZXF1aWxpYnJhdGlvbiwgaS5lLiwgQSBoYXMgYmVl\nbiBwb3N0bXVsdGlwbGllZAoqICAgICAgICAgICAgICAgICAgYnkgZGlhZyhDKS4KKiAgICAgICAg\nICA9ICdCJzogIEJvdGggcm93IGFuZCBjb2x1bW4gZXF1aWxpYnJhdGlvbiwgaS5lLiwgQSBoYXMg\nYmVlbgoqICAgICAgICAgICAgICAgICAgcmVwbGFjZWQgYnkgZGlhZyhSKSAqIEEgKiBkaWFnKEMp\nLgoqICAgICAgICAgIEVRVUVEIGlzIGFuIGlucHV0IGFyZ3VtZW50IGlmIEZBQ1QgPSAnRic7IG90\naGVyd2lzZSwgaXQgaXMgYW4KKiAgICAgICAgICBvdXRwdXQgYXJndW1lbnQuCioKKiAgUiAgICAg\nICAoaW5wdXQgb3Igb3V0cHV0KSBET1VCTEUgUFJFQ0lTSU9OIGFycmF5LCBkaW1lbnNpb24gKE4p\nCiogICAgICAgICAgVGhlIHJvdyBzY2FsZSBmYWN0b3JzIGZvciBBLiAgSWYgRVFVRUQgPSAnUicg\nb3IgJ0InLCBBIGlzCiogICAgICAgICAgbXVsdGlwbGllZCBvbiB0aGUgbGVmdCBieSBkaWFnKFIp\nOyBpZiBFUVVFRCA9ICdOJyBvciAnQycsIFIKKiAgICAgICAgICBpcyBub3QgYWNjZXNzZWQuICBS\nIGlzIGFuIGlucHV0IGFyZ3VtZW50IGlmIEZBQ1QgPSAnRic7CiogICAgICAgICAgb3RoZXJ3aXNl\nLCBSIGlzIGFuIG91dHB1dCBhcmd1bWVudC4gIElmIEZBQ1QgPSAnRicgYW5kCiogICAgICAgICAg\nRVFVRUQgPSAnUicgb3IgJ0InLCBlYWNoIGVsZW1lbnQgb2YgUiBtdXN0IGJlIHBvc2l0aXZlLgoq\nCiogIEMgICAgICAgKGlucHV0IG9yIG91dHB1dCkgRE9VQkxFIFBSRUNJU0lPTiBhcnJheSwgZGlt\nZW5zaW9uIChOKQoqICAgICAgICAgIFRoZSBjb2x1bW4gc2NhbGUgZmFjdG9ycyBmb3IgQS4gIElm\nIEVRVUVEID0gJ0MnIG9yICdCJywgQSBpcwoqICAgICAgICAgIG11bHRpcGxpZWQgb24gdGhlIHJp\nZ2h0IGJ5IGRpYWcoQyk7IGlmIEVRVUVEID0gJ04nIG9yICdSJywgQwoqICAgICAgICAgIGlzIG5v\ndCBhY2Nlc3NlZC4gIEMgaXMgYW4gaW5wdXQgYXJndW1lbnQgaWYgRkFDVCA9ICdGJzsKKiAgICAg\nICAgICBvdGhlcndpc2UsIEMgaXMgYW4gb3V0cHV0IGFyZ3VtZW50LiAgSWYgRkFDVCA9ICdGJyBh\nbmQKKiAgICAgICAgICBFUVVFRCA9ICdDJyBvciAnQicsIGVhY2ggZWxlbWVudCBvZiBDIG11c3Qg\nYmUgcG9zaXRpdmUuCioKKiAgQiAgICAgICAoaW5wdXQvb3V0cHV0KSBDT01QTEVYKjE2IGFycmF5\nLCBkaW1lbnNpb24gKExEQixOUkhTKQoqICAgICAgICAgIE9uIGVudHJ5LCB0aGUgcmlnaHQgaGFu\nZCBzaWRlIG1hdHJpeCBCLgoqICAgICAgICAgIE9uIGV4aXQsCiogICAgICAgICAgaWYgRVFVRUQg\nPSAnTicsIEIgaXMgbm90IG1vZGlmaWVkOwoqICAgICAgICAgIGlmIFRSQU5TID0gJ04nIGFuZCBF\nUVVFRCA9ICdSJyBvciAnQicsIEIgaXMgb3ZlcndyaXR0ZW4gYnkKKiAgICAgICAgICBkaWFnKFIp\nKkI7CiogICAgICAgICAgaWYgVFJBTlMgPSAnVCcgb3IgJ0MnIGFuZCBFUVVFRCA9ICdDJyBvciAn\nQicsIEIgaXMKKiAgICAgICAgICBvdmVyd3JpdHRlbiBieSBkaWFnKEMpKkIuCioKKiAgTERCICAg\nICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbGVhZGluZyBkaW1lbnNpb24gb2YgdGhl\nIGFycmF5IEIuICBMREIgPj0gbWF4KDEsTikuCioKKiAgWCAgICAgICAob3V0cHV0KSBDT01QTEVY\nKjE2IGFycmF5LCBkaW1lbnNpb24gKExEWCxOUkhTKQoqICAgICAgICAgIElmIElORk8gPSAwIG9y\nIElORk8gPSBOKzEsIHRoZSBOLWJ5LU5SSFMgc29sdXRpb24gbWF0cml4IFgKKiAgICAgICAgICB0\nbyB0aGUgb3JpZ2luYWwgc3lzdGVtIG9mIGVxdWF0aW9ucy4gIE5vdGUgdGhhdCBBIGFuZCBCIGFy\nZQoqICAgICAgICAgIG1vZGlmaWVkIG9uIGV4aXQgaWYgRVFVRUQgLm5lLiAnTicsIGFuZCB0aGUg\nc29sdXRpb24gdG8gdGhlCiogICAgICAgICAgZXF1aWxpYnJhdGVkIHN5c3RlbSBpcyBpbnYoZGlh\nZyhDKSkqWCBpZiBUUkFOUyA9ICdOJyBhbmQKKiAgICAgICAgICBFUVVFRCA9ICdDJyBvciAnQics\nIG9yIGludihkaWFnKFIpKSpYIGlmIFRSQU5TID0gJ1QnIG9yICdDJwoqICAgICAgICAgIGFuZCBF\nUVVFRCA9ICdSJyBvciAnQicuCioKKiAgTERYICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAg\nICBUaGUgbGVhZGluZyBkaW1lbnNpb24gb2YgdGhlIGFycmF5IFguICBMRFggPj0gbWF4KDEsTiku\nCioKKiAgUkNPTkQgICAob3V0cHV0KSBET1VCTEUgUFJFQ0lTSU9OCiogICAgICAgICAgVGhlIGVz\ndGltYXRlIG9mIHRoZSByZWNpcHJvY2FsIGNvbmRpdGlvbiBudW1iZXIgb2YgdGhlIG1hdHJpeAoq\nICAgICAgICAgIEEgYWZ0ZXIgZXF1aWxpYnJhdGlvbiAoaWYgZG9uZSkuICBJZiBSQ09ORCBpcyBs\nZXNzIHRoYW4gdGhlCiogICAgICAgICAgbWFjaGluZSBwcmVjaXNpb24gKGluIHBhcnRpY3VsYXIs\nIGlmIFJDT05EID0gMCksIHRoZSBtYXRyaXgKKiAgICAgICAgICBpcyBzaW5ndWxhciB0byB3b3Jr\naW5nIHByZWNpc2lvbi4gIFRoaXMgY29uZGl0aW9uIGlzCiogICAgICAgICAgaW5kaWNhdGVkIGJ5\nIGEgcmV0dXJuIGNvZGUgb2YgSU5GTyA+IDAuCioKKiAgRkVSUiAgICAob3V0cHV0KSBET1VCTEUg\nUFJFQ0lTSU9OIGFycmF5LCBkaW1lbnNpb24gKE5SSFMpCiogICAgICAgICAgVGhlIGVzdGltYXRl\nZCBmb3J3YXJkIGVycm9yIGJvdW5kIGZvciBlYWNoIHNvbHV0aW9uIHZlY3RvcgoqICAgICAgICAg\nIFgoaikgKHRoZSBqLXRoIGNvbHVtbiBvZiB0aGUgc29sdXRpb24gbWF0cml4IFgpLgoqICAgICAg\nICAgIElmIFhUUlVFIGlzIHRoZSB0cnVlIHNvbHV0aW9uIGNvcnJlc3BvbmRpbmcgdG8gWChqKSwg\nRkVSUihqKQoqICAgICAgICAgIGlzIGFuIGVzdGltYXRlZCB1cHBlciBib3VuZCBmb3IgdGhlIG1h\nZ25pdHVkZSBvZiB0aGUgbGFyZ2VzdAoqICAgICAgICAgIGVsZW1lbnQgaW4gKFgoaikgLSBYVFJV\nRSkgZGl2aWRlZCBieSB0aGUgbWFnbml0dWRlIG9mIHRoZQoqICAgICAgICAgIGxhcmdlc3QgZWxl\nbWVudCBpbiBYKGopLiAgVGhlIGVzdGltYXRlIGlzIGFzIHJlbGlhYmxlIGFzCiogICAgICAgICAg\ndGhlIGVzdGltYXRlIGZvciBSQ09ORCwgYW5kIGlzIGFsbW9zdCBhbHdheXMgYSBzbGlnaHQKKiAg\nICAgICAgICBvdmVyZXN0aW1hdGUgb2YgdGhlIHRydWUgZXJyb3IuCioKKiAgQkVSUiAgICAob3V0\ncHV0KSBET1VCTEUgUFJFQ0lTSU9OIGFycmF5LCBkaW1lbnNpb24gKE5SSFMpCiogICAgICAgICAg\nVGhlIGNvbXBvbmVudHdpc2UgcmVsYXRpdmUgYmFja3dhcmQgZXJyb3Igb2YgZWFjaCBzb2x1dGlv\nbgoqICAgICAgICAgIHZlY3RvciBYKGopIChpLmUuLCB0aGUgc21hbGxlc3QgcmVsYXRpdmUgY2hh\nbmdlIGluCiogICAgICAgICAgYW55IGVsZW1lbnQgb2YgQSBvciBCIHRoYXQgbWFrZXMgWChqKSBh\nbiBleGFjdCBzb2x1dGlvbikuCioKKiAgV09SSyAgICAod29ya3NwYWNlKSBDT01QTEVYKjE2IGFy\ncmF5LCBkaW1lbnNpb24gKDIqTikKKgoqICBSV09SSyAgICh3b3Jrc3BhY2Uvb3V0cHV0KSBET1VC\nTEUgUFJFQ0lTSU9OIGFycmF5LCBkaW1lbnNpb24gKE4pCiogICAgICAgICAgT24gZXhpdCwgUldP\nUksoMSkgY29udGFpbnMgdGhlIHJlY2lwcm9jYWwgcGl2b3QgZ3Jvd3RoCiogICAgICAgICAgZmFj\ndG9yIG5vcm0oQSkvbm9ybShVKS4gVGhlICJtYXggYWJzb2x1dGUgZWxlbWVudCIgbm9ybSBpcwoq\nICAgICAgICAgIHVzZWQuIElmIFJXT1JLKDEpIGlzIG11Y2ggbGVzcyB0aGFuIDEsIHRoZW4gdGhl\nIHN0YWJpbGl0eQoqICAgICAgICAgIG9mIHRoZSBMVSBmYWN0b3JpemF0aW9uIG9mIHRoZSAoZXF1\naWxpYnJhdGVkKSBtYXRyaXggQQoqICAgICAgICAgIGNvdWxkIGJlIHBvb3IuIFRoaXMgYWxzbyBt\nZWFucyB0aGF0IHRoZSBzb2x1dGlvbiBYLCBjb25kaXRpb24KKiAgICAgICAgICBlc3RpbWF0b3Ig\nUkNPTkQsIGFuZCBmb3J3YXJkIGVycm9yIGJvdW5kIEZFUlIgY291bGQgYmUKKiAgICAgICAgICB1\nbnJlbGlhYmxlLiBJZiBmYWN0b3JpemF0aW9uIGZhaWxzIHdpdGggMDxJTkZPPD1OLCB0aGVuCiog\nICAgICAgICAgUldPUksoMSkgY29udGFpbnMgdGhlIHJlY2lwcm9jYWwgcGl2b3QgZ3Jvd3RoIGZh\nY3RvciBmb3IgdGhlCiogICAgICAgICAgbGVhZGluZyBJTkZPIGNvbHVtbnMgb2YgQS4KKgoqICBJ\nTkZPICAgIChvdXRwdXQpIElOVEVHRVIKKiAgICAgICAgICA9IDA6ICBzdWNjZXNzZnVsIGV4aXQK\nKiAgICAgICAgICA8IDA6ICBpZiBJTkZPID0gLWksIHRoZSBpLXRoIGFyZ3VtZW50IGhhZCBhbiBp\nbGxlZ2FsIHZhbHVlCiogICAgICAgICAgPiAwOiAgaWYgSU5GTyA9IGksIGFuZCBpIGlzCiogICAg\nICAgICAgICAgICAgPD0gTjogIFUoaSxpKSBpcyBleGFjdGx5IHplcm8uICBUaGUgZmFjdG9yaXph\ndGlvbgoqICAgICAgICAgICAgICAgICAgICAgICBoYXMgYmVlbiBjb21wbGV0ZWQsIGJ1dCB0aGUg\nZmFjdG9yIFUgaXMgZXhhY3RseQoqICAgICAgICAgICAgICAgICAgICAgICBzaW5ndWxhciwgc28g\ndGhlIHNvbHV0aW9uIGFuZCBlcnJvciBib3VuZHMKKiAgICAgICAgICAgICAgICAgICAgICAgY291\nbGQgbm90IGJlIGNvbXB1dGVkLiBSQ09ORCA9IDAgaXMgcmV0dXJuZWQuCiogICAgICAgICAgICAg\nICAgPSBOKzE6IFUgaXMgbm9uc2luZ3VsYXIsIGJ1dCBSQ09ORCBpcyBsZXNzIHRoYW4gbWFjaGlu\nZQoqICAgICAgICAgICAgICAgICAgICAgICBwcmVjaXNpb24sIG1lYW5pbmcgdGhhdCB0aGUgbWF0\ncml4IGlzIHNpbmd1bGFyCiogICAgICAgICAgICAgICAgICAgICAgIHRvIHdvcmtpbmcgcHJlY2lz\naW9uLiAgTmV2ZXJ0aGVsZXNzLCB0aGUKKiAgICAgICAgICAgICAgICAgICAgICAgc29sdXRpb24g\nYW5kIGVycm9yIGJvdW5kcyBhcmUgY29tcHV0ZWQgYmVjYXVzZQoqICAgICAgICAgICAgICAgICAg\nICAgICB0aGVyZSBhcmUgYSBudW1iZXIgb2Ygc2l0dWF0aW9ucyB3aGVyZSB0aGUKKiAgICAgICAg\nICAgICAgICAgICAgICAgY29tcHV0ZWQgc29sdXRpb24gY2FuIGJlIG1vcmUgYWNjdXJhdGUgdGhh\nbiB0aGUKKiAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgb2YgUkNPTkQgd291bGQgc3VnZ2Vz\ndC4KKgpyWgMAAGiGaIcpgXJbAwAAfXJcAwAAKGiKiWiLaIx1YmiYigEwaJlYDQAAAHpnYnN2eF80\nOC50eHRyXQMAAHViaJuKATBonFgFAAAAZ2JzdnhyXgMAAGiYigEwdWJofWhhXWh+h1JyXwMAAH1y\nYAMAAChogVgHAAAAZ2VuZXJhbHJhAwAAaINYCwAAAHRyaWRpYWdvbmFscmIDAABocVhXAAAAZHJp\ndmVyIGV4cGVydCwgc29sdmUgQSpYID0gQiwgQ29uZGl0aW9uIE51bWJlciwgRXJyb3IgQm91bmRz\nLCBSZWZpbmUsIEZhY3RvciwgVHJhbnNwb3NlcmMDAABohmiHKYFyZAMAAH1yZQMAAChoioloi2iM\ndWJojVgsAAAAaHR0cDovL3d3dy5uZXRsaWIub3JnL2xhcGFjay9zaW5nbGUvc2d0c3Z4LmZyZgMA\nAGiPWAEAAABzaJBofWiRXWh+h1JyZwMAAH1yaAMAACholFjKHwAAICAgICAgU1VCUk9VVElORSBT\nR1RTVlgoIEZBQ1QsIFRSQU5TLCBOLCBOUkhTLCBETCwgRCwgRFUsIERMRiwgREYsIERVRiwKICAg\nICAkICAgICAgICAgICAgICAgICAgIERVMiwgSVBJViwgQiwgTERCLCBYLCBMRFgsIFJDT05ELCBG\nRVJSLCBCRVJSLAogICAgICQgICAgICAgICAgICAgICAgICAgV09SSywgSVdPUkssIElORk8gKQoq\nCiogIC0tIExBUEFDSyByb3V0aW5lICh2ZXJzaW9uIDMuMikgLS0KKiAgLS0gTEFQQUNLIGlzIGEg\nc29mdHdhcmUgcGFja2FnZSBwcm92aWRlZCBieSBVbml2LiBvZiBUZW5uZXNzZWUsICAgIC0tCiog\nIC0tIFVuaXYuIG9mIENhbGlmb3JuaWEgQmVya2VsZXksIFVuaXYuIG9mIENvbG9yYWRvIERlbnZl\nciBhbmQgTkFHIEx0ZC4uLS0KKiAgICAgTm92ZW1iZXIgMjAwNgoqCiogICAgIC4uIFNjYWxhciBB\ncmd1bWVudHMgLi4KICAgICAgQ0hBUkFDVEVSICAgICAgICAgIEZBQ1QsIFRSQU5TCiAgICAgIElO\nVEVHRVIgICAgICAgICAgICBJTkZPLCBMREIsIExEWCwgTiwgTlJIUwogICAgICBSRUFMICAgICAg\nICAgICAgICAgUkNPTkQKKiAgICAgLi4KKiAgICAgLi4gQXJyYXkgQXJndW1lbnRzIC4uCiAgICAg\nIElOVEVHRVIgICAgICAgICAgICBJUElWKCAqICksIElXT1JLKCAqICkKICAgICAgUkVBTCAgICAg\nICAgICAgICAgIEIoIExEQiwgKiApLCBCRVJSKCAqICksIEQoICogKSwgREYoICogKSwKICAgICAk\nICAgICAgICAgICAgICAgICAgIERMKCAqICksIERMRiggKiApLCBEVSggKiApLCBEVTIoICogKSwg\nRFVGKCAqICksCiAgICAgJCAgICAgICAgICAgICAgICAgICBGRVJSKCAqICksIFdPUksoICogKSwg\nWCggTERYLCAqICkKKiAgICAgLi4KKgoqICBQdXJwb3NlCiogID09PT09PT0KKgoqICBTR1RTVlgg\ndXNlcyB0aGUgTFUgZmFjdG9yaXphdGlvbiB0byBjb21wdXRlIHRoZSBzb2x1dGlvbiB0byBhIHJl\nYWwKKiAgc3lzdGVtIG9mIGxpbmVhciBlcXVhdGlvbnMgQSAqIFggPSBCIG9yIEEqKlQgKiBYID0g\nQiwKKiAgd2hlcmUgQSBpcyBhIHRyaWRpYWdvbmFsIG1hdHJpeCBvZiBvcmRlciBOIGFuZCBYIGFu\nZCBCIGFyZSBOLWJ5LU5SSFMKKiAgbWF0cmljZXMuCioKKiAgRXJyb3IgYm91bmRzIG9uIHRoZSBz\nb2x1dGlvbiBhbmQgYSBjb25kaXRpb24gZXN0aW1hdGUgYXJlIGFsc28KKiAgcHJvdmlkZWQuCioK\nKiAgRGVzY3JpcHRpb24KKiAgPT09PT09PT09PT0KKgoqICBUaGUgZm9sbG93aW5nIHN0ZXBzIGFy\nZSBwZXJmb3JtZWQ6CioKKiAgMS4gSWYgRkFDVCA9ICdOJywgdGhlIExVIGRlY29tcG9zaXRpb24g\naXMgdXNlZCB0byBmYWN0b3IgdGhlIG1hdHJpeCBBCiogICAgIGFzIEEgPSBMICogVSwgd2hlcmUg\nTCBpcyBhIHByb2R1Y3Qgb2YgcGVybXV0YXRpb24gYW5kIHVuaXQgbG93ZXIKKiAgICAgYmlkaWFn\nb25hbCBtYXRyaWNlcyBhbmQgVSBpcyB1cHBlciB0cmlhbmd1bGFyIHdpdGggbm9uemVyb3MgaW4K\nKiAgICAgb25seSB0aGUgbWFpbiBkaWFnb25hbCBhbmQgZmlyc3QgdHdvIHN1cGVyZGlhZ29uYWxz\nLgoqCiogIDIuIElmIHNvbWUgVShpLGkpPTAsIHNvIHRoYXQgVSBpcyBleGFjdGx5IHNpbmd1bGFy\nLCB0aGVuIHRoZSByb3V0aW5lCiogICAgIHJldHVybnMgd2l0aCBJTkZPID0gaS4gT3RoZXJ3aXNl\nLCB0aGUgZmFjdG9yZWQgZm9ybSBvZiBBIGlzIHVzZWQKKiAgICAgdG8gZXN0aW1hdGUgdGhlIGNv\nbmRpdGlvbiBudW1iZXIgb2YgdGhlIG1hdHJpeCBBLiAgSWYgdGhlCiogICAgIHJlY2lwcm9jYWwg\nb2YgdGhlIGNvbmRpdGlvbiBudW1iZXIgaXMgbGVzcyB0aGFuIG1hY2hpbmUgcHJlY2lzaW9uLAoq\nICAgICBJTkZPID0gTisxIGlzIHJldHVybmVkIGFzIGEgd2FybmluZywgYnV0IHRoZSByb3V0aW5l\nIHN0aWxsIGdvZXMgb24KKiAgICAgdG8gc29sdmUgZm9yIFggYW5kIGNvbXB1dGUgZXJyb3IgYm91\nbmRzIGFzIGRlc2NyaWJlZCBiZWxvdy4KKgoqICAzLiBUaGUgc3lzdGVtIG9mIGVxdWF0aW9ucyBp\ncyBzb2x2ZWQgZm9yIFggdXNpbmcgdGhlIGZhY3RvcmVkIGZvcm0KKiAgICAgb2YgQS4KKgoqICA0\nLiBJdGVyYXRpdmUgcmVmaW5lbWVudCBpcyBhcHBsaWVkIHRvIGltcHJvdmUgdGhlIGNvbXB1dGVk\nIHNvbHV0aW9uCiogICAgIG1hdHJpeCBhbmQgY2FsY3VsYXRlIGVycm9yIGJvdW5kcyBhbmQgYmFj\na3dhcmQgZXJyb3IgZXN0aW1hdGVzCiogICAgIGZvciBpdC4KKgoqICBBcmd1bWVudHMKKiAgPT09\nPT09PT09CioKKiAgRkFDVCAgICAoaW5wdXQpIENIQVJBQ1RFUioxCiogICAgICAgICAgU3BlY2lm\naWVzIHdoZXRoZXIgb3Igbm90IHRoZSBmYWN0b3JlZCBmb3JtIG9mIEEgaGFzIGJlZW4KKiAgICAg\nICAgICBzdXBwbGllZCBvbiBlbnRyeS4KKiAgICAgICAgICA9ICdGJzogIERMRiwgREYsIERVRiwg\nRFUyLCBhbmQgSVBJViBjb250YWluIHRoZSBmYWN0b3JlZAoqICAgICAgICAgICAgICAgICAgZm9y\nbSBvZiBBOyBETCwgRCwgRFUsIERMRiwgREYsIERVRiwgRFUyIGFuZCBJUElWCiogICAgICAgICAg\nICAgICAgICB3aWxsIG5vdCBiZSBtb2RpZmllZC4KKiAgICAgICAgICA9ICdOJzogIFRoZSBtYXRy\naXggd2lsbCBiZSBjb3BpZWQgdG8gRExGLCBERiwgYW5kIERVRgoqICAgICAgICAgICAgICAgICAg\nYW5kIGZhY3RvcmVkLgoqCiogIFRSQU5TICAgKGlucHV0KSBDSEFSQUNURVIqMQoqICAgICAgICAg\nIFNwZWNpZmllcyB0aGUgZm9ybSBvZiB0aGUgc3lzdGVtIG9mIGVxdWF0aW9uczoKKiAgICAgICAg\nICA9ICdOJzogIEEgKiBYID0gQiAgICAgKE5vIHRyYW5zcG9zZSkKKiAgICAgICAgICA9ICdUJzog\nIEEqKlQgKiBYID0gQiAgKFRyYW5zcG9zZSkKKiAgICAgICAgICA9ICdDJzogIEEqKkggKiBYID0g\nQiAgKENvbmp1Z2F0ZSB0cmFuc3Bvc2UgPSBUcmFuc3Bvc2UpCioKKiAgTiAgICAgICAoaW5wdXQp\nIElOVEVHRVIKKiAgICAgICAgICBUaGUgb3JkZXIgb2YgdGhlIG1hdHJpeCBBLiAgTiA+PSAwLgoq\nCiogIE5SSFMgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG51bWJlciBvZiByaWdo\ndCBoYW5kIHNpZGVzLCBpLmUuLCB0aGUgbnVtYmVyIG9mIGNvbHVtbnMKKiAgICAgICAgICBvZiB0\naGUgbWF0cml4IEIuICBOUkhTID49IDAuCioKKiAgREwgICAgICAoaW5wdXQpIFJFQUwgYXJyYXks\nIGRpbWVuc2lvbiAoTi0xKQoqICAgICAgICAgIFRoZSAobi0xKSBzdWJkaWFnb25hbCBlbGVtZW50\ncyBvZiBBLgoqCiogIEQgICAgICAgKGlucHV0KSBSRUFMIGFycmF5LCBkaW1lbnNpb24gKE4pCiog\nICAgICAgICAgVGhlIG4gZGlhZ29uYWwgZWxlbWVudHMgb2YgQS4KKgoqICBEVSAgICAgIChpbnB1\ndCkgUkVBTCBhcnJheSwgZGltZW5zaW9uIChOLTEpCiogICAgICAgICAgVGhlIChuLTEpIHN1cGVy\nZGlhZ29uYWwgZWxlbWVudHMgb2YgQS4KKgoqICBETEYgICAgIChpbnB1dCBvciBvdXRwdXQpIFJF\nQUwgYXJyYXksIGRpbWVuc2lvbiAoTi0xKQoqICAgICAgICAgIElmIEZBQ1QgPSAnRicsIHRoZW4g\nRExGIGlzIGFuIGlucHV0IGFyZ3VtZW50IGFuZCBvbiBlbnRyeQoqICAgICAgICAgIGNvbnRhaW5z\nIHRoZSAobi0xKSBtdWx0aXBsaWVycyB0aGF0IGRlZmluZSB0aGUgbWF0cml4IEwgZnJvbQoqICAg\nICAgICAgIHRoZSBMVSBmYWN0b3JpemF0aW9uIG9mIEEgYXMgY29tcHV0ZWQgYnkgU0dUVFJGLgoq\nCiogICAgICAgICAgSWYgRkFDVCA9ICdOJywgdGhlbiBETEYgaXMgYW4gb3V0cHV0IGFyZ3VtZW50\nIGFuZCBvbiBleGl0CiogICAgICAgICAgY29udGFpbnMgdGhlIChuLTEpIG11bHRpcGxpZXJzIHRo\nYXQgZGVmaW5lIHRoZSBtYXRyaXggTCBmcm9tCiogICAgICAgICAgdGhlIExVIGZhY3Rvcml6YXRp\nb24gb2YgQS4KKgoqICBERiAgICAgIChpbnB1dCBvciBvdXRwdXQpIFJFQUwgYXJyYXksIGRpbWVu\nc2lvbiAoTikKKiAgICAgICAgICBJZiBGQUNUID0gJ0YnLCB0aGVuIERGIGlzIGFuIGlucHV0IGFy\nZ3VtZW50IGFuZCBvbiBlbnRyeQoqICAgICAgICAgIGNvbnRhaW5zIHRoZSBuIGRpYWdvbmFsIGVs\nZW1lbnRzIG9mIHRoZSB1cHBlciB0cmlhbmd1bGFyCiogICAgICAgICAgbWF0cml4IFUgZnJvbSB0\naGUgTFUgZmFjdG9yaXphdGlvbiBvZiBBLgoqCiogICAgICAgICAgSWYgRkFDVCA9ICdOJywgdGhl\nbiBERiBpcyBhbiBvdXRwdXQgYXJndW1lbnQgYW5kIG9uIGV4aXQKKiAgICAgICAgICBjb250YWlu\ncyB0aGUgbiBkaWFnb25hbCBlbGVtZW50cyBvZiB0aGUgdXBwZXIgdHJpYW5ndWxhcgoqICAgICAg\nICAgIG1hdHJpeCBVIGZyb20gdGhlIExVIGZhY3Rvcml6YXRpb24gb2YgQS4KKgoqICBEVUYgICAg\nIChpbnB1dCBvciBvdXRwdXQpIFJFQUwgYXJyYXksIGRpbWVuc2lvbiAoTi0xKQoqICAgICAgICAg\nIElmIEZBQ1QgPSAnRicsIHRoZW4gRFVGIGlzIGFuIGlucHV0IGFyZ3VtZW50IGFuZCBvbiBlbnRy\neQoqICAgICAgICAgIGNvbnRhaW5zIHRoZSAobi0xKSBlbGVtZW50cyBvZiB0aGUgZmlyc3Qgc3Vw\nZXJkaWFnb25hbCBvZiBVLgoqCiogICAgICAgICAgSWYgRkFDVCA9ICdOJywgdGhlbiBEVUYgaXMg\nYW4gb3V0cHV0IGFyZ3VtZW50IGFuZCBvbiBleGl0CiogICAgICAgICAgY29udGFpbnMgdGhlIChu\nLTEpIGVsZW1lbnRzIG9mIHRoZSBmaXJzdCBzdXBlcmRpYWdvbmFsIG9mIFUuCioKKiAgRFUyICAg\nICAoaW5wdXQgb3Igb3V0cHV0KSBSRUFMIGFycmF5LCBkaW1lbnNpb24gKE4tMikKKiAgICAgICAg\nICBJZiBGQUNUID0gJ0YnLCB0aGVuIERVMiBpcyBhbiBpbnB1dCBhcmd1bWVudCBhbmQgb24gZW50\ncnkKKiAgICAgICAgICBjb250YWlucyB0aGUgKG4tMikgZWxlbWVudHMgb2YgdGhlIHNlY29uZCBz\ndXBlcmRpYWdvbmFsIG9mCiogICAgICAgICAgVS4KKgoqICAgICAgICAgIElmIEZBQ1QgPSAnTics\nIHRoZW4gRFUyIGlzIGFuIG91dHB1dCBhcmd1bWVudCBhbmQgb24gZXhpdAoqICAgICAgICAgIGNv\nbnRhaW5zIHRoZSAobi0yKSBlbGVtZW50cyBvZiB0aGUgc2Vjb25kIHN1cGVyZGlhZ29uYWwgb2YK\nKiAgICAgICAgICBVLgoqCiogIElQSVYgICAgKGlucHV0IG9yIG91dHB1dCkgSU5URUdFUiBhcnJh\neSwgZGltZW5zaW9uIChOKQoqICAgICAgICAgIElmIEZBQ1QgPSAnRicsIHRoZW4gSVBJViBpcyBh\nbiBpbnB1dCBhcmd1bWVudCBhbmQgb24gZW50cnkKKiAgICAgICAgICBjb250YWlucyB0aGUgcGl2\nb3QgaW5kaWNlcyBmcm9tIHRoZSBMVSBmYWN0b3JpemF0aW9uIG9mIEEgYXMKKiAgICAgICAgICBj\nb21wdXRlZCBieSBTR1RUUkYuCioKKiAgICAgICAgICBJZiBGQUNUID0gJ04nLCB0aGVuIElQSVYg\naXMgYW4gb3V0cHV0IGFyZ3VtZW50IGFuZCBvbiBleGl0CiogICAgICAgICAgY29udGFpbnMgdGhl\nIHBpdm90IGluZGljZXMgZnJvbSB0aGUgTFUgZmFjdG9yaXphdGlvbiBvZiBBOwoqICAgICAgICAg\nIHJvdyBpIG9mIHRoZSBtYXRyaXggd2FzIGludGVyY2hhbmdlZCB3aXRoIHJvdyBJUElWKGkpLgoq\nICAgICAgICAgIElQSVYoaSkgd2lsbCBhbHdheXMgYmUgZWl0aGVyIGkgb3IgaSsxOyBJUElWKGkp\nID0gaSBpbmRpY2F0ZXMKKiAgICAgICAgICBhIHJvdyBpbnRlcmNoYW5nZSB3YXMgbm90IHJlcXVp\ncmVkLgoqCiogIEIgICAgICAgKGlucHV0KSBSRUFMIGFycmF5LCBkaW1lbnNpb24gKExEQixOUkhT\nKQoqICAgICAgICAgIFRoZSBOLWJ5LU5SSFMgcmlnaHQgaGFuZCBzaWRlIG1hdHJpeCBCLgoqCiog\nIExEQiAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGltZW5zaW9u\nIG9mIHRoZSBhcnJheSBCLiAgTERCID49IG1heCgxLE4pLgoqCiogIFggICAgICAgKG91dHB1dCkg\nUkVBTCBhcnJheSwgZGltZW5zaW9uIChMRFgsTlJIUykKKiAgICAgICAgICBJZiBJTkZPID0gMCBv\nciBJTkZPID0gTisxLCB0aGUgTi1ieS1OUkhTIHNvbHV0aW9uIG1hdHJpeCBYLgoqCiogIExEWCAg\nICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRo\nZSBhcnJheSBYLiAgTERYID49IG1heCgxLE4pLgoqCiogIFJDT05EICAgKG91dHB1dCkgUkVBTAoq\nICAgICAgICAgIFRoZSBlc3RpbWF0ZSBvZiB0aGUgcmVjaXByb2NhbCBjb25kaXRpb24gbnVtYmVy\nIG9mIHRoZSBtYXRyaXgKKiAgICAgICAgICBBLiAgSWYgUkNPTkQgaXMgbGVzcyB0aGFuIHRoZSBt\nYWNoaW5lIHByZWNpc2lvbiAoaW4KKiAgICAgICAgICBwYXJ0aWN1bGFyLCBpZiBSQ09ORCA9IDAp\nLCB0aGUgbWF0cml4IGlzIHNpbmd1bGFyIHRvIHdvcmtpbmcKKiAgICAgICAgICBwcmVjaXNpb24u\nICBUaGlzIGNvbmRpdGlvbiBpcyBpbmRpY2F0ZWQgYnkgYSByZXR1cm4gY29kZSBvZgoqICAgICAg\nICAgIElORk8gPiAwLgoqCiogIEZFUlIgICAgKG91dHB1dCkgUkVBTCBhcnJheSwgZGltZW5zaW9u\nIChOUkhTKQoqICAgICAgICAgIFRoZSBlc3RpbWF0ZWQgZm9yd2FyZCBlcnJvciBib3VuZCBmb3Ig\nZWFjaCBzb2x1dGlvbiB2ZWN0b3IKKiAgICAgICAgICBYKGopICh0aGUgai10aCBjb2x1bW4gb2Yg\ndGhlIHNvbHV0aW9uIG1hdHJpeCBYKS4KKiAgICAgICAgICBJZiBYVFJVRSBpcyB0aGUgdHJ1ZSBz\nb2x1dGlvbiBjb3JyZXNwb25kaW5nIHRvIFgoaiksIEZFUlIoaikKKiAgICAgICAgICBpcyBhbiBl\nc3RpbWF0ZWQgdXBwZXIgYm91bmQgZm9yIHRoZSBtYWduaXR1ZGUgb2YgdGhlIGxhcmdlc3QKKiAg\nICAgICAgICBlbGVtZW50IGluIChYKGopIC0gWFRSVUUpIGRpdmlkZWQgYnkgdGhlIG1hZ25pdHVk\nZSBvZiB0aGUKKiAgICAgICAgICBsYXJnZXN0IGVsZW1lbnQgaW4gWChqKS4gIFRoZSBlc3RpbWF0\nZSBpcyBhcyByZWxpYWJsZSBhcwoqICAgICAgICAgIHRoZSBlc3RpbWF0ZSBmb3IgUkNPTkQsIGFu\nZCBpcyBhbG1vc3QgYWx3YXlzIGEgc2xpZ2h0CiogICAgICAgICAgb3ZlcmVzdGltYXRlIG9mIHRo\nZSB0cnVlIGVycm9yLgoqCiogIEJFUlIgICAgKG91dHB1dCkgUkVBTCBhcnJheSwgZGltZW5zaW9u\nIChOUkhTKQoqICAgICAgICAgIFRoZSBjb21wb25lbnR3aXNlIHJlbGF0aXZlIGJhY2t3YXJkIGVy\ncm9yIG9mIGVhY2ggc29sdXRpb24KKiAgICAgICAgICB2ZWN0b3IgWChqKSAoaS5lLiwgdGhlIHNt\nYWxsZXN0IHJlbGF0aXZlIGNoYW5nZSBpbgoqICAgICAgICAgIGFueSBlbGVtZW50IG9mIEEgb3Ig\nQiB0aGF0IG1ha2VzIFgoaikgYW4gZXhhY3Qgc29sdXRpb24pLgoqCiogIFdPUksgICAgKHdvcmtz\ncGFjZSkgUkVBTCBhcnJheSwgZGltZW5zaW9uICgzKk4pCioKKiAgSVdPUksgICAod29ya3NwYWNl\nKSBJTlRFR0VSIGFycmF5LCBkaW1lbnNpb24gKE4pCioKKiAgSU5GTyAgICAob3V0cHV0KSBJTlRF\nR0VSCiogICAgICAgICAgPSAwOiAgc3VjY2Vzc2Z1bCBleGl0CiogICAgICAgICAgPCAwOiAgaWYg\nSU5GTyA9IC1pLCB0aGUgaS10aCBhcmd1bWVudCBoYWQgYW4gaWxsZWdhbCB2YWx1ZQoqICAgICAg\nICAgID4gMDogIGlmIElORk8gPSBpLCBhbmQgaSBpcwoqICAgICAgICAgICAgICAgIDw9IE46ICBV\nKGksaSkgaXMgZXhhY3RseSB6ZXJvLiAgVGhlIGZhY3Rvcml6YXRpb24KKiAgICAgICAgICAgICAg\nICAgICAgICAgaGFzIG5vdCBiZWVuIGNvbXBsZXRlZCB1bmxlc3MgaSA9IE4sIGJ1dCB0aGUKKiAg\nICAgICAgICAgICAgICAgICAgICAgZmFjdG9yIFUgaXMgZXhhY3RseSBzaW5ndWxhciwgc28gdGhl\nIHNvbHV0aW9uCiogICAgICAgICAgICAgICAgICAgICAgIGFuZCBlcnJvciBib3VuZHMgY291bGQg\nbm90IGJlIGNvbXB1dGVkLgoqICAgICAgICAgICAgICAgICAgICAgICBSQ09ORCA9IDAgaXMgcmV0\ndXJuZWQuCiogICAgICAgICAgICAgICAgPSBOKzE6IFUgaXMgbm9uc2luZ3VsYXIsIGJ1dCBSQ09O\nRCBpcyBsZXNzIHRoYW4gbWFjaGluZQoqICAgICAgICAgICAgICAgICAgICAgICBwcmVjaXNpb24s\nIG1lYW5pbmcgdGhhdCB0aGUgbWF0cml4IGlzIHNpbmd1bGFyCiogICAgICAgICAgICAgICAgICAg\nICAgIHRvIHdvcmtpbmcgcHJlY2lzaW9uLiAgTmV2ZXJ0aGVsZXNzLCB0aGUKKiAgICAgICAgICAg\nICAgICAgICAgICAgc29sdXRpb24gYW5kIGVycm9yIGJvdW5kcyBhcmUgY29tcHV0ZWQgYmVjYXVz\nZQoqICAgICAgICAgICAgICAgICAgICAgICB0aGVyZSBhcmUgYSBudW1iZXIgb2Ygc2l0dWF0aW9u\ncyB3aGVyZSB0aGUKKiAgICAgICAgICAgICAgICAgICAgICAgY29tcHV0ZWQgc29sdXRpb24gY2Fu\nIGJlIG1vcmUgYWNjdXJhdGUgdGhhbiB0aGUKKiAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUg\nb2YgUkNPTkQgd291bGQgc3VnZ2VzdC4KKgpyaQMAAGiGaIcpgXJqAwAAfXJrAwAAKGiKiWiLaIx1\nYmiYigExaJlYDQAAAHNndHN2eF80OS50eHRybAMAAHViaJuKATFonFgFAAAAZ3RzdnhybQMAAGiY\nigExdWJofWhhXWh+h1JybgMAAH1ybwMAAChogVgHAAAAZ2VuZXJhbHJwAwAAaINYCwAAAHRyaWRp\nYWdvbmFscnEDAABocVhXAAAAZHJpdmVyIGV4cGVydCwgc29sdmUgQSpYID0gQiwgQ29uZGl0aW9u\nIE51bWJlciwgRXJyb3IgQm91bmRzLCBSZWZpbmUsIEZhY3RvciwgVHJhbnNwb3NlcnIDAABohmiH\nKYFycwMAAH1ydAMAAChoioloi2iMdWJojVgsAAAAaHR0cDovL3d3dy5uZXRsaWIub3JnL2xhcGFj\nay9kb3VibGUvZGd0c3Z4LmZydQMAAGiPWAEAAABkaJBofWiRXWh+h1JydgMAAH1ydwMAACholFhm\nIAAAICAgICAgU1VCUk9VVElORSBER1RTVlgoIEZBQ1QsIFRSQU5TLCBOLCBOUkhTLCBETCwgRCwg\nRFUsIERMRiwgREYsIERVRiwKICAgICAkICAgICAgICAgICAgICAgICAgIERVMiwgSVBJViwgQiwg\nTERCLCBYLCBMRFgsIFJDT05ELCBGRVJSLCBCRVJSLAogICAgICQgICAgICAgICAgICAgICAgICAg\nV09SSywgSVdPUkssIElORk8gKQoqCiogIC0tIExBUEFDSyByb3V0aW5lICh2ZXJzaW9uIDMuMikg\nLS0KKiAgLS0gTEFQQUNLIGlzIGEgc29mdHdhcmUgcGFja2FnZSBwcm92aWRlZCBieSBVbml2LiBv\nZiBUZW5uZXNzZWUsICAgIC0tCiogIC0tIFVuaXYuIG9mIENhbGlmb3JuaWEgQmVya2VsZXksIFVu\naXYuIG9mIENvbG9yYWRvIERlbnZlciBhbmQgTkFHIEx0ZC4uLS0KKiAgICAgTm92ZW1iZXIgMjAw\nNgoqCiogICAgIC4uIFNjYWxhciBBcmd1bWVudHMgLi4KICAgICAgQ0hBUkFDVEVSICAgICAgICAg\nIEZBQ1QsIFRSQU5TCiAgICAgIElOVEVHRVIgICAgICAgICAgICBJTkZPLCBMREIsIExEWCwgTiwg\nTlJIUwogICAgICBET1VCTEUgUFJFQ0lTSU9OICAgUkNPTkQKKiAgICAgLi4KKiAgICAgLi4gQXJy\nYXkgQXJndW1lbnRzIC4uCiAgICAgIElOVEVHRVIgICAgICAgICAgICBJUElWKCAqICksIElXT1JL\nKCAqICkKICAgICAgRE9VQkxFIFBSRUNJU0lPTiAgIEIoIExEQiwgKiApLCBCRVJSKCAqICksIEQo\nICogKSwgREYoICogKSwKICAgICAkICAgICAgICAgICAgICAgICAgIERMKCAqICksIERMRiggKiAp\nLCBEVSggKiApLCBEVTIoICogKSwgRFVGKCAqICksCiAgICAgJCAgICAgICAgICAgICAgICAgICBG\nRVJSKCAqICksIFdPUksoICogKSwgWCggTERYLCAqICkKKiAgICAgLi4KKgoqICBQdXJwb3NlCiog\nID09PT09PT0KKgoqICBER1RTVlggdXNlcyB0aGUgTFUgZmFjdG9yaXphdGlvbiB0byBjb21wdXRl\nIHRoZSBzb2x1dGlvbiB0byBhIHJlYWwKKiAgc3lzdGVtIG9mIGxpbmVhciBlcXVhdGlvbnMgQSAq\nIFggPSBCIG9yIEEqKlQgKiBYID0gQiwKKiAgd2hlcmUgQSBpcyBhIHRyaWRpYWdvbmFsIG1hdHJp\neCBvZiBvcmRlciBOIGFuZCBYIGFuZCBCIGFyZSBOLWJ5LU5SSFMKKiAgbWF0cmljZXMuCioKKiAg\nRXJyb3IgYm91bmRzIG9uIHRoZSBzb2x1dGlvbiBhbmQgYSBjb25kaXRpb24gZXN0aW1hdGUgYXJl\nIGFsc28KKiAgcHJvdmlkZWQuCioKKiAgRGVzY3JpcHRpb24KKiAgPT09PT09PT09PT0KKgoqICBU\naGUgZm9sbG93aW5nIHN0ZXBzIGFyZSBwZXJmb3JtZWQ6CioKKiAgMS4gSWYgRkFDVCA9ICdOJywg\ndGhlIExVIGRlY29tcG9zaXRpb24gaXMgdXNlZCB0byBmYWN0b3IgdGhlIG1hdHJpeCBBCiogICAg\nIGFzIEEgPSBMICogVSwgd2hlcmUgTCBpcyBhIHByb2R1Y3Qgb2YgcGVybXV0YXRpb24gYW5kIHVu\naXQgbG93ZXIKKiAgICAgYmlkaWFnb25hbCBtYXRyaWNlcyBhbmQgVSBpcyB1cHBlciB0cmlhbmd1\nbGFyIHdpdGggbm9uemVyb3MgaW4KKiAgICAgb25seSB0aGUgbWFpbiBkaWFnb25hbCBhbmQgZmly\nc3QgdHdvIHN1cGVyZGlhZ29uYWxzLgoqCiogIDIuIElmIHNvbWUgVShpLGkpPTAsIHNvIHRoYXQg\nVSBpcyBleGFjdGx5IHNpbmd1bGFyLCB0aGVuIHRoZSByb3V0aW5lCiogICAgIHJldHVybnMgd2l0\naCBJTkZPID0gaS4gT3RoZXJ3aXNlLCB0aGUgZmFjdG9yZWQgZm9ybSBvZiBBIGlzIHVzZWQKKiAg\nICAgdG8gZXN0aW1hdGUgdGhlIGNvbmRpdGlvbiBudW1iZXIgb2YgdGhlIG1hdHJpeCBBLiAgSWYg\ndGhlCiogICAgIHJlY2lwcm9jYWwgb2YgdGhlIGNvbmRpdGlvbiBudW1iZXIgaXMgbGVzcyB0aGFu\nIG1hY2hpbmUgcHJlY2lzaW9uLAoqICAgICBJTkZPID0gTisxIGlzIHJldHVybmVkIGFzIGEgd2Fy\nbmluZywgYnV0IHRoZSByb3V0aW5lIHN0aWxsIGdvZXMgb24KKiAgICAgdG8gc29sdmUgZm9yIFgg\nYW5kIGNvbXB1dGUgZXJyb3IgYm91bmRzIGFzIGRlc2NyaWJlZCBiZWxvdy4KKgoqICAzLiBUaGUg\nc3lzdGVtIG9mIGVxdWF0aW9ucyBpcyBzb2x2ZWQgZm9yIFggdXNpbmcgdGhlIGZhY3RvcmVkIGZv\ncm0KKiAgICAgb2YgQS4KKgoqICA0LiBJdGVyYXRpdmUgcmVmaW5lbWVudCBpcyBhcHBsaWVkIHRv\nIGltcHJvdmUgdGhlIGNvbXB1dGVkIHNvbHV0aW9uCiogICAgIG1hdHJpeCBhbmQgY2FsY3VsYXRl\nIGVycm9yIGJvdW5kcyBhbmQgYmFja3dhcmQgZXJyb3IgZXN0aW1hdGVzCiogICAgIGZvciBpdC4K\nKgoqICBBcmd1bWVudHMKKiAgPT09PT09PT09CioKKiAgRkFDVCAgICAoaW5wdXQpIENIQVJBQ1RF\nUioxCiogICAgICAgICAgU3BlY2lmaWVzIHdoZXRoZXIgb3Igbm90IHRoZSBmYWN0b3JlZCBmb3Jt\nIG9mIEEgaGFzIGJlZW4KKiAgICAgICAgICBzdXBwbGllZCBvbiBlbnRyeS4KKiAgICAgICAgICA9\nICdGJzogIERMRiwgREYsIERVRiwgRFUyLCBhbmQgSVBJViBjb250YWluIHRoZSBmYWN0b3JlZAoq\nICAgICAgICAgICAgICAgICAgZm9ybSBvZiBBOyBETCwgRCwgRFUsIERMRiwgREYsIERVRiwgRFUy\nIGFuZCBJUElWCiogICAgICAgICAgICAgICAgICB3aWxsIG5vdCBiZSBtb2RpZmllZC4KKiAgICAg\nICAgICA9ICdOJzogIFRoZSBtYXRyaXggd2lsbCBiZSBjb3BpZWQgdG8gRExGLCBERiwgYW5kIERV\nRgoqICAgICAgICAgICAgICAgICAgYW5kIGZhY3RvcmVkLgoqCiogIFRSQU5TICAgKGlucHV0KSBD\nSEFSQUNURVIqMQoqICAgICAgICAgIFNwZWNpZmllcyB0aGUgZm9ybSBvZiB0aGUgc3lzdGVtIG9m\nIGVxdWF0aW9uczoKKiAgICAgICAgICA9ICdOJzogIEEgKiBYID0gQiAgICAgKE5vIHRyYW5zcG9z\nZSkKKiAgICAgICAgICA9ICdUJzogIEEqKlQgKiBYID0gQiAgKFRyYW5zcG9zZSkKKiAgICAgICAg\nICA9ICdDJzogIEEqKkggKiBYID0gQiAgKENvbmp1Z2F0ZSB0cmFuc3Bvc2UgPSBUcmFuc3Bvc2Up\nCioKKiAgTiAgICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgb3JkZXIgb2YgdGhl\nIG1hdHJpeCBBLiAgTiA+PSAwLgoqCiogIE5SSFMgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAg\nICAgVGhlIG51bWJlciBvZiByaWdodCBoYW5kIHNpZGVzLCBpLmUuLCB0aGUgbnVtYmVyIG9mIGNv\nbHVtbnMKKiAgICAgICAgICBvZiB0aGUgbWF0cml4IEIuICBOUkhTID49IDAuCioKKiAgREwgICAg\nICAoaW5wdXQpIERPVUJMRSBQUkVDSVNJT04gYXJyYXksIGRpbWVuc2lvbiAoTi0xKQoqICAgICAg\nICAgIFRoZSAobi0xKSBzdWJkaWFnb25hbCBlbGVtZW50cyBvZiBBLgoqCiogIEQgICAgICAgKGlu\ncHV0KSBET1VCTEUgUFJFQ0lTSU9OIGFycmF5LCBkaW1lbnNpb24gKE4pCiogICAgICAgICAgVGhl\nIG4gZGlhZ29uYWwgZWxlbWVudHMgb2YgQS4KKgoqICBEVSAgICAgIChpbnB1dCkgRE9VQkxFIFBS\nRUNJU0lPTiBhcnJheSwgZGltZW5zaW9uIChOLTEpCiogICAgICAgICAgVGhlIChuLTEpIHN1cGVy\nZGlhZ29uYWwgZWxlbWVudHMgb2YgQS4KKgoqICBETEYgICAgIChpbnB1dCBvciBvdXRwdXQpIERP\nVUJMRSBQUkVDSVNJT04gYXJyYXksIGRpbWVuc2lvbiAoTi0xKQoqICAgICAgICAgIElmIEZBQ1Qg\nPSAnRicsIHRoZW4gRExGIGlzIGFuIGlucHV0IGFyZ3VtZW50IGFuZCBvbiBlbnRyeQoqICAgICAg\nICAgIGNvbnRhaW5zIHRoZSAobi0xKSBtdWx0aXBsaWVycyB0aGF0IGRlZmluZSB0aGUgbWF0cml4\nIEwgZnJvbQoqICAgICAgICAgIHRoZSBMVSBmYWN0b3JpemF0aW9uIG9mIEEgYXMgY29tcHV0ZWQg\nYnkgREdUVFJGLgoqCiogICAgICAgICAgSWYgRkFDVCA9ICdOJywgdGhlbiBETEYgaXMgYW4gb3V0\ncHV0IGFyZ3VtZW50IGFuZCBvbiBleGl0CiogICAgICAgICAgY29udGFpbnMgdGhlIChuLTEpIG11\nbHRpcGxpZXJzIHRoYXQgZGVmaW5lIHRoZSBtYXRyaXggTCBmcm9tCiogICAgICAgICAgdGhlIExV\nIGZhY3Rvcml6YXRpb24gb2YgQS4KKgoqICBERiAgICAgIChpbnB1dCBvciBvdXRwdXQpIERPVUJM\nRSBQUkVDSVNJT04gYXJyYXksIGRpbWVuc2lvbiAoTikKKiAgICAgICAgICBJZiBGQUNUID0gJ0Yn\nLCB0aGVuIERGIGlzIGFuIGlucHV0IGFyZ3VtZW50IGFuZCBvbiBlbnRyeQoqICAgICAgICAgIGNv\nbnRhaW5zIHRoZSBuIGRpYWdvbmFsIGVsZW1lbnRzIG9mIHRoZSB1cHBlciB0cmlhbmd1bGFyCiog\nICAgICAgICAgbWF0cml4IFUgZnJvbSB0aGUgTFUgZmFjdG9yaXphdGlvbiBvZiBBLgoqCiogICAg\nICAgICAgSWYgRkFDVCA9ICdOJywgdGhlbiBERiBpcyBhbiBvdXRwdXQgYXJndW1lbnQgYW5kIG9u\nIGV4aXQKKiAgICAgICAgICBjb250YWlucyB0aGUgbiBkaWFnb25hbCBlbGVtZW50cyBvZiB0aGUg\ndXBwZXIgdHJpYW5ndWxhcgoqICAgICAgICAgIG1hdHJpeCBVIGZyb20gdGhlIExVIGZhY3Rvcml6\nYXRpb24gb2YgQS4KKgoqICBEVUYgICAgIChpbnB1dCBvciBvdXRwdXQpIERPVUJMRSBQUkVDSVNJ\nT04gYXJyYXksIGRpbWVuc2lvbiAoTi0xKQoqICAgICAgICAgIElmIEZBQ1QgPSAnRicsIHRoZW4g\nRFVGIGlzIGFuIGlucHV0IGFyZ3VtZW50IGFuZCBvbiBlbnRyeQoqICAgICAgICAgIGNvbnRhaW5z\nIHRoZSAobi0xKSBlbGVtZW50cyBvZiB0aGUgZmlyc3Qgc3VwZXJkaWFnb25hbCBvZiBVLgoqCiog\nICAgICAgICAgSWYgRkFDVCA9ICdOJywgdGhlbiBEVUYgaXMgYW4gb3V0cHV0IGFyZ3VtZW50IGFu\nZCBvbiBleGl0CiogICAgICAgICAgY29udGFpbnMgdGhlIChuLTEpIGVsZW1lbnRzIG9mIHRoZSBm\naXJzdCBzdXBlcmRpYWdvbmFsIG9mIFUuCioKKiAgRFUyICAgICAoaW5wdXQgb3Igb3V0cHV0KSBE\nT1VCTEUgUFJFQ0lTSU9OIGFycmF5LCBkaW1lbnNpb24gKE4tMikKKiAgICAgICAgICBJZiBGQUNU\nID0gJ0YnLCB0aGVuIERVMiBpcyBhbiBpbnB1dCBhcmd1bWVudCBhbmQgb24gZW50cnkKKiAgICAg\nICAgICBjb250YWlucyB0aGUgKG4tMikgZWxlbWVudHMgb2YgdGhlIHNlY29uZCBzdXBlcmRpYWdv\nbmFsIG9mCiogICAgICAgICAgVS4KKgoqICAgICAgICAgIElmIEZBQ1QgPSAnTicsIHRoZW4gRFUy\nIGlzIGFuIG91dHB1dCBhcmd1bWVudCBhbmQgb24gZXhpdAoqICAgICAgICAgIGNvbnRhaW5zIHRo\nZSAobi0yKSBlbGVtZW50cyBvZiB0aGUgc2Vjb25kIHN1cGVyZGlhZ29uYWwgb2YKKiAgICAgICAg\nICBVLgoqCiogIElQSVYgICAgKGlucHV0IG9yIG91dHB1dCkgSU5URUdFUiBhcnJheSwgZGltZW5z\naW9uIChOKQoqICAgICAgICAgIElmIEZBQ1QgPSAnRicsIHRoZW4gSVBJViBpcyBhbiBpbnB1dCBh\ncmd1bWVudCBhbmQgb24gZW50cnkKKiAgICAgICAgICBjb250YWlucyB0aGUgcGl2b3QgaW5kaWNl\ncyBmcm9tIHRoZSBMVSBmYWN0b3JpemF0aW9uIG9mIEEgYXMKKiAgICAgICAgICBjb21wdXRlZCBi\neSBER1RUUkYuCioKKiAgICAgICAgICBJZiBGQUNUID0gJ04nLCB0aGVuIElQSVYgaXMgYW4gb3V0\ncHV0IGFyZ3VtZW50IGFuZCBvbiBleGl0CiogICAgICAgICAgY29udGFpbnMgdGhlIHBpdm90IGlu\nZGljZXMgZnJvbSB0aGUgTFUgZmFjdG9yaXphdGlvbiBvZiBBOwoqICAgICAgICAgIHJvdyBpIG9m\nIHRoZSBtYXRyaXggd2FzIGludGVyY2hhbmdlZCB3aXRoIHJvdyBJUElWKGkpLgoqICAgICAgICAg\nIElQSVYoaSkgd2lsbCBhbHdheXMgYmUgZWl0aGVyIGkgb3IgaSsxOyBJUElWKGkpID0gaSBpbmRp\nY2F0ZXMKKiAgICAgICAgICBhIHJvdyBpbnRlcmNoYW5nZSB3YXMgbm90IHJlcXVpcmVkLgoqCiog\nIEIgICAgICAgKGlucHV0KSBET1VCTEUgUFJFQ0lTSU9OIGFycmF5LCBkaW1lbnNpb24gKExEQixO\nUkhTKQoqICAgICAgICAgIFRoZSBOLWJ5LU5SSFMgcmlnaHQgaGFuZCBzaWRlIG1hdHJpeCBCLgoq\nCiogIExEQiAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGltZW5z\naW9uIG9mIHRoZSBhcnJheSBCLiAgTERCID49IG1heCgxLE4pLgoqCiogIFggICAgICAgKG91dHB1\ndCkgRE9VQkxFIFBSRUNJU0lPTiBhcnJheSwgZGltZW5zaW9uIChMRFgsTlJIUykKKiAgICAgICAg\nICBJZiBJTkZPID0gMCBvciBJTkZPID0gTisxLCB0aGUgTi1ieS1OUkhTIHNvbHV0aW9uIG1hdHJp\neCBYLgoqCiogIExEWCAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcg\nZGltZW5zaW9uIG9mIHRoZSBhcnJheSBYLiAgTERYID49IG1heCgxLE4pLgoqCiogIFJDT05EICAg\nKG91dHB1dCkgRE9VQkxFIFBSRUNJU0lPTgoqICAgICAgICAgIFRoZSBlc3RpbWF0ZSBvZiB0aGUg\ncmVjaXByb2NhbCBjb25kaXRpb24gbnVtYmVyIG9mIHRoZSBtYXRyaXgKKiAgICAgICAgICBBLiAg\nSWYgUkNPTkQgaXMgbGVzcyB0aGFuIHRoZSBtYWNoaW5lIHByZWNpc2lvbiAoaW4KKiAgICAgICAg\nICBwYXJ0aWN1bGFyLCBpZiBSQ09ORCA9IDApLCB0aGUgbWF0cml4IGlzIHNpbmd1bGFyIHRvIHdv\ncmtpbmcKKiAgICAgICAgICBwcmVjaXNpb24uICBUaGlzIGNvbmRpdGlvbiBpcyBpbmRpY2F0ZWQg\nYnkgYSByZXR1cm4gY29kZSBvZgoqICAgICAgICAgIElORk8gPiAwLgoqCiogIEZFUlIgICAgKG91\ndHB1dCkgRE9VQkxFIFBSRUNJU0lPTiBhcnJheSwgZGltZW5zaW9uIChOUkhTKQoqICAgICAgICAg\nIFRoZSBlc3RpbWF0ZWQgZm9yd2FyZCBlcnJvciBib3VuZCBmb3IgZWFjaCBzb2x1dGlvbiB2ZWN0\nb3IKKiAgICAgICAgICBYKGopICh0aGUgai10aCBjb2x1bW4gb2YgdGhlIHNvbHV0aW9uIG1hdHJp\neCBYKS4KKiAgICAgICAgICBJZiBYVFJVRSBpcyB0aGUgdHJ1ZSBzb2x1dGlvbiBjb3JyZXNwb25k\naW5nIHRvIFgoaiksIEZFUlIoaikKKiAgICAgICAgICBpcyBhbiBlc3RpbWF0ZWQgdXBwZXIgYm91\nbmQgZm9yIHRoZSBtYWduaXR1ZGUgb2YgdGhlIGxhcmdlc3QKKiAgICAgICAgICBlbGVtZW50IGlu\nIChYKGopIC0gWFRSVUUpIGRpdmlkZWQgYnkgdGhlIG1hZ25pdHVkZSBvZiB0aGUKKiAgICAgICAg\nICBsYXJnZXN0IGVsZW1lbnQgaW4gWChqKS4gIFRoZSBlc3RpbWF0ZSBpcyBhcyByZWxpYWJsZSBh\ncwoqICAgICAgICAgIHRoZSBlc3RpbWF0ZSBmb3IgUkNPTkQsIGFuZCBpcyBhbG1vc3QgYWx3YXlz\nIGEgc2xpZ2h0CiogICAgICAgICAgb3ZlcmVzdGltYXRlIG9mIHRoZSB0cnVlIGVycm9yLgoqCiog\nIEJFUlIgICAgKG91dHB1dCkgRE9VQkxFIFBSRUNJU0lPTiBhcnJheSwgZGltZW5zaW9uIChOUkhT\nKQoqICAgICAgICAgIFRoZSBjb21wb25lbnR3aXNlIHJlbGF0aXZlIGJhY2t3YXJkIGVycm9yIG9m\nIGVhY2ggc29sdXRpb24KKiAgICAgICAgICB2ZWN0b3IgWChqKSAoaS5lLiwgdGhlIHNtYWxsZXN0\nIHJlbGF0aXZlIGNoYW5nZSBpbgoqICAgICAgICAgIGFueSBlbGVtZW50IG9mIEEgb3IgQiB0aGF0\nIG1ha2VzIFgoaikgYW4gZXhhY3Qgc29sdXRpb24pLgoqCiogIFdPUksgICAgKHdvcmtzcGFjZSkg\nRE9VQkxFIFBSRUNJU0lPTiBhcnJheSwgZGltZW5zaW9uICgzKk4pCioKKiAgSVdPUksgICAod29y\na3NwYWNlKSBJTlRFR0VSIGFycmF5LCBkaW1lbnNpb24gKE4pCioKKiAgSU5GTyAgICAob3V0cHV0\nKSBJTlRFR0VSCiogICAgICAgICAgPSAwOiAgc3VjY2Vzc2Z1bCBleGl0CiogICAgICAgICAgPCAw\nOiAgaWYgSU5GTyA9IC1pLCB0aGUgaS10aCBhcmd1bWVudCBoYWQgYW4gaWxsZWdhbCB2YWx1ZQoq\nICAgICAgICAgID4gMDogIGlmIElORk8gPSBpLCBhbmQgaSBpcwoqICAgICAgICAgICAgICAgIDw9\nIE46ICBVKGksaSkgaXMgZXhhY3RseSB6ZXJvLiAgVGhlIGZhY3Rvcml6YXRpb24KKiAgICAgICAg\nICAgICAgICAgICAgICAgaGFzIG5vdCBiZWVuIGNvbXBsZXRlZCB1bmxlc3MgaSA9IE4sIGJ1dCB0\naGUKKiAgICAgICAgICAgICAgICAgICAgICAgZmFjdG9yIFUgaXMgZXhhY3RseSBzaW5ndWxhciwg\nc28gdGhlIHNvbHV0aW9uCiogICAgICAgICAgICAgICAgICAgICAgIGFuZCBlcnJvciBib3VuZHMg\nY291bGQgbm90IGJlIGNvbXB1dGVkLgoqICAgICAgICAgICAgICAgICAgICAgICBSQ09ORCA9IDAg\naXMgcmV0dXJuZWQuCiogICAgICAgICAgICAgICAgPSBOKzE6IFUgaXMgbm9uc2luZ3VsYXIsIGJ1\ndCBSQ09ORCBpcyBsZXNzIHRoYW4gbWFjaGluZQoqICAgICAgICAgICAgICAgICAgICAgICBwcmVj\naXNpb24sIG1lYW5pbmcgdGhhdCB0aGUgbWF0cml4IGlzIHNpbmd1bGFyCiogICAgICAgICAgICAg\nICAgICAgICAgIHRvIHdvcmtpbmcgcHJlY2lzaW9uLiAgTmV2ZXJ0aGVsZXNzLCB0aGUKKiAgICAg\nICAgICAgICAgICAgICAgICAgc29sdXRpb24gYW5kIGVycm9yIGJvdW5kcyBhcmUgY29tcHV0ZWQg\nYmVjYXVzZQoqICAgICAgICAgICAgICAgICAgICAgICB0aGVyZSBhcmUgYSBudW1iZXIgb2Ygc2l0\ndWF0aW9ucyB3aGVyZSB0aGUKKiAgICAgICAgICAgICAgICAgICAgICAgY29tcHV0ZWQgc29sdXRp\nb24gY2FuIGJlIG1vcmUgYWNjdXJhdGUgdGhhbiB0aGUKKiAgICAgICAgICAgICAgICAgICAgICAg\ndmFsdWUgb2YgUkNPTkQgd291bGQgc3VnZ2VzdC4KKgpyeAMAAGiGaIcpgXJ5AwAAfXJ6AwAAKGiK\niWiLaIx1YmiYigEyaJlYDQAAAGRndHN2eF81MC50eHRyewMAAHViaJuKATJonFgFAAAAZ3Rzdnhy\nfAMAAGiYigEydWJofWhhXWh+h1JyfQMAAH1yfgMAAChogVgHAAAAZ2VuZXJhbHJ/AwAAaINYCwAA\nAHRyaWRpYWdvbmFscoADAABocVhXAAAAZHJpdmVyIGV4cGVydCwgc29sdmUgQSpYID0gQiwgQ29u\nZGl0aW9uIE51bWJlciwgRXJyb3IgQm91bmRzLCBSZWZpbmUsIEZhY3RvciwgVHJhbnNwb3NlcoED\nAABohmiHKYFyggMAAH1ygwMAAChoioloi2iMdWJojVgtAAAAaHR0cDovL3d3dy5uZXRsaWIub3Jn\nL2xhcGFjay9jb21wbGV4L2NndHN2eC5mcoQDAABoj1gBAAAAY2iQaH1okV1ofodScoUDAAB9coYD\nAAAoaJRYAyAAACAgICAgIFNVQlJPVVRJTkUgQ0dUU1ZYKCBGQUNULCBUUkFOUywgTiwgTlJIUywg\nREwsIEQsIERVLCBETEYsIERGLCBEVUYsCiAgICAgJCAgICAgICAgICAgICAgICAgICBEVTIsIElQ\nSVYsIEIsIExEQiwgWCwgTERYLCBSQ09ORCwgRkVSUiwgQkVSUiwKICAgICAkICAgICAgICAgICAg\nICAgICAgIFdPUkssIFJXT1JLLCBJTkZPICkKKgoqICAtLSBMQVBBQ0sgcm91dGluZSAodmVyc2lv\nbiAzLjIpIC0tCiogIC0tIExBUEFDSyBpcyBhIHNvZnR3YXJlIHBhY2thZ2UgcHJvdmlkZWQgYnkg\nVW5pdi4gb2YgVGVubmVzc2VlLCAgICAtLQoqICAtLSBVbml2LiBvZiBDYWxpZm9ybmlhIEJlcmtl\nbGV5LCBVbml2LiBvZiBDb2xvcmFkbyBEZW52ZXIgYW5kIE5BRyBMdGQuLi0tCiogICAgIE5vdmVt\nYmVyIDIwMDYKKgoqICAgICAuLiBTY2FsYXIgQXJndW1lbnRzIC4uCiAgICAgIENIQVJBQ1RFUiAg\nICAgICAgICBGQUNULCBUUkFOUwogICAgICBJTlRFR0VSICAgICAgICAgICAgSU5GTywgTERCLCBM\nRFgsIE4sIE5SSFMKICAgICAgUkVBTCAgICAgICAgICAgICAgIFJDT05ECiogICAgIC4uCiogICAg\nIC4uIEFycmF5IEFyZ3VtZW50cyAuLgogICAgICBJTlRFR0VSICAgICAgICAgICAgSVBJViggKiAp\nCiAgICAgIFJFQUwgICAgICAgICAgICAgICBCRVJSKCAqICksIEZFUlIoICogKSwgUldPUksoICog\nKQogICAgICBDT01QTEVYICAgICAgICAgICAgQiggTERCLCAqICksIEQoICogKSwgREYoICogKSwg\nREwoICogKSwKICAgICAkICAgICAgICAgICAgICAgICAgIERMRiggKiApLCBEVSggKiApLCBEVTIo\nICogKSwgRFVGKCAqICksCiAgICAgJCAgICAgICAgICAgICAgICAgICBXT1JLKCAqICksIFgoIExE\nWCwgKiApCiogICAgIC4uCioKKiAgUHVycG9zZQoqICA9PT09PT09CioKKiAgQ0dUU1ZYIHVzZXMg\ndGhlIExVIGZhY3Rvcml6YXRpb24gdG8gY29tcHV0ZSB0aGUgc29sdXRpb24gdG8gYSBjb21wbGV4\nCiogIHN5c3RlbSBvZiBsaW5lYXIgZXF1YXRpb25zIEEgKiBYID0gQiwgQSoqVCAqIFggPSBCLCBv\nciBBKipIICogWCA9IEIsCiogIHdoZXJlIEEgaXMgYSB0cmlkaWFnb25hbCBtYXRyaXggb2Ygb3Jk\nZXIgTiBhbmQgWCBhbmQgQiBhcmUgTi1ieS1OUkhTCiogIG1hdHJpY2VzLgoqCiogIEVycm9yIGJv\ndW5kcyBvbiB0aGUgc29sdXRpb24gYW5kIGEgY29uZGl0aW9uIGVzdGltYXRlIGFyZSBhbHNvCiog\nIHByb3ZpZGVkLgoqCiogIERlc2NyaXB0aW9uCiogID09PT09PT09PT09CioKKiAgVGhlIGZvbGxv\nd2luZyBzdGVwcyBhcmUgcGVyZm9ybWVkOgoqCiogIDEuIElmIEZBQ1QgPSAnTicsIHRoZSBMVSBk\nZWNvbXBvc2l0aW9uIGlzIHVzZWQgdG8gZmFjdG9yIHRoZSBtYXRyaXggQQoqICAgICBhcyBBID0g\nTCAqIFUsIHdoZXJlIEwgaXMgYSBwcm9kdWN0IG9mIHBlcm11dGF0aW9uIGFuZCB1bml0IGxvd2Vy\nCiogICAgIGJpZGlhZ29uYWwgbWF0cmljZXMgYW5kIFUgaXMgdXBwZXIgdHJpYW5ndWxhciB3aXRo\nIG5vbnplcm9zIGluCiogICAgIG9ubHkgdGhlIG1haW4gZGlhZ29uYWwgYW5kIGZpcnN0IHR3byBz\ndXBlcmRpYWdvbmFscy4KKgoqICAyLiBJZiBzb21lIFUoaSxpKT0wLCBzbyB0aGF0IFUgaXMgZXhh\nY3RseSBzaW5ndWxhciwgdGhlbiB0aGUgcm91dGluZQoqICAgICByZXR1cm5zIHdpdGggSU5GTyA9\nIGkuIE90aGVyd2lzZSwgdGhlIGZhY3RvcmVkIGZvcm0gb2YgQSBpcyB1c2VkCiogICAgIHRvIGVz\ndGltYXRlIHRoZSBjb25kaXRpb24gbnVtYmVyIG9mIHRoZSBtYXRyaXggQS4gIElmIHRoZQoqICAg\nICByZWNpcHJvY2FsIG9mIHRoZSBjb25kaXRpb24gbnVtYmVyIGlzIGxlc3MgdGhhbiBtYWNoaW5l\nIHByZWNpc2lvbiwKKiAgICAgSU5GTyA9IE4rMSBpcyByZXR1cm5lZCBhcyBhIHdhcm5pbmcsIGJ1\ndCB0aGUgcm91dGluZSBzdGlsbCBnb2VzIG9uCiogICAgIHRvIHNvbHZlIGZvciBYIGFuZCBjb21w\ndXRlIGVycm9yIGJvdW5kcyBhcyBkZXNjcmliZWQgYmVsb3cuCioKKiAgMy4gVGhlIHN5c3RlbSBv\nZiBlcXVhdGlvbnMgaXMgc29sdmVkIGZvciBYIHVzaW5nIHRoZSBmYWN0b3JlZCBmb3JtCiogICAg\nIG9mIEEuCioKKiAgNC4gSXRlcmF0aXZlIHJlZmluZW1lbnQgaXMgYXBwbGllZCB0byBpbXByb3Zl\nIHRoZSBjb21wdXRlZCBzb2x1dGlvbgoqICAgICBtYXRyaXggYW5kIGNhbGN1bGF0ZSBlcnJvciBi\nb3VuZHMgYW5kIGJhY2t3YXJkIGVycm9yIGVzdGltYXRlcwoqICAgICBmb3IgaXQuCioKKiAgQXJn\ndW1lbnRzCiogID09PT09PT09PQoqCiogIEZBQ1QgICAgKGlucHV0KSBDSEFSQUNURVIqMQoqICAg\nICAgICAgIFNwZWNpZmllcyB3aGV0aGVyIG9yIG5vdCB0aGUgZmFjdG9yZWQgZm9ybSBvZiBBIGhh\ncyBiZWVuCiogICAgICAgICAgc3VwcGxpZWQgb24gZW50cnkuCiogICAgICAgICAgPSAnRic6ICBE\nTEYsIERGLCBEVUYsIERVMiwgYW5kIElQSVYgY29udGFpbiB0aGUgZmFjdG9yZWQgZm9ybQoqICAg\nICAgICAgICAgICAgICAgb2YgQTsgREwsIEQsIERVLCBETEYsIERGLCBEVUYsIERVMiBhbmQgSVBJ\nViB3aWxsIG5vdAoqICAgICAgICAgICAgICAgICAgYmUgbW9kaWZpZWQuCiogICAgICAgICAgPSAn\nTic6ICBUaGUgbWF0cml4IHdpbGwgYmUgY29waWVkIHRvIERMRiwgREYsIGFuZCBEVUYKKiAgICAg\nICAgICAgICAgICAgIGFuZCBmYWN0b3JlZC4KKgoqICBUUkFOUyAgIChpbnB1dCkgQ0hBUkFDVEVS\nKjEKKiAgICAgICAgICBTcGVjaWZpZXMgdGhlIGZvcm0gb2YgdGhlIHN5c3RlbSBvZiBlcXVhdGlv\nbnM6CiogICAgICAgICAgPSAnTic6ICBBICogWCA9IEIgICAgIChObyB0cmFuc3Bvc2UpCiogICAg\nICAgICAgPSAnVCc6ICBBKipUICogWCA9IEIgIChUcmFuc3Bvc2UpCiogICAgICAgICAgPSAnQyc6\nICBBKipIICogWCA9IEIgIChDb25qdWdhdGUgdHJhbnNwb3NlKQoqCiogIE4gICAgICAgKGlucHV0\nKSBJTlRFR0VSCiogICAgICAgICAgVGhlIG9yZGVyIG9mIHRoZSBtYXRyaXggQS4gIE4gPj0gMC4K\nKgoqICBOUkhTICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2Ygcmln\naHQgaGFuZCBzaWRlcywgaS5lLiwgdGhlIG51bWJlciBvZiBjb2x1bW5zCiogICAgICAgICAgb2Yg\ndGhlIG1hdHJpeCBCLiAgTlJIUyA+PSAwLgoqCiogIERMICAgICAgKGlucHV0KSBDT01QTEVYIGFy\ncmF5LCBkaW1lbnNpb24gKE4tMSkKKiAgICAgICAgICBUaGUgKG4tMSkgc3ViZGlhZ29uYWwgZWxl\nbWVudHMgb2YgQS4KKgoqICBEICAgICAgIChpbnB1dCkgQ09NUExFWCBhcnJheSwgZGltZW5zaW9u\nIChOKQoqICAgICAgICAgIFRoZSBuIGRpYWdvbmFsIGVsZW1lbnRzIG9mIEEuCioKKiAgRFUgICAg\nICAoaW5wdXQpIENPTVBMRVggYXJyYXksIGRpbWVuc2lvbiAoTi0xKQoqICAgICAgICAgIFRoZSAo\nbi0xKSBzdXBlcmRpYWdvbmFsIGVsZW1lbnRzIG9mIEEuCioKKiAgRExGICAgICAoaW5wdXQgb3Ig\nb3V0cHV0KSBDT01QTEVYIGFycmF5LCBkaW1lbnNpb24gKE4tMSkKKiAgICAgICAgICBJZiBGQUNU\nID0gJ0YnLCB0aGVuIERMRiBpcyBhbiBpbnB1dCBhcmd1bWVudCBhbmQgb24gZW50cnkKKiAgICAg\nICAgICBjb250YWlucyB0aGUgKG4tMSkgbXVsdGlwbGllcnMgdGhhdCBkZWZpbmUgdGhlIG1hdHJp\neCBMIGZyb20KKiAgICAgICAgICB0aGUgTFUgZmFjdG9yaXphdGlvbiBvZiBBIGFzIGNvbXB1dGVk\nIGJ5IENHVFRSRi4KKgoqICAgICAgICAgIElmIEZBQ1QgPSAnTicsIHRoZW4gRExGIGlzIGFuIG91\ndHB1dCBhcmd1bWVudCBhbmQgb24gZXhpdAoqICAgICAgICAgIGNvbnRhaW5zIHRoZSAobi0xKSBt\ndWx0aXBsaWVycyB0aGF0IGRlZmluZSB0aGUgbWF0cml4IEwgZnJvbQoqICAgICAgICAgIHRoZSBM\nVSBmYWN0b3JpemF0aW9uIG9mIEEuCioKKiAgREYgICAgICAoaW5wdXQgb3Igb3V0cHV0KSBDT01Q\nTEVYIGFycmF5LCBkaW1lbnNpb24gKE4pCiogICAgICAgICAgSWYgRkFDVCA9ICdGJywgdGhlbiBE\nRiBpcyBhbiBpbnB1dCBhcmd1bWVudCBhbmQgb24gZW50cnkKKiAgICAgICAgICBjb250YWlucyB0\naGUgbiBkaWFnb25hbCBlbGVtZW50cyBvZiB0aGUgdXBwZXIgdHJpYW5ndWxhcgoqICAgICAgICAg\nIG1hdHJpeCBVIGZyb20gdGhlIExVIGZhY3Rvcml6YXRpb24gb2YgQS4KKgoqICAgICAgICAgIElm\nIEZBQ1QgPSAnTicsIHRoZW4gREYgaXMgYW4gb3V0cHV0IGFyZ3VtZW50IGFuZCBvbiBleGl0Ciog\nICAgICAgICAgY29udGFpbnMgdGhlIG4gZGlhZ29uYWwgZWxlbWVudHMgb2YgdGhlIHVwcGVyIHRy\naWFuZ3VsYXIKKiAgICAgICAgICBtYXRyaXggVSBmcm9tIHRoZSBMVSBmYWN0b3JpemF0aW9uIG9m\nIEEuCioKKiAgRFVGICAgICAoaW5wdXQgb3Igb3V0cHV0KSBDT01QTEVYIGFycmF5LCBkaW1lbnNp\nb24gKE4tMSkKKiAgICAgICAgICBJZiBGQUNUID0gJ0YnLCB0aGVuIERVRiBpcyBhbiBpbnB1dCBh\ncmd1bWVudCBhbmQgb24gZW50cnkKKiAgICAgICAgICBjb250YWlucyB0aGUgKG4tMSkgZWxlbWVu\ndHMgb2YgdGhlIGZpcnN0IHN1cGVyZGlhZ29uYWwgb2YgVS4KKgoqICAgICAgICAgIElmIEZBQ1Qg\nPSAnTicsIHRoZW4gRFVGIGlzIGFuIG91dHB1dCBhcmd1bWVudCBhbmQgb24gZXhpdAoqICAgICAg\nICAgIGNvbnRhaW5zIHRoZSAobi0xKSBlbGVtZW50cyBvZiB0aGUgZmlyc3Qgc3VwZXJkaWFnb25h\nbCBvZiBVLgoqCiogIERVMiAgICAgKGlucHV0IG9yIG91dHB1dCkgQ09NUExFWCBhcnJheSwgZGlt\nZW5zaW9uIChOLTIpCiogICAgICAgICAgSWYgRkFDVCA9ICdGJywgdGhlbiBEVTIgaXMgYW4gaW5w\ndXQgYXJndW1lbnQgYW5kIG9uIGVudHJ5CiogICAgICAgICAgY29udGFpbnMgdGhlIChuLTIpIGVs\nZW1lbnRzIG9mIHRoZSBzZWNvbmQgc3VwZXJkaWFnb25hbCBvZgoqICAgICAgICAgIFUuCioKKiAg\nICAgICAgICBJZiBGQUNUID0gJ04nLCB0aGVuIERVMiBpcyBhbiBvdXRwdXQgYXJndW1lbnQgYW5k\nIG9uIGV4aXQKKiAgICAgICAgICBjb250YWlucyB0aGUgKG4tMikgZWxlbWVudHMgb2YgdGhlIHNl\nY29uZCBzdXBlcmRpYWdvbmFsIG9mCiogICAgICAgICAgVS4KKgoqICBJUElWICAgIChpbnB1dCBv\nciBvdXRwdXQpIElOVEVHRVIgYXJyYXksIGRpbWVuc2lvbiAoTikKKiAgICAgICAgICBJZiBGQUNU\nID0gJ0YnLCB0aGVuIElQSVYgaXMgYW4gaW5wdXQgYXJndW1lbnQgYW5kIG9uIGVudHJ5CiogICAg\nICAgICAgY29udGFpbnMgdGhlIHBpdm90IGluZGljZXMgZnJvbSB0aGUgTFUgZmFjdG9yaXphdGlv\nbiBvZiBBIGFzCiogICAgICAgICAgY29tcHV0ZWQgYnkgQ0dUVFJGLgoqCiogICAgICAgICAgSWYg\nRkFDVCA9ICdOJywgdGhlbiBJUElWIGlzIGFuIG91dHB1dCBhcmd1bWVudCBhbmQgb24gZXhpdAoq\nICAgICAgICAgIGNvbnRhaW5zIHRoZSBwaXZvdCBpbmRpY2VzIGZyb20gdGhlIExVIGZhY3Rvcml6\nYXRpb24gb2YgQTsKKiAgICAgICAgICByb3cgaSBvZiB0aGUgbWF0cml4IHdhcyBpbnRlcmNoYW5n\nZWQgd2l0aCByb3cgSVBJVihpKS4KKiAgICAgICAgICBJUElWKGkpIHdpbGwgYWx3YXlzIGJlIGVp\ndGhlciBpIG9yIGkrMTsgSVBJVihpKSA9IGkgaW5kaWNhdGVzCiogICAgICAgICAgYSByb3cgaW50\nZXJjaGFuZ2Ugd2FzIG5vdCByZXF1aXJlZC4KKgoqICBCICAgICAgIChpbnB1dCkgQ09NUExFWCBh\ncnJheSwgZGltZW5zaW9uIChMREIsTlJIUykKKiAgICAgICAgICBUaGUgTi1ieS1OUkhTIHJpZ2h0\nIGhhbmQgc2lkZSBtYXRyaXggQi4KKgoqICBMREIgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAg\nICAgIFRoZSBsZWFkaW5nIGRpbWVuc2lvbiBvZiB0aGUgYXJyYXkgQi4gIExEQiA+PSBtYXgoMSxO\nKS4KKgoqICBYICAgICAgIChvdXRwdXQpIENPTVBMRVggYXJyYXksIGRpbWVuc2lvbiAoTERYLE5S\nSFMpCiogICAgICAgICAgSWYgSU5GTyA9IDAgb3IgSU5GTyA9IE4rMSwgdGhlIE4tYnktTlJIUyBz\nb2x1dGlvbiBtYXRyaXggWC4KKgoqICBMRFggICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAg\nIFRoZSBsZWFkaW5nIGRpbWVuc2lvbiBvZiB0aGUgYXJyYXkgWC4gIExEWCA+PSBtYXgoMSxOKS4K\nKgoqICBSQ09ORCAgIChvdXRwdXQpIFJFQUwKKiAgICAgICAgICBUaGUgZXN0aW1hdGUgb2YgdGhl\nIHJlY2lwcm9jYWwgY29uZGl0aW9uIG51bWJlciBvZiB0aGUgbWF0cml4CiogICAgICAgICAgQS4g\nIElmIFJDT05EIGlzIGxlc3MgdGhhbiB0aGUgbWFjaGluZSBwcmVjaXNpb24gKGluCiogICAgICAg\nICAgcGFydGljdWxhciwgaWYgUkNPTkQgPSAwKSwgdGhlIG1hdHJpeCBpcyBzaW5ndWxhciB0byB3\nb3JraW5nCiogICAgICAgICAgcHJlY2lzaW9uLiAgVGhpcyBjb25kaXRpb24gaXMgaW5kaWNhdGVk\nIGJ5IGEgcmV0dXJuIGNvZGUgb2YKKiAgICAgICAgICBJTkZPID4gMC4KKgoqICBGRVJSICAgIChv\ndXRwdXQpIFJFQUwgYXJyYXksIGRpbWVuc2lvbiAoTlJIUykKKiAgICAgICAgICBUaGUgZXN0aW1h\ndGVkIGZvcndhcmQgZXJyb3IgYm91bmQgZm9yIGVhY2ggc29sdXRpb24gdmVjdG9yCiogICAgICAg\nICAgWChqKSAodGhlIGotdGggY29sdW1uIG9mIHRoZSBzb2x1dGlvbiBtYXRyaXggWCkuCiogICAg\nICAgICAgSWYgWFRSVUUgaXMgdGhlIHRydWUgc29sdXRpb24gY29ycmVzcG9uZGluZyB0byBYKGop\nLCBGRVJSKGopCiogICAgICAgICAgaXMgYW4gZXN0aW1hdGVkIHVwcGVyIGJvdW5kIGZvciB0aGUg\nbWFnbml0dWRlIG9mIHRoZSBsYXJnZXN0CiogICAgICAgICAgZWxlbWVudCBpbiAoWChqKSAtIFhU\nUlVFKSBkaXZpZGVkIGJ5IHRoZSBtYWduaXR1ZGUgb2YgdGhlCiogICAgICAgICAgbGFyZ2VzdCBl\nbGVtZW50IGluIFgoaikuICBUaGUgZXN0aW1hdGUgaXMgYXMgcmVsaWFibGUgYXMKKiAgICAgICAg\nICB0aGUgZXN0aW1hdGUgZm9yIFJDT05ELCBhbmQgaXMgYWxtb3N0IGFsd2F5cyBhIHNsaWdodAoq\nICAgICAgICAgIG92ZXJlc3RpbWF0ZSBvZiB0aGUgdHJ1ZSBlcnJvci4KKgoqICBCRVJSICAgIChv\ndXRwdXQpIFJFQUwgYXJyYXksIGRpbWVuc2lvbiAoTlJIUykKKiAgICAgICAgICBUaGUgY29tcG9u\nZW50d2lzZSByZWxhdGl2ZSBiYWNrd2FyZCBlcnJvciBvZiBlYWNoIHNvbHV0aW9uCiogICAgICAg\nICAgdmVjdG9yIFgoaikgKGkuZS4sIHRoZSBzbWFsbGVzdCByZWxhdGl2ZSBjaGFuZ2UgaW4KKiAg\nICAgICAgICBhbnkgZWxlbWVudCBvZiBBIG9yIEIgdGhhdCBtYWtlcyBYKGopIGFuIGV4YWN0IHNv\nbHV0aW9uKS4KKgoqICBXT1JLICAgICh3b3Jrc3BhY2UpIENPTVBMRVggYXJyYXksIGRpbWVuc2lv\nbiAoMipOKQoqCiogIFJXT1JLICAgKHdvcmtzcGFjZSkgUkVBTCBhcnJheSwgZGltZW5zaW9uIChO\nKQoqCiogIElORk8gICAgKG91dHB1dCkgSU5URUdFUgoqICAgICAgICAgID0gMDogIHN1Y2Nlc3Nm\ndWwgZXhpdAoqICAgICAgICAgIDwgMDogIGlmIElORk8gPSAtaSwgdGhlIGktdGggYXJndW1lbnQg\naGFkIGFuIGlsbGVnYWwgdmFsdWUKKiAgICAgICAgICA+IDA6ICBpZiBJTkZPID0gaSwgYW5kIGkg\naXMKKiAgICAgICAgICAgICAgICA8PSBOOiAgVShpLGkpIGlzIGV4YWN0bHkgemVyby4gIFRoZSBm\nYWN0b3JpemF0aW9uCiogICAgICAgICAgICAgICAgICAgICAgIGhhcyBub3QgYmVlbiBjb21wbGV0\nZWQgdW5sZXNzIGkgPSBOLCBidXQgdGhlCiogICAgICAgICAgICAgICAgICAgICAgIGZhY3RvciBV\nIGlzIGV4YWN0bHkgc2luZ3VsYXIsIHNvIHRoZSBzb2x1dGlvbgoqICAgICAgICAgICAgICAgICAg\nICAgICBhbmQgZXJyb3IgYm91bmRzIGNvdWxkIG5vdCBiZSBjb21wdXRlZC4KKiAgICAgICAgICAg\nICAgICAgICAgICAgUkNPTkQgPSAwIGlzIHJldHVybmVkLgoqICAgICAgICAgICAgICAgID0gTisx\nOiBVIGlzIG5vbnNpbmd1bGFyLCBidXQgUkNPTkQgaXMgbGVzcyB0aGFuIG1hY2hpbmUKKiAgICAg\nICAgICAgICAgICAgICAgICAgcHJlY2lzaW9uLCBtZWFuaW5nIHRoYXQgdGhlIG1hdHJpeCBpcyBz\naW5ndWxhcgoqICAgICAgICAgICAgICAgICAgICAgICB0byB3b3JraW5nIHByZWNpc2lvbi4gIE5l\ndmVydGhlbGVzcywgdGhlCiogICAgICAgICAgICAgICAgICAgICAgIHNvbHV0aW9uIGFuZCBlcnJv\nciBib3VuZHMgYXJlIGNvbXB1dGVkIGJlY2F1c2UKKiAgICAgICAgICAgICAgICAgICAgICAgdGhl\ncmUgYXJlIGEgbnVtYmVyIG9mIHNpdHVhdGlvbnMgd2hlcmUgdGhlCiogICAgICAgICAgICAgICAg\nICAgICAgIGNvbXB1dGVkIHNvbHV0aW9uIGNhbiBiZSBtb3JlIGFjY3VyYXRlIHRoYW4gdGhlCiog\nICAgICAgICAgICAgICAgICAgICAgIHZhbHVlIG9mIFJDT05EIHdvdWxkIHN1Z2dlc3QuCioKcocD\nAABohmiHKYFyiAMAAH1yiQMAAChoioloi2iMdWJomIoBM2iZWA0AAABjZ3RzdnhfNTEudHh0cooD\nAAB1YmibigEzaJxYBQAAAGd0c3Z4cosDAABomIoBM3ViaH1oYV1ofodScowDAAB9co0DAAAoaIFY\nBwAAAGdlbmVyYWxyjgMAAGiDWAsAAAB0cmlkaWFnb25hbHKPAwAAaHFYVwAAAGRyaXZlciBleHBl\ncnQsIHNvbHZlIEEqWCA9IEIsIENvbmRpdGlvbiBOdW1iZXIsIEVycm9yIEJvdW5kcywgUmVmaW5l\nLCBGYWN0b3IsIFRyYW5zcG9zZXKQAwAAaIZohymBcpEDAAB9cpIDAAAoaIqJaItojHViaI1YLwAA\nAGh0dHA6Ly93d3cubmV0bGliLm9yZy9sYXBhY2svY29tcGxleDE2L3pndHN2eC5mcpMDAABoj1gB\nAAAAemiQaH1okV1ofodScpQDAAB9cpUDAAAoaJRYUSAAACAgICAgIFNVQlJPVVRJTkUgWkdUU1ZY\nKCBGQUNULCBUUkFOUywgTiwgTlJIUywgREwsIEQsIERVLCBETEYsIERGLCBEVUYsCiAgICAgJCAg\nICAgICAgICAgICAgICAgICBEVTIsIElQSVYsIEIsIExEQiwgWCwgTERYLCBSQ09ORCwgRkVSUiwg\nQkVSUiwKICAgICAkICAgICAgICAgICAgICAgICAgIFdPUkssIFJXT1JLLCBJTkZPICkKKgoqICAt\nLSBMQVBBQ0sgcm91dGluZSAodmVyc2lvbiAzLjIpIC0tCiogIC0tIExBUEFDSyBpcyBhIHNvZnR3\nYXJlIHBhY2thZ2UgcHJvdmlkZWQgYnkgVW5pdi4gb2YgVGVubmVzc2VlLCAgICAtLQoqICAtLSBV\nbml2LiBvZiBDYWxpZm9ybmlhIEJlcmtlbGV5LCBVbml2LiBvZiBDb2xvcmFkbyBEZW52ZXIgYW5k\nIE5BRyBMdGQuLi0tCiogICAgIE5vdmVtYmVyIDIwMDYKKgoqICAgICAuLiBTY2FsYXIgQXJndW1l\nbnRzIC4uCiAgICAgIENIQVJBQ1RFUiAgICAgICAgICBGQUNULCBUUkFOUwogICAgICBJTlRFR0VS\nICAgICAgICAgICAgSU5GTywgTERCLCBMRFgsIE4sIE5SSFMKICAgICAgRE9VQkxFIFBSRUNJU0lP\nTiAgIFJDT05ECiogICAgIC4uCiogICAgIC4uIEFycmF5IEFyZ3VtZW50cyAuLgogICAgICBJTlRF\nR0VSICAgICAgICAgICAgSVBJViggKiApCiAgICAgIERPVUJMRSBQUkVDSVNJT04gICBCRVJSKCAq\nICksIEZFUlIoICogKSwgUldPUksoICogKQogICAgICBDT01QTEVYKjE2ICAgICAgICAgQiggTERC\nLCAqICksIEQoICogKSwgREYoICogKSwgREwoICogKSwKICAgICAkICAgICAgICAgICAgICAgICAg\nIERMRiggKiApLCBEVSggKiApLCBEVTIoICogKSwgRFVGKCAqICksCiAgICAgJCAgICAgICAgICAg\nICAgICAgICBXT1JLKCAqICksIFgoIExEWCwgKiApCiogICAgIC4uCioKKiAgUHVycG9zZQoqICA9\nPT09PT09CioKKiAgWkdUU1ZYIHVzZXMgdGhlIExVIGZhY3Rvcml6YXRpb24gdG8gY29tcHV0ZSB0\naGUgc29sdXRpb24gdG8gYSBjb21wbGV4CiogIHN5c3RlbSBvZiBsaW5lYXIgZXF1YXRpb25zIEEg\nKiBYID0gQiwgQSoqVCAqIFggPSBCLCBvciBBKipIICogWCA9IEIsCiogIHdoZXJlIEEgaXMgYSB0\ncmlkaWFnb25hbCBtYXRyaXggb2Ygb3JkZXIgTiBhbmQgWCBhbmQgQiBhcmUgTi1ieS1OUkhTCiog\nIG1hdHJpY2VzLgoqCiogIEVycm9yIGJvdW5kcyBvbiB0aGUgc29sdXRpb24gYW5kIGEgY29uZGl0\naW9uIGVzdGltYXRlIGFyZSBhbHNvCiogIHByb3ZpZGVkLgoqCiogIERlc2NyaXB0aW9uCiogID09\nPT09PT09PT09CioKKiAgVGhlIGZvbGxvd2luZyBzdGVwcyBhcmUgcGVyZm9ybWVkOgoqCiogIDEu\nIElmIEZBQ1QgPSAnTicsIHRoZSBMVSBkZWNvbXBvc2l0aW9uIGlzIHVzZWQgdG8gZmFjdG9yIHRo\nZSBtYXRyaXggQQoqICAgICBhcyBBID0gTCAqIFUsIHdoZXJlIEwgaXMgYSBwcm9kdWN0IG9mIHBl\ncm11dGF0aW9uIGFuZCB1bml0IGxvd2VyCiogICAgIGJpZGlhZ29uYWwgbWF0cmljZXMgYW5kIFUg\naXMgdXBwZXIgdHJpYW5ndWxhciB3aXRoIG5vbnplcm9zIGluCiogICAgIG9ubHkgdGhlIG1haW4g\nZGlhZ29uYWwgYW5kIGZpcnN0IHR3byBzdXBlcmRpYWdvbmFscy4KKgoqICAyLiBJZiBzb21lIFUo\naSxpKT0wLCBzbyB0aGF0IFUgaXMgZXhhY3RseSBzaW5ndWxhciwgdGhlbiB0aGUgcm91dGluZQoq\nICAgICByZXR1cm5zIHdpdGggSU5GTyA9IGkuIE90aGVyd2lzZSwgdGhlIGZhY3RvcmVkIGZvcm0g\nb2YgQSBpcyB1c2VkCiogICAgIHRvIGVzdGltYXRlIHRoZSBjb25kaXRpb24gbnVtYmVyIG9mIHRo\nZSBtYXRyaXggQS4gIElmIHRoZQoqICAgICByZWNpcHJvY2FsIG9mIHRoZSBjb25kaXRpb24gbnVt\nYmVyIGlzIGxlc3MgdGhhbiBtYWNoaW5lIHByZWNpc2lvbiwKKiAgICAgSU5GTyA9IE4rMSBpcyBy\nZXR1cm5lZCBhcyBhIHdhcm5pbmcsIGJ1dCB0aGUgcm91dGluZSBzdGlsbCBnb2VzIG9uCiogICAg\nIHRvIHNvbHZlIGZvciBYIGFuZCBjb21wdXRlIGVycm9yIGJvdW5kcyBhcyBkZXNjcmliZWQgYmVs\nb3cuCioKKiAgMy4gVGhlIHN5c3RlbSBvZiBlcXVhdGlvbnMgaXMgc29sdmVkIGZvciBYIHVzaW5n\nIHRoZSBmYWN0b3JlZCBmb3JtCiogICAgIG9mIEEuCioKKiAgNC4gSXRlcmF0aXZlIHJlZmluZW1l\nbnQgaXMgYXBwbGllZCB0byBpbXByb3ZlIHRoZSBjb21wdXRlZCBzb2x1dGlvbgoqICAgICBtYXRy\naXggYW5kIGNhbGN1bGF0ZSBlcnJvciBib3VuZHMgYW5kIGJhY2t3YXJkIGVycm9yIGVzdGltYXRl\ncwoqICAgICBmb3IgaXQuCioKKiAgQXJndW1lbnRzCiogID09PT09PT09PQoqCiogIEZBQ1QgICAg\nKGlucHV0KSBDSEFSQUNURVIqMQoqICAgICAgICAgIFNwZWNpZmllcyB3aGV0aGVyIG9yIG5vdCB0\naGUgZmFjdG9yZWQgZm9ybSBvZiBBIGhhcyBiZWVuCiogICAgICAgICAgc3VwcGxpZWQgb24gZW50\ncnkuCiogICAgICAgICAgPSAnRic6ICBETEYsIERGLCBEVUYsIERVMiwgYW5kIElQSVYgY29udGFp\nbiB0aGUgZmFjdG9yZWQgZm9ybQoqICAgICAgICAgICAgICAgICAgb2YgQTsgREwsIEQsIERVLCBE\nTEYsIERGLCBEVUYsIERVMiBhbmQgSVBJViB3aWxsIG5vdAoqICAgICAgICAgICAgICAgICAgYmUg\nbW9kaWZpZWQuCiogICAgICAgICAgPSAnTic6ICBUaGUgbWF0cml4IHdpbGwgYmUgY29waWVkIHRv\nIERMRiwgREYsIGFuZCBEVUYKKiAgICAgICAgICAgICAgICAgIGFuZCBmYWN0b3JlZC4KKgoqICBU\nUkFOUyAgIChpbnB1dCkgQ0hBUkFDVEVSKjEKKiAgICAgICAgICBTcGVjaWZpZXMgdGhlIGZvcm0g\nb2YgdGhlIHN5c3RlbSBvZiBlcXVhdGlvbnM6CiogICAgICAgICAgPSAnTic6ICBBICogWCA9IEIg\nICAgIChObyB0cmFuc3Bvc2UpCiogICAgICAgICAgPSAnVCc6ICBBKipUICogWCA9IEIgIChUcmFu\nc3Bvc2UpCiogICAgICAgICAgPSAnQyc6ICBBKipIICogWCA9IEIgIChDb25qdWdhdGUgdHJhbnNw\nb3NlKQoqCiogIE4gICAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG9yZGVyIG9m\nIHRoZSBtYXRyaXggQS4gIE4gPj0gMC4KKgoqICBOUkhTICAgIChpbnB1dCkgSU5URUdFUgoqICAg\nICAgICAgIFRoZSBudW1iZXIgb2YgcmlnaHQgaGFuZCBzaWRlcywgaS5lLiwgdGhlIG51bWJlciBv\nZiBjb2x1bW5zCiogICAgICAgICAgb2YgdGhlIG1hdHJpeCBCLiAgTlJIUyA+PSAwLgoqCiogIERM\nICAgICAgKGlucHV0KSBDT01QTEVYKjE2IGFycmF5LCBkaW1lbnNpb24gKE4tMSkKKiAgICAgICAg\nICBUaGUgKG4tMSkgc3ViZGlhZ29uYWwgZWxlbWVudHMgb2YgQS4KKgoqICBEICAgICAgIChpbnB1\ndCkgQ09NUExFWCoxNiBhcnJheSwgZGltZW5zaW9uIChOKQoqICAgICAgICAgIFRoZSBuIGRpYWdv\nbmFsIGVsZW1lbnRzIG9mIEEuCioKKiAgRFUgICAgICAoaW5wdXQpIENPTVBMRVgqMTYgYXJyYXks\nIGRpbWVuc2lvbiAoTi0xKQoqICAgICAgICAgIFRoZSAobi0xKSBzdXBlcmRpYWdvbmFsIGVsZW1l\nbnRzIG9mIEEuCioKKiAgRExGICAgICAoaW5wdXQgb3Igb3V0cHV0KSBDT01QTEVYKjE2IGFycmF5\nLCBkaW1lbnNpb24gKE4tMSkKKiAgICAgICAgICBJZiBGQUNUID0gJ0YnLCB0aGVuIERMRiBpcyBh\nbiBpbnB1dCBhcmd1bWVudCBhbmQgb24gZW50cnkKKiAgICAgICAgICBjb250YWlucyB0aGUgKG4t\nMSkgbXVsdGlwbGllcnMgdGhhdCBkZWZpbmUgdGhlIG1hdHJpeCBMIGZyb20KKiAgICAgICAgICB0\naGUgTFUgZmFjdG9yaXphdGlvbiBvZiBBIGFzIGNvbXB1dGVkIGJ5IFpHVFRSRi4KKgoqICAgICAg\nICAgIElmIEZBQ1QgPSAnTicsIHRoZW4gRExGIGlzIGFuIG91dHB1dCBhcmd1bWVudCBhbmQgb24g\nZXhpdAoqICAgICAgICAgIGNvbnRhaW5zIHRoZSAobi0xKSBtdWx0aXBsaWVycyB0aGF0IGRlZmlu\nZSB0aGUgbWF0cml4IEwgZnJvbQoqICAgICAgICAgIHRoZSBMVSBmYWN0b3JpemF0aW9uIG9mIEEu\nCioKKiAgREYgICAgICAoaW5wdXQgb3Igb3V0cHV0KSBDT01QTEVYKjE2IGFycmF5LCBkaW1lbnNp\nb24gKE4pCiogICAgICAgICAgSWYgRkFDVCA9ICdGJywgdGhlbiBERiBpcyBhbiBpbnB1dCBhcmd1\nbWVudCBhbmQgb24gZW50cnkKKiAgICAgICAgICBjb250YWlucyB0aGUgbiBkaWFnb25hbCBlbGVt\nZW50cyBvZiB0aGUgdXBwZXIgdHJpYW5ndWxhcgoqICAgICAgICAgIG1hdHJpeCBVIGZyb20gdGhl\nIExVIGZhY3Rvcml6YXRpb24gb2YgQS4KKgoqICAgICAgICAgIElmIEZBQ1QgPSAnTicsIHRoZW4g\nREYgaXMgYW4gb3V0cHV0IGFyZ3VtZW50IGFuZCBvbiBleGl0CiogICAgICAgICAgY29udGFpbnMg\ndGhlIG4gZGlhZ29uYWwgZWxlbWVudHMgb2YgdGhlIHVwcGVyIHRyaWFuZ3VsYXIKKiAgICAgICAg\nICBtYXRyaXggVSBmcm9tIHRoZSBMVSBmYWN0b3JpemF0aW9uIG9mIEEuCioKKiAgRFVGICAgICAo\naW5wdXQgb3Igb3V0cHV0KSBDT01QTEVYKjE2IGFycmF5LCBkaW1lbnNpb24gKE4tMSkKKiAgICAg\nICAgICBJZiBGQUNUID0gJ0YnLCB0aGVuIERVRiBpcyBhbiBpbnB1dCBhcmd1bWVudCBhbmQgb24g\nZW50cnkKKiAgICAgICAgICBjb250YWlucyB0aGUgKG4tMSkgZWxlbWVudHMgb2YgdGhlIGZpcnN0\nIHN1cGVyZGlhZ29uYWwgb2YgVS4KKgoqICAgICAgICAgIElmIEZBQ1QgPSAnTicsIHRoZW4gRFVG\nIGlzIGFuIG91dHB1dCBhcmd1bWVudCBhbmQgb24gZXhpdAoqICAgICAgICAgIGNvbnRhaW5zIHRo\nZSAobi0xKSBlbGVtZW50cyBvZiB0aGUgZmlyc3Qgc3VwZXJkaWFnb25hbCBvZiBVLgoqCiogIERV\nMiAgICAgKGlucHV0IG9yIG91dHB1dCkgQ09NUExFWCoxNiBhcnJheSwgZGltZW5zaW9uIChOLTIp\nCiogICAgICAgICAgSWYgRkFDVCA9ICdGJywgdGhlbiBEVTIgaXMgYW4gaW5wdXQgYXJndW1lbnQg\nYW5kIG9uIGVudHJ5CiogICAgICAgICAgY29udGFpbnMgdGhlIChuLTIpIGVsZW1lbnRzIG9mIHRo\nZSBzZWNvbmQgc3VwZXJkaWFnb25hbCBvZgoqICAgICAgICAgIFUuCioKKiAgICAgICAgICBJZiBG\nQUNUID0gJ04nLCB0aGVuIERVMiBpcyBhbiBvdXRwdXQgYXJndW1lbnQgYW5kIG9uIGV4aXQKKiAg\nICAgICAgICBjb250YWlucyB0aGUgKG4tMikgZWxlbWVudHMgb2YgdGhlIHNlY29uZCBzdXBlcmRp\nYWdvbmFsIG9mCiogICAgICAgICAgVS4KKgoqICBJUElWICAgIChpbnB1dCBvciBvdXRwdXQpIElO\nVEVHRVIgYXJyYXksIGRpbWVuc2lvbiAoTikKKiAgICAgICAgICBJZiBGQUNUID0gJ0YnLCB0aGVu\nIElQSVYgaXMgYW4gaW5wdXQgYXJndW1lbnQgYW5kIG9uIGVudHJ5CiogICAgICAgICAgY29udGFp\nbnMgdGhlIHBpdm90IGluZGljZXMgZnJvbSB0aGUgTFUgZmFjdG9yaXphdGlvbiBvZiBBIGFzCiog\nICAgICAgICAgY29tcHV0ZWQgYnkgWkdUVFJGLgoqCiogICAgICAgICAgSWYgRkFDVCA9ICdOJywg\ndGhlbiBJUElWIGlzIGFuIG91dHB1dCBhcmd1bWVudCBhbmQgb24gZXhpdAoqICAgICAgICAgIGNv\nbnRhaW5zIHRoZSBwaXZvdCBpbmRpY2VzIGZyb20gdGhlIExVIGZhY3Rvcml6YXRpb24gb2YgQTsK\nKiAgICAgICAgICByb3cgaSBvZiB0aGUgbWF0cml4IHdhcyBpbnRlcmNoYW5nZWQgd2l0aCByb3cg\nSVBJVihpKS4KKiAgICAgICAgICBJUElWKGkpIHdpbGwgYWx3YXlzIGJlIGVpdGhlciBpIG9yIGkr\nMTsgSVBJVihpKSA9IGkgaW5kaWNhdGVzCiogICAgICAgICAgYSByb3cgaW50ZXJjaGFuZ2Ugd2Fz\nIG5vdCByZXF1aXJlZC4KKgoqICBCICAgICAgIChpbnB1dCkgQ09NUExFWCoxNiBhcnJheSwgZGlt\nZW5zaW9uIChMREIsTlJIUykKKiAgICAgICAgICBUaGUgTi1ieS1OUkhTIHJpZ2h0IGhhbmQgc2lk\nZSBtYXRyaXggQi4KKgoqICBMREIgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBs\nZWFkaW5nIGRpbWVuc2lvbiBvZiB0aGUgYXJyYXkgQi4gIExEQiA+PSBtYXgoMSxOKS4KKgoqICBY\nICAgICAgIChvdXRwdXQpIENPTVBMRVgqMTYgYXJyYXksIGRpbWVuc2lvbiAoTERYLE5SSFMpCiog\nICAgICAgICAgSWYgSU5GTyA9IDAgb3IgSU5GTyA9IE4rMSwgdGhlIE4tYnktTlJIUyBzb2x1dGlv\nbiBtYXRyaXggWC4KKgoqICBMRFggICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBs\nZWFkaW5nIGRpbWVuc2lvbiBvZiB0aGUgYXJyYXkgWC4gIExEWCA+PSBtYXgoMSxOKS4KKgoqICBS\nQ09ORCAgIChvdXRwdXQpIERPVUJMRSBQUkVDSVNJT04KKiAgICAgICAgICBUaGUgZXN0aW1hdGUg\nb2YgdGhlIHJlY2lwcm9jYWwgY29uZGl0aW9uIG51bWJlciBvZiB0aGUgbWF0cml4CiogICAgICAg\nICAgQS4gIElmIFJDT05EIGlzIGxlc3MgdGhhbiB0aGUgbWFjaGluZSBwcmVjaXNpb24gKGluCiog\nICAgICAgICAgcGFydGljdWxhciwgaWYgUkNPTkQgPSAwKSwgdGhlIG1hdHJpeCBpcyBzaW5ndWxh\nciB0byB3b3JraW5nCiogICAgICAgICAgcHJlY2lzaW9uLiAgVGhpcyBjb25kaXRpb24gaXMgaW5k\naWNhdGVkIGJ5IGEgcmV0dXJuIGNvZGUgb2YKKiAgICAgICAgICBJTkZPID4gMC4KKgoqICBGRVJS\nICAgIChvdXRwdXQpIERPVUJMRSBQUkVDSVNJT04gYXJyYXksIGRpbWVuc2lvbiAoTlJIUykKKiAg\nICAgICAgICBUaGUgZXN0aW1hdGVkIGZvcndhcmQgZXJyb3IgYm91bmQgZm9yIGVhY2ggc29sdXRp\nb24gdmVjdG9yCiogICAgICAgICAgWChqKSAodGhlIGotdGggY29sdW1uIG9mIHRoZSBzb2x1dGlv\nbiBtYXRyaXggWCkuCiogICAgICAgICAgSWYgWFRSVUUgaXMgdGhlIHRydWUgc29sdXRpb24gY29y\ncmVzcG9uZGluZyB0byBYKGopLCBGRVJSKGopCiogICAgICAgICAgaXMgYW4gZXN0aW1hdGVkIHVw\ncGVyIGJvdW5kIGZvciB0aGUgbWFnbml0dWRlIG9mIHRoZSBsYXJnZXN0CiogICAgICAgICAgZWxl\nbWVudCBpbiAoWChqKSAtIFhUUlVFKSBkaXZpZGVkIGJ5IHRoZSBtYWduaXR1ZGUgb2YgdGhlCiog\nICAgICAgICAgbGFyZ2VzdCBlbGVtZW50IGluIFgoaikuICBUaGUgZXN0aW1hdGUgaXMgYXMgcmVs\naWFibGUgYXMKKiAgICAgICAgICB0aGUgZXN0aW1hdGUgZm9yIFJDT05ELCBhbmQgaXMgYWxtb3N0\nIGFsd2F5cyBhIHNsaWdodAoqICAgICAgICAgIG92ZXJlc3RpbWF0ZSBvZiB0aGUgdHJ1ZSBlcnJv\nci4KKgoqICBCRVJSICAgIChvdXRwdXQpIERPVUJMRSBQUkVDSVNJT04gYXJyYXksIGRpbWVuc2lv\nbiAoTlJIUykKKiAgICAgICAgICBUaGUgY29tcG9uZW50d2lzZSByZWxhdGl2ZSBiYWNrd2FyZCBl\ncnJvciBvZiBlYWNoIHNvbHV0aW9uCiogICAgICAgICAgdmVjdG9yIFgoaikgKGkuZS4sIHRoZSBz\nbWFsbGVzdCByZWxhdGl2ZSBjaGFuZ2UgaW4KKiAgICAgICAgICBhbnkgZWxlbWVudCBvZiBBIG9y\nIEIgdGhhdCBtYWtlcyBYKGopIGFuIGV4YWN0IHNvbHV0aW9uKS4KKgoqICBXT1JLICAgICh3b3Jr\nc3BhY2UpIENPTVBMRVgqMTYgYXJyYXksIGRpbWVuc2lvbiAoMipOKQoqCiogIFJXT1JLICAgKHdv\ncmtzcGFjZSkgRE9VQkxFIFBSRUNJU0lPTiBhcnJheSwgZGltZW5zaW9uIChOKQoqCiogIElORk8g\nICAgKG91dHB1dCkgSU5URUdFUgoqICAgICAgICAgID0gMDogIHN1Y2Nlc3NmdWwgZXhpdAoqICAg\nICAgICAgIDwgMDogIGlmIElORk8gPSAtaSwgdGhlIGktdGggYXJndW1lbnQgaGFkIGFuIGlsbGVn\nYWwgdmFsdWUKKiAgICAgICAgICA+IDA6ICBpZiBJTkZPID0gaSwgYW5kIGkgaXMKKiAgICAgICAg\nICAgICAgICA8PSBOOiAgVShpLGkpIGlzIGV4YWN0bHkgemVyby4gIFRoZSBmYWN0b3JpemF0aW9u\nCiogICAgICAgICAgICAgICAgICAgICAgIGhhcyBub3QgYmVlbiBjb21wbGV0ZWQgdW5sZXNzIGkg\nPSBOLCBidXQgdGhlCiogICAgICAgICAgICAgICAgICAgICAgIGZhY3RvciBVIGlzIGV4YWN0bHkg\nc2luZ3VsYXIsIHNvIHRoZSBzb2x1dGlvbgoqICAgICAgICAgICAgICAgICAgICAgICBhbmQgZXJy\nb3IgYm91bmRzIGNvdWxkIG5vdCBiZSBjb21wdXRlZC4KKiAgICAgICAgICAgICAgICAgICAgICAg\nUkNPTkQgPSAwIGlzIHJldHVybmVkLgoqICAgICAgICAgICAgICAgID0gTisxOiBVIGlzIG5vbnNp\nbmd1bGFyLCBidXQgUkNPTkQgaXMgbGVzcyB0aGFuIG1hY2hpbmUKKiAgICAgICAgICAgICAgICAg\nICAgICAgcHJlY2lzaW9uLCBtZWFuaW5nIHRoYXQgdGhlIG1hdHJpeCBpcyBzaW5ndWxhcgoqICAg\nICAgICAgICAgICAgICAgICAgICB0byB3b3JraW5nIHByZWNpc2lvbi4gIE5ldmVydGhlbGVzcywg\ndGhlCiogICAgICAgICAgICAgICAgICAgICAgIHNvbHV0aW9uIGFuZCBlcnJvciBib3VuZHMgYXJl\nIGNvbXB1dGVkIGJlY2F1c2UKKiAgICAgICAgICAgICAgICAgICAgICAgdGhlcmUgYXJlIGEgbnVt\nYmVyIG9mIHNpdHVhdGlvbnMgd2hlcmUgdGhlCiogICAgICAgICAgICAgICAgICAgICAgIGNvbXB1\ndGVkIHNvbHV0aW9uIGNhbiBiZSBtb3JlIGFjY3VyYXRlIHRoYW4gdGhlCiogICAgICAgICAgICAg\nICAgICAgICAgIHZhbHVlIG9mIFJDT05EIHdvdWxkIHN1Z2dlc3QuCioKcpYDAABohmiHKYFylwMA\nAH1ymAMAAChoioloi2iMdWJomIoBNGiZWA0AAAB6Z3RzdnhfNTIudHh0cpkDAAB1YmibigE0aJxY\nBQAAAGd0c3Z4cpoDAABomIoBNHViaH1oYV1ofodScpsDAAB9cpwDAAAoaIFYBwAAAGdlbmVyYWxy\nnQMAAGiDWAQAAABmdWxscp4DAABocVgsAAAAY29tcHV0YXRpb25hbCwgc29sdmUgQSpYID0gQiB1\nc2luZyBMVSwgVFJBTlNynwMAAGiGaIcpgXKgAwAAfXKhAwAAKGiKiWiLaIx1YmiNWCwAAABodHRw\nOi8vd3d3Lm5ldGxpYi5vcmcvbGFwYWNrL3NpbmdsZS9zZ2V0cnMuZnKiAwAAaI9YAQAAAHNokGh9\naJFdaH6HUnKjAwAAfXKkAwAAKGiUWAsIAAAgICAgICBTVUJST1VUSU5FIFNHRVRSUyggVFJBTlMs\nIE4sIE5SSFMsIEEsIExEQSwgSVBJViwgQiwgTERCLCBJTkZPICkKKgoqICAtLSBMQVBBQ0sgcm91\ndGluZSAodmVyc2lvbiAzLjMuMSkgLS0KKiAgLS0gTEFQQUNLIGlzIGEgc29mdHdhcmUgcGFja2Fn\nZSBwcm92aWRlZCBieSBVbml2LiBvZiBUZW5uZXNzZWUsICAgIC0tCiogIC0tIFVuaXYuIG9mIENh\nbGlmb3JuaWEgQmVya2VsZXksIFVuaXYuIG9mIENvbG9yYWRvIERlbnZlciBhbmQgTkFHIEx0ZC4u\nLS0KKiAgLS0gQXByaWwgMjAxMSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgIC0tCioKKiAgICAgLi4gU2NhbGFyIEFyZ3VtZW50cyAuLgogICAgICBD\nSEFSQUNURVIgICAgICAgICAgVFJBTlMKICAgICAgSU5URUdFUiAgICAgICAgICAgIElORk8sIExE\nQSwgTERCLCBOLCBOUkhTCiogICAgIC4uCiogICAgIC4uIEFycmF5IEFyZ3VtZW50cyAuLgogICAg\nICBJTlRFR0VSICAgICAgICAgICAgSVBJViggKiApCiAgICAgIFJFQUwgICAgICAgICAgICAgICBB\nKCBMREEsICogKSwgQiggTERCLCAqICkKKiAgICAgLi4KKgoqICBQdXJwb3NlCiogID09PT09PT0K\nKgoqICBTR0VUUlMgc29sdmVzIGEgc3lzdGVtIG9mIGxpbmVhciBlcXVhdGlvbnMKKiAgICAgQSAq\nIFggPSBCICBvciAgQSoqVCAqIFggPSBCCiogIHdpdGggYSBnZW5lcmFsIE4tYnktTiBtYXRyaXgg\nQSB1c2luZyB0aGUgTFUgZmFjdG9yaXphdGlvbiBjb21wdXRlZAoqICBieSBTR0VUUkYuCioKKiAg\nQXJndW1lbnRzCiogID09PT09PT09PQoqCiogIFRSQU5TICAgKGlucHV0KSBDSEFSQUNURVIqMQoq\nICAgICAgICAgIFNwZWNpZmllcyB0aGUgZm9ybSBvZiB0aGUgc3lzdGVtIG9mIGVxdWF0aW9uczoK\nKiAgICAgICAgICA9ICdOJzogIEEgKiBYID0gQiAgKE5vIHRyYW5zcG9zZSkKKiAgICAgICAgICA9\nICdUJzogIEEqKlQqIFggPSBCICAoVHJhbnNwb3NlKQoqICAgICAgICAgID0gJ0MnOiAgQSoqVCog\nWCA9IEIgIChDb25qdWdhdGUgdHJhbnNwb3NlID0gVHJhbnNwb3NlKQoqCiogIE4gICAgICAgKGlu\ncHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG9yZGVyIG9mIHRoZSBtYXRyaXggQS4gIE4gPj0g\nMC4KKgoqICBOUkhTICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2Yg\ncmlnaHQgaGFuZCBzaWRlcywgaS5lLiwgdGhlIG51bWJlciBvZiBjb2x1bW5zCiogICAgICAgICAg\nb2YgdGhlIG1hdHJpeCBCLiAgTlJIUyA+PSAwLgoqCiogIEEgICAgICAgKGlucHV0KSBSRUFMIGFy\ncmF5LCBkaW1lbnNpb24gKExEQSxOKQoqICAgICAgICAgIFRoZSBmYWN0b3JzIEwgYW5kIFUgZnJv\nbSB0aGUgZmFjdG9yaXphdGlvbiBBID0gUCpMKlUKKiAgICAgICAgICBhcyBjb21wdXRlZCBieSBT\nR0VUUkYuCioKKiAgTERBICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbGVhZGlu\nZyBkaW1lbnNpb24gb2YgdGhlIGFycmF5IEEuICBMREEgPj0gbWF4KDEsTikuCioKKiAgSVBJViAg\nICAoaW5wdXQpIElOVEVHRVIgYXJyYXksIGRpbWVuc2lvbiAoTikKKiAgICAgICAgICBUaGUgcGl2\nb3QgaW5kaWNlcyBmcm9tIFNHRVRSRjsgZm9yIDE8PWk8PU4sIHJvdyBpIG9mIHRoZQoqICAgICAg\nICAgIG1hdHJpeCB3YXMgaW50ZXJjaGFuZ2VkIHdpdGggcm93IElQSVYoaSkuCioKKiAgQiAgICAg\nICAoaW5wdXQvb3V0cHV0KSBSRUFMIGFycmF5LCBkaW1lbnNpb24gKExEQixOUkhTKQoqICAgICAg\nICAgIE9uIGVudHJ5LCB0aGUgcmlnaHQgaGFuZCBzaWRlIG1hdHJpeCBCLgoqICAgICAgICAgIE9u\nIGV4aXQsIHRoZSBzb2x1dGlvbiBtYXRyaXggWC4KKgoqICBMREIgICAgIChpbnB1dCkgSU5URUdF\nUgoqICAgICAgICAgIFRoZSBsZWFkaW5nIGRpbWVuc2lvbiBvZiB0aGUgYXJyYXkgQi4gIExEQiA+\nPSBtYXgoMSxOKS4KKgoqICBJTkZPICAgIChvdXRwdXQpIElOVEVHRVIKKiAgICAgICAgICA9IDA6\nICBzdWNjZXNzZnVsIGV4aXQKKiAgICAgICAgICA8IDA6ICBpZiBJTkZPID0gLWksIHRoZSBpLXRo\nIGFyZ3VtZW50IGhhZCBhbiBpbGxlZ2FsIHZhbHVlCioKcqUDAABohmiHKYFypgMAAH1ypwMAACho\nioloi2iMdWJomIoCBQFomVgOAAAAc2dldHJzXzI2MS50eHRyqAMAAHViaJuKAgUBaJxYBQAAAGdl\ndHJzcqkDAABomIoBNXViaH1oYV1ofodScqoDAAB9cqsDAAAoaIFYBwAAAGdlbmVyYWxyrAMAAGiD\nWAQAAABmdWxscq0DAABocVgsAAAAY29tcHV0YXRpb25hbCwgc29sdmUgQSpYID0gQiB1c2luZyBM\nVSwgVFJBTlNyrgMAAGiGaIcpgXKvAwAAfXKwAwAAKGiKiWiLaIx1YmiNWCwAAABodHRwOi8vd3d3\nLm5ldGxpYi5vcmcvbGFwYWNrL2RvdWJsZS9kZ2V0cnMuZnKxAwAAaI9YAQAAAGRokGh9aJFdaH6H\nUnKyAwAAfXKzAwAAKGiUWCMIAAAgICAgICBTVUJST1VUSU5FIERHRVRSUyggVFJBTlMsIE4sIE5S\nSFMsIEEsIExEQSwgSVBJViwgQiwgTERCLCBJTkZPICkKKgoqICAtLSBMQVBBQ0sgcm91dGluZSAo\ndmVyc2lvbiAzLjMuMSkgLS0KKiAgLS0gTEFQQUNLIGlzIGEgc29mdHdhcmUgcGFja2FnZSBwcm92\naWRlZCBieSBVbml2LiBvZiBUZW5uZXNzZWUsICAgIC0tCiogIC0tIFVuaXYuIG9mIENhbGlmb3Ju\naWEgQmVya2VsZXksIFVuaXYuIG9mIENvbG9yYWRvIERlbnZlciBhbmQgTkFHIEx0ZC4uLS0KKiAg\nLS0gQXByaWwgMjAxMSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgIC0tCioKKiAgICAgLi4gU2NhbGFyIEFyZ3VtZW50cyAuLgogICAgICBDSEFSQUNU\nRVIgICAgICAgICAgVFJBTlMKICAgICAgSU5URUdFUiAgICAgICAgICAgIElORk8sIExEQSwgTERC\nLCBOLCBOUkhTCiogICAgIC4uCiogICAgIC4uIEFycmF5IEFyZ3VtZW50cyAuLgogICAgICBJTlRF\nR0VSICAgICAgICAgICAgSVBJViggKiApCiAgICAgIERPVUJMRSBQUkVDSVNJT04gICBBKCBMREEs\nICogKSwgQiggTERCLCAqICkKKiAgICAgLi4KKgoqICBQdXJwb3NlCiogID09PT09PT0KKgoqICBE\nR0VUUlMgc29sdmVzIGEgc3lzdGVtIG9mIGxpbmVhciBlcXVhdGlvbnMKKiAgICAgQSAqIFggPSBC\nICBvciAgQSoqVCAqIFggPSBCCiogIHdpdGggYSBnZW5lcmFsIE4tYnktTiBtYXRyaXggQSB1c2lu\nZyB0aGUgTFUgZmFjdG9yaXphdGlvbiBjb21wdXRlZAoqICBieSBER0VUUkYuCioKKiAgQXJndW1l\nbnRzCiogID09PT09PT09PQoqCiogIFRSQU5TICAgKGlucHV0KSBDSEFSQUNURVIqMQoqICAgICAg\nICAgIFNwZWNpZmllcyB0aGUgZm9ybSBvZiB0aGUgc3lzdGVtIG9mIGVxdWF0aW9uczoKKiAgICAg\nICAgICA9ICdOJzogIEEgKiBYID0gQiAgKE5vIHRyYW5zcG9zZSkKKiAgICAgICAgICA9ICdUJzog\nIEEqKlQqIFggPSBCICAoVHJhbnNwb3NlKQoqICAgICAgICAgID0gJ0MnOiAgQSoqVCogWCA9IEIg\nIChDb25qdWdhdGUgdHJhbnNwb3NlID0gVHJhbnNwb3NlKQoqCiogIE4gICAgICAgKGlucHV0KSBJ\nTlRFR0VSCiogICAgICAgICAgVGhlIG9yZGVyIG9mIHRoZSBtYXRyaXggQS4gIE4gPj0gMC4KKgoq\nICBOUkhTICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2YgcmlnaHQg\naGFuZCBzaWRlcywgaS5lLiwgdGhlIG51bWJlciBvZiBjb2x1bW5zCiogICAgICAgICAgb2YgdGhl\nIG1hdHJpeCBCLiAgTlJIUyA+PSAwLgoqCiogIEEgICAgICAgKGlucHV0KSBET1VCTEUgUFJFQ0lT\nSU9OIGFycmF5LCBkaW1lbnNpb24gKExEQSxOKQoqICAgICAgICAgIFRoZSBmYWN0b3JzIEwgYW5k\nIFUgZnJvbSB0aGUgZmFjdG9yaXphdGlvbiBBID0gUCpMKlUKKiAgICAgICAgICBhcyBjb21wdXRl\nZCBieSBER0VUUkYuCioKKiAgTERBICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUg\nbGVhZGluZyBkaW1lbnNpb24gb2YgdGhlIGFycmF5IEEuICBMREEgPj0gbWF4KDEsTikuCioKKiAg\nSVBJViAgICAoaW5wdXQpIElOVEVHRVIgYXJyYXksIGRpbWVuc2lvbiAoTikKKiAgICAgICAgICBU\naGUgcGl2b3QgaW5kaWNlcyBmcm9tIERHRVRSRjsgZm9yIDE8PWk8PU4sIHJvdyBpIG9mIHRoZQoq\nICAgICAgICAgIG1hdHJpeCB3YXMgaW50ZXJjaGFuZ2VkIHdpdGggcm93IElQSVYoaSkuCioKKiAg\nQiAgICAgICAoaW5wdXQvb3V0cHV0KSBET1VCTEUgUFJFQ0lTSU9OIGFycmF5LCBkaW1lbnNpb24g\nKExEQixOUkhTKQoqICAgICAgICAgIE9uIGVudHJ5LCB0aGUgcmlnaHQgaGFuZCBzaWRlIG1hdHJp\neCBCLgoqICAgICAgICAgIE9uIGV4aXQsIHRoZSBzb2x1dGlvbiBtYXRyaXggWC4KKgoqICBMREIg\nICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBsZWFkaW5nIGRpbWVuc2lvbiBvZiB0\naGUgYXJyYXkgQi4gIExEQiA+PSBtYXgoMSxOKS4KKgoqICBJTkZPICAgIChvdXRwdXQpIElOVEVH\nRVIKKiAgICAgICAgICA9IDA6ICBzdWNjZXNzZnVsIGV4aXQKKiAgICAgICAgICA8IDA6ICBpZiBJ\nTkZPID0gLWksIHRoZSBpLXRoIGFyZ3VtZW50IGhhZCBhbiBpbGxlZ2FsIHZhbHVlCioKcrQDAABo\nhmiHKYFytQMAAH1ytgMAAChoioloi2iMdWJomIoCBgFomVgOAAAAZGdldHJzXzI2Mi50eHRytwMA\nAHViaJuKAgYBaJxYBQAAAGdldHJzcrgDAABomIoBNnViaH1oYV1ofodScrkDAAB9croDAAAoaIFY\nBwAAAGdlbmVyYWxyuwMAAGiDWAQAAABmdWxscrwDAABocVgsAAAAY29tcHV0YXRpb25hbCwgc29s\ndmUgQSpYID0gQiB1c2luZyBMVSwgVFJBTlNyvQMAAGiGaIcpgXK+AwAAfXK/AwAAKGiKiWiLaIx1\nYmiNWC0AAABodHRwOi8vd3d3Lm5ldGxpYi5vcmcvbGFwYWNrL2NvbXBsZXgvY2dldHJzLmZywAMA\nAGiPWAEAAABjaJBofWiRXWh+h1JywQMAAH1ywgMAACholFgaCAAAICAgICAgU1VCUk9VVElORSBD\nR0VUUlMoIFRSQU5TLCBOLCBOUkhTLCBBLCBMREEsIElQSVYsIEIsIExEQiwgSU5GTyApCioKKiAg\nLS0gTEFQQUNLIHJvdXRpbmUgKHZlcnNpb24gMy4zLjEpIC0tCiogIC0tIExBUEFDSyBpcyBhIHNv\nZnR3YXJlIHBhY2thZ2UgcHJvdmlkZWQgYnkgVW5pdi4gb2YgVGVubmVzc2VlLCAgICAtLQoqICAt\nLSBVbml2LiBvZiBDYWxpZm9ybmlhIEJlcmtlbGV5LCBVbml2LiBvZiBDb2xvcmFkbyBEZW52ZXIg\nYW5kIE5BRyBMdGQuLi0tCiogIC0tIEFwcmlsIDIwMTEgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLQoqCiogICAgIC4uIFNjYWxhciBBcmd1bWVu\ndHMgLi4KICAgICAgQ0hBUkFDVEVSICAgICAgICAgIFRSQU5TCiAgICAgIElOVEVHRVIgICAgICAg\nICAgICBJTkZPLCBMREEsIExEQiwgTiwgTlJIUwoqICAgICAuLgoqICAgICAuLiBBcnJheSBBcmd1\nbWVudHMgLi4KICAgICAgSU5URUdFUiAgICAgICAgICAgIElQSVYoICogKQogICAgICBDT01QTEVY\nICAgICAgICAgICAgQSggTERBLCAqICksIEIoIExEQiwgKiApCiogICAgIC4uCioKKiAgUHVycG9z\nZQoqICA9PT09PT09CioKKiAgQ0dFVFJTIHNvbHZlcyBhIHN5c3RlbSBvZiBsaW5lYXIgZXF1YXRp\nb25zCiogICAgIEEgKiBYID0gQiwgIEEqKlQgKiBYID0gQiwgIG9yICBBKipIICogWCA9IEIKKiAg\nd2l0aCBhIGdlbmVyYWwgTi1ieS1OIG1hdHJpeCBBIHVzaW5nIHRoZSBMVSBmYWN0b3JpemF0aW9u\nIGNvbXB1dGVkCiogIGJ5IENHRVRSRi4KKgoqICBBcmd1bWVudHMKKiAgPT09PT09PT09CioKKiAg\nVFJBTlMgICAoaW5wdXQpIENIQVJBQ1RFUioxCiogICAgICAgICAgU3BlY2lmaWVzIHRoZSBmb3Jt\nIG9mIHRoZSBzeXN0ZW0gb2YgZXF1YXRpb25zOgoqICAgICAgICAgID0gJ04nOiAgQSAqIFggPSBC\nICAgICAoTm8gdHJhbnNwb3NlKQoqICAgICAgICAgID0gJ1QnOiAgQSoqVCAqIFggPSBCICAoVHJh\nbnNwb3NlKQoqICAgICAgICAgID0gJ0MnOiAgQSoqSCAqIFggPSBCICAoQ29uanVnYXRlIHRyYW5z\ncG9zZSkKKgoqICBOICAgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBvcmRlciBv\nZiB0aGUgbWF0cml4IEEuICBOID49IDAuCioKKiAgTlJIUyAgICAoaW5wdXQpIElOVEVHRVIKKiAg\nICAgICAgICBUaGUgbnVtYmVyIG9mIHJpZ2h0IGhhbmQgc2lkZXMsIGkuZS4sIHRoZSBudW1iZXIg\nb2YgY29sdW1ucwoqICAgICAgICAgIG9mIHRoZSBtYXRyaXggQi4gIE5SSFMgPj0gMC4KKgoqICBB\nICAgICAgIChpbnB1dCkgQ09NUExFWCBhcnJheSwgZGltZW5zaW9uIChMREEsTikKKiAgICAgICAg\nICBUaGUgZmFjdG9ycyBMIGFuZCBVIGZyb20gdGhlIGZhY3Rvcml6YXRpb24gQSA9IFAqTCpVCiog\nICAgICAgICAgYXMgY29tcHV0ZWQgYnkgQ0dFVFJGLgoqCiogIExEQSAgICAgKGlucHV0KSBJTlRF\nR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBBLiAgTERB\nID49IG1heCgxLE4pLgoqCiogIElQSVYgICAgKGlucHV0KSBJTlRFR0VSIGFycmF5LCBkaW1lbnNp\nb24gKE4pCiogICAgICAgICAgVGhlIHBpdm90IGluZGljZXMgZnJvbSBDR0VUUkY7IGZvciAxPD1p\nPD1OLCByb3cgaSBvZiB0aGUKKiAgICAgICAgICBtYXRyaXggd2FzIGludGVyY2hhbmdlZCB3aXRo\nIHJvdyBJUElWKGkpLgoqCiogIEIgICAgICAgKGlucHV0L291dHB1dCkgQ09NUExFWCBhcnJheSwg\nZGltZW5zaW9uIChMREIsTlJIUykKKiAgICAgICAgICBPbiBlbnRyeSwgdGhlIHJpZ2h0IGhhbmQg\nc2lkZSBtYXRyaXggQi4KKiAgICAgICAgICBPbiBleGl0LCB0aGUgc29sdXRpb24gbWF0cml4IFgu\nCioKKiAgTERCICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbGVhZGluZyBkaW1l\nbnNpb24gb2YgdGhlIGFycmF5IEIuICBMREIgPj0gbWF4KDEsTikuCioKKiAgSU5GTyAgICAob3V0\ncHV0KSBJTlRFR0VSCiogICAgICAgICAgPSAwOiAgc3VjY2Vzc2Z1bCBleGl0CiogICAgICAgICAg\nPCAwOiAgaWYgSU5GTyA9IC1pLCB0aGUgaS10aCBhcmd1bWVudCBoYWQgYW4gaWxsZWdhbCB2YWx1\nZQoqCnLDAwAAaIZohymBcsQDAAB9csUDAAAoaIqJaItojHViaJiKAgcBaJlYDgAAAGNnZXRyc18y\nNjMudHh0csYDAAB1YmibigIHAWicWAUAAABnZXRyc3LHAwAAaJiKATd1Ymh9aGFdaH6HUnLIAwAA\nfXLJAwAAKGiBWAcAAABnZW5lcmFscsoDAABog1gEAAAAZnVsbHLLAwAAaHFYLAAAAGNvbXB1dGF0\naW9uYWwsIHNvbHZlIEEqWCA9IEIgdXNpbmcgTFUsIFRSQU5TcswDAABohmiHKYFyzQMAAH1yzgMA\nAChoioloi2iMdWJojVgvAAAAaHR0cDovL3d3dy5uZXRsaWIub3JnL2xhcGFjay9jb21wbGV4MTYv\nemdldHJzLmZyzwMAAGiPWAEAAAB6aJBofWiRXWh+h1Jy0AMAAH1y0QMAACholFggCAAAICAgICAg\nU1VCUk9VVElORSBaR0VUUlMoIFRSQU5TLCBOLCBOUkhTLCBBLCBMREEsIElQSVYsIEIsIExEQiwg\nSU5GTyApCioKKiAgLS0gTEFQQUNLIHJvdXRpbmUgKHZlcnNpb24gMy4zLjEpIC0tCiogIC0tIExB\nUEFDSyBpcyBhIHNvZnR3YXJlIHBhY2thZ2UgcHJvdmlkZWQgYnkgVW5pdi4gb2YgVGVubmVzc2Vl\nLCAgICAtLQoqICAtLSBVbml2LiBvZiBDYWxpZm9ybmlhIEJlcmtlbGV5LCBVbml2LiBvZiBDb2xv\ncmFkbyBEZW52ZXIgYW5kIE5BRyBMdGQuLi0tCiogIC0tIEFwcmlsIDIwMTEgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLQoqCiogICAgIC4uIFNj\nYWxhciBBcmd1bWVudHMgLi4KICAgICAgQ0hBUkFDVEVSICAgICAgICAgIFRSQU5TCiAgICAgIElO\nVEVHRVIgICAgICAgICAgICBJTkZPLCBMREEsIExEQiwgTiwgTlJIUwoqICAgICAuLgoqICAgICAu\nLiBBcnJheSBBcmd1bWVudHMgLi4KICAgICAgSU5URUdFUiAgICAgICAgICAgIElQSVYoICogKQog\nICAgICBDT01QTEVYKjE2ICAgICAgICAgQSggTERBLCAqICksIEIoIExEQiwgKiApCiogICAgIC4u\nCioKKiAgUHVycG9zZQoqICA9PT09PT09CioKKiAgWkdFVFJTIHNvbHZlcyBhIHN5c3RlbSBvZiBs\naW5lYXIgZXF1YXRpb25zCiogICAgIEEgKiBYID0gQiwgIEEqKlQgKiBYID0gQiwgIG9yICBBKipI\nICogWCA9IEIKKiAgd2l0aCBhIGdlbmVyYWwgTi1ieS1OIG1hdHJpeCBBIHVzaW5nIHRoZSBMVSBm\nYWN0b3JpemF0aW9uIGNvbXB1dGVkCiogIGJ5IFpHRVRSRi4KKgoqICBBcmd1bWVudHMKKiAgPT09\nPT09PT09CioKKiAgVFJBTlMgICAoaW5wdXQpIENIQVJBQ1RFUioxCiogICAgICAgICAgU3BlY2lm\naWVzIHRoZSBmb3JtIG9mIHRoZSBzeXN0ZW0gb2YgZXF1YXRpb25zOgoqICAgICAgICAgID0gJ04n\nOiAgQSAqIFggPSBCICAgICAoTm8gdHJhbnNwb3NlKQoqICAgICAgICAgID0gJ1QnOiAgQSoqVCAq\nIFggPSBCICAoVHJhbnNwb3NlKQoqICAgICAgICAgID0gJ0MnOiAgQSoqSCAqIFggPSBCICAoQ29u\nanVnYXRlIHRyYW5zcG9zZSkKKgoqICBOICAgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAg\nIFRoZSBvcmRlciBvZiB0aGUgbWF0cml4IEEuICBOID49IDAuCioKKiAgTlJIUyAgICAoaW5wdXQp\nIElOVEVHRVIKKiAgICAgICAgICBUaGUgbnVtYmVyIG9mIHJpZ2h0IGhhbmQgc2lkZXMsIGkuZS4s\nIHRoZSBudW1iZXIgb2YgY29sdW1ucwoqICAgICAgICAgIG9mIHRoZSBtYXRyaXggQi4gIE5SSFMg\nPj0gMC4KKgoqICBBICAgICAgIChpbnB1dCkgQ09NUExFWCoxNiBhcnJheSwgZGltZW5zaW9uIChM\nREEsTikKKiAgICAgICAgICBUaGUgZmFjdG9ycyBMIGFuZCBVIGZyb20gdGhlIGZhY3Rvcml6YXRp\nb24gQSA9IFAqTCpVCiogICAgICAgICAgYXMgY29tcHV0ZWQgYnkgWkdFVFJGLgoqCiogIExEQSAg\nICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRo\nZSBhcnJheSBBLiAgTERBID49IG1heCgxLE4pLgoqCiogIElQSVYgICAgKGlucHV0KSBJTlRFR0VS\nIGFycmF5LCBkaW1lbnNpb24gKE4pCiogICAgICAgICAgVGhlIHBpdm90IGluZGljZXMgZnJvbSBa\nR0VUUkY7IGZvciAxPD1pPD1OLCByb3cgaSBvZiB0aGUKKiAgICAgICAgICBtYXRyaXggd2FzIGlu\ndGVyY2hhbmdlZCB3aXRoIHJvdyBJUElWKGkpLgoqCiogIEIgICAgICAgKGlucHV0L291dHB1dCkg\nQ09NUExFWCoxNiBhcnJheSwgZGltZW5zaW9uIChMREIsTlJIUykKKiAgICAgICAgICBPbiBlbnRy\neSwgdGhlIHJpZ2h0IGhhbmQgc2lkZSBtYXRyaXggQi4KKiAgICAgICAgICBPbiBleGl0LCB0aGUg\nc29sdXRpb24gbWF0cml4IFguCioKKiAgTERCICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAg\nICBUaGUgbGVhZGluZyBkaW1lbnNpb24gb2YgdGhlIGFycmF5IEIuICBMREIgPj0gbWF4KDEsTiku\nCioKKiAgSU5GTyAgICAob3V0cHV0KSBJTlRFR0VSCiogICAgICAgICAgPSAwOiAgc3VjY2Vzc2Z1\nbCBleGl0CiogICAgICAgICAgPCAwOiAgaWYgSU5GTyA9IC1pLCB0aGUgaS10aCBhcmd1bWVudCBo\nYWQgYW4gaWxsZWdhbCB2YWx1ZQoqCnLSAwAAaIZohymBctMDAAB9ctQDAAAoaIqJaItojHViaJiK\nAggBaJlYDgAAAHpnZXRyc18yNjQudHh0ctUDAAB1YmibigIIAWicWAUAAABnZXRyc3LWAwAAaJiK\nATh1Ymh9aGFdaH6HUnLXAwAAfXLYAwAAKGiBWAcAAABnZW5lcmFsctkDAABog1gEAAAAYmFuZHLa\nAwAAaHFYLAAAAGNvbXB1dGF0aW9uYWwsIHNvbHZlIEEqWCA9IEIgdXNpbmcgTFUsIFRSQU5TctsD\nAABohmiHKYFy3AMAAH1y3QMAAChoioloi2iMdWJojVgsAAAAaHR0cDovL3d3dy5uZXRsaWIub3Jn\nL2xhcGFjay9zaW5nbGUvc2didHJzLmZy3gMAAGiPWAEAAABzaJBofWiRXWh+h1Jy3wMAAH1y4AMA\nACholFigCQAAICAgICAgU1VCUk9VVElORSBTR0JUUlMoIFRSQU5TLCBOLCBLTCwgS1UsIE5SSFMs\nIEFCLCBMREFCLCBJUElWLCBCLCBMREIsCiAgICAgJCAgICAgICAgICAgICAgICAgICBJTkZPICkK\nKgoqICAtLSBMQVBBQ0sgcm91dGluZSAodmVyc2lvbiAzLjIpIC0tCiogIC0tIExBUEFDSyBpcyBh\nIHNvZnR3YXJlIHBhY2thZ2UgcHJvdmlkZWQgYnkgVW5pdi4gb2YgVGVubmVzc2VlLCAgICAtLQoq\nICAtLSBVbml2LiBvZiBDYWxpZm9ybmlhIEJlcmtlbGV5LCBVbml2LiBvZiBDb2xvcmFkbyBEZW52\nZXIgYW5kIE5BRyBMdGQuLi0tCiogICAgIE5vdmVtYmVyIDIwMDYKKgoqICAgICAuLiBTY2FsYXIg\nQXJndW1lbnRzIC4uCiAgICAgIENIQVJBQ1RFUiAgICAgICAgICBUUkFOUwogICAgICBJTlRFR0VS\nICAgICAgICAgICAgSU5GTywgS0wsIEtVLCBMREFCLCBMREIsIE4sIE5SSFMKKiAgICAgLi4KKiAg\nICAgLi4gQXJyYXkgQXJndW1lbnRzIC4uCiAgICAgIElOVEVHRVIgICAgICAgICAgICBJUElWKCAq\nICkKICAgICAgUkVBTCAgICAgICAgICAgICAgIEFCKCBMREFCLCAqICksIEIoIExEQiwgKiApCiog\nICAgIC4uCioKKiAgUHVycG9zZQoqICA9PT09PT09CioKKiAgU0dCVFJTIHNvbHZlcyBhIHN5c3Rl\nbSBvZiBsaW5lYXIgZXF1YXRpb25zCiogICAgIEEgKiBYID0gQiAgb3IgIEEqKlQgKiBYID0gQgoq\nICB3aXRoIGEgZ2VuZXJhbCBiYW5kIG1hdHJpeCBBIHVzaW5nIHRoZSBMVSBmYWN0b3JpemF0aW9u\nIGNvbXB1dGVkCiogIGJ5IFNHQlRSRi4KKgoqICBBcmd1bWVudHMKKiAgPT09PT09PT09CioKKiAg\nVFJBTlMgICAoaW5wdXQpIENIQVJBQ1RFUioxCiogICAgICAgICAgU3BlY2lmaWVzIHRoZSBmb3Jt\nIG9mIHRoZSBzeXN0ZW0gb2YgZXF1YXRpb25zLgoqICAgICAgICAgID0gJ04nOiAgQSAqIFggPSBC\nICAoTm8gdHJhbnNwb3NlKQoqICAgICAgICAgID0gJ1QnOiAgQSoqVCogWCA9IEIgIChUcmFuc3Bv\nc2UpCiogICAgICAgICAgPSAnQyc6ICBBKipUKiBYID0gQiAgKENvbmp1Z2F0ZSB0cmFuc3Bvc2Ug\nPSBUcmFuc3Bvc2UpCioKKiAgTiAgICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUg\nb3JkZXIgb2YgdGhlIG1hdHJpeCBBLiAgTiA+PSAwLgoqCiogIEtMICAgICAgKGlucHV0KSBJTlRF\nR0VSCiogICAgICAgICAgVGhlIG51bWJlciBvZiBzdWJkaWFnb25hbHMgd2l0aGluIHRoZSBiYW5k\nIG9mIEEuICBLTCA+PSAwLgoqCiogIEtVICAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAg\nVGhlIG51bWJlciBvZiBzdXBlcmRpYWdvbmFscyB3aXRoaW4gdGhlIGJhbmQgb2YgQS4gIEtVID49\nIDAuCioKKiAgTlJIUyAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbnVtYmVyIG9m\nIHJpZ2h0IGhhbmQgc2lkZXMsIGkuZS4sIHRoZSBudW1iZXIgb2YgY29sdW1ucwoqICAgICAgICAg\nIG9mIHRoZSBtYXRyaXggQi4gIE5SSFMgPj0gMC4KKgoqICBBQiAgICAgIChpbnB1dCkgUkVBTCBh\ncnJheSwgZGltZW5zaW9uIChMREFCLE4pCiogICAgICAgICAgRGV0YWlscyBvZiB0aGUgTFUgZmFj\ndG9yaXphdGlvbiBvZiB0aGUgYmFuZCBtYXRyaXggQSwgYXMKKiAgICAgICAgICBjb21wdXRlZCBi\neSBTR0JUUkYuICBVIGlzIHN0b3JlZCBhcyBhbiB1cHBlciB0cmlhbmd1bGFyIGJhbmQKKiAgICAg\nICAgICBtYXRyaXggd2l0aCBLTCtLVSBzdXBlcmRpYWdvbmFscyBpbiByb3dzIDEgdG8gS0wrS1Ur\nMSwgYW5kCiogICAgICAgICAgdGhlIG11bHRpcGxpZXJzIHVzZWQgZHVyaW5nIHRoZSBmYWN0b3Jp\nemF0aW9uIGFyZSBzdG9yZWQgaW4KKiAgICAgICAgICByb3dzIEtMK0tVKzIgdG8gMipLTCtLVSsx\nLgoqCiogIExEQUIgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGlt\nZW5zaW9uIG9mIHRoZSBhcnJheSBBQi4gIExEQUIgPj0gMipLTCtLVSsxLgoqCiogIElQSVYgICAg\nKGlucHV0KSBJTlRFR0VSIGFycmF5LCBkaW1lbnNpb24gKE4pCiogICAgICAgICAgVGhlIHBpdm90\nIGluZGljZXM7IGZvciAxIDw9IGkgPD0gTiwgcm93IGkgb2YgdGhlIG1hdHJpeCB3YXMKKiAgICAg\nICAgICBpbnRlcmNoYW5nZWQgd2l0aCByb3cgSVBJVihpKS4KKgoqICBCICAgICAgIChpbnB1dC9v\ndXRwdXQpIFJFQUwgYXJyYXksIGRpbWVuc2lvbiAoTERCLE5SSFMpCiogICAgICAgICAgT24gZW50\ncnksIHRoZSByaWdodCBoYW5kIHNpZGUgbWF0cml4IEIuCiogICAgICAgICAgT24gZXhpdCwgdGhl\nIHNvbHV0aW9uIG1hdHJpeCBYLgoqCiogIExEQiAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAg\nICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBCLiAgTERCID49IG1heCgxLE4p\nLgoqCiogIElORk8gICAgKG91dHB1dCkgSU5URUdFUgoqICAgICAgICAgID0gMDogIHN1Y2Nlc3Nm\ndWwgZXhpdAoqICAgICAgICAgIDwgMDogaWYgSU5GTyA9IC1pLCB0aGUgaS10aCBhcmd1bWVudCBo\nYWQgYW4gaWxsZWdhbCB2YWx1ZQoqCnLhAwAAaIZohymBcuIDAAB9cuMDAAAoaIqJaItojHViaJiK\nAgkBaJlYDgAAAHNnYnRyc18yNjUudHh0cuQDAAB1YmibigIJAWicWAUAAABnYnRyc3LlAwAAaJiK\nATl1Ymh9aGFdaH6HUnLmAwAAfXLnAwAAKGiBWAcAAABnZW5lcmFscugDAABog1gEAAAAYmFuZHLp\nAwAAaHFYLAAAAGNvbXB1dGF0aW9uYWwsIHNvbHZlIEEqWCA9IEIgdXNpbmcgTFUsIFRSQU5TcuoD\nAABohmiHKYFy6wMAAH1y7AMAAChoioloi2iMdWJojVgsAAAAaHR0cDovL3d3dy5uZXRsaWIub3Jn\nL2xhcGFjay9kb3VibGUvZGdidHJzLmZy7QMAAGiPWAEAAABkaJBofWiRXWh+h1Jy7gMAAH1y7wMA\nACholFi4CQAAICAgICAgU1VCUk9VVElORSBER0JUUlMoIFRSQU5TLCBOLCBLTCwgS1UsIE5SSFMs\nIEFCLCBMREFCLCBJUElWLCBCLCBMREIsCiAgICAgJCAgICAgICAgICAgICAgICAgICBJTkZPICkK\nKgoqICAtLSBMQVBBQ0sgcm91dGluZSAodmVyc2lvbiAzLjIpIC0tCiogIC0tIExBUEFDSyBpcyBh\nIHNvZnR3YXJlIHBhY2thZ2UgcHJvdmlkZWQgYnkgVW5pdi4gb2YgVGVubmVzc2VlLCAgICAtLQoq\nICAtLSBVbml2LiBvZiBDYWxpZm9ybmlhIEJlcmtlbGV5LCBVbml2LiBvZiBDb2xvcmFkbyBEZW52\nZXIgYW5kIE5BRyBMdGQuLi0tCiogICAgIE5vdmVtYmVyIDIwMDYKKgoqICAgICAuLiBTY2FsYXIg\nQXJndW1lbnRzIC4uCiAgICAgIENIQVJBQ1RFUiAgICAgICAgICBUUkFOUwogICAgICBJTlRFR0VS\nICAgICAgICAgICAgSU5GTywgS0wsIEtVLCBMREFCLCBMREIsIE4sIE5SSFMKKiAgICAgLi4KKiAg\nICAgLi4gQXJyYXkgQXJndW1lbnRzIC4uCiAgICAgIElOVEVHRVIgICAgICAgICAgICBJUElWKCAq\nICkKICAgICAgRE9VQkxFIFBSRUNJU0lPTiAgIEFCKCBMREFCLCAqICksIEIoIExEQiwgKiApCiog\nICAgIC4uCioKKiAgUHVycG9zZQoqICA9PT09PT09CioKKiAgREdCVFJTIHNvbHZlcyBhIHN5c3Rl\nbSBvZiBsaW5lYXIgZXF1YXRpb25zCiogICAgIEEgKiBYID0gQiAgb3IgIEEqKlQgKiBYID0gQgoq\nICB3aXRoIGEgZ2VuZXJhbCBiYW5kIG1hdHJpeCBBIHVzaW5nIHRoZSBMVSBmYWN0b3JpemF0aW9u\nIGNvbXB1dGVkCiogIGJ5IERHQlRSRi4KKgoqICBBcmd1bWVudHMKKiAgPT09PT09PT09CioKKiAg\nVFJBTlMgICAoaW5wdXQpIENIQVJBQ1RFUioxCiogICAgICAgICAgU3BlY2lmaWVzIHRoZSBmb3Jt\nIG9mIHRoZSBzeXN0ZW0gb2YgZXF1YXRpb25zLgoqICAgICAgICAgID0gJ04nOiAgQSAqIFggPSBC\nICAoTm8gdHJhbnNwb3NlKQoqICAgICAgICAgID0gJ1QnOiAgQSoqVCogWCA9IEIgIChUcmFuc3Bv\nc2UpCiogICAgICAgICAgPSAnQyc6ICBBKipUKiBYID0gQiAgKENvbmp1Z2F0ZSB0cmFuc3Bvc2Ug\nPSBUcmFuc3Bvc2UpCioKKiAgTiAgICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUg\nb3JkZXIgb2YgdGhlIG1hdHJpeCBBLiAgTiA+PSAwLgoqCiogIEtMICAgICAgKGlucHV0KSBJTlRF\nR0VSCiogICAgICAgICAgVGhlIG51bWJlciBvZiBzdWJkaWFnb25hbHMgd2l0aGluIHRoZSBiYW5k\nIG9mIEEuICBLTCA+PSAwLgoqCiogIEtVICAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAg\nVGhlIG51bWJlciBvZiBzdXBlcmRpYWdvbmFscyB3aXRoaW4gdGhlIGJhbmQgb2YgQS4gIEtVID49\nIDAuCioKKiAgTlJIUyAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbnVtYmVyIG9m\nIHJpZ2h0IGhhbmQgc2lkZXMsIGkuZS4sIHRoZSBudW1iZXIgb2YgY29sdW1ucwoqICAgICAgICAg\nIG9mIHRoZSBtYXRyaXggQi4gIE5SSFMgPj0gMC4KKgoqICBBQiAgICAgIChpbnB1dCkgRE9VQkxF\nIFBSRUNJU0lPTiBhcnJheSwgZGltZW5zaW9uIChMREFCLE4pCiogICAgICAgICAgRGV0YWlscyBv\nZiB0aGUgTFUgZmFjdG9yaXphdGlvbiBvZiB0aGUgYmFuZCBtYXRyaXggQSwgYXMKKiAgICAgICAg\nICBjb21wdXRlZCBieSBER0JUUkYuICBVIGlzIHN0b3JlZCBhcyBhbiB1cHBlciB0cmlhbmd1bGFy\nIGJhbmQKKiAgICAgICAgICBtYXRyaXggd2l0aCBLTCtLVSBzdXBlcmRpYWdvbmFscyBpbiByb3dz\nIDEgdG8gS0wrS1UrMSwgYW5kCiogICAgICAgICAgdGhlIG11bHRpcGxpZXJzIHVzZWQgZHVyaW5n\nIHRoZSBmYWN0b3JpemF0aW9uIGFyZSBzdG9yZWQgaW4KKiAgICAgICAgICByb3dzIEtMK0tVKzIg\ndG8gMipLTCtLVSsxLgoqCiogIExEQUIgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhl\nIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBBQi4gIExEQUIgPj0gMipLTCtLVSsxLgoq\nCiogIElQSVYgICAgKGlucHV0KSBJTlRFR0VSIGFycmF5LCBkaW1lbnNpb24gKE4pCiogICAgICAg\nICAgVGhlIHBpdm90IGluZGljZXM7IGZvciAxIDw9IGkgPD0gTiwgcm93IGkgb2YgdGhlIG1hdHJp\neCB3YXMKKiAgICAgICAgICBpbnRlcmNoYW5nZWQgd2l0aCByb3cgSVBJVihpKS4KKgoqICBCICAg\nICAgIChpbnB1dC9vdXRwdXQpIERPVUJMRSBQUkVDSVNJT04gYXJyYXksIGRpbWVuc2lvbiAoTERC\nLE5SSFMpCiogICAgICAgICAgT24gZW50cnksIHRoZSByaWdodCBoYW5kIHNpZGUgbWF0cml4IEIu\nCiogICAgICAgICAgT24gZXhpdCwgdGhlIHNvbHV0aW9uIG1hdHJpeCBYLgoqCiogIExEQiAgICAg\nKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBh\ncnJheSBCLiAgTERCID49IG1heCgxLE4pLgoqCiogIElORk8gICAgKG91dHB1dCkgSU5URUdFUgoq\nICAgICAgICAgID0gMDogIHN1Y2Nlc3NmdWwgZXhpdAoqICAgICAgICAgIDwgMDogaWYgSU5GTyA9\nIC1pLCB0aGUgaS10aCBhcmd1bWVudCBoYWQgYW4gaWxsZWdhbCB2YWx1ZQoqCnLwAwAAaIZohymB\ncvEDAAB9cvIDAAAoaIqJaItojHViaJiKAgoBaJlYDgAAAGRnYnRyc18yNjYudHh0cvMDAAB1Ymib\nigIKAWicWAUAAABnYnRyc3L0AwAAaJiKATp1Ymh9aGFdaH6HUnL1AwAAfXL2AwAAKGiBWAcAAABn\nZW5lcmFscvcDAABog1gEAAAAYmFuZHL4AwAAaHFYLAAAAGNvbXB1dGF0aW9uYWwsIHNvbHZlIEEq\nWCA9IEIgdXNpbmcgTFUsIFRSQU5TcvkDAABohmiHKYFy+gMAAH1y+wMAAChoioloi2iMdWJojVgt\nAAAAaHR0cDovL3d3dy5uZXRsaWIub3JnL2xhcGFjay9jb21wbGV4L2NnYnRycy5mcvwDAABoj1gB\nAAAAY2iQaH1okV1ofodScv0DAAB9cv4DAAAoaJRYsAkAACAgICAgIFNVQlJPVVRJTkUgQ0dCVFJT\nKCBUUkFOUywgTiwgS0wsIEtVLCBOUkhTLCBBQiwgTERBQiwgSVBJViwgQiwgTERCLAogICAgICQg\nICAgICAgICAgICAgICAgICAgSU5GTyApCioKKiAgLS0gTEFQQUNLIHJvdXRpbmUgKHZlcnNpb24g\nMy4yKSAtLQoqICAtLSBMQVBBQ0sgaXMgYSBzb2Z0d2FyZSBwYWNrYWdlIHByb3ZpZGVkIGJ5IFVu\naXYuIG9mIFRlbm5lc3NlZSwgICAgLS0KKiAgLS0gVW5pdi4gb2YgQ2FsaWZvcm5pYSBCZXJrZWxl\neSwgVW5pdi4gb2YgQ29sb3JhZG8gRGVudmVyIGFuZCBOQUcgTHRkLi4tLQoqICAgICBOb3ZlbWJl\nciAyMDA2CioKKiAgICAgLi4gU2NhbGFyIEFyZ3VtZW50cyAuLgogICAgICBDSEFSQUNURVIgICAg\nICAgICAgVFJBTlMKICAgICAgSU5URUdFUiAgICAgICAgICAgIElORk8sIEtMLCBLVSwgTERBQiwg\nTERCLCBOLCBOUkhTCiogICAgIC4uCiogICAgIC4uIEFycmF5IEFyZ3VtZW50cyAuLgogICAgICBJ\nTlRFR0VSICAgICAgICAgICAgSVBJViggKiApCiAgICAgIENPTVBMRVggICAgICAgICAgICBBQigg\nTERBQiwgKiApLCBCKCBMREIsICogKQoqICAgICAuLgoqCiogIFB1cnBvc2UKKiAgPT09PT09PQoq\nCiogIENHQlRSUyBzb2x2ZXMgYSBzeXN0ZW0gb2YgbGluZWFyIGVxdWF0aW9ucwoqICAgICBBICog\nWCA9IEIsICBBKipUICogWCA9IEIsICBvciAgQSoqSCAqIFggPSBCCiogIHdpdGggYSBnZW5lcmFs\nIGJhbmQgbWF0cml4IEEgdXNpbmcgdGhlIExVIGZhY3Rvcml6YXRpb24gY29tcHV0ZWQKKiAgYnkg\nQ0dCVFJGLgoqCiogIEFyZ3VtZW50cwoqICA9PT09PT09PT0KKgoqICBUUkFOUyAgIChpbnB1dCkg\nQ0hBUkFDVEVSKjEKKiAgICAgICAgICBTcGVjaWZpZXMgdGhlIGZvcm0gb2YgdGhlIHN5c3RlbSBv\nZiBlcXVhdGlvbnMuCiogICAgICAgICAgPSAnTic6ICBBICogWCA9IEIgICAgIChObyB0cmFuc3Bv\nc2UpCiogICAgICAgICAgPSAnVCc6ICBBKipUICogWCA9IEIgIChUcmFuc3Bvc2UpCiogICAgICAg\nICAgPSAnQyc6ICBBKipIICogWCA9IEIgIChDb25qdWdhdGUgdHJhbnNwb3NlKQoqCiogIE4gICAg\nICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG9yZGVyIG9mIHRoZSBtYXRyaXggQS4g\nIE4gPj0gMC4KKgoqICBLTCAgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBudW1i\nZXIgb2Ygc3ViZGlhZ29uYWxzIHdpdGhpbiB0aGUgYmFuZCBvZiBBLiAgS0wgPj0gMC4KKgoqICBL\nVSAgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2Ygc3VwZXJkaWFn\nb25hbHMgd2l0aGluIHRoZSBiYW5kIG9mIEEuICBLVSA+PSAwLgoqCiogIE5SSFMgICAgKGlucHV0\nKSBJTlRFR0VSCiogICAgICAgICAgVGhlIG51bWJlciBvZiByaWdodCBoYW5kIHNpZGVzLCBpLmUu\nLCB0aGUgbnVtYmVyIG9mIGNvbHVtbnMKKiAgICAgICAgICBvZiB0aGUgbWF0cml4IEIuICBOUkhT\nID49IDAuCioKKiAgQUIgICAgICAoaW5wdXQpIENPTVBMRVggYXJyYXksIGRpbWVuc2lvbiAoTERB\nQixOKQoqICAgICAgICAgIERldGFpbHMgb2YgdGhlIExVIGZhY3Rvcml6YXRpb24gb2YgdGhlIGJh\nbmQgbWF0cml4IEEsIGFzCiogICAgICAgICAgY29tcHV0ZWQgYnkgQ0dCVFJGLiAgVSBpcyBzdG9y\nZWQgYXMgYW4gdXBwZXIgdHJpYW5ndWxhciBiYW5kCiogICAgICAgICAgbWF0cml4IHdpdGggS0wr\nS1Ugc3VwZXJkaWFnb25hbHMgaW4gcm93cyAxIHRvIEtMK0tVKzEsIGFuZAoqICAgICAgICAgIHRo\nZSBtdWx0aXBsaWVycyB1c2VkIGR1cmluZyB0aGUgZmFjdG9yaXphdGlvbiBhcmUgc3RvcmVkIGlu\nCiogICAgICAgICAgcm93cyBLTCtLVSsyIHRvIDIqS0wrS1UrMS4KKgoqICBMREFCICAgIChpbnB1\ndCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBsZWFkaW5nIGRpbWVuc2lvbiBvZiB0aGUgYXJyYXkg\nQUIuICBMREFCID49IDIqS0wrS1UrMS4KKgoqICBJUElWICAgIChpbnB1dCkgSU5URUdFUiBhcnJh\neSwgZGltZW5zaW9uIChOKQoqICAgICAgICAgIFRoZSBwaXZvdCBpbmRpY2VzOyBmb3IgMSA8PSBp\nIDw9IE4sIHJvdyBpIG9mIHRoZSBtYXRyaXggd2FzCiogICAgICAgICAgaW50ZXJjaGFuZ2VkIHdp\ndGggcm93IElQSVYoaSkuCioKKiAgQiAgICAgICAoaW5wdXQvb3V0cHV0KSBDT01QTEVYIGFycmF5\nLCBkaW1lbnNpb24gKExEQixOUkhTKQoqICAgICAgICAgIE9uIGVudHJ5LCB0aGUgcmlnaHQgaGFu\nZCBzaWRlIG1hdHJpeCBCLgoqICAgICAgICAgIE9uIGV4aXQsIHRoZSBzb2x1dGlvbiBtYXRyaXgg\nWC4KKgoqICBMREIgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBsZWFkaW5nIGRp\nbWVuc2lvbiBvZiB0aGUgYXJyYXkgQi4gIExEQiA+PSBtYXgoMSxOKS4KKgoqICBJTkZPICAgIChv\ndXRwdXQpIElOVEVHRVIKKiAgICAgICAgICA9IDA6ICBzdWNjZXNzZnVsIGV4aXQKKiAgICAgICAg\nICA8IDA6ICBpZiBJTkZPID0gLWksIHRoZSBpLXRoIGFyZ3VtZW50IGhhZCBhbiBpbGxlZ2FsIHZh\nbHVlCioKcv8DAABohmiHKYFyAAQAAH1yAQQAAChoioloi2iMdWJomIoCCwFomVgOAAAAY2didHJz\nXzI2Ny50eHRyAgQAAHViaJuKAgsBaJxYBQAAAGdidHJzcgMEAABomIoBO3ViaH1oYV1ofodScgQE\nAAB9cgUEAAAoaIFYBwAAAGdlbmVyYWxyBgQAAGiDWAQAAABiYW5kcgcEAABocVgsAAAAY29tcHV0\nYXRpb25hbCwgc29sdmUgQSpYID0gQiB1c2luZyBMVSwgVFJBTlNyCAQAAGiGaIcpgXIJBAAAfXIK\nBAAAKGiKiWiLaIx1YmiNWC8AAABodHRwOi8vd3d3Lm5ldGxpYi5vcmcvbGFwYWNrL2NvbXBsZXgx\nNi96Z2J0cnMuZnILBAAAaI9YAQAAAHpokGh9aJFdaH6HUnIMBAAAfXINBAAAKGiUWLYJAAAgICAg\nICBTVUJST1VUSU5FIFpHQlRSUyggVFJBTlMsIE4sIEtMLCBLVSwgTlJIUywgQUIsIExEQUIsIElQ\nSVYsIEIsIExEQiwKICAgICAkICAgICAgICAgICAgICAgICAgIElORk8gKQoqCiogIC0tIExBUEFD\nSyByb3V0aW5lICh2ZXJzaW9uIDMuMikgLS0KKiAgLS0gTEFQQUNLIGlzIGEgc29mdHdhcmUgcGFj\na2FnZSBwcm92aWRlZCBieSBVbml2LiBvZiBUZW5uZXNzZWUsICAgIC0tCiogIC0tIFVuaXYuIG9m\nIENhbGlmb3JuaWEgQmVya2VsZXksIFVuaXYuIG9mIENvbG9yYWRvIERlbnZlciBhbmQgTkFHIEx0\nZC4uLS0KKiAgICAgTm92ZW1iZXIgMjAwNgoqCiogICAgIC4uIFNjYWxhciBBcmd1bWVudHMgLi4K\nICAgICAgQ0hBUkFDVEVSICAgICAgICAgIFRSQU5TCiAgICAgIElOVEVHRVIgICAgICAgICAgICBJ\nTkZPLCBLTCwgS1UsIExEQUIsIExEQiwgTiwgTlJIUwoqICAgICAuLgoqICAgICAuLiBBcnJheSBB\ncmd1bWVudHMgLi4KICAgICAgSU5URUdFUiAgICAgICAgICAgIElQSVYoICogKQogICAgICBDT01Q\nTEVYKjE2ICAgICAgICAgQUIoIExEQUIsICogKSwgQiggTERCLCAqICkKKiAgICAgLi4KKgoqICBQ\ndXJwb3NlCiogID09PT09PT0KKgoqICBaR0JUUlMgc29sdmVzIGEgc3lzdGVtIG9mIGxpbmVhciBl\ncXVhdGlvbnMKKiAgICAgQSAqIFggPSBCLCAgQSoqVCAqIFggPSBCLCAgb3IgIEEqKkggKiBYID0g\nQgoqICB3aXRoIGEgZ2VuZXJhbCBiYW5kIG1hdHJpeCBBIHVzaW5nIHRoZSBMVSBmYWN0b3JpemF0\naW9uIGNvbXB1dGVkCiogIGJ5IFpHQlRSRi4KKgoqICBBcmd1bWVudHMKKiAgPT09PT09PT09CioK\nKiAgVFJBTlMgICAoaW5wdXQpIENIQVJBQ1RFUioxCiogICAgICAgICAgU3BlY2lmaWVzIHRoZSBm\nb3JtIG9mIHRoZSBzeXN0ZW0gb2YgZXF1YXRpb25zLgoqICAgICAgICAgID0gJ04nOiAgQSAqIFgg\nPSBCICAgICAoTm8gdHJhbnNwb3NlKQoqICAgICAgICAgID0gJ1QnOiAgQSoqVCAqIFggPSBCICAo\nVHJhbnNwb3NlKQoqICAgICAgICAgID0gJ0MnOiAgQSoqSCAqIFggPSBCICAoQ29uanVnYXRlIHRy\nYW5zcG9zZSkKKgoqICBOICAgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBvcmRl\nciBvZiB0aGUgbWF0cml4IEEuICBOID49IDAuCioKKiAgS0wgICAgICAoaW5wdXQpIElOVEVHRVIK\nKiAgICAgICAgICBUaGUgbnVtYmVyIG9mIHN1YmRpYWdvbmFscyB3aXRoaW4gdGhlIGJhbmQgb2Yg\nQS4gIEtMID49IDAuCioKKiAgS1UgICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUg\nbnVtYmVyIG9mIHN1cGVyZGlhZ29uYWxzIHdpdGhpbiB0aGUgYmFuZCBvZiBBLiAgS1UgPj0gMC4K\nKgoqICBOUkhTICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2Ygcmln\naHQgaGFuZCBzaWRlcywgaS5lLiwgdGhlIG51bWJlciBvZiBjb2x1bW5zCiogICAgICAgICAgb2Yg\ndGhlIG1hdHJpeCBCLiAgTlJIUyA+PSAwLgoqCiogIEFCICAgICAgKGlucHV0KSBDT01QTEVYKjE2\nIGFycmF5LCBkaW1lbnNpb24gKExEQUIsTikKKiAgICAgICAgICBEZXRhaWxzIG9mIHRoZSBMVSBm\nYWN0b3JpemF0aW9uIG9mIHRoZSBiYW5kIG1hdHJpeCBBLCBhcwoqICAgICAgICAgIGNvbXB1dGVk\nIGJ5IFpHQlRSRi4gIFUgaXMgc3RvcmVkIGFzIGFuIHVwcGVyIHRyaWFuZ3VsYXIgYmFuZAoqICAg\nICAgICAgIG1hdHJpeCB3aXRoIEtMK0tVIHN1cGVyZGlhZ29uYWxzIGluIHJvd3MgMSB0byBLTCtL\nVSsxLCBhbmQKKiAgICAgICAgICB0aGUgbXVsdGlwbGllcnMgdXNlZCBkdXJpbmcgdGhlIGZhY3Rv\ncml6YXRpb24gYXJlIHN0b3JlZCBpbgoqICAgICAgICAgIHJvd3MgS0wrS1UrMiB0byAyKktMK0tV\nKzEuCioKKiAgTERBQiAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbGVhZGluZyBk\naW1lbnNpb24gb2YgdGhlIGFycmF5IEFCLiAgTERBQiA+PSAyKktMK0tVKzEuCioKKiAgSVBJViAg\nICAoaW5wdXQpIElOVEVHRVIgYXJyYXksIGRpbWVuc2lvbiAoTikKKiAgICAgICAgICBUaGUgcGl2\nb3QgaW5kaWNlczsgZm9yIDEgPD0gaSA8PSBOLCByb3cgaSBvZiB0aGUgbWF0cml4IHdhcwoqICAg\nICAgICAgIGludGVyY2hhbmdlZCB3aXRoIHJvdyBJUElWKGkpLgoqCiogIEIgICAgICAgKGlucHV0\nL291dHB1dCkgQ09NUExFWCoxNiBhcnJheSwgZGltZW5zaW9uIChMREIsTlJIUykKKiAgICAgICAg\nICBPbiBlbnRyeSwgdGhlIHJpZ2h0IGhhbmQgc2lkZSBtYXRyaXggQi4KKiAgICAgICAgICBPbiBl\neGl0LCB0aGUgc29sdXRpb24gbWF0cml4IFguCioKKiAgTERCICAgICAoaW5wdXQpIElOVEVHRVIK\nKiAgICAgICAgICBUaGUgbGVhZGluZyBkaW1lbnNpb24gb2YgdGhlIGFycmF5IEIuICBMREIgPj0g\nbWF4KDEsTikuCioKKiAgSU5GTyAgICAob3V0cHV0KSBJTlRFR0VSCiogICAgICAgICAgPSAwOiAg\nc3VjY2Vzc2Z1bCBleGl0CiogICAgICAgICAgPCAwOiAgaWYgSU5GTyA9IC1pLCB0aGUgaS10aCBh\ncmd1bWVudCBoYWQgYW4gaWxsZWdhbCB2YWx1ZQoqCnIOBAAAaIZohymBcg8EAAB9chAEAAAoaIqJ\naItojHViaJiKAgwBaJlYDgAAAHpnYnRyc18yNjgudHh0chEEAAB1YmibigIMAWicWAUAAABnYnRy\nc3ISBAAAaJiKATx1Ymh9aGFdaH6HUnITBAAAfXIUBAAAKGiBWAcAAABnZW5lcmFschUEAABog1gL\nAAAAdHJpZGlhZ29uYWxyFgQAAGhxWCwAAABjb21wdXRhdGlvbmFsLCBzb2x2ZSBBKlggPSBCIHVz\naW5nIExVLCBUUkFOU3IXBAAAaIZohymBchgEAAB9chkEAAAoaIqJaItojHViaI1YLAAAAGh0dHA6\nLy93d3cubmV0bGliLm9yZy9sYXBhY2svc2luZ2xlL3NndHRycy5mchoEAABoj1gBAAAAc2iQaH1o\nkV1ofodSchsEAAB9chwEAAAoaJRYrgkAACAgICAgIFNVQlJPVVRJTkUgU0dUVFJTKCBUUkFOUywg\nTiwgTlJIUywgREwsIEQsIERVLCBEVTIsIElQSVYsIEIsIExEQiwKICAgICAkICAgICAgICAgICAg\nICAgICAgIElORk8gKQoqCiogIC0tIExBUEFDSyByb3V0aW5lICh2ZXJzaW9uIDMuMikgLS0KKiAg\nLS0gTEFQQUNLIGlzIGEgc29mdHdhcmUgcGFja2FnZSBwcm92aWRlZCBieSBVbml2LiBvZiBUZW5u\nZXNzZWUsICAgIC0tCiogIC0tIFVuaXYuIG9mIENhbGlmb3JuaWEgQmVya2VsZXksIFVuaXYuIG9m\nIENvbG9yYWRvIERlbnZlciBhbmQgTkFHIEx0ZC4uLS0KKiAgICAgTm92ZW1iZXIgMjAwNgoqCiog\nICAgIC4uIFNjYWxhciBBcmd1bWVudHMgLi4KICAgICAgQ0hBUkFDVEVSICAgICAgICAgIFRSQU5T\nCiAgICAgIElOVEVHRVIgICAgICAgICAgICBJTkZPLCBMREIsIE4sIE5SSFMKKiAgICAgLi4KKiAg\nICAgLi4gQXJyYXkgQXJndW1lbnRzIC4uCiAgICAgIElOVEVHRVIgICAgICAgICAgICBJUElWKCAq\nICkKICAgICAgUkVBTCAgICAgICAgICAgICAgIEIoIExEQiwgKiApLCBEKCAqICksIERMKCAqICks\nIERVKCAqICksIERVMiggKiApCiogICAgIC4uCioKKiAgUHVycG9zZQoqICA9PT09PT09CioKKiAg\nU0dUVFJTIHNvbHZlcyBvbmUgb2YgdGhlIHN5c3RlbXMgb2YgZXF1YXRpb25zCiogICAgIEEqWCA9\nIEIgIG9yICBBKipUKlggPSBCLAoqICB3aXRoIGEgdHJpZGlhZ29uYWwgbWF0cml4IEEgdXNpbmcg\ndGhlIExVIGZhY3Rvcml6YXRpb24gY29tcHV0ZWQKKiAgYnkgU0dUVFJGLgoqCiogIEFyZ3VtZW50\ncwoqICA9PT09PT09PT0KKgoqICBUUkFOUyAgIChpbnB1dCkgQ0hBUkFDVEVSKjEKKiAgICAgICAg\nICBTcGVjaWZpZXMgdGhlIGZvcm0gb2YgdGhlIHN5c3RlbSBvZiBlcXVhdGlvbnMuCiogICAgICAg\nICAgPSAnTic6ICBBICogWCA9IEIgIChObyB0cmFuc3Bvc2UpCiogICAgICAgICAgPSAnVCc6ICBB\nKipUKiBYID0gQiAgKFRyYW5zcG9zZSkKKiAgICAgICAgICA9ICdDJzogIEEqKlQqIFggPSBCICAo\nQ29uanVnYXRlIHRyYW5zcG9zZSA9IFRyYW5zcG9zZSkKKgoqICBOICAgICAgIChpbnB1dCkgSU5U\nRUdFUgoqICAgICAgICAgIFRoZSBvcmRlciBvZiB0aGUgbWF0cml4IEEuCioKKiAgTlJIUyAgICAo\naW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbnVtYmVyIG9mIHJpZ2h0IGhhbmQgc2lkZXMs\nIGkuZS4sIHRoZSBudW1iZXIgb2YgY29sdW1ucwoqICAgICAgICAgIG9mIHRoZSBtYXRyaXggQi4g\nIE5SSFMgPj0gMC4KKgoqICBETCAgICAgIChpbnB1dCkgUkVBTCBhcnJheSwgZGltZW5zaW9uIChO\nLTEpCiogICAgICAgICAgVGhlIChuLTEpIG11bHRpcGxpZXJzIHRoYXQgZGVmaW5lIHRoZSBtYXRy\naXggTCBmcm9tIHRoZQoqICAgICAgICAgIExVIGZhY3Rvcml6YXRpb24gb2YgQS4KKgoqICBEICAg\nICAgIChpbnB1dCkgUkVBTCBhcnJheSwgZGltZW5zaW9uIChOKQoqICAgICAgICAgIFRoZSBuIGRp\nYWdvbmFsIGVsZW1lbnRzIG9mIHRoZSB1cHBlciB0cmlhbmd1bGFyIG1hdHJpeCBVIGZyb20KKiAg\nICAgICAgICB0aGUgTFUgZmFjdG9yaXphdGlvbiBvZiBBLgoqCiogIERVICAgICAgKGlucHV0KSBS\nRUFMIGFycmF5LCBkaW1lbnNpb24gKE4tMSkKKiAgICAgICAgICBUaGUgKG4tMSkgZWxlbWVudHMg\nb2YgdGhlIGZpcnN0IHN1cGVyLWRpYWdvbmFsIG9mIFUuCioKKiAgRFUyICAgICAoaW5wdXQpIFJF\nQUwgYXJyYXksIGRpbWVuc2lvbiAoTi0yKQoqICAgICAgICAgIFRoZSAobi0yKSBlbGVtZW50cyBv\nZiB0aGUgc2Vjb25kIHN1cGVyLWRpYWdvbmFsIG9mIFUuCioKKiAgSVBJViAgICAoaW5wdXQpIElO\nVEVHRVIgYXJyYXksIGRpbWVuc2lvbiAoTikKKiAgICAgICAgICBUaGUgcGl2b3QgaW5kaWNlczsg\nZm9yIDEgPD0gaSA8PSBuLCByb3cgaSBvZiB0aGUgbWF0cml4IHdhcwoqICAgICAgICAgIGludGVy\nY2hhbmdlZCB3aXRoIHJvdyBJUElWKGkpLiAgSVBJVihpKSB3aWxsIGFsd2F5cyBiZSBlaXRoZXIK\nKiAgICAgICAgICBpIG9yIGkrMTsgSVBJVihpKSA9IGkgaW5kaWNhdGVzIGEgcm93IGludGVyY2hh\nbmdlIHdhcyBub3QKKiAgICAgICAgICByZXF1aXJlZC4KKgoqICBCICAgICAgIChpbnB1dC9vdXRw\ndXQpIFJFQUwgYXJyYXksIGRpbWVuc2lvbiAoTERCLE5SSFMpCiogICAgICAgICAgT24gZW50cnks\nIHRoZSBtYXRyaXggb2YgcmlnaHQgaGFuZCBzaWRlIHZlY3RvcnMgQi4KKiAgICAgICAgICBPbiBl\neGl0LCBCIGlzIG92ZXJ3cml0dGVuIGJ5IHRoZSBzb2x1dGlvbiB2ZWN0b3JzIFguCioKKiAgTERC\nICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbGVhZGluZyBkaW1lbnNpb24gb2Yg\ndGhlIGFycmF5IEIuICBMREIgPj0gbWF4KDEsTikuCioKKiAgSU5GTyAgICAob3V0cHV0KSBJTlRF\nR0VSCiogICAgICAgICAgPSAwOiAgc3VjY2Vzc2Z1bCBleGl0CiogICAgICAgICAgPCAwOiAgaWYg\nSU5GTyA9IC1pLCB0aGUgaS10aCBhcmd1bWVudCBoYWQgYW4gaWxsZWdhbCB2YWx1ZQoqCnIdBAAA\naIZohymBch4EAAB9ch8EAAAoaIqJaItojHViaJiKAg0BaJlYDgAAAHNndHRyc18yNjkudHh0ciAE\nAAB1YmibigINAWicWAUAAABndHRyc3IhBAAAaJiKAT11Ymh9aGFdaH6HUnIiBAAAfXIjBAAAKGiB\nWAcAAABnZW5lcmFsciQEAABog1gLAAAAdHJpZGlhZ29uYWxyJQQAAGhxWCwAAABjb21wdXRhdGlv\nbmFsLCBzb2x2ZSBBKlggPSBCIHVzaW5nIExVLCBUUkFOU3ImBAAAaIZohymBcicEAAB9cigEAAAo\naIqJaItojHViaI1YLAAAAGh0dHA6Ly93d3cubmV0bGliLm9yZy9sYXBhY2svZG91YmxlL2RndHRy\ncy5mcikEAABoj1gBAAAAZGiQaH1okV1ofodScioEAAB9cisEAAAoaJRY6gkAACAgICAgIFNVQlJP\nVVRJTkUgREdUVFJTKCBUUkFOUywgTiwgTlJIUywgREwsIEQsIERVLCBEVTIsIElQSVYsIEIsIExE\nQiwKICAgICAkICAgICAgICAgICAgICAgICAgIElORk8gKQoqCiogIC0tIExBUEFDSyByb3V0aW5l\nICh2ZXJzaW9uIDMuMikgLS0KKiAgLS0gTEFQQUNLIGlzIGEgc29mdHdhcmUgcGFja2FnZSBwcm92\naWRlZCBieSBVbml2LiBvZiBUZW5uZXNzZWUsICAgIC0tCiogIC0tIFVuaXYuIG9mIENhbGlmb3Ju\naWEgQmVya2VsZXksIFVuaXYuIG9mIENvbG9yYWRvIERlbnZlciBhbmQgTkFHIEx0ZC4uLS0KKiAg\nICAgTm92ZW1iZXIgMjAwNgoqCiogICAgIC4uIFNjYWxhciBBcmd1bWVudHMgLi4KICAgICAgQ0hB\nUkFDVEVSICAgICAgICAgIFRSQU5TCiAgICAgIElOVEVHRVIgICAgICAgICAgICBJTkZPLCBMREIs\nIE4sIE5SSFMKKiAgICAgLi4KKiAgICAgLi4gQXJyYXkgQXJndW1lbnRzIC4uCiAgICAgIElOVEVH\nRVIgICAgICAgICAgICBJUElWKCAqICkKICAgICAgRE9VQkxFIFBSRUNJU0lPTiAgIEIoIExEQiwg\nKiApLCBEKCAqICksIERMKCAqICksIERVKCAqICksIERVMiggKiApCiogICAgIC4uCioKKiAgUHVy\ncG9zZQoqICA9PT09PT09CioKKiAgREdUVFJTIHNvbHZlcyBvbmUgb2YgdGhlIHN5c3RlbXMgb2Yg\nZXF1YXRpb25zCiogICAgIEEqWCA9IEIgIG9yICBBKipUKlggPSBCLAoqICB3aXRoIGEgdHJpZGlh\nZ29uYWwgbWF0cml4IEEgdXNpbmcgdGhlIExVIGZhY3Rvcml6YXRpb24gY29tcHV0ZWQKKiAgYnkg\nREdUVFJGLgoqCiogIEFyZ3VtZW50cwoqICA9PT09PT09PT0KKgoqICBUUkFOUyAgIChpbnB1dCkg\nQ0hBUkFDVEVSKjEKKiAgICAgICAgICBTcGVjaWZpZXMgdGhlIGZvcm0gb2YgdGhlIHN5c3RlbSBv\nZiBlcXVhdGlvbnMuCiogICAgICAgICAgPSAnTic6ICBBICogWCA9IEIgIChObyB0cmFuc3Bvc2Up\nCiogICAgICAgICAgPSAnVCc6ICBBKipUKiBYID0gQiAgKFRyYW5zcG9zZSkKKiAgICAgICAgICA9\nICdDJzogIEEqKlQqIFggPSBCICAoQ29uanVnYXRlIHRyYW5zcG9zZSA9IFRyYW5zcG9zZSkKKgoq\nICBOICAgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBvcmRlciBvZiB0aGUgbWF0\ncml4IEEuCioKKiAgTlJIUyAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbnVtYmVy\nIG9mIHJpZ2h0IGhhbmQgc2lkZXMsIGkuZS4sIHRoZSBudW1iZXIgb2YgY29sdW1ucwoqICAgICAg\nICAgIG9mIHRoZSBtYXRyaXggQi4gIE5SSFMgPj0gMC4KKgoqICBETCAgICAgIChpbnB1dCkgRE9V\nQkxFIFBSRUNJU0lPTiBhcnJheSwgZGltZW5zaW9uIChOLTEpCiogICAgICAgICAgVGhlIChuLTEp\nIG11bHRpcGxpZXJzIHRoYXQgZGVmaW5lIHRoZSBtYXRyaXggTCBmcm9tIHRoZQoqICAgICAgICAg\nIExVIGZhY3Rvcml6YXRpb24gb2YgQS4KKgoqICBEICAgICAgIChpbnB1dCkgRE9VQkxFIFBSRUNJ\nU0lPTiBhcnJheSwgZGltZW5zaW9uIChOKQoqICAgICAgICAgIFRoZSBuIGRpYWdvbmFsIGVsZW1l\nbnRzIG9mIHRoZSB1cHBlciB0cmlhbmd1bGFyIG1hdHJpeCBVIGZyb20KKiAgICAgICAgICB0aGUg\nTFUgZmFjdG9yaXphdGlvbiBvZiBBLgoqCiogIERVICAgICAgKGlucHV0KSBET1VCTEUgUFJFQ0lT\nSU9OIGFycmF5LCBkaW1lbnNpb24gKE4tMSkKKiAgICAgICAgICBUaGUgKG4tMSkgZWxlbWVudHMg\nb2YgdGhlIGZpcnN0IHN1cGVyLWRpYWdvbmFsIG9mIFUuCioKKiAgRFUyICAgICAoaW5wdXQpIERP\nVUJMRSBQUkVDSVNJT04gYXJyYXksIGRpbWVuc2lvbiAoTi0yKQoqICAgICAgICAgIFRoZSAobi0y\nKSBlbGVtZW50cyBvZiB0aGUgc2Vjb25kIHN1cGVyLWRpYWdvbmFsIG9mIFUuCioKKiAgSVBJViAg\nICAoaW5wdXQpIElOVEVHRVIgYXJyYXksIGRpbWVuc2lvbiAoTikKKiAgICAgICAgICBUaGUgcGl2\nb3QgaW5kaWNlczsgZm9yIDEgPD0gaSA8PSBuLCByb3cgaSBvZiB0aGUgbWF0cml4IHdhcwoqICAg\nICAgICAgIGludGVyY2hhbmdlZCB3aXRoIHJvdyBJUElWKGkpLiAgSVBJVihpKSB3aWxsIGFsd2F5\ncyBiZSBlaXRoZXIKKiAgICAgICAgICBpIG9yIGkrMTsgSVBJVihpKSA9IGkgaW5kaWNhdGVzIGEg\ncm93IGludGVyY2hhbmdlIHdhcyBub3QKKiAgICAgICAgICByZXF1aXJlZC4KKgoqICBCICAgICAg\nIChpbnB1dC9vdXRwdXQpIERPVUJMRSBQUkVDSVNJT04gYXJyYXksIGRpbWVuc2lvbiAoTERCLE5S\nSFMpCiogICAgICAgICAgT24gZW50cnksIHRoZSBtYXRyaXggb2YgcmlnaHQgaGFuZCBzaWRlIHZl\nY3RvcnMgQi4KKiAgICAgICAgICBPbiBleGl0LCBCIGlzIG92ZXJ3cml0dGVuIGJ5IHRoZSBzb2x1\ndGlvbiB2ZWN0b3JzIFguCioKKiAgTERCICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBU\naGUgbGVhZGluZyBkaW1lbnNpb24gb2YgdGhlIGFycmF5IEIuICBMREIgPj0gbWF4KDEsTikuCioK\nKiAgSU5GTyAgICAob3V0cHV0KSBJTlRFR0VSCiogICAgICAgICAgPSAwOiAgc3VjY2Vzc2Z1bCBl\neGl0CiogICAgICAgICAgPCAwOiAgaWYgSU5GTyA9IC1pLCB0aGUgaS10aCBhcmd1bWVudCBoYWQg\nYW4gaWxsZWdhbCB2YWx1ZQoqCnIsBAAAaIZohymBci0EAAB9ci4EAAAoaIqJaItojHViaJiKAg4B\naJlYDgAAAGRndHRyc18yNzAudHh0ci8EAAB1YmibigIOAWicWAUAAABndHRyc3IwBAAAaJiKAT51\nYmh9aGFdaH6HUnIxBAAAfXIyBAAAKGiBWAcAAABnZW5lcmFscjMEAABog1gLAAAAdHJpZGlhZ29u\nYWxyNAQAAGhxWCwAAABjb21wdXRhdGlvbmFsLCBzb2x2ZSBBKlggPSBCIHVzaW5nIExVLCBUUkFO\nU3I1BAAAaIZohymBcjYEAAB9cjcEAAAoaIqJaItojHViaI1YLQAAAGh0dHA6Ly93d3cubmV0bGli\nLm9yZy9sYXBhY2svY29tcGxleC9jZ3R0cnMuZnI4BAAAaI9YAQAAAGNokGh9aJFdaH6HUnI5BAAA\nfXI6BAAAKGiUWMoJAAAgICAgICBTVUJST1VUSU5FIENHVFRSUyggVFJBTlMsIE4sIE5SSFMsIERM\nLCBELCBEVSwgRFUyLCBJUElWLCBCLCBMREIsCiAgICAgJCAgICAgICAgICAgICAgICAgICBJTkZP\nICkKKgoqICAtLSBMQVBBQ0sgcm91dGluZSAodmVyc2lvbiAzLjIpIC0tCiogIC0tIExBUEFDSyBp\ncyBhIHNvZnR3YXJlIHBhY2thZ2UgcHJvdmlkZWQgYnkgVW5pdi4gb2YgVGVubmVzc2VlLCAgICAt\nLQoqICAtLSBVbml2LiBvZiBDYWxpZm9ybmlhIEJlcmtlbGV5LCBVbml2LiBvZiBDb2xvcmFkbyBE\nZW52ZXIgYW5kIE5BRyBMdGQuLi0tCiogICAgIE5vdmVtYmVyIDIwMDYKKgoqICAgICAuLiBTY2Fs\nYXIgQXJndW1lbnRzIC4uCiAgICAgIENIQVJBQ1RFUiAgICAgICAgICBUUkFOUwogICAgICBJTlRF\nR0VSICAgICAgICAgICAgSU5GTywgTERCLCBOLCBOUkhTCiogICAgIC4uCiogICAgIC4uIEFycmF5\nIEFyZ3VtZW50cyAuLgogICAgICBJTlRFR0VSICAgICAgICAgICAgSVBJViggKiApCiAgICAgIENP\nTVBMRVggICAgICAgICAgICBCKCBMREIsICogKSwgRCggKiApLCBETCggKiApLCBEVSggKiApLCBE\nVTIoICogKQoqICAgICAuLgoqCiogIFB1cnBvc2UKKiAgPT09PT09PQoqCiogIENHVFRSUyBzb2x2\nZXMgb25lIG9mIHRoZSBzeXN0ZW1zIG9mIGVxdWF0aW9ucwoqICAgICBBICogWCA9IEIsICBBKipU\nICogWCA9IEIsICBvciAgQSoqSCAqIFggPSBCLAoqICB3aXRoIGEgdHJpZGlhZ29uYWwgbWF0cml4\nIEEgdXNpbmcgdGhlIExVIGZhY3Rvcml6YXRpb24gY29tcHV0ZWQKKiAgYnkgQ0dUVFJGLgoqCiog\nIEFyZ3VtZW50cwoqICA9PT09PT09PT0KKgoqICBUUkFOUyAgIChpbnB1dCkgQ0hBUkFDVEVSKjEK\nKiAgICAgICAgICBTcGVjaWZpZXMgdGhlIGZvcm0gb2YgdGhlIHN5c3RlbSBvZiBlcXVhdGlvbnMu\nCiogICAgICAgICAgPSAnTic6ICBBICogWCA9IEIgICAgIChObyB0cmFuc3Bvc2UpCiogICAgICAg\nICAgPSAnVCc6ICBBKipUICogWCA9IEIgIChUcmFuc3Bvc2UpCiogICAgICAgICAgPSAnQyc6ICBB\nKipIICogWCA9IEIgIChDb25qdWdhdGUgdHJhbnNwb3NlKQoqCiogIE4gICAgICAgKGlucHV0KSBJ\nTlRFR0VSCiogICAgICAgICAgVGhlIG9yZGVyIG9mIHRoZSBtYXRyaXggQS4KKgoqICBOUkhTICAg\nIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2YgcmlnaHQgaGFuZCBzaWRl\ncywgaS5lLiwgdGhlIG51bWJlciBvZiBjb2x1bW5zCiogICAgICAgICAgb2YgdGhlIG1hdHJpeCBC\nLiAgTlJIUyA+PSAwLgoqCiogIERMICAgICAgKGlucHV0KSBDT01QTEVYIGFycmF5LCBkaW1lbnNp\nb24gKE4tMSkKKiAgICAgICAgICBUaGUgKG4tMSkgbXVsdGlwbGllcnMgdGhhdCBkZWZpbmUgdGhl\nIG1hdHJpeCBMIGZyb20gdGhlCiogICAgICAgICAgTFUgZmFjdG9yaXphdGlvbiBvZiBBLgoqCiog\nIEQgICAgICAgKGlucHV0KSBDT01QTEVYIGFycmF5LCBkaW1lbnNpb24gKE4pCiogICAgICAgICAg\nVGhlIG4gZGlhZ29uYWwgZWxlbWVudHMgb2YgdGhlIHVwcGVyIHRyaWFuZ3VsYXIgbWF0cml4IFUg\nZnJvbQoqICAgICAgICAgIHRoZSBMVSBmYWN0b3JpemF0aW9uIG9mIEEuCioKKiAgRFUgICAgICAo\naW5wdXQpIENPTVBMRVggYXJyYXksIGRpbWVuc2lvbiAoTi0xKQoqICAgICAgICAgIFRoZSAobi0x\nKSBlbGVtZW50cyBvZiB0aGUgZmlyc3Qgc3VwZXItZGlhZ29uYWwgb2YgVS4KKgoqICBEVTIgICAg\nIChpbnB1dCkgQ09NUExFWCBhcnJheSwgZGltZW5zaW9uIChOLTIpCiogICAgICAgICAgVGhlIChu\nLTIpIGVsZW1lbnRzIG9mIHRoZSBzZWNvbmQgc3VwZXItZGlhZ29uYWwgb2YgVS4KKgoqICBJUElW\nICAgIChpbnB1dCkgSU5URUdFUiBhcnJheSwgZGltZW5zaW9uIChOKQoqICAgICAgICAgIFRoZSBw\naXZvdCBpbmRpY2VzOyBmb3IgMSA8PSBpIDw9IG4sIHJvdyBpIG9mIHRoZSBtYXRyaXggd2FzCiog\nICAgICAgICAgaW50ZXJjaGFuZ2VkIHdpdGggcm93IElQSVYoaSkuICBJUElWKGkpIHdpbGwgYWx3\nYXlzIGJlIGVpdGhlcgoqICAgICAgICAgIGkgb3IgaSsxOyBJUElWKGkpID0gaSBpbmRpY2F0ZXMg\nYSByb3cgaW50ZXJjaGFuZ2Ugd2FzIG5vdAoqICAgICAgICAgIHJlcXVpcmVkLgoqCiogIEIgICAg\nICAgKGlucHV0L291dHB1dCkgQ09NUExFWCBhcnJheSwgZGltZW5zaW9uIChMREIsTlJIUykKKiAg\nICAgICAgICBPbiBlbnRyeSwgdGhlIG1hdHJpeCBvZiByaWdodCBoYW5kIHNpZGUgdmVjdG9ycyBC\nLgoqICAgICAgICAgIE9uIGV4aXQsIEIgaXMgb3ZlcndyaXR0ZW4gYnkgdGhlIHNvbHV0aW9uIHZl\nY3RvcnMgWC4KKgoqICBMREIgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBsZWFk\naW5nIGRpbWVuc2lvbiBvZiB0aGUgYXJyYXkgQi4gIExEQiA+PSBtYXgoMSxOKS4KKgoqICBJTkZP\nICAgIChvdXRwdXQpIElOVEVHRVIKKiAgICAgICAgICA9IDA6ICBzdWNjZXNzZnVsIGV4aXQKKiAg\nICAgICAgICA8IDA6ICBpZiBJTkZPID0gLWssIHRoZSBrLXRoIGFyZ3VtZW50IGhhZCBhbiBpbGxl\nZ2FsIHZhbHVlCioKcjsEAABohmiHKYFyPAQAAH1yPQQAAChoioloi2iMdWJomIoCDwFomVgOAAAA\nY2d0dHJzXzI3MS50eHRyPgQAAHViaJuKAg8BaJxYBQAAAGd0dHJzcj8EAABomIoBP3ViaH1oYV1o\nfodSckAEAAB9ckEEAAAoaIFYBwAAAGdlbmVyYWxyQgQAAGiDWAsAAAB0cmlkaWFnb25hbHJDBAAA\naHFYLAAAAGNvbXB1dGF0aW9uYWwsIHNvbHZlIEEqWCA9IEIgdXNpbmcgTFUsIFRSQU5TckQEAABo\nhmiHKYFyRQQAAH1yRgQAAChoioloi2iMdWJojVgvAAAAaHR0cDovL3d3dy5uZXRsaWIub3JnL2xh\ncGFjay9jb21wbGV4MTYvemd0dHJzLmZyRwQAAGiPWAEAAAB6aJBofWiRXWh+h1JySAQAAH1ySQQA\nACholFjZCQAAICAgICAgU1VCUk9VVElORSBaR1RUUlMoIFRSQU5TLCBOLCBOUkhTLCBETCwgRCwg\nRFUsIERVMiwgSVBJViwgQiwgTERCLAogICAgICQgICAgICAgICAgICAgICAgICAgSU5GTyApCioK\nKiAgLS0gTEFQQUNLIHJvdXRpbmUgKHZlcnNpb24gMy4yKSAtLQoqICAtLSBMQVBBQ0sgaXMgYSBz\nb2Z0d2FyZSBwYWNrYWdlIHByb3ZpZGVkIGJ5IFVuaXYuIG9mIFRlbm5lc3NlZSwgICAgLS0KKiAg\nLS0gVW5pdi4gb2YgQ2FsaWZvcm5pYSBCZXJrZWxleSwgVW5pdi4gb2YgQ29sb3JhZG8gRGVudmVy\nIGFuZCBOQUcgTHRkLi4tLQoqICAgICBOb3ZlbWJlciAyMDA2CioKKiAgICAgLi4gU2NhbGFyIEFy\nZ3VtZW50cyAuLgogICAgICBDSEFSQUNURVIgICAgICAgICAgVFJBTlMKICAgICAgSU5URUdFUiAg\nICAgICAgICAgIElORk8sIExEQiwgTiwgTlJIUwoqICAgICAuLgoqICAgICAuLiBBcnJheSBBcmd1\nbWVudHMgLi4KICAgICAgSU5URUdFUiAgICAgICAgICAgIElQSVYoICogKQogICAgICBDT01QTEVY\nKjE2ICAgICAgICAgQiggTERCLCAqICksIEQoICogKSwgREwoICogKSwgRFUoICogKSwgRFUyKCAq\nICkKKiAgICAgLi4KKgoqICBQdXJwb3NlCiogID09PT09PT0KKgoqICBaR1RUUlMgc29sdmVzIG9u\nZSBvZiB0aGUgc3lzdGVtcyBvZiBlcXVhdGlvbnMKKiAgICAgQSAqIFggPSBCLCAgQSoqVCAqIFgg\nPSBCLCAgb3IgIEEqKkggKiBYID0gQiwKKiAgd2l0aCBhIHRyaWRpYWdvbmFsIG1hdHJpeCBBIHVz\naW5nIHRoZSBMVSBmYWN0b3JpemF0aW9uIGNvbXB1dGVkCiogIGJ5IFpHVFRSRi4KKgoqICBBcmd1\nbWVudHMKKiAgPT09PT09PT09CioKKiAgVFJBTlMgICAoaW5wdXQpIENIQVJBQ1RFUioxCiogICAg\nICAgICAgU3BlY2lmaWVzIHRoZSBmb3JtIG9mIHRoZSBzeXN0ZW0gb2YgZXF1YXRpb25zLgoqICAg\nICAgICAgID0gJ04nOiAgQSAqIFggPSBCICAgICAoTm8gdHJhbnNwb3NlKQoqICAgICAgICAgID0g\nJ1QnOiAgQSoqVCAqIFggPSBCICAoVHJhbnNwb3NlKQoqICAgICAgICAgID0gJ0MnOiAgQSoqSCAq\nIFggPSBCICAoQ29uanVnYXRlIHRyYW5zcG9zZSkKKgoqICBOICAgICAgIChpbnB1dCkgSU5URUdF\nUgoqICAgICAgICAgIFRoZSBvcmRlciBvZiB0aGUgbWF0cml4IEEuCioKKiAgTlJIUyAgICAoaW5w\ndXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbnVtYmVyIG9mIHJpZ2h0IGhhbmQgc2lkZXMsIGku\nZS4sIHRoZSBudW1iZXIgb2YgY29sdW1ucwoqICAgICAgICAgIG9mIHRoZSBtYXRyaXggQi4gIE5S\nSFMgPj0gMC4KKgoqICBETCAgICAgIChpbnB1dCkgQ09NUExFWCoxNiBhcnJheSwgZGltZW5zaW9u\nIChOLTEpCiogICAgICAgICAgVGhlIChuLTEpIG11bHRpcGxpZXJzIHRoYXQgZGVmaW5lIHRoZSBt\nYXRyaXggTCBmcm9tIHRoZQoqICAgICAgICAgIExVIGZhY3Rvcml6YXRpb24gb2YgQS4KKgoqICBE\nICAgICAgIChpbnB1dCkgQ09NUExFWCoxNiBhcnJheSwgZGltZW5zaW9uIChOKQoqICAgICAgICAg\nIFRoZSBuIGRpYWdvbmFsIGVsZW1lbnRzIG9mIHRoZSB1cHBlciB0cmlhbmd1bGFyIG1hdHJpeCBV\nIGZyb20KKiAgICAgICAgICB0aGUgTFUgZmFjdG9yaXphdGlvbiBvZiBBLgoqCiogIERVICAgICAg\nKGlucHV0KSBDT01QTEVYKjE2IGFycmF5LCBkaW1lbnNpb24gKE4tMSkKKiAgICAgICAgICBUaGUg\nKG4tMSkgZWxlbWVudHMgb2YgdGhlIGZpcnN0IHN1cGVyLWRpYWdvbmFsIG9mIFUuCioKKiAgRFUy\nICAgICAoaW5wdXQpIENPTVBMRVgqMTYgYXJyYXksIGRpbWVuc2lvbiAoTi0yKQoqICAgICAgICAg\nIFRoZSAobi0yKSBlbGVtZW50cyBvZiB0aGUgc2Vjb25kIHN1cGVyLWRpYWdvbmFsIG9mIFUuCioK\nKiAgSVBJViAgICAoaW5wdXQpIElOVEVHRVIgYXJyYXksIGRpbWVuc2lvbiAoTikKKiAgICAgICAg\nICBUaGUgcGl2b3QgaW5kaWNlczsgZm9yIDEgPD0gaSA8PSBuLCByb3cgaSBvZiB0aGUgbWF0cml4\nIHdhcwoqICAgICAgICAgIGludGVyY2hhbmdlZCB3aXRoIHJvdyBJUElWKGkpLiAgSVBJVihpKSB3\naWxsIGFsd2F5cyBiZSBlaXRoZXIKKiAgICAgICAgICBpIG9yIGkrMTsgSVBJVihpKSA9IGkgaW5k\naWNhdGVzIGEgcm93IGludGVyY2hhbmdlIHdhcyBub3QKKiAgICAgICAgICByZXF1aXJlZC4KKgoq\nICBCICAgICAgIChpbnB1dC9vdXRwdXQpIENPTVBMRVgqMTYgYXJyYXksIGRpbWVuc2lvbiAoTERC\nLE5SSFMpCiogICAgICAgICAgT24gZW50cnksIHRoZSBtYXRyaXggb2YgcmlnaHQgaGFuZCBzaWRl\nIHZlY3RvcnMgQi4KKiAgICAgICAgICBPbiBleGl0LCBCIGlzIG92ZXJ3cml0dGVuIGJ5IHRoZSBz\nb2x1dGlvbiB2ZWN0b3JzIFguCioKKiAgTERCICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAg\nICBUaGUgbGVhZGluZyBkaW1lbnNpb24gb2YgdGhlIGFycmF5IEIuICBMREIgPj0gbWF4KDEsTiku\nCioKKiAgSU5GTyAgICAob3V0cHV0KSBJTlRFR0VSCiogICAgICAgICAgPSAwOiAgc3VjY2Vzc2Z1\nbCBleGl0CiogICAgICAgICAgPCAwOiAgaWYgSU5GTyA9IC1rLCB0aGUgay10aCBhcmd1bWVudCBo\nYWQgYW4gaWxsZWdhbCB2YWx1ZQoqCnJKBAAAaIZohymBcksEAAB9ckwEAAAoaIqJaItojHViaJiK\nAhABaJlYDgAAAHpndHRyc18yNzIudHh0ck0EAAB1YmibigIQAWicWAUAAABndHRyc3JOBAAAaJiK\nAUB1Ymh9aGFdaH6HUnJPBAAAfXJQBAAAKGiBWAMAAABTUERyUQQAAGiDWAQAAABmdWxsclIEAABo\ncVgrAAAAY29tcHV0YXRpb25hbCwgc29sdmUgQSpYID0gQiB1c2luZyBDaG9sZXNreXJTBAAAaIZo\nhymBclQEAAB9clUEAAAoaIqJaItojHViaI1YLAAAAGh0dHA6Ly93d3cubmV0bGliLm9yZy9sYXBh\nY2svc2luZ2xlL3Nwb3Rycy5mclYEAABoj1gBAAAAc2iQaH1okV1ofodSclcEAAB9clgEAAAoaJRY\n+AYAACAgICAgIFNVQlJPVVRJTkUgU1BPVFJTKCBVUExPLCBOLCBOUkhTLCBBLCBMREEsIEIsIExE\nQiwgSU5GTyApCioKKiAgLS0gTEFQQUNLIHJvdXRpbmUgKHZlcnNpb24gMy4zLjEpIC0tCiogIC0t\nIExBUEFDSyBpcyBhIHNvZnR3YXJlIHBhY2thZ2UgcHJvdmlkZWQgYnkgVW5pdi4gb2YgVGVubmVz\nc2VlLCAgICAtLQoqICAtLSBVbml2LiBvZiBDYWxpZm9ybmlhIEJlcmtlbGV5LCBVbml2LiBvZiBD\nb2xvcmFkbyBEZW52ZXIgYW5kIE5BRyBMdGQuLi0tCiogIC0tIEFwcmlsIDIwMTEgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLQoqCiogICAgIC4u\nIFNjYWxhciBBcmd1bWVudHMgLi4KICAgICAgQ0hBUkFDVEVSICAgICAgICAgIFVQTE8KICAgICAg\nSU5URUdFUiAgICAgICAgICAgIElORk8sIExEQSwgTERCLCBOLCBOUkhTCiogICAgIC4uCiogICAg\nIC4uIEFycmF5IEFyZ3VtZW50cyAuLgogICAgICBSRUFMICAgICAgICAgICAgICAgQSggTERBLCAq\nICksIEIoIExEQiwgKiApCiogICAgIC4uCioKKiAgUHVycG9zZQoqICA9PT09PT09CioKKiAgU1BP\nVFJTIHNvbHZlcyBhIHN5c3RlbSBvZiBsaW5lYXIgZXF1YXRpb25zIEEqWCA9IEIgd2l0aCBhIHN5\nbW1ldHJpYwoqICBwb3NpdGl2ZSBkZWZpbml0ZSBtYXRyaXggQSB1c2luZyB0aGUgQ2hvbGVza3kg\nZmFjdG9yaXphdGlvbgoqICBBID0gVSoqVCpVIG9yIEEgPSBMKkwqKlQgY29tcHV0ZWQgYnkgU1BP\nVFJGLgoqCiogIEFyZ3VtZW50cwoqICA9PT09PT09PT0KKgoqICBVUExPICAgIChpbnB1dCkgQ0hB\nUkFDVEVSKjEKKiAgICAgICAgICA9ICdVJzogIFVwcGVyIHRyaWFuZ2xlIG9mIEEgaXMgc3RvcmVk\nOwoqICAgICAgICAgID0gJ0wnOiAgTG93ZXIgdHJpYW5nbGUgb2YgQSBpcyBzdG9yZWQuCioKKiAg\nTiAgICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgb3JkZXIgb2YgdGhlIG1hdHJp\neCBBLiAgTiA+PSAwLgoqCiogIE5SSFMgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhl\nIG51bWJlciBvZiByaWdodCBoYW5kIHNpZGVzLCBpLmUuLCB0aGUgbnVtYmVyIG9mIGNvbHVtbnMK\nKiAgICAgICAgICBvZiB0aGUgbWF0cml4IEIuICBOUkhTID49IDAuCioKKiAgQSAgICAgICAoaW5w\ndXQpIFJFQUwgYXJyYXksIGRpbWVuc2lvbiAoTERBLE4pCiogICAgICAgICAgVGhlIHRyaWFuZ3Vs\nYXIgZmFjdG9yIFUgb3IgTCBmcm9tIHRoZSBDaG9sZXNreSBmYWN0b3JpemF0aW9uCiogICAgICAg\nICAgQSA9IFUqKlQqVSBvciBBID0gTCpMKipULCBhcyBjb21wdXRlZCBieSBTUE9UUkYuCioKKiAg\nTERBICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbGVhZGluZyBkaW1lbnNpb24g\nb2YgdGhlIGFycmF5IEEuICBMREEgPj0gbWF4KDEsTikuCioKKiAgQiAgICAgICAoaW5wdXQvb3V0\ncHV0KSBSRUFMIGFycmF5LCBkaW1lbnNpb24gKExEQixOUkhTKQoqICAgICAgICAgIE9uIGVudHJ5\nLCB0aGUgcmlnaHQgaGFuZCBzaWRlIG1hdHJpeCBCLgoqICAgICAgICAgIE9uIGV4aXQsIHRoZSBz\nb2x1dGlvbiBtYXRyaXggWC4KKgoqICBMREIgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAg\nIFRoZSBsZWFkaW5nIGRpbWVuc2lvbiBvZiB0aGUgYXJyYXkgQi4gIExEQiA+PSBtYXgoMSxOKS4K\nKgoqICBJTkZPICAgIChvdXRwdXQpIElOVEVHRVIKKiAgICAgICAgICA9IDA6ICBzdWNjZXNzZnVs\nIGV4aXQKKiAgICAgICAgICA8IDA6ICBpZiBJTkZPID0gLWksIHRoZSBpLXRoIGFyZ3VtZW50IGhh\nZCBhbiBpbGxlZ2FsIHZhbHVlCioKclkEAABohmiHKYFyWgQAAH1yWwQAAChoioloi2iMdWJomIoC\nEQFomVgOAAAAc3BvdHJzXzI3My50eHRyXAQAAHViaJuKAhEBaJxYBQAAAHBvdHJzcl0EAABomIoB\nQXViaH1oYV1ofodScl4EAAB9cl8EAAAoaIFYAwAAAFNQRHJgBAAAaINYBAAAAGZ1bGxyYQQAAGhx\nWCsAAABjb21wdXRhdGlvbmFsLCBzb2x2ZSBBKlggPSBCIHVzaW5nIENob2xlc2t5cmIEAABohmiH\nKYFyYwQAAH1yZAQAAChoioloi2iMdWJojVgsAAAAaHR0cDovL3d3dy5uZXRsaWIub3JnL2xhcGFj\nay9kb3VibGUvZHBvdHJzLmZyZQQAAGiPWAEAAABkaJBofWiRXWh+h1JyZgQAAH1yZwQAACholFgQ\nBwAAICAgICAgU1VCUk9VVElORSBEUE9UUlMoIFVQTE8sIE4sIE5SSFMsIEEsIExEQSwgQiwgTERC\nLCBJTkZPICkKKgoqICAtLSBMQVBBQ0sgcm91dGluZSAodmVyc2lvbiAzLjMuMSkgLS0KKiAgLS0g\nTEFQQUNLIGlzIGEgc29mdHdhcmUgcGFja2FnZSBwcm92aWRlZCBieSBVbml2LiBvZiBUZW5uZXNz\nZWUsICAgIC0tCiogIC0tIFVuaXYuIG9mIENhbGlmb3JuaWEgQmVya2VsZXksIFVuaXYuIG9mIENv\nbG9yYWRvIERlbnZlciBhbmQgTkFHIEx0ZC4uLS0KKiAgLS0gQXByaWwgMjAxMSAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tCioKKiAgICAgLi4g\nU2NhbGFyIEFyZ3VtZW50cyAuLgogICAgICBDSEFSQUNURVIgICAgICAgICAgVVBMTwogICAgICBJ\nTlRFR0VSICAgICAgICAgICAgSU5GTywgTERBLCBMREIsIE4sIE5SSFMKKiAgICAgLi4KKiAgICAg\nLi4gQXJyYXkgQXJndW1lbnRzIC4uCiAgICAgIERPVUJMRSBQUkVDSVNJT04gICBBKCBMREEsICog\nKSwgQiggTERCLCAqICkKKiAgICAgLi4KKgoqICBQdXJwb3NlCiogID09PT09PT0KKgoqICBEUE9U\nUlMgc29sdmVzIGEgc3lzdGVtIG9mIGxpbmVhciBlcXVhdGlvbnMgQSpYID0gQiB3aXRoIGEgc3lt\nbWV0cmljCiogIHBvc2l0aXZlIGRlZmluaXRlIG1hdHJpeCBBIHVzaW5nIHRoZSBDaG9sZXNreSBm\nYWN0b3JpemF0aW9uCiogIEEgPSBVKipUKlUgb3IgQSA9IEwqTCoqVCBjb21wdXRlZCBieSBEUE9U\nUkYuCioKKiAgQXJndW1lbnRzCiogID09PT09PT09PQoqCiogIFVQTE8gICAgKGlucHV0KSBDSEFS\nQUNURVIqMQoqICAgICAgICAgID0gJ1UnOiAgVXBwZXIgdHJpYW5nbGUgb2YgQSBpcyBzdG9yZWQ7\nCiogICAgICAgICAgPSAnTCc6ICBMb3dlciB0cmlhbmdsZSBvZiBBIGlzIHN0b3JlZC4KKgoqICBO\nICAgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBvcmRlciBvZiB0aGUgbWF0cml4\nIEEuICBOID49IDAuCioKKiAgTlJIUyAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUg\nbnVtYmVyIG9mIHJpZ2h0IGhhbmQgc2lkZXMsIGkuZS4sIHRoZSBudW1iZXIgb2YgY29sdW1ucwoq\nICAgICAgICAgIG9mIHRoZSBtYXRyaXggQi4gIE5SSFMgPj0gMC4KKgoqICBBICAgICAgIChpbnB1\ndCkgRE9VQkxFIFBSRUNJU0lPTiBhcnJheSwgZGltZW5zaW9uIChMREEsTikKKiAgICAgICAgICBU\naGUgdHJpYW5ndWxhciBmYWN0b3IgVSBvciBMIGZyb20gdGhlIENob2xlc2t5IGZhY3Rvcml6YXRp\nb24KKiAgICAgICAgICBBID0gVSoqVCpVIG9yIEEgPSBMKkwqKlQsIGFzIGNvbXB1dGVkIGJ5IERQ\nT1RSRi4KKgoqICBMREEgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBsZWFkaW5n\nIGRpbWVuc2lvbiBvZiB0aGUgYXJyYXkgQS4gIExEQSA+PSBtYXgoMSxOKS4KKgoqICBCICAgICAg\nIChpbnB1dC9vdXRwdXQpIERPVUJMRSBQUkVDSVNJT04gYXJyYXksIGRpbWVuc2lvbiAoTERCLE5S\nSFMpCiogICAgICAgICAgT24gZW50cnksIHRoZSByaWdodCBoYW5kIHNpZGUgbWF0cml4IEIuCiog\nICAgICAgICAgT24gZXhpdCwgdGhlIHNvbHV0aW9uIG1hdHJpeCBYLgoqCiogIExEQiAgICAgKGlu\ncHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJh\neSBCLiAgTERCID49IG1heCgxLE4pLgoqCiogIElORk8gICAgKG91dHB1dCkgSU5URUdFUgoqICAg\nICAgICAgID0gMDogIHN1Y2Nlc3NmdWwgZXhpdAoqICAgICAgICAgIDwgMDogIGlmIElORk8gPSAt\naSwgdGhlIGktdGggYXJndW1lbnQgaGFkIGFuIGlsbGVnYWwgdmFsdWUKKgpyaAQAAGiGaIcpgXJp\nBAAAfXJqBAAAKGiKiWiLaIx1YmiYigISAWiZWA4AAABkcG90cnNfMjc0LnR4dHJrBAAAdWJom4oC\nEgFonFgFAAAAcG90cnNybAQAAGiYigFCdWJofWhhXWh+h1JybQQAAH1ybgQAAChogVgDAAAASFBE\ncm8EAABog1gEAAAAZnVsbHJwBAAAaHFYKwAAAGNvbXB1dGF0aW9uYWwsIHNvbHZlIEEqWCA9IEIg\ndXNpbmcgQ2hvbGVza3lycQQAAGiGaIcpgXJyBAAAfXJzBAAAKGiKiWiLaIx1YmiNWC0AAABodHRw\nOi8vd3d3Lm5ldGxpYi5vcmcvbGFwYWNrL2NvbXBsZXgvY3BvdHJzLmZydAQAAGiPWAEAAABjaJBo\nfWiRXWh+h1JydQQAAH1ydgQAACholFj/BgAAICAgICAgU1VCUk9VVElORSBDUE9UUlMoIFVQTE8s\nIE4sIE5SSFMsIEEsIExEQSwgQiwgTERCLCBJTkZPICkKKgoqICAtLSBMQVBBQ0sgcm91dGluZSAo\ndmVyc2lvbiAzLjMuMSkgLS0KKiAgLS0gTEFQQUNLIGlzIGEgc29mdHdhcmUgcGFja2FnZSBwcm92\naWRlZCBieSBVbml2LiBvZiBUZW5uZXNzZWUsICAgIC0tCiogIC0tIFVuaXYuIG9mIENhbGlmb3Ju\naWEgQmVya2VsZXksIFVuaXYuIG9mIENvbG9yYWRvIERlbnZlciBhbmQgTkFHIEx0ZC4uLS0KKiAg\nLS0gQXByaWwgMjAxMSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgIC0tCioKKiAgICAgLi4gU2NhbGFyIEFyZ3VtZW50cyAuLgogICAgICBDSEFSQUNU\nRVIgICAgICAgICAgVVBMTwogICAgICBJTlRFR0VSICAgICAgICAgICAgSU5GTywgTERBLCBMREIs\nIE4sIE5SSFMKKiAgICAgLi4KKiAgICAgLi4gQXJyYXkgQXJndW1lbnRzIC4uCiAgICAgIENPTVBM\nRVggICAgICAgICAgICBBKCBMREEsICogKSwgQiggTERCLCAqICkKKiAgICAgLi4KKgoqICBQdXJw\nb3NlCiogID09PT09PT0KKgoqICBDUE9UUlMgc29sdmVzIGEgc3lzdGVtIG9mIGxpbmVhciBlcXVh\ndGlvbnMgQSpYID0gQiB3aXRoIGEgSGVybWl0aWFuCiogIHBvc2l0aXZlIGRlZmluaXRlIG1hdHJp\neCBBIHVzaW5nIHRoZSBDaG9sZXNreSBmYWN0b3JpemF0aW9uIAoqICBBID0gVSoqSCpVIG9yIEEg\nPSBMKkwqKkggY29tcHV0ZWQgYnkgQ1BPVFJGLgoqCiogIEFyZ3VtZW50cwoqICA9PT09PT09PT0K\nKgoqICBVUExPICAgIChpbnB1dCkgQ0hBUkFDVEVSKjEKKiAgICAgICAgICA9ICdVJzogIFVwcGVy\nIHRyaWFuZ2xlIG9mIEEgaXMgc3RvcmVkOwoqICAgICAgICAgID0gJ0wnOiAgTG93ZXIgdHJpYW5n\nbGUgb2YgQSBpcyBzdG9yZWQuCioKKiAgTiAgICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAg\nICBUaGUgb3JkZXIgb2YgdGhlIG1hdHJpeCBBLiAgTiA+PSAwLgoqCiogIE5SSFMgICAgKGlucHV0\nKSBJTlRFR0VSCiogICAgICAgICAgVGhlIG51bWJlciBvZiByaWdodCBoYW5kIHNpZGVzLCBpLmUu\nLCB0aGUgbnVtYmVyIG9mIGNvbHVtbnMKKiAgICAgICAgICBvZiB0aGUgbWF0cml4IEIuICBOUkhT\nID49IDAuCioKKiAgQSAgICAgICAoaW5wdXQpIENPTVBMRVggYXJyYXksIGRpbWVuc2lvbiAoTERB\nLE4pCiogICAgICAgICAgVGhlIHRyaWFuZ3VsYXIgZmFjdG9yIFUgb3IgTCBmcm9tIHRoZSBDaG9s\nZXNreSBmYWN0b3JpemF0aW9uCiogICAgICAgICAgQSA9IFUqKkgqVSBvciBBID0gTCpMKipILCBh\ncyBjb21wdXRlZCBieSBDUE9UUkYuCioKKiAgTERBICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAg\nICAgICBUaGUgbGVhZGluZyBkaW1lbnNpb24gb2YgdGhlIGFycmF5IEEuICBMREEgPj0gbWF4KDEs\nTikuCioKKiAgQiAgICAgICAoaW5wdXQvb3V0cHV0KSBDT01QTEVYIGFycmF5LCBkaW1lbnNpb24g\nKExEQixOUkhTKQoqICAgICAgICAgIE9uIGVudHJ5LCB0aGUgcmlnaHQgaGFuZCBzaWRlIG1hdHJp\neCBCLgoqICAgICAgICAgIE9uIGV4aXQsIHRoZSBzb2x1dGlvbiBtYXRyaXggWC4KKgoqICBMREIg\nICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBsZWFkaW5nIGRpbWVuc2lvbiBvZiB0\naGUgYXJyYXkgQi4gIExEQiA+PSBtYXgoMSxOKS4KKgoqICBJTkZPICAgIChvdXRwdXQpIElOVEVH\nRVIKKiAgICAgICAgICA9IDA6ICBzdWNjZXNzZnVsIGV4aXQKKiAgICAgICAgICA8IDA6ICBpZiBJ\nTkZPID0gLWksIHRoZSBpLXRoIGFyZ3VtZW50IGhhZCBhbiBpbGxlZ2FsIHZhbHVlCioKcncEAABo\nhmiHKYFyeAQAAH1yeQQAAChoioloi2iMdWJomIoCEwFomVgOAAAAY3BvdHJzXzI3NS50eHRyegQA\nAHViaJuKAhMBaJxYBQAAAHBvdHJzcnsEAABomIoBQ3ViaH1oYV1ofodScnwEAAB9cn0EAAAoaIFY\nAwAAAEhQRHJ+BAAAaINYBAAAAGZ1bGxyfwQAAGhxWCsAAABjb21wdXRhdGlvbmFsLCBzb2x2ZSBB\nKlggPSBCIHVzaW5nIENob2xlc2t5coAEAABohmiHKYFygQQAAH1yggQAAChoioloi2iMdWJojVgv\nAAAAaHR0cDovL3d3dy5uZXRsaWIub3JnL2xhcGFjay9jb21wbGV4MTYvenBvdHJzLmZygwQAAGiP\nWAEAAAB6aJBofWiRXWh+h1JyhAQAAH1yhQQAACholFgMBwAAICAgICAgU1VCUk9VVElORSBaUE9U\nUlMoIFVQTE8sIE4sIE5SSFMsIEEsIExEQSwgQiwgTERCLCBJTkZPICkKKgoqICAtLSBMQVBBQ0sg\ncm91dGluZSAodmVyc2lvbiAzLjMuMSkgLS0KKiAgLS0gTEFQQUNLIGlzIGEgc29mdHdhcmUgcGFj\na2FnZSBwcm92aWRlZCBieSBVbml2LiBvZiBUZW5uZXNzZWUsICAgIC0tCiogIC0tIFVuaXYuIG9m\nIENhbGlmb3JuaWEgQmVya2VsZXksIFVuaXYuIG9mIENvbG9yYWRvIERlbnZlciBhbmQgTkFHIEx0\nZC4uLS0KKiAgLS0gQXByaWwgMjAxMSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgIC0tCioKKiAgICAgLi4gU2NhbGFyIEFyZ3VtZW50cyAuLgogICAg\nICBDSEFSQUNURVIgICAgICAgICAgVVBMTwogICAgICBJTlRFR0VSICAgICAgICAgICAgSU5GTywg\nTERBLCBMREIsIE4sIE5SSFMKKiAgICAgLi4KKiAgICAgLi4gQXJyYXkgQXJndW1lbnRzIC4uCiAg\nICAgIENPTVBMRVgqMTYgICAgICAgICBBKCBMREEsICogKSwgQiggTERCLCAqICkKKiAgICAgLi4K\nKgoqICBQdXJwb3NlCiogID09PT09PT0KKgoqICBaUE9UUlMgc29sdmVzIGEgc3lzdGVtIG9mIGxp\nbmVhciBlcXVhdGlvbnMgQSpYID0gQiB3aXRoIGEgSGVybWl0aWFuCiogIHBvc2l0aXZlIGRlZmlu\naXRlIG1hdHJpeCBBIHVzaW5nIHRoZSBDaG9sZXNreSBmYWN0b3JpemF0aW9uCiogIEEgPSBVKipI\nICogVSBvciBBID0gTCAqIEwqKkggY29tcHV0ZWQgYnkgWlBPVFJGLgoqCiogIEFyZ3VtZW50cwoq\nICA9PT09PT09PT0KKgoqICBVUExPICAgIChpbnB1dCkgQ0hBUkFDVEVSKjEKKiAgICAgICAgICA9\nICdVJzogIFVwcGVyIHRyaWFuZ2xlIG9mIEEgaXMgc3RvcmVkOwoqICAgICAgICAgID0gJ0wnOiAg\nTG93ZXIgdHJpYW5nbGUgb2YgQSBpcyBzdG9yZWQuCioKKiAgTiAgICAgICAoaW5wdXQpIElOVEVH\nRVIKKiAgICAgICAgICBUaGUgb3JkZXIgb2YgdGhlIG1hdHJpeCBBLiAgTiA+PSAwLgoqCiogIE5S\nSFMgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG51bWJlciBvZiByaWdodCBoYW5k\nIHNpZGVzLCBpLmUuLCB0aGUgbnVtYmVyIG9mIGNvbHVtbnMKKiAgICAgICAgICBvZiB0aGUgbWF0\ncml4IEIuICBOUkhTID49IDAuCioKKiAgQSAgICAgICAoaW5wdXQpIENPTVBMRVgqMTYgYXJyYXks\nIGRpbWVuc2lvbiAoTERBLE4pCiogICAgICAgICAgVGhlIHRyaWFuZ3VsYXIgZmFjdG9yIFUgb3Ig\nTCBmcm9tIHRoZSBDaG9sZXNreSBmYWN0b3JpemF0aW9uCiogICAgICAgICAgQSA9IFUqKkggKiBV\nIG9yIEEgPSBMICogTCoqSCwgYXMgY29tcHV0ZWQgYnkgWlBPVFJGLgoqCiogIExEQSAgICAgKGlu\ncHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJh\neSBBLiAgTERBID49IG1heCgxLE4pLgoqCiogIEIgICAgICAgKGlucHV0L291dHB1dCkgQ09NUExF\nWCoxNiBhcnJheSwgZGltZW5zaW9uIChMREIsTlJIUykKKiAgICAgICAgICBPbiBlbnRyeSwgdGhl\nIHJpZ2h0IGhhbmQgc2lkZSBtYXRyaXggQi4KKiAgICAgICAgICBPbiBleGl0LCB0aGUgc29sdXRp\nb24gbWF0cml4IFguCioKKiAgTERCICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUg\nbGVhZGluZyBkaW1lbnNpb24gb2YgdGhlIGFycmF5IEIuICBMREIgPj0gbWF4KDEsTikuCioKKiAg\nSU5GTyAgICAob3V0cHV0KSBJTlRFR0VSCiogICAgICAgICAgPSAwOiAgc3VjY2Vzc2Z1bCBleGl0\nCiogICAgICAgICAgPCAwOiAgaWYgSU5GTyA9IC1pLCB0aGUgaS10aCBhcmd1bWVudCBoYWQgYW4g\naWxsZWdhbCB2YWx1ZQoqCnKGBAAAaIZohymBcocEAAB9cogEAAAoaIqJaItojHViaJiKAhQBaJlY\nDgAAAHpwb3Ryc18yNzYudHh0cokEAAB1YmibigIUAWicWAUAAABwb3Ryc3KKBAAAaJiKAUR1Ymh9\naGFdaH6HUnKLBAAAfXKMBAAAKGiBWAMAAABTUERyjQQAAGiDWAYAAABwYWNrZWRyjgQAAGhxWCsA\nAABjb21wdXRhdGlvbmFsLCBzb2x2ZSBBKlggPSBCIHVzaW5nIENob2xlc2t5co8EAABohmiHKYFy\nkAQAAH1ykQQAAChoioloi2iMdWJojVgsAAAAaHR0cDovL3d3dy5uZXRsaWIub3JnL2xhcGFjay9z\naW5nbGUvc3BwdHJzLmZykgQAAGiPWAEAAABzaJBofWiRXWh+h1JykwQAAH1ylAQAACholFiPBwAA\nICAgICAgU1VCUk9VVElORSBTUFBUUlMoIFVQTE8sIE4sIE5SSFMsIEFQLCBCLCBMREIsIElORk8g\nKQoqCiogIC0tIExBUEFDSyByb3V0aW5lICh2ZXJzaW9uIDMuMy4xKSAtLQoqICAtLSBMQVBBQ0sg\naXMgYSBzb2Z0d2FyZSBwYWNrYWdlIHByb3ZpZGVkIGJ5IFVuaXYuIG9mIFRlbm5lc3NlZSwgICAg\nLS0KKiAgLS0gVW5pdi4gb2YgQ2FsaWZvcm5pYSBCZXJrZWxleSwgVW5pdi4gb2YgQ29sb3JhZG8g\nRGVudmVyIGFuZCBOQUcgTHRkLi4tLQoqICAtLSBBcHJpbCAyMDExICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0KKgoqICAgICAuLiBTY2FsYXIg\nQXJndW1lbnRzIC4uCiAgICAgIENIQVJBQ1RFUiAgICAgICAgICBVUExPCiAgICAgIElOVEVHRVIg\nICAgICAgICAgICBJTkZPLCBMREIsIE4sIE5SSFMKKiAgICAgLi4KKiAgICAgLi4gQXJyYXkgQXJn\ndW1lbnRzIC4uCiAgICAgIFJFQUwgICAgICAgICAgICAgICBBUCggKiApLCBCKCBMREIsICogKQoq\nICAgICAuLgoqCiogIFB1cnBvc2UKKiAgPT09PT09PQoqCiogIFNQUFRSUyBzb2x2ZXMgYSBzeXN0\nZW0gb2YgbGluZWFyIGVxdWF0aW9ucyBBKlggPSBCIHdpdGggYSBzeW1tZXRyaWMKKiAgcG9zaXRp\ndmUgZGVmaW5pdGUgbWF0cml4IEEgaW4gcGFja2VkIHN0b3JhZ2UgdXNpbmcgdGhlIENob2xlc2t5\nCiogIGZhY3Rvcml6YXRpb24gQSA9IFUqKlQqVSBvciBBID0gTCpMKipUIGNvbXB1dGVkIGJ5IFNQ\nUFRSRi4KKgoqICBBcmd1bWVudHMKKiAgPT09PT09PT09CioKKiAgVVBMTyAgICAoaW5wdXQpIENI\nQVJBQ1RFUioxCiogICAgICAgICAgPSAnVSc6ICBVcHBlciB0cmlhbmdsZSBvZiBBIGlzIHN0b3Jl\nZDsKKiAgICAgICAgICA9ICdMJzogIExvd2VyIHRyaWFuZ2xlIG9mIEEgaXMgc3RvcmVkLgoqCiog\nIE4gICAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG9yZGVyIG9mIHRoZSBtYXRy\naXggQS4gIE4gPj0gMC4KKgoqICBOUkhTICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRo\nZSBudW1iZXIgb2YgcmlnaHQgaGFuZCBzaWRlcywgaS5lLiwgdGhlIG51bWJlciBvZiBjb2x1bW5z\nCiogICAgICAgICAgb2YgdGhlIG1hdHJpeCBCLiAgTlJIUyA+PSAwLgoqCiogIEFQICAgICAgKGlu\ncHV0KSBSRUFMIGFycmF5LCBkaW1lbnNpb24gKE4qKE4rMSkvMikKKiAgICAgICAgICBUaGUgdHJp\nYW5ndWxhciBmYWN0b3IgVSBvciBMIGZyb20gdGhlIENob2xlc2t5IGZhY3Rvcml6YXRpb24KKiAg\nICAgICAgICBBID0gVSoqVCpVIG9yIEEgPSBMKkwqKlQsIHBhY2tlZCBjb2x1bW53aXNlIGluIGEg\nbGluZWFyCiogICAgICAgICAgYXJyYXkuICBUaGUgai10aCBjb2x1bW4gb2YgVSBvciBMIGlzIHN0\nb3JlZCBpbiB0aGUgYXJyYXkgQVAKKiAgICAgICAgICBhcyBmb2xsb3dzOgoqICAgICAgICAgIGlm\nIFVQTE8gPSAnVScsIEFQKGkgKyAoai0xKSpqLzIpID0gVShpLGopIGZvciAxPD1pPD1qOwoqICAg\nICAgICAgIGlmIFVQTE8gPSAnTCcsIEFQKGkgKyAoai0xKSooMm4taikvMikgPSBMKGksaikgZm9y\nIGo8PWk8PW4uCioKKiAgQiAgICAgICAoaW5wdXQvb3V0cHV0KSBSRUFMIGFycmF5LCBkaW1lbnNp\nb24gKExEQixOUkhTKQoqICAgICAgICAgIE9uIGVudHJ5LCB0aGUgcmlnaHQgaGFuZCBzaWRlIG1h\ndHJpeCBCLgoqICAgICAgICAgIE9uIGV4aXQsIHRoZSBzb2x1dGlvbiBtYXRyaXggWC4KKgoqICBM\nREIgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBsZWFkaW5nIGRpbWVuc2lvbiBv\nZiB0aGUgYXJyYXkgQi4gIExEQiA+PSBtYXgoMSxOKS4KKgoqICBJTkZPICAgIChvdXRwdXQpIElO\nVEVHRVIKKiAgICAgICAgICA9IDA6ICBzdWNjZXNzZnVsIGV4aXQKKiAgICAgICAgICA8IDA6ICBp\nZiBJTkZPID0gLWksIHRoZSBpLXRoIGFyZ3VtZW50IGhhZCBhbiBpbGxlZ2FsIHZhbHVlCioKcpUE\nAABohmiHKYFylgQAAH1ylwQAAChoioloi2iMdWJomIoCFQFomVgOAAAAc3BwdHJzXzI3Ny50eHRy\nmAQAAHViaJuKAhUBaJxYBQAAAHBwdHJzcpkEAABomIoBRXViaH1oYV1ofodScpoEAAB9cpsEAAAo\naIFYAwAAAFNQRHKcBAAAaINYBgAAAHBhY2tlZHKdBAAAaHFYKwAAAGNvbXB1dGF0aW9uYWwsIHNv\nbHZlIEEqWCA9IEIgdXNpbmcgQ2hvbGVza3lyngQAAGiGaIcpgXKfBAAAfXKgBAAAKGiKiWiLaIx1\nYmiNWCwAAABodHRwOi8vd3d3Lm5ldGxpYi5vcmcvbGFwYWNrL2RvdWJsZS9kcHB0cnMuZnKhBAAA\naI9YAQAAAGRokGh9aJFdaH6HUnKiBAAAfXKjBAAAKGiUWKcHAAAgICAgICBTVUJST1VUSU5FIERQ\nUFRSUyggVVBMTywgTiwgTlJIUywgQVAsIEIsIExEQiwgSU5GTyApCioKKiAgLS0gTEFQQUNLIHJv\ndXRpbmUgKHZlcnNpb24gMy4zLjEpIC0tCiogIC0tIExBUEFDSyBpcyBhIHNvZnR3YXJlIHBhY2th\nZ2UgcHJvdmlkZWQgYnkgVW5pdi4gb2YgVGVubmVzc2VlLCAgICAtLQoqICAtLSBVbml2LiBvZiBD\nYWxpZm9ybmlhIEJlcmtlbGV5LCBVbml2LiBvZiBDb2xvcmFkbyBEZW52ZXIgYW5kIE5BRyBMdGQu\nLi0tCiogIC0tIEFwcmlsIDIwMTEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAtLQoqCiogICAgIC4uIFNjYWxhciBBcmd1bWVudHMgLi4KICAgICAg\nQ0hBUkFDVEVSICAgICAgICAgIFVQTE8KICAgICAgSU5URUdFUiAgICAgICAgICAgIElORk8sIExE\nQiwgTiwgTlJIUwoqICAgICAuLgoqICAgICAuLiBBcnJheSBBcmd1bWVudHMgLi4KICAgICAgRE9V\nQkxFIFBSRUNJU0lPTiAgIEFQKCAqICksIEIoIExEQiwgKiApCiogICAgIC4uCioKKiAgUHVycG9z\nZQoqICA9PT09PT09CioKKiAgRFBQVFJTIHNvbHZlcyBhIHN5c3RlbSBvZiBsaW5lYXIgZXF1YXRp\nb25zIEEqWCA9IEIgd2l0aCBhIHN5bW1ldHJpYwoqICBwb3NpdGl2ZSBkZWZpbml0ZSBtYXRyaXgg\nQSBpbiBwYWNrZWQgc3RvcmFnZSB1c2luZyB0aGUgQ2hvbGVza3kKKiAgZmFjdG9yaXphdGlvbiBB\nID0gVSoqVCpVIG9yIEEgPSBMKkwqKlQgY29tcHV0ZWQgYnkgRFBQVFJGLgoqCiogIEFyZ3VtZW50\ncwoqICA9PT09PT09PT0KKgoqICBVUExPICAgIChpbnB1dCkgQ0hBUkFDVEVSKjEKKiAgICAgICAg\nICA9ICdVJzogIFVwcGVyIHRyaWFuZ2xlIG9mIEEgaXMgc3RvcmVkOwoqICAgICAgICAgID0gJ0wn\nOiAgTG93ZXIgdHJpYW5nbGUgb2YgQSBpcyBzdG9yZWQuCioKKiAgTiAgICAgICAoaW5wdXQpIElO\nVEVHRVIKKiAgICAgICAgICBUaGUgb3JkZXIgb2YgdGhlIG1hdHJpeCBBLiAgTiA+PSAwLgoqCiog\nIE5SSFMgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG51bWJlciBvZiByaWdodCBo\nYW5kIHNpZGVzLCBpLmUuLCB0aGUgbnVtYmVyIG9mIGNvbHVtbnMKKiAgICAgICAgICBvZiB0aGUg\nbWF0cml4IEIuICBOUkhTID49IDAuCioKKiAgQVAgICAgICAoaW5wdXQpIERPVUJMRSBQUkVDSVNJ\nT04gYXJyYXksIGRpbWVuc2lvbiAoTiooTisxKS8yKQoqICAgICAgICAgIFRoZSB0cmlhbmd1bGFy\nIGZhY3RvciBVIG9yIEwgZnJvbSB0aGUgQ2hvbGVza3kgZmFjdG9yaXphdGlvbgoqICAgICAgICAg\nIEEgPSBVKipUKlUgb3IgQSA9IEwqTCoqVCwgcGFja2VkIGNvbHVtbndpc2UgaW4gYSBsaW5lYXIK\nKiAgICAgICAgICBhcnJheS4gIFRoZSBqLXRoIGNvbHVtbiBvZiBVIG9yIEwgaXMgc3RvcmVkIGlu\nIHRoZSBhcnJheSBBUAoqICAgICAgICAgIGFzIGZvbGxvd3M6CiogICAgICAgICAgaWYgVVBMTyA9\nICdVJywgQVAoaSArIChqLTEpKmovMikgPSBVKGksaikgZm9yIDE8PWk8PWo7CiogICAgICAgICAg\naWYgVVBMTyA9ICdMJywgQVAoaSArIChqLTEpKigybi1qKS8yKSA9IEwoaSxqKSBmb3Igajw9aTw9\nbi4KKgoqICBCICAgICAgIChpbnB1dC9vdXRwdXQpIERPVUJMRSBQUkVDSVNJT04gYXJyYXksIGRp\nbWVuc2lvbiAoTERCLE5SSFMpCiogICAgICAgICAgT24gZW50cnksIHRoZSByaWdodCBoYW5kIHNp\nZGUgbWF0cml4IEIuCiogICAgICAgICAgT24gZXhpdCwgdGhlIHNvbHV0aW9uIG1hdHJpeCBYLgoq\nCiogIExEQiAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGltZW5z\naW9uIG9mIHRoZSBhcnJheSBCLiAgTERCID49IG1heCgxLE4pLgoqCiogIElORk8gICAgKG91dHB1\ndCkgSU5URUdFUgoqICAgICAgICAgID0gMDogIHN1Y2Nlc3NmdWwgZXhpdAoqICAgICAgICAgIDwg\nMDogIGlmIElORk8gPSAtaSwgdGhlIGktdGggYXJndW1lbnQgaGFkIGFuIGlsbGVnYWwgdmFsdWUK\nKgpypAQAAGiGaIcpgXKlBAAAfXKmBAAAKGiKiWiLaIx1YmiYigIWAWiZWA4AAABkcHB0cnNfMjc4\nLnR4dHKnBAAAdWJom4oCFgFonFgFAAAAcHB0cnNyqAQAAGiYigFGdWJofWhhXWh+h1JyqQQAAH1y\nqgQAAChogVgDAAAASFBEcqsEAABog1gGAAAAcGFja2VkcqwEAABocVgrAAAAY29tcHV0YXRpb25h\nbCwgc29sdmUgQSpYID0gQiB1c2luZyBDaG9sZXNreXKtBAAAaIZohymBcq4EAAB9cq8EAAAoaIqJ\naItojHViaI1YLQAAAGh0dHA6Ly93d3cubmV0bGliLm9yZy9sYXBhY2svY29tcGxleC9jcHB0cnMu\nZnKwBAAAaI9YAQAAAGNokGh9aJFdaH6HUnKxBAAAfXKyBAAAKGiUWJUHAAAgICAgICBTVUJST1VU\nSU5FIENQUFRSUyggVVBMTywgTiwgTlJIUywgQVAsIEIsIExEQiwgSU5GTyApCioKKiAgLS0gTEFQ\nQUNLIHJvdXRpbmUgKHZlcnNpb24gMy4zLjEpIC0tCiogIC0tIExBUEFDSyBpcyBhIHNvZnR3YXJl\nIHBhY2thZ2UgcHJvdmlkZWQgYnkgVW5pdi4gb2YgVGVubmVzc2VlLCAgICAtLQoqICAtLSBVbml2\nLiBvZiBDYWxpZm9ybmlhIEJlcmtlbGV5LCBVbml2LiBvZiBDb2xvcmFkbyBEZW52ZXIgYW5kIE5B\nRyBMdGQuLi0tCiogIC0tIEFwcmlsIDIwMTEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAtLQoqCiogICAgIC4uIFNjYWxhciBBcmd1bWVudHMgLi4K\nICAgICAgQ0hBUkFDVEVSICAgICAgICAgIFVQTE8KICAgICAgSU5URUdFUiAgICAgICAgICAgIElO\nRk8sIExEQiwgTiwgTlJIUwoqICAgICAuLgoqICAgICAuLiBBcnJheSBBcmd1bWVudHMgLi4KICAg\nICAgQ09NUExFWCAgICAgICAgICAgIEFQKCAqICksIEIoIExEQiwgKiApCiogICAgIC4uCioKKiAg\nUHVycG9zZQoqICA9PT09PT09CioKKiAgQ1BQVFJTIHNvbHZlcyBhIHN5c3RlbSBvZiBsaW5lYXIg\nZXF1YXRpb25zIEEqWCA9IEIgd2l0aCBhIEhlcm1pdGlhbgoqICBwb3NpdGl2ZSBkZWZpbml0ZSBt\nYXRyaXggQSBpbiBwYWNrZWQgc3RvcmFnZSB1c2luZyB0aGUgQ2hvbGVza3kKKiAgZmFjdG9yaXph\ndGlvbiBBID0gVSoqSCpVIG9yIEEgPSBMKkwqKkggY29tcHV0ZWQgYnkgQ1BQVFJGLgoqCiogIEFy\nZ3VtZW50cwoqICA9PT09PT09PT0KKgoqICBVUExPICAgIChpbnB1dCkgQ0hBUkFDVEVSKjEKKiAg\nICAgICAgICA9ICdVJzogIFVwcGVyIHRyaWFuZ2xlIG9mIEEgaXMgc3RvcmVkOwoqICAgICAgICAg\nID0gJ0wnOiAgTG93ZXIgdHJpYW5nbGUgb2YgQSBpcyBzdG9yZWQuCioKKiAgTiAgICAgICAoaW5w\ndXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgb3JkZXIgb2YgdGhlIG1hdHJpeCBBLiAgTiA+PSAw\nLgoqCiogIE5SSFMgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG51bWJlciBvZiBy\naWdodCBoYW5kIHNpZGVzLCBpLmUuLCB0aGUgbnVtYmVyIG9mIGNvbHVtbnMKKiAgICAgICAgICBv\nZiB0aGUgbWF0cml4IEIuICBOUkhTID49IDAuCioKKiAgQVAgICAgICAoaW5wdXQpIENPTVBMRVgg\nYXJyYXksIGRpbWVuc2lvbiAoTiooTisxKS8yKQoqICAgICAgICAgIFRoZSB0cmlhbmd1bGFyIGZh\nY3RvciBVIG9yIEwgZnJvbSB0aGUgQ2hvbGVza3kgZmFjdG9yaXphdGlvbgoqICAgICAgICAgIEEg\nPSBVKipIKlUgb3IgQSA9IEwqTCoqSCwgcGFja2VkIGNvbHVtbndpc2UgaW4gYSBsaW5lYXIKKiAg\nICAgICAgICBhcnJheS4gIFRoZSBqLXRoIGNvbHVtbiBvZiBVIG9yIEwgaXMgc3RvcmVkIGluIHRo\nZSBhcnJheSBBUAoqICAgICAgICAgIGFzIGZvbGxvd3M6CiogICAgICAgICAgaWYgVVBMTyA9ICdV\nJywgQVAoaSArIChqLTEpKmovMikgPSBVKGksaikgZm9yIDE8PWk8PWo7CiogICAgICAgICAgaWYg\nVVBMTyA9ICdMJywgQVAoaSArIChqLTEpKigybi1qKS8yKSA9IEwoaSxqKSBmb3Igajw9aTw9bi4K\nKgoqICBCICAgICAgIChpbnB1dC9vdXRwdXQpIENPTVBMRVggYXJyYXksIGRpbWVuc2lvbiAoTERC\nLE5SSFMpCiogICAgICAgICAgT24gZW50cnksIHRoZSByaWdodCBoYW5kIHNpZGUgbWF0cml4IEIu\nCiogICAgICAgICAgT24gZXhpdCwgdGhlIHNvbHV0aW9uIG1hdHJpeCBYLgoqCiogIExEQiAgICAg\nKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBh\ncnJheSBCLiAgTERCID49IG1heCgxLE4pLgoqCiogIElORk8gICAgKG91dHB1dCkgSU5URUdFUgoq\nICAgICAgICAgID0gMDogIHN1Y2Nlc3NmdWwgZXhpdAoqICAgICAgICAgIDwgMDogIGlmIElORk8g\nPSAtaSwgdGhlIGktdGggYXJndW1lbnQgaGFkIGFuIGlsbGVnYWwgdmFsdWUKKgpyswQAAGiGaIcp\ngXK0BAAAfXK1BAAAKGiKiWiLaIx1YmiYigIXAWiZWA4AAABjcHB0cnNfMjc5LnR4dHK2BAAAdWJo\nm4oCFwFonFgFAAAAcHB0cnNytwQAAGiYigFHdWJofWhhXWh+h1JyuAQAAH1yuQQAAChogVgDAAAA\nSFBEcroEAABog1gGAAAAcGFja2VkcrsEAABocVgrAAAAY29tcHV0YXRpb25hbCwgc29sdmUgQSpY\nID0gQiB1c2luZyBDaG9sZXNreXK8BAAAaIZohymBcr0EAAB9cr4EAAAoaIqJaItojHViaI1YLwAA\nAGh0dHA6Ly93d3cubmV0bGliLm9yZy9sYXBhY2svY29tcGxleDE2L3pwcHRycy5mcr8EAABoj1gB\nAAAAemiQaH1okV1ofodScsAEAAB9csEEAAAoaJRYowcAACAgICAgIFNVQlJPVVRJTkUgWlBQVFJT\nKCBVUExPLCBOLCBOUkhTLCBBUCwgQiwgTERCLCBJTkZPICkKKgoqICAtLSBMQVBBQ0sgcm91dGlu\nZSAodmVyc2lvbiAzLjMuMSkgLS0KKiAgLS0gTEFQQUNLIGlzIGEgc29mdHdhcmUgcGFja2FnZSBw\ncm92aWRlZCBieSBVbml2LiBvZiBUZW5uZXNzZWUsICAgIC0tCiogIC0tIFVuaXYuIG9mIENhbGlm\nb3JuaWEgQmVya2VsZXksIFVuaXYuIG9mIENvbG9yYWRvIERlbnZlciBhbmQgTkFHIEx0ZC4uLS0K\nKiAgLS0gQXByaWwgMjAxMSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgIC0tCioKKiAgICAgLi4gU2NhbGFyIEFyZ3VtZW50cyAuLgogICAgICBDSEFS\nQUNURVIgICAgICAgICAgVVBMTwogICAgICBJTlRFR0VSICAgICAgICAgICAgSU5GTywgTERCLCBO\nLCBOUkhTCiogICAgIC4uCiogICAgIC4uIEFycmF5IEFyZ3VtZW50cyAuLgogICAgICBDT01QTEVY\nKjE2ICAgICAgICAgQVAoICogKSwgQiggTERCLCAqICkKKiAgICAgLi4KKgoqICBQdXJwb3NlCiog\nID09PT09PT0KKgoqICBaUFBUUlMgc29sdmVzIGEgc3lzdGVtIG9mIGxpbmVhciBlcXVhdGlvbnMg\nQSpYID0gQiB3aXRoIGEgSGVybWl0aWFuCiogIHBvc2l0aXZlIGRlZmluaXRlIG1hdHJpeCBBIGlu\nIHBhY2tlZCBzdG9yYWdlIHVzaW5nIHRoZSBDaG9sZXNreQoqICBmYWN0b3JpemF0aW9uIEEgPSBV\nKipIICogVSBvciBBID0gTCAqIEwqKkggY29tcHV0ZWQgYnkgWlBQVFJGLgoqCiogIEFyZ3VtZW50\ncwoqICA9PT09PT09PT0KKgoqICBVUExPICAgIChpbnB1dCkgQ0hBUkFDVEVSKjEKKiAgICAgICAg\nICA9ICdVJzogIFVwcGVyIHRyaWFuZ2xlIG9mIEEgaXMgc3RvcmVkOwoqICAgICAgICAgID0gJ0wn\nOiAgTG93ZXIgdHJpYW5nbGUgb2YgQSBpcyBzdG9yZWQuCioKKiAgTiAgICAgICAoaW5wdXQpIElO\nVEVHRVIKKiAgICAgICAgICBUaGUgb3JkZXIgb2YgdGhlIG1hdHJpeCBBLiAgTiA+PSAwLgoqCiog\nIE5SSFMgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG51bWJlciBvZiByaWdodCBo\nYW5kIHNpZGVzLCBpLmUuLCB0aGUgbnVtYmVyIG9mIGNvbHVtbnMKKiAgICAgICAgICBvZiB0aGUg\nbWF0cml4IEIuICBOUkhTID49IDAuCioKKiAgQVAgICAgICAoaW5wdXQpIENPTVBMRVgqMTYgYXJy\nYXksIGRpbWVuc2lvbiAoTiooTisxKS8yKQoqICAgICAgICAgIFRoZSB0cmlhbmd1bGFyIGZhY3Rv\nciBVIG9yIEwgZnJvbSB0aGUgQ2hvbGVza3kgZmFjdG9yaXphdGlvbgoqICAgICAgICAgIEEgPSBV\nKipIICogVSBvciBBID0gTCAqIEwqKkgsIHBhY2tlZCBjb2x1bW53aXNlIGluIGEgbGluZWFyCiog\nICAgICAgICAgYXJyYXkuICBUaGUgai10aCBjb2x1bW4gb2YgVSBvciBMIGlzIHN0b3JlZCBpbiB0\naGUgYXJyYXkgQVAKKiAgICAgICAgICBhcyBmb2xsb3dzOgoqICAgICAgICAgIGlmIFVQTE8gPSAn\nVScsIEFQKGkgKyAoai0xKSpqLzIpID0gVShpLGopIGZvciAxPD1pPD1qOwoqICAgICAgICAgIGlm\nIFVQTE8gPSAnTCcsIEFQKGkgKyAoai0xKSooMm4taikvMikgPSBMKGksaikgZm9yIGo8PWk8PW4u\nCioKKiAgQiAgICAgICAoaW5wdXQvb3V0cHV0KSBDT01QTEVYKjE2IGFycmF5LCBkaW1lbnNpb24g\nKExEQixOUkhTKQoqICAgICAgICAgIE9uIGVudHJ5LCB0aGUgcmlnaHQgaGFuZCBzaWRlIG1hdHJp\neCBCLgoqICAgICAgICAgIE9uIGV4aXQsIHRoZSBzb2x1dGlvbiBtYXRyaXggWC4KKgoqICBMREIg\nICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBsZWFkaW5nIGRpbWVuc2lvbiBvZiB0\naGUgYXJyYXkgQi4gIExEQiA+PSBtYXgoMSxOKS4KKgoqICBJTkZPICAgIChvdXRwdXQpIElOVEVH\nRVIKKiAgICAgICAgICA9IDA6ICBzdWNjZXNzZnVsIGV4aXQKKiAgICAgICAgICA8IDA6ICBpZiBJ\nTkZPID0gLWksIHRoZSBpLXRoIGFyZ3VtZW50IGhhZCBhbiBpbGxlZ2FsIHZhbHVlCioKcsIEAABo\nhmiHKYFywwQAAH1yxAQAAChoioloi2iMdWJomIoCGAFomVgOAAAAenBwdHJzXzI4MC50eHRyxQQA\nAHViaJuKAhgBaJxYBQAAAHBwdHJzcsYEAABomIoBSHViaH1oYV1ofodScscEAAB9csgEAAAoaIFY\nAwAAAFNQRHLJBAAAaINYBAAAAGJhbmRyygQAAGhxWCsAAABjb21wdXRhdGlvbmFsLCBzb2x2ZSBB\nKlggPSBCIHVzaW5nIENob2xlc2t5cssEAABohmiHKYFyzAQAAH1yzQQAAChoioloi2iMdWJojVgs\nAAAAaHR0cDovL3d3dy5uZXRsaWIub3JnL2xhcGFjay9zaW5nbGUvc3BidHJzLmZyzgQAAGiPWAEA\nAABzaJBofWiRXWh+h1JyzwQAAH1y0AQAACholFjhCAAAICAgICAgU1VCUk9VVElORSBTUEJUUlMo\nIFVQTE8sIE4sIEtELCBOUkhTLCBBQiwgTERBQiwgQiwgTERCLCBJTkZPICkKKgoqICAtLSBMQVBB\nQ0sgcm91dGluZSAodmVyc2lvbiAzLjMuMSkgLS0KKiAgLS0gTEFQQUNLIGlzIGEgc29mdHdhcmUg\ncGFja2FnZSBwcm92aWRlZCBieSBVbml2LiBvZiBUZW5uZXNzZWUsICAgIC0tCiogIC0tIFVuaXYu\nIG9mIENhbGlmb3JuaWEgQmVya2VsZXksIFVuaXYuIG9mIENvbG9yYWRvIERlbnZlciBhbmQgTkFH\nIEx0ZC4uLS0KKiAgLS0gQXByaWwgMjAxMSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgIC0tCioKKiAgICAgLi4gU2NhbGFyIEFyZ3VtZW50cyAuLgog\nICAgICBDSEFSQUNURVIgICAgICAgICAgVVBMTwogICAgICBJTlRFR0VSICAgICAgICAgICAgSU5G\nTywgS0QsIExEQUIsIExEQiwgTiwgTlJIUwoqICAgICAuLgoqICAgICAuLiBBcnJheSBBcmd1bWVu\ndHMgLi4KICAgICAgUkVBTCAgICAgICAgICAgICAgIEFCKCBMREFCLCAqICksIEIoIExEQiwgKiAp\nCiogICAgIC4uCioKKiAgUHVycG9zZQoqICA9PT09PT09CioKKiAgU1BCVFJTIHNvbHZlcyBhIHN5\nc3RlbSBvZiBsaW5lYXIgZXF1YXRpb25zIEEqWCA9IEIgd2l0aCBhIHN5bW1ldHJpYwoqICBwb3Np\ndGl2ZSBkZWZpbml0ZSBiYW5kIG1hdHJpeCBBIHVzaW5nIHRoZSBDaG9sZXNreSBmYWN0b3JpemF0\naW9uCiogIEEgPSBVKipUKlUgb3IgQSA9IEwqTCoqVCBjb21wdXRlZCBieSBTUEJUUkYuCioKKiAg\nQXJndW1lbnRzCiogID09PT09PT09PQoqCiogIFVQTE8gICAgKGlucHV0KSBDSEFSQUNURVIqMQoq\nICAgICAgICAgID0gJ1UnOiAgVXBwZXIgdHJpYW5ndWxhciBmYWN0b3Igc3RvcmVkIGluIEFCOwoq\nICAgICAgICAgID0gJ0wnOiAgTG93ZXIgdHJpYW5ndWxhciBmYWN0b3Igc3RvcmVkIGluIEFCLgoq\nCiogIE4gICAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG9yZGVyIG9mIHRoZSBt\nYXRyaXggQS4gIE4gPj0gMC4KKgoqICBLRCAgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAg\nIFRoZSBudW1iZXIgb2Ygc3VwZXJkaWFnb25hbHMgb2YgdGhlIG1hdHJpeCBBIGlmIFVQTE8gPSAn\nVScsCiogICAgICAgICAgb3IgdGhlIG51bWJlciBvZiBzdWJkaWFnb25hbHMgaWYgVVBMTyA9ICdM\nJy4gIEtEID49IDAuCioKKiAgTlJIUyAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUg\nbnVtYmVyIG9mIHJpZ2h0IGhhbmQgc2lkZXMsIGkuZS4sIHRoZSBudW1iZXIgb2YgY29sdW1ucwoq\nICAgICAgICAgIG9mIHRoZSBtYXRyaXggQi4gIE5SSFMgPj0gMC4KKgoqICBBQiAgICAgIChpbnB1\ndCkgUkVBTCBhcnJheSwgZGltZW5zaW9uIChMREFCLE4pCiogICAgICAgICAgVGhlIHRyaWFuZ3Vs\nYXIgZmFjdG9yIFUgb3IgTCBmcm9tIHRoZSBDaG9sZXNreSBmYWN0b3JpemF0aW9uCiogICAgICAg\nICAgQSA9IFUqKlQqVSBvciBBID0gTCpMKipUIG9mIHRoZSBiYW5kIG1hdHJpeCBBLCBzdG9yZWQg\naW4gdGhlCiogICAgICAgICAgZmlyc3QgS0QrMSByb3dzIG9mIHRoZSBhcnJheS4gIFRoZSBqLXRo\nIGNvbHVtbiBvZiBVIG9yIEwgaXMKKiAgICAgICAgICBzdG9yZWQgaW4gdGhlIGotdGggY29sdW1u\nIG9mIHRoZSBhcnJheSBBQiBhcyBmb2xsb3dzOgoqICAgICAgICAgIGlmIFVQTE8gPSdVJywgQUIo\na2QrMStpLWosaikgPSBVKGksaikgZm9yIG1heCgxLGota2QpPD1pPD1qOwoqICAgICAgICAgIGlm\nIFVQTE8gPSdMJywgQUIoMStpLWosaikgICAgPSBMKGksaikgZm9yIGo8PWk8PW1pbihuLGora2Qp\nLgoqCiogIExEQUIgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGlt\nZW5zaW9uIG9mIHRoZSBhcnJheSBBQi4gIExEQUIgPj0gS0QrMS4KKgoqICBCICAgICAgIChpbnB1\ndC9vdXRwdXQpIFJFQUwgYXJyYXksIGRpbWVuc2lvbiAoTERCLE5SSFMpCiogICAgICAgICAgT24g\nZW50cnksIHRoZSByaWdodCBoYW5kIHNpZGUgbWF0cml4IEIuCiogICAgICAgICAgT24gZXhpdCwg\ndGhlIHNvbHV0aW9uIG1hdHJpeCBYLgoqCiogIExEQiAgICAgKGlucHV0KSBJTlRFR0VSCiogICAg\nICAgICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBCLiAgTERCID49IG1heCgx\nLE4pLgoqCiogIElORk8gICAgKG91dHB1dCkgSU5URUdFUgoqICAgICAgICAgID0gMDogIHN1Y2Nl\nc3NmdWwgZXhpdAoqICAgICAgICAgIDwgMDogIGlmIElORk8gPSAtaSwgdGhlIGktdGggYXJndW1l\nbnQgaGFkIGFuIGlsbGVnYWwgdmFsdWUKKgpy0QQAAGiGaIcpgXLSBAAAfXLTBAAAKGiKiWiLaIx1\nYmiYigIZAWiZWA4AAABzcGJ0cnNfMjgxLnR4dHLUBAAAdWJom4oCGQFonFgFAAAAcGJ0cnNy1QQA\nAGiYigFJdWJofWhhXWh+h1Jy1gQAAH1y1wQAAChogVgDAAAAU1BEctgEAABog1gEAAAAYmFuZHLZ\nBAAAaHFYKwAAAGNvbXB1dGF0aW9uYWwsIHNvbHZlIEEqWCA9IEIgdXNpbmcgQ2hvbGVza3ly2gQA\nAGiGaIcpgXLbBAAAfXLcBAAAKGiKiWiLaIx1YmiNWCwAAABodHRwOi8vd3d3Lm5ldGxpYi5vcmcv\nbGFwYWNrL2RvdWJsZS9kcGJ0cnMuZnLdBAAAaI9YAQAAAGRokGh9aJFdaH6HUnLeBAAAfXLfBAAA\nKGiUWPkIAAAgICAgICBTVUJST1VUSU5FIERQQlRSUyggVVBMTywgTiwgS0QsIE5SSFMsIEFCLCBM\nREFCLCBCLCBMREIsIElORk8gKQoqCiogIC0tIExBUEFDSyByb3V0aW5lICh2ZXJzaW9uIDMuMy4x\nKSAtLQoqICAtLSBMQVBBQ0sgaXMgYSBzb2Z0d2FyZSBwYWNrYWdlIHByb3ZpZGVkIGJ5IFVuaXYu\nIG9mIFRlbm5lc3NlZSwgICAgLS0KKiAgLS0gVW5pdi4gb2YgQ2FsaWZvcm5pYSBCZXJrZWxleSwg\nVW5pdi4gb2YgQ29sb3JhZG8gRGVudmVyIGFuZCBOQUcgTHRkLi4tLQoqICAtLSBBcHJpbCAyMDEx\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0K\nKgoqICAgICAuLiBTY2FsYXIgQXJndW1lbnRzIC4uCiAgICAgIENIQVJBQ1RFUiAgICAgICAgICBV\nUExPCiAgICAgIElOVEVHRVIgICAgICAgICAgICBJTkZPLCBLRCwgTERBQiwgTERCLCBOLCBOUkhT\nCiogICAgIC4uCiogICAgIC4uIEFycmF5IEFyZ3VtZW50cyAuLgogICAgICBET1VCTEUgUFJFQ0lT\nSU9OICAgQUIoIExEQUIsICogKSwgQiggTERCLCAqICkKKiAgICAgLi4KKgoqICBQdXJwb3NlCiog\nID09PT09PT0KKgoqICBEUEJUUlMgc29sdmVzIGEgc3lzdGVtIG9mIGxpbmVhciBlcXVhdGlvbnMg\nQSpYID0gQiB3aXRoIGEgc3ltbWV0cmljCiogIHBvc2l0aXZlIGRlZmluaXRlIGJhbmQgbWF0cml4\nIEEgdXNpbmcgdGhlIENob2xlc2t5IGZhY3Rvcml6YXRpb24KKiAgQSA9IFUqKlQqVSBvciBBID0g\nTCpMKipUIGNvbXB1dGVkIGJ5IERQQlRSRi4KKgoqICBBcmd1bWVudHMKKiAgPT09PT09PT09CioK\nKiAgVVBMTyAgICAoaW5wdXQpIENIQVJBQ1RFUioxCiogICAgICAgICAgPSAnVSc6ICBVcHBlciB0\ncmlhbmd1bGFyIGZhY3RvciBzdG9yZWQgaW4gQUI7CiogICAgICAgICAgPSAnTCc6ICBMb3dlciB0\ncmlhbmd1bGFyIGZhY3RvciBzdG9yZWQgaW4gQUIuCioKKiAgTiAgICAgICAoaW5wdXQpIElOVEVH\nRVIKKiAgICAgICAgICBUaGUgb3JkZXIgb2YgdGhlIG1hdHJpeCBBLiAgTiA+PSAwLgoqCiogIEtE\nICAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG51bWJlciBvZiBzdXBlcmRpYWdv\nbmFscyBvZiB0aGUgbWF0cml4IEEgaWYgVVBMTyA9ICdVJywKKiAgICAgICAgICBvciB0aGUgbnVt\nYmVyIG9mIHN1YmRpYWdvbmFscyBpZiBVUExPID0gJ0wnLiAgS0QgPj0gMC4KKgoqICBOUkhTICAg\nIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2YgcmlnaHQgaGFuZCBzaWRl\ncywgaS5lLiwgdGhlIG51bWJlciBvZiBjb2x1bW5zCiogICAgICAgICAgb2YgdGhlIG1hdHJpeCBC\nLiAgTlJIUyA+PSAwLgoqCiogIEFCICAgICAgKGlucHV0KSBET1VCTEUgUFJFQ0lTSU9OIGFycmF5\nLCBkaW1lbnNpb24gKExEQUIsTikKKiAgICAgICAgICBUaGUgdHJpYW5ndWxhciBmYWN0b3IgVSBv\nciBMIGZyb20gdGhlIENob2xlc2t5IGZhY3Rvcml6YXRpb24KKiAgICAgICAgICBBID0gVSoqVCpV\nIG9yIEEgPSBMKkwqKlQgb2YgdGhlIGJhbmQgbWF0cml4IEEsIHN0b3JlZCBpbiB0aGUKKiAgICAg\nICAgICBmaXJzdCBLRCsxIHJvd3Mgb2YgdGhlIGFycmF5LiAgVGhlIGotdGggY29sdW1uIG9mIFUg\nb3IgTCBpcwoqICAgICAgICAgIHN0b3JlZCBpbiB0aGUgai10aCBjb2x1bW4gb2YgdGhlIGFycmF5\nIEFCIGFzIGZvbGxvd3M6CiogICAgICAgICAgaWYgVVBMTyA9J1UnLCBBQihrZCsxK2ktaixqKSA9\nIFUoaSxqKSBmb3IgbWF4KDEsai1rZCk8PWk8PWo7CiogICAgICAgICAgaWYgVVBMTyA9J0wnLCBB\nQigxK2ktaixqKSAgICA9IEwoaSxqKSBmb3Igajw9aTw9bWluKG4saitrZCkuCioKKiAgTERBQiAg\nICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbGVhZGluZyBkaW1lbnNpb24gb2YgdGhl\nIGFycmF5IEFCLiAgTERBQiA+PSBLRCsxLgoqCiogIEIgICAgICAgKGlucHV0L291dHB1dCkgRE9V\nQkxFIFBSRUNJU0lPTiBhcnJheSwgZGltZW5zaW9uIChMREIsTlJIUykKKiAgICAgICAgICBPbiBl\nbnRyeSwgdGhlIHJpZ2h0IGhhbmQgc2lkZSBtYXRyaXggQi4KKiAgICAgICAgICBPbiBleGl0LCB0\naGUgc29sdXRpb24gbWF0cml4IFguCioKKiAgTERCICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAg\nICAgICBUaGUgbGVhZGluZyBkaW1lbnNpb24gb2YgdGhlIGFycmF5IEIuICBMREIgPj0gbWF4KDEs\nTikuCioKKiAgSU5GTyAgICAob3V0cHV0KSBJTlRFR0VSCiogICAgICAgICAgPSAwOiAgc3VjY2Vz\nc2Z1bCBleGl0CiogICAgICAgICAgPCAwOiAgaWYgSU5GTyA9IC1pLCB0aGUgaS10aCBhcmd1bWVu\ndCBoYWQgYW4gaWxsZWdhbCB2YWx1ZQoqCnLgBAAAaIZohymBcuEEAAB9cuIEAAAoaIqJaItojHVi\naJiKAhoBaJlYDgAAAGRwYnRyc18yODIudHh0cuMEAAB1YmibigIaAWicWAUAAABwYnRyc3LkBAAA\naJiKAUp1Ymh9aGFdaH6HUnLlBAAAfXLmBAAAKGiBWAMAAABIUERy5wQAAGiDWAQAAABiYW5kcugE\nAABocVgrAAAAY29tcHV0YXRpb25hbCwgc29sdmUgQSpYID0gQiB1c2luZyBDaG9sZXNreXLpBAAA\naIZohymBcuoEAAB9cusEAAAoaIqJaItojHViaI1YLQAAAGh0dHA6Ly93d3cubmV0bGliLm9yZy9s\nYXBhY2svY29tcGxleC9jcGJ0cnMuZnLsBAAAaI9YAQAAAGNokGh9aJFdaH6HUnLtBAAAfXLuBAAA\nKGiUWOcIAAAgICAgICBTVUJST1VUSU5FIENQQlRSUyggVVBMTywgTiwgS0QsIE5SSFMsIEFCLCBM\nREFCLCBCLCBMREIsIElORk8gKQoqCiogIC0tIExBUEFDSyByb3V0aW5lICh2ZXJzaW9uIDMuMy4x\nKSAtLQoqICAtLSBMQVBBQ0sgaXMgYSBzb2Z0d2FyZSBwYWNrYWdlIHByb3ZpZGVkIGJ5IFVuaXYu\nIG9mIFRlbm5lc3NlZSwgICAgLS0KKiAgLS0gVW5pdi4gb2YgQ2FsaWZvcm5pYSBCZXJrZWxleSwg\nVW5pdi4gb2YgQ29sb3JhZG8gRGVudmVyIGFuZCBOQUcgTHRkLi4tLQoqICAtLSBBcHJpbCAyMDEx\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0K\nKgoqICAgICAuLiBTY2FsYXIgQXJndW1lbnRzIC4uCiAgICAgIENIQVJBQ1RFUiAgICAgICAgICBV\nUExPCiAgICAgIElOVEVHRVIgICAgICAgICAgICBJTkZPLCBLRCwgTERBQiwgTERCLCBOLCBOUkhT\nCiogICAgIC4uCiogICAgIC4uIEFycmF5IEFyZ3VtZW50cyAuLgogICAgICBDT01QTEVYICAgICAg\nICAgICAgQUIoIExEQUIsICogKSwgQiggTERCLCAqICkKKiAgICAgLi4KKgoqICBQdXJwb3NlCiog\nID09PT09PT0KKgoqICBDUEJUUlMgc29sdmVzIGEgc3lzdGVtIG9mIGxpbmVhciBlcXVhdGlvbnMg\nQSpYID0gQiB3aXRoIGEgSGVybWl0aWFuCiogIHBvc2l0aXZlIGRlZmluaXRlIGJhbmQgbWF0cml4\nIEEgdXNpbmcgdGhlIENob2xlc2t5IGZhY3Rvcml6YXRpb24KKiAgQSA9IFUqKkgqVSBvciBBID0g\nTCpMKipIIGNvbXB1dGVkIGJ5IENQQlRSRi4KKgoqICBBcmd1bWVudHMKKiAgPT09PT09PT09CioK\nKiAgVVBMTyAgICAoaW5wdXQpIENIQVJBQ1RFUioxCiogICAgICAgICAgPSAnVSc6ICBVcHBlciB0\ncmlhbmd1bGFyIGZhY3RvciBzdG9yZWQgaW4gQUI7CiogICAgICAgICAgPSAnTCc6ICBMb3dlciB0\ncmlhbmd1bGFyIGZhY3RvciBzdG9yZWQgaW4gQUIuCioKKiAgTiAgICAgICAoaW5wdXQpIElOVEVH\nRVIKKiAgICAgICAgICBUaGUgb3JkZXIgb2YgdGhlIG1hdHJpeCBBLiAgTiA+PSAwLgoqCiogIEtE\nICAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG51bWJlciBvZiBzdXBlcmRpYWdv\nbmFscyBvZiB0aGUgbWF0cml4IEEgaWYgVVBMTyA9ICdVJywKKiAgICAgICAgICBvciB0aGUgbnVt\nYmVyIG9mIHN1YmRpYWdvbmFscyBpZiBVUExPID0gJ0wnLiAgS0QgPj0gMC4KKgoqICBOUkhTICAg\nIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2YgcmlnaHQgaGFuZCBzaWRl\ncywgaS5lLiwgdGhlIG51bWJlciBvZiBjb2x1bW5zCiogICAgICAgICAgb2YgdGhlIG1hdHJpeCBC\nLiAgTlJIUyA+PSAwLgoqCiogIEFCICAgICAgKGlucHV0KSBDT01QTEVYIGFycmF5LCBkaW1lbnNp\nb24gKExEQUIsTikKKiAgICAgICAgICBUaGUgdHJpYW5ndWxhciBmYWN0b3IgVSBvciBMIGZyb20g\ndGhlIENob2xlc2t5IGZhY3Rvcml6YXRpb24KKiAgICAgICAgICBBID0gVSoqSCpVIG9yIEEgPSBM\nKkwqKkggb2YgdGhlIGJhbmQgbWF0cml4IEEsIHN0b3JlZCBpbiB0aGUKKiAgICAgICAgICBmaXJz\ndCBLRCsxIHJvd3Mgb2YgdGhlIGFycmF5LiAgVGhlIGotdGggY29sdW1uIG9mIFUgb3IgTCBpcwoq\nICAgICAgICAgIHN0b3JlZCBpbiB0aGUgai10aCBjb2x1bW4gb2YgdGhlIGFycmF5IEFCIGFzIGZv\nbGxvd3M6CiogICAgICAgICAgaWYgVVBMTyA9J1UnLCBBQihrZCsxK2ktaixqKSA9IFUoaSxqKSBm\nb3IgbWF4KDEsai1rZCk8PWk8PWo7CiogICAgICAgICAgaWYgVVBMTyA9J0wnLCBBQigxK2ktaixq\nKSAgICA9IEwoaSxqKSBmb3Igajw9aTw9bWluKG4saitrZCkuCioKKiAgTERBQiAgICAoaW5wdXQp\nIElOVEVHRVIKKiAgICAgICAgICBUaGUgbGVhZGluZyBkaW1lbnNpb24gb2YgdGhlIGFycmF5IEFC\nLiAgTERBQiA+PSBLRCsxLgoqCiogIEIgICAgICAgKGlucHV0L291dHB1dCkgQ09NUExFWCBhcnJh\neSwgZGltZW5zaW9uIChMREIsTlJIUykKKiAgICAgICAgICBPbiBlbnRyeSwgdGhlIHJpZ2h0IGhh\nbmQgc2lkZSBtYXRyaXggQi4KKiAgICAgICAgICBPbiBleGl0LCB0aGUgc29sdXRpb24gbWF0cml4\nIFguCioKKiAgTERCICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbGVhZGluZyBk\naW1lbnNpb24gb2YgdGhlIGFycmF5IEIuICBMREIgPj0gbWF4KDEsTikuCioKKiAgSU5GTyAgICAo\nb3V0cHV0KSBJTlRFR0VSCiogICAgICAgICAgPSAwOiAgc3VjY2Vzc2Z1bCBleGl0CiogICAgICAg\nICAgPCAwOiAgaWYgSU5GTyA9IC1pLCB0aGUgaS10aCBhcmd1bWVudCBoYWQgYW4gaWxsZWdhbCB2\nYWx1ZQoqCnLvBAAAaIZohymBcvAEAAB9cvEEAAAoaIqJaItojHViaJiKAhsBaJlYDgAAAGNwYnRy\nc18yODMudHh0cvIEAAB1YmibigIbAWicWAUAAABwYnRyc3LzBAAAaJiKAUt1Ymh9aGFdaH6HUnL0\nBAAAfXL1BAAAKGiBWAMAAABIUERy9gQAAGiDWAQAAABiYW5kcvcEAABocVgrAAAAY29tcHV0YXRp\nb25hbCwgc29sdmUgQSpYID0gQiB1c2luZyBDaG9sZXNreXL4BAAAaIZohymBcvkEAAB9cvoEAAAo\naIqJaItojHViaI1YLwAAAGh0dHA6Ly93d3cubmV0bGliLm9yZy9sYXBhY2svY29tcGxleDE2L3pw\nYnRycy5mcvsEAABoj1gBAAAAemiQaH1okV1ofodScvwEAAB9cv0EAAAoaJRY7wgAACAgICAgIFNV\nQlJPVVRJTkUgWlBCVFJTKCBVUExPLCBOLCBLRCwgTlJIUywgQUIsIExEQUIsIEIsIExEQiwgSU5G\nTyApCioKKiAgLS0gTEFQQUNLIHJvdXRpbmUgKHZlcnNpb24gMy4zLjEpIC0tCiogIC0tIExBUEFD\nSyBpcyBhIHNvZnR3YXJlIHBhY2thZ2UgcHJvdmlkZWQgYnkgVW5pdi4gb2YgVGVubmVzc2VlLCAg\nICAtLQoqICAtLSBVbml2LiBvZiBDYWxpZm9ybmlhIEJlcmtlbGV5LCBVbml2LiBvZiBDb2xvcmFk\nbyBEZW52ZXIgYW5kIE5BRyBMdGQuLi0tCiogIC0tIEFwcmlsIDIwMTEgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLQoqCiogICAgIC4uIFNjYWxh\nciBBcmd1bWVudHMgLi4KICAgICAgQ0hBUkFDVEVSICAgICAgICAgIFVQTE8KICAgICAgSU5URUdF\nUiAgICAgICAgICAgIElORk8sIEtELCBMREFCLCBMREIsIE4sIE5SSFMKKiAgICAgLi4KKiAgICAg\nLi4gQXJyYXkgQXJndW1lbnRzIC4uCiAgICAgIENPTVBMRVgqMTYgICAgICAgICBBQiggTERBQiwg\nKiApLCBCKCBMREIsICogKQoqICAgICAuLgoqCiogIFB1cnBvc2UKKiAgPT09PT09PQoqCiogIFpQ\nQlRSUyBzb2x2ZXMgYSBzeXN0ZW0gb2YgbGluZWFyIGVxdWF0aW9ucyBBKlggPSBCIHdpdGggYSBI\nZXJtaXRpYW4KKiAgcG9zaXRpdmUgZGVmaW5pdGUgYmFuZCBtYXRyaXggQSB1c2luZyB0aGUgQ2hv\nbGVza3kgZmFjdG9yaXphdGlvbgoqICBBID0gVSoqSCAqVSBvciBBID0gTCpMKipIIGNvbXB1dGVk\nIGJ5IFpQQlRSRi4KKgoqICBBcmd1bWVudHMKKiAgPT09PT09PT09CioKKiAgVVBMTyAgICAoaW5w\ndXQpIENIQVJBQ1RFUioxCiogICAgICAgICAgPSAnVSc6ICBVcHBlciB0cmlhbmd1bGFyIGZhY3Rv\nciBzdG9yZWQgaW4gQUI7CiogICAgICAgICAgPSAnTCc6ICBMb3dlciB0cmlhbmd1bGFyIGZhY3Rv\nciBzdG9yZWQgaW4gQUIuCioKKiAgTiAgICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBU\naGUgb3JkZXIgb2YgdGhlIG1hdHJpeCBBLiAgTiA+PSAwLgoqCiogIEtEICAgICAgKGlucHV0KSBJ\nTlRFR0VSCiogICAgICAgICAgVGhlIG51bWJlciBvZiBzdXBlcmRpYWdvbmFscyBvZiB0aGUgbWF0\ncml4IEEgaWYgVVBMTyA9ICdVJywKKiAgICAgICAgICBvciB0aGUgbnVtYmVyIG9mIHN1YmRpYWdv\nbmFscyBpZiBVUExPID0gJ0wnLiAgS0QgPj0gMC4KKgoqICBOUkhTICAgIChpbnB1dCkgSU5URUdF\nUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2YgcmlnaHQgaGFuZCBzaWRlcywgaS5lLiwgdGhlIG51\nbWJlciBvZiBjb2x1bW5zCiogICAgICAgICAgb2YgdGhlIG1hdHJpeCBCLiAgTlJIUyA+PSAwLgoq\nCiogIEFCICAgICAgKGlucHV0KSBDT01QTEVYKjE2IGFycmF5LCBkaW1lbnNpb24gKExEQUIsTikK\nKiAgICAgICAgICBUaGUgdHJpYW5ndWxhciBmYWN0b3IgVSBvciBMIGZyb20gdGhlIENob2xlc2t5\nIGZhY3Rvcml6YXRpb24KKiAgICAgICAgICBBID0gVSoqSCAqVSBvciBBID0gTCpMKipIIG9mIHRo\nZSBiYW5kIG1hdHJpeCBBLCBzdG9yZWQgaW4gdGhlCiogICAgICAgICAgZmlyc3QgS0QrMSByb3dz\nIG9mIHRoZSBhcnJheS4gIFRoZSBqLXRoIGNvbHVtbiBvZiBVIG9yIEwgaXMKKiAgICAgICAgICBz\ndG9yZWQgaW4gdGhlIGotdGggY29sdW1uIG9mIHRoZSBhcnJheSBBQiBhcyBmb2xsb3dzOgoqICAg\nICAgICAgIGlmIFVQTE8gPSdVJywgQUIoa2QrMStpLWosaikgPSBVKGksaikgZm9yIG1heCgxLGot\na2QpPD1pPD1qOwoqICAgICAgICAgIGlmIFVQTE8gPSdMJywgQUIoMStpLWosaikgICAgPSBMKGks\naikgZm9yIGo8PWk8PW1pbihuLGora2QpLgoqCiogIExEQUIgICAgKGlucHV0KSBJTlRFR0VSCiog\nICAgICAgICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBBQi4gIExEQUIgPj0g\nS0QrMS4KKgoqICBCICAgICAgIChpbnB1dC9vdXRwdXQpIENPTVBMRVgqMTYgYXJyYXksIGRpbWVu\nc2lvbiAoTERCLE5SSFMpCiogICAgICAgICAgT24gZW50cnksIHRoZSByaWdodCBoYW5kIHNpZGUg\nbWF0cml4IEIuCiogICAgICAgICAgT24gZXhpdCwgdGhlIHNvbHV0aW9uIG1hdHJpeCBYLgoqCiog\nIExEQiAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGltZW5zaW9u\nIG9mIHRoZSBhcnJheSBCLiAgTERCID49IG1heCgxLE4pLgoqCiogIElORk8gICAgKG91dHB1dCkg\nSU5URUdFUgoqICAgICAgICAgID0gMDogIHN1Y2Nlc3NmdWwgZXhpdAoqICAgICAgICAgIDwgMDog\nIGlmIElORk8gPSAtaSwgdGhlIGktdGggYXJndW1lbnQgaGFkIGFuIGlsbGVnYWwgdmFsdWUKKgpy\n/gQAAGiGaIcpgXL/BAAAfXIABQAAKGiKiWiLaIx1YmiYigIcAWiZWA4AAAB6cGJ0cnNfMjg0LnR4\ndHIBBQAAdWJom4oCHAFonFgFAAAAcGJ0cnNyAgUAAGiYigFMdWJofWhhXWh+h1JyAwUAAH1yBAUA\nAChogVgDAAAAU1BEcgUFAABog1gLAAAAdHJpZGlhZ29uYWxyBgUAAGhxWC8AAABjb21wdXRhdGlv\nbmFsLCBzb2x2ZSBBKlggPSBCIHVzaW5nIHRoZSBMKkQqTCoqVHIHBQAAaIZohymBcggFAAB9cgkF\nAAAoaIqJaItojHViaI1YLAAAAGh0dHA6Ly93d3cubmV0bGliLm9yZy9sYXBhY2svc2luZ2xlL3Nw\ndHRycy5mcgoFAABoj1gBAAAAc2iQaH1okV1ofodScgsFAAB9cgwFAAAoaJRYtgcAACAgICAgIFNV\nQlJPVVRJTkUgU1BUVFJTKCBOLCBOUkhTLCBELCBFLCBCLCBMREIsIElORk8gKQoqCiogIC0tIExB\nUEFDSyByb3V0aW5lICh2ZXJzaW9uIDMuMy4xKSAtLQoqICAtLSBMQVBBQ0sgaXMgYSBzb2Z0d2Fy\nZSBwYWNrYWdlIHByb3ZpZGVkIGJ5IFVuaXYuIG9mIFRlbm5lc3NlZSwgICAgLS0KKiAgLS0gVW5p\ndi4gb2YgQ2FsaWZvcm5pYSBCZXJrZWxleSwgVW5pdi4gb2YgQ29sb3JhZG8gRGVudmVyIGFuZCBO\nQUcgTHRkLi4tLQoqICAtLSBBcHJpbCAyMDExICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgLS0KKgoqICAgICAuLiBTY2FsYXIgQXJndW1lbnRzIC4u\nCiAgICAgIElOVEVHRVIgICAgICAgICAgICBJTkZPLCBMREIsIE4sIE5SSFMKKiAgICAgLi4KKiAg\nICAgLi4gQXJyYXkgQXJndW1lbnRzIC4uCiAgICAgIFJFQUwgICAgICAgICAgICAgICBCKCBMREIs\nICogKSwgRCggKiApLCBFKCAqICkKKiAgICAgLi4KKgoqICBQdXJwb3NlCiogID09PT09PT0KKgoq\nICBTUFRUUlMgc29sdmVzIGEgdHJpZGlhZ29uYWwgc3lzdGVtIG9mIHRoZSBmb3JtCiogICAgIEEg\nKiBYID0gQgoqICB1c2luZyB0aGUgTCpEKkwqKlQgZmFjdG9yaXphdGlvbiBvZiBBIGNvbXB1dGVk\nIGJ5IFNQVFRSRi4gIEQgaXMgYQoqICBkaWFnb25hbCBtYXRyaXggc3BlY2lmaWVkIGluIHRoZSB2\nZWN0b3IgRCwgTCBpcyBhIHVuaXQgYmlkaWFnb25hbAoqICBtYXRyaXggd2hvc2Ugc3ViZGlhZ29u\nYWwgaXMgc3BlY2lmaWVkIGluIHRoZSB2ZWN0b3IgRSwgYW5kIFggYW5kIEIKKiAgYXJlIE4gYnkg\nTlJIUyBtYXRyaWNlcy4KKgoqICBBcmd1bWVudHMKKiAgPT09PT09PT09CioKKiAgTiAgICAgICAo\naW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgb3JkZXIgb2YgdGhlIHRyaWRpYWdvbmFsIG1h\ndHJpeCBBLiAgTiA+PSAwLgoqCiogIE5SSFMgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAg\nVGhlIG51bWJlciBvZiByaWdodCBoYW5kIHNpZGVzLCBpLmUuLCB0aGUgbnVtYmVyIG9mIGNvbHVt\nbnMKKiAgICAgICAgICBvZiB0aGUgbWF0cml4IEIuICBOUkhTID49IDAuCioKKiAgRCAgICAgICAo\naW5wdXQpIFJFQUwgYXJyYXksIGRpbWVuc2lvbiAoTikKKiAgICAgICAgICBUaGUgbiBkaWFnb25h\nbCBlbGVtZW50cyBvZiB0aGUgZGlhZ29uYWwgbWF0cml4IEQgZnJvbSB0aGUKKiAgICAgICAgICBM\nKkQqTCoqVCBmYWN0b3JpemF0aW9uIG9mIEEuCioKKiAgRSAgICAgICAoaW5wdXQpIFJFQUwgYXJy\nYXksIGRpbWVuc2lvbiAoTi0xKQoqICAgICAgICAgIFRoZSAobi0xKSBzdWJkaWFnb25hbCBlbGVt\nZW50cyBvZiB0aGUgdW5pdCBiaWRpYWdvbmFsIGZhY3RvcgoqICAgICAgICAgIEwgZnJvbSB0aGUg\nTCpEKkwqKlQgZmFjdG9yaXphdGlvbiBvZiBBLiAgRSBjYW4gYWxzbyBiZSByZWdhcmRlZAoqICAg\nICAgICAgIGFzIHRoZSBzdXBlcmRpYWdvbmFsIG9mIHRoZSB1bml0IGJpZGlhZ29uYWwgZmFjdG9y\nIFUgZnJvbSB0aGUKKiAgICAgICAgICBmYWN0b3JpemF0aW9uIEEgPSBVKipUKkQqVS4KKgoqICBC\nICAgICAgIChpbnB1dC9vdXRwdXQpIFJFQUwgYXJyYXksIGRpbWVuc2lvbiAoTERCLE5SSFMpCiog\nICAgICAgICAgT24gZW50cnksIHRoZSByaWdodCBoYW5kIHNpZGUgdmVjdG9ycyBCIGZvciB0aGUg\nc3lzdGVtIG9mCiogICAgICAgICAgbGluZWFyIGVxdWF0aW9ucy4KKiAgICAgICAgICBPbiBleGl0\nLCB0aGUgc29sdXRpb24gdmVjdG9ycywgWC4KKgoqICBMREIgICAgIChpbnB1dCkgSU5URUdFUgoq\nICAgICAgICAgIFRoZSBsZWFkaW5nIGRpbWVuc2lvbiBvZiB0aGUgYXJyYXkgQi4gIExEQiA+PSBt\nYXgoMSxOKS4KKgoqICBJTkZPICAgIChvdXRwdXQpIElOVEVHRVIKKiAgICAgICAgICA9IDA6IHN1\nY2Nlc3NmdWwgZXhpdAoqICAgICAgICAgIDwgMDogaWYgSU5GTyA9IC1rLCB0aGUgay10aCBhcmd1\nbWVudCBoYWQgYW4gaWxsZWdhbCB2YWx1ZQoqCnINBQAAaIZohymBcg4FAAB9cg8FAAAoaIqJaIto\njHViaJiKAh0BaJlYDgAAAHNwdHRyc18yODUudHh0chAFAAB1YmibigIdAWicWAUAAABwdHRyc3IR\nBQAAaJiKAU11Ymh9aGFdaH6HUnISBQAAfXITBQAAKGiBWAMAAABTUERyFAUAAGiDWAsAAAB0cmlk\naWFnb25hbHIVBQAAaHFYMAAAAGNvbXB1dGF0aW9uYWwsIHNvbHZlIEEqWCA9IEIgdXNpbmcgdGhl\nIEwqRCpMKipUIHIWBQAAaIZohymBchcFAAB9chgFAAAoaIqJaItojHViaI1YLAAAAGh0dHA6Ly93\nd3cubmV0bGliLm9yZy9sYXBhY2svZG91YmxlL2RwdHRycy5mchkFAABoj1gBAAAAZGiQaH1okV1o\nfodSchoFAAB9chsFAAAoaJRY2gcAACAgICAgIFNVQlJPVVRJTkUgRFBUVFJTKCBOLCBOUkhTLCBE\nLCBFLCBCLCBMREIsIElORk8gKQoqCiogIC0tIExBUEFDSyByb3V0aW5lICh2ZXJzaW9uIDMuMy4x\nKSAtLQoqICAtLSBMQVBBQ0sgaXMgYSBzb2Z0d2FyZSBwYWNrYWdlIHByb3ZpZGVkIGJ5IFVuaXYu\nIG9mIFRlbm5lc3NlZSwgICAgLS0KKiAgLS0gVW5pdi4gb2YgQ2FsaWZvcm5pYSBCZXJrZWxleSwg\nVW5pdi4gb2YgQ29sb3JhZG8gRGVudmVyIGFuZCBOQUcgTHRkLi4tLQoqICAtLSBBcHJpbCAyMDEx\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0K\nKgoqICAgICAuLiBTY2FsYXIgQXJndW1lbnRzIC4uCiAgICAgIElOVEVHRVIgICAgICAgICAgICBJ\nTkZPLCBMREIsIE4sIE5SSFMKKiAgICAgLi4KKiAgICAgLi4gQXJyYXkgQXJndW1lbnRzIC4uCiAg\nICAgIERPVUJMRSBQUkVDSVNJT04gICBCKCBMREIsICogKSwgRCggKiApLCBFKCAqICkKKiAgICAg\nLi4KKgoqICBQdXJwb3NlCiogID09PT09PT0KKgoqICBEUFRUUlMgc29sdmVzIGEgdHJpZGlhZ29u\nYWwgc3lzdGVtIG9mIHRoZSBmb3JtCiogICAgIEEgKiBYID0gQgoqICB1c2luZyB0aGUgTCpEKkwq\nKlQgZmFjdG9yaXphdGlvbiBvZiBBIGNvbXB1dGVkIGJ5IERQVFRSRi4gIEQgaXMgYQoqICBkaWFn\nb25hbCBtYXRyaXggc3BlY2lmaWVkIGluIHRoZSB2ZWN0b3IgRCwgTCBpcyBhIHVuaXQgYmlkaWFn\nb25hbAoqICBtYXRyaXggd2hvc2Ugc3ViZGlhZ29uYWwgaXMgc3BlY2lmaWVkIGluIHRoZSB2ZWN0\nb3IgRSwgYW5kIFggYW5kIEIKKiAgYXJlIE4gYnkgTlJIUyBtYXRyaWNlcy4KKgoqICBBcmd1bWVu\ndHMKKiAgPT09PT09PT09CioKKiAgTiAgICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBU\naGUgb3JkZXIgb2YgdGhlIHRyaWRpYWdvbmFsIG1hdHJpeCBBLiAgTiA+PSAwLgoqCiogIE5SSFMg\nICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG51bWJlciBvZiByaWdodCBoYW5kIHNp\nZGVzLCBpLmUuLCB0aGUgbnVtYmVyIG9mIGNvbHVtbnMKKiAgICAgICAgICBvZiB0aGUgbWF0cml4\nIEIuICBOUkhTID49IDAuCioKKiAgRCAgICAgICAoaW5wdXQpIERPVUJMRSBQUkVDSVNJT04gYXJy\nYXksIGRpbWVuc2lvbiAoTikKKiAgICAgICAgICBUaGUgbiBkaWFnb25hbCBlbGVtZW50cyBvZiB0\naGUgZGlhZ29uYWwgbWF0cml4IEQgZnJvbSB0aGUKKiAgICAgICAgICBMKkQqTCoqVCBmYWN0b3Jp\nemF0aW9uIG9mIEEuCioKKiAgRSAgICAgICAoaW5wdXQpIERPVUJMRSBQUkVDSVNJT04gYXJyYXks\nIGRpbWVuc2lvbiAoTi0xKQoqICAgICAgICAgIFRoZSAobi0xKSBzdWJkaWFnb25hbCBlbGVtZW50\ncyBvZiB0aGUgdW5pdCBiaWRpYWdvbmFsIGZhY3RvcgoqICAgICAgICAgIEwgZnJvbSB0aGUgTCpE\nKkwqKlQgZmFjdG9yaXphdGlvbiBvZiBBLiAgRSBjYW4gYWxzbyBiZSByZWdhcmRlZAoqICAgICAg\nICAgIGFzIHRoZSBzdXBlcmRpYWdvbmFsIG9mIHRoZSB1bml0IGJpZGlhZ29uYWwgZmFjdG9yIFUg\nZnJvbSB0aGUKKiAgICAgICAgICBmYWN0b3JpemF0aW9uIEEgPSBVKipUKkQqVS4KKgoqICBCICAg\nICAgIChpbnB1dC9vdXRwdXQpIERPVUJMRSBQUkVDSVNJT04gYXJyYXksIGRpbWVuc2lvbiAoTERC\nLE5SSFMpCiogICAgICAgICAgT24gZW50cnksIHRoZSByaWdodCBoYW5kIHNpZGUgdmVjdG9ycyBC\nIGZvciB0aGUgc3lzdGVtIG9mCiogICAgICAgICAgbGluZWFyIGVxdWF0aW9ucy4KKiAgICAgICAg\nICBPbiBleGl0LCB0aGUgc29sdXRpb24gdmVjdG9ycywgWC4KKgoqICBMREIgICAgIChpbnB1dCkg\nSU5URUdFUgoqICAgICAgICAgIFRoZSBsZWFkaW5nIGRpbWVuc2lvbiBvZiB0aGUgYXJyYXkgQi4g\nIExEQiA+PSBtYXgoMSxOKS4KKgoqICBJTkZPICAgIChvdXRwdXQpIElOVEVHRVIKKiAgICAgICAg\nICA9IDA6IHN1Y2Nlc3NmdWwgZXhpdAoqICAgICAgICAgIDwgMDogaWYgSU5GTyA9IC1rLCB0aGUg\nay10aCBhcmd1bWVudCBoYWQgYW4gaWxsZWdhbCB2YWx1ZQoqCnIcBQAAaIZohymBch0FAAB9ch4F\nAAAoaIqJaItojHViaJiKAh4BaJlYDgAAAGRwdHRyc18yODYudHh0ch8FAAB1YmibigIeAWicWAUA\nAABwdHRyc3IgBQAAaJiKAU51Ymh9aGFdaH6HUnIhBQAAfXIiBQAAKGiBWAMAAABIUERyIwUAAGiD\nWAsAAAB0cmlkaWFnb25hbHIkBQAAaHFYPwAAAGNvbXB1dGF0aW9uYWwsIHNvbHZlIEEqWCA9IEIg\ndXNpbmcgQSA9IFUqKkgqRCpVIG9yIEEgPSBMKkQqTCoqSHIlBQAAaIZohymBciYFAAB9cicFAAAo\naIqJaItojHViaI1YLQAAAGh0dHA6Ly93d3cubmV0bGliLm9yZy9sYXBhY2svY29tcGxleC9jcHR0\ncnMuZnIoBQAAaI9YAQAAAGNokGh9aJFdaH6HUnIpBQAAfXIqBQAAKGiUWKAJAAAgICAgICBTVUJS\nT1VUSU5FIENQVFRSUyggVVBMTywgTiwgTlJIUywgRCwgRSwgQiwgTERCLCBJTkZPICkKKgoqICAt\nLSBMQVBBQ0sgcm91dGluZSAodmVyc2lvbiAzLjMuMSkgLS0KKiAgLS0gTEFQQUNLIGlzIGEgc29m\ndHdhcmUgcGFja2FnZSBwcm92aWRlZCBieSBVbml2LiBvZiBUZW5uZXNzZWUsICAgIC0tCiogIC0t\nIFVuaXYuIG9mIENhbGlmb3JuaWEgQmVya2VsZXksIFVuaXYuIG9mIENvbG9yYWRvIERlbnZlciBh\nbmQgTkFHIEx0ZC4uLS0KKiAgLS0gQXByaWwgMjAxMSAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tCioKKiAgICAgLi4gU2NhbGFyIEFyZ3VtZW50\ncyAuLgogICAgICBDSEFSQUNURVIgICAgICAgICAgVVBMTwogICAgICBJTlRFR0VSICAgICAgICAg\nICAgSU5GTywgTERCLCBOLCBOUkhTCiogICAgIC4uCiogICAgIC4uIEFycmF5IEFyZ3VtZW50cyAu\nLgogICAgICBSRUFMICAgICAgICAgICAgICAgRCggKiApCiAgICAgIENPTVBMRVggICAgICAgICAg\nICBCKCBMREIsICogKSwgRSggKiApCiogICAgIC4uCioKKiAgUHVycG9zZQoqICA9PT09PT09CioK\nKiAgQ1BUVFJTIHNvbHZlcyBhIHRyaWRpYWdvbmFsIHN5c3RlbSBvZiB0aGUgZm9ybQoqICAgICBB\nICogWCA9IEIKKiAgdXNpbmcgdGhlIGZhY3Rvcml6YXRpb24gQSA9IFUqKkgqRCpVIG9yIEEgPSBM\nKkQqTCoqSCBjb21wdXRlZCBieSBDUFRUUkYuCiogIEQgaXMgYSBkaWFnb25hbCBtYXRyaXggc3Bl\nY2lmaWVkIGluIHRoZSB2ZWN0b3IgRCwgVSAob3IgTCkgaXMgYSB1bml0CiogIGJpZGlhZ29uYWwg\nbWF0cml4IHdob3NlIHN1cGVyZGlhZ29uYWwgKHN1YmRpYWdvbmFsKSBpcyBzcGVjaWZpZWQgaW4K\nKiAgdGhlIHZlY3RvciBFLCBhbmQgWCBhbmQgQiBhcmUgTiBieSBOUkhTIG1hdHJpY2VzLgoqCiog\nIEFyZ3VtZW50cwoqICA9PT09PT09PT0KKgoqICBVUExPICAgIChpbnB1dCkgQ0hBUkFDVEVSKjEK\nKiAgICAgICAgICBTcGVjaWZpZXMgdGhlIGZvcm0gb2YgdGhlIGZhY3Rvcml6YXRpb24gYW5kIHdo\nZXRoZXIgdGhlCiogICAgICAgICAgdmVjdG9yIEUgaXMgdGhlIHN1cGVyZGlhZ29uYWwgb2YgdGhl\nIHVwcGVyIGJpZGlhZ29uYWwgZmFjdG9yCiogICAgICAgICAgVSBvciB0aGUgc3ViZGlhZ29uYWwg\nb2YgdGhlIGxvd2VyIGJpZGlhZ29uYWwgZmFjdG9yIEwuCiogICAgICAgICAgPSAnVSc6ICBBID0g\nVSoqSCpEKlUsIEUgaXMgdGhlIHN1cGVyZGlhZ29uYWwgb2YgVQoqICAgICAgICAgID0gJ0wnOiAg\nQSA9IEwqRCpMKipILCBFIGlzIHRoZSBzdWJkaWFnb25hbCBvZiBMCioKKiAgTiAgICAgICAoaW5w\ndXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgb3JkZXIgb2YgdGhlIHRyaWRpYWdvbmFsIG1hdHJp\neCBBLiAgTiA+PSAwLgoqCiogIE5SSFMgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhl\nIG51bWJlciBvZiByaWdodCBoYW5kIHNpZGVzLCBpLmUuLCB0aGUgbnVtYmVyIG9mIGNvbHVtbnMK\nKiAgICAgICAgICBvZiB0aGUgbWF0cml4IEIuICBOUkhTID49IDAuCioKKiAgRCAgICAgICAoaW5w\ndXQpIFJFQUwgYXJyYXksIGRpbWVuc2lvbiAoTikKKiAgICAgICAgICBUaGUgbiBkaWFnb25hbCBl\nbGVtZW50cyBvZiB0aGUgZGlhZ29uYWwgbWF0cml4IEQgZnJvbSB0aGUKKiAgICAgICAgICBmYWN0\nb3JpemF0aW9uIEEgPSBVKipIKkQqVSBvciBBID0gTCpEKkwqKkguCioKKiAgRSAgICAgICAoaW5w\ndXQpIENPTVBMRVggYXJyYXksIGRpbWVuc2lvbiAoTi0xKQoqICAgICAgICAgIElmIFVQTE8gPSAn\nVScsIHRoZSAobi0xKSBzdXBlcmRpYWdvbmFsIGVsZW1lbnRzIG9mIHRoZSB1bml0CiogICAgICAg\nICAgYmlkaWFnb25hbCBmYWN0b3IgVSBmcm9tIHRoZSBmYWN0b3JpemF0aW9uIEEgPSBVKipIKkQq\nVS4KKiAgICAgICAgICBJZiBVUExPID0gJ0wnLCB0aGUgKG4tMSkgc3ViZGlhZ29uYWwgZWxlbWVu\ndHMgb2YgdGhlIHVuaXQKKiAgICAgICAgICBiaWRpYWdvbmFsIGZhY3RvciBMIGZyb20gdGhlIGZh\nY3Rvcml6YXRpb24gQSA9IEwqRCpMKipILgoqCiogIEIgICAgICAgKGlucHV0L291dHB1dCkgUkVB\nTCBhcnJheSwgZGltZW5zaW9uIChMREIsTlJIUykKKiAgICAgICAgICBPbiBlbnRyeSwgdGhlIHJp\nZ2h0IGhhbmQgc2lkZSB2ZWN0b3JzIEIgZm9yIHRoZSBzeXN0ZW0gb2YKKiAgICAgICAgICBsaW5l\nYXIgZXF1YXRpb25zLgoqICAgICAgICAgIE9uIGV4aXQsIHRoZSBzb2x1dGlvbiB2ZWN0b3JzLCBY\nLgoqCiogIExEQiAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGlt\nZW5zaW9uIG9mIHRoZSBhcnJheSBCLiAgTERCID49IG1heCgxLE4pLgoqCiogIElORk8gICAgKG91\ndHB1dCkgSU5URUdFUgoqICAgICAgICAgID0gMDogc3VjY2Vzc2Z1bCBleGl0CiogICAgICAgICAg\nPCAwOiBpZiBJTkZPID0gLWssIHRoZSBrLXRoIGFyZ3VtZW50IGhhZCBhbiBpbGxlZ2FsIHZhbHVl\nCioKcisFAABohmiHKYFyLAUAAH1yLQUAAChoioloi2iMdWJomIoCHwFomVgOAAAAY3B0dHJzXzI4\nNy50eHRyLgUAAHViaJuKAh8BaJxYBQAAAHB0dHJzci8FAABomIoBT3ViaH1oYV1ofodScjAFAAB9\ncjEFAAAoaIFYAwAAAEhQRHIyBQAAaINYCwAAAHRyaWRpYWdvbmFscjMFAABocVg/AAAAY29tcHV0\nYXRpb25hbCwgc29sdmUgQSpYID0gQiB1c2luZyBBID0gVSoqSCpEKlUgb3IgQSA9IEwqRCpMKipI\ncjQFAABohmiHKYFyNQUAAH1yNgUAAChoioloi2iMdWJojVgvAAAAaHR0cDovL3d3dy5uZXRsaWIu\nb3JnL2xhcGFjay9jb21wbGV4MTYvenB0dHJzLmZyNwUAAGiPWAEAAAB6aJBofWiRXWh+h1JyOAUA\nAH1yOQUAACholFi/CQAAICAgICAgU1VCUk9VVElORSBaUFRUUlMoIFVQTE8sIE4sIE5SSFMsIEQs\nIEUsIEIsIExEQiwgSU5GTyApCioKKiAgLS0gTEFQQUNLIHJvdXRpbmUgKHZlcnNpb24gMy4zLjEp\nIC0tCiogIC0tIExBUEFDSyBpcyBhIHNvZnR3YXJlIHBhY2thZ2UgcHJvdmlkZWQgYnkgVW5pdi4g\nb2YgVGVubmVzc2VlLCAgICAtLQoqICAtLSBVbml2LiBvZiBDYWxpZm9ybmlhIEJlcmtlbGV5LCBV\nbml2LiBvZiBDb2xvcmFkbyBEZW52ZXIgYW5kIE5BRyBMdGQuLi0tCiogIC0tIEFwcmlsIDIwMTEg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLQoq\nCiogICAgIC4uIFNjYWxhciBBcmd1bWVudHMgLi4KICAgICAgQ0hBUkFDVEVSICAgICAgICAgIFVQ\nTE8KICAgICAgSU5URUdFUiAgICAgICAgICAgIElORk8sIExEQiwgTiwgTlJIUwoqICAgICAuLgoq\nICAgICAuLiBBcnJheSBBcmd1bWVudHMgLi4KICAgICAgRE9VQkxFIFBSRUNJU0lPTiAgIEQoICog\nKQogICAgICBDT01QTEVYKjE2ICAgICAgICAgQiggTERCLCAqICksIEUoICogKQoqICAgICAuLgoq\nCiogIFB1cnBvc2UKKiAgPT09PT09PQoqCiogIFpQVFRSUyBzb2x2ZXMgYSB0cmlkaWFnb25hbCBz\neXN0ZW0gb2YgdGhlIGZvcm0KKiAgICAgQSAqIFggPSBCCiogIHVzaW5nIHRoZSBmYWN0b3JpemF0\naW9uIEEgPSBVKipIICpEKiBVIG9yIEEgPSBMKkQqTCoqSCBjb21wdXRlZCBieSBaUFRUUkYuCiog\nIEQgaXMgYSBkaWFnb25hbCBtYXRyaXggc3BlY2lmaWVkIGluIHRoZSB2ZWN0b3IgRCwgVSAob3Ig\nTCkgaXMgYSB1bml0CiogIGJpZGlhZ29uYWwgbWF0cml4IHdob3NlIHN1cGVyZGlhZ29uYWwgKHN1\nYmRpYWdvbmFsKSBpcyBzcGVjaWZpZWQgaW4KKiAgdGhlIHZlY3RvciBFLCBhbmQgWCBhbmQgQiBh\ncmUgTiBieSBOUkhTIG1hdHJpY2VzLgoqCiogIEFyZ3VtZW50cwoqICA9PT09PT09PT0KKgoqICBV\nUExPICAgIChpbnB1dCkgQ0hBUkFDVEVSKjEKKiAgICAgICAgICBTcGVjaWZpZXMgdGhlIGZvcm0g\nb2YgdGhlIGZhY3Rvcml6YXRpb24gYW5kIHdoZXRoZXIgdGhlCiogICAgICAgICAgdmVjdG9yIEUg\naXMgdGhlIHN1cGVyZGlhZ29uYWwgb2YgdGhlIHVwcGVyIGJpZGlhZ29uYWwgZmFjdG9yCiogICAg\nICAgICAgVSBvciB0aGUgc3ViZGlhZ29uYWwgb2YgdGhlIGxvd2VyIGJpZGlhZ29uYWwgZmFjdG9y\nIEwuCiogICAgICAgICAgPSAnVSc6ICBBID0gVSoqSCAqRCpVLCBFIGlzIHRoZSBzdXBlcmRpYWdv\nbmFsIG9mIFUKKiAgICAgICAgICA9ICdMJzogIEEgPSBMKkQqTCoqSCwgRSBpcyB0aGUgc3ViZGlh\nZ29uYWwgb2YgTAoqCiogIE4gICAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG9y\nZGVyIG9mIHRoZSB0cmlkaWFnb25hbCBtYXRyaXggQS4gIE4gPj0gMC4KKgoqICBOUkhTICAgIChp\nbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2YgcmlnaHQgaGFuZCBzaWRlcywg\naS5lLiwgdGhlIG51bWJlciBvZiBjb2x1bW5zCiogICAgICAgICAgb2YgdGhlIG1hdHJpeCBCLiAg\nTlJIUyA+PSAwLgoqCiogIEQgICAgICAgKGlucHV0KSBET1VCTEUgUFJFQ0lTSU9OIGFycmF5LCBk\naW1lbnNpb24gKE4pCiogICAgICAgICAgVGhlIG4gZGlhZ29uYWwgZWxlbWVudHMgb2YgdGhlIGRp\nYWdvbmFsIG1hdHJpeCBEIGZyb20gdGhlCiogICAgICAgICAgZmFjdG9yaXphdGlvbiBBID0gVSoq\nSCAqRCpVIG9yIEEgPSBMKkQqTCoqSC4KKgoqICBFICAgICAgIChpbnB1dCkgQ09NUExFWCoxNiBh\ncnJheSwgZGltZW5zaW9uIChOLTEpCiogICAgICAgICAgSWYgVVBMTyA9ICdVJywgdGhlIChuLTEp\nIHN1cGVyZGlhZ29uYWwgZWxlbWVudHMgb2YgdGhlIHVuaXQKKiAgICAgICAgICBiaWRpYWdvbmFs\nIGZhY3RvciBVIGZyb20gdGhlIGZhY3Rvcml6YXRpb24gQSA9IFUqKkgqRCpVLgoqICAgICAgICAg\nIElmIFVQTE8gPSAnTCcsIHRoZSAobi0xKSBzdWJkaWFnb25hbCBlbGVtZW50cyBvZiB0aGUgdW5p\ndAoqICAgICAgICAgIGJpZGlhZ29uYWwgZmFjdG9yIEwgZnJvbSB0aGUgZmFjdG9yaXphdGlvbiBB\nID0gTCpEKkwqKkguCioKKiAgQiAgICAgICAoaW5wdXQvb3V0cHV0KSBET1VCTEUgUFJFQ0lTSU9O\nIGFycmF5LCBkaW1lbnNpb24gKExEQixOUkhTKQoqICAgICAgICAgIE9uIGVudHJ5LCB0aGUgcmln\naHQgaGFuZCBzaWRlIHZlY3RvcnMgQiBmb3IgdGhlIHN5c3RlbSBvZgoqICAgICAgICAgIGxpbmVh\nciBlcXVhdGlvbnMuCiogICAgICAgICAgT24gZXhpdCwgdGhlIHNvbHV0aW9uIHZlY3RvcnMsIFgu\nCioKKiAgTERCICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbGVhZGluZyBkaW1l\nbnNpb24gb2YgdGhlIGFycmF5IEIuICBMREIgPj0gbWF4KDEsTikuCioKKiAgSU5GTyAgICAob3V0\ncHV0KSBJTlRFR0VSCiogICAgICAgICAgPSAwOiBzdWNjZXNzZnVsIGV4aXQKKiAgICAgICAgICA8\nIDA6IGlmIElORk8gPSAtaywgdGhlIGstdGggYXJndW1lbnQgaGFkIGFuIGlsbGVnYWwgdmFsdWUK\nKgpyOgUAAGiGaIcpgXI7BQAAfXI8BQAAKGiKiWiLaIx1YmiYigIgAWiZWA4AAAB6cHR0cnNfMjg4\nLnR4dHI9BQAAdWJom4oCIAFonFgFAAAAcHR0cnNyPgUAAGiYigFQdWJofWhhXWh+h1JyPwUAAH1y\nQAUAAChogVgJAAAAc3ltbWV0cmljckEFAABog1gEAAAAZnVsbHJCBQAAaHFYQAAAAGNvbXB1dGF0\naW9uYWwsIHNvbHZlIEEqWCA9IEIgdXNpbmcgQSA9IFUqRCpVKipUIG9yIEEgPSBMKkQqTCoqVCBy\nQwUAAGiGaIcpgXJEBQAAfXJFBQAAKGiKiWiLaIx1YmiNWCwAAABodHRwOi8vd3d3Lm5ldGxpYi5v\ncmcvbGFwYWNrL3NpbmdsZS9zc3l0cnMuZnJGBQAAaI9YAQAAAHNokGh9aJFdaH6HUnJHBQAAfXJI\nBQAAKGiUWDEIAAAgICAgICBTVUJST1VUSU5FIFNTWVRSUyggVVBMTywgTiwgTlJIUywgQSwgTERB\nLCBJUElWLCBCLCBMREIsIElORk8gKQoqCiogIC0tIExBUEFDSyByb3V0aW5lICh2ZXJzaW9uIDMu\nMy4xKSAtLQoqICAtLSBMQVBBQ0sgaXMgYSBzb2Z0d2FyZSBwYWNrYWdlIHByb3ZpZGVkIGJ5IFVu\naXYuIG9mIFRlbm5lc3NlZSwgICAgLS0KKiAgLS0gVW5pdi4gb2YgQ2FsaWZvcm5pYSBCZXJrZWxl\neSwgVW5pdi4gb2YgQ29sb3JhZG8gRGVudmVyIGFuZCBOQUcgTHRkLi4tLQoqICAtLSBBcHJpbCAy\nMDExICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nLS0KKgoqICAgICAuLiBTY2FsYXIgQXJndW1lbnRzIC4uCiAgICAgIENIQVJBQ1RFUiAgICAgICAg\nICBVUExPCiAgICAgIElOVEVHRVIgICAgICAgICAgICBJTkZPLCBMREEsIExEQiwgTiwgTlJIUwoq\nICAgICAuLgoqICAgICAuLiBBcnJheSBBcmd1bWVudHMgLi4KICAgICAgSU5URUdFUiAgICAgICAg\nICAgIElQSVYoICogKQogICAgICBSRUFMICAgICAgICAgICAgICAgQSggTERBLCAqICksIEIoIExE\nQiwgKiApCiogICAgIC4uCioKKiAgUHVycG9zZQoqICA9PT09PT09CioKKiAgU1NZVFJTIHNvbHZl\ncyBhIHN5c3RlbSBvZiBsaW5lYXIgZXF1YXRpb25zIEEqWCA9IEIgd2l0aCBhIHJlYWwKKiAgc3lt\nbWV0cmljIG1hdHJpeCBBIHVzaW5nIHRoZSBmYWN0b3JpemF0aW9uIEEgPSBVKkQqVSoqVCBvcgoq\nICBBID0gTCpEKkwqKlQgY29tcHV0ZWQgYnkgU1NZVFJGLgoqCiogIEFyZ3VtZW50cwoqICA9PT09\nPT09PT0KKgoqICBVUExPICAgIChpbnB1dCkgQ0hBUkFDVEVSKjEKKiAgICAgICAgICBTcGVjaWZp\nZXMgd2hldGhlciB0aGUgZGV0YWlscyBvZiB0aGUgZmFjdG9yaXphdGlvbiBhcmUgc3RvcmVkCiog\nICAgICAgICAgYXMgYW4gdXBwZXIgb3IgbG93ZXIgdHJpYW5ndWxhciBtYXRyaXguCiogICAgICAg\nICAgPSAnVSc6ICBVcHBlciB0cmlhbmd1bGFyLCBmb3JtIGlzIEEgPSBVKkQqVSoqVDsKKiAgICAg\nICAgICA9ICdMJzogIExvd2VyIHRyaWFuZ3VsYXIsIGZvcm0gaXMgQSA9IEwqRCpMKipULgoqCiog\nIE4gICAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG9yZGVyIG9mIHRoZSBtYXRy\naXggQS4gIE4gPj0gMC4KKgoqICBOUkhTICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRo\nZSBudW1iZXIgb2YgcmlnaHQgaGFuZCBzaWRlcywgaS5lLiwgdGhlIG51bWJlciBvZiBjb2x1bW5z\nCiogICAgICAgICAgb2YgdGhlIG1hdHJpeCBCLiAgTlJIUyA+PSAwLgoqCiogIEEgICAgICAgKGlu\ncHV0KSBSRUFMIGFycmF5LCBkaW1lbnNpb24gKExEQSxOKQoqICAgICAgICAgIFRoZSBibG9jayBk\naWFnb25hbCBtYXRyaXggRCBhbmQgdGhlIG11bHRpcGxpZXJzIHVzZWQgdG8KKiAgICAgICAgICBv\nYnRhaW4gdGhlIGZhY3RvciBVIG9yIEwgYXMgY29tcHV0ZWQgYnkgU1NZVFJGLgoqCiogIExEQSAg\nICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRo\nZSBhcnJheSBBLiAgTERBID49IG1heCgxLE4pLgoqCiogIElQSVYgICAgKGlucHV0KSBJTlRFR0VS\nIGFycmF5LCBkaW1lbnNpb24gKE4pCiogICAgICAgICAgRGV0YWlscyBvZiB0aGUgaW50ZXJjaGFu\nZ2VzIGFuZCB0aGUgYmxvY2sgc3RydWN0dXJlIG9mIEQKKiAgICAgICAgICBhcyBkZXRlcm1pbmVk\nIGJ5IFNTWVRSRi4KKgoqICBCICAgICAgIChpbnB1dC9vdXRwdXQpIFJFQUwgYXJyYXksIGRpbWVu\nc2lvbiAoTERCLE5SSFMpCiogICAgICAgICAgT24gZW50cnksIHRoZSByaWdodCBoYW5kIHNpZGUg\nbWF0cml4IEIuCiogICAgICAgICAgT24gZXhpdCwgdGhlIHNvbHV0aW9uIG1hdHJpeCBYLgoqCiog\nIExEQiAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGltZW5zaW9u\nIG9mIHRoZSBhcnJheSBCLiAgTERCID49IG1heCgxLE4pLgoqCiogIElORk8gICAgKG91dHB1dCkg\nSU5URUdFUgoqICAgICAgICAgID0gMDogIHN1Y2Nlc3NmdWwgZXhpdAoqICAgICAgICAgIDwgMDog\nIGlmIElORk8gPSAtaSwgdGhlIGktdGggYXJndW1lbnQgaGFkIGFuIGlsbGVnYWwgdmFsdWUKKgpy\nSQUAAGiGaIcpgXJKBQAAfXJLBQAAKGiKiWiLaIx1YmiYigIhAWiZWA4AAABzc3l0cnNfMjg5LnR4\ndHJMBQAAdWJom4oCIQFonFgFAAAAc3l0cnNyTQUAAGiYigFRdWJofWhhXWh+h1JyTgUAAH1yTwUA\nAChogVgJAAAAc3ltbWV0cmljclAFAABog1gEAAAAZnVsbHJRBQAAaHFYQAAAAGNvbXB1dGF0aW9u\nYWwsIHNvbHZlIEEqWCA9IEIgdXNpbmcgQSA9IFUqRCpVKipUIG9yIEEgPSBMKkQqTCoqVCByUgUA\nAGiGaIcpgXJTBQAAfXJUBQAAKGiKiWiLaIx1YmiNWCwAAABodHRwOi8vd3d3Lm5ldGxpYi5vcmcv\nbGFwYWNrL2RvdWJsZS9kc3l0cnMuZnJVBQAAaI9YAQAAAGRokGh9aJFdaH6HUnJWBQAAfXJXBQAA\nKGiUWEkIAAAgICAgICBTVUJST1VUSU5FIERTWVRSUyggVVBMTywgTiwgTlJIUywgQSwgTERBLCBJ\nUElWLCBCLCBMREIsIElORk8gKQoqCiogIC0tIExBUEFDSyByb3V0aW5lICh2ZXJzaW9uIDMuMy4x\nKSAtLQoqICAtLSBMQVBBQ0sgaXMgYSBzb2Z0d2FyZSBwYWNrYWdlIHByb3ZpZGVkIGJ5IFVuaXYu\nIG9mIFRlbm5lc3NlZSwgICAgLS0KKiAgLS0gVW5pdi4gb2YgQ2FsaWZvcm5pYSBCZXJrZWxleSwg\nVW5pdi4gb2YgQ29sb3JhZG8gRGVudmVyIGFuZCBOQUcgTHRkLi4tLQoqICAtLSBBcHJpbCAyMDEx\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0K\nKgoqICAgICAuLiBTY2FsYXIgQXJndW1lbnRzIC4uCiAgICAgIENIQVJBQ1RFUiAgICAgICAgICBV\nUExPCiAgICAgIElOVEVHRVIgICAgICAgICAgICBJTkZPLCBMREEsIExEQiwgTiwgTlJIUwoqICAg\nICAuLgoqICAgICAuLiBBcnJheSBBcmd1bWVudHMgLi4KICAgICAgSU5URUdFUiAgICAgICAgICAg\nIElQSVYoICogKQogICAgICBET1VCTEUgUFJFQ0lTSU9OICAgQSggTERBLCAqICksIEIoIExEQiwg\nKiApCiogICAgIC4uCioKKiAgUHVycG9zZQoqICA9PT09PT09CioKKiAgRFNZVFJTIHNvbHZlcyBh\nIHN5c3RlbSBvZiBsaW5lYXIgZXF1YXRpb25zIEEqWCA9IEIgd2l0aCBhIHJlYWwKKiAgc3ltbWV0\ncmljIG1hdHJpeCBBIHVzaW5nIHRoZSBmYWN0b3JpemF0aW9uIEEgPSBVKkQqVSoqVCBvcgoqICBB\nID0gTCpEKkwqKlQgY29tcHV0ZWQgYnkgRFNZVFJGLgoqCiogIEFyZ3VtZW50cwoqICA9PT09PT09\nPT0KKgoqICBVUExPICAgIChpbnB1dCkgQ0hBUkFDVEVSKjEKKiAgICAgICAgICBTcGVjaWZpZXMg\nd2hldGhlciB0aGUgZGV0YWlscyBvZiB0aGUgZmFjdG9yaXphdGlvbiBhcmUgc3RvcmVkCiogICAg\nICAgICAgYXMgYW4gdXBwZXIgb3IgbG93ZXIgdHJpYW5ndWxhciBtYXRyaXguCiogICAgICAgICAg\nPSAnVSc6ICBVcHBlciB0cmlhbmd1bGFyLCBmb3JtIGlzIEEgPSBVKkQqVSoqVDsKKiAgICAgICAg\nICA9ICdMJzogIExvd2VyIHRyaWFuZ3VsYXIsIGZvcm0gaXMgQSA9IEwqRCpMKipULgoqCiogIE4g\nICAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG9yZGVyIG9mIHRoZSBtYXRyaXgg\nQS4gIE4gPj0gMC4KKgoqICBOUkhTICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBu\ndW1iZXIgb2YgcmlnaHQgaGFuZCBzaWRlcywgaS5lLiwgdGhlIG51bWJlciBvZiBjb2x1bW5zCiog\nICAgICAgICAgb2YgdGhlIG1hdHJpeCBCLiAgTlJIUyA+PSAwLgoqCiogIEEgICAgICAgKGlucHV0\nKSBET1VCTEUgUFJFQ0lTSU9OIGFycmF5LCBkaW1lbnNpb24gKExEQSxOKQoqICAgICAgICAgIFRo\nZSBibG9jayBkaWFnb25hbCBtYXRyaXggRCBhbmQgdGhlIG11bHRpcGxpZXJzIHVzZWQgdG8KKiAg\nICAgICAgICBvYnRhaW4gdGhlIGZhY3RvciBVIG9yIEwgYXMgY29tcHV0ZWQgYnkgRFNZVFJGLgoq\nCiogIExEQSAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGltZW5z\naW9uIG9mIHRoZSBhcnJheSBBLiAgTERBID49IG1heCgxLE4pLgoqCiogIElQSVYgICAgKGlucHV0\nKSBJTlRFR0VSIGFycmF5LCBkaW1lbnNpb24gKE4pCiogICAgICAgICAgRGV0YWlscyBvZiB0aGUg\naW50ZXJjaGFuZ2VzIGFuZCB0aGUgYmxvY2sgc3RydWN0dXJlIG9mIEQKKiAgICAgICAgICBhcyBk\nZXRlcm1pbmVkIGJ5IERTWVRSRi4KKgoqICBCICAgICAgIChpbnB1dC9vdXRwdXQpIERPVUJMRSBQ\nUkVDSVNJT04gYXJyYXksIGRpbWVuc2lvbiAoTERCLE5SSFMpCiogICAgICAgICAgT24gZW50cnks\nIHRoZSByaWdodCBoYW5kIHNpZGUgbWF0cml4IEIuCiogICAgICAgICAgT24gZXhpdCwgdGhlIHNv\nbHV0aW9uIG1hdHJpeCBYLgoqCiogIExEQiAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAg\nVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBCLiAgTERCID49IG1heCgxLE4pLgoq\nCiogIElORk8gICAgKG91dHB1dCkgSU5URUdFUgoqICAgICAgICAgID0gMDogIHN1Y2Nlc3NmdWwg\nZXhpdAoqICAgICAgICAgIDwgMDogIGlmIElORk8gPSAtaSwgdGhlIGktdGggYXJndW1lbnQgaGFk\nIGFuIGlsbGVnYWwgdmFsdWUKKgpyWAUAAGiGaIcpgXJZBQAAfXJaBQAAKGiKiWiLaIx1YmiYigIi\nAWiZWA4AAABkc3l0cnNfMjkwLnR4dHJbBQAAdWJom4oCIgFonFgFAAAAc3l0cnNyXAUAAGiYigFS\ndWJofWhhXWh+h1JyXQUAAH1yXgUAAChogVgJAAAASGVybWl0aWFucl8FAABog1gEAAAAZnVsbHJg\nBQAAaHFYNQAAAGNvbXB1dGF0aW9uYWwsIHNvbHZlIEEqWCA9IEIgdXNpbmcgVSpEKlUqSCBvciBM\nKkQqTCpIcmEFAABohmiHKYFyYgUAAH1yYwUAAChoioloi2iMdWJojVgtAAAAaHR0cDovL3d3dy5u\nZXRsaWIub3JnL2xhcGFjay9jb21wbGV4L2NoZXRycy5mcmQFAABoj1gBAAAAY2iQaH1okV1ofodS\ncmUFAAB9cmYFAAAoaJRYOggAACAgICAgIFNVQlJPVVRJTkUgQ0hFVFJTKCBVUExPLCBOLCBOUkhT\nLCBBLCBMREEsIElQSVYsIEIsIExEQiwgSU5GTyApCioKKiAgLS0gTEFQQUNLIHJvdXRpbmUgKHZl\ncnNpb24gMy4zLjEpIC0tCiogIC0tIExBUEFDSyBpcyBhIHNvZnR3YXJlIHBhY2thZ2UgcHJvdmlk\nZWQgYnkgVW5pdi4gb2YgVGVubmVzc2VlLCAgICAtLQoqICAtLSBVbml2LiBvZiBDYWxpZm9ybmlh\nIEJlcmtlbGV5LCBVbml2LiBvZiBDb2xvcmFkbyBEZW52ZXIgYW5kIE5BRyBMdGQuLi0tCiogIC0t\nIEFwcmlsIDIwMTEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAtLQoqCiogICAgIC4uIFNjYWxhciBBcmd1bWVudHMgLi4KICAgICAgQ0hBUkFDVEVS\nICAgICAgICAgIFVQTE8KICAgICAgSU5URUdFUiAgICAgICAgICAgIElORk8sIExEQSwgTERCLCBO\nLCBOUkhTCiogICAgIC4uCiogICAgIC4uIEFycmF5IEFyZ3VtZW50cyAuLgogICAgICBJTlRFR0VS\nICAgICAgICAgICAgSVBJViggKiApCiAgICAgIENPTVBMRVggICAgICAgICAgICBBKCBMREEsICog\nKSwgQiggTERCLCAqICkKKiAgICAgLi4KKgoqICBQdXJwb3NlCiogID09PT09PT0KKgoqICBDSEVU\nUlMgc29sdmVzIGEgc3lzdGVtIG9mIGxpbmVhciBlcXVhdGlvbnMgQSpYID0gQiB3aXRoIGEgY29t\ncGxleAoqICBIZXJtaXRpYW4gbWF0cml4IEEgdXNpbmcgdGhlIGZhY3Rvcml6YXRpb24gQSA9IFUq\nRCpVKipIIG9yCiogIEEgPSBMKkQqTCoqSCBjb21wdXRlZCBieSBDSEVUUkYuCioKKiAgQXJndW1l\nbnRzCiogID09PT09PT09PQoqCiogIFVQTE8gICAgKGlucHV0KSBDSEFSQUNURVIqMQoqICAgICAg\nICAgIFNwZWNpZmllcyB3aGV0aGVyIHRoZSBkZXRhaWxzIG9mIHRoZSBmYWN0b3JpemF0aW9uIGFy\nZSBzdG9yZWQKKiAgICAgICAgICBhcyBhbiB1cHBlciBvciBsb3dlciB0cmlhbmd1bGFyIG1hdHJp\neC4KKiAgICAgICAgICA9ICdVJzogIFVwcGVyIHRyaWFuZ3VsYXIsIGZvcm0gaXMgQSA9IFUqRCpV\nKipIOwoqICAgICAgICAgID0gJ0wnOiAgTG93ZXIgdHJpYW5ndWxhciwgZm9ybSBpcyBBID0gTCpE\nKkwqKkguCioKKiAgTiAgICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgb3JkZXIg\nb2YgdGhlIG1hdHJpeCBBLiAgTiA+PSAwLgoqCiogIE5SSFMgICAgKGlucHV0KSBJTlRFR0VSCiog\nICAgICAgICAgVGhlIG51bWJlciBvZiByaWdodCBoYW5kIHNpZGVzLCBpLmUuLCB0aGUgbnVtYmVy\nIG9mIGNvbHVtbnMKKiAgICAgICAgICBvZiB0aGUgbWF0cml4IEIuICBOUkhTID49IDAuCioKKiAg\nQSAgICAgICAoaW5wdXQpIENPTVBMRVggYXJyYXksIGRpbWVuc2lvbiAoTERBLE4pCiogICAgICAg\nICAgVGhlIGJsb2NrIGRpYWdvbmFsIG1hdHJpeCBEIGFuZCB0aGUgbXVsdGlwbGllcnMgdXNlZCB0\nbwoqICAgICAgICAgIG9idGFpbiB0aGUgZmFjdG9yIFUgb3IgTCBhcyBjb21wdXRlZCBieSBDSEVU\nUkYuCioKKiAgTERBICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbGVhZGluZyBk\naW1lbnNpb24gb2YgdGhlIGFycmF5IEEuICBMREEgPj0gbWF4KDEsTikuCioKKiAgSVBJViAgICAo\naW5wdXQpIElOVEVHRVIgYXJyYXksIGRpbWVuc2lvbiAoTikKKiAgICAgICAgICBEZXRhaWxzIG9m\nIHRoZSBpbnRlcmNoYW5nZXMgYW5kIHRoZSBibG9jayBzdHJ1Y3R1cmUgb2YgRAoqICAgICAgICAg\nIGFzIGRldGVybWluZWQgYnkgQ0hFVFJGLgoqCiogIEIgICAgICAgKGlucHV0L291dHB1dCkgQ09N\nUExFWCBhcnJheSwgZGltZW5zaW9uIChMREIsTlJIUykKKiAgICAgICAgICBPbiBlbnRyeSwgdGhl\nIHJpZ2h0IGhhbmQgc2lkZSBtYXRyaXggQi4KKiAgICAgICAgICBPbiBleGl0LCB0aGUgc29sdXRp\nb24gbWF0cml4IFguCioKKiAgTERCICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUg\nbGVhZGluZyBkaW1lbnNpb24gb2YgdGhlIGFycmF5IEIuICBMREIgPj0gbWF4KDEsTikuCioKKiAg\nSU5GTyAgICAob3V0cHV0KSBJTlRFR0VSCiogICAgICAgICAgPSAwOiAgc3VjY2Vzc2Z1bCBleGl0\nCiogICAgICAgICAgPCAwOiAgaWYgSU5GTyA9IC1pLCB0aGUgaS10aCBhcmd1bWVudCBoYWQgYW4g\naWxsZWdhbCB2YWx1ZQoqCnJnBQAAaIZohymBcmgFAAB9cmkFAAAoaIqJaItojHViaJiKAiMBaJlY\nDgAAAGNoZXRyc18yOTEudHh0cmoFAAB1YmibigIjAWicWAUAAABoZXRyc3JrBQAAaJiKAVN1Ymh9\naGFdaH6HUnJsBQAAfXJtBQAAKGiBWAkAAABIZXJtaXRpYW5ybgUAAGiDWAQAAABmdWxscm8FAABo\ncVg1AAAAY29tcHV0YXRpb25hbCwgc29sdmUgQSpYID0gQiB1c2luZyBVKkQqVSpIIG9yIEwqRCpM\nKkhycAUAAGiGaIcpgXJxBQAAfXJyBQAAKGiKiWiLaIx1YmiNWC8AAABodHRwOi8vd3d3Lm5ldGxp\nYi5vcmcvbGFwYWNrL2NvbXBsZXgxNi96aGV0cnMuZnJzBQAAaI9YAQAAAHpokGh9aJFdaH6HUnJ0\nBQAAfXJ1BQAAKGiUWEAIAAAgICAgICBTVUJST1VUSU5FIFpIRVRSUyggVVBMTywgTiwgTlJIUywg\nQSwgTERBLCBJUElWLCBCLCBMREIsIElORk8gKQoqCiogIC0tIExBUEFDSyByb3V0aW5lICh2ZXJz\naW9uIDMuMy4xKSAtLQoqICAtLSBMQVBBQ0sgaXMgYSBzb2Z0d2FyZSBwYWNrYWdlIHByb3ZpZGVk\nIGJ5IFVuaXYuIG9mIFRlbm5lc3NlZSwgICAgLS0KKiAgLS0gVW5pdi4gb2YgQ2FsaWZvcm5pYSBC\nZXJrZWxleSwgVW5pdi4gb2YgQ29sb3JhZG8gRGVudmVyIGFuZCBOQUcgTHRkLi4tLQoqICAtLSBB\ncHJpbCAyMDExICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgLS0KKgoqICAgICAuLiBTY2FsYXIgQXJndW1lbnRzIC4uCiAgICAgIENIQVJBQ1RFUiAg\nICAgICAgICBVUExPCiAgICAgIElOVEVHRVIgICAgICAgICAgICBJTkZPLCBMREEsIExEQiwgTiwg\nTlJIUwoqICAgICAuLgoqICAgICAuLiBBcnJheSBBcmd1bWVudHMgLi4KICAgICAgSU5URUdFUiAg\nICAgICAgICAgIElQSVYoICogKQogICAgICBDT01QTEVYKjE2ICAgICAgICAgQSggTERBLCAqICks\nIEIoIExEQiwgKiApCiogICAgIC4uCioKKiAgUHVycG9zZQoqICA9PT09PT09CioKKiAgWkhFVFJT\nIHNvbHZlcyBhIHN5c3RlbSBvZiBsaW5lYXIgZXF1YXRpb25zIEEqWCA9IEIgd2l0aCBhIGNvbXBs\nZXgKKiAgSGVybWl0aWFuIG1hdHJpeCBBIHVzaW5nIHRoZSBmYWN0b3JpemF0aW9uIEEgPSBVKkQq\nVSoqSCBvcgoqICBBID0gTCpEKkwqKkggY29tcHV0ZWQgYnkgWkhFVFJGLgoqCiogIEFyZ3VtZW50\ncwoqICA9PT09PT09PT0KKgoqICBVUExPICAgIChpbnB1dCkgQ0hBUkFDVEVSKjEKKiAgICAgICAg\nICBTcGVjaWZpZXMgd2hldGhlciB0aGUgZGV0YWlscyBvZiB0aGUgZmFjdG9yaXphdGlvbiBhcmUg\nc3RvcmVkCiogICAgICAgICAgYXMgYW4gdXBwZXIgb3IgbG93ZXIgdHJpYW5ndWxhciBtYXRyaXgu\nCiogICAgICAgICAgPSAnVSc6ICBVcHBlciB0cmlhbmd1bGFyLCBmb3JtIGlzIEEgPSBVKkQqVSoq\nSDsKKiAgICAgICAgICA9ICdMJzogIExvd2VyIHRyaWFuZ3VsYXIsIGZvcm0gaXMgQSA9IEwqRCpM\nKipILgoqCiogIE4gICAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG9yZGVyIG9m\nIHRoZSBtYXRyaXggQS4gIE4gPj0gMC4KKgoqICBOUkhTICAgIChpbnB1dCkgSU5URUdFUgoqICAg\nICAgICAgIFRoZSBudW1iZXIgb2YgcmlnaHQgaGFuZCBzaWRlcywgaS5lLiwgdGhlIG51bWJlciBv\nZiBjb2x1bW5zCiogICAgICAgICAgb2YgdGhlIG1hdHJpeCBCLiAgTlJIUyA+PSAwLgoqCiogIEEg\nICAgICAgKGlucHV0KSBDT01QTEVYKjE2IGFycmF5LCBkaW1lbnNpb24gKExEQSxOKQoqICAgICAg\nICAgIFRoZSBibG9jayBkaWFnb25hbCBtYXRyaXggRCBhbmQgdGhlIG11bHRpcGxpZXJzIHVzZWQg\ndG8KKiAgICAgICAgICBvYnRhaW4gdGhlIGZhY3RvciBVIG9yIEwgYXMgY29tcHV0ZWQgYnkgWkhF\nVFJGLgoqCiogIExEQSAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcg\nZGltZW5zaW9uIG9mIHRoZSBhcnJheSBBLiAgTERBID49IG1heCgxLE4pLgoqCiogIElQSVYgICAg\nKGlucHV0KSBJTlRFR0VSIGFycmF5LCBkaW1lbnNpb24gKE4pCiogICAgICAgICAgRGV0YWlscyBv\nZiB0aGUgaW50ZXJjaGFuZ2VzIGFuZCB0aGUgYmxvY2sgc3RydWN0dXJlIG9mIEQKKiAgICAgICAg\nICBhcyBkZXRlcm1pbmVkIGJ5IFpIRVRSRi4KKgoqICBCICAgICAgIChpbnB1dC9vdXRwdXQpIENP\nTVBMRVgqMTYgYXJyYXksIGRpbWVuc2lvbiAoTERCLE5SSFMpCiogICAgICAgICAgT24gZW50cnks\nIHRoZSByaWdodCBoYW5kIHNpZGUgbWF0cml4IEIuCiogICAgICAgICAgT24gZXhpdCwgdGhlIHNv\nbHV0aW9uIG1hdHJpeCBYLgoqCiogIExEQiAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAg\nVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBCLiAgTERCID49IG1heCgxLE4pLgoq\nCiogIElORk8gICAgKG91dHB1dCkgSU5URUdFUgoqICAgICAgICAgID0gMDogIHN1Y2Nlc3NmdWwg\nZXhpdAoqICAgICAgICAgIDwgMDogIGlmIElORk8gPSAtaSwgdGhlIGktdGggYXJndW1lbnQgaGFk\nIGFuIGlsbGVnYWwgdmFsdWUKKgpydgUAAGiGaIcpgXJ3BQAAfXJ4BQAAKGiKiWiLaIx1YmiYigIk\nAWiZWA4AAAB6aGV0cnNfMjkyLnR4dHJ5BQAAdWJom4oCJAFonFgFAAAAaGV0cnNyegUAAGiYigFU\ndWJofWhhXWh+h1JyewUAAH1yfAUAAChogVgJAAAAc3ltbWV0cmljcn0FAABog1gEAAAAZnVsbHJ+\nBQAAaHFYPwAAAGNvbXB1dGF0aW9uYWwsIHNvbHZlIEEqWCA9IEIgdXNpbmcgQSA9IFUqRCpVKipU\nIG9yIEEgPSBMKkQqTCoqVHJ/BQAAaIZohymBcoAFAAB9coEFAAAoaIqJaItojHViaI1YLQAAAGh0\ndHA6Ly93d3cubmV0bGliLm9yZy9sYXBhY2svY29tcGxleC9jc3l0cnMuZnKCBQAAaI9YAQAAAGNo\nkGh9aJFdaH6HUnKDBQAAfXKEBQAAKGiUWDoIAAAgICAgICBTVUJST1VUSU5FIENTWVRSUyggVVBM\nTywgTiwgTlJIUywgQSwgTERBLCBJUElWLCBCLCBMREIsIElORk8gKQoqCiogIC0tIExBUEFDSyBy\nb3V0aW5lICh2ZXJzaW9uIDMuMy4xKSAtLQoqICAtLSBMQVBBQ0sgaXMgYSBzb2Z0d2FyZSBwYWNr\nYWdlIHByb3ZpZGVkIGJ5IFVuaXYuIG9mIFRlbm5lc3NlZSwgICAgLS0KKiAgLS0gVW5pdi4gb2Yg\nQ2FsaWZvcm5pYSBCZXJrZWxleSwgVW5pdi4gb2YgQ29sb3JhZG8gRGVudmVyIGFuZCBOQUcgTHRk\nLi4tLQoqICAtLSBBcHJpbCAyMDExICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgLS0KKgoqICAgICAuLiBTY2FsYXIgQXJndW1lbnRzIC4uCiAgICAg\nIENIQVJBQ1RFUiAgICAgICAgICBVUExPCiAgICAgIElOVEVHRVIgICAgICAgICAgICBJTkZPLCBM\nREEsIExEQiwgTiwgTlJIUwoqICAgICAuLgoqICAgICAuLiBBcnJheSBBcmd1bWVudHMgLi4KICAg\nICAgSU5URUdFUiAgICAgICAgICAgIElQSVYoICogKQogICAgICBDT01QTEVYICAgICAgICAgICAg\nQSggTERBLCAqICksIEIoIExEQiwgKiApCiogICAgIC4uCioKKiAgUHVycG9zZQoqICA9PT09PT09\nCioKKiAgQ1NZVFJTIHNvbHZlcyBhIHN5c3RlbSBvZiBsaW5lYXIgZXF1YXRpb25zIEEqWCA9IEIg\nd2l0aCBhIGNvbXBsZXgKKiAgc3ltbWV0cmljIG1hdHJpeCBBIHVzaW5nIHRoZSBmYWN0b3JpemF0\naW9uIEEgPSBVKkQqVSoqVCBvcgoqICBBID0gTCpEKkwqKlQgY29tcHV0ZWQgYnkgQ1NZVFJGLgoq\nCiogIEFyZ3VtZW50cwoqICA9PT09PT09PT0KKgoqICBVUExPICAgIChpbnB1dCkgQ0hBUkFDVEVS\nKjEKKiAgICAgICAgICBTcGVjaWZpZXMgd2hldGhlciB0aGUgZGV0YWlscyBvZiB0aGUgZmFjdG9y\naXphdGlvbiBhcmUgc3RvcmVkCiogICAgICAgICAgYXMgYW4gdXBwZXIgb3IgbG93ZXIgdHJpYW5n\ndWxhciBtYXRyaXguCiogICAgICAgICAgPSAnVSc6ICBVcHBlciB0cmlhbmd1bGFyLCBmb3JtIGlz\nIEEgPSBVKkQqVSoqVDsKKiAgICAgICAgICA9ICdMJzogIExvd2VyIHRyaWFuZ3VsYXIsIGZvcm0g\naXMgQSA9IEwqRCpMKipULgoqCiogIE4gICAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAg\nVGhlIG9yZGVyIG9mIHRoZSBtYXRyaXggQS4gIE4gPj0gMC4KKgoqICBOUkhTICAgIChpbnB1dCkg\nSU5URUdFUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2YgcmlnaHQgaGFuZCBzaWRlcywgaS5lLiwg\ndGhlIG51bWJlciBvZiBjb2x1bW5zCiogICAgICAgICAgb2YgdGhlIG1hdHJpeCBCLiAgTlJIUyA+\nPSAwLgoqCiogIEEgICAgICAgKGlucHV0KSBDT01QTEVYIGFycmF5LCBkaW1lbnNpb24gKExEQSxO\nKQoqICAgICAgICAgIFRoZSBibG9jayBkaWFnb25hbCBtYXRyaXggRCBhbmQgdGhlIG11bHRpcGxp\nZXJzIHVzZWQgdG8KKiAgICAgICAgICBvYnRhaW4gdGhlIGZhY3RvciBVIG9yIEwgYXMgY29tcHV0\nZWQgYnkgQ1NZVFJGLgoqCiogIExEQSAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhl\nIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBBLiAgTERBID49IG1heCgxLE4pLgoqCiog\nIElQSVYgICAgKGlucHV0KSBJTlRFR0VSIGFycmF5LCBkaW1lbnNpb24gKE4pCiogICAgICAgICAg\nRGV0YWlscyBvZiB0aGUgaW50ZXJjaGFuZ2VzIGFuZCB0aGUgYmxvY2sgc3RydWN0dXJlIG9mIEQK\nKiAgICAgICAgICBhcyBkZXRlcm1pbmVkIGJ5IENTWVRSRi4KKgoqICBCICAgICAgIChpbnB1dC9v\ndXRwdXQpIENPTVBMRVggYXJyYXksIGRpbWVuc2lvbiAoTERCLE5SSFMpCiogICAgICAgICAgT24g\nZW50cnksIHRoZSByaWdodCBoYW5kIHNpZGUgbWF0cml4IEIuCiogICAgICAgICAgT24gZXhpdCwg\ndGhlIHNvbHV0aW9uIG1hdHJpeCBYLgoqCiogIExEQiAgICAgKGlucHV0KSBJTlRFR0VSCiogICAg\nICAgICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBCLiAgTERCID49IG1heCgx\nLE4pLgoqCiogIElORk8gICAgKG91dHB1dCkgSU5URUdFUgoqICAgICAgICAgID0gMDogIHN1Y2Nl\nc3NmdWwgZXhpdAoqICAgICAgICAgIDwgMDogIGlmIElORk8gPSAtaSwgdGhlIGktdGggYXJndW1l\nbnQgaGFkIGFuIGlsbGVnYWwgdmFsdWUKKgpyhQUAAGiGaIcpgXKGBQAAfXKHBQAAKGiKiWiLaIx1\nYmiYigIlAWiZWA4AAABjc3l0cnNfMjkzLnR4dHKIBQAAdWJom4oCJQFonFgFAAAAc3l0cnNyiQUA\nAGiYigFVdWJofWhhXWh+h1JyigUAAH1yiwUAAChogVgJAAAAc3ltbWV0cmljcowFAABog1gEAAAA\nZnVsbHKNBQAAaHFYPwAAAGNvbXB1dGF0aW9uYWwsIHNvbHZlIEEqWCA9IEIgdXNpbmcgQSA9IFUq\nRCpVKipUIG9yIEEgPSBMKkQqTCoqVHKOBQAAaIZohymBco8FAAB9cpAFAAAoaIqJaItojHViaI1Y\nLwAAAGh0dHA6Ly93d3cubmV0bGliLm9yZy9sYXBhY2svY29tcGxleDE2L3pzeXRycy5mcpEFAABo\nj1gBAAAAemiQaH1okV1ofodScpIFAAB9cpMFAAAoaJRYQAgAACAgICAgIFNVQlJPVVRJTkUgWlNZ\nVFJTKCBVUExPLCBOLCBOUkhTLCBBLCBMREEsIElQSVYsIEIsIExEQiwgSU5GTyApCioKKiAgLS0g\nTEFQQUNLIHJvdXRpbmUgKHZlcnNpb24gMy4zLjEpIC0tCiogIC0tIExBUEFDSyBpcyBhIHNvZnR3\nYXJlIHBhY2thZ2UgcHJvdmlkZWQgYnkgVW5pdi4gb2YgVGVubmVzc2VlLCAgICAtLQoqICAtLSBV\nbml2LiBvZiBDYWxpZm9ybmlhIEJlcmtlbGV5LCBVbml2LiBvZiBDb2xvcmFkbyBEZW52ZXIgYW5k\nIE5BRyBMdGQuLi0tCiogIC0tIEFwcmlsIDIwMTEgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAtLQoqCiogICAgIC4uIFNjYWxhciBBcmd1bWVudHMg\nLi4KICAgICAgQ0hBUkFDVEVSICAgICAgICAgIFVQTE8KICAgICAgSU5URUdFUiAgICAgICAgICAg\nIElORk8sIExEQSwgTERCLCBOLCBOUkhTCiogICAgIC4uCiogICAgIC4uIEFycmF5IEFyZ3VtZW50\ncyAuLgogICAgICBJTlRFR0VSICAgICAgICAgICAgSVBJViggKiApCiAgICAgIENPTVBMRVgqMTYg\nICAgICAgICBBKCBMREEsICogKSwgQiggTERCLCAqICkKKiAgICAgLi4KKgoqICBQdXJwb3NlCiog\nID09PT09PT0KKgoqICBaU1lUUlMgc29sdmVzIGEgc3lzdGVtIG9mIGxpbmVhciBlcXVhdGlvbnMg\nQSpYID0gQiB3aXRoIGEgY29tcGxleAoqICBzeW1tZXRyaWMgbWF0cml4IEEgdXNpbmcgdGhlIGZh\nY3Rvcml6YXRpb24gQSA9IFUqRCpVKipUIG9yCiogIEEgPSBMKkQqTCoqVCBjb21wdXRlZCBieSBa\nU1lUUkYuCioKKiAgQXJndW1lbnRzCiogID09PT09PT09PQoqCiogIFVQTE8gICAgKGlucHV0KSBD\nSEFSQUNURVIqMQoqICAgICAgICAgIFNwZWNpZmllcyB3aGV0aGVyIHRoZSBkZXRhaWxzIG9mIHRo\nZSBmYWN0b3JpemF0aW9uIGFyZSBzdG9yZWQKKiAgICAgICAgICBhcyBhbiB1cHBlciBvciBsb3dl\nciB0cmlhbmd1bGFyIG1hdHJpeC4KKiAgICAgICAgICA9ICdVJzogIFVwcGVyIHRyaWFuZ3VsYXIs\nIGZvcm0gaXMgQSA9IFUqRCpVKipUOwoqICAgICAgICAgID0gJ0wnOiAgTG93ZXIgdHJpYW5ndWxh\nciwgZm9ybSBpcyBBID0gTCpEKkwqKlQuCioKKiAgTiAgICAgICAoaW5wdXQpIElOVEVHRVIKKiAg\nICAgICAgICBUaGUgb3JkZXIgb2YgdGhlIG1hdHJpeCBBLiAgTiA+PSAwLgoqCiogIE5SSFMgICAg\nKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG51bWJlciBvZiByaWdodCBoYW5kIHNpZGVz\nLCBpLmUuLCB0aGUgbnVtYmVyIG9mIGNvbHVtbnMKKiAgICAgICAgICBvZiB0aGUgbWF0cml4IEIu\nICBOUkhTID49IDAuCioKKiAgQSAgICAgICAoaW5wdXQpIENPTVBMRVgqMTYgYXJyYXksIGRpbWVu\nc2lvbiAoTERBLE4pCiogICAgICAgICAgVGhlIGJsb2NrIGRpYWdvbmFsIG1hdHJpeCBEIGFuZCB0\naGUgbXVsdGlwbGllcnMgdXNlZCB0bwoqICAgICAgICAgIG9idGFpbiB0aGUgZmFjdG9yIFUgb3Ig\nTCBhcyBjb21wdXRlZCBieSBaU1lUUkYuCioKKiAgTERBICAgICAoaW5wdXQpIElOVEVHRVIKKiAg\nICAgICAgICBUaGUgbGVhZGluZyBkaW1lbnNpb24gb2YgdGhlIGFycmF5IEEuICBMREEgPj0gbWF4\nKDEsTikuCioKKiAgSVBJViAgICAoaW5wdXQpIElOVEVHRVIgYXJyYXksIGRpbWVuc2lvbiAoTikK\nKiAgICAgICAgICBEZXRhaWxzIG9mIHRoZSBpbnRlcmNoYW5nZXMgYW5kIHRoZSBibG9jayBzdHJ1\nY3R1cmUgb2YgRAoqICAgICAgICAgIGFzIGRldGVybWluZWQgYnkgWlNZVFJGLgoqCiogIEIgICAg\nICAgKGlucHV0L291dHB1dCkgQ09NUExFWCoxNiBhcnJheSwgZGltZW5zaW9uIChMREIsTlJIUykK\nKiAgICAgICAgICBPbiBlbnRyeSwgdGhlIHJpZ2h0IGhhbmQgc2lkZSBtYXRyaXggQi4KKiAgICAg\nICAgICBPbiBleGl0LCB0aGUgc29sdXRpb24gbWF0cml4IFguCioKKiAgTERCICAgICAoaW5wdXQp\nIElOVEVHRVIKKiAgICAgICAgICBUaGUgbGVhZGluZyBkaW1lbnNpb24gb2YgdGhlIGFycmF5IEIu\nICBMREIgPj0gbWF4KDEsTikuCioKKiAgSU5GTyAgICAob3V0cHV0KSBJTlRFR0VSCiogICAgICAg\nICAgPSAwOiAgc3VjY2Vzc2Z1bCBleGl0CiogICAgICAgICAgPCAwOiAgaWYgSU5GTyA9IC1pLCB0\naGUgaS10aCBhcmd1bWVudCBoYWQgYW4gaWxsZWdhbCB2YWx1ZQoqCnKUBQAAaIZohymBcpUFAAB9\ncpYFAAAoaIqJaItojHViaJiKAiYBaJlYDgAAAHpzeXRyc18yOTQudHh0cpcFAAB1YmibigImAWic\nWAUAAABzeXRyc3KYBQAAaJiKAVZ1Ymh9aGFdaH6HUnKZBQAAfXKaBQAAKGiBWAkAAABzeW1tZXRy\naWNymwUAAGiDWAYAAABwYWNrZWRynAUAAGhxWD8AAABjb21wdXRhdGlvbmFsLCBzb2x2ZSBBKlgg\nPSBCIHVzaW5nIEEgPSBVKkQqVSoqVCBvciBBID0gTCpEKkwqKlRynQUAAGiGaIcpgXKeBQAAfXKf\nBQAAKGiKiWiLaIx1YmiNWCwAAABodHRwOi8vd3d3Lm5ldGxpYi5vcmcvbGFwYWNrL3NpbmdsZS9z\nc3B0cnMuZnKgBQAAaI9YAQAAAHNokGh9aJFdaH6HUnKhBQAAfXKiBQAAKGiUWBAIAAAgICAgICBT\nVUJST1VUSU5FIFNTUFRSUyggVVBMTywgTiwgTlJIUywgQVAsIElQSVYsIEIsIExEQiwgSU5GTyAp\nCioKKiAgLS0gTEFQQUNLIHJvdXRpbmUgKHZlcnNpb24gMy4zLjEpIC0tCiogIC0tIExBUEFDSyBp\ncyBhIHNvZnR3YXJlIHBhY2thZ2UgcHJvdmlkZWQgYnkgVW5pdi4gb2YgVGVubmVzc2VlLCAgICAt\nLQoqICAtLSBVbml2LiBvZiBDYWxpZm9ybmlhIEJlcmtlbGV5LCBVbml2LiBvZiBDb2xvcmFkbyBE\nZW52ZXIgYW5kIE5BRyBMdGQuLi0tCiogIC0tIEFwcmlsIDIwMTEgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLQoqCiogICAgIC4uIFNjYWxhciBB\ncmd1bWVudHMgLi4KICAgICAgQ0hBUkFDVEVSICAgICAgICAgIFVQTE8KICAgICAgSU5URUdFUiAg\nICAgICAgICAgIElORk8sIExEQiwgTiwgTlJIUwoqICAgICAuLgoqICAgICAuLiBBcnJheSBBcmd1\nbWVudHMgLi4KICAgICAgSU5URUdFUiAgICAgICAgICAgIElQSVYoICogKQogICAgICBSRUFMICAg\nICAgICAgICAgICAgQVAoICogKSwgQiggTERCLCAqICkKKiAgICAgLi4KKgoqICBQdXJwb3NlCiog\nID09PT09PT0KKgoqICBTU1BUUlMgc29sdmVzIGEgc3lzdGVtIG9mIGxpbmVhciBlcXVhdGlvbnMg\nQSpYID0gQiB3aXRoIGEgcmVhbAoqICBzeW1tZXRyaWMgbWF0cml4IEEgc3RvcmVkIGluIHBhY2tl\nZCBmb3JtYXQgdXNpbmcgdGhlIGZhY3Rvcml6YXRpb24KKiAgQSA9IFUqRCpVKipUIG9yIEEgPSBM\nKkQqTCoqVCBjb21wdXRlZCBieSBTU1BUUkYuCioKKiAgQXJndW1lbnRzCiogID09PT09PT09PQoq\nCiogIFVQTE8gICAgKGlucHV0KSBDSEFSQUNURVIqMQoqICAgICAgICAgIFNwZWNpZmllcyB3aGV0\naGVyIHRoZSBkZXRhaWxzIG9mIHRoZSBmYWN0b3JpemF0aW9uIGFyZSBzdG9yZWQKKiAgICAgICAg\nICBhcyBhbiB1cHBlciBvciBsb3dlciB0cmlhbmd1bGFyIG1hdHJpeC4KKiAgICAgICAgICA9ICdV\nJzogIFVwcGVyIHRyaWFuZ3VsYXIsIGZvcm0gaXMgQSA9IFUqRCpVKipUOwoqICAgICAgICAgID0g\nJ0wnOiAgTG93ZXIgdHJpYW5ndWxhciwgZm9ybSBpcyBBID0gTCpEKkwqKlQuCioKKiAgTiAgICAg\nICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgb3JkZXIgb2YgdGhlIG1hdHJpeCBBLiAg\nTiA+PSAwLgoqCiogIE5SSFMgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG51bWJl\nciBvZiByaWdodCBoYW5kIHNpZGVzLCBpLmUuLCB0aGUgbnVtYmVyIG9mIGNvbHVtbnMKKiAgICAg\nICAgICBvZiB0aGUgbWF0cml4IEIuICBOUkhTID49IDAuCioKKiAgQVAgICAgICAoaW5wdXQpIFJF\nQUwgYXJyYXksIGRpbWVuc2lvbiAoTiooTisxKS8yKQoqICAgICAgICAgIFRoZSBibG9jayBkaWFn\nb25hbCBtYXRyaXggRCBhbmQgdGhlIG11bHRpcGxpZXJzIHVzZWQgdG8KKiAgICAgICAgICBvYnRh\naW4gdGhlIGZhY3RvciBVIG9yIEwgYXMgY29tcHV0ZWQgYnkgU1NQVFJGLCBzdG9yZWQgYXMgYQoq\nICAgICAgICAgIHBhY2tlZCB0cmlhbmd1bGFyIG1hdHJpeC4KKgoqICBJUElWICAgIChpbnB1dCkg\nSU5URUdFUiBhcnJheSwgZGltZW5zaW9uIChOKQoqICAgICAgICAgIERldGFpbHMgb2YgdGhlIGlu\ndGVyY2hhbmdlcyBhbmQgdGhlIGJsb2NrIHN0cnVjdHVyZSBvZiBECiogICAgICAgICAgYXMgZGV0\nZXJtaW5lZCBieSBTU1BUUkYuCioKKiAgQiAgICAgICAoaW5wdXQvb3V0cHV0KSBSRUFMIGFycmF5\nLCBkaW1lbnNpb24gKExEQixOUkhTKQoqICAgICAgICAgIE9uIGVudHJ5LCB0aGUgcmlnaHQgaGFu\nZCBzaWRlIG1hdHJpeCBCLgoqICAgICAgICAgIE9uIGV4aXQsIHRoZSBzb2x1dGlvbiBtYXRyaXgg\nWC4KKgoqICBMREIgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBsZWFkaW5nIGRp\nbWVuc2lvbiBvZiB0aGUgYXJyYXkgQi4gIExEQiA+PSBtYXgoMSxOKS4KKgoqICBJTkZPICAgIChv\ndXRwdXQpIElOVEVHRVIKKiAgICAgICAgICA9IDA6ICBzdWNjZXNzZnVsIGV4aXQKKiAgICAgICAg\nICA8IDA6IGlmIElORk8gPSAtaSwgdGhlIGktdGggYXJndW1lbnQgaGFkIGFuIGlsbGVnYWwgdmFs\ndWUKKgpyowUAAGiGaIcpgXKkBQAAfXKlBQAAKGiKiWiLaIx1YmiYigInAWiZWA4AAABzc3B0cnNf\nMjk1LnR4dHKmBQAAdWJom4oCJwFonFgFAAAAc3B0cnNypwUAAGiYigFXdWJofWhhXWh+h1JyqAUA\nAH1yqQUAAChogVgJAAAAc3ltbWV0cmljcqoFAABog1gGAAAAcGFja2VkcqsFAABocVg/AAAAY29t\ncHV0YXRpb25hbCwgc29sdmUgQSpYID0gQiB1c2luZyBBID0gVSpEKlUqKlQgb3IgQSA9IEwqRCpM\nKipUcqwFAABohmiHKYFyrQUAAH1yrgUAAChoioloi2iMdWJojVgsAAAAaHR0cDovL3d3dy5uZXRs\naWIub3JnL2xhcGFjay9kb3VibGUvZHNwdHJzLmZyrwUAAGiPWAEAAABkaJBofWiRXWh+h1JysAUA\nAH1ysQUAACholFgoCAAAICAgICAgU1VCUk9VVElORSBEU1BUUlMoIFVQTE8sIE4sIE5SSFMsIEFQ\nLCBJUElWLCBCLCBMREIsIElORk8gKQoqCiogIC0tIExBUEFDSyByb3V0aW5lICh2ZXJzaW9uIDMu\nMy4xKSAtLQoqICAtLSBMQVBBQ0sgaXMgYSBzb2Z0d2FyZSBwYWNrYWdlIHByb3ZpZGVkIGJ5IFVu\naXYuIG9mIFRlbm5lc3NlZSwgICAgLS0KKiAgLS0gVW5pdi4gb2YgQ2FsaWZvcm5pYSBCZXJrZWxl\neSwgVW5pdi4gb2YgQ29sb3JhZG8gRGVudmVyIGFuZCBOQUcgTHRkLi4tLQoqICAtLSBBcHJpbCAy\nMDExICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nLS0KKgoqICAgICAuLiBTY2FsYXIgQXJndW1lbnRzIC4uCiAgICAgIENIQVJBQ1RFUiAgICAgICAg\nICBVUExPCiAgICAgIElOVEVHRVIgICAgICAgICAgICBJTkZPLCBMREIsIE4sIE5SSFMKKiAgICAg\nLi4KKiAgICAgLi4gQXJyYXkgQXJndW1lbnRzIC4uCiAgICAgIElOVEVHRVIgICAgICAgICAgICBJ\nUElWKCAqICkKICAgICAgRE9VQkxFIFBSRUNJU0lPTiAgIEFQKCAqICksIEIoIExEQiwgKiApCiog\nICAgIC4uCioKKiAgUHVycG9zZQoqICA9PT09PT09CioKKiAgRFNQVFJTIHNvbHZlcyBhIHN5c3Rl\nbSBvZiBsaW5lYXIgZXF1YXRpb25zIEEqWCA9IEIgd2l0aCBhIHJlYWwKKiAgc3ltbWV0cmljIG1h\ndHJpeCBBIHN0b3JlZCBpbiBwYWNrZWQgZm9ybWF0IHVzaW5nIHRoZSBmYWN0b3JpemF0aW9uCiog\nIEEgPSBVKkQqVSoqVCBvciBBID0gTCpEKkwqKlQgY29tcHV0ZWQgYnkgRFNQVFJGLgoqCiogIEFy\nZ3VtZW50cwoqICA9PT09PT09PT0KKgoqICBVUExPICAgIChpbnB1dCkgQ0hBUkFDVEVSKjEKKiAg\nICAgICAgICBTcGVjaWZpZXMgd2hldGhlciB0aGUgZGV0YWlscyBvZiB0aGUgZmFjdG9yaXphdGlv\nbiBhcmUgc3RvcmVkCiogICAgICAgICAgYXMgYW4gdXBwZXIgb3IgbG93ZXIgdHJpYW5ndWxhciBt\nYXRyaXguCiogICAgICAgICAgPSAnVSc6ICBVcHBlciB0cmlhbmd1bGFyLCBmb3JtIGlzIEEgPSBV\nKkQqVSoqVDsKKiAgICAgICAgICA9ICdMJzogIExvd2VyIHRyaWFuZ3VsYXIsIGZvcm0gaXMgQSA9\nIEwqRCpMKipULgoqCiogIE4gICAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG9y\nZGVyIG9mIHRoZSBtYXRyaXggQS4gIE4gPj0gMC4KKgoqICBOUkhTICAgIChpbnB1dCkgSU5URUdF\nUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2YgcmlnaHQgaGFuZCBzaWRlcywgaS5lLiwgdGhlIG51\nbWJlciBvZiBjb2x1bW5zCiogICAgICAgICAgb2YgdGhlIG1hdHJpeCBCLiAgTlJIUyA+PSAwLgoq\nCiogIEFQICAgICAgKGlucHV0KSBET1VCTEUgUFJFQ0lTSU9OIGFycmF5LCBkaW1lbnNpb24gKE4q\nKE4rMSkvMikKKiAgICAgICAgICBUaGUgYmxvY2sgZGlhZ29uYWwgbWF0cml4IEQgYW5kIHRoZSBt\ndWx0aXBsaWVycyB1c2VkIHRvCiogICAgICAgICAgb2J0YWluIHRoZSBmYWN0b3IgVSBvciBMIGFz\nIGNvbXB1dGVkIGJ5IERTUFRSRiwgc3RvcmVkIGFzIGEKKiAgICAgICAgICBwYWNrZWQgdHJpYW5n\ndWxhciBtYXRyaXguCioKKiAgSVBJViAgICAoaW5wdXQpIElOVEVHRVIgYXJyYXksIGRpbWVuc2lv\nbiAoTikKKiAgICAgICAgICBEZXRhaWxzIG9mIHRoZSBpbnRlcmNoYW5nZXMgYW5kIHRoZSBibG9j\nayBzdHJ1Y3R1cmUgb2YgRAoqICAgICAgICAgIGFzIGRldGVybWluZWQgYnkgRFNQVFJGLgoqCiog\nIEIgICAgICAgKGlucHV0L291dHB1dCkgRE9VQkxFIFBSRUNJU0lPTiBhcnJheSwgZGltZW5zaW9u\nIChMREIsTlJIUykKKiAgICAgICAgICBPbiBlbnRyeSwgdGhlIHJpZ2h0IGhhbmQgc2lkZSBtYXRy\naXggQi4KKiAgICAgICAgICBPbiBleGl0LCB0aGUgc29sdXRpb24gbWF0cml4IFguCioKKiAgTERC\nICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbGVhZGluZyBkaW1lbnNpb24gb2Yg\ndGhlIGFycmF5IEIuICBMREIgPj0gbWF4KDEsTikuCioKKiAgSU5GTyAgICAob3V0cHV0KSBJTlRF\nR0VSCiogICAgICAgICAgPSAwOiAgc3VjY2Vzc2Z1bCBleGl0CiogICAgICAgICAgPCAwOiBpZiBJ\nTkZPID0gLWksIHRoZSBpLXRoIGFyZ3VtZW50IGhhZCBhbiBpbGxlZ2FsIHZhbHVlCioKcrIFAABo\nhmiHKYFyswUAAH1ytAUAAChoioloi2iMdWJomIoCKAFomVgOAAAAZHNwdHJzXzI5Ni50eHRytQUA\nAHViaJuKAigBaJxYBQAAAHNwdHJzcrYFAABomIoBWHViaH1oYV1ofodScrcFAAB9crgFAAAoaIFY\nCQAAAEhlcm1pdGlhbnK5BQAAaINYBgAAAHBhY2tlZHK6BQAAaHFYNQAAAGNvbXB1dGF0aW9uYWws\nIHNvbHZlIEEqWCA9IEIgdXNpbmcgVSpEKlUqSCBvciBMKkQqTCpIcrsFAABohmiHKYFyvAUAAH1y\nvQUAAChoioloi2iMdWJojVgtAAAAaHR0cDovL3d3dy5uZXRsaWIub3JnL2xhcGFjay9jb21wbGV4\nL2NocHRycy5mcr4FAABoj1gBAAAAY2iQaH1okV1ofodScr8FAAB9csAFAAAoaJRYGQgAACAgICAg\nIFNVQlJPVVRJTkUgQ0hQVFJTKCBVUExPLCBOLCBOUkhTLCBBUCwgSVBJViwgQiwgTERCLCBJTkZP\nICkKKgoqICAtLSBMQVBBQ0sgcm91dGluZSAodmVyc2lvbiAzLjMuMSkgLS0KKiAgLS0gTEFQQUNL\nIGlzIGEgc29mdHdhcmUgcGFja2FnZSBwcm92aWRlZCBieSBVbml2LiBvZiBUZW5uZXNzZWUsICAg\nIC0tCiogIC0tIFVuaXYuIG9mIENhbGlmb3JuaWEgQmVya2VsZXksIFVuaXYuIG9mIENvbG9yYWRv\nIERlbnZlciBhbmQgTkFHIEx0ZC4uLS0KKiAgLS0gQXByaWwgMjAxMSAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tCioKKiAgICAgLi4gU2NhbGFy\nIEFyZ3VtZW50cyAuLgogICAgICBDSEFSQUNURVIgICAgICAgICAgVVBMTwogICAgICBJTlRFR0VS\nICAgICAgICAgICAgSU5GTywgTERCLCBOLCBOUkhTCiogICAgIC4uCiogICAgIC4uIEFycmF5IEFy\nZ3VtZW50cyAuLgogICAgICBJTlRFR0VSICAgICAgICAgICAgSVBJViggKiApCiAgICAgIENPTVBM\nRVggICAgICAgICAgICBBUCggKiApLCBCKCBMREIsICogKQoqICAgICAuLgoqCiogIFB1cnBvc2UK\nKiAgPT09PT09PQoqCiogIENIUFRSUyBzb2x2ZXMgYSBzeXN0ZW0gb2YgbGluZWFyIGVxdWF0aW9u\ncyBBKlggPSBCIHdpdGggYSBjb21wbGV4CiogIEhlcm1pdGlhbiBtYXRyaXggQSBzdG9yZWQgaW4g\ncGFja2VkIGZvcm1hdCB1c2luZyB0aGUgZmFjdG9yaXphdGlvbgoqICBBID0gVSpEKlUqKkggb3Ig\nQSA9IEwqRCpMKipIIGNvbXB1dGVkIGJ5IENIUFRSRi4KKgoqICBBcmd1bWVudHMKKiAgPT09PT09\nPT09CioKKiAgVVBMTyAgICAoaW5wdXQpIENIQVJBQ1RFUioxCiogICAgICAgICAgU3BlY2lmaWVz\nIHdoZXRoZXIgdGhlIGRldGFpbHMgb2YgdGhlIGZhY3Rvcml6YXRpb24gYXJlIHN0b3JlZAoqICAg\nICAgICAgIGFzIGFuIHVwcGVyIG9yIGxvd2VyIHRyaWFuZ3VsYXIgbWF0cml4LgoqICAgICAgICAg\nID0gJ1UnOiAgVXBwZXIgdHJpYW5ndWxhciwgZm9ybSBpcyBBID0gVSpEKlUqKkg7CiogICAgICAg\nICAgPSAnTCc6ICBMb3dlciB0cmlhbmd1bGFyLCBmb3JtIGlzIEEgPSBMKkQqTCoqSC4KKgoqICBO\nICAgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBvcmRlciBvZiB0aGUgbWF0cml4\nIEEuICBOID49IDAuCioKKiAgTlJIUyAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUg\nbnVtYmVyIG9mIHJpZ2h0IGhhbmQgc2lkZXMsIGkuZS4sIHRoZSBudW1iZXIgb2YgY29sdW1ucwoq\nICAgICAgICAgIG9mIHRoZSBtYXRyaXggQi4gIE5SSFMgPj0gMC4KKgoqICBBUCAgICAgIChpbnB1\ndCkgQ09NUExFWCBhcnJheSwgZGltZW5zaW9uIChOKihOKzEpLzIpCiogICAgICAgICAgVGhlIGJs\nb2NrIGRpYWdvbmFsIG1hdHJpeCBEIGFuZCB0aGUgbXVsdGlwbGllcnMgdXNlZCB0bwoqICAgICAg\nICAgIG9idGFpbiB0aGUgZmFjdG9yIFUgb3IgTCBhcyBjb21wdXRlZCBieSBDSFBUUkYsIHN0b3Jl\nZCBhcyBhCiogICAgICAgICAgcGFja2VkIHRyaWFuZ3VsYXIgbWF0cml4LgoqCiogIElQSVYgICAg\nKGlucHV0KSBJTlRFR0VSIGFycmF5LCBkaW1lbnNpb24gKE4pCiogICAgICAgICAgRGV0YWlscyBv\nZiB0aGUgaW50ZXJjaGFuZ2VzIGFuZCB0aGUgYmxvY2sgc3RydWN0dXJlIG9mIEQKKiAgICAgICAg\nICBhcyBkZXRlcm1pbmVkIGJ5IENIUFRSRi4KKgoqICBCICAgICAgIChpbnB1dC9vdXRwdXQpIENP\nTVBMRVggYXJyYXksIGRpbWVuc2lvbiAoTERCLE5SSFMpCiogICAgICAgICAgT24gZW50cnksIHRo\nZSByaWdodCBoYW5kIHNpZGUgbWF0cml4IEIuCiogICAgICAgICAgT24gZXhpdCwgdGhlIHNvbHV0\naW9uIG1hdHJpeCBYLgoqCiogIExEQiAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhl\nIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBCLiAgTERCID49IG1heCgxLE4pLgoqCiog\nIElORk8gICAgKG91dHB1dCkgSU5URUdFUgoqICAgICAgICAgID0gMDogIHN1Y2Nlc3NmdWwgZXhp\ndAoqICAgICAgICAgIDwgMDogaWYgSU5GTyA9IC1pLCB0aGUgaS10aCBhcmd1bWVudCBoYWQgYW4g\naWxsZWdhbCB2YWx1ZQoqCnLBBQAAaIZohymBcsIFAAB9csMFAAAoaIqJaItojHViaJiKAikBaJlY\nDgAAAGNocHRyc18yOTcudHh0csQFAAB1YmibigIpAWicWAUAAABocHRyc3LFBQAAaJiKAVl1Ymh9\naGFdaH6HUnLGBQAAfXLHBQAAKGiBWAkAAABIZXJtaXRpYW5yyAUAAGiDWAYAAABwYWNrZWRyyQUA\nAGhxWDUAAABjb21wdXRhdGlvbmFsLCBzb2x2ZSBBKlggPSBCIHVzaW5nIFUqRCpVKkggb3IgTCpE\nKkwqSHLKBQAAaIZohymBcssFAAB9cswFAAAoaIqJaItojHViaI1YLwAAAGh0dHA6Ly93d3cubmV0\nbGliLm9yZy9sYXBhY2svY29tcGxleDE2L3pocHRycy5mcs0FAABoj1gBAAAAemiQaH1okV1ofodS\ncs4FAAB9cs8FAAAoaJRYHwgAACAgICAgIFNVQlJPVVRJTkUgWkhQVFJTKCBVUExPLCBOLCBOUkhT\nLCBBUCwgSVBJViwgQiwgTERCLCBJTkZPICkKKgoqICAtLSBMQVBBQ0sgcm91dGluZSAodmVyc2lv\nbiAzLjMuMSkgLS0KKiAgLS0gTEFQQUNLIGlzIGEgc29mdHdhcmUgcGFja2FnZSBwcm92aWRlZCBi\neSBVbml2LiBvZiBUZW5uZXNzZWUsICAgIC0tCiogIC0tIFVuaXYuIG9mIENhbGlmb3JuaWEgQmVy\na2VsZXksIFVuaXYuIG9mIENvbG9yYWRvIERlbnZlciBhbmQgTkFHIEx0ZC4uLS0KKiAgLS0gQXBy\naWwgMjAxMSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgIC0tCioKKiAgICAgLi4gU2NhbGFyIEFyZ3VtZW50cyAuLgogICAgICBDSEFSQUNURVIgICAg\nICAgICAgVVBMTwogICAgICBJTlRFR0VSICAgICAgICAgICAgSU5GTywgTERCLCBOLCBOUkhTCiog\nICAgIC4uCiogICAgIC4uIEFycmF5IEFyZ3VtZW50cyAuLgogICAgICBJTlRFR0VSICAgICAgICAg\nICAgSVBJViggKiApCiAgICAgIENPTVBMRVgqMTYgICAgICAgICBBUCggKiApLCBCKCBMREIsICog\nKQoqICAgICAuLgoqCiogIFB1cnBvc2UKKiAgPT09PT09PQoqCiogIFpIUFRSUyBzb2x2ZXMgYSBz\neXN0ZW0gb2YgbGluZWFyIGVxdWF0aW9ucyBBKlggPSBCIHdpdGggYSBjb21wbGV4CiogIEhlcm1p\ndGlhbiBtYXRyaXggQSBzdG9yZWQgaW4gcGFja2VkIGZvcm1hdCB1c2luZyB0aGUgZmFjdG9yaXph\ndGlvbgoqICBBID0gVSpEKlUqKkggb3IgQSA9IEwqRCpMKipIIGNvbXB1dGVkIGJ5IFpIUFRSRi4K\nKgoqICBBcmd1bWVudHMKKiAgPT09PT09PT09CioKKiAgVVBMTyAgICAoaW5wdXQpIENIQVJBQ1RF\nUioxCiogICAgICAgICAgU3BlY2lmaWVzIHdoZXRoZXIgdGhlIGRldGFpbHMgb2YgdGhlIGZhY3Rv\ncml6YXRpb24gYXJlIHN0b3JlZAoqICAgICAgICAgIGFzIGFuIHVwcGVyIG9yIGxvd2VyIHRyaWFu\nZ3VsYXIgbWF0cml4LgoqICAgICAgICAgID0gJ1UnOiAgVXBwZXIgdHJpYW5ndWxhciwgZm9ybSBp\ncyBBID0gVSpEKlUqKkg7CiogICAgICAgICAgPSAnTCc6ICBMb3dlciB0cmlhbmd1bGFyLCBmb3Jt\nIGlzIEEgPSBMKkQqTCoqSC4KKgoqICBOICAgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAg\nIFRoZSBvcmRlciBvZiB0aGUgbWF0cml4IEEuICBOID49IDAuCioKKiAgTlJIUyAgICAoaW5wdXQp\nIElOVEVHRVIKKiAgICAgICAgICBUaGUgbnVtYmVyIG9mIHJpZ2h0IGhhbmQgc2lkZXMsIGkuZS4s\nIHRoZSBudW1iZXIgb2YgY29sdW1ucwoqICAgICAgICAgIG9mIHRoZSBtYXRyaXggQi4gIE5SSFMg\nPj0gMC4KKgoqICBBUCAgICAgIChpbnB1dCkgQ09NUExFWCoxNiBhcnJheSwgZGltZW5zaW9uIChO\nKihOKzEpLzIpCiogICAgICAgICAgVGhlIGJsb2NrIGRpYWdvbmFsIG1hdHJpeCBEIGFuZCB0aGUg\nbXVsdGlwbGllcnMgdXNlZCB0bwoqICAgICAgICAgIG9idGFpbiB0aGUgZmFjdG9yIFUgb3IgTCBh\ncyBjb21wdXRlZCBieSBaSFBUUkYsIHN0b3JlZCBhcyBhCiogICAgICAgICAgcGFja2VkIHRyaWFu\nZ3VsYXIgbWF0cml4LgoqCiogIElQSVYgICAgKGlucHV0KSBJTlRFR0VSIGFycmF5LCBkaW1lbnNp\nb24gKE4pCiogICAgICAgICAgRGV0YWlscyBvZiB0aGUgaW50ZXJjaGFuZ2VzIGFuZCB0aGUgYmxv\nY2sgc3RydWN0dXJlIG9mIEQKKiAgICAgICAgICBhcyBkZXRlcm1pbmVkIGJ5IFpIUFRSRi4KKgoq\nICBCICAgICAgIChpbnB1dC9vdXRwdXQpIENPTVBMRVgqMTYgYXJyYXksIGRpbWVuc2lvbiAoTERC\nLE5SSFMpCiogICAgICAgICAgT24gZW50cnksIHRoZSByaWdodCBoYW5kIHNpZGUgbWF0cml4IEIu\nCiogICAgICAgICAgT24gZXhpdCwgdGhlIHNvbHV0aW9uIG1hdHJpeCBYLgoqCiogIExEQiAgICAg\nKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBh\ncnJheSBCLiAgTERCID49IG1heCgxLE4pLgoqCiogIElORk8gICAgKG91dHB1dCkgSU5URUdFUgoq\nICAgICAgICAgID0gMDogIHN1Y2Nlc3NmdWwgZXhpdAoqICAgICAgICAgIDwgMDogaWYgSU5GTyA9\nIC1pLCB0aGUgaS10aCBhcmd1bWVudCBoYWQgYW4gaWxsZWdhbCB2YWx1ZQoqCnLQBQAAaIZohymB\nctEFAAB9ctIFAAAoaIqJaItojHViaJiKAioBaJlYDgAAAHpocHRyc18yOTgudHh0ctMFAAB1Ymib\nigIqAWicWAUAAABocHRyc3LUBQAAaJiKAVp1Ymh9aGFdaH6HUnLVBQAAfXLWBQAAKGiBWAkAAABz\neW1tZXRyaWNy1wUAAGiDWAYAAABwYWNrZWRy2AUAAGhxWD8AAABjb21wdXRhdGlvbmFsLCBzb2x2\nZSBBKlggPSBCIHVzaW5nIEEgPSBVKkQqVSoqVCBvciBBID0gTCpEKkwqKlRy2QUAAGiGaIcpgXLa\nBQAAfXLbBQAAKGiKiWiLaIx1YmiNWC0AAABodHRwOi8vd3d3Lm5ldGxpYi5vcmcvbGFwYWNrL2Nv\nbXBsZXgvY3NwdHJzLmZy3AUAAGiPWAEAAABjaJBofWiRXWh+h1Jy3QUAAH1y3gUAACholFgZCAAA\nICAgICAgU1VCUk9VVElORSBDU1BUUlMoIFVQTE8sIE4sIE5SSFMsIEFQLCBJUElWLCBCLCBMREIs\nIElORk8gKQoqCiogIC0tIExBUEFDSyByb3V0aW5lICh2ZXJzaW9uIDMuMy4xKSAtLQoqICAtLSBM\nQVBBQ0sgaXMgYSBzb2Z0d2FyZSBwYWNrYWdlIHByb3ZpZGVkIGJ5IFVuaXYuIG9mIFRlbm5lc3Nl\nZSwgICAgLS0KKiAgLS0gVW5pdi4gb2YgQ2FsaWZvcm5pYSBCZXJrZWxleSwgVW5pdi4gb2YgQ29s\nb3JhZG8gRGVudmVyIGFuZCBOQUcgTHRkLi4tLQoqICAtLSBBcHJpbCAyMDExICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0KKgoqICAgICAuLiBT\nY2FsYXIgQXJndW1lbnRzIC4uCiAgICAgIENIQVJBQ1RFUiAgICAgICAgICBVUExPCiAgICAgIElO\nVEVHRVIgICAgICAgICAgICBJTkZPLCBMREIsIE4sIE5SSFMKKiAgICAgLi4KKiAgICAgLi4gQXJy\nYXkgQXJndW1lbnRzIC4uCiAgICAgIElOVEVHRVIgICAgICAgICAgICBJUElWKCAqICkKICAgICAg\nQ09NUExFWCAgICAgICAgICAgIEFQKCAqICksIEIoIExEQiwgKiApCiogICAgIC4uCioKKiAgUHVy\ncG9zZQoqICA9PT09PT09CioKKiAgQ1NQVFJTIHNvbHZlcyBhIHN5c3RlbSBvZiBsaW5lYXIgZXF1\nYXRpb25zIEEqWCA9IEIgd2l0aCBhIGNvbXBsZXgKKiAgc3ltbWV0cmljIG1hdHJpeCBBIHN0b3Jl\nZCBpbiBwYWNrZWQgZm9ybWF0IHVzaW5nIHRoZSBmYWN0b3JpemF0aW9uCiogIEEgPSBVKkQqVSoq\nVCBvciBBID0gTCpEKkwqKlQgY29tcHV0ZWQgYnkgQ1NQVFJGLgoqCiogIEFyZ3VtZW50cwoqICA9\nPT09PT09PT0KKgoqICBVUExPICAgIChpbnB1dCkgQ0hBUkFDVEVSKjEKKiAgICAgICAgICBTcGVj\naWZpZXMgd2hldGhlciB0aGUgZGV0YWlscyBvZiB0aGUgZmFjdG9yaXphdGlvbiBhcmUgc3RvcmVk\nCiogICAgICAgICAgYXMgYW4gdXBwZXIgb3IgbG93ZXIgdHJpYW5ndWxhciBtYXRyaXguCiogICAg\nICAgICAgPSAnVSc6ICBVcHBlciB0cmlhbmd1bGFyLCBmb3JtIGlzIEEgPSBVKkQqVSoqVDsKKiAg\nICAgICAgICA9ICdMJzogIExvd2VyIHRyaWFuZ3VsYXIsIGZvcm0gaXMgQSA9IEwqRCpMKipULgoq\nCiogIE4gICAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG9yZGVyIG9mIHRoZSBt\nYXRyaXggQS4gIE4gPj0gMC4KKgoqICBOUkhTICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAg\nIFRoZSBudW1iZXIgb2YgcmlnaHQgaGFuZCBzaWRlcywgaS5lLiwgdGhlIG51bWJlciBvZiBjb2x1\nbW5zCiogICAgICAgICAgb2YgdGhlIG1hdHJpeCBCLiAgTlJIUyA+PSAwLgoqCiogIEFQICAgICAg\nKGlucHV0KSBDT01QTEVYIGFycmF5LCBkaW1lbnNpb24gKE4qKE4rMSkvMikKKiAgICAgICAgICBU\naGUgYmxvY2sgZGlhZ29uYWwgbWF0cml4IEQgYW5kIHRoZSBtdWx0aXBsaWVycyB1c2VkIHRvCiog\nICAgICAgICAgb2J0YWluIHRoZSBmYWN0b3IgVSBvciBMIGFzIGNvbXB1dGVkIGJ5IENTUFRSRiwg\nc3RvcmVkIGFzIGEKKiAgICAgICAgICBwYWNrZWQgdHJpYW5ndWxhciBtYXRyaXguCioKKiAgSVBJ\nViAgICAoaW5wdXQpIElOVEVHRVIgYXJyYXksIGRpbWVuc2lvbiAoTikKKiAgICAgICAgICBEZXRh\naWxzIG9mIHRoZSBpbnRlcmNoYW5nZXMgYW5kIHRoZSBibG9jayBzdHJ1Y3R1cmUgb2YgRAoqICAg\nICAgICAgIGFzIGRldGVybWluZWQgYnkgQ1NQVFJGLgoqCiogIEIgICAgICAgKGlucHV0L291dHB1\ndCkgQ09NUExFWCBhcnJheSwgZGltZW5zaW9uIChMREIsTlJIUykKKiAgICAgICAgICBPbiBlbnRy\neSwgdGhlIHJpZ2h0IGhhbmQgc2lkZSBtYXRyaXggQi4KKiAgICAgICAgICBPbiBleGl0LCB0aGUg\nc29sdXRpb24gbWF0cml4IFguCioKKiAgTERCICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAg\nICBUaGUgbGVhZGluZyBkaW1lbnNpb24gb2YgdGhlIGFycmF5IEIuICBMREIgPj0gbWF4KDEsTiku\nCioKKiAgSU5GTyAgICAob3V0cHV0KSBJTlRFR0VSCiogICAgICAgICAgPSAwOiAgc3VjY2Vzc2Z1\nbCBleGl0CiogICAgICAgICAgPCAwOiBpZiBJTkZPID0gLWksIHRoZSBpLXRoIGFyZ3VtZW50IGhh\nZCBhbiBpbGxlZ2FsIHZhbHVlCioKct8FAABohmiHKYFy4AUAAH1y4QUAAChoioloi2iMdWJomIoC\nKwFomVgOAAAAY3NwdHJzXzI5OS50eHRy4gUAAHViaJuKAisBaJxYBQAAAHNwdHJzcuMFAABomIoB\nW3ViaH1oYV1ofodScuQFAAB9cuUFAAAoaIFYCQAAAHN5bW1ldHJpY3LmBQAAaINYBgAAAHBhY2tl\nZHLnBQAAaHFYQAAAAGNvbXB1dGF0aW9uYWwsIHNvbHZlIEEqWCA9IEIgdXNpbmcgQSA9IFUqRCpV\nKipUIG9yIEEgPSBMKkQqTCoqVCBy6AUAAGiGaIcpgXLpBQAAfXLqBQAAKGiKiWiLaIx1YmiNWC8A\nAABodHRwOi8vd3d3Lm5ldGxpYi5vcmcvbGFwYWNrL2NvbXBsZXgxNi96c3B0cnMuZnLrBQAAaI9Y\nAQAAAHpokGh9aJFdaH6HUnLsBQAAfXLtBQAAKGiUWB8IAAAgICAgICBTVUJST1VUSU5FIFpTUFRS\nUyggVVBMTywgTiwgTlJIUywgQVAsIElQSVYsIEIsIExEQiwgSU5GTyApCioKKiAgLS0gTEFQQUNL\nIHJvdXRpbmUgKHZlcnNpb24gMy4zLjEpIC0tCiogIC0tIExBUEFDSyBpcyBhIHNvZnR3YXJlIHBh\nY2thZ2UgcHJvdmlkZWQgYnkgVW5pdi4gb2YgVGVubmVzc2VlLCAgICAtLQoqICAtLSBVbml2LiBv\nZiBDYWxpZm9ybmlhIEJlcmtlbGV5LCBVbml2LiBvZiBDb2xvcmFkbyBEZW52ZXIgYW5kIE5BRyBM\ndGQuLi0tCiogIC0tIEFwcmlsIDIwMTEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\nICAgICAgICAgICAgICAgICAgICAtLQoqCiogICAgIC4uIFNjYWxhciBBcmd1bWVudHMgLi4KICAg\nICAgQ0hBUkFDVEVSICAgICAgICAgIFVQTE8KICAgICAgSU5URUdFUiAgICAgICAgICAgIElORk8s\nIExEQiwgTiwgTlJIUwoqICAgICAuLgoqICAgICAuLiBBcnJheSBBcmd1bWVudHMgLi4KICAgICAg\nSU5URUdFUiAgICAgICAgICAgIElQSVYoICogKQogICAgICBDT01QTEVYKjE2ICAgICAgICAgQVAo\nICogKSwgQiggTERCLCAqICkKKiAgICAgLi4KKgoqICBQdXJwb3NlCiogID09PT09PT0KKgoqICBa\nU1BUUlMgc29sdmVzIGEgc3lzdGVtIG9mIGxpbmVhciBlcXVhdGlvbnMgQSpYID0gQiB3aXRoIGEg\nY29tcGxleAoqICBzeW1tZXRyaWMgbWF0cml4IEEgc3RvcmVkIGluIHBhY2tlZCBmb3JtYXQgdXNp\nbmcgdGhlIGZhY3Rvcml6YXRpb24KKiAgQSA9IFUqRCpVKipUIG9yIEEgPSBMKkQqTCoqVCBjb21w\ndXRlZCBieSBaU1BUUkYuCioKKiAgQXJndW1lbnRzCiogID09PT09PT09PQoqCiogIFVQTE8gICAg\nKGlucHV0KSBDSEFSQUNURVIqMQoqICAgICAgICAgIFNwZWNpZmllcyB3aGV0aGVyIHRoZSBkZXRh\naWxzIG9mIHRoZSBmYWN0b3JpemF0aW9uIGFyZSBzdG9yZWQKKiAgICAgICAgICBhcyBhbiB1cHBl\nciBvciBsb3dlciB0cmlhbmd1bGFyIG1hdHJpeC4KKiAgICAgICAgICA9ICdVJzogIFVwcGVyIHRy\naWFuZ3VsYXIsIGZvcm0gaXMgQSA9IFUqRCpVKipUOwoqICAgICAgICAgID0gJ0wnOiAgTG93ZXIg\ndHJpYW5ndWxhciwgZm9ybSBpcyBBID0gTCpEKkwqKlQuCioKKiAgTiAgICAgICAoaW5wdXQpIElO\nVEVHRVIKKiAgICAgICAgICBUaGUgb3JkZXIgb2YgdGhlIG1hdHJpeCBBLiAgTiA+PSAwLgoqCiog\nIE5SSFMgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG51bWJlciBvZiByaWdodCBo\nYW5kIHNpZGVzLCBpLmUuLCB0aGUgbnVtYmVyIG9mIGNvbHVtbnMKKiAgICAgICAgICBvZiB0aGUg\nbWF0cml4IEIuICBOUkhTID49IDAuCioKKiAgQVAgICAgICAoaW5wdXQpIENPTVBMRVgqMTYgYXJy\nYXksIGRpbWVuc2lvbiAoTiooTisxKS8yKQoqICAgICAgICAgIFRoZSBibG9jayBkaWFnb25hbCBt\nYXRyaXggRCBhbmQgdGhlIG11bHRpcGxpZXJzIHVzZWQgdG8KKiAgICAgICAgICBvYnRhaW4gdGhl\nIGZhY3RvciBVIG9yIEwgYXMgY29tcHV0ZWQgYnkgWlNQVFJGLCBzdG9yZWQgYXMgYQoqICAgICAg\nICAgIHBhY2tlZCB0cmlhbmd1bGFyIG1hdHJpeC4KKgoqICBJUElWICAgIChpbnB1dCkgSU5URUdF\nUiBhcnJheSwgZGltZW5zaW9uIChOKQoqICAgICAgICAgIERldGFpbHMgb2YgdGhlIGludGVyY2hh\nbmdlcyBhbmQgdGhlIGJsb2NrIHN0cnVjdHVyZSBvZiBECiogICAgICAgICAgYXMgZGV0ZXJtaW5l\nZCBieSBaU1BUUkYuCioKKiAgQiAgICAgICAoaW5wdXQvb3V0cHV0KSBDT01QTEVYKjE2IGFycmF5\nLCBkaW1lbnNpb24gKExEQixOUkhTKQoqICAgICAgICAgIE9uIGVudHJ5LCB0aGUgcmlnaHQgaGFu\nZCBzaWRlIG1hdHJpeCBCLgoqICAgICAgICAgIE9uIGV4aXQsIHRoZSBzb2x1dGlvbiBtYXRyaXgg\nWC4KKgoqICBMREIgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBsZWFkaW5nIGRp\nbWVuc2lvbiBvZiB0aGUgYXJyYXkgQi4gIExEQiA+PSBtYXgoMSxOKS4KKgoqICBJTkZPICAgIChv\ndXRwdXQpIElOVEVHRVIKKiAgICAgICAgICA9IDA6ICBzdWNjZXNzZnVsIGV4aXQKKiAgICAgICAg\nICA8IDA6IGlmIElORk8gPSAtaSwgdGhlIGktdGggYXJndW1lbnQgaGFkIGFuIGlsbGVnYWwgdmFs\ndWUKKgpy7gUAAGiGaIcpgXLvBQAAfXLwBQAAKGiKiWiLaIx1YmiYigIsAWiZWA4AAAB6c3B0cnNf\nMzAwLnR4dHLxBQAAdWJom4oCLAFonFgFAAAAc3B0cnNy8gUAAGiYigFcdWJofWhhXWh+h1Jy8wUA\nAH1y9AUAAChogVgKAAAAdHJpYW5ndWxhcnL1BQAAaINYBAAAAGZ1bGxy9gUAAGhxWD0AAABjb21w\ndXRhdGlvbmFsLCBzb2x2ZSBBKlggPSBCLCBCIGlzIGFuIE4tYnktTlJIUyBtYXRyaXgsIFRSQU5T\ncvcFAABohmiHKYFy+AUAAH1y+QUAAChoioloi2iMdWJojVgsAAAAaHR0cDovL3d3dy5uZXRsaWIu\nb3JnL2xhcGFjay9zaW5nbGUvc3RydHJzLmZy+gUAAGiPWAEAAABzaJBofWiRXWh+h1Jy+wUAAH1y\n/AUAACholFjdCgAAICAgICAgU1VCUk9VVElORSBTVFJUUlMoIFVQTE8sIFRSQU5TLCBESUFHLCBO\nLCBOUkhTLCBBLCBMREEsIEIsIExEQiwKICAgICAkICAgICAgICAgICAgICAgICAgIElORk8gKQoq\nCiogIC0tIExBUEFDSyByb3V0aW5lICh2ZXJzaW9uIDMuMikgLS0KKiAgLS0gTEFQQUNLIGlzIGEg\nc29mdHdhcmUgcGFja2FnZSBwcm92aWRlZCBieSBVbml2LiBvZiBUZW5uZXNzZWUsICAgIC0tCiog\nIC0tIFVuaXYuIG9mIENhbGlmb3JuaWEgQmVya2VsZXksIFVuaXYuIG9mIENvbG9yYWRvIERlbnZl\nciBhbmQgTkFHIEx0ZC4uLS0KKiAgICAgTm92ZW1iZXIgMjAwNgoqCiogICAgIC4uIFNjYWxhciBB\ncmd1bWVudHMgLi4KICAgICAgQ0hBUkFDVEVSICAgICAgICAgIERJQUcsIFRSQU5TLCBVUExPCiAg\nICAgIElOVEVHRVIgICAgICAgICAgICBJTkZPLCBMREEsIExEQiwgTiwgTlJIUwoqICAgICAuLgoq\nICAgICAuLiBBcnJheSBBcmd1bWVudHMgLi4KICAgICAgUkVBTCAgICAgICAgICAgICAgIEEoIExE\nQSwgKiApLCBCKCBMREIsICogKQoqICAgICAuLgoqCiogIFB1cnBvc2UKKiAgPT09PT09PQoqCiog\nIFNUUlRSUyBzb2x2ZXMgYSB0cmlhbmd1bGFyIHN5c3RlbSBvZiB0aGUgZm9ybQoqCiogICAgIEEg\nKiBYID0gQiAgb3IgIEEqKlQgKiBYID0gQiwKKgoqICB3aGVyZSBBIGlzIGEgdHJpYW5ndWxhciBt\nYXRyaXggb2Ygb3JkZXIgTiwgYW5kIEIgaXMgYW4gTi1ieS1OUkhTCiogIG1hdHJpeC4gIEEgY2hl\nY2sgaXMgbWFkZSB0byB2ZXJpZnkgdGhhdCBBIGlzIG5vbnNpbmd1bGFyLgoqCiogIEFyZ3VtZW50\ncwoqICA9PT09PT09PT0KKgoqICBVUExPICAgIChpbnB1dCkgQ0hBUkFDVEVSKjEKKiAgICAgICAg\nICA9ICdVJzogIEEgaXMgdXBwZXIgdHJpYW5ndWxhcjsKKiAgICAgICAgICA9ICdMJzogIEEgaXMg\nbG93ZXIgdHJpYW5ndWxhci4KKgoqICBUUkFOUyAgIChpbnB1dCkgQ0hBUkFDVEVSKjEKKiAgICAg\nICAgICBTcGVjaWZpZXMgdGhlIGZvcm0gb2YgdGhlIHN5c3RlbSBvZiBlcXVhdGlvbnM6CiogICAg\nICAgICAgPSAnTic6ICBBICogWCA9IEIgIChObyB0cmFuc3Bvc2UpCiogICAgICAgICAgPSAnVCc6\nICBBKipUICogWCA9IEIgIChUcmFuc3Bvc2UpCiogICAgICAgICAgPSAnQyc6ICBBKipIICogWCA9\nIEIgIChDb25qdWdhdGUgdHJhbnNwb3NlID0gVHJhbnNwb3NlKQoqCiogIERJQUcgICAgKGlucHV0\nKSBDSEFSQUNURVIqMQoqICAgICAgICAgID0gJ04nOiAgQSBpcyBub24tdW5pdCB0cmlhbmd1bGFy\nOwoqICAgICAgICAgID0gJ1UnOiAgQSBpcyB1bml0IHRyaWFuZ3VsYXIuCioKKiAgTiAgICAgICAo\naW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgb3JkZXIgb2YgdGhlIG1hdHJpeCBBLiAgTiA+\nPSAwLgoqCiogIE5SSFMgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG51bWJlciBv\nZiByaWdodCBoYW5kIHNpZGVzLCBpLmUuLCB0aGUgbnVtYmVyIG9mIGNvbHVtbnMKKiAgICAgICAg\nICBvZiB0aGUgbWF0cml4IEIuICBOUkhTID49IDAuCioKKiAgQSAgICAgICAoaW5wdXQpIFJFQUwg\nYXJyYXksIGRpbWVuc2lvbiAoTERBLE4pCiogICAgICAgICAgVGhlIHRyaWFuZ3VsYXIgbWF0cml4\nIEEuICBJZiBVUExPID0gJ1UnLCB0aGUgbGVhZGluZyBOLWJ5LU4KKiAgICAgICAgICB1cHBlciB0\ncmlhbmd1bGFyIHBhcnQgb2YgdGhlIGFycmF5IEEgY29udGFpbnMgdGhlIHVwcGVyCiogICAgICAg\nICAgdHJpYW5ndWxhciBtYXRyaXgsIGFuZCB0aGUgc3RyaWN0bHkgbG93ZXIgdHJpYW5ndWxhciBw\nYXJ0IG9mCiogICAgICAgICAgQSBpcyBub3QgcmVmZXJlbmNlZC4gIElmIFVQTE8gPSAnTCcsIHRo\nZSBsZWFkaW5nIE4tYnktTiBsb3dlcgoqICAgICAgICAgIHRyaWFuZ3VsYXIgcGFydCBvZiB0aGUg\nYXJyYXkgQSBjb250YWlucyB0aGUgbG93ZXIgdHJpYW5ndWxhcgoqICAgICAgICAgIG1hdHJpeCwg\nYW5kIHRoZSBzdHJpY3RseSB1cHBlciB0cmlhbmd1bGFyIHBhcnQgb2YgQSBpcyBub3QKKiAgICAg\nICAgICByZWZlcmVuY2VkLiAgSWYgRElBRyA9ICdVJywgdGhlIGRpYWdvbmFsIGVsZW1lbnRzIG9m\nIEEgYXJlCiogICAgICAgICAgYWxzbyBub3QgcmVmZXJlbmNlZCBhbmQgYXJlIGFzc3VtZWQgdG8g\nYmUgMS4KKgoqICBMREEgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBsZWFkaW5n\nIGRpbWVuc2lvbiBvZiB0aGUgYXJyYXkgQS4gIExEQSA+PSBtYXgoMSxOKS4KKgoqICBCICAgICAg\nIChpbnB1dC9vdXRwdXQpIFJFQUwgYXJyYXksIGRpbWVuc2lvbiAoTERCLE5SSFMpCiogICAgICAg\nICAgT24gZW50cnksIHRoZSByaWdodCBoYW5kIHNpZGUgbWF0cml4IEIuCiogICAgICAgICAgT24g\nZXhpdCwgaWYgSU5GTyA9IDAsIHRoZSBzb2x1dGlvbiBtYXRyaXggWC4KKgoqICBMREIgICAgIChp\nbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBsZWFkaW5nIGRpbWVuc2lvbiBvZiB0aGUgYXJy\nYXkgQi4gIExEQiA+PSBtYXgoMSxOKS4KKgoqICBJTkZPICAgIChvdXRwdXQpIElOVEVHRVIKKiAg\nICAgICAgICA9IDA6ICBzdWNjZXNzZnVsIGV4aXQKKiAgICAgICAgICA8IDA6IGlmIElORk8gPSAt\naSwgdGhlIGktdGggYXJndW1lbnQgaGFkIGFuIGlsbGVnYWwgdmFsdWUKKiAgICAgICAgICA+IDA6\nIGlmIElORk8gPSBpLCB0aGUgaS10aCBkaWFnb25hbCBlbGVtZW50IG9mIEEgaXMgemVybywKKiAg\nICAgICAgICAgICAgIGluZGljYXRpbmcgdGhhdCB0aGUgbWF0cml4IGlzIHNpbmd1bGFyIGFuZCB0\naGUgc29sdXRpb25zCiogICAgICAgICAgICAgICBYIGhhdmUgbm90IGJlZW4gY29tcHV0ZWQuCioK\ncv0FAABohmiHKYFy/gUAAH1y/wUAAChoioloi2iMdWJomIoCLQFomVgOAAAAc3RydHJzXzMwMS50\neHRyAAYAAHViaJuKAi0BaJxYBQAAAHRydHJzcgEGAABomIoBXXViaH1oYV1ofodScgIGAAB9cgMG\nAAAoaIFYCgAAAHRyaWFuZ3VsYXJyBAYAAGiDWAQAAABmdWxscgUGAABocVg9AAAAY29tcHV0YXRp\nb25hbCwgc29sdmUgQSpYID0gQiwgQiBpcyBhbiBOLWJ5LU5SSFMgbWF0cml4LCBUUkFOU3IGBgAA\naIZohymBcgcGAAB9cggGAAAoaIqJaItojHViaI1YLAAAAGh0dHA6Ly93d3cubmV0bGliLm9yZy9s\nYXBhY2svZG91YmxlL2R0cnRycy5mcgkGAABoj1gBAAAAZGiQaH1okV1ofodScgoGAAB9cgsGAAAo\naJRY9QoAACAgICAgIFNVQlJPVVRJTkUgRFRSVFJTKCBVUExPLCBUUkFOUywgRElBRywgTiwgTlJI\nUywgQSwgTERBLCBCLCBMREIsCiAgICAgJCAgICAgICAgICAgICAgICAgICBJTkZPICkKKgoqICAt\nLSBMQVBBQ0sgcm91dGluZSAodmVyc2lvbiAzLjIpIC0tCiogIC0tIExBUEFDSyBpcyBhIHNvZnR3\nYXJlIHBhY2thZ2UgcHJvdmlkZWQgYnkgVW5pdi4gb2YgVGVubmVzc2VlLCAgICAtLQoqICAtLSBV\nbml2LiBvZiBDYWxpZm9ybmlhIEJlcmtlbGV5LCBVbml2LiBvZiBDb2xvcmFkbyBEZW52ZXIgYW5k\nIE5BRyBMdGQuLi0tCiogICAgIE5vdmVtYmVyIDIwMDYKKgoqICAgICAuLiBTY2FsYXIgQXJndW1l\nbnRzIC4uCiAgICAgIENIQVJBQ1RFUiAgICAgICAgICBESUFHLCBUUkFOUywgVVBMTwogICAgICBJ\nTlRFR0VSICAgICAgICAgICAgSU5GTywgTERBLCBMREIsIE4sIE5SSFMKKiAgICAgLi4KKiAgICAg\nLi4gQXJyYXkgQXJndW1lbnRzIC4uCiAgICAgIERPVUJMRSBQUkVDSVNJT04gICBBKCBMREEsICog\nKSwgQiggTERCLCAqICkKKiAgICAgLi4KKgoqICBQdXJwb3NlCiogID09PT09PT0KKgoqICBEVFJU\nUlMgc29sdmVzIGEgdHJpYW5ndWxhciBzeXN0ZW0gb2YgdGhlIGZvcm0KKgoqICAgICBBICogWCA9\nIEIgIG9yICBBKipUICogWCA9IEIsCioKKiAgd2hlcmUgQSBpcyBhIHRyaWFuZ3VsYXIgbWF0cml4\nIG9mIG9yZGVyIE4sIGFuZCBCIGlzIGFuIE4tYnktTlJIUwoqICBtYXRyaXguICBBIGNoZWNrIGlz\nIG1hZGUgdG8gdmVyaWZ5IHRoYXQgQSBpcyBub25zaW5ndWxhci4KKgoqICBBcmd1bWVudHMKKiAg\nPT09PT09PT09CioKKiAgVVBMTyAgICAoaW5wdXQpIENIQVJBQ1RFUioxCiogICAgICAgICAgPSAn\nVSc6ICBBIGlzIHVwcGVyIHRyaWFuZ3VsYXI7CiogICAgICAgICAgPSAnTCc6ICBBIGlzIGxvd2Vy\nIHRyaWFuZ3VsYXIuCioKKiAgVFJBTlMgICAoaW5wdXQpIENIQVJBQ1RFUioxCiogICAgICAgICAg\nU3BlY2lmaWVzIHRoZSBmb3JtIG9mIHRoZSBzeXN0ZW0gb2YgZXF1YXRpb25zOgoqICAgICAgICAg\nID0gJ04nOiAgQSAqIFggPSBCICAoTm8gdHJhbnNwb3NlKQoqICAgICAgICAgID0gJ1QnOiAgQSoq\nVCAqIFggPSBCICAoVHJhbnNwb3NlKQoqICAgICAgICAgID0gJ0MnOiAgQSoqSCAqIFggPSBCICAo\nQ29uanVnYXRlIHRyYW5zcG9zZSA9IFRyYW5zcG9zZSkKKgoqICBESUFHICAgIChpbnB1dCkgQ0hB\nUkFDVEVSKjEKKiAgICAgICAgICA9ICdOJzogIEEgaXMgbm9uLXVuaXQgdHJpYW5ndWxhcjsKKiAg\nICAgICAgICA9ICdVJzogIEEgaXMgdW5pdCB0cmlhbmd1bGFyLgoqCiogIE4gICAgICAgKGlucHV0\nKSBJTlRFR0VSCiogICAgICAgICAgVGhlIG9yZGVyIG9mIHRoZSBtYXRyaXggQS4gIE4gPj0gMC4K\nKgoqICBOUkhTICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2Ygcmln\naHQgaGFuZCBzaWRlcywgaS5lLiwgdGhlIG51bWJlciBvZiBjb2x1bW5zCiogICAgICAgICAgb2Yg\ndGhlIG1hdHJpeCBCLiAgTlJIUyA+PSAwLgoqCiogIEEgICAgICAgKGlucHV0KSBET1VCTEUgUFJF\nQ0lTSU9OIGFycmF5LCBkaW1lbnNpb24gKExEQSxOKQoqICAgICAgICAgIFRoZSB0cmlhbmd1bGFy\nIG1hdHJpeCBBLiAgSWYgVVBMTyA9ICdVJywgdGhlIGxlYWRpbmcgTi1ieS1OCiogICAgICAgICAg\ndXBwZXIgdHJpYW5ndWxhciBwYXJ0IG9mIHRoZSBhcnJheSBBIGNvbnRhaW5zIHRoZSB1cHBlcgoq\nICAgICAgICAgIHRyaWFuZ3VsYXIgbWF0cml4LCBhbmQgdGhlIHN0cmljdGx5IGxvd2VyIHRyaWFu\nZ3VsYXIgcGFydCBvZgoqICAgICAgICAgIEEgaXMgbm90IHJlZmVyZW5jZWQuICBJZiBVUExPID0g\nJ0wnLCB0aGUgbGVhZGluZyBOLWJ5LU4gbG93ZXIKKiAgICAgICAgICB0cmlhbmd1bGFyIHBhcnQg\nb2YgdGhlIGFycmF5IEEgY29udGFpbnMgdGhlIGxvd2VyIHRyaWFuZ3VsYXIKKiAgICAgICAgICBt\nYXRyaXgsIGFuZCB0aGUgc3RyaWN0bHkgdXBwZXIgdHJpYW5ndWxhciBwYXJ0IG9mIEEgaXMgbm90\nCiogICAgICAgICAgcmVmZXJlbmNlZC4gIElmIERJQUcgPSAnVScsIHRoZSBkaWFnb25hbCBlbGVt\nZW50cyBvZiBBIGFyZQoqICAgICAgICAgIGFsc28gbm90IHJlZmVyZW5jZWQgYW5kIGFyZSBhc3N1\nbWVkIHRvIGJlIDEuCioKKiAgTERBICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUg\nbGVhZGluZyBkaW1lbnNpb24gb2YgdGhlIGFycmF5IEEuICBMREEgPj0gbWF4KDEsTikuCioKKiAg\nQiAgICAgICAoaW5wdXQvb3V0cHV0KSBET1VCTEUgUFJFQ0lTSU9OIGFycmF5LCBkaW1lbnNpb24g\nKExEQixOUkhTKQoqICAgICAgICAgIE9uIGVudHJ5LCB0aGUgcmlnaHQgaGFuZCBzaWRlIG1hdHJp\neCBCLgoqICAgICAgICAgIE9uIGV4aXQsIGlmIElORk8gPSAwLCB0aGUgc29sdXRpb24gbWF0cml4\nIFguCioKKiAgTERCICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbGVhZGluZyBk\naW1lbnNpb24gb2YgdGhlIGFycmF5IEIuICBMREIgPj0gbWF4KDEsTikuCioKKiAgSU5GTyAgICAo\nb3V0cHV0KSBJTlRFR0VSCiogICAgICAgICAgPSAwOiAgc3VjY2Vzc2Z1bCBleGl0CiogICAgICAg\nICAgPCAwOiBpZiBJTkZPID0gLWksIHRoZSBpLXRoIGFyZ3VtZW50IGhhZCBhbiBpbGxlZ2FsIHZh\nbHVlCiogICAgICAgICAgPiAwOiBpZiBJTkZPID0gaSwgdGhlIGktdGggZGlhZ29uYWwgZWxlbWVu\ndCBvZiBBIGlzIHplcm8sCiogICAgICAgICAgICAgICBpbmRpY2F0aW5nIHRoYXQgdGhlIG1hdHJp\neCBpcyBzaW5ndWxhciBhbmQgdGhlIHNvbHV0aW9ucwoqICAgICAgICAgICAgICAgWCBoYXZlIG5v\ndCBiZWVuIGNvbXB1dGVkLgoqCnIMBgAAaIZohymBcg0GAAB9cg4GAAAoaIqJaItojHViaJiKAi4B\naJlYDgAAAGR0cnRyc18zMDIudHh0cg8GAAB1YmibigIuAWicWAUAAAB0cnRyc3IQBgAAaJiKAV51\nYmh9aGFdaH6HUnIRBgAAfXISBgAAKGiBWAoAAAB0cmlhbmd1bGFychMGAABog1gEAAAAZnVsbHIU\nBgAAaHFYPQAAAGNvbXB1dGF0aW9uYWwsIHNvbHZlIEEqWCA9IEIsIEIgaXMgYW4gTi1ieS1OUkhT\nIG1hdHJpeCwgVFJBTlNyFQYAAGiGaIcpgXIWBgAAfXIXBgAAKGiKiWiLaIx1YmiNWC0AAABodHRw\nOi8vd3d3Lm5ldGxpYi5vcmcvbGFwYWNrL2NvbXBsZXgvY3RydHJzLmZyGAYAAGiPWAEAAABjaJBo\nfWiRXWh+h1JyGQYAAH1yGgYAACholFjqCgAAICAgICAgU1VCUk9VVElORSBDVFJUUlMoIFVQTE8s\nIFRSQU5TLCBESUFHLCBOLCBOUkhTLCBBLCBMREEsIEIsIExEQiwKICAgICAkICAgICAgICAgICAg\nICAgICAgIElORk8gKQoqCiogIC0tIExBUEFDSyByb3V0aW5lICh2ZXJzaW9uIDMuMikgLS0KKiAg\nLS0gTEFQQUNLIGlzIGEgc29mdHdhcmUgcGFja2FnZSBwcm92aWRlZCBieSBVbml2LiBvZiBUZW5u\nZXNzZWUsICAgIC0tCiogIC0tIFVuaXYuIG9mIENhbGlmb3JuaWEgQmVya2VsZXksIFVuaXYuIG9m\nIENvbG9yYWRvIERlbnZlciBhbmQgTkFHIEx0ZC4uLS0KKiAgICAgTm92ZW1iZXIgMjAwNgoqCiog\nICAgIC4uIFNjYWxhciBBcmd1bWVudHMgLi4KICAgICAgQ0hBUkFDVEVSICAgICAgICAgIERJQUcs\nIFRSQU5TLCBVUExPCiAgICAgIElOVEVHRVIgICAgICAgICAgICBJTkZPLCBMREEsIExEQiwgTiwg\nTlJIUwoqICAgICAuLgoqICAgICAuLiBBcnJheSBBcmd1bWVudHMgLi4KICAgICAgQ09NUExFWCAg\nICAgICAgICAgIEEoIExEQSwgKiApLCBCKCBMREIsICogKQoqICAgICAuLgoqCiogIFB1cnBvc2UK\nKiAgPT09PT09PQoqCiogIENUUlRSUyBzb2x2ZXMgYSB0cmlhbmd1bGFyIHN5c3RlbSBvZiB0aGUg\nZm9ybQoqCiogICAgIEEgKiBYID0gQiwgIEEqKlQgKiBYID0gQiwgIG9yICBBKipIICogWCA9IEIs\nCioKKiAgd2hlcmUgQSBpcyBhIHRyaWFuZ3VsYXIgbWF0cml4IG9mIG9yZGVyIE4sIGFuZCBCIGlz\nIGFuIE4tYnktTlJIUwoqICBtYXRyaXguICBBIGNoZWNrIGlzIG1hZGUgdG8gdmVyaWZ5IHRoYXQg\nQSBpcyBub25zaW5ndWxhci4KKgoqICBBcmd1bWVudHMKKiAgPT09PT09PT09CioKKiAgVVBMTyAg\nICAoaW5wdXQpIENIQVJBQ1RFUioxCiogICAgICAgICAgPSAnVSc6ICBBIGlzIHVwcGVyIHRyaWFu\nZ3VsYXI7CiogICAgICAgICAgPSAnTCc6ICBBIGlzIGxvd2VyIHRyaWFuZ3VsYXIuCioKKiAgVFJB\nTlMgICAoaW5wdXQpIENIQVJBQ1RFUioxCiogICAgICAgICAgU3BlY2lmaWVzIHRoZSBmb3JtIG9m\nIHRoZSBzeXN0ZW0gb2YgZXF1YXRpb25zOgoqICAgICAgICAgID0gJ04nOiAgQSAqIFggPSBCICAg\nICAoTm8gdHJhbnNwb3NlKQoqICAgICAgICAgID0gJ1QnOiAgQSoqVCAqIFggPSBCICAoVHJhbnNw\nb3NlKQoqICAgICAgICAgID0gJ0MnOiAgQSoqSCAqIFggPSBCICAoQ29uanVnYXRlIHRyYW5zcG9z\nZSkKKgoqICBESUFHICAgIChpbnB1dCkgQ0hBUkFDVEVSKjEKKiAgICAgICAgICA9ICdOJzogIEEg\naXMgbm9uLXVuaXQgdHJpYW5ndWxhcjsKKiAgICAgICAgICA9ICdVJzogIEEgaXMgdW5pdCB0cmlh\nbmd1bGFyLgoqCiogIE4gICAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG9yZGVy\nIG9mIHRoZSBtYXRyaXggQS4gIE4gPj0gMC4KKgoqICBOUkhTICAgIChpbnB1dCkgSU5URUdFUgoq\nICAgICAgICAgIFRoZSBudW1iZXIgb2YgcmlnaHQgaGFuZCBzaWRlcywgaS5lLiwgdGhlIG51bWJl\nciBvZiBjb2x1bW5zCiogICAgICAgICAgb2YgdGhlIG1hdHJpeCBCLiAgTlJIUyA+PSAwLgoqCiog\nIEEgICAgICAgKGlucHV0KSBDT01QTEVYIGFycmF5LCBkaW1lbnNpb24gKExEQSxOKQoqICAgICAg\nICAgIFRoZSB0cmlhbmd1bGFyIG1hdHJpeCBBLiAgSWYgVVBMTyA9ICdVJywgdGhlIGxlYWRpbmcg\nTi1ieS1OCiogICAgICAgICAgdXBwZXIgdHJpYW5ndWxhciBwYXJ0IG9mIHRoZSBhcnJheSBBIGNv\nbnRhaW5zIHRoZSB1cHBlcgoqICAgICAgICAgIHRyaWFuZ3VsYXIgbWF0cml4LCBhbmQgdGhlIHN0\ncmljdGx5IGxvd2VyIHRyaWFuZ3VsYXIgcGFydCBvZgoqICAgICAgICAgIEEgaXMgbm90IHJlZmVy\nZW5jZWQuICBJZiBVUExPID0gJ0wnLCB0aGUgbGVhZGluZyBOLWJ5LU4gbG93ZXIKKiAgICAgICAg\nICB0cmlhbmd1bGFyIHBhcnQgb2YgdGhlIGFycmF5IEEgY29udGFpbnMgdGhlIGxvd2VyIHRyaWFu\nZ3VsYXIKKiAgICAgICAgICBtYXRyaXgsIGFuZCB0aGUgc3RyaWN0bHkgdXBwZXIgdHJpYW5ndWxh\nciBwYXJ0IG9mIEEgaXMgbm90CiogICAgICAgICAgcmVmZXJlbmNlZC4gIElmIERJQUcgPSAnVScs\nIHRoZSBkaWFnb25hbCBlbGVtZW50cyBvZiBBIGFyZQoqICAgICAgICAgIGFsc28gbm90IHJlZmVy\nZW5jZWQgYW5kIGFyZSBhc3N1bWVkIHRvIGJlIDEuCioKKiAgTERBICAgICAoaW5wdXQpIElOVEVH\nRVIKKiAgICAgICAgICBUaGUgbGVhZGluZyBkaW1lbnNpb24gb2YgdGhlIGFycmF5IEEuICBMREEg\nPj0gbWF4KDEsTikuCioKKiAgQiAgICAgICAoaW5wdXQvb3V0cHV0KSBDT01QTEVYIGFycmF5LCBk\naW1lbnNpb24gKExEQixOUkhTKQoqICAgICAgICAgIE9uIGVudHJ5LCB0aGUgcmlnaHQgaGFuZCBz\naWRlIG1hdHJpeCBCLgoqICAgICAgICAgIE9uIGV4aXQsIGlmIElORk8gPSAwLCB0aGUgc29sdXRp\nb24gbWF0cml4IFguCioKKiAgTERCICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUg\nbGVhZGluZyBkaW1lbnNpb24gb2YgdGhlIGFycmF5IEIuICBMREIgPj0gbWF4KDEsTikuCioKKiAg\nSU5GTyAgICAob3V0cHV0KSBJTlRFR0VSCiogICAgICAgICAgPSAwOiAgc3VjY2Vzc2Z1bCBleGl0\nCiogICAgICAgICAgPCAwOiBpZiBJTkZPID0gLWksIHRoZSBpLXRoIGFyZ3VtZW50IGhhZCBhbiBp\nbGxlZ2FsIHZhbHVlCiogICAgICAgICAgPiAwOiBpZiBJTkZPID0gaSwgdGhlIGktdGggZGlhZ29u\nYWwgZWxlbWVudCBvZiBBIGlzIHplcm8sCiogICAgICAgICAgICAgICBpbmRpY2F0aW5nIHRoYXQg\ndGhlIG1hdHJpeCBpcyBzaW5ndWxhciBhbmQgdGhlIHNvbHV0aW9ucwoqICAgICAgICAgICAgICAg\nWCBoYXZlIG5vdCBiZWVuIGNvbXB1dGVkLgoqCnIbBgAAaIZohymBchwGAAB9ch0GAAAoaIqJaIto\njHViaJiKAi8BaJlYDgAAAGN0cnRyc18zMDMudHh0ch4GAAB1YmibigIvAWicWAUAAAB0cnRyc3If\nBgAAaJiKAV91Ymh9aGFdaH6HUnIgBgAAfXIhBgAAKGiBWAoAAAB0cmlhbmd1bGFyciIGAABog1gE\nAAAAZnVsbHIjBgAAaHFYPQAAAGNvbXB1dGF0aW9uYWwsIHNvbHZlIEEqWCA9IEIsIEIgaXMgYW4g\nTi1ieS1OUkhTIG1hdHJpeCwgVFJBTlNyJAYAAGiGaIcpgXIlBgAAfXImBgAAKGiKiWiLaIx1YmiN\nWC8AAABodHRwOi8vd3d3Lm5ldGxpYi5vcmcvbGFwYWNrL2NvbXBsZXgxNi96dHJ0cnMuZnInBgAA\naI9YAQAAAHpokGh9aJFdaH6HUnIoBgAAfXIpBgAAKGiUWPAKAAAgICAgICBTVUJST1VUSU5FIFpU\nUlRSUyggVVBMTywgVFJBTlMsIERJQUcsIE4sIE5SSFMsIEEsIExEQSwgQiwgTERCLAogICAgICQg\nICAgICAgICAgICAgICAgICAgSU5GTyApCioKKiAgLS0gTEFQQUNLIHJvdXRpbmUgKHZlcnNpb24g\nMy4yKSAtLQoqICAtLSBMQVBBQ0sgaXMgYSBzb2Z0d2FyZSBwYWNrYWdlIHByb3ZpZGVkIGJ5IFVu\naXYuIG9mIFRlbm5lc3NlZSwgICAgLS0KKiAgLS0gVW5pdi4gb2YgQ2FsaWZvcm5pYSBCZXJrZWxl\neSwgVW5pdi4gb2YgQ29sb3JhZG8gRGVudmVyIGFuZCBOQUcgTHRkLi4tLQoqICAgICBOb3ZlbWJl\nciAyMDA2CioKKiAgICAgLi4gU2NhbGFyIEFyZ3VtZW50cyAuLgogICAgICBDSEFSQUNURVIgICAg\nICAgICAgRElBRywgVFJBTlMsIFVQTE8KICAgICAgSU5URUdFUiAgICAgICAgICAgIElORk8sIExE\nQSwgTERCLCBOLCBOUkhTCiogICAgIC4uCiogICAgIC4uIEFycmF5IEFyZ3VtZW50cyAuLgogICAg\nICBDT01QTEVYKjE2ICAgICAgICAgQSggTERBLCAqICksIEIoIExEQiwgKiApCiogICAgIC4uCioK\nKiAgUHVycG9zZQoqICA9PT09PT09CioKKiAgWlRSVFJTIHNvbHZlcyBhIHRyaWFuZ3VsYXIgc3lz\ndGVtIG9mIHRoZSBmb3JtCioKKiAgICAgQSAqIFggPSBCLCAgQSoqVCAqIFggPSBCLCAgb3IgIEEq\nKkggKiBYID0gQiwKKgoqICB3aGVyZSBBIGlzIGEgdHJpYW5ndWxhciBtYXRyaXggb2Ygb3JkZXIg\nTiwgYW5kIEIgaXMgYW4gTi1ieS1OUkhTCiogIG1hdHJpeC4gIEEgY2hlY2sgaXMgbWFkZSB0byB2\nZXJpZnkgdGhhdCBBIGlzIG5vbnNpbmd1bGFyLgoqCiogIEFyZ3VtZW50cwoqICA9PT09PT09PT0K\nKgoqICBVUExPICAgIChpbnB1dCkgQ0hBUkFDVEVSKjEKKiAgICAgICAgICA9ICdVJzogIEEgaXMg\ndXBwZXIgdHJpYW5ndWxhcjsKKiAgICAgICAgICA9ICdMJzogIEEgaXMgbG93ZXIgdHJpYW5ndWxh\nci4KKgoqICBUUkFOUyAgIChpbnB1dCkgQ0hBUkFDVEVSKjEKKiAgICAgICAgICBTcGVjaWZpZXMg\ndGhlIGZvcm0gb2YgdGhlIHN5c3RlbSBvZiBlcXVhdGlvbnM6CiogICAgICAgICAgPSAnTic6ICBB\nICogWCA9IEIgICAgIChObyB0cmFuc3Bvc2UpCiogICAgICAgICAgPSAnVCc6ICBBKipUICogWCA9\nIEIgIChUcmFuc3Bvc2UpCiogICAgICAgICAgPSAnQyc6ICBBKipIICogWCA9IEIgIChDb25qdWdh\ndGUgdHJhbnNwb3NlKQoqCiogIERJQUcgICAgKGlucHV0KSBDSEFSQUNURVIqMQoqICAgICAgICAg\nID0gJ04nOiAgQSBpcyBub24tdW5pdCB0cmlhbmd1bGFyOwoqICAgICAgICAgID0gJ1UnOiAgQSBp\ncyB1bml0IHRyaWFuZ3VsYXIuCioKKiAgTiAgICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAg\nICBUaGUgb3JkZXIgb2YgdGhlIG1hdHJpeCBBLiAgTiA+PSAwLgoqCiogIE5SSFMgICAgKGlucHV0\nKSBJTlRFR0VSCiogICAgICAgICAgVGhlIG51bWJlciBvZiByaWdodCBoYW5kIHNpZGVzLCBpLmUu\nLCB0aGUgbnVtYmVyIG9mIGNvbHVtbnMKKiAgICAgICAgICBvZiB0aGUgbWF0cml4IEIuICBOUkhT\nID49IDAuCioKKiAgQSAgICAgICAoaW5wdXQpIENPTVBMRVgqMTYgYXJyYXksIGRpbWVuc2lvbiAo\nTERBLE4pCiogICAgICAgICAgVGhlIHRyaWFuZ3VsYXIgbWF0cml4IEEuICBJZiBVUExPID0gJ1Un\nLCB0aGUgbGVhZGluZyBOLWJ5LU4KKiAgICAgICAgICB1cHBlciB0cmlhbmd1bGFyIHBhcnQgb2Yg\ndGhlIGFycmF5IEEgY29udGFpbnMgdGhlIHVwcGVyCiogICAgICAgICAgdHJpYW5ndWxhciBtYXRy\naXgsIGFuZCB0aGUgc3RyaWN0bHkgbG93ZXIgdHJpYW5ndWxhciBwYXJ0IG9mCiogICAgICAgICAg\nQSBpcyBub3QgcmVmZXJlbmNlZC4gIElmIFVQTE8gPSAnTCcsIHRoZSBsZWFkaW5nIE4tYnktTiBs\nb3dlcgoqICAgICAgICAgIHRyaWFuZ3VsYXIgcGFydCBvZiB0aGUgYXJyYXkgQSBjb250YWlucyB0\naGUgbG93ZXIgdHJpYW5ndWxhcgoqICAgICAgICAgIG1hdHJpeCwgYW5kIHRoZSBzdHJpY3RseSB1\ncHBlciB0cmlhbmd1bGFyIHBhcnQgb2YgQSBpcyBub3QKKiAgICAgICAgICByZWZlcmVuY2VkLiAg\nSWYgRElBRyA9ICdVJywgdGhlIGRpYWdvbmFsIGVsZW1lbnRzIG9mIEEgYXJlCiogICAgICAgICAg\nYWxzbyBub3QgcmVmZXJlbmNlZCBhbmQgYXJlIGFzc3VtZWQgdG8gYmUgMS4KKgoqICBMREEgICAg\nIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBsZWFkaW5nIGRpbWVuc2lvbiBvZiB0aGUg\nYXJyYXkgQS4gIExEQSA+PSBtYXgoMSxOKS4KKgoqICBCICAgICAgIChpbnB1dC9vdXRwdXQpIENP\nTVBMRVgqMTYgYXJyYXksIGRpbWVuc2lvbiAoTERCLE5SSFMpCiogICAgICAgICAgT24gZW50cnks\nIHRoZSByaWdodCBoYW5kIHNpZGUgbWF0cml4IEIuCiogICAgICAgICAgT24gZXhpdCwgaWYgSU5G\nTyA9IDAsIHRoZSBzb2x1dGlvbiBtYXRyaXggWC4KKgoqICBMREIgICAgIChpbnB1dCkgSU5URUdF\nUgoqICAgICAgICAgIFRoZSBsZWFkaW5nIGRpbWVuc2lvbiBvZiB0aGUgYXJyYXkgQi4gIExEQiA+\nPSBtYXgoMSxOKS4KKgoqICBJTkZPICAgIChvdXRwdXQpIElOVEVHRVIKKiAgICAgICAgICA9IDA6\nICBzdWNjZXNzZnVsIGV4aXQKKiAgICAgICAgICA8IDA6IGlmIElORk8gPSAtaSwgdGhlIGktdGgg\nYXJndW1lbnQgaGFkIGFuIGlsbGVnYWwgdmFsdWUKKiAgICAgICAgICA+IDA6IGlmIElORk8gPSBp\nLCB0aGUgaS10aCBkaWFnb25hbCBlbGVtZW50IG9mIEEgaXMgemVybywKKiAgICAgICAgICAgICAg\nIGluZGljYXRpbmcgdGhhdCB0aGUgbWF0cml4IGlzIHNpbmd1bGFyIGFuZCB0aGUgc29sdXRpb25z\nCiogICAgICAgICAgICAgICBYIGhhdmUgbm90IGJlZW4gY29tcHV0ZWQuCioKcioGAABohmiHKYFy\nKwYAAH1yLAYAAChoioloi2iMdWJomIoCMAFomVgOAAAAenRydHJzXzMwNC50eHRyLQYAAHViaJuK\nAjABaJxYBQAAAHRydHJzci4GAABomIoBYHViaH1oYV1ofodSci8GAAB9cjAGAAAoaIFYCgAAAHRy\naWFuZ3VsYXJyMQYAAGiDWAYAAABwYWNrZWRyMgYAAGhxWD0AAABjb21wdXRhdGlvbmFsLCBzb2x2\nZSBBKlggPSBCLCBCIGlzIGFuIE4tYnktTlJIUyBtYXRyaXgsIFRSQU5TcjMGAABohmiHKYFyNAYA\nAH1yNQYAAChoioloi2iMdWJojVgsAAAAaHR0cDovL3d3dy5uZXRsaWIub3JnL2xhcGFjay9zaW5n\nbGUvc3RwdHJzLmZyNgYAAGiPWAEAAABzaJBofWiRXWh+h1JyNwYAAH1yOAYAACholFiHCQAAICAg\nICAgU1VCUk9VVElORSBTVFBUUlMoIFVQTE8sIFRSQU5TLCBESUFHLCBOLCBOUkhTLCBBUCwgQiwg\nTERCLCBJTkZPICkKKgoqICAtLSBMQVBBQ0sgcm91dGluZSAodmVyc2lvbiAzLjIpIC0tCiogIC0t\nIExBUEFDSyBpcyBhIHNvZnR3YXJlIHBhY2thZ2UgcHJvdmlkZWQgYnkgVW5pdi4gb2YgVGVubmVz\nc2VlLCAgICAtLQoqICAtLSBVbml2LiBvZiBDYWxpZm9ybmlhIEJlcmtlbGV5LCBVbml2LiBvZiBD\nb2xvcmFkbyBEZW52ZXIgYW5kIE5BRyBMdGQuLi0tCiogICAgIE5vdmVtYmVyIDIwMDYKKgoqICAg\nICAuLiBTY2FsYXIgQXJndW1lbnRzIC4uCiAgICAgIENIQVJBQ1RFUiAgICAgICAgICBESUFHLCBU\nUkFOUywgVVBMTwogICAgICBJTlRFR0VSICAgICAgICAgICAgSU5GTywgTERCLCBOLCBOUkhTCiog\nICAgIC4uCiogICAgIC4uIEFycmF5IEFyZ3VtZW50cyAuLgogICAgICBSRUFMICAgICAgICAgICAg\nICAgQVAoICogKSwgQiggTERCLCAqICkKKiAgICAgLi4KKgoqICBQdXJwb3NlCiogID09PT09PT0K\nKgoqICBTVFBUUlMgc29sdmVzIGEgdHJpYW5ndWxhciBzeXN0ZW0gb2YgdGhlIGZvcm0KKgoqICAg\nICBBICogWCA9IEIgIG9yICBBKipUICogWCA9IEIsCioKKiAgd2hlcmUgQSBpcyBhIHRyaWFuZ3Vs\nYXIgbWF0cml4IG9mIG9yZGVyIE4gc3RvcmVkIGluIHBhY2tlZCBmb3JtYXQsCiogIGFuZCBCIGlz\nIGFuIE4tYnktTlJIUyBtYXRyaXguICBBIGNoZWNrIGlzIG1hZGUgdG8gdmVyaWZ5IHRoYXQgQSBp\ncwoqICBub25zaW5ndWxhci4KKgoqICBBcmd1bWVudHMKKiAgPT09PT09PT09CioKKiAgVVBMTyAg\nICAoaW5wdXQpIENIQVJBQ1RFUioxCiogICAgICAgICAgPSAnVSc6ICBBIGlzIHVwcGVyIHRyaWFu\nZ3VsYXI7CiogICAgICAgICAgPSAnTCc6ICBBIGlzIGxvd2VyIHRyaWFuZ3VsYXIuCioKKiAgVFJB\nTlMgICAoaW5wdXQpIENIQVJBQ1RFUioxCiogICAgICAgICAgU3BlY2lmaWVzIHRoZSBmb3JtIG9m\nIHRoZSBzeXN0ZW0gb2YgZXF1YXRpb25zOgoqICAgICAgICAgID0gJ04nOiAgQSAqIFggPSBCICAo\nTm8gdHJhbnNwb3NlKQoqICAgICAgICAgID0gJ1QnOiAgQSoqVCAqIFggPSBCICAoVHJhbnNwb3Nl\nKQoqICAgICAgICAgID0gJ0MnOiAgQSoqSCAqIFggPSBCICAoQ29uanVnYXRlIHRyYW5zcG9zZSA9\nIFRyYW5zcG9zZSkKKgoqICBESUFHICAgIChpbnB1dCkgQ0hBUkFDVEVSKjEKKiAgICAgICAgICA9\nICdOJzogIEEgaXMgbm9uLXVuaXQgdHJpYW5ndWxhcjsKKiAgICAgICAgICA9ICdVJzogIEEgaXMg\ndW5pdCB0cmlhbmd1bGFyLgoqCiogIE4gICAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAg\nVGhlIG9yZGVyIG9mIHRoZSBtYXRyaXggQS4gIE4gPj0gMC4KKgoqICBOUkhTICAgIChpbnB1dCkg\nSU5URUdFUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2YgcmlnaHQgaGFuZCBzaWRlcywgaS5lLiwg\ndGhlIG51bWJlciBvZiBjb2x1bW5zCiogICAgICAgICAgb2YgdGhlIG1hdHJpeCBCLiAgTlJIUyA+\nPSAwLgoqCiogIEFQICAgICAgKGlucHV0KSBSRUFMIGFycmF5LCBkaW1lbnNpb24gKE4qKE4rMSkv\nMikKKiAgICAgICAgICBUaGUgdXBwZXIgb3IgbG93ZXIgdHJpYW5ndWxhciBtYXRyaXggQSwgcGFj\na2VkIGNvbHVtbndpc2UgaW4KKiAgICAgICAgICBhIGxpbmVhciBhcnJheS4gIFRoZSBqLXRoIGNv\nbHVtbiBvZiBBIGlzIHN0b3JlZCBpbiB0aGUgYXJyYXkKKiAgICAgICAgICBBUCBhcyBmb2xsb3dz\nOgoqICAgICAgICAgIGlmIFVQTE8gPSAnVScsIEFQKGkgKyAoai0xKSpqLzIpID0gQShpLGopIGZv\nciAxPD1pPD1qOwoqICAgICAgICAgIGlmIFVQTE8gPSAnTCcsIEFQKGkgKyAoai0xKSooMipuLWop\nLzIpID0gQShpLGopIGZvciBqPD1pPD1uLgoqCiogIEIgICAgICAgKGlucHV0L291dHB1dCkgUkVB\nTCBhcnJheSwgZGltZW5zaW9uIChMREIsTlJIUykKKiAgICAgICAgICBPbiBlbnRyeSwgdGhlIHJp\nZ2h0IGhhbmQgc2lkZSBtYXRyaXggQi4KKiAgICAgICAgICBPbiBleGl0LCBpZiBJTkZPID0gMCwg\ndGhlIHNvbHV0aW9uIG1hdHJpeCBYLgoqCiogIExEQiAgICAgKGlucHV0KSBJTlRFR0VSCiogICAg\nICAgICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBCLiAgTERCID49IG1heCgx\nLE4pLgoqCiogIElORk8gICAgKG91dHB1dCkgSU5URUdFUgoqICAgICAgICAgID0gMDogIHN1Y2Nl\nc3NmdWwgZXhpdAoqICAgICAgICAgIDwgMDogIGlmIElORk8gPSAtaSwgdGhlIGktdGggYXJndW1l\nbnQgaGFkIGFuIGlsbGVnYWwgdmFsdWUKKiAgICAgICAgICA+IDA6ICBpZiBJTkZPID0gaSwgdGhl\nIGktdGggZGlhZ29uYWwgZWxlbWVudCBvZiBBIGlzIHplcm8sCiogICAgICAgICAgICAgICAgaW5k\naWNhdGluZyB0aGF0IHRoZSBtYXRyaXggaXMgc2luZ3VsYXIgYW5kIHRoZQoqICAgICAgICAgICAg\nICAgIHNvbHV0aW9ucyBYIGhhdmUgbm90IGJlZW4gY29tcHV0ZWQuCioKcjkGAABohmiHKYFyOgYA\nAH1yOwYAAChoioloi2iMdWJomIoCMQFomVgOAAAAc3RwdHJzXzMwNS50eHRyPAYAAHViaJuKAjEB\naJxYBQAAAHRwdHJzcj0GAABomIoBYXViaH1oYV1ofodScj4GAAB9cj8GAAAoaIFYCgAAAHRyaWFu\nZ3VsYXJyQAYAAGiDWAYAAABwYWNrZWRyQQYAAGhxWD0AAABjb21wdXRhdGlvbmFsLCBzb2x2ZSBB\nKlggPSBCLCBCIGlzIGFuIE4tYnktTlJIUyBtYXRyaXgsIFRSQU5TckIGAABohmiHKYFyQwYAAH1y\nRAYAAChoioloi2iMdWJojVgsAAAAaHR0cDovL3d3dy5uZXRsaWIub3JnL2xhcGFjay9kb3VibGUv\nZHRwdHJzLmZyRQYAAGiPWAEAAABkaJBofWiRXWh+h1JyRgYAAH1yRwYAACholFifCQAAICAgICAg\nU1VCUk9VVElORSBEVFBUUlMoIFVQTE8sIFRSQU5TLCBESUFHLCBOLCBOUkhTLCBBUCwgQiwgTERC\nLCBJTkZPICkKKgoqICAtLSBMQVBBQ0sgcm91dGluZSAodmVyc2lvbiAzLjIpIC0tCiogIC0tIExB\nUEFDSyBpcyBhIHNvZnR3YXJlIHBhY2thZ2UgcHJvdmlkZWQgYnkgVW5pdi4gb2YgVGVubmVzc2Vl\nLCAgICAtLQoqICAtLSBVbml2LiBvZiBDYWxpZm9ybmlhIEJlcmtlbGV5LCBVbml2LiBvZiBDb2xv\ncmFkbyBEZW52ZXIgYW5kIE5BRyBMdGQuLi0tCiogICAgIE5vdmVtYmVyIDIwMDYKKgoqICAgICAu\nLiBTY2FsYXIgQXJndW1lbnRzIC4uCiAgICAgIENIQVJBQ1RFUiAgICAgICAgICBESUFHLCBUUkFO\nUywgVVBMTwogICAgICBJTlRFR0VSICAgICAgICAgICAgSU5GTywgTERCLCBOLCBOUkhTCiogICAg\nIC4uCiogICAgIC4uIEFycmF5IEFyZ3VtZW50cyAuLgogICAgICBET1VCTEUgUFJFQ0lTSU9OICAg\nQVAoICogKSwgQiggTERCLCAqICkKKiAgICAgLi4KKgoqICBQdXJwb3NlCiogID09PT09PT0KKgoq\nICBEVFBUUlMgc29sdmVzIGEgdHJpYW5ndWxhciBzeXN0ZW0gb2YgdGhlIGZvcm0KKgoqICAgICBB\nICogWCA9IEIgIG9yICBBKipUICogWCA9IEIsCioKKiAgd2hlcmUgQSBpcyBhIHRyaWFuZ3VsYXIg\nbWF0cml4IG9mIG9yZGVyIE4gc3RvcmVkIGluIHBhY2tlZCBmb3JtYXQsCiogIGFuZCBCIGlzIGFu\nIE4tYnktTlJIUyBtYXRyaXguICBBIGNoZWNrIGlzIG1hZGUgdG8gdmVyaWZ5IHRoYXQgQSBpcwoq\nICBub25zaW5ndWxhci4KKgoqICBBcmd1bWVudHMKKiAgPT09PT09PT09CioKKiAgVVBMTyAgICAo\naW5wdXQpIENIQVJBQ1RFUioxCiogICAgICAgICAgPSAnVSc6ICBBIGlzIHVwcGVyIHRyaWFuZ3Vs\nYXI7CiogICAgICAgICAgPSAnTCc6ICBBIGlzIGxvd2VyIHRyaWFuZ3VsYXIuCioKKiAgVFJBTlMg\nICAoaW5wdXQpIENIQVJBQ1RFUioxCiogICAgICAgICAgU3BlY2lmaWVzIHRoZSBmb3JtIG9mIHRo\nZSBzeXN0ZW0gb2YgZXF1YXRpb25zOgoqICAgICAgICAgID0gJ04nOiAgQSAqIFggPSBCICAoTm8g\ndHJhbnNwb3NlKQoqICAgICAgICAgID0gJ1QnOiAgQSoqVCAqIFggPSBCICAoVHJhbnNwb3NlKQoq\nICAgICAgICAgID0gJ0MnOiAgQSoqSCAqIFggPSBCICAoQ29uanVnYXRlIHRyYW5zcG9zZSA9IFRy\nYW5zcG9zZSkKKgoqICBESUFHICAgIChpbnB1dCkgQ0hBUkFDVEVSKjEKKiAgICAgICAgICA9ICdO\nJzogIEEgaXMgbm9uLXVuaXQgdHJpYW5ndWxhcjsKKiAgICAgICAgICA9ICdVJzogIEEgaXMgdW5p\ndCB0cmlhbmd1bGFyLgoqCiogIE4gICAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhl\nIG9yZGVyIG9mIHRoZSBtYXRyaXggQS4gIE4gPj0gMC4KKgoqICBOUkhTICAgIChpbnB1dCkgSU5U\nRUdFUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2YgcmlnaHQgaGFuZCBzaWRlcywgaS5lLiwgdGhl\nIG51bWJlciBvZiBjb2x1bW5zCiogICAgICAgICAgb2YgdGhlIG1hdHJpeCBCLiAgTlJIUyA+PSAw\nLgoqCiogIEFQICAgICAgKGlucHV0KSBET1VCTEUgUFJFQ0lTSU9OIGFycmF5LCBkaW1lbnNpb24g\nKE4qKE4rMSkvMikKKiAgICAgICAgICBUaGUgdXBwZXIgb3IgbG93ZXIgdHJpYW5ndWxhciBtYXRy\naXggQSwgcGFja2VkIGNvbHVtbndpc2UgaW4KKiAgICAgICAgICBhIGxpbmVhciBhcnJheS4gIFRo\nZSBqLXRoIGNvbHVtbiBvZiBBIGlzIHN0b3JlZCBpbiB0aGUgYXJyYXkKKiAgICAgICAgICBBUCBh\ncyBmb2xsb3dzOgoqICAgICAgICAgIGlmIFVQTE8gPSAnVScsIEFQKGkgKyAoai0xKSpqLzIpID0g\nQShpLGopIGZvciAxPD1pPD1qOwoqICAgICAgICAgIGlmIFVQTE8gPSAnTCcsIEFQKGkgKyAoai0x\nKSooMipuLWopLzIpID0gQShpLGopIGZvciBqPD1pPD1uLgoqCiogIEIgICAgICAgKGlucHV0L291\ndHB1dCkgRE9VQkxFIFBSRUNJU0lPTiBhcnJheSwgZGltZW5zaW9uIChMREIsTlJIUykKKiAgICAg\nICAgICBPbiBlbnRyeSwgdGhlIHJpZ2h0IGhhbmQgc2lkZSBtYXRyaXggQi4KKiAgICAgICAgICBP\nbiBleGl0LCBpZiBJTkZPID0gMCwgdGhlIHNvbHV0aW9uIG1hdHJpeCBYLgoqCiogIExEQiAgICAg\nKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBh\ncnJheSBCLiAgTERCID49IG1heCgxLE4pLgoqCiogIElORk8gICAgKG91dHB1dCkgSU5URUdFUgoq\nICAgICAgICAgID0gMDogIHN1Y2Nlc3NmdWwgZXhpdAoqICAgICAgICAgIDwgMDogIGlmIElORk8g\nPSAtaSwgdGhlIGktdGggYXJndW1lbnQgaGFkIGFuIGlsbGVnYWwgdmFsdWUKKiAgICAgICAgICA+\nIDA6ICBpZiBJTkZPID0gaSwgdGhlIGktdGggZGlhZ29uYWwgZWxlbWVudCBvZiBBIGlzIHplcm8s\nCiogICAgICAgICAgICAgICAgaW5kaWNhdGluZyB0aGF0IHRoZSBtYXRyaXggaXMgc2luZ3VsYXIg\nYW5kIHRoZQoqICAgICAgICAgICAgICAgIHNvbHV0aW9ucyBYIGhhdmUgbm90IGJlZW4gY29tcHV0\nZWQuCioKckgGAABohmiHKYFySQYAAH1ySgYAAChoioloi2iMdWJomIoCMgFomVgOAAAAZHRwdHJz\nXzMwNi50eHRySwYAAHViaJuKAjIBaJxYBQAAAHRwdHJzckwGAABomIoBYnViaH1oYV1ofodSck0G\nAAB9ck4GAAAoaIFYCgAAAHRyaWFuZ3VsYXJyTwYAAGiDWAYAAABwYWNrZWRyUAYAAGhxWD0AAABj\nb21wdXRhdGlvbmFsLCBzb2x2ZSBBKlggPSBCLCBCIGlzIGFuIE4tYnktTlJIUyBtYXRyaXgsIFRS\nQU5TclEGAABohmiHKYFyUgYAAH1yUwYAAChoioloi2iMdWJojVgtAAAAaHR0cDovL3d3dy5uZXRs\naWIub3JnL2xhcGFjay9jb21wbGV4L2N0cHRycy5mclQGAABoj1gBAAAAY2iQaH1okV1ofodSclUG\nAAB9clYGAAAoaJRYlAkAACAgICAgIFNVQlJPVVRJTkUgQ1RQVFJTKCBVUExPLCBUUkFOUywgRElB\nRywgTiwgTlJIUywgQVAsIEIsIExEQiwgSU5GTyApCioKKiAgLS0gTEFQQUNLIHJvdXRpbmUgKHZl\ncnNpb24gMy4yKSAtLQoqICAtLSBMQVBBQ0sgaXMgYSBzb2Z0d2FyZSBwYWNrYWdlIHByb3ZpZGVk\nIGJ5IFVuaXYuIG9mIFRlbm5lc3NlZSwgICAgLS0KKiAgLS0gVW5pdi4gb2YgQ2FsaWZvcm5pYSBC\nZXJrZWxleSwgVW5pdi4gb2YgQ29sb3JhZG8gRGVudmVyIGFuZCBOQUcgTHRkLi4tLQoqICAgICBO\nb3ZlbWJlciAyMDA2CioKKiAgICAgLi4gU2NhbGFyIEFyZ3VtZW50cyAuLgogICAgICBDSEFSQUNU\nRVIgICAgICAgICAgRElBRywgVFJBTlMsIFVQTE8KICAgICAgSU5URUdFUiAgICAgICAgICAgIElO\nRk8sIExEQiwgTiwgTlJIUwoqICAgICAuLgoqICAgICAuLiBBcnJheSBBcmd1bWVudHMgLi4KICAg\nICAgQ09NUExFWCAgICAgICAgICAgIEFQKCAqICksIEIoIExEQiwgKiApCiogICAgIC4uCioKKiAg\nUHVycG9zZQoqICA9PT09PT09CioKKiAgQ1RQVFJTIHNvbHZlcyBhIHRyaWFuZ3VsYXIgc3lzdGVt\nIG9mIHRoZSBmb3JtCioKKiAgICAgQSAqIFggPSBCLCAgQSoqVCAqIFggPSBCLCAgb3IgIEEqKkgg\nKiBYID0gQiwKKgoqICB3aGVyZSBBIGlzIGEgdHJpYW5ndWxhciBtYXRyaXggb2Ygb3JkZXIgTiBz\ndG9yZWQgaW4gcGFja2VkIGZvcm1hdCwKKiAgYW5kIEIgaXMgYW4gTi1ieS1OUkhTIG1hdHJpeC4g\nIEEgY2hlY2sgaXMgbWFkZSB0byB2ZXJpZnkgdGhhdCBBIGlzCiogIG5vbnNpbmd1bGFyLgoqCiog\nIEFyZ3VtZW50cwoqICA9PT09PT09PT0KKgoqICBVUExPICAgIChpbnB1dCkgQ0hBUkFDVEVSKjEK\nKiAgICAgICAgICA9ICdVJzogIEEgaXMgdXBwZXIgdHJpYW5ndWxhcjsKKiAgICAgICAgICA9ICdM\nJzogIEEgaXMgbG93ZXIgdHJpYW5ndWxhci4KKgoqICBUUkFOUyAgIChpbnB1dCkgQ0hBUkFDVEVS\nKjEKKiAgICAgICAgICBTcGVjaWZpZXMgdGhlIGZvcm0gb2YgdGhlIHN5c3RlbSBvZiBlcXVhdGlv\nbnM6CiogICAgICAgICAgPSAnTic6ICBBICogWCA9IEIgICAgIChObyB0cmFuc3Bvc2UpCiogICAg\nICAgICAgPSAnVCc6ICBBKipUICogWCA9IEIgIChUcmFuc3Bvc2UpCiogICAgICAgICAgPSAnQyc6\nICBBKipIICogWCA9IEIgIChDb25qdWdhdGUgdHJhbnNwb3NlKQoqCiogIERJQUcgICAgKGlucHV0\nKSBDSEFSQUNURVIqMQoqICAgICAgICAgID0gJ04nOiAgQSBpcyBub24tdW5pdCB0cmlhbmd1bGFy\nOwoqICAgICAgICAgID0gJ1UnOiAgQSBpcyB1bml0IHRyaWFuZ3VsYXIuCioKKiAgTiAgICAgICAo\naW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgb3JkZXIgb2YgdGhlIG1hdHJpeCBBLiAgTiA+\nPSAwLgoqCiogIE5SSFMgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG51bWJlciBv\nZiByaWdodCBoYW5kIHNpZGVzLCBpLmUuLCB0aGUgbnVtYmVyIG9mIGNvbHVtbnMKKiAgICAgICAg\nICBvZiB0aGUgbWF0cml4IEIuICBOUkhTID49IDAuCioKKiAgQVAgICAgICAoaW5wdXQpIENPTVBM\nRVggYXJyYXksIGRpbWVuc2lvbiAoTiooTisxKS8yKQoqICAgICAgICAgIFRoZSB1cHBlciBvciBs\nb3dlciB0cmlhbmd1bGFyIG1hdHJpeCBBLCBwYWNrZWQgY29sdW1ud2lzZSBpbgoqICAgICAgICAg\nIGEgbGluZWFyIGFycmF5LiAgVGhlIGotdGggY29sdW1uIG9mIEEgaXMgc3RvcmVkIGluIHRoZSBh\ncnJheQoqICAgICAgICAgIEFQIGFzIGZvbGxvd3M6CiogICAgICAgICAgaWYgVVBMTyA9ICdVJywg\nQVAoaSArIChqLTEpKmovMikgPSBBKGksaikgZm9yIDE8PWk8PWo7CiogICAgICAgICAgaWYgVVBM\nTyA9ICdMJywgQVAoaSArIChqLTEpKigyKm4taikvMikgPSBBKGksaikgZm9yIGo8PWk8PW4uCioK\nKiAgQiAgICAgICAoaW5wdXQvb3V0cHV0KSBDT01QTEVYIGFycmF5LCBkaW1lbnNpb24gKExEQixO\nUkhTKQoqICAgICAgICAgIE9uIGVudHJ5LCB0aGUgcmlnaHQgaGFuZCBzaWRlIG1hdHJpeCBCLgoq\nICAgICAgICAgIE9uIGV4aXQsIGlmIElORk8gPSAwLCB0aGUgc29sdXRpb24gbWF0cml4IFguCioK\nKiAgTERCICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbGVhZGluZyBkaW1lbnNp\nb24gb2YgdGhlIGFycmF5IEIuICBMREIgPj0gbWF4KDEsTikuCioKKiAgSU5GTyAgICAob3V0cHV0\nKSBJTlRFR0VSCiogICAgICAgICAgPSAwOiAgc3VjY2Vzc2Z1bCBleGl0CiogICAgICAgICAgPCAw\nOiAgaWYgSU5GTyA9IC1pLCB0aGUgaS10aCBhcmd1bWVudCBoYWQgYW4gaWxsZWdhbCB2YWx1ZQoq\nICAgICAgICAgID4gMDogIGlmIElORk8gPSBpLCB0aGUgaS10aCBkaWFnb25hbCBlbGVtZW50IG9m\nIEEgaXMgemVybywKKiAgICAgICAgICAgICAgICBpbmRpY2F0aW5nIHRoYXQgdGhlIG1hdHJpeCBp\ncyBzaW5ndWxhciBhbmQgdGhlCiogICAgICAgICAgICAgICAgc29sdXRpb25zIFggaGF2ZSBub3Qg\nYmVlbiBjb21wdXRlZC4KKgpyVwYAAGiGaIcpgXJYBgAAfXJZBgAAKGiKiWiLaIx1YmiYigIzAWiZ\nWA4AAABjdHB0cnNfMzA3LnR4dHJaBgAAdWJom4oCMwFonFgFAAAAdHB0cnNyWwYAAGiYigFjdWJo\nfWhhXWh+h1JyXAYAAH1yXQYAAChogVgKAAAAdHJpYW5ndWxhcnJeBgAAaINYBgAAAHBhY2tlZHJf\nBgAAaHFYPQAAAGNvbXB1dGF0aW9uYWwsIHNvbHZlIEEqWCA9IEIsIEIgaXMgYW4gTi1ieS1OUkhT\nIG1hdHJpeCwgVFJBTlNyYAYAAGiGaIcpgXJhBgAAfXJiBgAAKGiKiWiLaIx1YmiNWC8AAABodHRw\nOi8vd3d3Lm5ldGxpYi5vcmcvbGFwYWNrL2NvbXBsZXgxNi96dHB0cnMuZnJjBgAAaI9YAQAAAHpo\nkGh9aJFdaH6HUnJkBgAAfXJlBgAAKGiUWJoJAAAgICAgICBTVUJST1VUSU5FIFpUUFRSUyggVVBM\nTywgVFJBTlMsIERJQUcsIE4sIE5SSFMsIEFQLCBCLCBMREIsIElORk8gKQoqCiogIC0tIExBUEFD\nSyByb3V0aW5lICh2ZXJzaW9uIDMuMikgLS0KKiAgLS0gTEFQQUNLIGlzIGEgc29mdHdhcmUgcGFj\na2FnZSBwcm92aWRlZCBieSBVbml2LiBvZiBUZW5uZXNzZWUsICAgIC0tCiogIC0tIFVuaXYuIG9m\nIENhbGlmb3JuaWEgQmVya2VsZXksIFVuaXYuIG9mIENvbG9yYWRvIERlbnZlciBhbmQgTkFHIEx0\nZC4uLS0KKiAgICAgTm92ZW1iZXIgMjAwNgoqCiogICAgIC4uIFNjYWxhciBBcmd1bWVudHMgLi4K\nICAgICAgQ0hBUkFDVEVSICAgICAgICAgIERJQUcsIFRSQU5TLCBVUExPCiAgICAgIElOVEVHRVIg\nICAgICAgICAgICBJTkZPLCBMREIsIE4sIE5SSFMKKiAgICAgLi4KKiAgICAgLi4gQXJyYXkgQXJn\ndW1lbnRzIC4uCiAgICAgIENPTVBMRVgqMTYgICAgICAgICBBUCggKiApLCBCKCBMREIsICogKQoq\nICAgICAuLgoqCiogIFB1cnBvc2UKKiAgPT09PT09PQoqCiogIFpUUFRSUyBzb2x2ZXMgYSB0cmlh\nbmd1bGFyIHN5c3RlbSBvZiB0aGUgZm9ybQoqCiogICAgIEEgKiBYID0gQiwgIEEqKlQgKiBYID0g\nQiwgIG9yICBBKipIICogWCA9IEIsCioKKiAgd2hlcmUgQSBpcyBhIHRyaWFuZ3VsYXIgbWF0cml4\nIG9mIG9yZGVyIE4gc3RvcmVkIGluIHBhY2tlZCBmb3JtYXQsCiogIGFuZCBCIGlzIGFuIE4tYnkt\nTlJIUyBtYXRyaXguICBBIGNoZWNrIGlzIG1hZGUgdG8gdmVyaWZ5IHRoYXQgQSBpcwoqICBub25z\naW5ndWxhci4KKgoqICBBcmd1bWVudHMKKiAgPT09PT09PT09CioKKiAgVVBMTyAgICAoaW5wdXQp\nIENIQVJBQ1RFUioxCiogICAgICAgICAgPSAnVSc6ICBBIGlzIHVwcGVyIHRyaWFuZ3VsYXI7Ciog\nICAgICAgICAgPSAnTCc6ICBBIGlzIGxvd2VyIHRyaWFuZ3VsYXIuCioKKiAgVFJBTlMgICAoaW5w\ndXQpIENIQVJBQ1RFUioxCiogICAgICAgICAgU3BlY2lmaWVzIHRoZSBmb3JtIG9mIHRoZSBzeXN0\nZW0gb2YgZXF1YXRpb25zOgoqICAgICAgICAgID0gJ04nOiAgQSAqIFggPSBCICAgICAoTm8gdHJh\nbnNwb3NlKQoqICAgICAgICAgID0gJ1QnOiAgQSoqVCAqIFggPSBCICAoVHJhbnNwb3NlKQoqICAg\nICAgICAgID0gJ0MnOiAgQSoqSCAqIFggPSBCICAoQ29uanVnYXRlIHRyYW5zcG9zZSkKKgoqICBE\nSUFHICAgIChpbnB1dCkgQ0hBUkFDVEVSKjEKKiAgICAgICAgICA9ICdOJzogIEEgaXMgbm9uLXVu\naXQgdHJpYW5ndWxhcjsKKiAgICAgICAgICA9ICdVJzogIEEgaXMgdW5pdCB0cmlhbmd1bGFyLgoq\nCiogIE4gICAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG9yZGVyIG9mIHRoZSBt\nYXRyaXggQS4gIE4gPj0gMC4KKgoqICBOUkhTICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAg\nIFRoZSBudW1iZXIgb2YgcmlnaHQgaGFuZCBzaWRlcywgaS5lLiwgdGhlIG51bWJlciBvZiBjb2x1\nbW5zCiogICAgICAgICAgb2YgdGhlIG1hdHJpeCBCLiAgTlJIUyA+PSAwLgoqCiogIEFQICAgICAg\nKGlucHV0KSBDT01QTEVYKjE2IGFycmF5LCBkaW1lbnNpb24gKE4qKE4rMSkvMikKKiAgICAgICAg\nICBUaGUgdXBwZXIgb3IgbG93ZXIgdHJpYW5ndWxhciBtYXRyaXggQSwgcGFja2VkIGNvbHVtbndp\nc2UgaW4KKiAgICAgICAgICBhIGxpbmVhciBhcnJheS4gIFRoZSBqLXRoIGNvbHVtbiBvZiBBIGlz\nIHN0b3JlZCBpbiB0aGUgYXJyYXkKKiAgICAgICAgICBBUCBhcyBmb2xsb3dzOgoqICAgICAgICAg\nIGlmIFVQTE8gPSAnVScsIEFQKGkgKyAoai0xKSpqLzIpID0gQShpLGopIGZvciAxPD1pPD1qOwoq\nICAgICAgICAgIGlmIFVQTE8gPSAnTCcsIEFQKGkgKyAoai0xKSooMipuLWopLzIpID0gQShpLGop\nIGZvciBqPD1pPD1uLgoqCiogIEIgICAgICAgKGlucHV0L291dHB1dCkgQ09NUExFWCoxNiBhcnJh\neSwgZGltZW5zaW9uIChMREIsTlJIUykKKiAgICAgICAgICBPbiBlbnRyeSwgdGhlIHJpZ2h0IGhh\nbmQgc2lkZSBtYXRyaXggQi4KKiAgICAgICAgICBPbiBleGl0LCBpZiBJTkZPID0gMCwgdGhlIHNv\nbHV0aW9uIG1hdHJpeCBYLgoqCiogIExEQiAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAg\nVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBCLiAgTERCID49IG1heCgxLE4pLgoq\nCiogIElORk8gICAgKG91dHB1dCkgSU5URUdFUgoqICAgICAgICAgID0gMDogIHN1Y2Nlc3NmdWwg\nZXhpdAoqICAgICAgICAgIDwgMDogIGlmIElORk8gPSAtaSwgdGhlIGktdGggYXJndW1lbnQgaGFk\nIGFuIGlsbGVnYWwgdmFsdWUKKiAgICAgICAgICA+IDA6ICBpZiBJTkZPID0gaSwgdGhlIGktdGgg\nZGlhZ29uYWwgZWxlbWVudCBvZiBBIGlzIHplcm8sCiogICAgICAgICAgICAgICAgaW5kaWNhdGlu\nZyB0aGF0IHRoZSBtYXRyaXggaXMgc2luZ3VsYXIgYW5kIHRoZQoqICAgICAgICAgICAgICAgIHNv\nbHV0aW9ucyBYIGhhdmUgbm90IGJlZW4gY29tcHV0ZWQuCioKcmYGAABohmiHKYFyZwYAAH1yaAYA\nAChoioloi2iMdWJomIoCNAFomVgOAAAAenRwdHJzXzMwOC50eHRyaQYAAHViaJuKAjQBaJxYBQAA\nAHRwdHJzcmoGAABomIoBZHViaH1oYV1ofodScmsGAAB9cmwGAAAoaIFYCgAAAHRyaWFuZ3VsYXJy\nbQYAAGiDWAQAAABiYW5kcm4GAABocVg9AAAAY29tcHV0YXRpb25hbCwgc29sdmUgQSpYID0gQiwg\nQiBpcyBhbiBOLWJ5LU5SSFMgbWF0cml4LCBUUkFOU3JvBgAAaIZohymBcnAGAAB9cnEGAAAoaIqJ\naItojHViaI1YLAAAAGh0dHA6Ly93d3cubmV0bGliLm9yZy9sYXBhY2svc2luZ2xlL3N0YnRycy5m\ncnIGAABoj1gBAAAAc2iQaH1okV1ofodScnMGAAB9cnQGAAAoaJRYEwsAACAgICAgIFNVQlJPVVRJ\nTkUgU1RCVFJTKCBVUExPLCBUUkFOUywgRElBRywgTiwgS0QsIE5SSFMsIEFCLCBMREFCLCBCLAog\nICAgICQgICAgICAgICAgICAgICAgICAgTERCLCBJTkZPICkKKgoqICAtLSBMQVBBQ0sgcm91dGlu\nZSAodmVyc2lvbiAzLjIpIC0tCiogIC0tIExBUEFDSyBpcyBhIHNvZnR3YXJlIHBhY2thZ2UgcHJv\ndmlkZWQgYnkgVW5pdi4gb2YgVGVubmVzc2VlLCAgICAtLQoqICAtLSBVbml2LiBvZiBDYWxpZm9y\nbmlhIEJlcmtlbGV5LCBVbml2LiBvZiBDb2xvcmFkbyBEZW52ZXIgYW5kIE5BRyBMdGQuLi0tCiog\nICAgIE5vdmVtYmVyIDIwMDYKKgoqICAgICAuLiBTY2FsYXIgQXJndW1lbnRzIC4uCiAgICAgIENI\nQVJBQ1RFUiAgICAgICAgICBESUFHLCBUUkFOUywgVVBMTwogICAgICBJTlRFR0VSICAgICAgICAg\nICAgSU5GTywgS0QsIExEQUIsIExEQiwgTiwgTlJIUwoqICAgICAuLgoqICAgICAuLiBBcnJheSBB\ncmd1bWVudHMgLi4KICAgICAgUkVBTCAgICAgICAgICAgICAgIEFCKCBMREFCLCAqICksIEIoIExE\nQiwgKiApCiogICAgIC4uCioKKiAgUHVycG9zZQoqICA9PT09PT09CioKKiAgU1RCVFJTIHNvbHZl\ncyBhIHRyaWFuZ3VsYXIgc3lzdGVtIG9mIHRoZSBmb3JtCioKKiAgICAgQSAqIFggPSBCICBvciAg\nQSoqVCAqIFggPSBCLAoqCiogIHdoZXJlIEEgaXMgYSB0cmlhbmd1bGFyIGJhbmQgbWF0cml4IG9m\nIG9yZGVyIE4sIGFuZCBCIGlzIGFuCiogIE4tYnkgTlJIUyBtYXRyaXguICBBIGNoZWNrIGlzIG1h\nZGUgdG8gdmVyaWZ5IHRoYXQgQSBpcyBub25zaW5ndWxhci4KKgoqICBBcmd1bWVudHMKKiAgPT09\nPT09PT09CioKKiAgVVBMTyAgICAoaW5wdXQpIENIQVJBQ1RFUioxCiogICAgICAgICAgPSAnVSc6\nICBBIGlzIHVwcGVyIHRyaWFuZ3VsYXI7CiogICAgICAgICAgPSAnTCc6ICBBIGlzIGxvd2VyIHRy\naWFuZ3VsYXIuCioKKiAgVFJBTlMgICAoaW5wdXQpIENIQVJBQ1RFUioxCiogICAgICAgICAgU3Bl\nY2lmaWVzIHRoZSBmb3JtIHRoZSBzeXN0ZW0gb2YgZXF1YXRpb25zOgoqICAgICAgICAgID0gJ04n\nOiAgQSAqIFggPSBCICAoTm8gdHJhbnNwb3NlKQoqICAgICAgICAgID0gJ1QnOiAgQSoqVCAqIFgg\nPSBCICAoVHJhbnNwb3NlKQoqICAgICAgICAgID0gJ0MnOiAgQSoqSCAqIFggPSBCICAoQ29uanVn\nYXRlIHRyYW5zcG9zZSA9IFRyYW5zcG9zZSkKKgoqICBESUFHICAgIChpbnB1dCkgQ0hBUkFDVEVS\nKjEKKiAgICAgICAgICA9ICdOJzogIEEgaXMgbm9uLXVuaXQgdHJpYW5ndWxhcjsKKiAgICAgICAg\nICA9ICdVJzogIEEgaXMgdW5pdCB0cmlhbmd1bGFyLgoqCiogIE4gICAgICAgKGlucHV0KSBJTlRF\nR0VSCiogICAgICAgICAgVGhlIG9yZGVyIG9mIHRoZSBtYXRyaXggQS4gIE4gPj0gMC4KKgoqICBL\nRCAgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBudW1iZXIgb2Ygc3VwZXJkaWFn\nb25hbHMgb3Igc3ViZGlhZ29uYWxzIG9mIHRoZQoqICAgICAgICAgIHRyaWFuZ3VsYXIgYmFuZCBt\nYXRyaXggQS4gIEtEID49IDAuCioKKiAgTlJIUyAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAg\nICBUaGUgbnVtYmVyIG9mIHJpZ2h0IGhhbmQgc2lkZXMsIGkuZS4sIHRoZSBudW1iZXIgb2YgY29s\ndW1ucwoqICAgICAgICAgIG9mIHRoZSBtYXRyaXggQi4gIE5SSFMgPj0gMC4KKgoqICBBQiAgICAg\nIChpbnB1dCkgUkVBTCBhcnJheSwgZGltZW5zaW9uIChMREFCLE4pCiogICAgICAgICAgVGhlIHVw\ncGVyIG9yIGxvd2VyIHRyaWFuZ3VsYXIgYmFuZCBtYXRyaXggQSwgc3RvcmVkIGluIHRoZQoqICAg\nICAgICAgIGZpcnN0IGtkKzEgcm93cyBvZiBBQi4gIFRoZSBqLXRoIGNvbHVtbiBvZiBBIGlzIHN0\nb3JlZAoqICAgICAgICAgIGluIHRoZSBqLXRoIGNvbHVtbiBvZiB0aGUgYXJyYXkgQUIgYXMgZm9s\nbG93czoKKiAgICAgICAgICBpZiBVUExPID0gJ1UnLCBBQihrZCsxK2ktaixqKSA9IEEoaSxqKSBm\nb3IgbWF4KDEsai1rZCk8PWk8PWo7CiogICAgICAgICAgaWYgVVBMTyA9ICdMJywgQUIoMStpLWos\naikgICAgPSBBKGksaikgZm9yIGo8PWk8PW1pbihuLGora2QpLgoqICAgICAgICAgIElmIERJQUcg\nPSAnVScsIHRoZSBkaWFnb25hbCBlbGVtZW50cyBvZiBBIGFyZSBub3QgcmVmZXJlbmNlZAoqICAg\nICAgICAgIGFuZCBhcmUgYXNzdW1lZCB0byBiZSAxLgoqCiogIExEQUIgICAgKGlucHV0KSBJTlRF\nR0VSCiogICAgICAgICAgVGhlIGxlYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBBQi4gIExE\nQUIgPj0gS0QrMS4KKgoqICBCICAgICAgIChpbnB1dC9vdXRwdXQpIFJFQUwgYXJyYXksIGRpbWVu\nc2lvbiAoTERCLE5SSFMpCiogICAgICAgICAgT24gZW50cnksIHRoZSByaWdodCBoYW5kIHNpZGUg\nbWF0cml4IEIuCiogICAgICAgICAgT24gZXhpdCwgaWYgSU5GTyA9IDAsIHRoZSBzb2x1dGlvbiBt\nYXRyaXggWC4KKgoqICBMREIgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBsZWFk\naW5nIGRpbWVuc2lvbiBvZiB0aGUgYXJyYXkgQi4gIExEQiA+PSBtYXgoMSxOKS4KKgoqICBJTkZP\nICAgIChvdXRwdXQpIElOVEVHRVIKKiAgICAgICAgICA9IDA6ICBzdWNjZXNzZnVsIGV4aXQKKiAg\nICAgICAgICA8IDA6ICBpZiBJTkZPID0gLWksIHRoZSBpLXRoIGFyZ3VtZW50IGhhZCBhbiBpbGxl\nZ2FsIHZhbHVlCiogICAgICAgICAgPiAwOiAgaWYgSU5GTyA9IGksIHRoZSBpLXRoIGRpYWdvbmFs\nIGVsZW1lbnQgb2YgQSBpcyB6ZXJvLAoqICAgICAgICAgICAgICAgIGluZGljYXRpbmcgdGhhdCB0\naGUgbWF0cml4IGlzIHNpbmd1bGFyIGFuZCB0aGUKKiAgICAgICAgICAgICAgICBzb2x1dGlvbnMg\nWCBoYXZlIG5vdCBiZWVuIGNvbXB1dGVkLgoqCnJ1BgAAaIZohymBcnYGAAB9cncGAAAoaIqJaIto\njHViaJiKAjUBaJlYDgAAAHN0YnRyc18zMDkudHh0cngGAAB1YmibigI1AWicWAUAAAB0YnRyc3J5\nBgAAaJiKAWV1Ymh9aGFdaH6HUnJ6BgAAfXJ7BgAAKGiBWAoAAAB0cmlhbmd1bGFycnwGAABog1gE\nAAAAYmFuZHJ9BgAAaHFYPQAAAGNvbXB1dGF0aW9uYWwsIHNvbHZlIEEqWCA9IEIsIEIgaXMgYW4g\nTi1ieS1OUkhTIG1hdHJpeCwgVFJBTlNyfgYAAGiGaIcpgXJ/BgAAfXKABgAAKGiKiWiLaIx1YmiN\nWCwAAABodHRwOi8vd3d3Lm5ldGxpYi5vcmcvbGFwYWNrL2RvdWJsZS9kdGJ0cnMuZnKBBgAAaI9Y\nAQAAAGRokGh9aJFdaH6HUnKCBgAAfXKDBgAAKGiUWCsLAAAgICAgICBTVUJST1VUSU5FIERUQlRS\nUyggVVBMTywgVFJBTlMsIERJQUcsIE4sIEtELCBOUkhTLCBBQiwgTERBQiwgQiwKICAgICAkICAg\nICAgICAgICAgICAgICAgIExEQiwgSU5GTyApCioKKiAgLS0gTEFQQUNLIHJvdXRpbmUgKHZlcnNp\nb24gMy4yKSAtLQoqICAtLSBMQVBBQ0sgaXMgYSBzb2Z0d2FyZSBwYWNrYWdlIHByb3ZpZGVkIGJ5\nIFVuaXYuIG9mIFRlbm5lc3NlZSwgICAgLS0KKiAgLS0gVW5pdi4gb2YgQ2FsaWZvcm5pYSBCZXJr\nZWxleSwgVW5pdi4gb2YgQ29sb3JhZG8gRGVudmVyIGFuZCBOQUcgTHRkLi4tLQoqICAgICBOb3Zl\nbWJlciAyMDA2CioKKiAgICAgLi4gU2NhbGFyIEFyZ3VtZW50cyAuLgogICAgICBDSEFSQUNURVIg\nICAgICAgICAgRElBRywgVFJBTlMsIFVQTE8KICAgICAgSU5URUdFUiAgICAgICAgICAgIElORk8s\nIEtELCBMREFCLCBMREIsIE4sIE5SSFMKKiAgICAgLi4KKiAgICAgLi4gQXJyYXkgQXJndW1lbnRz\nIC4uCiAgICAgIERPVUJMRSBQUkVDSVNJT04gICBBQiggTERBQiwgKiApLCBCKCBMREIsICogKQoq\nICAgICAuLgoqCiogIFB1cnBvc2UKKiAgPT09PT09PQoqCiogIERUQlRSUyBzb2x2ZXMgYSB0cmlh\nbmd1bGFyIHN5c3RlbSBvZiB0aGUgZm9ybQoqCiogICAgIEEgKiBYID0gQiAgb3IgIEEqKlQgKiBY\nID0gQiwKKgoqICB3aGVyZSBBIGlzIGEgdHJpYW5ndWxhciBiYW5kIG1hdHJpeCBvZiBvcmRlciBO\nLCBhbmQgQiBpcyBhbgoqICBOLWJ5IE5SSFMgbWF0cml4LiAgQSBjaGVjayBpcyBtYWRlIHRvIHZl\ncmlmeSB0aGF0IEEgaXMgbm9uc2luZ3VsYXIuCioKKiAgQXJndW1lbnRzCiogID09PT09PT09PQoq\nCiogIFVQTE8gICAgKGlucHV0KSBDSEFSQUNURVIqMQoqICAgICAgICAgID0gJ1UnOiAgQSBpcyB1\ncHBlciB0cmlhbmd1bGFyOwoqICAgICAgICAgID0gJ0wnOiAgQSBpcyBsb3dlciB0cmlhbmd1bGFy\nLgoqCiogIFRSQU5TICAgKGlucHV0KSBDSEFSQUNURVIqMQoqICAgICAgICAgIFNwZWNpZmllcyB0\naGUgZm9ybSB0aGUgc3lzdGVtIG9mIGVxdWF0aW9uczoKKiAgICAgICAgICA9ICdOJzogIEEgKiBY\nID0gQiAgKE5vIHRyYW5zcG9zZSkKKiAgICAgICAgICA9ICdUJzogIEEqKlQgKiBYID0gQiAgKFRy\nYW5zcG9zZSkKKiAgICAgICAgICA9ICdDJzogIEEqKkggKiBYID0gQiAgKENvbmp1Z2F0ZSB0cmFu\nc3Bvc2UgPSBUcmFuc3Bvc2UpCioKKiAgRElBRyAgICAoaW5wdXQpIENIQVJBQ1RFUioxCiogICAg\nICAgICAgPSAnTic6ICBBIGlzIG5vbi11bml0IHRyaWFuZ3VsYXI7CiogICAgICAgICAgPSAnVSc6\nICBBIGlzIHVuaXQgdHJpYW5ndWxhci4KKgoqICBOICAgICAgIChpbnB1dCkgSU5URUdFUgoqICAg\nICAgICAgIFRoZSBvcmRlciBvZiB0aGUgbWF0cml4IEEuICBOID49IDAuCioKKiAgS0QgICAgICAo\naW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbnVtYmVyIG9mIHN1cGVyZGlhZ29uYWxzIG9y\nIHN1YmRpYWdvbmFscyBvZiB0aGUKKiAgICAgICAgICB0cmlhbmd1bGFyIGJhbmQgbWF0cml4IEEu\nICBLRCA+PSAwLgoqCiogIE5SSFMgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG51\nbWJlciBvZiByaWdodCBoYW5kIHNpZGVzLCBpLmUuLCB0aGUgbnVtYmVyIG9mIGNvbHVtbnMKKiAg\nICAgICAgICBvZiB0aGUgbWF0cml4IEIuICBOUkhTID49IDAuCioKKiAgQUIgICAgICAoaW5wdXQp\nIERPVUJMRSBQUkVDSVNJT04gYXJyYXksIGRpbWVuc2lvbiAoTERBQixOKQoqICAgICAgICAgIFRo\nZSB1cHBlciBvciBsb3dlciB0cmlhbmd1bGFyIGJhbmQgbWF0cml4IEEsIHN0b3JlZCBpbiB0aGUK\nKiAgICAgICAgICBmaXJzdCBrZCsxIHJvd3Mgb2YgQUIuICBUaGUgai10aCBjb2x1bW4gb2YgQSBp\ncyBzdG9yZWQKKiAgICAgICAgICBpbiB0aGUgai10aCBjb2x1bW4gb2YgdGhlIGFycmF5IEFCIGFz\nIGZvbGxvd3M6CiogICAgICAgICAgaWYgVVBMTyA9ICdVJywgQUIoa2QrMStpLWosaikgPSBBKGks\naikgZm9yIG1heCgxLGota2QpPD1pPD1qOwoqICAgICAgICAgIGlmIFVQTE8gPSAnTCcsIEFCKDEr\naS1qLGopICAgID0gQShpLGopIGZvciBqPD1pPD1taW4obixqK2tkKS4KKiAgICAgICAgICBJZiBE\nSUFHID0gJ1UnLCB0aGUgZGlhZ29uYWwgZWxlbWVudHMgb2YgQSBhcmUgbm90IHJlZmVyZW5jZWQK\nKiAgICAgICAgICBhbmQgYXJlIGFzc3VtZWQgdG8gYmUgMS4KKgoqICBMREFCICAgIChpbnB1dCkg\nSU5URUdFUgoqICAgICAgICAgIFRoZSBsZWFkaW5nIGRpbWVuc2lvbiBvZiB0aGUgYXJyYXkgQUIu\nICBMREFCID49IEtEKzEuCioKKiAgQiAgICAgICAoaW5wdXQvb3V0cHV0KSBET1VCTEUgUFJFQ0lT\nSU9OIGFycmF5LCBkaW1lbnNpb24gKExEQixOUkhTKQoqICAgICAgICAgIE9uIGVudHJ5LCB0aGUg\ncmlnaHQgaGFuZCBzaWRlIG1hdHJpeCBCLgoqICAgICAgICAgIE9uIGV4aXQsIGlmIElORk8gPSAw\nLCB0aGUgc29sdXRpb24gbWF0cml4IFguCioKKiAgTERCICAgICAoaW5wdXQpIElOVEVHRVIKKiAg\nICAgICAgICBUaGUgbGVhZGluZyBkaW1lbnNpb24gb2YgdGhlIGFycmF5IEIuICBMREIgPj0gbWF4\nKDEsTikuCioKKiAgSU5GTyAgICAob3V0cHV0KSBJTlRFR0VSCiogICAgICAgICAgPSAwOiAgc3Vj\nY2Vzc2Z1bCBleGl0CiogICAgICAgICAgPCAwOiAgaWYgSU5GTyA9IC1pLCB0aGUgaS10aCBhcmd1\nbWVudCBoYWQgYW4gaWxsZWdhbCB2YWx1ZQoqICAgICAgICAgID4gMDogIGlmIElORk8gPSBpLCB0\naGUgaS10aCBkaWFnb25hbCBlbGVtZW50IG9mIEEgaXMgemVybywKKiAgICAgICAgICAgICAgICBp\nbmRpY2F0aW5nIHRoYXQgdGhlIG1hdHJpeCBpcyBzaW5ndWxhciBhbmQgdGhlCiogICAgICAgICAg\nICAgICAgc29sdXRpb25zIFggaGF2ZSBub3QgYmVlbiBjb21wdXRlZC4KKgpyhAYAAGiGaIcpgXKF\nBgAAfXKGBgAAKGiKiWiLaIx1YmiYigI2AWiZWA4AAABkdGJ0cnNfMzEwLnR4dHKHBgAAdWJom4oC\nNgFonFgFAAAAdGJ0cnNyiAYAAGiYigFmdWJofWhhXWh+h1JyiQYAAH1yigYAAChogVgKAAAAdHJp\nYW5ndWxhcnKLBgAAaINYBAAAAGJhbmRyjAYAAGhxWD0AAABjb21wdXRhdGlvbmFsLCBzb2x2ZSBB\nKlggPSBCLCBCIGlzIGFuIE4tYnktTlJIUyBtYXRyaXgsIFRSQU5Tco0GAABohmiHKYFyjgYAAH1y\njwYAAChoioloi2iMdWJojVgtAAAAaHR0cDovL3d3dy5uZXRsaWIub3JnL2xhcGFjay9jb21wbGV4\nL2N0YnRycy5mcpAGAABoj1gBAAAAY2iQaH1okV1ofodScpEGAAB9cpIGAAAoaJRYIwsAACAgICAg\nIFNVQlJPVVRJTkUgQ1RCVFJTKCBVUExPLCBUUkFOUywgRElBRywgTiwgS0QsIE5SSFMsIEFCLCBM\nREFCLCBCLAogICAgICQgICAgICAgICAgICAgICAgICAgTERCLCBJTkZPICkKKgoqICAtLSBMQVBB\nQ0sgcm91dGluZSAodmVyc2lvbiAzLjIpIC0tCiogIC0tIExBUEFDSyBpcyBhIHNvZnR3YXJlIHBh\nY2thZ2UgcHJvdmlkZWQgYnkgVW5pdi4gb2YgVGVubmVzc2VlLCAgICAtLQoqICAtLSBVbml2LiBv\nZiBDYWxpZm9ybmlhIEJlcmtlbGV5LCBVbml2LiBvZiBDb2xvcmFkbyBEZW52ZXIgYW5kIE5BRyBM\ndGQuLi0tCiogICAgIE5vdmVtYmVyIDIwMDYKKgoqICAgICAuLiBTY2FsYXIgQXJndW1lbnRzIC4u\nCiAgICAgIENIQVJBQ1RFUiAgICAgICAgICBESUFHLCBUUkFOUywgVVBMTwogICAgICBJTlRFR0VS\nICAgICAgICAgICAgSU5GTywgS0QsIExEQUIsIExEQiwgTiwgTlJIUwoqICAgICAuLgoqICAgICAu\nLiBBcnJheSBBcmd1bWVudHMgLi4KICAgICAgQ09NUExFWCAgICAgICAgICAgIEFCKCBMREFCLCAq\nICksIEIoIExEQiwgKiApCiogICAgIC4uCioKKiAgUHVycG9zZQoqICA9PT09PT09CioKKiAgQ1RC\nVFJTIHNvbHZlcyBhIHRyaWFuZ3VsYXIgc3lzdGVtIG9mIHRoZSBmb3JtCioKKiAgICAgQSAqIFgg\nPSBCLCAgQSoqVCAqIFggPSBCLCAgb3IgIEEqKkggKiBYID0gQiwKKgoqICB3aGVyZSBBIGlzIGEg\ndHJpYW5ndWxhciBiYW5kIG1hdHJpeCBvZiBvcmRlciBOLCBhbmQgQiBpcyBhbgoqICBOLWJ5LU5S\nSFMgbWF0cml4LiAgQSBjaGVjayBpcyBtYWRlIHRvIHZlcmlmeSB0aGF0IEEgaXMgbm9uc2luZ3Vs\nYXIuCioKKiAgQXJndW1lbnRzCiogID09PT09PT09PQoqCiogIFVQTE8gICAgKGlucHV0KSBDSEFS\nQUNURVIqMQoqICAgICAgICAgID0gJ1UnOiAgQSBpcyB1cHBlciB0cmlhbmd1bGFyOwoqICAgICAg\nICAgID0gJ0wnOiAgQSBpcyBsb3dlciB0cmlhbmd1bGFyLgoqCiogIFRSQU5TICAgKGlucHV0KSBD\nSEFSQUNURVIqMQoqICAgICAgICAgIFNwZWNpZmllcyB0aGUgZm9ybSBvZiB0aGUgc3lzdGVtIG9m\nIGVxdWF0aW9uczoKKiAgICAgICAgICA9ICdOJzogIEEgKiBYID0gQiAgICAgKE5vIHRyYW5zcG9z\nZSkKKiAgICAgICAgICA9ICdUJzogIEEqKlQgKiBYID0gQiAgKFRyYW5zcG9zZSkKKiAgICAgICAg\nICA9ICdDJzogIEEqKkggKiBYID0gQiAgKENvbmp1Z2F0ZSB0cmFuc3Bvc2UpCioKKiAgRElBRyAg\nICAoaW5wdXQpIENIQVJBQ1RFUioxCiogICAgICAgICAgPSAnTic6ICBBIGlzIG5vbi11bml0IHRy\naWFuZ3VsYXI7CiogICAgICAgICAgPSAnVSc6ICBBIGlzIHVuaXQgdHJpYW5ndWxhci4KKgoqICBO\nICAgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBvcmRlciBvZiB0aGUgbWF0cml4\nIEEuICBOID49IDAuCioKKiAgS0QgICAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUg\nbnVtYmVyIG9mIHN1cGVyZGlhZ29uYWxzIG9yIHN1YmRpYWdvbmFscyBvZiB0aGUKKiAgICAgICAg\nICB0cmlhbmd1bGFyIGJhbmQgbWF0cml4IEEuICBLRCA+PSAwLgoqCiogIE5SSFMgICAgKGlucHV0\nKSBJTlRFR0VSCiogICAgICAgICAgVGhlIG51bWJlciBvZiByaWdodCBoYW5kIHNpZGVzLCBpLmUu\nLCB0aGUgbnVtYmVyIG9mIGNvbHVtbnMKKiAgICAgICAgICBvZiB0aGUgbWF0cml4IEIuICBOUkhT\nID49IDAuCioKKiAgQUIgICAgICAoaW5wdXQpIENPTVBMRVggYXJyYXksIGRpbWVuc2lvbiAoTERB\nQixOKQoqICAgICAgICAgIFRoZSB1cHBlciBvciBsb3dlciB0cmlhbmd1bGFyIGJhbmQgbWF0cml4\nIEEsIHN0b3JlZCBpbiB0aGUKKiAgICAgICAgICBmaXJzdCBrZCsxIHJvd3Mgb2YgQUIuICBUaGUg\nai10aCBjb2x1bW4gb2YgQSBpcyBzdG9yZWQKKiAgICAgICAgICBpbiB0aGUgai10aCBjb2x1bW4g\nb2YgdGhlIGFycmF5IEFCIGFzIGZvbGxvd3M6CiogICAgICAgICAgaWYgVVBMTyA9ICdVJywgQUIo\na2QrMStpLWosaikgPSBBKGksaikgZm9yIG1heCgxLGota2QpPD1pPD1qOwoqICAgICAgICAgIGlm\nIFVQTE8gPSAnTCcsIEFCKDEraS1qLGopICAgID0gQShpLGopIGZvciBqPD1pPD1taW4obixqK2tk\nKS4KKiAgICAgICAgICBJZiBESUFHID0gJ1UnLCB0aGUgZGlhZ29uYWwgZWxlbWVudHMgb2YgQSBh\ncmUgbm90IHJlZmVyZW5jZWQKKiAgICAgICAgICBhbmQgYXJlIGFzc3VtZWQgdG8gYmUgMS4KKgoq\nICBMREFCICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBsZWFkaW5nIGRpbWVuc2lv\nbiBvZiB0aGUgYXJyYXkgQUIuICBMREFCID49IEtEKzEuCioKKiAgQiAgICAgICAoaW5wdXQvb3V0\ncHV0KSBDT01QTEVYIGFycmF5LCBkaW1lbnNpb24gKExEQixOUkhTKQoqICAgICAgICAgIE9uIGVu\ndHJ5LCB0aGUgcmlnaHQgaGFuZCBzaWRlIG1hdHJpeCBCLgoqICAgICAgICAgIE9uIGV4aXQsIGlm\nIElORk8gPSAwLCB0aGUgc29sdXRpb24gbWF0cml4IFguCioKKiAgTERCICAgICAoaW5wdXQpIElO\nVEVHRVIKKiAgICAgICAgICBUaGUgbGVhZGluZyBkaW1lbnNpb24gb2YgdGhlIGFycmF5IEIuICBM\nREIgPj0gbWF4KDEsTikuCioKKiAgSU5GTyAgICAob3V0cHV0KSBJTlRFR0VSCiogICAgICAgICAg\nPSAwOiAgc3VjY2Vzc2Z1bCBleGl0CiogICAgICAgICAgPCAwOiAgaWYgSU5GTyA9IC1pLCB0aGUg\naS10aCBhcmd1bWVudCBoYWQgYW4gaWxsZWdhbCB2YWx1ZQoqICAgICAgICAgID4gMDogIGlmIElO\nRk8gPSBpLCB0aGUgaS10aCBkaWFnb25hbCBlbGVtZW50IG9mIEEgaXMgemVybywKKiAgICAgICAg\nICAgICAgICBpbmRpY2F0aW5nIHRoYXQgdGhlIG1hdHJpeCBpcyBzaW5ndWxhciBhbmQgdGhlCiog\nICAgICAgICAgICAgICAgc29sdXRpb25zIFggaGF2ZSBub3QgYmVlbiBjb21wdXRlZC4KKgpykwYA\nAGiGaIcpgXKUBgAAfXKVBgAAKGiKiWiLaIx1YmiYigI3AWiZWA4AAABjdGJ0cnNfMzExLnR4dHKW\nBgAAdWJom4oCNwFonFgFAAAAdGJ0cnNylwYAAGiYigFndWJofWhhXWh+h1JymAYAAH1ymQYAACho\ngVgKAAAAdHJpYW5ndWxhcnKaBgAAaINYBAAAAGJhbmRymwYAAGhxWD0AAABjb21wdXRhdGlvbmFs\nLCBzb2x2ZSBBKlggPSBCLCBCIGlzIGFuIE4tYnktTlJIUyBtYXRyaXgsIFRSQU5TcpwGAABohmiH\nKYFynQYAAH1yngYAAChoioloi2iMdWJojVgvAAAAaHR0cDovL3d3dy5uZXRsaWIub3JnL2xhcGFj\nay9jb21wbGV4MTYvenRidHJzLmZynwYAAGiPWAEAAAB6aJBofWiRXWh+h1JyoAYAAH1yoQYAACho\nlFgpCwAAICAgICAgU1VCUk9VVElORSBaVEJUUlMoIFVQTE8sIFRSQU5TLCBESUFHLCBOLCBLRCwg\nTlJIUywgQUIsIExEQUIsIEIsCiAgICAgJCAgICAgICAgICAgICAgICAgICBMREIsIElORk8gKQoq\nCiogIC0tIExBUEFDSyByb3V0aW5lICh2ZXJzaW9uIDMuMikgLS0KKiAgLS0gTEFQQUNLIGlzIGEg\nc29mdHdhcmUgcGFja2FnZSBwcm92aWRlZCBieSBVbml2LiBvZiBUZW5uZXNzZWUsICAgIC0tCiog\nIC0tIFVuaXYuIG9mIENhbGlmb3JuaWEgQmVya2VsZXksIFVuaXYuIG9mIENvbG9yYWRvIERlbnZl\nciBhbmQgTkFHIEx0ZC4uLS0KKiAgICAgTm92ZW1iZXIgMjAwNgoqCiogICAgIC4uIFNjYWxhciBB\ncmd1bWVudHMgLi4KICAgICAgQ0hBUkFDVEVSICAgICAgICAgIERJQUcsIFRSQU5TLCBVUExPCiAg\nICAgIElOVEVHRVIgICAgICAgICAgICBJTkZPLCBLRCwgTERBQiwgTERCLCBOLCBOUkhTCiogICAg\nIC4uCiogICAgIC4uIEFycmF5IEFyZ3VtZW50cyAuLgogICAgICBDT01QTEVYKjE2ICAgICAgICAg\nQUIoIExEQUIsICogKSwgQiggTERCLCAqICkKKiAgICAgLi4KKgoqICBQdXJwb3NlCiogID09PT09\nPT0KKgoqICBaVEJUUlMgc29sdmVzIGEgdHJpYW5ndWxhciBzeXN0ZW0gb2YgdGhlIGZvcm0KKgoq\nICAgICBBICogWCA9IEIsICBBKipUICogWCA9IEIsICBvciAgQSoqSCAqIFggPSBCLAoqCiogIHdo\nZXJlIEEgaXMgYSB0cmlhbmd1bGFyIGJhbmQgbWF0cml4IG9mIG9yZGVyIE4sIGFuZCBCIGlzIGFu\nCiogIE4tYnktTlJIUyBtYXRyaXguICBBIGNoZWNrIGlzIG1hZGUgdG8gdmVyaWZ5IHRoYXQgQSBp\ncyBub25zaW5ndWxhci4KKgoqICBBcmd1bWVudHMKKiAgPT09PT09PT09CioKKiAgVVBMTyAgICAo\naW5wdXQpIENIQVJBQ1RFUioxCiogICAgICAgICAgPSAnVSc6ICBBIGlzIHVwcGVyIHRyaWFuZ3Vs\nYXI7CiogICAgICAgICAgPSAnTCc6ICBBIGlzIGxvd2VyIHRyaWFuZ3VsYXIuCioKKiAgVFJBTlMg\nICAoaW5wdXQpIENIQVJBQ1RFUioxCiogICAgICAgICAgU3BlY2lmaWVzIHRoZSBmb3JtIG9mIHRo\nZSBzeXN0ZW0gb2YgZXF1YXRpb25zOgoqICAgICAgICAgID0gJ04nOiAgQSAqIFggPSBCICAgICAo\nTm8gdHJhbnNwb3NlKQoqICAgICAgICAgID0gJ1QnOiAgQSoqVCAqIFggPSBCICAoVHJhbnNwb3Nl\nKQoqICAgICAgICAgID0gJ0MnOiAgQSoqSCAqIFggPSBCICAoQ29uanVnYXRlIHRyYW5zcG9zZSkK\nKgoqICBESUFHICAgIChpbnB1dCkgQ0hBUkFDVEVSKjEKKiAgICAgICAgICA9ICdOJzogIEEgaXMg\nbm9uLXVuaXQgdHJpYW5ndWxhcjsKKiAgICAgICAgICA9ICdVJzogIEEgaXMgdW5pdCB0cmlhbmd1\nbGFyLgoqCiogIE4gICAgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIG9yZGVyIG9m\nIHRoZSBtYXRyaXggQS4gIE4gPj0gMC4KKgoqICBLRCAgICAgIChpbnB1dCkgSU5URUdFUgoqICAg\nICAgICAgIFRoZSBudW1iZXIgb2Ygc3VwZXJkaWFnb25hbHMgb3Igc3ViZGlhZ29uYWxzIG9mIHRo\nZQoqICAgICAgICAgIHRyaWFuZ3VsYXIgYmFuZCBtYXRyaXggQS4gIEtEID49IDAuCioKKiAgTlJI\nUyAgICAoaW5wdXQpIElOVEVHRVIKKiAgICAgICAgICBUaGUgbnVtYmVyIG9mIHJpZ2h0IGhhbmQg\nc2lkZXMsIGkuZS4sIHRoZSBudW1iZXIgb2YgY29sdW1ucwoqICAgICAgICAgIG9mIHRoZSBtYXRy\naXggQi4gIE5SSFMgPj0gMC4KKgoqICBBQiAgICAgIChpbnB1dCkgQ09NUExFWCoxNiBhcnJheSwg\nZGltZW5zaW9uIChMREFCLE4pCiogICAgICAgICAgVGhlIHVwcGVyIG9yIGxvd2VyIHRyaWFuZ3Vs\nYXIgYmFuZCBtYXRyaXggQSwgc3RvcmVkIGluIHRoZQoqICAgICAgICAgIGZpcnN0IGtkKzEgcm93\ncyBvZiBBQi4gIFRoZSBqLXRoIGNvbHVtbiBvZiBBIGlzIHN0b3JlZAoqICAgICAgICAgIGluIHRo\nZSBqLXRoIGNvbHVtbiBvZiB0aGUgYXJyYXkgQUIgYXMgZm9sbG93czoKKiAgICAgICAgICBpZiBV\nUExPID0gJ1UnLCBBQihrZCsxK2ktaixqKSA9IEEoaSxqKSBmb3IgbWF4KDEsai1rZCk8PWk8PWo7\nCiogICAgICAgICAgaWYgVVBMTyA9ICdMJywgQUIoMStpLWosaikgICAgPSBBKGksaikgZm9yIGo8\nPWk8PW1pbihuLGora2QpLgoqICAgICAgICAgIElmIERJQUcgPSAnVScsIHRoZSBkaWFnb25hbCBl\nbGVtZW50cyBvZiBBIGFyZSBub3QgcmVmZXJlbmNlZAoqICAgICAgICAgIGFuZCBhcmUgYXNzdW1l\nZCB0byBiZSAxLgoqCiogIExEQUIgICAgKGlucHV0KSBJTlRFR0VSCiogICAgICAgICAgVGhlIGxl\nYWRpbmcgZGltZW5zaW9uIG9mIHRoZSBhcnJheSBBQi4gIExEQUIgPj0gS0QrMS4KKgoqICBCICAg\nICAgIChpbnB1dC9vdXRwdXQpIENPTVBMRVgqMTYgYXJyYXksIGRpbWVuc2lvbiAoTERCLE5SSFMp\nCiogICAgICAgICAgT24gZW50cnksIHRoZSByaWdodCBoYW5kIHNpZGUgbWF0cml4IEIuCiogICAg\nICAgICAgT24gZXhpdCwgaWYgSU5GTyA9IDAsIHRoZSBzb2x1dGlvbiBtYXRyaXggWC4KKgoqICBM\nREIgICAgIChpbnB1dCkgSU5URUdFUgoqICAgICAgICAgIFRoZSBsZWFkaW5nIGRpbWVuc2lvbiBv\nZiB0aGUgYXJyYXkgQi4gIExEQiA+PSBtYXgoMSxOKS4KKgoqICBJTkZPICAgIChvdXRwdXQpIElO\nVEVHRVIKKiAgICAgICAgICA9IDA6ICBzdWNjZXNzZnVsIGV4aXQKKiAgICAgICAgICA8IDA6ICBp\nZiBJTkZPID0gLWksIHRoZSBpLXRoIGFyZ3VtZW50IGhhZCBhbiBpbGxlZ2FsIHZhbHVlCiogICAg\nICAgICAgPiAwOiAgaWYgSU5GTyA9IGksIHRoZSBpLXRoIGRpYWdvbmFsIGVsZW1lbnQgb2YgQSBp\ncyB6ZXJvLAoqICAgICAgICAgICAgICAgIGluZGljYXRpbmcgdGhhdCB0aGUgbWF0cml4IGlzIHNp\nbmd1bGFyIGFuZCB0aGUKKiAgICAgICAgICAgICAgICBzb2x1dGlvbnMgWCBoYXZlIG5vdCBiZWVu\nIGNvbXB1dGVkLgoqCnKiBgAAaIZohymBcqMGAAB9cqQGAAAoaIqJaItojHViaJiKAjgBaJlYDgAA\nAHp0YnRyc18zMTIudHh0cqUGAAB1YmibigI4AWicWAUAAAB0YnRyc3KmBgAAaJiKAWh1YmV1YlUH\ncXVlcmllc3KnBgAAXXKoBgAAY2RqYW5nby5kYi5tb2RlbHMucXVlcnlfdXRpbHMKUQpyqQYAACmB\ncqoGAAB9cqsGAAAoaFNoVGhViWhWXXKsBgAAVRBub3Rlc19faWNvbnRhaW5zcq0GAABoc4ZyrgYA\nAGFoWF1yrwYAAHViYXUu\n','2012-04-17 10:31:10');
/*!40000 ALTER TABLE `django_session` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `django_site`
--

DROP TABLE IF EXISTS `django_site`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `django_site` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `domain` varchar(100) NOT NULL,
  `name` varchar(50) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `django_site`
--

LOCK TABLES `django_site` WRITE;
/*!40000 ALTER TABLE `django_site` DISABLE KEYS */;
/*!40000 ALTER TABLE `django_site` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `library_author`
--

DROP TABLE IF EXISTS `library_author`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `library_author` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(64) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `library_author`
--

LOCK TABLES `library_author` WRITE;
/*!40000 ALTER TABLE `library_author` DISABLE KEYS */;
INSERT INTO `library_author` VALUES (1,'Mark Lutz');
/*!40000 ALTER TABLE `library_author` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `library_book`
--

DROP TABLE IF EXISTS `library_book`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `library_book` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `isbn` varchar(10) NOT NULL,
  `title` varchar(255) NOT NULL,
  `pages` int(11) NOT NULL,
  `publisher_id` int(11) NOT NULL,
  `pub_date` date NOT NULL,
  `timestamp` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `library_book_22dd9c39` (`publisher_id`)
) ENGINE=MyISAM AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `library_book`
--

LOCK TABLES `library_book` WRITE;
/*!40000 ALTER TABLE `library_book` DISABLE KEYS */;
INSERT INTO `library_book` VALUES (1,'9780596009','Programming Python',1596,1,'2006-08-23','2012-02-14 15:27:54');
/*!40000 ALTER TABLE `library_book` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `library_book_authors`
--

DROP TABLE IF EXISTS `library_book_authors`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `library_book_authors` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `book_id` int(11) NOT NULL,
  `author_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `book_id` (`book_id`,`author_id`),
  KEY `library_book_authors_752eb95b` (`book_id`),
  KEY `library_book_authors_cc846901` (`author_id`)
) ENGINE=MyISAM AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `library_book_authors`
--

LOCK TABLES `library_book_authors` WRITE;
/*!40000 ALTER TABLE `library_book_authors` DISABLE KEYS */;
INSERT INTO `library_book_authors` VALUES (1,1,1);
/*!40000 ALTER TABLE `library_book_authors` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `library_book_tags`
--

DROP TABLE IF EXISTS `library_book_tags`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `library_book_tags` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `book_id` int(11) NOT NULL,
  `tag_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `book_id` (`book_id`,`tag_id`),
  KEY `library_book_tags_752eb95b` (`book_id`),
  KEY `library_book_tags_3747b463` (`tag_id`)
) ENGINE=MyISAM AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `library_book_tags`
--

LOCK TABLES `library_book_tags` WRITE;
/*!40000 ALTER TABLE `library_book_tags` DISABLE KEYS */;
INSERT INTO `library_book_tags` VALUES (1,1,12);
/*!40000 ALTER TABLE `library_book_tags` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `library_file`
--

DROP TABLE IF EXISTS `library_file`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `library_file` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `type_id` int(11) NOT NULL,
  `handle` varchar(100) NOT NULL,
  `meta_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `library_file_777d41c8` (`type_id`),
  KEY `library_file_9805f4bb` (`meta_id`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `library_file`
--

LOCK TABLES `library_file` WRITE;
/*!40000 ALTER TABLE `library_file` DISABLE KEYS */;
/*!40000 ALTER TABLE `library_file` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `library_filetype`
--

DROP TABLE IF EXISTS `library_filetype`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `library_filetype` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `type` varchar(10) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `library_filetype`
--

LOCK TABLES `library_filetype` WRITE;
/*!40000 ALTER TABLE `library_filetype` DISABLE KEYS */;
/*!40000 ALTER TABLE `library_filetype` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `library_publisher`
--

DROP TABLE IF EXISTS `library_publisher`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `library_publisher` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(64) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `library_publisher`
--

LOCK TABLES `library_publisher` WRITE;
/*!40000 ALTER TABLE `library_publisher` DISABLE KEYS */;
INSERT INTO `library_publisher` VALUES (1,'O\'Reilly Media Inc. ');
/*!40000 ALTER TABLE `library_publisher` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `movie_cast`
--

DROP TABLE IF EXISTS `movie_cast`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `movie_cast` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `role` varchar(100) NOT NULL,
  `movie_id` int(11) NOT NULL,
  `actor_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `movie_cast_movie_id` (`movie_id`),
  KEY `movie_cast_actor_id` (`actor_id`)
) ENGINE=MyISAM AUTO_INCREMENT=469 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `movie_cast`
--

LOCK TABLES `movie_cast` WRITE;
/*!40000 ALTER TABLE `movie_cast` DISABLE KEYS */;
INSERT INTO `movie_cast` VALUES (40,'Harry Pfarrer',2,43),(41,'Linda Litzke',2,22),(42,'Osbourne Cox',2,44),(43,'Katie Cox',2,45),(44,'Chad Feldheimer',2,46),(45,'Ted Treffon',2,47),(46,'Sandy Pfarrer',2,48),(47,'CIA Officer',2,49),(48,'CIA Superior',2,50),(49,'Krapotkin',2,51),(50,'Alan',2,52),(51,'Divorce Lawyer #1',2,53),(52,'Divorce Lawyer #2',2,54),(53,'Peck',2,55),(54,'Olson',2,56),(55,'Doug Magruder',2,57),(56,'Party Guest #2',2,58),(57,'Cosmetic Surgeon',2,59),(58,'Stretching Gym Patron',2,60),(59,'Prospective Gym	Customer',2,61),(60,'Manolo',2,62),(61,'Lawyer\'s Secretary',2,63),(62,'Russian Embassy Escort',2,64),(63,'Senior Russian Embassy Man',2,65),(64,'Hal',2,66),(65,'Process Server',2,67),(66,'Morning Show Host',2,68),(67,'Morning Show Hostess',2,69),(68,'PR Woman',2,70),(69,'Sandy\'s Man',2,71),(70,'Four-Year-Old Patient',2,72),(71,'Star of \"Coming Up Daisy\"',2,73),(72,'Drunken Princetonian',2,74),(73,'Drunken Princetonian',2,75),(74,'Drunken Princetonian',2,76),(75,'Gym Guy',2,77),(76,'Lt. Macdonald',2,78),(77,'Drunken Singer',2,79),(78,'Tourist',2,80),(79,'Suspicious Man',2,81),(80,'Midwestern Tourist',2,82),(81,'CIA Agent',2,83),(82,'Drunken Princeton Singer',2,85),(83,'Senator',2,86),(84,'Tourist',2,87),(85,'Monica',2,88),(1,'Jerome \'Jerry\' Lundegaard',1,3),(2,'Carl Showalter',1,4),(3,'Gaear Grimsrud',1,5),(4,'Jean Lundegaard',1,6),(5,'Wade Gustafson',1,7),(6,'Scotty Lundegaard',1,8),(7,'Irate Customer',1,9),(8,'Irate Customer\'s Wife',1,10),(9,'Car Salesman',1,11),(10,'Hooker #1',1,12),(11,'Hooker #2',1,13),(12,'Shep Proudfoot',1,14),(13,'Reilly Diefenbach',1,15),(14,'Morning Show Host',1,16),(15,'Morning Show Hostess',1,17),(16,'Stan Grossman',1,18),(17,'State Trooper',1,19),(18,'Victim in the Field',1,20),(19,'Victim in Car',1,21),(20,'Police Chief Marge Gunderson',1,22),(21,'Norm Gunderson',1,23),(22,'Officer Lou',1,24),(23,'Cashier',1,25),(24,'Mike Yanagita',1,26),(25,'Customer',1,27),(26,'Officer Olson',1,28),(27,'Hotel Clerk',1,29),(28,'Airport Lot Attendant',1,30),(29,'Mechanic',1,31),(30,'Escort',1,32),(31,'Man in Hallway',1,33),(32,'Night Parking Attendant',1,35),(33,'Mr. Mohra - Bartender in Driveway',1,36),(34,'Valerie',1,37),(35,'Bismarck Cop #1',1,38),(36,'Bismarck Cop #2',1,39),(37,'Bark Beetle Narrator',1,40),(38,'Soap Opera Actor',1,41),(39,'Heavyset Man In Bar',1,42),(350,'Jacob Fuller',8,335),(351,'Seth Gecko',8,43),(352,'Richard Gecko',8,336),(353,'Kate Fuller',8,337),(354,'Scott Fuller',8,338),(355,'Santanico Pandemonium',8,339),(356,'Border Guard / Chet Pussy / Carlos',8,340),(357,'Razor Charlie',8,341),(358,'Sex Machine',8,342),(359,'Frost',8,343),(360,'Texas Ranger Earl McGraw',8,344),(361,'Hostage Gloria Hill',8,345),(362,'FBI Agent Stanley Chase',8,346),(363,'Old Timer Motel Owner',8,347),(364,'Newscaster Kelly Houge',8,348),(365,'Pete Bottoms, Liquor Store Clerk',8,349),(366,'Titty Twister Guitarist & Vocalist',8,350),(367,'Titty Twister Saxophonist',8,351),(368,'Titty Twister Drummer',8,352),(369,'Blonde Hostage',8,353),(370,'Red-headed Hostage',8,354),(371,'Big Emilio',8,355),(372,'Sex Machine\'s Buddy',8,356),(373,'Danny',8,357),(374,'Manny',8,358),(375,'Bar Dancer',8,359),(376,'Bar Dancer',8,360),(377,'Bar Dancer',8,361),(378,'Bar Dancer',8,362),(379,'Bar Dancer',8,363),(380,'Bar Dancer',8,364),(381,'Bar Dancer',8,365),(382,'Bar Dancer',8,366),(383,'Bar Dancer',8,367),(384,'Bar Dancer',8,368),(385,'Bar Dancer',8,369),(386,'Bar Dancer',8,370),(387,'Monster',8,371),(388,'Monster',8,372),(389,'Monster',8,373),(390,'Monster',8,374),(391,'Monster',8,375),(392,'Monster',8,376),(393,'Monster',8,377),(394,'Man in Diner',8,378),(395,'Vampire',8,379),(396,'Bar dancer',8,380),(397,'Woman outside the Titty Twister',8,381),(398,'The Bride',9,382),(399,'O-Ren Ishii',9,383),(400,'Vernita Green',9,384),(401,'Elle Driver',9,385),(402,'Bill',9,386),(403,'Budd',9,387),(404,'Sofie Fatale',9,388),(405,'Gogo Yubari',9,389),(406,'Hattori Hanzo',9,390),(407,'Johnny Mo',9,391),(408,'Earl McGraw',9,344),(409,'Buck',9,392),(410,'Boss Tanaka',9,393),(411,'Bald Guy',9,394),(412,'Proprietor',9,395),(413,'Edgar McGraw',9,396),(414,'Charlie Brown',9,397),(415,'Trucker',9,398),(416,'Tokyo Business Man',9,399),(417,'Crazy 88 #1',9,400),(418,'Crazy 88 #2',9,401),(419,'Crazy 88 #3',9,402),(420,'Crazy 88 #4',9,403),(421,'Crazy 88 #5',9,404),(422,'Crazy 88 #6',9,405),(423,'Boss Ozawah',9,406),(424,'Boss Honda',9,407),(425,'Boss Benta',9,408),(426,'Boss Orgami',9,409),(427,'Young 88',9,410),(428,'Nikki Bell',9,411),(429,'The 5, 6, 7, 8\'s',9,412),(430,'The 5, 6, 7, 8\'s',9,413),(431,'The 5, 6, 7, 8\'s',9,414),(432,'Okinawa Airline Ticket Agent',9,415),(433,'O-Ren',9,416),(434,'Boss Matsumoto',9,417),(435,'Pretty Riki',9,418),(436,'Crazy 88 Fighter',9,419),(437,'The Groom',9,420),(438,'Tim',9,421),(86,'Sheriff Ed Tom Bell',3,89),(87,'Anton Chigurh',3,90),(88,'Llewelyn Moss',3,91),(89,'Carson Wells',3,92),(90,'Carla Jean Moss',3,93),(91,'Deputy Wendell',3,94),(92,'Loretta Bell',3,95),(93,'Ellis',3,96),(94,'Man who hires Wells',3,97),(95,'Sheriff Roscoe Giddens',3,98),(96,'Carla Jean\'s Mother',3,99),(97,'Poolside Woman',3,100),(98,'Sheriff Bell\'s Secretary',3,101),(99,'Strangled Deputy',3,102),(100,'Man in Ford',3,103),(101,'\'Agua\' Man',3,104),(102,'Gas Station Proprietor',3,105),(103,'\'Managerial\' Victim #1',3,106),(104,'\'Managerial\' Victim #2',3,107),(105,'Desert Aire Manager',3,108),(106,'Cabbie at Bus Station',3,109),(107,'Del Rio Motel Clerk',3,110),(108,'Boot Salesman',3,111),(109,'Cabbie at Motel',3,112),(110,'Waitress',3,113),(111,'Gun Store Clerk',3,114),(112,'Sporting Goods Clerk',3,115),(113,'Mexican in Bathtub',3,116),(114,'Hitchhiking Driver',3,117),(115,'Nervous Accountant',3,118),(116,'Hotel Eagle Clerk',3,119),(117,'Pickup Driver',3,120),(118,'Border Bridge Youth #1',3,121),(119,'Border Bridge Youth #2',3,122),(120,'Border Bridge Youth #3',3,123),(121,'Flatbed Driver',3,124),(122,'INS Official',3,125),(123,'Well Dressed Mexican',3,126),(124,'Chicken Farmer',3,127),(125,'Boy on Bike #1',3,128),(126,'Boy on Bike #2',3,129),(127,'Odessa Cabbie',3,130),(128,'Norteño Band',3,131),(129,'Norteño Band',3,132),(130,'Norteño Band',3,133),(131,'Norteño Band',3,134),(132,'Cab Driver',3,135),(133,'Nurse',3,136),(178,'Everett',5,43),(179,'Pete',5,149),(180,'Delmar',5,178),(181,'Big Dan Teague',5,138),(182,'Penny',5,179),(183,'Tommy Johnson',5,180),(184,'Pappy O\'Daniel',5,181),(185,'Junior O\'Daniel',5,182),(186,'George Nelson',5,183),(187,'Pappy\'s Staff',5,54),(188,'Pappy\'s Staff',5,184),(189,'Homer Stokes',5,185),(190,'The Little Man',5,186),(191,'Vernon T. Waldrip',5,187),(192,'Sheriff Cooley',5,188),(193,'Man with Bullhorn',5,189),(194,'Wash Hogwallop',5,190),(195,'Boy Hogwallop',5,191),(196,'Blind Seer',5,192),(197,'Pomade Vendor',5,193),(198,'Radio Station Man',5,97),(199,'Mr. French',5,194),(200,'Soggy Bottom Customer',5,195),(201,'Record Store Clerk',5,196),(202,'Siren',5,197),(203,'Siren',5,198),(204,'Siren',5,199),(205,'Waitress',5,200),(206,'Interrogator',5,201),(207,'Wharvey Gal',5,202),(208,'Wharvey Gal',5,203),(209,'Wharvey Gal',5,204),(210,'Wharvey Gal',5,205),(211,'Woolworths Manager',5,206),(212,'Gravedigger',5,207),(213,'Gravedigger',5,208),(214,'Gravedigger',5,209),(215,'Cox Family',5,210),(216,'Cox Family',5,211),(217,'Cox Family',5,212),(218,'Cox Family',5,213),(219,'The Whites',5,214),(220,'The Whites',5,215),(221,'The Whites',5,216),(222,'Village Idiot',5,217),(223,'Village Idiot',5,218),(224,'Dobro Player',5,219),(225,'KKK Member',5,220),(226,'Head of Mob',5,221),(227,'Ice Boy on the Right with Straw Hat',5,222),(228,'KKK Member',5,223),(229,'Rail Man',5,224),(439,'Vincent Vega',10,422),(440,'Jules Winnfield',10,423),(441,'Pumpkin - Ringo',10,424),(442,'Honey Bunny - Yolanda',10,425),(443,'Lance',10,426),(444,'Mr. White - Larry Dimmick',11,335),(445,'Mr. Orange - Freddy Newandyke',11,424),(446,'Mr. Blonde - Vic Vega',11,387),(447,'Nice Guy Eddie Cabot',11,427),(448,'Mr. Pink',11,4),(449,'Joe Cabot',11,428),(450,'Holdaway',11,429),(451,'Ofcr. Marvin Nash',11,430),(452,'Mr. Blue',11,431),(453,'Mr. Brown',11,336),(454,'K-Billy DJ',11,432),(455,'Sheriff #1',11,433),(456,'Sheriff #2',11,434),(457,'Sheriff #3',11,435),(458,'Sheriff #4',11,421),(459,'Teddy',11,436),(460,'Shot Cop',11,437),(461,'Young Cop / Radio Play Background Voice',11,378),(462,'Shocked Woman',11,438),(463,'Shot Woman',11,439),(464,'Radio Play Background Voice',11,440),(465,'Radio Play Background Voice',11,441),(466,'Radio Play Background Voice',11,442),(467,'Radio Play Background Voice',11,443),(468,'Diner Patron',11,444),(134,'Jeffrey Lebowski - The Dude',4,137),(135,'Walter Sobchak',4,138),(136,'Maude Lebowski',4,139),(137,'Theodore Donald \'Donny\' Kerabatsos',4,4),(138,'Jeffrey Lebowski - The Big Lebowski',4,140),(139,'Brandt',4,141),(140,'Bunny Lebowski',4,142),(141,'Woo, Treehorn Thug',4,143),(142,'Blond Treehorn Thug',4,144),(143,'Nihilist #1, Uli Kunkel / \'Karl Hungus\'',4,5),(144,'Nihilist #2, Kieffer',4,145),(145,'Nihilist #3, Franz',4,146),(146,'Smokey',4,147),(147,'Marty',4,148),(148,'Jesus Quintana',4,149),(149,'Liam O\'Brien, Quintana\'s Partner',4,150),(150,'Maude\'s Thug #1',4,151),(151,'Maude\'s Thug #2',4,152),(152,'Older Cop',4,153),(153,'Younger Cop',4,154),(154,'Tony the Chauffeur',4,155),(155,'Lebowski\'s Chauffeur',4,156),(156,'Knox Harrington',4,157),(157,'Coffee Shop Waitress',4,158),(158,'Auto Circus Cop',4,159),(159,'Gary the Bartender',4,160),(160,'The Stranger',4,161),(161,'Doctor',4,162),(162,'Arthur Digby Sellers',4,163),(163,'Little Larry Sellers',4,164),(164,'Pilar, Sellers\' Housekeeper',4,165),(165,'Corvette Owner',4,166),(166,'Jackie Treehorn',4,167),(167,'Malibu Police Chief',4,168),(168,'Cab Driver',4,169),(169,'Da Fino',4,170),(170,'Nihilist Woman, Franz\' Girlfriend',4,171),(171,'Saddam Hussein',4,172),(172,'Pancake Waitress',4,173),(173,'Francis Donnelly, Funeral Director',4,15),(174,'Chorine Dancer',4,174),(175,'Sherry in \'Logjammin\'',4,175),(176,'Dancer',4,176),(177,'Checker at Ralph\'s',4,177),(230,'Norville Barnes',6,225),(231,'Amy Archer',6,226),(232,'Sidney J. Mussburger',6,227),(233,'Waring Hudsucker',6,181),(234,'Chief',6,228),(235,'Buzz',6,229),(236,'Moses',6,230),(237,'Smitty',6,41),(238,'Aloysius',6,163),(239,'Benny',6,231),(240,'Lou',6,232),(241,'Board Member',6,233),(242,'Board Member',6,234),(243,'Board Member',6,235),(244,'Board Member',6,236),(245,'Board Member',6,237),(246,'Board Member',6,238),(247,'Board Member',6,239),(248,'Board Member',6,240),(249,'Dr. Hugo Bronfenbrenner',6,241),(250,'Mail Room Orienter',6,242),(251,'Ancient Sorter',6,243),(252,'Mail Room Boss',6,244),(253,'Mussburger\'s Secretary',6,245),(254,'Luigi the Tailor',6,246),(255,'Mrs. Mussburger',6,247),(256,'Mrs. Braithwaite',6,248),(257,'Sears Braithwaite of Bullard',6,249),(258,'Vic Tenetta',6,250),(259,'Zebulon Cardoza',6,251),(260,'Mrs. Cardoza',6,252),(261,'Thorstenson Finlandson',6,253),(262,'Beatnik Barman',6,4),(263,'Newsreel Scientist',6,254),(264,'Za-Za',6,255),(265,'Dream Dancer',6,256),(266,'The Hula-Hoop Kid',6,257),(267,'Hudsucker Brainstormer',6,258),(268,'Hudsucker Brainstormer',6,259),(269,'Mr. Grier',6,260),(270,'Mr. Levin',6,261),(271,'Mr. Bumstead',6,170),(272,'Ancient Puzzler',6,262),(273,'Coffee Shop Waitress',6,263),(274,'Emcee',6,264),(275,'Newsreel Announcer',6,138),(276,'Newsreel Secretary',6,265),(277,'Norville\'s Goon',6,266),(278,'Newsboy',6,267),(279,'Drunk in Alley',6,268),(280,'Mailroom Screamer',6,269),(281,'Mailroom Screamer',6,270),(282,'Mailroom Screamer',6,271),(283,'Mailroom Screamer',6,272),(284,'Mailroom Screamer',6,273),(285,'Mailroom Screamer',6,274),(286,'Mailroom Screamer',6,275),(287,'Mailroom Screamer',6,276),(288,'Mailroom Screamer',6,277),(289,'Newsroom Reporter',6,278),(290,'Newsroom Reporter',6,279),(291,'Newsroom Reporter',6,280),(292,'Newsroom Reporter',6,281),(293,'Newsroom Reporter',6,282),(294,'Newsroom Reporter',6,283),(295,'Newsreel Reporter',6,284),(296,'Newsreel Reporter',6,285),(297,'Newsreel Reporter',6,286),(298,'Newsreel Reporter',6,287),(299,'Newsreel Reporter',6,288),(300,'Newsreel Reporter',6,289),(301,'Newsreel Reporter',6,160),(302,'Newsreel Reporter',6,290),(303,'Newsreel Reporter',6,291),(304,'Newsreel Reporter',6,292),(305,'New Year\'s Mob',6,293),(306,'New Year\'s Mob',6,294),(307,'New Year\'s Mob',6,295),(308,'New Year\'s Mob',6,296),(309,'Security Guard',6,297),(310,'Man at Merchandise Mart',6,298),(311,'Businessman',6,299),(312,'Professor G.H. Dorr',7,300),(313,'Marva Munson',7,301),(314,'Gawain MacSam',7,302),(315,'Garth Pancake',7,50),(316,'The General',7,303),(317,'Lump Hudson',7,304),(318,'Mountain Girl',7,305),(319,'Sheriff Wyner',7,306),(320,'Deputy Sheriff',7,206),(321,'Weemack Funthes',7,307),(322,'Fernand Gudge',7,97),(323,'Rosalie Funthes',7,308),(324,'Elron',7,309),(325,'Preacher',7,310),(326,'TV Commercial Director',7,311),(327,'Craft Service',7,312),(328,'Quarterback',7,313),(329,'Football Coach',7,314),(330,'Doughnut Gangster',7,315),(331,'Doughnut Gangster',7,316),(332,'Doughnut Woman',7,317),(333,'Gawain\'s Mama',7,318),(334,'Li\'l Gawain',7,319),(335,'Gawain\'s Sister',7,320),(336,'Gawain\'s Brother',7,321),(337,'Waffle Hut Waitress',7,322),(338,'Tea Lady',7,323),(339,'Tea Lady',7,324),(340,'Tea Lady',7,325),(341,'Tea Lady',7,326),(342,'Tea Lady',7,327),(343,'Church Voice',7,328),(344,'Church Voice',7,329),(345,'Church Voice',7,330),(346,'Church Voice',7,331),(347,'Othar',7,332),(348,'Humane Society Worker',7,41),(349,'Angry Football Fan',7,333);
/*!40000 ALTER TABLE `movie_cast` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `movie_director`
--

DROP TABLE IF EXISTS `movie_director`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `movie_director` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `movie_id` int(11) NOT NULL,
  `director_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `movie_director_movie_id` (`movie_id`),
  KEY `movie_director_director_id` (`director_id`)
) ENGINE=MyISAM AUTO_INCREMENT=19 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `movie_director`
--

LOCK TABLES `movie_director` WRITE;
/*!40000 ALTER TABLE `movie_director` DISABLE KEYS */;
INSERT INTO `movie_director` VALUES (3,2,2),(4,2,1),(1,1,1),(2,1,2),(5,3,2),(6,3,1),(9,5,1),(10,5,2),(7,4,1),(8,4,2),(11,6,1),(12,6,2),(13,7,2),(14,7,1),(15,8,334),(16,9,336),(17,10,336),(18,11,336);
/*!40000 ALTER TABLE `movie_director` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `movie_feed`
--

DROP TABLE IF EXISTS `movie_feed`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `movie_feed` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(100) NOT NULL,
  `url` varchar(200) NOT NULL,
  `field` varchar(30) NOT NULL,
  `regexp` varchar(100) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=6 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `movie_feed`
--

LOCK TABLES `movie_feed` WRITE;
/*!40000 ALTER TABLE `movie_feed` DISABLE KEYS */;
INSERT INTO `movie_feed` VALUES (1,'Rotten Tomatoes: Top Movies','http://i.rottentomatoes.com/syndication/rss/top_movies.xml','title','\\d+% (.*)'),(2,'Rotten Tomatoes: New DVD Releases','http://i.rottentomatoes.com/syndication/rss/new_releases.xml','title','\\d+% (.*)'),(3,'cinema.de - Neu auf DVD','http://www.cinema.de/dvd/neuerscheinungen/rss.xml','title','(.*)'),(4,'cinema.de - Kino-Neustarts','http://www.cinema.de/kino/neu-im-kino/rss.xml','title','(.*)'),(5,'KINO.DE - Neustarts','http://www.kino.de/rss.php?typ=kinostarts','title','(.*)');
/*!40000 ALTER TABLE `movie_feed` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `movie_movie`
--

DROP TABLE IF EXISTS `movie_movie`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `movie_movie` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `visible` smallint(6) NOT NULL,
  `created` datetime NOT NULL,
  `edited` datetime NOT NULL,
  `title` varchar(200) NOT NULL,
  `slug` varchar(50) NOT NULL,
  `plot` longtext NOT NULL,
  `plot_author` varchar(100) NOT NULL,
  `year` int(11) NOT NULL,
  `runtime` int(11) NOT NULL,
  `rating` double NOT NULL,
  `genres` varchar(255) NOT NULL,
  `imdb_id` varchar(10) NOT NULL,
  `image` varchar(100) NOT NULL,
  `height` int(11) DEFAULT NULL,
  `width` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `slug` (`slug`)
) ENGINE=MyISAM AUTO_INCREMENT=12 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `movie_movie`
--

LOCK TABLES `movie_movie` WRITE;
/*!40000 ALTER TABLE `movie_movie` DISABLE KEYS */;
INSERT INTO `movie_movie` VALUES (2,1,'2009-03-10 20:55:53','2009-03-10 20:55:53','Burn After Reading','burn-after-reading-2008','Osbourne Cox, a Balkan expert, is fired at the CIA, so he begins a memoir. His wife wants a divorce and expects her lover, Harry, a philandering State Department marshal, to leave his wife. A diskette of Osbourne\'s musings falls out of a gym bag at a Georgetown fitness center. Two employees there try to turn it into cash: Linda, who wants money for elective surgery, and Chad, an amiable goof. They try to sell the disc back to Osbourne, who has a short fuse, then they visit the Russian embassy. To sweeten the pot, they decide they need more of Osbourne\'s secrets. Meanwhile, Linda\'s boss likes her, and Harry\'s wife leaves for a book tour. All roads lead to Osbourne\'s house.','<jhailey@hotmail.com>',2008,96,7.4,'Comedy, Crime','0887883','images/movies/burn-after-reading-2008.jpg',140,98),(1,1,'2009-03-10 20:45:22','2009-03-10 20:45:22','Fargo','fargo-1996','Jerry works in his father-in-law\'s car dealership and has gotten himself in financial problems. He tries various schemes to come up with money needed for a reason that is never really explained. It has to be assumed that his huge embezzlement of money from the dealership is about to be discovered by father-in-law. When all else falls through, plans he set in motion earlier for two men to kidnap his wife for ransom to be paid by her wealthy father (who doesn\'t seem to have the time of day for son-in-law). From the moment of the kidnapping, things go wrong and what was supposed to be a non-violent affair turns bloody with more blood added by the minute. Jerry is upset at the blood shed, which turns loose a pregnant sheriff from Brainered, MN who is tenacious in attempting to solve the three murders in her jurisdiction.','Anonymous',1996,98,8.3,'Crime, Thriller','0116282','images/movies/fargo-1996.jpg',131,100),(8,1,'2009-03-10 21:15:15','2009-03-10 21:15:15','From Dusk Till Dawn','from-dusk-till-dawn-1996','Seth Gecko and his younger brother Richard are on the lam after a bloody bank robbery in Texas. They escape across the border into Mexico and will be home-free the next morning, when they pay off the local kingpin. They just have to survive \'from dusk till dawn\' at the rendezvous point, which turns out to be a Hell of a strip joint.','Tad Dibbern <DIBBERN_D@a1.mscf.upenn.edu>',1996,108,7,'Action, Horror, Thriller','0116367','images/movies/from-dusk-till-dawn-1996.jpg',139,98),(9,1,'2009-03-10 21:18:05','2009-03-10 21:18:05','Kill Bill: Vol. 1','kill-bill-vol-1-2003','The lead character, called \'The Bride,\' was a member of the Deadly Viper Assassination Squad, lead by her lover \'Bill.\' Upon realizing she was pregnant with Bill\'s child, \'The Bride\' decided to escape her life as a killer. She fled to Texas, met a young man, and on the day of their wedding was gunned down by an angry and jealous Bill (with the assistance of the Deadly Viper Assassination Squad). Four years later, \'The Bride\' wakes from a coma, and discovers her baby is gone. She, then, decides to seek revenge upon the five people who destroyed her life and killed her baby. The saga of Kill Bill Volume I begins.','JD',2003,111,8.2,'Action, Thriller','0266697','images/movies/kill-bill-vol-1-2003.jpg',140,89),(3,1,'2009-03-10 20:58:31','2009-03-10 20:58:31','No Country for Old Men','no-country-for-old-men-2007','In rural Texas, welder and hunter Llewelyn Moss discovers the remains of several drug runners who have all killed each other in an exchange gone violently wrong. Rather than report the discovery to the police, Moss decides to simply take the two million dollars present for himself. This puts the psychopathic killer, Anton Chigurh, on his trail as he dispassionately murders nearly every rival, bystander and even employer in his pursuit of his quarry and the money. As Moss desperately attempts to keep one step ahead, the blood from this hunt begins to flow behind him with relentlessly growing intensity as Chigurh closes in. Meanwhile, the laconic Sherrif Ed Tom Bell blithely oversees the investigation even as he struggles to face the sheer enormity of the crimes he is attempting to thwart.','Kenneth Chisholm <kchishol@rogers.com>',2007,122,8.3,'Crime, Drama, Thriller, Western','0477348','images/movies/no-country-for-old-men-2007.jpg',140,98),(5,1,'2009-03-10 21:03:47','2009-03-10 21:03:47','O Brother, Where Art Thou?','o-brother-where-art-thou-2000','Loosely based on Homer\'s \'Odyssey\' the movie deals with the grotesque adventures of Everett Ulysses McGill and his companions Delmar and Pete in 1930s Mississipi. Sprung from a chain gang and trying to reach Everetts home to recover the buried loot of a bank heist they are confronted by a series of strange characters. Among them sirens, a cyclops, bankrobber George \'Babyface\' Nelson (very annoyed by that nickname), a campaigning Governor, his opponent, a KKK lynch mob, and a blind prophet, who warns the trio that \"the treasure you seek shall not be the treasure you find.\"','Armin Ortmann <armin@sfb288.math.tu-berlin.de>',2000,107,7.8,'Comedy, Adventure, Crime, Music','0190590','images/movies/o-brother-where-art-thou-2000.jpg',140,99),(10,1,'2009-03-10 21:20:12','2009-03-10 21:20:12','Pulp Fiction','pulp-fiction-1994','Jules Winnfield and Vincent Vega are two hitmen who are out to retrieve a suitcase stolen from their employer, mob boss Marsellus Wallace. Wallace has also asked Vincent to take his wife Mia out a few days later when Wallace himself will be out of town. Butch Coolidge is an aging boxer who is paid by Wallace to lose his next fight. The lives of these seemingly unrelated people are woven together comprising of a series of funny, bizarre and uncalled-for incidents.','Soumitra',1994,154,8.9,'Crime, Drama','0110912','images/movies/pulp-fiction-1994.jpg',140,98),(11,1,'2009-03-10 21:23:49','2009-03-10 21:23:49','Reservoir Dogs','reservoir-dogs-1992','Six criminals, who are strangers to each other, are hired by a crime boss Joe Cabot to carry out a diamond robbery. Right at the outset, they are given false names with an intention that they won\'t get too close and concentrate on the job instead. They are completely sure that the robbery is going to be a success. But when the police show up right at the time and the site of the robbery, panic spreads amongst the group members and one of them is killed in the subsequent shootout along with a few policemen and civilians. When the remaining people assemble at the premeditated rendezvous point (a warehouse), they begin to suspect that one of them is an undercover cop.','Soumitra',1992,99,8.4,'Crime, Drama, Thriller','0105236','images/movies/reservoir-dogs-1992.jpg',140,91),(4,1,'2009-03-10 21:01:11','2009-03-10 21:01:11','The Big Lebowski','the-big-lebowski-1998','When \"The Dude\" Lebowski is mistaken for a millionaire Lebowski, two thugs urinate on his rug to coerce him into paying a debt he knows nothing about. While attempting to gain recompense for the ruined rug from his wealthy counterpart, he accepts a one-time job with high pay-off. He enlists the help of his bowling buddy, Walter, a gun-toting Jewish-convert with anger issues. Deception leads to more trouble, and it soon seems that everyone from porn empire tycoons to nihilists want something from The Dude.','J. Lake',1998,117,8.2,'Comedy, Crime','0118715','images/movies/the-big-lebowski-1998.jpg',139,98),(6,1,'2009-03-10 21:06:30','2009-03-10 21:06:30','The Hudsucker Proxy','the-hudsucker-proxy-1994','When Waring Hudsucker, head of hugely successful Hudsucker Industries, commits suicide, his board of directors, led by Sidney Mussberger, comes up with a brilliant plan to make a lot of money: appoint a moron to run the company. When the stock falls low enough, Sidney and friends can buy it up for pennies on the dollar, take over the company, and restore its fortunes. They choose idealistic Norville Barnes, who just started in the mail room. Norville is whacky enough to drive any company to ruin, but soon, tough reporter Amy Archer smells a rat and begins an undercover investigation of Hudsucker Industries.','Reid Gagle',1994,111,7.4,'Comedy, Drama, Fantasy, Romance','0110074','images/movies/the-hudsucker-proxy-1994.jpg',140,96),(7,1,'2009-03-10 21:10:55','2009-03-10 21:10:55','The Ladykillers','the-ladykillers-2004','A remake of the 1955 comedy, the story revolves around a Southern professor who puts together a group of thieves to rob a casino. They rent a room in an old woman\'s house, but soon she discovers the plot and they must kill her, a task that is more difficult than it seems.','lcheala@imdb.com',2004,104,6.2,'Comedy, Crime, Thriller','0335245','images/movies/the-ladykillers-2004.jpg',140,98);
/*!40000 ALTER TABLE `movie_movie` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `movie_person`
--

DROP TABLE IF EXISTS `movie_person`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `movie_person` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `visible` smallint(6) NOT NULL,
  `created` datetime NOT NULL,
  `edited` datetime NOT NULL,
  `forename` varchar(100) NOT NULL,
  `surname` varchar(100) NOT NULL,
  `slug` varchar(50) NOT NULL,
  `birthdate` varchar(100) NOT NULL,
  `birthplace` varchar(200) NOT NULL,
  `biography` longtext NOT NULL,
  `is_director` tinyint(1) NOT NULL,
  `imdb_id` varchar(10) NOT NULL,
  `image` varchar(100) NOT NULL,
  `height` int(11) DEFAULT NULL,
  `width` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `slug` (`slug`)
) ENGINE=MyISAM AUTO_INCREMENT=445 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `movie_person`
--

LOCK TABLES `movie_person` WRITE;
/*!40000 ALTER TABLE `movie_person` DISABLE KEYS */;
INSERT INTO `movie_person` VALUES (328,1,'2009-03-10 21:12:38','2009-03-10 21:12:38','Louisa','Abernathy','louisa-abernathy','15 June 1949','Los Angeles, California, USA','',0,'0008657','',NULL,NULL),(264,1,'2009-03-10 21:09:06','2009-03-10 21:09:06','Stan','Adams','stan-adams','4 November 1944','Chicago, Illinois, USA','',0,'0011365','images/persons/stan-adams.jpg',125,100),(116,1,'2009-03-10 21:00:07','2009-03-10 21:00:07','George','Adelo','george-adelo','','','',0,'2655201','images/persons/george-adelo.jpg',50,100),(272,1,'2009-03-10 21:09:32','2009-03-10 21:09:32','Todd','Alcott','todd-alcott','22 October 1961','Crystal Lake, Illinois, USA','\'Todd Alcott\' (qv) is an American screenwriter, playwright, novelist and occasional performer born October 22, 1961 in Crystal Lake, Illinois. His father, Royal Gilbert Alcott, made commercials for a living and his mother, Ann Hirtman, was a 3rd grade teacher. A prolific writer for stage and screen, Alcott\'s film credits include Antz, Curtain Call, Just Your Luck, and many others. He recently wrote and co-directed 2008\'s The Bentfootes, starring Nina Hellman and James Urbaniak. Alcott also authors a popular blog focused on analyzing film and television writing, \"What Does The Protagonist Want?\". He was married to Sara Gaffney in New York City in June of 1998, and lives in Santa Monica, California.',0,'0017305','',NULL,NULL),(236,1,'2009-03-10 21:07:40','2009-03-10 21:07:40','Gary','Allen','gary-allen','','','',0,'0020530','',NULL,NULL),(77,1,'2009-03-10 20:57:53','2009-03-10 20:57:53','Stephen','Ananicz','stephen-ananicz','12 August 1986','Bradenton, Florida, USA','\'Stephen Ananicz\' (qv) was born on August 12th, 1986 in Bradenton, Florida. Has two brothers: Michael (15) and Nicholas (6). Born to Steve and Marianne Ananicz. Steve, the C.O.O. of a private chain of restaurants, and Marianne, an independent hair dresser, resides in Bradenton, Florida. Stephen graduated from Manatee High School in 2004, where he took his first acting course. From there he continued to pursue his passion for the craft while attending Manatee Community College. After winning a talent competition in Orlando, Florida, Stephen studied acting in NYC under Bob Luke and other coaches. In 2005, Stephen made his big screen debut in Pirates of the Caribbean: Dead Man\'s Chest. Shortly followed by the third installment, POTC: At World\'s End. Later that year, Stephen appeared in television\'s Burn Notice, as well as other independent projects in development. Stephen is a student at the University of Florida.',0,'2282744','images/persons/stephen-ananicz.jpg',66,99),(20,1,'2009-03-10 20:46:28','2009-03-10 20:46:28','J. Todd','Anderson','j-todd-anderson','','','',0,'0026824','',NULL,NULL),(17,1,'2009-03-10 20:46:19','2009-03-10 20:46:19','Sharon','Anderson','sharon-anderson','','Minneapolis, Minnesota, USA','',0,'0027437','',NULL,NULL),(189,1,'2009-03-10 21:04:48','2009-03-10 21:04:48','Royce D.','Applegate','royce-d-applegate','25 December 1939','Midwest City, Oklahoma, USA','',0,'0032403','',NULL,NULL),(62,1,'2009-03-10 20:57:09','2009-03-10 20:57:09','Raul','Aranas','raul-aranas','1 October 1947','Manila, Philippines','',0,'0032965','',NULL,NULL),(351,1,'2009-03-10 21:16:36','2009-03-10 21:16:36','Peter','Atanasoff','peter-atanasoff','','','',0,'0040268','',NULL,NULL),(183,1,'2009-03-10 21:04:28','2009-03-10 21:04:28','Michael','Badalucco','michael-badalucco','20 December 1954','Brooklyn, New York, USA','Michael is the son of Joe Badalucco, a movie set carpenter, and Jean, a homemaker. Known for being shy, he nonetheless found he could have a release by acting in school productions. He attended the State University of New York at New Paltz. For two decades he worked as a prop master on New York-based movies. He caught the occasional minor acting role along the way. He was noticed on the set of \'Michelle Pfeiffer\' (qv)\'s _One Fine Day (1996)_ (qv) movie set. She touted him to her husband, \'David E. Kelley\' (qv) for _\"The Practice\" (1997)_ (qv) television series he was putting together. Initially, Michael was just being considered for one episode as a flasher, but his permanent role as \"Jimmy\" quickly materialized.',0,'0045937','images/persons/michael-badalucco.jpg',135,100),(327,1,'2009-03-10 21:12:36','2009-03-10 21:12:36','Jessie','Bailey','jessie-bailey','','','',0,'1565007','',NULL,NULL),(296,1,'2009-03-10 21:10:37','2009-03-10 21:10:37','Cynthia','Baker','cynthia-baker','','','Cynthia was born Cynthia S Baker in Amarillo, Texas on 20 August 1947. She started her acting career at Northern Illinois University in Dekalb, Illinois, in 1965. Through her extremely talented work, Cynthia was eventually signed with Shirley Hamilton Talent in Chicago. One of Chicago\'s oldest and most prestigious talent agencies. With a fresh start, Cynthia starred in many of Chicago\'s well known plays of the 1970s. Cynthia also became an \"ace in the hole\" for world famous playwright Tennessee Williams. She starred in many of his productions until his untimely passing. Cynthia would later go on to work with Robert Redford, Tom Cruise, Roger Moore, Harrison Ford, Tommy Lee Jones, Tom Wilkerson, Bill Peterson and many more. Cynthia has also worked with Greg Mosher, Bryan Forbes, and the Cohen Brothers.',0,'0048351','',NULL,NULL),(313,1,'2009-03-10 21:12:00','2009-03-10 21:12:00','Robert','Baker','robert-baker','15 October 1979','Memphis, Tennessee, USA','',0,'1151899','images/persons/robert-baker.jpg',140,94),(430,1,'2009-03-10 21:24:28','2009-03-10 21:24:28','Kirk','Baltz','kirk-baltz','14 September 1959','New York City, New York, USA','A working actor since the late 1980s, \'Kirk Baltz\' (qv) is perhaps most famous for playing the part of Marvin Nash, the tortured police officer in \'Quentin Tarantino\' (qv)\'s _Reservoir Dogs (1992)_ (qv). To prepare for the role, Baltz asked co-star \'Michael Madsen\' (qv) to drive him around in the trunk of Madsen\'s car. Baltz has also appeared in films like _Dances with Wolves (1990)_ (qv), _Natural Born Killers (1994)_ (qv), _Face/Off (1997)_ (qv), and _Bulworth (1998)_ (qv). He has also been a familiar face on television, with roles on TV shows like _\"NYPD Blue\" (1993)_ (qv) and _\"24\" (2001)_ (qv).',0,'0051257','images/persons/kirk-baltz.jpg',136,100),(39,1,'2009-03-10 20:47:22','2009-03-10 20:47:22','John','Bandemer','john-bandemer','','','',0,'0051703','',NULL,NULL),(57,1,'2009-03-10 20:56:53','2009-03-10 20:56:53','Pun','Bandhu','pun-bandhu','','','',0,'1567085','',NULL,NULL),(90,1,'2009-03-10 20:58:45','2009-03-10 20:58:45','Javier','Bardem','javier-bardem','1 March 1969','Las Palmas de Gran Canaria, Gran Canaria, Canary Islands, Spain','\'Javier Bardem\' (qv) is the youngest member of a family of actors that has been making films since the early days of Spanish cinema.He got his start in the family business at age six when he appeared in his first feature, \"El Pícaro\" (The Scoundrel). During his teenage years he acted in several TV series, played rugby for theSpanish National Team, and toured the country with an independent theatrical group. Javier\'s early film role as a sexy stud in the black comedy_Jamón, jamón (1992)_ (Ham Ham) propelled him to instant popularity and threatened to typecast him as nothing morethan a brawny sex symbol. Determined to avert a beefcake image, he refused similar subsequent roles and has gone on to win acclaim for his ability to appear almost unrecognizable from film to film. With over 25 movies and numerous awards under his belt, it is Javier\'s stirring, passionate performance as the persecuted Cuban writer Reinaldo Arenas in _Before Night Falls (2000)_ (qv) that will longbe remembered as his breakthrough role. He received five Best Actor awards and a Best Actor Oscar nomination for his portrayal of a strong-willed man who survived censorship, imprisonment, and homosexual intolerance for the privilege to write freely, only to commit suicide at age 47 in New York, ending a battle with AIDS.',0,'0000849','images/persons/javier-bardem.jpg',129,100),(310,1,'2009-03-10 21:11:52','2009-03-10 21:11:52','George Anthony','Bell','george-anthony-bell','','','\'George Anthony Bell\' (qv) has been working as a professional actor for over 25 years. Currently Mr. Bell can be seen on the Emmy nominated new hit Disney series _\"Even Stevens\" (2000)_ (qv), playing the role of Principal Wexler. On the big screen and in television you may recognize him in _House Party 2 (1991)_ (qv), The Even Stevens Movie (for Disney), Deadly Delusions, Ally McBeal, Becker, E.R., City Of Angels, The Practice, The Parkers, Maybe It\'s Me (recurring role), Disney\'s _Polly (1989) (TV)_ (qv), and _Polly: Comin\' Home! (1990) (TV)_ (qv) and Sister, Sister. Also, Mr. Bell has numerous commercials running throughout the country (Western Union, Lexus, Alka-Seltzer, Robitussin, Velveeta, Minute Maid, Pennzoil, and the U.S. Postal Service). He made his Broadway debut as the Evil Wazir opposite Eartha Kitt in Geoffrey Holder\'s musical extravaganza, Timbuktu! He has also appeared on Broadway and in Los Angeles with the original company of Ain\'t Misbehavin. George opened the Los Angeles run of \'Cats\' at the Shubert Theatre starring as Old Deuteronomy in Andrew Lloyd Webber\'s mega hit, which ran for two years. A graduate of the Los Angles Music Center\'s Musical Theatre Workshop, Mr. Bell has toured the U.S. in the National companies of The Wiz (as the Lion), Porgy And Bess (as Jake), and Raisin (Asagai). Regionally, Mr. Bell appeared in Roar Of The Greasepaint, Guys And Dolls (as Nicely, Nicely), My One And Only (as Rev. J.D. Montgomery), The Boys Next Door (as Lucien), and The Boys Of Summer (as Roy Campanella), where he received a Los Angeles Drama-Logue Award. His career has taken him throughout Europe, where he has sung as a featured soloist in some of Europe\'s major cathedrals and concert halls. Mr. Bell hosted and narrated a series of young people\'s concerts with the Los Angeles Philharmonic Orchestra, at the Los Angeles Music Center; introducing young people to some of classical music\'s most famous works, with Esa-Pekka Salonen conducting. Also a noted night club entertainer, Mr. Bell has performed his club act across the country. He has sung as featured soloist in special concerts for Michael Eisner and the Disney Organization and, George\'s acting and singing voice can be heard on the Nickelodeon animated cartoon Blotto. Aside from acting and singing, Mr. Bell was the acting and dialogue coach for Steven Spielberg\'s film Hook, Hallmark\'s Gulliver\'s Travels and the WB series Sister, Sister. He has just finished filming the newest Coen Brothers movie (Lady Killers) starring Tom Hanks in Mississippi. It is scheduled for release in the spring of 2004. He plays the \"Preacher\". George has a recurring role on the critically acclaimed WB series The Gilmore Girls as a professor at Yale University.',0,'0068218','images/persons/george-anthony-bell.jpg',80,100),(378,1,'2009-03-10 21:17:47','2009-03-10 21:24:59','Lawrence','Bender','lawrence-bender','17 October 1957','The Bronx, New York City, New York, USA','',0,'0004744','images/persons/lawrence-bender.jpg',134,100),(320,1,'2009-03-10 21:12:19','2009-03-10 21:12:19','Te Te','Benn','te-te-benn','','','',0,'1565012','',NULL,NULL),(121,1,'2009-03-10 21:00:22','2009-03-10 21:00:22','Philip','Bentham','philip-bentham','','','',0,'2363980','images/persons/philip-bentham.jpg',125,100),(359,1,'2009-03-10 21:17:01','2009-03-10 21:17:01','Michelle','Berube','michelle-berube','','','',0,'0078480','',NULL,NULL),(360,1,'2009-03-10 21:17:03','2009-03-10 21:17:03','Neena','Bidasha','neena-bidasha','25 March 1972','California, USA','',0,'0081115','',NULL,NULL),(361,1,'2009-03-10 21:17:05','2009-03-10 21:17:05','Veena','Bidasha','veena-bidasha','25 March 1972','California, USA','',0,'0081116','',NULL,NULL),(128,1,'2009-03-10 21:00:42','2009-03-10 21:00:42','Josh','Blaylock','josh-blaylock','29 March 1990','Plano, Texas, USA','',0,'1988382','',NULL,NULL),(78,1,'2009-03-10 20:57:56','2009-03-10 20:57:56','James Thomas','Bligh','james-thomas-bligh','','Brooklyn, New York, USA','',0,'1082834','images/persons/james-thomas-bligh.jpg',140,93),(70,1,'2009-03-10 20:57:31','2009-03-10 20:57:31','Crystal','Bock','crystal-bock','','','',0,'0090640','',NULL,NULL),(25,1,'2009-03-10 20:46:44','2009-03-10 20:46:44','Petra','Boden','petra-boden','','','',0,'0090876','',NULL,NULL),(36,1,'2009-03-10 20:47:14','2009-03-10 20:47:14','Bain','Boehlke','bain-boehlke','','','',0,'0091191','',NULL,NULL),(24,1,'2009-03-10 20:46:41','2009-03-10 20:46:41','Bruce','Bohne','bruce-bohne','','','',0,'0092118','',NULL,NULL),(71,1,'2009-03-10 20:57:34','2009-03-10 20:57:34','Patrick','Boll','patrick-boll','4 April 1964','Manchester, Connecticut, USA','',0,'0093047','',NULL,NULL),(392,1,'2009-03-10 21:18:53','2009-03-10 21:18:53','Michael','Bowen','michael-bowen','21 June 1953','Texas, USA','',0,'0100889','images/persons/michael-bowen.jpg',123,100),(79,1,'2009-03-10 20:57:58','2009-03-10 20:57:58','Bob','Bowersox','bob-bowersox','','','',0,'0101119','images/persons/bob-bowersox.jpg',66,100),(110,1,'2009-03-10 20:59:47','2009-03-10 20:59:47','Margaret','Bowman','margaret-bowman','','','',0,'0101358','',NULL,NULL),(98,1,'2009-03-10 20:59:13','2009-03-10 20:59:13','Rodger','Boyce','rodger-boyce','','','',0,'0003923','images/persons/rodger-boyce.jpg',134,99),(18,1,'2009-03-10 20:46:22','2009-03-10 20:46:22','Larry','Brandenburg','larry-brandenburg','3 May 1948','Wabasha, Minnesota, USA','',0,'0104594','images/persons/larry-brandenburg.jpg',112,100),(174,1,'2009-03-10 21:03:28','2009-03-10 21:03:28','Wendy','Braun','wendy-braun','5 April 1970','Northbrook, Illinois, USA','\'Wendy Braun\' (qv) is a theater-trained Chicago native. Her mother, \'Beverly Marston-Braun\' (qv), was known as \"Miss Beverly\", the host of _\"Romper Room\" (1953)_ (qv), a popular children\'s TV show, and her father was a Navy pilot. Wendy began acting at age 12, as the Scarecrow in \"The Wiz\", and continued performing in musicals and plays at Glenbrook South High School, as well as at Indiana University, where she graduated early to pursue acting. A trained professional dancer, Wendy spent a summer performing in Monte Carlo with such artists as \'Stevie Wonder\' (qv), \'Barry White\' (qv) and \'Natalie Cole\' (qv). There she won over one of her biggest fans, \'Prince Albert of Monaco\' (qv), who later escorted her to her film premiere at the Cannes Film Festival. Wendy soon starred in several award-winning film festival hits. \'Ivan Reitman\' (qv) spotted her in two films at Sundance and cast her in DreamWorks\' _Evolution (2001)_ (qv) alongside \'David Duchovny\' (qv) and \'Julianne Moore\' (qv). Her comedic timing and improvisation skills prompted ad executives to create a 26-spot Mervyn\'s campaign for her. A standout in these spots, Wendy quickly won more roles in film and television. She has been recently seen guest-starring on _\"Lost\" (2004)_ (qv), _\"All of Us\" (2003)_ (qv), _\"Navy NCIS: Naval Criminal Investigative Service\" (2003)_ (qv), and acting alongside \'Martin Lawrence\' (qv) in _Big Momma\'s House 2 (2006)_ (qv). Wendy is now recurring as \"Ms. Sneed\" on _\"General Hospital\" (1963)_ (qv) and plays \'Vincent Spano\' (qv)\'s FBI partner in the mini-series _Pandemic (2007) (TV)_ (qv). Wendy is also a fitness enthusiast and triathlete. She recently completed the Malibu Triathlon, where she won medals two years in a row in the Female Celebrity Division, and helped to raise money for the \'Elizabeth Glaser\' (qv) Pediatric Aids Foundation.',0,'0105876','images/persons/wendy-braun.jpg',133,100),(203,1,'2009-03-10 21:05:27','2009-03-10 21:05:27','Marianna','Breland','marianna-breland','','','',0,'0107037','',NULL,NULL),(269,1,'2009-03-10 21:09:24','2009-03-10 21:09:24','Jesse','Brewer','jesse-brewer','','','',0,'0108175','',NULL,NULL),(257,1,'2009-03-10 21:08:43','2009-03-10 21:08:43','Arthur','Bridgers','arthur-bridgers','17 November 1984','Wilmington, North Carolina, USA','',0,'0108698','',NULL,NULL),(137,1,'2009-03-10 21:01:23','2009-03-10 21:01:23','Jeff','Bridges','jeff-bridges','4 December 1949','Los Angeles, California, USA','The son of well-known film and TV star \'Lloyd Bridges\' (qv) and his long-time wife \'Dorothy Dean Bridges\' (qv), Jeff was born on December 4, 1949 in Los Angeles, California, and grew up amid the happening Hollywood scene with big brother \'Beau Bridges\' (qv). Both boys popped up unbilled alongside their mother in the film _The Company She Keeps (1951)_ (qv), and appeared on occasion with their famous dad on his popular underwater TV series _\"Sea Hunt\" (1958)_ (qv) while growing up. At age 14, Jeff toured with his father in a stage production of \"Anniversary Waltz\". The \"troublesome teen\" years proved just that for Jeff and his parents were compelled at one point to intervene when problems with drugs and marijuana got out of hand. He recovered and began shaping his nascent young adult career appearing on TV as a younger version of his father in the acclaimed TV-movie _Silent Night, Lonely Night (1969) (TV)_ (qv), and in the strange \'Burgess Meredith\' (qv) film _The Yin and the Yang of Mr. Go (1970)_ (qv). Following fine notices for his portrayal of a white student caught up in the racially-themed _Halls of Anger (1970)_ (qv), his career-maker arrived just a year later when he earned a coming-of-age role in the critically-acclaimed ensemble film _The Last Picture Show (1971)_ (qv). The \'Peter Bogdanovich\' (qv)- helmed film made stars out off its young leads (Bridges, \'Timothy Bottoms\' (qv), \'Cybill Shepherd\' (qv)) and Oscar winners out of its older cast (\'Ben Johnson\' (qv), \'Cloris Leachman\' (qv)). The role, for which Jeff received an Oscar-nomination (for \"best supporting actor\") set the tone for the types of roles Jeff would acquaint himself with his fans -- rambling, reckless, rascally and usually unpredictable). Owning a casual carefree handsomeness and armed with a perpetual grin and sly charm, he started immediately on an intriguing 70s sojourn into offbeat filming. Chief among them were his boxer on his way up opposite a declining \'Stacy Keach\' (qv) in _Fat City (1972)_ (qv); his Civil War-era conman in the western _Bad Company (1972)_ (qv); his redneck stock car racer in _The Last American Hero (1973)_ (qv); his young student anarchist opposite a stellar veteran cast in Eugene O\'Neill\'s _The Iceman Cometh (1973)_ (qv); his bank-robbing (also Oscar-nominated) sidekick to \'Clint Eastwood\' (qv) in _Thunderbolt and Lightfoot (1974)_ (qv); his aimless cattle rustler in _Rancho Deluxe (1975)_ (qv); his low-level western writer who wants to be a real-life cowboy in _Hearts of the West (1975)_ (qv); and his brother of an assassinated President who pursues leads to the crime in _Winter Kills (1979)_ (qv). All are simply marvelous characters that should have propelled him to the very top rungs of stardom...but strangely didn\'t. Perhaps it was his trademark ease and naturalistic approach that made him somewhat under appreciated at that time when Hollywood was run by a \'Dustin Hoffman\' (qv), \'Robert De Niro\' (qv) and \'Al Pacino\' (qv)-like intensity. Neverthless, Jeff continued to be a scene-stealing favorite into the next decade, notably as the video game programmer in the 1982 sci-fi cult classic _TRON (1982)_ (qv), and the struggling musician brother vying with brother \'Beau Bridges\' (qv) over the attentions of sexy singer \'Michelle Pfeiffer\' (qv) in _The Fabulous Baker Boys (1989)_ (qv). Jeff became a third-time Oscar nominee with his highly intriguing (and strangely sexy) portrayal of a blank-faced alien in _\"Starman\" (1986)_ (qv), and earned high regard as the ever-optimistic inventor Preston Tucker in _Tucker: The Man and His Dream (1988)_ (qv). Since then Jeff has continued to pour on the Bridges magic on film. Few enjoy such an enduring popularity while maintaining equal respect with the critics. _The Fisher King (1991)_ (qv), _American Heart (1992)_ (qv), _Fearless (1993)_ (qv), _The Big Lebowski (1998)_ (qv) and _The Contender (2000)_ (qv) (a fourth Oscar nomination) are prime examples. More recently he seized the moment as a bald-pated villain as \'Robert Downey Jr.\' (qv)\'s nemesis in _Iron Man (2008)_ (qv). Jeff has been married since 1977 to non-professional Susan Geston (they met on the set of _Rancho Deluxe (1975)_ (qv)). The couple have three daughters, Isabelle (born 1981), Jessica (born 1983), and Hayley (born 1985). He hobbies as a photographer on and off his film sets, and has been known to play around as a cartoonist and pop musician.',0,'0000313','images/persons/jeff-bridges.jpg',139,100),(362,1,'2009-03-10 21:17:08','2009-03-10 21:17:08','Ungela','Brockman','ungela-brockman','24 February 1970','Los Angeles, California, USA','',0,'0110710','images/persons/ungela-brockman.jpg',140,94),(233,1,'2009-03-10 21:07:30','2009-03-10 21:07:30','Roy','Brocksmith','roy-brocksmith','15 September 1945','Quincy, Illinois, USA','\'Roy Brocksmith\' (qv) began his career on the bar at Hap Kuhl\'s Tavern in his native Quincy, Illinois, at the age of three. As a boy soprano, he performed in churches, schools, and appeared regularly on local radio and television programs. At 16, he taught at the local children\'s theater. Two years later he married his high-school girlfriend. He left Quincy, touring the US for two years in the Oberammergau Passion Play of Richmond, Virginia. He returned and attended Hannibal LaGrange Junior College, Culver-Stockton College, and graduated from Quincy University in 1970. During this time, he directed for the community theater, Pragressive Playhouse, and founded the Great River Theater Workshop. As a director, he was taken to New York by a Ukrainian anesthesiologist in 1969, where he was joined by his wife and son, Blake (born 8/5/66). For one year he was a librarian at the Lilliam Morgan Hetrick Medical Library at Flower Fifth Avenue Hospital in Manhattan and was on the board of the American Association of Midwives. This regular job ended when he received his AEA union card-playing opposite \'John Carradine\' (qv) in \"The Stingiest Man in Town,\" a musical based on \'Charles Dickens\' (qv)\'s \"A Christmas Carol\" and narrated by then-Mayor John Lindsay at New York\'s Town Hall. On the legit stage, he made his Broadway debut--and the cover of the New York Times Magazine (11/9/75)--in \"The Leaf People for \'Joseph Papp\' (qv). He also appeared in Herr Tartüff with \'Mildred Dunnock\' (qv) in \"Stages\" with \'Jack Warden\' (qv) and sang \"Mack the Knife\" in \'Kurt Weill\' (qv) & \'Bertolt Brecht\' (qv)\'s award-winning \"Threepenny Opera\" as the Ballad Singer in Papp\'s Lincoln Center revival (Original cast album and \"Broadway Magic of the Seventies\" CDs, both on Columbia/CBS Records), and as the King of France in \"The Three Musketeers.\" Off-Broadway shows included \"Polly,\" \"The Beggar\'s Opera,\" \"Dr. Salavy\'s Magic Theater,\" and \"In the Jungle of Cities\" with \'Al Pacino\' (qv). He starred in the Broadway-bound \"Swing\" at the Kennedy Center in Washington, DC. At the Guthrie Theater in Minneapolis, Minnesota, he appeared in \"Arms and the Man (as Petkoff), \'William Shakespeare\' (qv)\'s \"As You Like It\" (as Touchstone), \'Thornton Wilder\' (qv)\'s \"Our Town\" (as Professor Willard), and \'Molière\' (qv)\'s \"Don Juan\" (as Sganarelle). This last garnered him the Kudos Award from the Minneapolis critics and the production was brought to the Delacourt Theater in New York by \'Joseph Papp\' (qv), and he received international praise. His work with Papp and directors \'Richard Foreman\' (qv) Liviu Cuilei, Stuart Ostrow, \'Tom O\'Horgan\' (qv), Andrei Serban, \'Alan Schneider\' (qv), and \'John Cassavetes\' (qv), to name just a few, made Brocksmith a solid part of America\'s most innovative and provocative theater. He was first to direct Foreman and Silverman\'s \"Africanis Instructus\" for Lyn Austin\'s Lennox Arts Center, and his adaptation of Feydeau\'s \"A Flea in Her Ear\" was presented under his direction at Baltimore\'s Center Stage. His unusual staging of Shakespeare\'s \"Twelfth Night\" gave the Alaska Repertory Theater a major box-office and critical hit and was chosen out of 100 entries to be presented at the Joyce Theater in New York that season. He also appeared as Thurio in the national tour of John Guare\'s musical version of \"Two Gentelmen of Verona,\" and he made his California debut starring opposite \'Gena Rowlands\' (qv). In 1987 he formed the California Cottage Theater with partner \'Michael Liscio\' (qv), joining a long and formidable list of American actor-managers. As Producing Director he presented only new works: \"A Cold Day in Hell\" by January Quackenbush, Brocksmith\'s own \"Box Prelude OPUS #1,\" \"Matinee\" by Hal Corley, \"The One Less Traveled\" by Cary Pepper, \"A Necessary End\" by Joe Rubinoff, \"Ripe Conditions\" by Claudia Allen, and \"Letters from Queens\" by Brocksmith. The Cottage was unique because it was the only professional theater heater in the country under AEA jurisdiction for presentations in a private home. By its closing on February 17, 1996, over 8,000 people had attended performances. It was hailed as \"Suburbia\'s Rialto\" (Wall Street Journal), \"The epicenter of quirky folk\" (L.A. Weekly), \"Pick of the Week\" (L.A.Times), and \"Critic\'s Choice\" (Drama Logue). Calling himself a theater craftsman, it was Brocksmith\'s belief that \"good theater is not a matter of money and place as it is a matter of imagination, craft and guts.\" The concept of the California Cottage Theater, a professional theater for free, was, to him, theater in its most essential form. Brocksmith also appeared on several episodes of _\"3-2-1 Contact\" (1980)_ (qv) in its \"Bloodhound Gang\" segment and on an episode of _\"Star Trek: The Next Generation\" (1987)_ (qv). Sadly, he died of kidney failure on December 16, 2001.',0,'0110735','',NULL,NULL),(91,1,'2009-03-10 20:58:48','2009-03-10 20:58:48','Josh','Brolin','josh-brolin','12 February 1968','Los Angeles, California, USA','Rugged features and a natural charm have worked for \'Josh Brolin\' (qv), the son of actor \'James Brolin\' (qv). He has recently seen a massive surge in his career, finding well-known roles such as a policeman, a hunter, and the President of the United States. Born February 12, 1968, Brolin was initially against the lifestyle of the entertainment business, in light of his parents\' divorce, and both of them being actors. However, he fell for theatre after playing a part in a school production of \"A Streetcar named Desire\". His first major screen role was as the older brother in the film _The Goonies (1985)_ (qv) based on a story by \'Steven Spielberg\' (qv). He then immediately moved on to work on television, taking roles in such series as \"Private Eye\" and \"The Young Riders\". \"Private Eye\" was a chance for Brolin to play a detective. \"The Young Riders\" was set just before the Civil War, and was co-directed by Brolin\'s father, \'James Brolin\' (qv). After \"The Young Riders\", Brolin moved back to the big screen, with mediocre success. He played a supporting role in _The Road Killers (1994)_ (qv), but the film was not a hit. He followed up with the crime film _Gang in Blue (1996)_ (qv), the romantic film _Bed of Roses (1996)_ (qv), the thriller film _Nightwatch (1997)_ (qv), and appeared with his father in _My Brother\'s War (1997)_ (qv). However, nothing truly stuck out, especially not the box office flop _The Mod Squad (1999)_ (qv). The 2000s initially brought no significant change in Brolin\'s career. He appeared in the independent film _Slow Burn (2000)_ (qv), the sci-fi thriller _Hollow Man (2000)_ (qv) and starred in the television series \"Mister Sterling\". In 2004, he married actress \'Diane Lane\' (qv), and as of now are still together. It was not until 2007 that Brolin received much acclaim for his films. He took a supporting role in the \'Quentin Tarantino\' (qv)-written _Grindhouse (2007)_ (qv) which was a two-part film accounting two horror stories. He also played two policemen that year: a corrupt officer Trupo in the crime epic _American Gangster (2007)_ (qv), and an honest police chief in the emotional drama _In the Valley of Elah (2007)_ (qv) which starred \'Tommy Lee Jones\' (qv) and was directed by \'Paul Haggis\' (qv). However, it was his involvement in _No Country for Old Men (2007)_ (qv) that truly pushed him into the limelight. The film, directed by the Coen brothers, was about a man (Brolin) who finds a satchel containing two million dollars in cash. He is pursued by an unstoppable assassin (\'Javier Bardem\' (qv) who won an Oscar for his work) and his friend, a local sheriff (\'Tommy Lee Jones\' (qv)). The film won four Oscars, including Best Picture and Best Director. Brolin found high-profile work the next year, being cast as Supervisor Dan White in the film _Milk (2008/I)_ (qv) and will play the role of \'George W. Bush\' (qv) in the \'Oliver Stone\' (qv) film W (2009). Despite his mediocre success and fame, Brolin has maintained a choosiness in his films, and recently, these choices have paid off profoundly. Hopefully he continues this streak of good fortune that his talents have finally given him.',0,'0000982','images/persons/josh-brolin.jpg',139,95),(429,1,'2009-03-10 21:24:26','2009-03-10 21:24:26','Randy','Brooks','randy-brooks','','New York City, New York, USA','',0,'0112207','',NULL,NULL),(163,1,'2009-03-10 21:02:51','2009-03-10 21:07:19','Harry','Bugin','harry-bugin','10 March 1929','New York City, New York, USA','',0,'0119505','',NULL,NULL),(431,1,'2009-03-10 21:24:32','2009-03-10 21:24:32','Edward','Bunker','edward-bunker','31 December 1933','Hollywood, California, USA','',0,'0120483','',NULL,NULL),(152,1,'2009-03-10 21:02:18','2009-03-10 21:02:18','Terrence','Burton','terrence-burton','','','',0,'0123738','',NULL,NULL),(4,1,'2009-03-10 20:45:41','2009-03-10 21:24:18','Steve','Buscemi','steve-buscemi','13 December 1957','Brooklyn, New York, USA','\'Steve Buscemi\' (qv) was born in Brooklyn, New York, USA. He became interested in acting during his last year of high school. After graduating, he moved to Manhattan to study acting with John Strasberg. He began writing and performing original theatre pieces with fellow actor/writer \'Mark Boone Junior\' (qv). This led to his being cast in his first lead role in _Parting Glances (1986)_ (qv). Since then, he has worked with many of the top filmmakers in Hollywood, including \'Quentin Tarantino\' (qv), \'Jerry Bruckheimer\' (qv), and The Coen Brothers. He is a highly respected actor.',0,'0000114','images/persons/steve-buscemi.jpg',140,100),(241,1,'2009-03-10 21:07:55','2009-03-10 21:07:55','David','Byrd','david-byrd','3 September 1932','New York City, New York, USA','',0,'0126007','',NULL,NULL),(259,1,'2009-03-10 21:08:50','2009-03-10 21:08:50','John','Cameron','john-cameron','31 August 1958','Detroit, Michigan, USA','',0,'0131625','images/persons/john-cameron.jpg',140,93),(41,1,'2009-03-10 20:47:29','2009-03-10 21:12:52','Bruce','Campbell','bruce-campbell','22 June 1958','Birmingham, Michigan, USA','\"Uncle Sam\'s favorite son\" as the lyrics to the theme of _\"Jack of All Trades\" (2000)_ (qv) go, was born June 22, 1958 (the youngest of 3 brothers) in Royal Oak, Michigan. As a child, Bruce watched _\"Lost in Space\" (1965)_ (qv) on TV, and ran around dressed as Zorro. He got the acting bug at age 8; his dad was performing in local community theater. At 14, Bruce got to play the young prince in \"The King and I\" and even got to sing. He went on to appear in several community theater productions, including \"South Pacific\". However, he was also interested in directing, and shot super-8 flicks with a neighborhood pal. Perhaps through fate, he met future director \'Sam Raimi\' (qv) in a high school drama class in 1975. Soon, along with Sam, and now a bunch of other high school pals, Bruce filmed about 50 super-8 movies. During the summer of 1976, he was an apprentice in northern Michigan at Traverse City\'s Cherry County Playhouse, a summer-stock company. Bruce worked 18-hour days putting up sets, being assistant stage manager, doing errands, etc. No money, but it was a learning experience (it was show biz). He attended Western Michigan University and took theater courses. Bruce became a production assistant for a company that made commercials in Detroit. In the early part of 1979, with buddy \'Sam Raimi\' (qv), he decided to become a pro filmmaker. Armed with a super-8 horror film _Within the Woods (1978)_ (qv) which they showed potential investors, they raised $350,000 to make _The Evil Dead (1981)_ (qv) which Bruce co-produced and starred in as \"Ash\". Four years later, the completed film became the best-selling video of 1983 in England, and New Line Cinema got it a US release. Around this time, he married his first wife, and they had 2 kids. They raised 10 times as much cash for the sequel _Evil Dead II (1987)_ (qv) again co-produced by Bruce and starring him as \"Ash\". He moved to L.A. In 1990, while filming _Mindwarp (1992)_ (qv), he met his future second wife (costume designer \'Ida Gearon\' (qv)) on the set. In 1992, he rejoined Sam, and Bruce co-produced and starred as \"Ash\" in the 3rd of the Evil Dead trilogy, _Army of Darkness (1992)_ (qv) for Universal Studios. On TV, Bruce directed many episodes of _\"Hercules: The Legendary Journeys\" (1995)_ (qv). Bruce also acted as the recurring character \"Autolycus\", the King of Thieves; he portrayed this villain with zest in both _\"Hercules: The Legendary Journeys\" (1995)_ (qv) and _\"Xena: Warrior Princess\" (1995)_ (qv). Bruce\'s latest television venture was starring as the title rogue of _\"Jack of All Trades\" (2000)_ (qv). Everybody loves Jack. And everybody\'s heard of him -- \"There ain\'t a French or pirate rogue who don\'t know Jack!\".',0,'0132257','images/persons/bruce-campbell.jpg',125,100),(80,1,'2009-03-10 20:58:01','2009-03-10 20:58:01','Matthew','Cannon','matthew-cannon','','','',0,'2981772','',NULL,NULL),(386,1,'2009-03-10 21:18:30','2009-03-10 21:18:30','David','Carradine','david-carradine','8 December 1936','Hollywood, California, USA','\'David Carradine\' (qv) is the eldest son of legendary character actor \'John Carradine\' (qv) and now presides over an acting family that includes brothers \'Keith Carradine\' (qv), \'Robert Carradine\' (qv) and \'Michael Bowen\' (qv) as well as his daughter \'Kansas Carradine\' (qv) and nieces \'Ever Carradine\' (qv) and \'Martha Plimpton\' (qv). He was born in Hollywood and educated at San Francisco State College, where he studied music theory and composition. It was while writing music for the Drama Department\'s annual revues that he discovered his own passion for the stage, joining a Shakespearean repertory company and learning his craft on his feet. After a two-year stint in the army, he found work in New York as a commercial artist and later found fame on Broadway in \"The Deputy\" and \"The Royal Hunt of the Sun\" opposite \'Christopher Plummer\' (qv). With that experience he returned to Hollywood, landing the short-lived TV series _\"Shane\" (1966)_ (qv) before being tapped to star opposite \'Barbara Hershey\' (qv) in \'Martin Scorsese\' (qv)\'s first Hollywood film, _Boxcar Bertha (1972)_ (qv). The iconic _\"Kung Fu\" (1972)_ (qv) followed, catapulting Carradine to superstardom for the next three years, until he left the series to pursue his film career. That career now includes more than 100 feature films, a couple of dozen television movies, a whole range of theater on and off Broadway, and another hit series, _Kung Fu: The Legend Continues (1992) (TV)_ (qv). Carradine received the Best Actor Award from the National Board of Film Review as well as a Golden Globe nomination for his portrayal of \'Woody Guthrie\' (qv) in \'Hal Ashby\' (qv)\'s _Bound for Glory (1976)_ (qv), and won critical acclaim for his work as Cole Younger in _The Long Riders (1980)_ (qv). \"Kung Fu\" also received seven Emmy nominations in its first season, including one for Carradine as Best Actor. In addition he won the People\'s Prize at the Cannes Film Festival\'s \"Director\'s Fortnight\" for his work on _Americana (1983)_ (qv), and a second Golden Globe nomination for his supporting role in _\"North and South\" (1985)_ (qv). Among his other most notable film credits are _Gray Lady Down (1978)_ (qv), _Mean Streets (1973)_ (qv), _Bird on a Wire (1990)_ (qv), _The Long Goodbye (1973)_ (qv), _The Serpent\'s Egg (1977)_ (qv) and _Circle of Iron (1978)_ (qv). He recently returned to the screen in what could be his greatest performance to date, playing the title role in \'Quentin Tarantino\' (qv)\'s _Kill Bill: Vol. 1 (2003)_ (qv) and _Kill Bill: Vol. 2 (2004)_ (qv) (Miramax), for which he received his fourth Golden Globe nomination. Carradine has also continued his devotion to music, and has recorded some 60 tracks from various musical genres and sung in several movies. He makes his home in Los Angeles with his wife Annie, her four children and their two dogs.',0,'0001016','images/persons/david-carradine.jpg',81,100),(175,1,'2009-03-10 21:03:31','2009-03-10 21:03:31','Asia','Carrera','asia-carrera','6 August 1973','New York City, New York, USA','\'Asia Carrera\' (qv)\'s stunning curves can be seen in more than 250 hardcore movies. Asia\'s looks combine delicate Asian features with voluptuous silicone breasts. Her fans not only admire her mouth-watering body but also her brains - Asia is known to be a very intelligent person. At the tender age of 13 the daughter of a German father and a Japanese mother already played J. S. Bach on the piano in Carnegie Hall. Thanks to a federal grant she was able to study Japanese language and Economics at Rutgers University in the USA. But this was only after she had run away from home as a teenager because of the pressure her demanding parents put on her. By the age of 17 she was homeless. To get through her studies at the university she turned to stripping. After becoming one of New Jersey\'s best-paid exotic dancers she decided to devote her life to getting richer and richer. She never wanted to live out on the street again. When she heard about girls making thousands of dollars in the porn biz she moved to Los Angeles. A mutual friend introduced her to director \'Bud Lee\' (qv) who instantly put her in one of his feature films. The rest - as they say - is history... Today Asia has retired from making adult movies and only ever returns to do the occasional big-budget flick. She runs her own homepage and spends her time chatting with fans via email or day trading shares at the stock exchange.',0,'0006562','images/persons/asia-carrera.jpg',125,100),(439,1,'2009-03-10 21:25:05','2009-03-10 21:25:05','Suzanne','Celeste','suzanne-celeste','','','',0,'0148019','',NULL,NULL),(58,1,'2009-03-10 20:56:56','2009-03-10 20:56:56','Karla','Cheatham-Mosley','karla-cheatham-mosley','27 August 1981','','',0,'1349978','',NULL,NULL),(390,1,'2009-03-10 21:18:44','2009-03-10 21:18:44','Sonny','Chiba','sonny-chiba','23 January 1939','Fukuoka, Japan','Pivotal figure in the 1970s explosion of martial arts cinema as lethal \"fists for hire\" trouble shooter, Takuma (Terry) Tsurugi, starring in the phenomenally popular and ultra violent \"The Street Fighter\" series of action films. \'Sonny Chiba\' (qv) wasn\'t a graceful, fluid fighter like screen icon \'Bruce Lee\' (qv), but rather he was a ferocious machine that mowed down his opponents with his fists and feet, always with a menacing grimace on his face!Chiba was born Sadao Maeda in Fukuoka, Japan in 1939 and shared a house along with four other siblings to a father who was a military test pilot. As a youth, he was keen on both theatre and gymnastics, and was a talented enough athlete to score a position in the Japanese Olympic Team, until a chronic back injury finished his gymnastic aspirations. However, whilst at university he took a strong interest in karate under the guidance of the legendary \"Mas Oyama\", and soon earned his first black belt. However, his life took another turn, when in 1960 he was discovered during a talent search by Toei Studios, and he soon began his screen career under the name of \"Shinichi Chiba\", appearing as \"Space Chief\" in _Uchu Kaisoku-ken (1961)_ (aka \"Invasion of the Neptune Men). Over the next decade, Chiba busied himself with many appearances in Japanese crime thrillers and steadily built a reputation for playing hard men of few words and direct actions. With his martial arts proficiency in karate, judo & kenpo, he was in the box seat to take advantage of the early 1970s martial arts boom commenced by Chinese superstar \'Bruce Lee\' (qv), and Chiba starred in the brutal and uncompromising _Gekitotsu! Satsujin ken (1974)_ (qv) (aka \"The Streetfighter\"). The film has Chiba playing a mercenary style, street thug who will do anything for a price, and take on most anyone, including the Japanese Yakuza. The approach of the film was quite different from the \'Bruce Lee\' (qv) films in that Lee only eliminated his enemies when he was defending his friends or his honor. Quite the opposite, Chiba was only after a fistful of dollars for his deadly services and would engage in mortal combat for the highest bidder, although this often clouded his judgement to his own detriment. The only person \"The Street Fighter\" respects is his martial arts teacher, the short rotund, karate master \"Masaoko\" played by \'Masafumi Suzuki\' (qv), who manages to easily out smart and out fight the frustrated Chiba! Upon its release, the film was roundly criticised for its excessive violence, including the amazing finale where a lethal blow to the ringleader\'s skull is shown in x-ray on screen. Fans didn\'t care, and they flocked in their thousands to see this economically made, yet eye catching chop socky spectacular. A sequel quickly followed with him back again in the messy production _Satsujin ken 2 (1974)_ (qv) (aka \"Return of The Streetfighter\"), which was followed by a third Streetfighter movie also starring female martial arts dynamo \'Etsuko Shihomi\' (qv) in the gritty _Onna hissatsu ken (1974)_ (qv) (aka \"Sister Street Fighter\"), and then the fourth and final film in the series _Gyakushu Satsujin ken (1974)_ (aka \"The Street Fighters Last Revenge\"), which was arguably the best of all the sequels. Chiba had firmly established himself as a key anti-hero of Asian martial arts cinema who said little, and used his fists to sort out his troubles. With the demand high from keen action fans, he remained remarkably busy on screen for the next twenty years starring in numerous Japanese film & TV productions with an emphasis on bruising fights, samurai swords, Yakuza gangsters and pretty girls in trouble. Outside of Japan, the \"Street Fighter\" series of films has achieved enduring popularity through many midnight cult screenings, and their style heavily influenced a youthful indie filmaker named \'Quentin Tarantino\' (qv). Tarantino has used strong references and imagery from the \"Street Fighter\" movies in several of his films including _True Romance (1993)_ (qv) and _Pulp Fiction (1995)_. And when Tarantino came around to casting his mammoth _Kill Bill: Vol. 1 (2003)_ (qv) project, he was awed to have Chiba accept the key role of the hot headed, and sometimes humourous, Okinawan sword maker \"Hattori Hanzo. \'Sonny Chiba\' (qv) has undoubtedly been a major figure and ongoing influence in the worldwide passion for martial arts movies for over thirty years, and he continues to actively contribute to the genre by encouraging & training young hopefuls seeking to make their mark on screen.',0,'0002002','images/persons/sonny-chiba.jpg',139,96),(55,1,'2009-03-10 20:56:47','2009-03-10 20:56:47','Hamilton','Clancy','hamilton-clancy','','','',0,'1750388','images/persons/hamilton-clancy.jpg',140,93),(314,1,'2009-03-10 21:12:04','2009-03-10 21:12:04','Blake','Clark','blake-clark','2 February 1946','Macon, Georgia, USA','',0,'0163703','',NULL,NULL),(363,1,'2009-03-10 21:17:10','2009-03-10 21:17:10','Madison','Clark','madison-clark','','Seoul, South Korea','',0,'0006480','',NULL,NULL),(154,1,'2009-03-10 21:02:24','2009-03-10 21:02:24','Christian','Clemenson','christian-clemenson','17 March 1958','Humboldt, Iowa, USA','',0,'0166061','images/persons/christian-clemenson.jpg',125,100),(43,1,'2009-03-10 20:56:05','2009-03-10 21:15:34','George','Clooney','george-clooney','6 May 1961','Lexington, Kentucky, USA','Born in Lexington, Kentucky, as son of \'Nick Clooney\' (qv), a TV newscaster of many years, who hosted a talk show at Cincinnati and often invited George into the studios already at the age of 5. Avoiding competition with his father, he quit his job as broadcast journalist after a short time. Studied a few years at Northern Kentucky University. Failed to join the Cincinnati Reds baseball team. He came to acting when his cousin, \'Miguel Ferrer\' (qv), got him a small part in a feature film. After that, he moved to L.A. in 1982 and tried a whole year to get a role while he slept in a friend\'s closet. His first movie, together with \'Charlie Sheen\' (qv), stayed unreleased but got him the producers\' attention for later contracts.',0,'0000123','images/persons/george-clooney.jpg',140,100),(230,1,'2009-03-10 21:07:10','2009-03-10 21:07:10','Bill','Cobbs','bill-cobbs','16 June 1934','Cleveland, Ohio, USA','\'Bill Cobbs\' (qv) was born and raised in Cleveland, Ohio where his parents were hard-working people, whom instilled in him a sense of self-reliance and humility. As an amateur actor in the city\'s Karamu House Theater, he starred in the \'Ossie Davis\' (qv) play \"Purlie Victorious\". Cobbs was an Air Force radar technician for eight years; he also worked in office products at IBM and sold cars in Cleveland. In 1970, at the age of 36, he left for New York to seek work as an actor. There he turned down a job in the NBC sales department in order to have time for auditions. He supported himself by driving a cab, repairing office equipment, selling toys, and performing odd jobs. His first professional acting role was in \"Ride a Black Horse\" at the Negro Ensemble Company. From there he appeared in small theater productions, street theater, regional theater and at the Eugene O\'Neill Theater. His first television credit was in _\"Vegetable Soup\" (1976)_ (qv), a New York public television educational series, and he made his feature film debut in _The Taking of Pelham One Two Three (1974)_ (qv) in 1974. In his free time Cobbs enjoys music, reading, and playing his drums.',0,'0167850','images/persons/bill-cobbs.jpg',128,100),(2,1,'2009-03-10 20:45:32','2009-03-10 21:10:59','Ethan','Coen','ethan-coen','21 September 1957','Minneapolis, Minnesota, USA','',1,'0001053','images/persons/ethan-coen.jpg',123,100),(1,1,'2009-03-10 20:45:27','2009-03-10 21:11:04','Joel','Coen','joel-coen','29 November 1954','Minneapolis, Minnesota, USA','',1,'0001054','images/persons/joel-coen.jpg',93,100),(166,1,'2009-03-10 21:03:00','2009-03-10 21:03:00','Luis','Colina','luis-colina','','','',0,'0171537','',NULL,NULL),(190,1,'2009-03-10 21:04:52','2009-03-10 21:04:52','Frank','Collison','frank-collison','14 February 1950','Evanston, Illinois, USA','',0,'0172806','',NULL,NULL),(379,1,'2009-03-10 21:17:50','2009-03-10 21:17:50','Carlo','Corazon','carlo-corazon','22 June 1960','Arlington, Virginia, USA','\'Carlo Corazon\' (qv) was born in Virginia, but grew up in Fairfield County, Connecticut. As a child growing up in the \'projects\' (as they were called) he put on plays starring his younger brothers and sister then charged his parents to attend. You could see even as child Carlo was torn between artistic values and monetary values. As a teenager he filmed his younger siblings football games and then would help edit and score a highlight reel with his Mom (Martha) for the season\'s banquet finale. In junior high school Carlo was in charge of the stage lighting for the plays while starring in sports. In high school, he lettered and starred in both Varsity football and baseball. He also took a class on \'stagecraft\' learning the art work and stage design for theatre. Between working and sports, on the outside Carlo\'s life appeared to be on the up and up, though in his time off he would journey into the darker side of life as a teen. By the early 1980s, Carlo\'s son was born. That was a profound moment in his life. It was also a quick dose of reality for the athletic and creative genius/problem child (one minute a star - the next minute a husband and father) but it may have saved his life. Life on the streets as a thug can take its toll on one\'s health and did for some of Carlo\'s partners in crime. He saw a few friends and acquaintances pass. It also took a toll on his marriage. He and first wife Laurie divorced after three years. Working in a \'dead end\' job and just unhappy with his life\'s direction, he started playing football again in a Fairfield County league with one of his best friends where he not only starred, but helped lead his team to several titles. Unfortunately a knee injury ended any chance of him playing anymore or possibly going further with football (American). By 1986, he looked towards the theatre and within days after signing on into an acting class in Bridgeport, Connecticut he found himself co-starring in a version of the Sam Sheppard play \'True West\'. That helped him land his first role in film as \'The Jogger\' for an independent film called \'Beyonder\' by Mike Leoce. This eventually led him to a follow up role in \'The Game\' written and directed by David Prank. It was while filming the \'Beyonder\' that one of the female leads introduced him to his acting mentors; Rick Poole and Kathryn Gately at a Theatre Row acting studio inside the Nat Horne Theatre in NYC. There he also took dance classes from greats like Nat Horne, and Anna Sokolov. Poole and Gately worked at the Neighborhood Playhouse prior to opening their own studios and were arguably two of the best disciples of Sandy Meisner in NYC at the time. At the same time he competed in a modeling pageant from which the likes of Patrick Dempsey emerged. This gave Carlo the opportunities he needed to land on a Soap Opera in Manhattan, then several other print and film opportunities in New York then Los Angeles (ie:Structure, calendars, film and TV). A good friend who was the Vice President of the \'Stephen Nichols\' fan club, offered to be President of Carlo\'s fan club. Her name is Jodi Davidowski. Unfortunately for the world Jodi is no longer with us. She passed away in 2004 from a brain tumor. Her kindness, and friendship will be missed by a lot of people, especially by Stephen and Carlo. Traversing coasts and once in Los Angeles he wandered through agents, managers, and auditions landing several roles and working night owl jobs like bartending at the \'Red Onion\' and private dancing. In 1993 he and his business partner, photographer Dean McKeever decided to put together a female swimsuit calendar called \'The Supercalendar\' that featured the likes of \'Gena Lee Nolin\' (see photo gallery) just prior to her fame and fortune. Other photographers that helped out on the project were; Chris Shay, Brent Schafer, Denice Porter, and Jimmy Pickering. In 1995, Carlo co-produced, wrote, directed, and starred in a movie for television, which aired on a Cox Communications cable channels in early 1997 and which co-starred his friend actor Richard Dino (From Dusk 2 Dawn) also featuring several family members (including a photo of his son). In March of 1996, Carlo attended the \'Academy Awards and Governor\'s Ball\' with Richard Dino and the two headed to the Vanity Fair party at Morton\'s on Melrose and Robertson in Beverly Hills where he ran into a former classmate from New York who was starring in a sitcom. By the summer of 1998, his son chose a prestigious \'East Coast\' school to do his undergrad degree. It was at that time Carlo also met his soul-mate and second wife Mariana. She is from the Palermo Hollywood area in the Capital, Buenos Aires, Argentina and is over 15 years his junior. They currently reside in the \'Sand Canyon\' area of Santa Clarita in Los Angeles county with their \'Yorkie\' named \'Anush\'. The three spend a lot of time at the home of Mariana\'s Mom - Ana, and relax by playing golf and vacationing to Argentina visiting Mariana\'s family and friends or heading back east to visit Carlo\'s Mom-Martha and his son M1ke. Though not completely giving up the \'acting bug\' Carlo is currently pursuing an executive career. After holding the position of President of his privately owned corporation; Sidustar International, Inc. he is now a Vice President with the number one emergency and rapid mass notification company in the world; the National Notification Network (3nonline.com). He also received his M.B.A. online as an honorary degree from Almeda University for his contributions in communications and technology. Still he is quick to say that he\'s not the executive star of the family. That title belongs to his son Michael, who received his MBA in May (2005) from UCONN\'s graduate school in Stamford, Connecticut, and had also received his Bachelor of Science from Fairfield University in Southern Connecticut in 2002. Michael was also invited to be a member of the prestigious club, \'Mensa International\', an intellectual society.',0,'1544109','images/persons/carlo-corazon.jpg',138,100),(96,1,'2009-03-10 20:59:06','2009-03-10 20:59:06','Barry','Corbin','barry-corbin','16 October 1940','Lamesa, Texas, USA','Barry\'s full given name is Leonard Barrie Corbin, and he was born on October 16, 1940, to Kilmer Blain Corbin, an attorney, and Alma Corbin, an elementary school teacher in Lamesa Texas. Barry has a daughter named Shannon Ross, which he shares his 15-acre ranch in Fort Worth, Texas with when he isn\'t working. He says that he rides horses there every chance he gets.',0,'0179224','images/persons/barry-corbin.jpg',138,100),(435,1,'2009-03-10 21:24:49','2009-03-10 21:24:49','Tony','Cosmo','tony-cosmo','','','',0,'0181922','',NULL,NULL),(52,1,'2009-03-10 20:56:39','2009-03-10 20:56:39','Michael','Countryman','michael-countryman','','Saint Paul, Minnesota, USA','',0,'0183613','',NULL,NULL),(211,1,'2009-03-10 21:05:46','2009-03-10 21:05:46','Evelyn','Cox','evelyn-cox','','','',0,'0185017','',NULL,NULL),(213,1,'2009-03-10 21:05:50','2009-03-10 21:05:50','Sidney','Cox','sidney-cox','','','',0,'0185248','',NULL,NULL),(212,1,'2009-03-10 21:05:48','2009-03-10 21:05:48','Suzanne','Cox','suzanne-cox','','','',0,'1792511','',NULL,NULL),(210,1,'2009-03-10 21:05:43','2009-03-10 21:05:43','Willard','Cox','willard-cox','','','',0,'0185290','',NULL,NULL),(243,1,'2009-03-10 21:08:02','2009-03-10 21:08:02','Patrick','Cranshaw','patrick-cranshaw','17 June 1919','Bartlesville, Oklahoma, USA','',0,'0186498','',NULL,NULL),(114,1,'2009-03-10 21:00:02','2009-03-10 21:00:02','Rutherford','Cravens','rutherford-cravens','','','',0,'0186657','',NULL,NULL),(276,1,'2009-03-10 21:09:42','2009-03-10 21:09:42','Lou','Criscuolo','lou-criscuolo','21 January 1934','New York City, New York, USA','',0,'0187951','',NULL,NULL),(357,1,'2009-03-10 21:16:56','2009-03-10 21:16:56','','Cristos','cristos','','','Born in New Castle, Pennsylvania to Connie and Andy Pappas, he is the oldest of three children. He is a black belt in Karate and had a martial arts school before heading to the West Coast. His first film was a home made martial arts movie that starred his sister, Andrea.',0,'0188176','images/persons/cristos.jpg',81,100),(407,1,'2009-03-10 21:19:30','2009-03-10 21:19:30','Goro','Daimon','goro-daimon','','','',0,'1533635','',NULL,NULL),(242,1,'2009-03-10 21:07:58','2009-03-10 21:07:58','Christopher','Darga','christopher-darga','','','',0,'0201178','images/persons/christopher-darga.jpg',128,100),(176,1,'2009-03-10 21:03:34','2009-03-10 21:03:34','Kiva','Dawson','kiva-dawson','','Santa Monica, California, USA','Kiva is an only child born in Santa Monica, California. Kiva grew up in a very creative and nurturing environment and was always encouraged to express herself through the arts. Kiva remembers witnessing the diva, Toni Basil, (Later in life, Kiva was blessed to work with her on the film, \"That Thing You Do\") perform and credits her and the film, \"That\'s Entertainment\", for being her first methods of inspiration, not to mention the fact that her mother was a writer, (she was nominated for a cable ACE award for narrating and contributing to the lifetime cable documentary, \"Dying for Love\") and always made sure she exposed Kiva to plays, musicals and film. Kiva\'s first agent was Iris Burton and she did a number of commercials, a M.O.W with Brian Dennehy and a famous episode of \"Taxi,\" before falling in love with the world of ballet.',0,'0206176','images/persons/kiva-dawson.jpg',66,99),(59,1,'2009-03-10 20:57:00','2009-03-10 20:57:00','Jeffrey','DeMunn','jeffrey-demunn','25 April 1947','Buffalo, New York, USA','\'Jeffrey DeMunn\' (qv) was born on April 25, 1947 in Buffalo, New York. He studied in England at the Bristol Old Vic Theatre School, then returned to America and was a member of the National Shakespeare Company. He has starred in many theatre productions, both on and off Broadway, including \"K2\" (for which he received a Tony Award for Best Actor), \"Spoils of War\" and \"Comedians\". He has appeared in such films as _The Shawshank Redemption (1994)_ (qv), _The Blob (1988)_ (qv) and such television shows as _\"Hill Street Blues\" (1981)_ (qv), _Kojak: The Price of Justice (1987) (TV)_ (qv), _\"Law & Order: Special Victims Unit\" (1999)_ (qv) and \"Law & Order\" (1990)_ .',0,'0218810','',NULL,NULL),(305,1,'2009-03-10 21:11:30','2009-03-10 21:11:30','Diane','Delano','diane-delano','29 January 1957','Los Angeles, California, USA','',0,'0216392','images/persons/diane-delano.jpg',125,100),(239,1,'2009-03-10 21:07:48','2009-03-10 21:07:48','Jerome','Dempsey','jerome-dempsey','1 March 1929','St. Paul, Minnesota, USA','',0,'0218731','',NULL,NULL),(8,1,'2009-03-10 20:45:55','2009-03-10 20:45:55','Tony','Denman','tony-denman','22 October 1979','Minneapolis, Minnesota, USA','',0,'0219301','images/persons/tony-denman.jpg',140,100),(294,1,'2009-03-10 21:10:31','2009-03-10 21:10:31','James','Deuter','james-deuter','19 March 1939','Chicago, Illinois, USA','',0,'0222053','images/persons/james-deuter.jpg',124,100),(94,1,'2009-03-10 20:58:58','2009-03-10 20:58:58','Garret','Dillahunt','garret-dillahunt','24 November 1964','Castro Valley, California, USA','Garret grew up in Washington State, and attended the University of Washington where he studied journalism. He went on to study acting at New York University\'s graduate acting program. He appeared extensively on and off Broadway and around the country before he began pursuing film and television roles. He has two brothers. Brett, a teacher. And Eric, deceased.',0,'0226813','images/persons/garret-dillahunt.jpg',134,100),(81,1,'2009-03-10 20:58:03','2009-03-10 20:58:03','Justin','Doescher','justin-doescher','','','',0,'2858333','',NULL,NULL),(333,1,'2009-03-10 21:12:54','2009-03-10 21:12:54','Michael','Dotson','michael-dotson','30 December 1970','Fresno, California, USA','Michael was born Michael Barry Dotson, in Fresno, California in 1970. He was raised by his mother, Mary Doyle. During his adolescence, he has achieved goals some still strive to attain. While only in 3rd grade his writing talents were recognized by his teacher who entered him into a statewide writing competition from grades 1st through college. Michael, with his \"An Almost Impossible Mission\" took 2nd place among all the contestants including the college level competitors. His poetry was already being sold to many at the mere age of 12. Finally realizing his talents, he took his natural ability and decided to turn it into something everyone could enjoy, screenwriting. Michael has been called upon by a few industry celebrities to write everything from Spec-scripts to full length scripts. Recently he completed what he describes as his big break script, Lost In Love; in which he hopes to cast the R&amp;B sensation, Usher, to play the lead. Michael has also appeared on several different movies as well as spot appearances on different television shows.',0,'1440149','',NULL,NULL),(112,1,'2009-03-10 20:59:56','2009-03-10 20:59:56','Jason','Douglas','jason-douglas','','','',0,'0235103','images/persons/jason-douglas.jpg',110,100),(219,1,'2009-03-10 21:06:04','2009-03-10 21:06:04','Jerry','Douglas','jerry-douglas','28 May 1956','Warren, Ohio, USA','',0,'0235114','',NULL,NULL),(388,1,'2009-03-10 21:18:37','2009-03-10 21:18:37','Julie','Dreyfus','julie-dreyfus','24 January 1966','Paris, France','',0,'0237838','images/persons/julie-dreyfus.jpg',139,100),(254,1,'2009-03-10 21:08:35','2009-03-10 21:08:35','William','Duff-Griffin','william-duff-griffin','1940','','',0,'0240421','',NULL,NULL),(260,1,'2009-03-10 21:08:52','2009-03-10 21:08:52','Skipper','Duke','skipper-duke','','','',0,'0241212','',NULL,NULL),(329,1,'2009-03-10 21:12:41','2009-03-10 21:12:41','Mildred','Dumas','mildred-dumas','','','',0,'1223762','',NULL,NULL),(181,1,'2009-03-10 21:04:22','2009-03-10 21:06:59','Charles','Durning','charles-durning','28 February 1923','Highland Falls, New York, USA','Ex-pro boxer, WWII veteran, dance instructor and diversely talented stage & screen actor are all inclusions on the resume of this perpetually busy US actor who didn\'t get in front of the cameras until around the time of his fortieth birthday ! The stockily built \'Charles Durning\' (qv) is one of Hollywood\'s most dependable and sought after supporting actors who first got his start in guest appearances in early 1960\'s TV shows. He scored minor roles over the next decade until he really got noticed by film fans as the sneering, corrupt cop \"Lt. Snyder\" hassling street grifter \'Robert Redford\' in the multi award winning mega-hit _The Sting (1973)_ (qv). Durning was equally entertaining in the \'Billy Wilder\' (qv) production of _The Front Page (1974)_ (qv), he supported screen tough guy \'Charles Bronson\' (qv) in the suspenseful western _Breakheart Pass (1975)_ (qv) and featured as \"Spermwhale Whalen\" in the story of unorthodox police behavior in _The Choirboys (1977)_ (qv). The versatile Durning is equally adept at comedic roles and demonstrated his skills as \"Doc Hopper\" in _The Muppet Movie (1979)_ (qv), a feisty football coach in _North Dallas Forty (1979)_ (qv), a highly strung police officer berating maverick cop \'Burt Reynolds\' (qv) in _Sharky\'s Machine (1981)_ (qv), and a light footed, dancing Governor (alongside \'Burt Reynolds\' (qv) once more) in _The Best Little Whorehouse in Texas (1982)_ (qv). Durning continued a regular on screen association with \'Burt Reynolds\' (qv) appearing in several more feature films together and as \"Dr. Harlan Elldridge\" in the highly popular TV series _\"Evening Shade\" (1990)_ (qv). On par with his multitude of feature film roles, Durning has always been in high demand on television and has guest starred in _\"Everybody Loves Raymond\" (1996)_ (qv), _\"Monk\" (2002)_ (qv) and _\"Rescue Me\" (2004)_ (qv). Plus, he has appeared in the role of \"Santa Claus\" in five different telemovies!',0,'0001164','',NULL,NULL),(185,1,'2009-03-10 21:04:36','2009-03-10 21:04:36','Wayne','Duvall','wayne-duvall','29 May 1958','Silver Spring, Maryland, USA','',0,'0245145','images/persons/wayne-duvall.jpg',140,91),(364,1,'2009-03-10 21:17:12','2009-03-10 21:17:12','María','Díaz','maria-diaz','','','',0,'0246676','',NULL,NULL),(321,1,'2009-03-10 21:12:21','2009-03-10 21:12:21','Khalil','East','khalil-east','','','',0,'1564929','',NULL,NULL),(322,1,'2009-03-10 21:12:23','2009-03-10 21:12:23','Jennifer','Echols','jennifer-echols','','','',0,'0248474','images/persons/jennifer-echols.jpg',140,92),(16,1,'2009-03-10 20:46:16','2009-03-10 20:46:16','Steve','Edelman','steve-edelman','','','',0,'0249009','',NULL,NULL),(161,1,'2009-03-10 21:02:46','2009-03-10 21:02:46','Sam','Elliott','sam-elliott','9 August 1944','Sacramento, California, USA','Tall, thin, wiry \'Sam Elliott\' (qv) is the classic picture of the American cowboy. Elliott began his acting career on the stage and his film debut was in _Butch Cassidy and the Sundance Kid (1969)_ (qv). Although his future wife, \'Katharine Ross\' (qv) co-starred in the film, the two did not meet until they filmed _The Legacy (1978)_ (qv) Together. Over the years there would be few opportunities to act in feature westerns, but it would be television that gave him that opportunity, in _The Sacketts (1979) (TV)_ (qv), _The Shadow Riders (1982) (TV)_ (qv) and _\"The Yellow Rose\" (1983)_ (qv), among others. He would also work in non-westerns, usually as a tough guy, as in _Lifeguard (1976/I)_ (qv) and _Road House (1989)_ (qv). In the 1990s, Elliott was back on the western trail, playing everyone from Brig. Gen. John Buford in the film _Gettysburg (1993)_ (qv) to Wild Bill Hickok in the made-for-TV movie _Buffalo Girls (1995) (TV)_ (qv). In 1991 he wrote the screenplay and co-starred with his wife in the made-for-TV western _Conagher (1991) (TV)_ (qv).',0,'0000385','images/persons/sam-elliott.jpg',140,90),(158,1,'2009-03-10 21:02:36','2009-03-10 21:02:36','Lu','Elrod','lu-elrod','','','\'Lu Elrod\' (qv) is a versatile character actress who has appeared in more than a dozen feature films over the past three decades. Her memorable film appearances include: _The Seduction of Joe Tynan (1979)_ (qv), _High School High (1996)_ (qv), _Wag the Dog (1997)_ (qv), _The Big Lebowski (1998)_ (qv), _Primary Colors (1998)_ (qv), _Freaky Friday (2003)_ (qv), and _Kicking & Screaming (2005)_ (qv). She has also appeared in a variety of television programs including _\"General Hospital\" (1972)_ (qv), _\"Hill Street Blues\" (1981)_ (qv), _\"Superior Court\" (1986)_ (qv), and _\"Dream On\" (1990)_ (qv). Dr. \'Lu Elrod\' (qv) is a Professor Emeritus of Music at California State University, Los Angeles and continues to teach and play an active role in fund-raising for music scholarships at Cal State LA. She has written a number of professional articles and videotape programs for instructional television on music education and on building a positive self-concept through music. Dr. Elrod has been a Metropolitan Opera Regional Auditions finalist and is a critically acclaimed opera singer and expert in music education. She is listed in national directories, including Who\'s Who in America, International Who\'s Who in Music, and is a multiple year honoree in Who\'s Who Among America\'s Teachers. As an actress, she is a member of SAG, AFTRA, and AGVA.',0,'0255585','images/persons/lu-elrod.jpg',140,95),(27,1,'2009-03-10 20:46:49','2009-03-10 20:46:49','Wayne A.','Evenson','wayne-a-evenson','','','',0,'0263449','',NULL,NULL),(256,1,'2009-03-10 21:08:41','2009-03-10 21:08:41','Pamela','Everett','pamela-everett','','','',0,'0263560','',NULL,NULL),(330,1,'2009-03-10 21:12:43','2009-03-10 21:12:43','Al','Fann','al-fann','21 February 1925','Cleveland, Ohio, USA','',0,'0266802','',NULL,NULL),(283,1,'2009-03-10 21:09:59','2009-03-10 21:09:59','David','Fawcett','david-fawcett','','','',0,'0269486','',NULL,NULL),(34,1,'2009-03-10 20:47:09','2009-03-10 20:47:09','José','Feliciano','jose-feliciano','10 September 1945','Lares, Puerto Rico','',0,'0004913','',NULL,NULL),(267,1,'2009-03-10 21:09:19','2009-03-10 21:09:19','Colin','Fickes','colin-fickes','','Raleigh, North Carolina, USA','',0,'0275690','images/persons/colin-fickes.jpg',65,100),(371,1,'2009-03-10 21:17:29','2009-03-10 21:17:29','Jon','Fidele','jon-fidele','','','',0,'0275742','',NULL,NULL),(201,1,'2009-03-10 21:05:23','2009-03-10 21:05:23','Michael W.','Finnell','michael-w-finnell','24 December 1973','North Little Rock, Arkansas, USA','',0,'0278229','',NULL,NULL),(164,1,'2009-03-10 21:02:54','2009-03-10 21:02:54','Jesse','Flanagan','jesse-flanagan','14 April 1982','Santa Monica, California, USA','',0,'0281041','images/persons/jesse-flanagan.jpg',66,99),(145,1,'2009-03-10 21:01:59','2009-03-10 21:01:59','','Flea','flea','16 October 1962','Melbourne, Victoria, Australia','Michael Peter Balzary was born on the 16th of October 1962, in Melbourne, Australia. When he was four, his parents divorced and Michael, his sister Karen and his mother Patricia headed for New York, but they didn\'t stay long and soon ended up in L.A. (in 1972), where his step-father, a jazz musician named Walter Urban Jr, intended to start a career. \'Flea\' (qv) would often sit in on weekly jam sessions with his stepdad and the constant flow of musicians who trucked through. High school was not always an easy road for young Michael. He was kind of a misfit because of his unusual musical taste. While most of the kids were into disco and dance music, \'Flea\' (qv) preferred jazz artists like \'Miles Davis\' (qv) and \'Dizzy Gillespie\' (qv). \'Flea\' (qv)\'s first musical instrument were the drums, but soon he choosed the trumpet; after school he would race home to listen to his Gillespie records and play along with his idol. He counts as his greatest childhood memory the time his mother got him backstage to meet Gillespie after one of his concerts. He also played with the Los Angeles Junior Philarmonic Orchestra. Influenced by some of his friends from school who shared the same passion for music - among them, \'Jack Irons\' (qv) and \'Hillel Slovak\' (qv), who would later play in the \'Red Hot Chili Peppers\' (qv) with him - his musical interests then diversified, he discovered funk music, and \'Jimi Hendrix\' (qv) became his new idol. At the end of 1977, he met \'Anthony Kiedis\' (qv). For some reason, Michael was holding a young schoolmate named Tony Sherr in a headlock, when Kiedis, who was Tony\'s best friend at the time, came to rescue him, and the both almost had a fight, but soon became aware they were made to be friends, and have been inseparable since. The two became known for their mischievous antics, which often got them into trouble. That\'s also at this time that he gained his nickname \'Flea\' (qv), while he was joking with some friends about calling each other with a cartoon name. Around 1979, due to \'Flea\' (qv)\'s obvious musical talent, he was sought out as a recruit for a band formed by his schoolmates, Anthym, with \'Jack Irons\' (qv) (drums), \'Hillel Slovak\' (qv) (guitar) and \'Alain Johannes\' (qv) (vocals and guitar) as members. \'Flea\' (qv) picked up the bass, which he had never played before, and became so good that within a few months he had forged his very own style, which later would make him one of the most famous and talented bass players in the world. After a shaky start the band got a few club gigs but no major breaks. \'Anthony Kiedis\' (qv) was always there to support them, and became the presenter of their shows, that he opened with a few jokes or improvised poems of his own. During the year 1982, \'Flea\' (qv) joined the L.A. punk band Fear. He also landed a small role in the \'Penelope Spheeris\' (qv) film Suburbia (1984) . John Lydon of PIL asked \'Flea\' (qv) to join his band when he left Fear in 1984, but \'Flea\' (qv) decided to rejoin his friends instead. With Kiedis, Slovak and Irons, they had started another band together, the \'Red Hot Chili Peppers\' (qv), which soon earned a good reputation in the Los Angeles underground music scene. \'Flea\' (qv) was married in 1985 to Loesha Zeviar, whose first name he got tattooed above his left nipple - close to his heart. They have since divorced, but still share daughter Clara, born on September 16, 1988. Clara sometimes goes on theroad with her dad, and has done artwork for the Chili Peppers\' t-shirts and promotional material. In 2001, along with friends Pete Weiss and Keith Barry, \'Flea\' (qv) founded the Silverlake Conservatory Of Music, a organization whose aim is to provide affordable music lessons to everyone and to encourage children\'s musical education.',0,'0281359','',NULL,NULL),(135,1,'2009-03-10 21:00:59','2009-03-10 21:00:59','Scott','Flick','scott-flick','','','',0,'2318505','',NULL,NULL),(193,1,'2009-03-10 21:05:00','2009-03-10 21:05:00','Millford','Fortenberry','millford-fortenberry','','','',0,'0287200','',NULL,NULL),(384,1,'2009-03-10 21:18:21','2009-03-10 21:18:21','Vivica A.','Fox','vivica-a-fox','30 July 1964','Indianapolis, Indiana, USA','\'Vivica A. Fox\' (qv) was born in South Bend, Indiana July 30, 1964, and is the daughter of Everlyena, a pharmaceutical technician, and William Fox, a private school administrator. She is of Native American and African American descent and is proud of her heritage. She is a graduate of Arlington High School in Indianapolis, Indiana, and after graduating moved to California to attend college. Vivica went to Golden West College and graduated with an Associate Art degree in Social Sciences. While in California she started acting professionally, first on soap operas such as Generations, Days of Our Lives and The Young and the Restless. In another early role she played as Patti LaBelle\'s fashion designer daughter, Charisse Chamberlain, on the NBC TV series Out All Night. Her first big break was in the film \"Independence Day\" along with Will Smith and also Set It Off. She has earned critical acclaim for her portrayal of Maxine in the 1997 motion picture Soul Food, which netted her MTV Movie Award and NAACP Image Award nominations. In 2000, she was casted in the medical drama City of Angels as Dr. Lillian Price. She has had roles in many other movies ever since such as: Teaching Mrs. Tingle, Two Can Play That Game, and Kill Bill. In 2004, Fox was in an episode of Punk\'d where her pregnant friend pretended to go into labor, but they became angry when a paramedic appeared to care more about taking pictures than delivering the baby. Vivica also took another television role from 2004 to 2006 as she starred in the drama series, Missing on the Lifetime Television Network. In 2007, she was a contender in Dancing with the Stars and stayed until she was voted off in the fourth week. In 1998, \'Vivica A. Fox\' (qv) married singer Christopher Harvest (aka Sixx-Nine) whom she later divorced in June 2002. She also dated rapper 50 cent, however this was a brief relationship.',0,'0000407','images/persons/vivica-a-fox.jpg',135,100),(220,1,'2009-03-10 21:06:07','2009-03-10 21:06:07','Christopher','Francis','christopher-francis','24 April 1973','Hershey, Pennsylvania, USA','',0,'0290113','',NULL,NULL),(63,1,'2009-03-10 20:57:11','2009-03-10 20:57:11','Judy','Frank','judy-frank','26 November 1936','Cincinnati, Ohio, USA','',0,'1869992','',NULL,NULL),(207,1,'2009-03-10 21:05:36','2009-03-10 21:05:36','Issac','Freeman','issac-freeman','','','',0,'0293420','',NULL,NULL),(412,1,'2009-03-10 21:19:42','2009-03-10 21:19:42','Sachiko','Fujii','sachiko-fujii','','','',0,'1534200','',NULL,NULL),(414,1,'2009-03-10 21:19:46','2009-03-10 21:19:46','Ronnie Yoshiko','Fujiyama','ronnie-yoshiko-fujiyama','','','',0,'1531656','',NULL,NULL),(186,1,'2009-03-10 21:04:39','2009-03-10 21:04:39','Ed','Gale','ed-gale','23 August 1963','Plainwell, Michigan, USA','',0,'0301839','images/persons/ed-gale.jpg',140,93),(250,1,'2009-03-10 21:08:20','2009-03-10 21:08:20','Peter','Gallagher','peter-gallagher','19 August 1955','New York City, New York, USA','',0,'0001251','images/persons/peter-gallagher.jpg',136,100),(153,1,'2009-03-10 21:02:21','2009-03-10 21:02:21','Richard','Gant','richard-gant','10 March 1944','San Francisco, California, USA','',0,'0304579','',NULL,NULL),(287,1,'2009-03-10 21:10:09','2009-03-10 21:10:09','Marc','Garber','marc-garber','','','',0,'0304953','',NULL,NULL),(104,1,'2009-03-10 20:59:32','2009-03-10 20:59:32','Eduardo Antonio','Garcia','eduardo-antonio-garcia','','','',0,'0031370','',NULL,NULL),(355,1,'2009-03-10 21:16:47','2009-03-10 21:16:47','Ernest M.','Garcia','ernest-m-garcia','','','',0,'0305201','',NULL,NULL),(191,1,'2009-03-10 21:04:54','2009-03-10 21:04:54','Quinn','Gasaway','quinn-gasaway','','','',0,'0309028','',NULL,NULL),(19,1,'2009-03-10 20:46:24','2009-03-10 20:46:24','James','Gaulke','james-gaulke','','','',0,'0310086','',NULL,NULL),(167,1,'2009-03-10 21:03:03','2009-03-10 21:03:03','Ben','Gazzara','ben-gazzara','28 August 1930','New York City, New York, USA','\'Ben Gazzara\' (qv)\'s screen career began with two critically acclaimed roles as heavies in the late fifties. He turned to television in the sixties but made a big screen comeback with roles in three \'John Cassavetes\' (qv) films in the seventies. The 1980s and 1990s saw Gazzara work more frequently than ever before in character parts. If he never became the leading man his early films and stage work promised he has had a career notable for its longevity. He was born Biagio Anthony Gazzara in New York City in 1930. The son of a Sicilian immigrant laborer, he grew up on New York\'s tough Lower East Side. After seeing \'Laurette Taylor\' (qv) in \"The Glass Menagerie\", Gazzara decided he wanted to become an actor. He studied engineering (unhappily) but quit after receiving an acting scholarship (he worked under well-known coach \'Erwin Piscator\' (qv)). He then joined the Actors\' Studio where a group of students improvised a play from \'Calder Willingham\' (qv)\'s novel End as a Man. The tale of a brutal Southern Military academy reached Broadway slightly changed in 1953 but with Gazzara still in the principal role. It was a star making part (he won a Theatre World award) and he then played leads in the original productions of \"Cat on a Hot Tin Roof\" (1955) and \"A Hatful of Rain\" (1955) (he was nominated for a Tony). Bigger names \'Paul Newman\' (qv) and \'Don Murray\' (qv) played those last two roles on the big screen but Gazzara made his movie debut in _The Strange One (1957)_ (qv) the film version of \"End as a Man\". The film was a critical but not commercial success. His next role was as the defendant in _Anatomy of a Murder (1959)_ (qv) which was a big hit. He followed this with an Italian venture co-starring \'Anna Magnani\' (qv), _Risate di gioia (1960)_ (qv), two Hollywood films _The Young Doctors (1961)_ (qv) and _Convicts 4 (1962)_ (qv) and then another Italian film _Città prigioniera, La (1962)_ (qv). None of these did much for his career and he turned to television. He appeared in the successful shows _\"Arrest and Trial\" (1963)_ (qv) and _\"Run for Your Life\" (1965)_ (qv). In between, he made _A Rage to Live (1965)_ (qv), a film version of \'John O\'Hara\' (qv)\'s novel. He returned to films in _The Bridge at Remagen (1969)_ (qv) and with a cameo appearance in _If It\'s Tuesday, This Must Be Belgium (1969)_ (qv). His buddy in the cameo was \'John Cassavetes\' (qv) who directed and co-starred with him in _Husbands (1970)_ (qv), a critical success. Gazzara made two more well-received films with his good friend Cassavetes: _The Killing of a Chinese Bookie (1976)_ (qv) and _Opening Night (1977)_ (qv). Gazzara\'s other films in the 1970s were undistinguished apart from the sprawling _Voyage of the Damned (1976)_ (qv) and a rare leading role in director \'Peter Bogdanovich\' (qv)\'s _Saint Jack (1979)_ (qv). _Bloodline (1979)_ (qv) and _They All Laughed (1981)_ (qv) (also directed by Bogdanovich) were only notable because of Gazzara\'s off-screen relationship with co-star \'Audrey Hepburn\' (qv) (ironically, Gazzara had declined to make his screen debut in _War and Peace (1956)_ (qv) starring Hepburn). _Storie di ordinaria follia (1981)_ (qv) was another lead for Gazzara but it received a mixed critical reception. Other big screen roles in the eighties were scarce apart from _Road House (1989)_ (qv), a \'Patrick Swayze\' (qv) vehicle which Gazzara believed out of all his films has been the most repeated on television. He worked much on the small screen, including the ground-breaking television movie _An Early Frost (1985) (TV)_ (qv), playing the father of an AIDS victim. The 1990s saw Gazzarra working like never before, appearing in 38 films! Most were for free-to-air television or cable but he also worked on the big screen in _The Spanish Prisoner (1997)_ (qv), _The Big Lebowski (1998)_ (qv), _Happiness (1998)_ (qv) and _Summer of Sam (1999)_ (qv). His TV work included a guest appearance as an executive assistant attorney in a 2001 episode of _\"Law & Order: Special Victims Unit\" (1999)_ (qv) - a nice touch since _\"Arrest and Trial\" (1963)_ (qv) was the predecessor of _\"Law & Order\" (1990)_ (qv) and its spin-off shows. Gazzara has often returned to the stage throughout his career - in \"The Night Circus\" (1958) (where he met second wife \'Janice Rule\' (qv)), \"Strange Interlude\" (1963), \"Traveller Without Luggage\" (1964), Hughie/Duet (1975) (nominated for a Tony), \"Who\'s Afraid of Virginia Woolf?\" (1976) (again Tony nominated) and \"Shimada\" (1992). He has also worked as a director on episodes his series _\"Run for Your Life\" (1965)_ (qv) and _\"The Name of the Game\" (1968)_ (qv) and the television movies _Columbo: A Friend in Deed (1974) (TV)_ (qv) and _Columbo: Troubled Waters (1975) (TV)_ (qv) featuring his friend \'Peter Falk\' (qv). The unreleased _Oltre l\'oceano (1990)_ (qv) (which he also wrote) is his final film as a director to date. Now in his seventies, Gazzara is still acting. In 2003 he appeared in the independent _Dogville (2003)_ (qv) adding \'Lars von Trier\' (qv) to the list of interesting and acclaimed directors with whom he has worked. There can\'t be many actors who can boast that they have acted in films by \'Otto Preminger\' (qv) (_Anatomy of a Murder (1959)_ (qv)), \'John Cassavetes\' (qv), \'Joel Coen\' (qv) (_Big Lebowksi, The (1998)_ ), \'Spike Lee\' (qv) (_Summer of Sam (1999)_ (qv)) and \'Lars von Trier\' (qv) among others!',0,'0001262','images/persons/ben-gazzara.jpg',138,100),(290,1,'2009-03-10 21:10:21','2009-03-10 21:10:21','Nelson','George','nelson-george','','','',0,'1623378','',NULL,NULL),(147,1,'2009-03-10 21:02:03','2009-03-10 21:02:03','Jimmie Dale','Gilmore','jimmie-dale-gilmore','','','Country-folk singer/songwriter \'Jimmie Dale Gilmore\' (qv) is best known for his unusual fusion of traditional honky-tonk, Hank Williams-ish country stylings with lyrics influenced by Eastern mysticism and philosophy. Born and raised among country musicians in West Texas, Gilmore grew up in Lubbock, a small, dying cattle ranch community that, by chance, has produced some of Texas\' most critically acclaimed musicians, including the great Buddy Holly, folk songstress Nanci Griffith, country superstar Waylon Jennings, and Gilmore\'s friends and collaborators, Joe Ely and Butch Hancock. Part Cherokee, Gilmore\'s look and style have always been somewhat unusual for the honky-tonk milieu. Gilmore briefly attempted a music career after high school, forming the now-legendary Flatlanders with Hancock and Ely, but by 1974 his growing interest in spirituality led him to leave Texas behind - and music along with it - to join a Taoist community in Denver, Colorado. In the \'80s, having developed an aesthetic that merged his love of country with his spiritual interests, Gilmore moved to Austin, Texas to re-initiate his music career, and within a few months was playing regularly around town. He released two independent label records in the late \'80s before Elektra released his breakthrough album \"Spinning Around the Sun\" in 1993. The album made numerous end-of-the-year \'best of\' lists in the media, and Gilmore\'s career was given an extra boost by high profile fans such as David Letterman and Natalie Merchant. Gilmore\'s reputation was further enhanced by the reissue of an out-of-print Flatlanders record made in Nashville in 1972, released by Rounder records in 1991 under the title \'More a Legend Than a Band.\' He has continued to release solo records, and in 2002, reunited with high school buddies Butch Hancock and Joe Ely (the Bruce Springsteen of Texas), to reform the Flatlanders. Gilmore\'s first film appearance was a brief cameo in 1993\'s \'The Thing Called Love,\' an account of young singer/songwriters trying to break into the Nashville music scene, directed by Peter Bogdanovich and starring then-unknown Sandra Bullock and River Phoenix in one of his final roles. In 1996, Gilmore was recruited by his producer, T-Bone Burnett, to appear in the new Coen Brothers film, \'The Big Lebowski,\' on which Burnett was also working as musical director (One of the world\'s foremost authorities on traditional American music, Burnett has collaborated on several Coen films, and was largely responsible for the massively successful \'O Brother, Where Art Thou\' soundtrack). Gilmore appears as Smokey, the \'pacifist\' bowler whom John Goodman\'s Walter threatens to shoot for allegedly stepping \'over the line\' when throwing a strike. The inside joke, of course, is that, as a practicing Taoist, Gilmore is himself a pacifist. Gilmore was also recruited by fan and friend Billy Bob Thornton to contribute to the soundtrack and appear briefly in \"Monster\'s Ball\" singing in a honky-tonk; he has also contributed original music for the soundtrack of Robert Redford\'s \"The Horse Whisperer.\"',0,'0319541','',NULL,NULL),(247,1,'2009-03-10 21:08:12','2009-03-10 21:08:12','Eleanor','Glockner','eleanor-glockner','','','',0,'0322953','',NULL,NULL),(132,1,'2009-03-10 21:00:52','2009-03-10 21:00:52','David A.','Gomez','david-a-gomez','','','',0,'2655188','',NULL,NULL),(159,1,'2009-03-10 21:02:38','2009-03-10 21:02:38','Mike','Gomez','mike-gomez','18 April 1951','Dallas, Texas, USA','',0,'0327059','',NULL,NULL),(138,1,'2009-03-10 21:01:27','2009-03-10 21:09:10','John','Goodman','john-goodman','20 June 1952','St. Louis, Missouri, USA','',0,'0000422','images/persons/john-goodman.jpg',140,98),(285,1,'2009-03-10 21:10:04','2009-03-10 21:10:04','David','Gould','david-gould','','','',0,'0332349','',NULL,NULL),(221,1,'2009-03-10 21:06:10','2009-03-10 21:06:10','Geoffrey','Gould','geoffrey-gould','29 April 1957','Brooklyn, New York City, New York, USA','',0,'0332380','',NULL,NULL),(353,1,'2009-03-10 21:16:42','2009-03-10 21:16:42','Aimee','Graham','aimee-graham','20 September 1971','Milwaukee, Wisconsin, USA','',0,'0333888','images/persons/aimee-graham.jpg',138,100),(99,1,'2009-03-10 20:59:19','2009-03-10 20:59:19','Beth','Grant','beth-grant','18 September 1949','Gadsden, Alabama, USA','Raised in the South, \'Beth Grant\' (qv) moved frequently as a child and enjoys claiming several towns and cities in Alabama, Georgia, and North Carolina as home. She was a Page in the North Carolina Senate, attended the North Carolina Governor\'s School for Gifted and Talented students, and received a governor\'s appointment at the age of nineteen. Grant was president of the East Carolina University College Democrats for two years, receiving the Outstanding College Democrat Award from then Senator \'Edmund Muskie\' (qv). She is a graduate of ECU with a BFA in Acting and Directing. One of Hollywood\'s most recognizable faces, she has starred in over seventy feature films including this year\'s Best Picture Academy Award nominated _Little Miss Sunshine (2006)_ (qv). She delighted in creating the character you love to hate, Pageant Official Jenkins, making Grant the happy recipient of the Screen Actors Guild Award for Best Ensemble Cast In A Feature Film. Other popular studio pictures include _Rock Star (2001)_ (qv), _The Rookie (2002/I)_ (qv), _Matchstick Men (2003)_ (qv), _Rain Man (1988)_ (qv), _City Slickers II: The Legend of Curly\'s Gold (1994)_ (qv), _To Wong Foo Thanks for Everything, Julie Newmar (1995)_ (qv), and _A Time to Kill (1996)_ (qv) and _Speed (1994/I)_ (qv). Grant has appeared in over thirty plays from Los Angeles to New York including two productions at The Ahmanson, \'William Inge\' (qv)\'s \"Picnic\" (with \'Jennifer Jason Leigh\' (qv)) and \'Tennessee Williams\' (qv)\' \"Summer and Smoke\" (with \'Christopher Reeve\' (qv)) under the direction of Circle Rep\'s \'Marshall W. Mason\' (qv). She has created roles in the world premieres of \"Holy Ghosts\" by \'Romulus Linney\' (qv), \"On A Southern Journey\" by \'Maya Angelou\' (qv), \"The Day Emily Married\" by \'Horton Foote\' (qv), \"Sordid Lives\" and \"The Trials and Tribualtions Of A Trailer Trash Housewife\" by \'Del Shores\' (qv). Grant is a recipient of The Los Angeles Drama Critics Award and The L.A. Stage Alliance Award and The Backstage West Garlan Award for Best Actress in a Leading Role for \'Del Shores\' (qv)\' the Trials And Tribulations of a Trailer Trash Housewife. On television, Grant was a favorite on the _\"Six Feet Under\" (2001)_ (qv) episode, \"The Rapture.\" This season she married then cheated on Jason Lee on _\"My Name Is Earl\" (2005)_ (qv). She has been a regular or recurred on many television shows including _\"Malcolm in the Middle\" (2000)_ (qv), _\"King of the Hill\" (1997)_ (qv), _\"Yes, Dear\" (2000)_ (qv), _\"Everwood\" (2002)_ (qv), _\"Delta\" (1992)_ (qv), and _\"Wonderfalls\" (2004)_ (qv). She has guest-starred in hundreds of hit television series such as _\"F·r·i·e·n·d·s\" (1994)_ (qv), _\"The X Files\" (1993)_ (qv), _\"Angel\" (1999)_ (qv), and _\"CSI: Crime Scene Investigation\" (2000)_ (qv). Grant starred in \'Tony Hillerman\' (qv)\'s _A Thief of Time (2004) (TV)_ (qv), produced by \'Robert Redford\' (qv) (PBS), _The Image (1990) (TV)_ (qv) with \'Albert Finney\' (qv) (HBO), _Switched at Birth (1991) (TV)_ (qv) and _Fall from Grace (1990) (TV)_ (qv) (NBC). Grant has produced documentaries, comedy reviews, and television; she has run a theatre company, raised money for schools and was a celebrity coordinator for \'Jimmy Carter\' (qv)\'s first presidential campaign. But what she really loves to do is act. Grant is a student of \'Milton Katselas\' (qv) at The Beverly Hills Playhouse. She is married to actor \'Michael Chieffo\' (qv), they have one child, Mary Chieffo.',0,'0335275','images/persons/beth-grant.jpg',139,93),(331,1,'2009-03-10 21:12:46','2009-03-10 21:12:46','Mi Mi','Green-Fann','mi-mi-green-fann','','','',0,'1565027','',NULL,NULL),(117,1,'2009-03-10 21:00:10','2009-03-10 21:00:10','Mathew','Greer','mathew-greer','','','',0,'0339472','images/persons/mathew-greer.jpg',107,100),(232,1,'2009-03-10 21:07:26','2009-03-10 21:07:26','Joe','Grifasi','joe-grifasi','14 June 1944','Buffalo, New York, USA','',0,'0341055','images/persons/joe-grifasi.jpg',128,100),(252,1,'2009-03-10 21:08:25','2009-03-10 21:08:25','Barbara Ann','Grimes','barbara-ann-grimes','','','',0,'0342187','',NULL,NULL),(311,1,'2009-03-10 21:11:55','2009-03-10 21:11:55','Greg','Grunberg','greg-grunberg','11 July 1966','Los Angeles, California, USA','',0,'0342399','images/persons/greg-grunberg.jpg',125,100),(82,1,'2009-03-10 20:58:06','2009-03-10 20:58:06','Matt','Gulbranson','matt-gulbranson','26 March 1964','Grand Forks, North Dakota, USA','Matthew James Gulbranson has been with the Screen Actors\' Guild since 1995. He was born in Grand Forks, North Dakota, the second of four sons to Darryl and Mary Gulbranson - both college professors. Matt was named 1st Team All State in Basketball and graduated from Fairmount High School fourth in his class. Matt graduated from the United States Military Academy at West Point, New York, where he played wide receiver on Brigade championship football team and received a Bachelor of Science degree in Russian language. He was commissioned a Second Lieutenant in the Military Police Corps and was eventually promoted to Lieutenant Colonel. Matt served as platoon leader in the 9th Military Police Company at Fort Lewis, Washington and deployed to Saudi Arabia as the Law and Order Operations Officer during operation Desert Storm where he later served as Deputy Provost Marshall for General Pagonis. After Desert Storm, he attended the Military Police Officer Advanced Course at Fort McClellan, Alabama; served as Training Brigade Adjutant and Commander of Company A, 701st Military Police Battalion Company. Matt served as the Deputy Adjutant with the 311th Corps Support Command in West Los Angeles, California, and worked and as the Full Time Support Chief for the 63d Regional Support Command, in Los Alamitos, California. A soldier statesman, he served as a Deputy Site Commander with the On-Site Inspection Agency, where he enforced U.S. treaty rights in Russia, and was the Chief, Office of Defense Cooperation, at the U.S. Embassy in Moldova. He served as the liaison officer between the Russian Airborne Brigade and US Stabilization Forces Commander in Bosnia and was the U.S. Army Attache in Azerbaijan, Armenia, and Georgia. At the Pentagon, he was responsible for analyzing nuclear weapons programs world-wide for the Chairman, Joint Chiefs of Staff. Matt has three brothers - Eric, Daniel and Jack Gulbranson, and four children - Ashley, Gregory, Camryn, and Kirsten Gulbranson.',0,'2782855','images/persons/matt-gulbranson.jpg',110,100),(101,1,'2009-03-10 20:59:24','2009-03-10 20:59:24','Kit','Gwin','kit-gwin','13 August 1953','Melrose, Massachusetts, USA','',0,'0350337','images/persons/kit-gwin.jpg',140,100),(279,1,'2009-03-10 21:09:50','2009-03-10 21:09:50','David','Hagar','david-hagar','','','',0,'0353264','',NULL,NULL),(172,1,'2009-03-10 21:03:19','2009-03-10 21:03:19','Jerry','Haleva','jerry-haleva','26 May 1946','USA','',0,'0355062','',NULL,NULL),(301,1,'2009-03-10 21:11:14','2009-03-10 21:11:14','Irma P.','Hall','irma-p-hall','3 June 1935','Beaumont, Texas, USA','',0,'0355659','',NULL,NULL),(443,1,'2009-03-10 21:25:16','2009-03-10 21:25:16','Craig','Hamann','craig-hamann','','','',0,'0357326','',NULL,NULL),(209,1,'2009-03-10 21:05:41','2009-03-10 21:05:41','Robert','Hamlett','robert-hamlett','','','',0,'0358255','',NULL,NULL),(69,1,'2009-03-10 20:57:29','2009-03-10 20:57:29','Lori','Hammel','lori-hammel','','Minneapolis, Minnesota, USA','',0,'2629087','images/persons/lori-hammel.jpg',125,100),(300,1,'2009-03-10 21:11:11','2009-03-10 21:11:11','Tom','Hanks','tom-hanks','9 July 1956','Concord, California, USA','Born in California, \'Tom Hanks\' (qv) grew up in what he calls a \"fractured\" family. His parents were pioneers in the development of marriage dissolution law in that state, and Tom moved around a lot, living with a succession of step-families. No problems, no abuse, no alcoholism, just a confused childhood. He had no acting experience in college and, in fact, credits the fact that he couldn\'t get cast in a college play with actually starting his career - he went downtown, auditioned for a community theater play, was invited by the director of that play to go to Cleveland, and there his acting career started. He met his second wife, actress \'Rita Wilson\' (qv) on the set of the his television show _\"Bosom Buddies\" (1980)_ (qv), she appeared in one episode in the second season (1981) - they have two children and Tom has another son and daughter by his first wife. In 1996, he made his first step behind the camera, directing as well as starring and writing the film _That Thing You Do! (1996)_ (qv).',0,'0000158','images/persons/tom-hanks.jpg',140,100),(385,1,'2009-03-10 21:18:25','2009-03-10 21:18:25','Daryl','Hannah','daryl-hannah','3 December 1960','Chicago, Illinois, USA','\'Daryl Hannah\' (qv) was born and raised in Chicago, Illinois. She attend the University of Southern California (USC) and made her film debut in the \'Brian De Palma\' (qv) film _The Fury (1978)_ (qv). She starred in such films as \'Ron Howard\' (qv)\'s _Splash (1984)_ (qv) and \'Herbert Ross\' _Steel Magnolias (1989)_ (qv). She won the Jury Award from the Berlin International Film Festival for Best Short in 1994 for a film titled _The Last Supper (1994)_ (qv), which she directed, wrote, and produced.',0,'0000435','images/persons/daryl-hannah.jpg',140,100),(200,1,'2009-03-10 21:05:21','2009-03-10 21:05:21','April','Hardcastle','april-hardcastle','','','',0,'0362049','',NULL,NULL),(113,1,'2009-03-10 20:59:59','2009-03-10 20:59:59','Doris','Hargrave','doris-hargrave','','','',0,'0362938','',NULL,NULL),(380,1,'2009-03-10 21:17:53','2009-03-10 21:17:53','Annette','Harper','annette-harper','','','',0,'0363811','images/persons/annette-harper.jpg',133,100),(95,1,'2009-03-10 20:59:02','2009-03-10 20:59:02','Tess','Harper','tess-harper','15 August 1950','Mammoth Spring, Arkansas, USA','Attended Arkansas State University at Beebe, Arkansas, where she had leading roles in the musical \"Little Mary Sunshine\" and \"Arsenic and Old Lace.\" During the late 1960s, she did \"street\" acting in the theme parks, Dogpatch, USA, in Jasper, AR, and Silver Dollar City in Branson, MO. She was discovered while doing theater work in Dallas, TX.',0,'0002128','',NULL,NULL),(92,1,'2009-03-10 20:58:52','2009-03-10 20:58:52','Woody','Harrelson','woody-harrelson','23 July 1961','Midland, Texas, USA','\'Woody Harrelson\' (qv) grew up in Lebanon, Ohio. He received degrees in theatre arts and English from Hanover College, Indiana. His career began in New York theatre as an understudy in \'Neil Simon\' (qv)\'s \"Biloxi Blues\". Within months, he was cast as Woody on the hit TV series, _\"Cheers\" (1982)_ (qv). Due to conflicts with his TV schedule, Harrelson found it difficult to cross-over to films. His first appearance was in _Wildcats (1986)_ (qv) with \'Goldie Hawn\' (qv). His next movie, _Cool Blue (1988) (V)_ (qv), was releases directly to video. He followed with two cameos, which went uncredited. Meanwhile, he continued to be active in theatre in L.A.: \"Zoo Story\", \"2 on 2\" (his own basketball drama), \"Brooklyn Laundry\" (with \'Glenn Close\' (qv) and \'Laura Dern\' (qv)). In 1991, _Doc Hollywood (1991)_ (qv) gave him his first widely-seen movie role. The following year, _White Men Can\'t Jump (1992)_ (qv), with \'Wesley Snipes\' (qv) established him as a box-office draw. He followed immediatly with two hits, _Indecent Proposal (1993)_ (qv) and _Natural Born Killers (1994)_ (qv). Harrelson lives with his former assistant, Laura Louie, and their 3 daughters.',0,'0000437','images/persons/woody-harrelson.jpg',130,100),(349,1,'2009-03-10 21:16:32','2009-03-10 21:16:32','John','Hawkes','john-hawkes','11 September 1959','Alexandria, Minnesota, USA','Born and raised in rural Minnesota, \'John Hawkes\' (qv) moved to Austin, Texas to begin his career as an actor and musician. He co-founded the Big State Productions Theatre Company and appeared in the group\'s original play, In the West, at the Kennedy Center in Washington, D.C. John starred in the critically acclaimed Me and You and Everyone We Know, which received wide praise and was awarded the special jury prize at the Sundance Film Festival as well as the Camera d\'Or Award at the Cannes Film Festival. Additional feature credits include, the Lion\'s Gate film _A Slipping-Down Life (1999)_ (qv) with \'Guy Pearce\' (qv), the psychological thriller _Identity (2003)_ (qv) alongside \'John Cusack\' (qv) and \'Ray Liotta\' (qv), _Miami Vice (2006)_ (qv) with \'Jamie Foxx\' (qv) and \'Colin Farrell\' (qv), _Playing God (2004)_ (qv), _The Perfect Storm (2000)_ (qv), _From Dusk Till Dawn (1996)_ (qv) and _Hardball (1997)_ (qv). Hawkes also starred and co-produced the independent film _Buttleman (2002)_ (qv) for which he received a Breakout Performance Award at the 2004 Sedona Film Festival and a Special Jury Prize at the 2003 Deep Ellum Film Festival. Hawkes\' television credits include a lead role in the critically acclaimed HBO series, _\"Deadwood\" (2004)_ (qv) in which he played Sol Star, a spirited entrepreneur in a lawless town. John lives in Los Angeles where he writes, records and performs music with his band, King Straggler.',0,'0370035','',NULL,NULL),(365,1,'2009-03-10 21:17:14','2009-03-10 21:17:14','Rosalia','Hayakawa','rosalia-hayakawa','','','',0,'0370563','',NULL,NULL),(339,1,'2009-03-10 21:15:52','2009-03-10 21:15:52','Salma','Hayek','salma-hayek','2 September 1966','Coatzacoalcos, Veracruz, Mexico','The amazing \'Salma Hayek\' (qv) was born on September 2, 1966, in the oil boomtown of Coatzacoalcos, Mexico. Hayek has freely admitted that she and her brother, Sami, were spoiled rotten by her well-to-do Lebanese-Mexican businessman father and her Mexican-born opera-singing mother. After having seen _Willy Wonka & the Chocolate Factory (1971)_ (qv) in a local movie theatre, Salma decided she wanted to become an actress. Her education included a stint at a New Orleans convent school, where she pulled pranks on the nuns by setting their clocks back three hours. She was soon expelled. Only after attending Mexico City\'s Universidad Iberoamericana did she feel ready to pursue acting seriously. She soon landed the title role in _\"Teresa\" (1989)_ (qv), a hugely successful soap opera which earned her the star status in her native Mexico. However, anxious to make films and to explore her talent and passion, Hayek left both _\"Teresa\" (1989)_ (qv) and Mexico in 1991. Heartbroken fans spread rumors that she was having a secret affair with Mexico\'s president and left to escape his wife\'s wrath. At long last, Salma made her way to Los Angeles. The 24 year old actress approached Hollywood with naïve enthusiasm, and quickly learned that Latin actresses were, if at all, typecast as the mistress maid or local prostitute. By late 1992, Hayek had landed only bit parts. She appeared on _\"Street Justice\" (1991)_ (qv), _\"The Sinbad Show\" (1993)_ (qv), _\"Nurses\" (1991)_ (qv), and as a sexy maid on the HBO series _\"Dream On\" (1990)_ (qv). She also had one line in the \'Allison Anders\' (qv) film _Mi vida loca (1993)_ (qv). Feeling under-appreciated by Anglo filmmakers, Hayek vented her frustrations on comedian \'Paul Rodriguez\' (qv)\'s late-night Spanish-language talk show in 1992. \'Robert Rodriguez\' (qv) and his producer wife \'Elizabeth Avellan\' (qv) happened to be watching and were immediately smitten with the intelligent, opinionated young woman. He soon gave her her big break--to star opposite \'Antonio Banderas\' (qv) in the now cult classic _Desperado (1995)_ (qv), which put her on Hollywood\'s map. The moviegoers proved to be as dazzled with Hayek as he had been. After her break, she was cast again by Rodriguez to star in his _From Dusk Till Dawn (1996)_ (qv). Although her vampy role opposite \'George Clooney\' (qv) and \'Quentin Tarantino\' (qv) was a small one, it was a good credit to her box office name. Hayek\'s first star billing came later that year with _Fools Rush In (1997)_ (qv) opposite _\"F·r·i·e·n·d·s\" (1994)_ (qv) actor \'Matthew Perry\' (qv). The film was a modest hit, and Hayek continued to rise her star in both commercial and artistic films such as: _Breaking Up (1997)_ (qv) with an unknown \'Russell Crowe\' (qv); _54 (1998)_ (qv) about the rise and fall of the legendary New York club; _Dogma (1999)_ (qv), playing the muse in a somewhat odd comedy co-starring \'Matt Damon\' (qv) and \'Chris Rock\' (qv); _In the Time of the Butterflies (2001) (TV)_ (qv), the small artistic film which won Hayek an ALMA award as best actress; and the 1999 summer blockbuster _Wild Wild West (1999)_ (qv). Her production company \"Ventanarosa\" produced the 1999 Mexican feature film _Coronel no tiene quien le escriba, El (1999)_ (qv), which was shown at the Cannes Film Festival and selected as Mexico\'s official Oscar entry for best foreign film. The new millennium started out quietly around Salma as she was preparing to produce and star in her dream role, that of \'Frida Kahlo\' (qv), the legendary Mexican painter whom Salma had been admiring her entire life and whose story she wanted to bring to the big screen ever since her arrival in Hollywood. It finally happened in 2002. _Frida (2002)_ (qv), co-produced by Hayek, was a beautifully made film overflowing with passion and enthusiasm, with terrific performances from Salma and \'Alfred Molina\' (qv) as Kahlo\'s cheating husband \"Diego Rivera\". On the side was an entourage of stars including \'Antonio Banderas\' (qv), \'Ashley Judd\' (qv), \'Geoffrey Rush\' (qv), \'Edward Norton\' (qv) and \'Valeria Golino\' (qv). The picture was a hit and was nominated for six Oscars, including best actress for Hayek, who became the first Latin actress to be nominated in the category, and won the awards for make-up and its brilliant original score by \'Elliot Goldenthal\' (qv). Hayek established herself as the serious actress that she is and, in the same year, expanded her horizons, directing _The Maldonado Miracle (2003) (TV)_ (qv), which was shown at the Sundance Film festival. In 2003, she starred in the final of Rodriguez\'s \"Desperado\" trilogy _Once Upon a Time in Mexico (2003)_ (qv), again opposite Banderas, and has just finished _After the Sunset (2004)_ (qv) opposite \'Pierce Brosnan\' (qv) and _Ask the Dust (2006)_ (qv) opposite \'Colin Farrell\' (qv). Both are scheduled for release in early 2005. In the works are \'Robert Altman\' (qv)\'s \"Paint\" and _Bandidas (2006)_ (qv) in which she will star with her friend \'Penélope Cruz\' (qv).',0,'0000161','images/persons/salma-hayek.jpg',140,100),(297,1,'2009-03-10 21:10:39','2009-03-10 21:10:39','Steve','Head','steve-head','12 October 1965','Chicago, Illinois, USA','',0,'1529088','',NULL,NULL),(109,1,'2009-03-10 20:59:45','2009-03-10 20:59:45','Johnnie','Hector','johnnie-hector','24 April 1975','Roswell, New Mexico, USA','',0,'2094313','images/persons/johnnie-hector.jpg',137,99),(61,1,'2009-03-10 20:57:06','2009-03-10 20:57:06','Carmen M.','Herlihy','carmen-m-herlihy','','','',0,'2736268','',NULL,NULL),(352,1,'2009-03-10 21:16:39','2009-03-10 21:16:39','Johnny \'Vatos\'','Hernandez','johnny-vatos-hernandez','','','',0,'0379608','',NULL,NULL),(133,1,'2009-03-10 21:00:54','2009-03-10 21:00:54','Milton','Hernandez','milton-hernandez','','','',0,'2655182','',NULL,NULL),(345,1,'2009-03-10 21:16:17','2009-03-10 21:16:17','Brenda','Hillhouse','brenda-hillhouse','','','',0,'0384936','',NULL,NULL),(235,1,'2009-03-10 21:07:37','2009-03-10 21:07:37','I.M.','Hobson','im-hobson','11 August 1935','Illinois, USA','',0,'0387734','',NULL,NULL),(316,1,'2009-03-10 21:12:09','2009-03-10 21:12:09','Aldis','Hodge','aldis-hodge','','','',0,'0388038','',NULL,NULL),(141,1,'2009-03-10 21:01:43','2009-03-10 21:01:43','Philip Seymour','Hoffman','philip-seymour-hoffman','23 July 1967','Fairport, New York, USA','Film and stage actor and theater director \'Philip Seymour Hoffman\' (qv) was born in the Rochester, New York, suburb of Fairport on July 23, 1967. After becoming involved in high school theatrics, he attended New York University\'s Tisch School of the Arts, graduating with a B.F.A. degree in Drama in 1989. He made his feature film debut in the indie production _Triple Bogey on a Par Five Hole (1991)_ (qv) as Phil Hoffman, and his first role in a major release came the next year in _My New Gun (1992)_ (qv). While he had supporting roles in some other major productions, his breakthrough role came in \'Paul Thomas Anderson\' (qv)\'s _Boogie Nights (1997)_ (qv). He quickly became an icon of indie cinema, establishing a reputation as one of the screen\'s finest actors, in a variety of supporting and second leads in indie and major features, including \'Todd Solondz\' (qv)\'s _Happiness (1998)_ (qv), _Flawless (1999)_ (qv), _The Talented Mr. Ripley (1999)_ (qv), \'Paul Thomas Anderson\' (qv)\'s _Magnolia (1999)_ (qv), _Almost Famous (2000)_ (qv) and _State and Main (2000)_ (qv). He also appeared in supporting roles in such mainstream, big-budget features as _Red Dragon (2002)_ (qv), _Cold Mountain (2003)_ (qv) and the upcoming _Mission: Impossible III (2006)_ (qv). Hoffman is also quite active on the stage. On Broadway, he has earned two Tony nominations, as Best Actor (Play) in 2000 for a revival of \'Sam Shepard\' (qv)\'s \"True West\" and as Best Actor (Featured Role - Play) in 2003 for a revival of \'Eugene O\'Neill\' (qv) (I)\'s \"Long Day\'s Journey into Night\". His other acting credits in the New York theater include \"The Seagull\" (directed by \'Mike Nichols\' (qv) for The New York Shakespeare Festival), \"Defying Gravity\", \"The Merchant of Venice\" (directed by \'Peter Sellars\' (qv)), \"Shopping and F*@%ing\" and \"The Author\'s Voice\" (Drama Desk nomination). He is the Co-Artistic Director of the LAByrinth Theater Company in New York, for which he directed \"Our Lady of 121st Street\" by \'Stephen Adly Guirgis\' (qv). He also has directed \"In Arabia, We\'d All Be Kings\" and \"Jesus Hopped the A Train\" by Guirgis for LAByrinth, and \"The Glory of Living\" by \'Rebecca Gilman\' (qv) at the Manhattan Class Company. Hoffman consolidated his reputation as one of the finest actors under the age of 40 with his turn in the title role of _Capote (2005)_ (qv), for which he won the Los Angeles Film Critics Award as Best Actor. In 2006, he was awarded the Best Actor Oscar for the same role.',0,'0000450','images/persons/philip-seymour-hoffman.jpg',124,100),(218,1,'2009-03-10 21:06:02','2009-03-10 21:06:02','David','Holt','david-holt','','','',0,'0392405','',NULL,NULL),(150,1,'2009-03-10 21:02:13','2009-03-10 21:02:13','James G.','Hoosier','james-g-hoosier','1952','','Jim Hoosier was born in the spring on 1952 to a rural family in West Arundel, Maine. Some of his earliest memories include collecting eggs from the chicken coupe, returning with upwards of 19 or 20 peck marks on his face alone. James lettered in soccer and wrestling at Chevrous High School, where he came under the personal tutilege of Rev. Francis \"Mad Dog\" McManus SJ. Father Frank, as he so affectionately referred to him, taught him the true meaning of wrestling. Later in life, Hoosier grew to be an avid bowler, which made him the obvious choice to play Liam, the silent but deadly, fat guy dancing associate of Jesus \"The Jesus\" Quintano. When the Cohen brothers came calling at his adopted home in Winthrop, Massachusetts\' prestigious Governors Park, He couldn\'t refuse. Today, Jim Hoosier entertains captive audiences with his own one man show, entitled, \"No Father, Don\'t\", which runs every winter at the Cape Cod Playhouse in Hyannis.',0,'0393841','',NULL,NULL),(102,1,'2009-03-10 20:59:27','2009-03-10 20:59:27','Zach','Hopkins','zach-hopkins','22 February 1976','Graham, Texas, USA','',0,'0394308','',NULL,NULL),(54,1,'2009-03-10 20:56:44','2009-03-10 21:04:30','J.R.','Horne','jr-horne','','','',0,'0395020','',NULL,NULL),(291,1,'2009-03-10 21:10:23','2009-03-10 21:10:23','Michael','Houlihan','michael-houlihan','','','',0,'0396549','',NULL,NULL),(9,1,'2009-03-10 20:45:58','2009-03-10 20:45:58','Gary','Houston','gary-houston','','','',0,'0396828','images/persons/gary-houston.jpg',140,93),(410,1,'2009-03-10 21:19:37','2009-03-10 21:19:37','Xiaohui','Hu','xiaohui-hu','','','',0,'1585463','',NULL,NULL),(140,1,'2009-03-10 21:01:38','2009-03-10 21:01:38','David','Huddleston','david-huddleston','17 September 1930','Vinton, Virginia, USA','',0,'0399663','',NULL,NULL),(179,1,'2009-03-10 21:04:14','2009-03-10 21:04:14','Holly','Hunter','holly-hunter','20 March 1958','Conyers, Georgia, USA','\'Holly Hunter\' (qv) was born in Conyers, Georgia, the youngest of seven children whose father was a part-time sporting goods company representative and part-time farmer with a 250 acre farm. Her parents encouraged in her talent at an early age, and her first acting part was as \'Helen Keller\' (qv) in a fifth-grade play. In 1976 she went to Pittsburgh to pursue a degree in drama from Carnegie Mellon University. After graduating in 1980, she went to New York City, where she met playwright \'Beth Henley\' (qv) in a stalled elevator. Hunter went on to get roles in a number of Henley\'s southern gothic plays, including Crimes of the Heart and The Miss Firecracker Contest. In 1982 the actress went to Los Angeles. She landed her first starring role in the movies in the Coen brothers\' _Raising Arizona (1987)_ (qv), a part that is said to have been written with her in mind. She gained stardom in 1987 when she played the driven TV news producer Jane Craig in \'James L. Brooks\' (qv)\' _Broadcast News (1987)_ (qv). In 1993 she earned an Academy Award and worldwide acclaim with her performance as a mute bride to a New Zealand planter in _The Piano (1993)_ (qv).',0,'0000456','images/persons/holly-hunter.jpg',140,89),(304,1,'2009-03-10 21:11:27','2009-03-10 21:11:27','Ryan','Hurst','ryan-hurst','19 June 1976','Santa Monica, California, USA','',0,'0403652','images/persons/ryan-hurst.jpg',140,58),(32,1,'2009-03-10 20:47:02','2009-03-10 20:47:02','Michelle','Hutchison','michelle-hutchison','','','',0,'0404460','images/persons/michelle-hutchison.jpg',80,100),(155,1,'2009-03-10 21:02:27','2009-03-10 21:02:27','Dom','Irrera','dom-irrera','1947','Philadelphia, Pennsylvania, USA','',0,'0410101','',NULL,NULL),(315,1,'2009-03-10 21:12:06','2009-03-10 21:12:06','Amad','Jackson','amad-jackson','','','',0,'1564945','images/persons/amad-jackson.jpg',139,94),(127,1,'2009-03-10 21:00:39','2009-03-10 21:00:39','Richard','Jackson','richard-jackson','27 January 1955','Ballinger, Texas, USA','',0,'1005233','images/persons/richard-jackson.jpg',140,93),(423,1,'2009-03-10 21:20:29','2009-03-10 21:20:29','Samuel L.','Jackson','samuel-l-jackson','21 December 1948','Washington, District of Columbia, USA','\'Samuel L. Jackson\' (qv) usually played bad guys and drug addicts before becoming an action hero, as the character Mitch Henessey, in _The Long Kiss Goodnight (1996)_ (qv) and in _Die Hard: With a Vengeance (1995)_ (qv). From character player to leading man. His performance in _Pulp Fiction (1994)_ (qv) gave him an Oscar nomination for his character Jules Winnfield. He was active in the black student movement. In the seventies he joined the Negro Ensemble Company (together with \'Morgan Freeman\' (qv)). In the eighties he became well known by three movies made by \'Spike Lee\' (qv) - _Do the Right Thing (1989)_ (qv), _Mo\' Better Blues (1990)_ (qv) and _Jungle Fever (1991)_ (qv). He received a Silver Berlin Bear for his part in the movie _Jackie Brown (1997)_ (qv) as Ordell Robbi.',0,'0000168','images/persons/samuel-l-jackson.jpg',105,100),(83,1,'2009-03-10 20:58:08','2009-03-10 20:58:08','Joe','Jagatic','joe-jagatic','','','',0,'0415551','images/persons/joe-jagatic.jpg',67,100),(275,1,'2009-03-10 21:09:39','2009-03-10 21:09:39','Frank','Jeffreys','frank-jeffreys','','','',0,'0420365','',NULL,NULL),(47,1,'2009-03-10 20:56:24','2009-03-10 20:56:24','Richard','Jenkins','richard-jenkins','4 May 1947','DeKalb, Illinois, USA','',0,'0420955','images/persons/richard-jenkins.jpg',140,93),(129,1,'2009-03-10 21:00:44','2009-03-10 21:00:44','Caleb','Jones','caleb-jones','','','',0,'2655177','',NULL,NULL),(105,1,'2009-03-10 20:59:34','2009-03-10 20:59:34','Gene','Jones','gene-jones','','','',0,'0428122','images/persons/gene-jones.jpg',112,100),(177,1,'2009-03-10 21:03:36','2009-03-10 21:03:36','Robin','Jones','robin-jones','','','',0,'1326017','images/persons/robin-jones.jpg',123,100),(89,1,'2009-03-10 20:58:41','2009-03-10 20:58:41','Tommy Lee','Jones','tommy-lee-jones','15 September 1946','San Saba, Texas, USA','Born in San Saba, Texas, the son of Clyde C. and Lucille Marie (Scott) Jones, \'Tommy Lee Jones\' (qv) worked in underwater construction and on an oil rig. He attended St. Mark\'s School of Texas, a prestigious prep school for boys in Dallas, on a scholarship, and went to Harvard on another scholarship.He roomed with future Vice President \'Al Gore\' (qv) and played offensive guard in the famous 29-29 Harvard-Yale football game of \'68 known as \"The Tie.\" He received a B.A. in English literature and graduated cum laude from Harvard in 1969. Following college, he moved to New York and began his theatrical career on Broadway in \"A Patriot for Me\" (1969). In 1970, he made his film debut in _Love Story (1970)_ (qv). While living in New York, he continued to appear in various plays, both on- and off-Broadway: \"Fortune and Men\'s Eyes\" (1969); \"Four on a Garden\" (1971); \"Blue Boys\" (1972); \"Ulysses in Nighttown\" (1974). During this time, he also appeared on a daytime soap opera, _\"One Life to Live\" (1968)_ (qv) as Dr. Mark Toland from 1971-75. He moved with wife \'Kate Lardner\' (qv), granddaughter of short-story writer/columnist \'Ring Lardner\' (qv), and her two children from a previous marriage, to Los Angeles. There he began to get some roles on television: _\"Charlie\'s Angels\" (1976)_ (qv) (pilot episode); _Smash-Up on Interstate 5 (1976) (TV)_ (qv); and The Amazing \'Howard Hughes\' (qv) (1977) (TV). While working on the movie _Back Roads (1981)_ (qv), he met and fell in love with Kimberlea Cloughley, whom he later married. More roles in television--both on network and cable--stage and film garnered him a reputation as a strong, explosive, thoughtful actor who could handle supporting as well as leading roles. He made his directorial debut in _The Good Old Boys (1995) (TV)_ (qv) on TNT. In addition to directing and starring in the film, he co-wrote the teleplay (with \'J.T. Allen\' (qv)). The film, based on \'Elmer Kelton\' (qv)\'s novel, is set in west Texas where Jones has strong family ties. Consequently, this story of a cowboy facing the end of an era has special meaning for him.',0,'0000169','images/persons/tommy-lee-jones.jpg',137,100),(366,1,'2009-03-10 21:17:16','2009-03-10 21:17:16','Janine','Jordae','janine-jordae','','','',0,'0429804','',NULL,NULL),(309,1,'2009-03-10 21:11:49','2009-03-10 21:11:49','Walter K.','Jordan','walter-k-jordan','29 April 1964','Nashville, Tennessee, USA','',0,'0430219','images/persons/walter-k-jordan.jpg',140,100),(131,1,'2009-03-10 21:00:49','2009-03-10 21:00:49','Angel H. Alvarado','Jr.','angel-h-alvarado-jr','','','',0,'2655184','',NULL,NULL),(222,1,'2009-03-10 21:06:13','2009-03-10 21:06:13','Nathaniel Lee','Jr.','nathaniel-lee-jr','10 September 1989','Jackson, Mississippi, USA','Actor \'Nathaniel Lee Jr.\' (qv) got his career started in 1996 at the age of six in his home town of Clinton, MS where he was involved in several community plays. In 1998 Nathaniel got a co-starring role alongside Frankie Muniz in the feature film \"My Dog Skip\". He played as \"Sammy\". Nathaniel appeared in \"O Brother Where Art Thou\"? alongside George Clooney where he played as one of the \"Ice Boys\". He played as \"Talmadge\" in the PBS movie titled \"The Ponder Heart\" alongside Peter McNicol, Jennifer Lewis and JoBeth Williams. It was not until Nathaniel moved to California that he got his first starring lead role. Nathaniel\'s first starring lead role came in December 2001 at the age of twelve, where he played the role of \"Jr.\" in a Martin Scorsese production called \"The Blues\". The Blues is a seven part series made for PBS. The episode that Nathaniel stars in is called: \"Warming By The Devil\'s Fire\". This film was directed by Charles Burnett. Nathaniel starred as \"Anthony\" in a Disney original film titled: \"Tiger Cruise\". He also played in \"Art School Confidential.\" Nathaniel has done several national commercials. Nathaniel is now in high school and a member of the \'Best Buddies\' club and also a member of his school\'s marching, and jazz bands where he plays bass and quad drums. He has played for and still plays for different churches. Nathaniel plays drums, bass guitar, lead guitar, and piano. Nathaniel is also a music producer. Although he loves all types of music, gospel with a mix of blues catches his interest the most. Nathaniel along with his brother: actor/comedian/rapper/singer Daniel Curtis Lee has a Gospel album titled \"Warming\". Nathaniel played all the instruments on this album.',0,'1074299','images/persons/nathaniel-lee-jr.jpg',140,93),(208,1,'2009-03-10 21:05:39','2009-03-10 21:05:39','Wilson Waters','Jr.','wilson-waters-jr','1931','','',0,'0914024','',NULL,NULL),(261,1,'2009-03-10 21:08:54','2009-03-10 21:08:54','Jay','Kapner','jay-kapner','','','',0,'0438448','',NULL,NULL),(84,1,'2009-03-10 20:58:11','2009-03-10 20:58:11','Richard','Karn','richard-karn','17 February 1956','Seattle, Washington, USA','Son of Gene amd Louise. Has a sister Sue. He did his first acting in fifth grade. Has done many off-Brodway preformances. Born in Seattle, Washington. Spent 6 months in England, and went to University of Washington.',0,'0439781','images/persons/richard-karn.jpg',140,91),(438,1,'2009-03-10 21:25:02','2009-03-10 21:25:02','Linda','Kaye','linda-kaye','','','',0,'0443344','images/persons/linda-kaye.jpg',135,100),(395,1,'2009-03-10 21:19:01','2009-03-10 21:19:01','Yuki','Kazamatsuri','yuki-kazamatsuri','15 August 1953','Tokyo, Japan','',0,'0443569','',NULL,NULL),(148,1,'2009-03-10 21:02:06','2009-03-10 21:02:06','Jack','Kehler','jack-kehler','','','',0,'0444940','images/persons/jack-kehler.jpg',138,100),(335,1,'2009-03-10 21:15:27','2009-03-10 21:23:58','Harvey','Keitel','harvey-keitel','13 May 1939','Brooklyn, New York, USA','Came to prominence in the early films of \'Martin Scorsese\' (qv) after working in theatre for around ten years, particularly _Mean Streets (1973)_ (qv) and _Taxi Driver (1976)_ (qv). Faded into anonymity in the eighties even though he turned in some impressive performances in films by some of America\'s leading directors. He re-emergered into star status with his role as Mr. White in \'Quentin Tarantino\' (qv)\'s _Reservoir Dogs (1992)_ (qv), \'Abel Ferrara\' (qv)\'s _Bad Lieutenant (1992)_ (qv), _The Piano (1993)_ (qv) 0110912.',0,'0000172','images/persons/harvey-keitel.jpg',136,100),(15,1,'2009-03-10 20:46:14','2009-03-10 21:03:24','Warren','Keith','warren-keith','','','',0,'0445316','images/persons/warren-keith.jpg',122,100),(411,1,'2009-03-10 21:19:40','2009-03-10 21:19:40','Ambrosia','Kelley','ambrosia-kelley','4 October 1995','Corpus Christi, Texas, USA','Ambrosia was born on October 4, 1995. Her Entertainment career began in September 1999 ( a month shy of being 4 years old), when her Aunt Crystal notified Ambrosia\'s Mom Annette and Grandma Arcy of an open call by a local Agency in her hometown of Corpus Christi, Texas. The Agency at the time was called Infinity Modeling Agency. Infinity signed her on immediately because a trip to Hollywood was in the works to attend IMTA Competitions. So off to Hollywood in January 2000. Ambrosia had 38 callbacks from Agencies and Management Agencies. By the next month, Mom and Grandma had moved to LA to pursue Ambrosia\'s new found career. Ambrosia booked her very first audition ever in Hollywood (February 2000), a TV Sitcom that was called \"Polpular\" on the WB. She became a SAG Member right away. Ambrosia has been blessed to have worked with the most talented Celebrities in Hollywood. She performed on stage at the AMA\'s with one of her idols...Jennifer Lopez, worked with Uma Thurman and Vivica A. Fox, which was directed by the amazing Quentin Tarantino in \"Kill Bill, Vol. 1\", she worked with Regina King, Loretta Devine, Chris Brown and a wonderful cast and another amazing Director Preston A. Whitmore II in the 2007 Film \"This Christmas\". Ambrosia has had co-starring roles in TV shows like...CSI-Miami, The Parkers, Half & Half, Jimmy Kimmel Live, Mad TV, Popular and a 2002 Pilot \"Astronauts\". She has done many national commercials, print, runway, and videos. Now, Ambrosia has started a new venture in the music side of the industry. She has written and recorded her own original songs. With God\'s blessings and her Grandma\'s continued pursue of Ambrosia\'s success and Ambrosia\'s family and friends continued support, Ambrosia will be a star!',0,'1549953','images/persons/ambrosia-kelley.jpg',140,96),(85,1,'2009-03-10 20:58:13','2009-03-10 20:58:13','Ron','Kidd','ron-kidd','','','',0,'2734694','',NULL,NULL),(180,1,'2009-03-10 21:04:18','2009-03-10 21:04:18','Chris Thomas','King','chris-thomas-king','14 October 1962','Baton Rouge, Louisiana, USA','Multi-talented Grammy Award-winning blues artist, producer, composer and actor \'Chris Thomas King\' (qv) was born in 1962. His father, Tabby Thomas is a well-respected blues musician and owner of the famed Baton Rouge blues club Tabby\'s Blues Box and Heritage Hall. He grew up among the finest blues musicians in the genre at his father\'s blues club and began touring with artists like Buddy Guy and B. B. King in his teens. His music was not only influenced by the blues, but by early hip-hop and country music, styles he fuses to create his own unique sound. He writes, arranges, sings and plays all instruments on most of his recordings and produces them as well in his New Orleans recording studio. Chris is the most successful blues musician of his generation having sold more than ten million records in the United States. As an entrepreneur, Chris took control of his master recordings in the early 1900s, founding the New Orleans record company 21st Century Blues Records to promote a more authentic image and sound than was promoted at most corporate record labels at the time. He coined and trademarked the phrase \"21st. Century Blues\" in 1993. He owns and manages his own recording studio, 21st. Century Blues Studios, where he produces not only his own music but music for motion pictures. In 2002, 21st. Century Blues Records signed the New Orleans Ninth Ward blues duo the 21CB Boyz (Kipori \"Baby Wolf\" Woods and spoken word artist Myself) and the London, England based Nublues. Chris\'s latest collection is entitled Live on Beale Street, which was released in April, 2008. As a respected actor and film composer, Chris garnered high praise for his role as Delta blues man Tommy Johnson in his film debut O Brother, Where Art Thou? (2000) and won several awards, including Country Music and Grammy Awards for his contribution to the score. He followed up this success with a strong supporting role in the Oscar Winning Ray Charles biopic, Ray, playing band leader Lowell Fulson and scoring the music for the movie with Ray Charles. He played the role of Blind Willie Johnson in the award winning Martin Scorsese PBS series The Blues and has been featured in or produced and starred in a number of other films and documentaries. He plays Detective Storm Anderson, Steven Seagal\'s police partner, in Kill Switch an action thriller which will be released on DVD October 7, 2008. A record label executive with over fifteen years experience, Chris has not only innovated blues music but the way it is packaged and sold in the new digital record business. Having the vision to see the shift from physical sales to downloading, Chris invested time and money in developing relationships in Los Angeles with Hollywood producers to license music for film and television creating new revenue streams and world wide brand awareness for his 21st. Century Blues label. Co-founder of a non-profit charity, The Blues Project, Chris has helped to raise thousands of dollars for Louisiana Charities and New Orleans musicians affected by Katrina. He also serves as a board member for the Grammy Foundation in Los Angeles. Chris\'s Blues Project raised $50,000 at a benefit concert in Las Vegas during the CineVagas Film Festival in June of 2008. His next benefit for the Blues Project will be on October 16, 2008 at the House of Blues in New Orleans during the New Orleans Film Festival.',0,'0454584','images/persons/chris-thomas-king.jpg',67,100),(169,1,'2009-03-10 21:03:09','2009-03-10 21:03:09','Ajgie','Kirkland','ajgie-kirkland','','','',0,'0456627','',NULL,NULL),(401,1,'2009-03-10 21:19:16','2009-03-10 21:19:16','Kazuki','Kitamura','kazuki-kitamura','17 July 1969','Osaka, Japan','',0,'0457556','',NULL,NULL),(12,1,'2009-03-10 20:46:06','2009-03-10 20:46:06','Larissa','Kokernot','larissa-kokernot','','','',0,'0463698','',NULL,NULL),(86,1,'2009-03-10 20:58:16','2009-03-10 20:58:16','RJ','Konner','rj-konner','','','',0,'2897269','images/persons/rj-konner.jpg',140,91),(111,1,'2009-03-10 20:59:52','2009-03-10 20:59:52','Thomas','Kopache','thomas-kopache','17 October 1945','Manchester, New Hampshire, USA','',0,'0465664','images/persons/thomas-kopache.jpg',80,100),(51,1,'2009-03-10 20:56:36','2009-03-10 20:56:36','Olek','Krupa','olek-krupa','1955','Poland','',0,'0472762','images/persons/olek-krupa.jpg',127,100),(72,1,'2009-03-10 20:57:37','2009-03-10 20:57:37','Logan','Kulick','logan-kulick','22 December 2002','Voorhees, New Jersey, USA','',0,'2531905','images/persons/logan-kulick.jpg',139,99),(393,1,'2009-03-10 21:18:56','2009-03-10 21:18:56','Jun','Kunimura','jun-kunimura','16 November 1955','Kumamoto, Japan','',0,'0475165','',NULL,NULL),(389,1,'2009-03-10 21:18:40','2009-03-10 21:18:40','Chiaki','Kuriyama','chiaki-kuriyama','10 October 1984','Tsuchiura, Japan','',0,'0475752','images/persons/chiaki-kuriyama.jpg',137,100),(419,1,'2009-03-10 21:19:58','2009-03-10 21:19:58','Michael','Kuroiwa','michael-kuroiwa','19 June 1979','Los Angeles, California, USA','',0,'1248550','',NULL,NULL),(417,1,'2009-03-10 21:19:53','2009-03-10 21:19:53','Naomi','Kusumi','naomi-kusumi','','','',0,'1305522','',NULL,NULL),(156,1,'2009-03-10 21:02:29','2009-03-10 21:02:29','Gérard','L\'Heureux','gerard-lheureux','','','',0,'0478311','',NULL,NULL),(173,1,'2009-03-10 21:03:21','2009-03-10 21:03:21','Jennifer','Lamb','jennifer-lamb','','','',0,'0482968','',NULL,NULL),(108,1,'2009-03-10 20:59:43','2009-03-10 20:59:43','Kathy','Lamkin','kathy-lamkin','','','Since her chilling turn as The Tea Lady in the remake of The Texas Chainsaw Massacre, the versatile and talented \'Kathy Lamkin\' (qv) has made a habit of stealing movies with mere moments of screen time. Born and raised in Texas, Lamkin was drawn to performing through her school choir. She continued acting at Texas Women\'s University before eventually settling in Houston. Many people encouraged Kathy on her artistic journey -- while performing with a traveling theater company, owner Barbara Jenkins mentored Kathy making the transition from stage to film; subsequently, Jo Edna Boldin became one of the first casting directors to recognize her unique talent and cast Kathy in films. While in Texas, she remained active in commercials and theatre, and ran her own company, Unicorn School of Acting and later the performing wing, USA Theatre. At the urging of casting director Terry Berland and agent Kristene Wallis, Lamkin made the move to Los Angeles in 2002. Her first TV role in Hollywood was on \"Malcolm in the Middle\", opposite Jane Kaczmarek. She was extremely grateful to Jane for calling attention to the fact they needed turn around for her close ups. Memorable guest star roles-such as in \"Nip/Tuck\", where she was required to wear a 200-pound fat suit and the aforementioned \"Tea Lady\"-followed, leading to a recent run of high-profile screen roles in films such as: In the Valley of Elah, The Heartbreak Kid, and No Country for Old Men, where she\'s the only character to stand up to Javier Bardem\'s psychotic killer and live. Kathy\'s first screen kiss came from Ben Stiller in The Heartbreak Kid; unfortunately, it didn\'t make the final cut of the film. Kathy\'s daughter Kati is a film editor in Los Angeles and her son Greg is a police officer, married with two young children. Her husband, Steve, encourages her while working as an aerospace engineer at NASA. Kathy\'s father was an oil field wildcatter (exploring for undiscovered oil) and her mother was an artist and business woman.',0,'0483541','images/persons/kathy-lamkin.jpg',135,100),(350,1,'2009-03-10 21:16:34','2009-03-10 21:16:34','Tito','Larriva','tito-larriva','','Juarez, Chihuahua, Mexico','',0,'0488644','',NULL,NULL),(440,1,'2009-03-10 21:25:07','2009-03-10 21:25:07','Laurie','Latham','laurie-latham','','','',0,'0490101','',NULL,NULL),(347,1,'2009-03-10 21:16:25','2009-03-10 21:16:25','Marc','Lawrence','marc-lawrence','17 February 1910','New York City, New York, USA','American character actor who specialized in underworld types, despite a far greater range. A native of the Bronx, Lawrence participated in plays in school, then attended the City College of New York. In 1930, he was accepted into \'Eva Le Gallienne\' (qv)\'s company, where he became friendly with another young actor, one day to be known as \'John Garfield\' (qv). The two appeared in a number of plays, both with Le Galliene\'s company and with the highly-politicized Group Theatre, before Lawrence was given a film contract with Columbia Pictures. His scarred complexion and brooding appearance made him a natural for heavies, and he played scores of gangsters and mob bosses over the next six decades. Nevertheless, he could turn in fine performances in very different kinds of roles as well, such as his bewildered mountain boy in _The Shepherd of the Hills (1941)_ (qv). Following the Second World War, as anti-Communist fervor gripped America, Lawrence found himself under scrutiny for his political leanings. When called before the House Un-American Activities Committee, he admitted he had once been a member of the Communist Party. The Committee broke down his resolve and he named the names of other Party members. He was blacklisted and departed for Europe, where he continued to make films, often in leading roles. Following the demise of the blacklist, he returned to America and resumed his position as a familiar and talented purveyor of gangland types. A writer and director as well, Lawrence has remained active in his ninth decade.',0,'0492908','',NULL,NULL),(367,1,'2009-03-10 21:17:18','2009-03-10 21:17:18','Jacque','Lawson','jacque-lawson','','','',0,'0493230','',NULL,NULL),(21,1,'2009-03-10 20:46:30','2009-03-10 20:46:30','Michelle Suzanne','LeDoux','michelle-suzanne-ledoux','','','',0,'0496626','',NULL,NULL),(368,1,'2009-03-10 21:17:21','2009-03-10 21:17:21','Houston','Leigh','houston-leigh','','','',0,'0500224','',NULL,NULL),(226,1,'2009-03-10 21:06:47','2009-03-10 21:06:47','Jennifer Jason','Leigh','jennifer-jason-leigh','5 February 1962','Hollywood, California, USA','Born in Los Angeles, \'Jennifer Jason Leigh\' (qv) - the daughter of actor \'Vic Morrow\' (qv) - worked in her first film at the age of nine, in a nonspeaking role for the film Death of a Stranger (_Tod eines Fremden (1973)_ (qv)). At 14 she attended summer acting workshops given by \'Lee Strasberg\' (qv) and landed a role in the Disney TV movie _The Young Runaways (1978) (TV)_ (qv), and received her Screen Actors Guild membership in an episode of the TV series _\"Baretta\" (1975)_ (qv) when she was 16. Jennifer performed in several TV movies and dropped out of Pacific Palisades High School six weeks short of graduation for her major role in the film _Eyes of a Stranger (1981)_ (qv). Her first major success came as the female lead in _Fast Times at Ridgemont High (1982)_ (qv).',0,'0000492','images/persons/jennifer-jason-leigh.jpg',129,100),(151,1,'2009-03-10 21:02:16','2009-03-10 21:02:16','Carlos','Leon','carlos-leon','10 July 1966','Cuba','Born July 10, 1966. A native New Yorker from the South Bronx. Former celebrity personal trainer turned accomplished actor. Has also appeared on- and off-Broadway, including \"Aunt Dan and Lemon\". As of Summer, 2006 he can be seen nightly on Broadway in the Roundabout Theatre Company\'s production of \"The Three Penny Opera\" (a new translation by Wallace Shawn).',0,'0502458','images/persons/carlos-leon.jpg',140,100),(337,1,'2009-03-10 21:15:44','2009-03-10 21:15:44','Juliette','Lewis','juliette-lewis','21 June 1973','Los Angeles, California, USA','\'Juliette Lewis\' (qv) is recognized as one of Hollywood\'s most talented and versatile actors of her generation. She first stunned mass audiences and critics alike with her Oscar-nominated performance as \'Danielle Bowden\' in _Cape Fear (1991)_ (qv). To date, she has worked with some of the most revered directors in the industry: \'Martin Scorsese\' (qv), \'Woody Allen\' (qv), \'Lasse Hallström\' (qv), \'Oliver Stone\' (qv), and \'Garry Marshall\' (qv). Most recently, she received an Emmy nomination for her performance in _My Louisiana Sky (2001) (TV)_ (qv). Whether lending dramatic authenticity or a natural comedic flair, Lewis graces her roles with remarkable range and an original and captivating style. Lewis recently co-starred opposite \'Jennifer Lopez\' (qv) in the thriller _Enough (2002/I)_ (qv) directed by \'Michael Apted\' (qv). Lewis played the best friend of an abused woman who must reclaim her life from her dangerous husband. The part appealed to her because she got to play a \"sweet, vibrant, regular gal,\" she offers. The poignant drama _Hysterical Blindness (2002) (TV)_ (qv) debuted on August 25, 2002, on HBO, in which Lewis stared with \'Uma Thurman\' (qv) and \'Gena Rowlands\' (qv). Set in the 1980s, the story follows two single, working-class New Jersey women on a bittersweet quest for love and meaning. Based on the play by \'Laura Cahill\' (qv), the film is directed by acclaimed filmmaker \'Mira Nair\' (qv) and the executive producer is Thurman. _Hysterical Blindness (2002) (TV)_ (qv) was the centerpiece premiere at the 2002 Sundance Film Festival. \"I\'ve never seen this female perspective told before with such a true voice,\" says Lewis, who plays a single mother in _Hysterical Blindness (2002) (TV)_ (qv). \"It\'s raw, heartbreakingly honest and real.\"Lewis went blond for her role in the DreamWorks comedy _Old School (2003)_ (qv), co-starring opposite \'Luke Wilson\' (qv), \'Vince Vaughn\' (qv), and \'Will Ferrell\' (qv) in this story of disenchanted men who try to recapture their college days by starting a fraternity. \"The script was a laugh-out-loud page-turner,\" says Lewis, who plays Wilson\'s seemingly innocent girlfriend. \"If I was going to be in a rip-roaring boy\'s comedy, I knew I didn\'t want to play straight man. I love doing comedy and doing characters, and I made this one a pampered California girl. My scenes with \'Luke Wilson\' (qv) are very situational--and that\'s where the comedy lies. I\'m naturally kind of ridiculous. I don\'t take myself or others too seriously.\" _Old School (2003)_ (qv)) was released in 2003. Lewis is currently filming the feature _Blueberry (2004)_ (qv), based on the French comic book adventures of Western hero Mike Blueberry. She stars alongside \'Michael Madsen\' (qv) and French film star \'Vincent Cassel\' (qv) in this project directed by \'Jan Kounen\' (qv). For her role as a rancher\'s daughter, Lewis is on horseback for much of the film. \"I used to ride years ago, but I can only hope the fearlessness I had when I was 11 still lives,\" she says. The production is shooting on location in Mexico, Spain, France, and Britain. Lewis recently received an Emmy nomination for her performance in Showtime\'s _My Louisiana Sky (2001) (TV)_ (qv), a coming-of-age drama set in rural Louisiana in the early 1950s. Lewis plays Dorie Kay, an urbanized working woman who tries to help her 12-year-old niece come to terms with the girl\'s developmentally challenged parents. Based on the \'Kimberly Willis Holt\' (qv) novel, the acclaimed film was directed by \'Adam Arkin\' (qv), who won an Emmy for Outstanding Directing, and produced by \'Anthony Edwards\' (qv). One of Lewis\' most challenging roles to date was Carla Tate, a mentally challenged woman on a journey of independence and self discovery in \'Garry Marshall\' (qv)\'s _The Other Sister (1999)_ (qv). \"I wanted to capture her honesty so people could relate to her,\" says Lewis, who starred with her longtime friend \'Giovanni Ribisi\' (qv), as well as \'Diane Keaton\' (qv) and \'Tom Skerritt\' (qv). \"I was playing a character who was full of life and determination, and it really had an effect on me. I connected very deeply to Carla and her feelings.\"Other recent projects include the colorful European comedy release of _Room to Rent (2000)_ (qv), in which Lewis sings and dances as a \'Marilyn Monroe\' (qv) impersonator; the crime thriller _The Way of the Gun (2000)_ (qv), starring \'Benicio Del Toro\' (qv) and \'Ryan Phillippe\' (qv); and _Picture Claire (2001)_ (qv), a mockumentary about the making of a big-budget film, with \'Gina Gershon\' (qv). Lewis was born in Hollywood to Glenis Batley, a graphic designer, and actor \'Geoffrey Lewis\' (qv), a regular in \'Clint Eastwood\' (qv)\'s films and frontman of the musical group Celestial Navigations. By the age of 6, she knew she wanted to be a performer and found inspiration in musicals like _Fame (1980)_ (qv) and _Grease (1978)_ (qv). At 12, Lewis landed her first leading role in the Showtime miniseries _Home Fires (1987) (TV)_ (qv). After appearing in the sitcoms _\"The Wonder Years\" (1988)_ (qv) and _\"I Married Dora\" (1987)_ (qv), she went on to star with \'Chevy Chase\' (qv) in National Lampoon\'s _Christmas Vacation (1989)_ (qv) and with \'Jennifer Jason Leigh\' (qv) in the drama _Crooked Hearts (1991)_ (qv). At 16, Lewis starred in the critically acclaimed telefilm _Too Young to Die? (1990) (TV)_ (qv), based on the true story of Amanda Sue Bradley, a sexually abused runaway who was the first minor to receive the death sentence. Lewis\' performance caught the attention of \'Martin Scorsese\' (qv), who cast her in the thriller _Cape Fear (1991)_ (qv). Her powerful scenes with \'Robert De Niro\' (qv) captured the quiet complexities of adolescence and earned her an Oscar nomination and Golden Globe nomination for Best Supporting Actress. Her auditorium scene with De Niro goes down in movie-making history as one of cinema\'s classic scenes. Lewis next worked with \'Woody Allen\' (qv) in _Husbands and Wives (1992)_ (qv), playing a self-assured college coed who has a penchant for older men, particularly her married professor. She then went on to star in the bittersweet love story _That Night (1992)_ (qv), with \'C. Thomas Howell\' (qv). In 1993, Lewis starred as Adele Corners, a dysfunctional innocent on a cross-country journey with her psycho-killer boyfriend (\'Brad Pitt\' (qv)) in _Kalifornia (1993)_ (qv). She also played a waitress from Queens opposite \'Gary Oldman\' (qv) in _Romeo Is Bleeding (1993)_ (qv) and a wise and worldly young drifter in _What\'s Eating Gilbert Grape (1993)_ (qv) with \'Johnny Depp\' (qv) and \'Leonardo DiCaprio\' (qv). In 1994, Lewis starred alongside \'Woody Harrelson\' (qv) in _Natural Born Killers (1994)_ (qv), \'Oliver Stone\' (qv)\'s controversial media satire about two mass murderers who become legendary folk heroes. Lewis\'s other credits include the \'Nora Ephron\' (qv) comedy _Mixed Nuts (1994)_ (qv) with \'Steve Martin\' (qv) and \'Adam Sandler\' (qv); the sci-fi action film _Strange Days (1995)_ (qv) with \'Ralph Fiennes\' (qv) and \'Angela Bassett\' (qv); and \'Quentin Tarantino\' (qv)\'s vampire tale _From Dusk Till Dawn (1996)_ (qv) with \'George Clooney\' (qv). In 1996, Lewis appeared as \'Shirley MacLaine\' (qv)\'s granddaughter in _The Evening Star (1996)_ (qv). She went on to star in the independent film _Some Girl (1998)_ (qv), with \'Michael Rapaport\' (qv) and \'Giovanni Ribisi\' (qv), and the thriller _The 4th Floor (1999)_ (qv) with \'William Hurt\' (qv). Lewis has been married since 1999 to professional skateboarder \'Stephen Berra\' (qv) but has filed for divorce.',0,'0000496','images/persons/juliette-lewis.jpg',140,94),(271,1,'2009-03-10 21:09:28','2009-03-10 21:09:28','Stan','Lichtenstein','stan-lichtenstein','','','',0,'0509042','',NULL,NULL),(292,1,'2009-03-10 21:10:26','2009-03-10 21:10:26','Ed','Lillard','ed-lillard','','','',0,'0510326','',NULL,NULL),(369,1,'2009-03-10 21:17:24','2009-03-10 21:17:24','Janie','Liszewski','janie-liszewski','????','Pennsylvania, USA','',0,'0514303','',NULL,NULL),(391,1,'2009-03-10 21:18:46','2009-03-10 21:18:46','Chia Hui','Liu','chia-hui-liu','30 November 1955','Guangdong, China','',0,'0514904','',NULL,NULL),(338,1,'2009-03-10 21:15:47','2009-03-10 21:15:47','Ernest','Liu','ernest-liu','','','',0,'0514918','',NULL,NULL),(383,1,'2009-03-10 21:18:17','2009-03-10 21:18:17','Lucy','Liu','lucy-liu','2 December 1968','Queens, New York, USA','Born to Chinese immigrants in Queens, New York, \'Lucy Liu\' (qv) has always tried to balance an interest in her cultural heritage with a desire to move beyond a strictly Asian-American experience. Once relegated to \"ethnic\" parts, the energetic actress is finally earning her stripes as an across-the-board leading lady. Liu graduated from Stuyvesant High School in 1986 and enrolled in New York University; discouraged by the \"dark and sarcastic\" atmosphere of NYU, however, she transferred to the University of Michigan after her freshman year. She graduated from UM with a degree in Chinese Language and Culture, managing to squeeze in some additional training in dance, voice, fine arts, and acting. During her senior year, Liu auditioned for a small part in a production of Alice in Wonderland and walked away with the lead; encouraged by the experience, she decided to take the plunge into professional acting. She moved to Los Angeles and split her time between auditions and food service day jobs, eventually scoring a guest appearance as a waitress on _\"Beverly Hills, 90210\" (1990)_ (qv). That performance led to more walk-on parts in shows like _\"NYPD Blue\" (1993)_ (qv), _\"ER\" (1994)_ (qv), and _\"The X Files\" (1993)_ (qv). In 1996, she was cast as an ambitious college student on \'Rhea Perlman\' (qv)\'s ephemeral sitcom _\"Pearl\" (1996)_ (qv). Liu first appeared on the big screen as an ex-girlfriend in _Jerry Maguire (1996)_ (qv) (she had previously filmed a scene in the indie _Bang (1995)_ (qv), but it was shelved for two years). She then waded through a series of supporting parts in small films before landing her big break on _\"Ally McBeal\" (1997)_ (qv). Liu initially auditioned for the role of Nelle Porter, which went to \'Portia de Rossi\' (qv), but writer-producer \'David E. Kelley\' (qv) was so impressed with her spunk that he promised to write a part for her in an upcoming episode. The part turned out to be that of growling, ill-tempered lawyer Ling Woo, which Liu filled with such aplomb that she was signed on as a regular cast member. The \"Ally\" win gave Liu\'s film career a much-needed boost--in 1999, she was cast as a dominatrix in the \'Mel Gibson\' (qv) action flick _Payback (1999)_, and as a hitchhiker in the ill-received boxing saga _Play It to the Bone (1999)_ (qv). The next year brought even larger roles: first as the kidnapped Princess Pei Pei in \'Jackie Chan\' (qv)\'s western _Shanghai Noon (2000)_ (qv), then as one-third of the comely crime-fighting trio in _Charlie\'s Angels (2000)_ (qv). When she\'s not hissing at clients or throwing well-coiffed punches, Liu keeps busy with an eclectic mix of off-screen hobbies. She practices the martial art of Kali-Eskrima-Silat (knife-and-stick fighting), skis, rock climbs, rides horses, and plays the accordion. In 1993 she exhibited a collection of multimedia art pieces at the Cast Iron Gallery in SoHo (New York), after which she won a grant to study and create art in China. Her hectic schedule doesn\'t leave much time for romantic intrigue, but Liu says she prefers to keep that side of her life uncluttered.',0,'0005154','images/persons/lucy-liu.jpg',134,99),(270,1,'2009-03-10 21:09:26','2009-03-10 21:09:26','Philip','Loch','philip-loch','','','',0,'0516628','',NULL,NULL),(194,1,'2009-03-10 21:05:06','2009-03-10 21:05:06','John','Locke','john-locke','','','',0,'0516749','',NULL,NULL),(33,1,'2009-03-10 20:47:05','2009-03-10 20:47:05','David S.','Lomax','david-s-lomax','','','',0,'0518257','images/persons/david-s-lomax.jpg',125,100),(398,1,'2009-03-10 21:19:09','2009-03-10 21:19:09','Jonathan','Loughran','jonathan-loughran','1966','USA','',0,'0521781','',NULL,NULL),(103,1,'2009-03-10 20:59:30','2009-03-10 20:59:30','Chip','Love','chip-love','','','',0,'2655195','',NULL,NULL),(381,1,'2009-03-10 21:17:55','2009-03-10 21:17:55','Victoria','Lucai','victoria-lucai','','','',0,'0524029','',NULL,NULL),(23,1,'2009-03-10 20:46:38','2009-03-10 20:46:38','John Carroll','Lynch','john-carroll-lynch','1 August 1963','Boulder, Colorado, USA','\'John Carroll Lynch\' (qv) was born August 1st, 1963 in Boulder, Colorado. He was raised in Denver Colorado. It was there John found a passion for acting and became a Denver Broncos fan. He graduated in the mid-80s with a B.F.A. in theatre from the The Catholic University of America / Hartke Theatre Acting program. From then, he continued to work in theatre around the country, but concentrated mostly on his work at the Guthrie Theater in Minneapolis, acting in many plays from Shakespeare to Shaw to Chekhov. In the early nineties, John was able to find time away from the theatre to work in film, as productions came through Minnesota. In 1996, he received critical acclaim for his role as Marge Gunderson\'s simple husband Norm Gunderson in _Fargo (1996)_ (qv). He went on to make two more films that year, both of which were conveniently set in Minnesota, the acclaimed _Beautiful Girls (1996)_ (qv) and _Feeling Minnesota (1996)_ (qv). Since then, John\'s film career has been on an amazing climb. Much like other well respected actors from the theatre, such as \'John Malkovich\' (qv) and \'Gary Sinise\' (qv), he chooses to play very interesting and diverse roles.',0,'0002253','images/persons/john-carroll-lynch.jpg',137,100),(165,1,'2009-03-10 21:02:57','2009-03-10 21:02:57','Irene Olga','López','irene-olga-lopez','','','',0,'0530151','',NULL,NULL),(303,1,'2009-03-10 21:11:24','2009-03-10 21:11:24','Tzi','Ma','tzi-ma','','','An endlessly imaginative and compelling actor, \'Tzi Ma\' (qv) has created a score of memorable film, television and stage characters. From his recent roles as Hinh, a deadly efficient assassin and nationalist spy masquerading as \'Michael Caine\' (qv)\'s ever-invaluable assistant in _The Quiet American (2002)_ (qv) to his hilarious, lit-cigarette-swallowing take as The General in \'Joel Coen\' (qv) and \'Ethan Coen\' (qv)\'s _The Ladykillers (2004)_ (qv), Ma always delivers the unexpected. So far, 2005 is offering Ma even more opportunities to brand his indelible stamp on widely diverse projects. This year will see him in a slate of shows, including a multi-episode cliffhanger for the critically acclaimed hit series _\"24\" (2001)_ (qv); the inspirational Lions Gate family drama _Akeelah and the Bee (2006)_ (qv); \'Nick Cassavetes\' (qv)\' _Alpha Dog (2006)_ (qv); the indie experimental film by new filmmaker \'Juwan Chung\' (qv), _Baby (2003/I)_ (qv), in which Ma will also function as associate producer; an episode of _\"JAG\" (1995)_ (qv) that aired in the spring, and the indie movie _Red Doors (2005)_ (qv), which premiered at the Fourth Annual Tribeca Film Festival and won for best narrative feature made in New York. _Red Doors (2005)_ (qv) is the work of writer/director \'Georgia Lee\' (qv), who served as director \'Martin Scorsese\' (qv)\'s apprentice on the set of _Gangs of New York (2002)_ (qv) in Rome. She approached Ma to play the part of vulnerable, emotionally bankrupt father Ed Wong, who is desperately trying to mask his incessant suicidal compulsions from his three grown daughters. On the pulse-accelerating season closer for _\"24\" (2001)_ (qv), Ma is the main protagonist, the relentless head of security for the Chinese consulate in Los Angeles. Shedding his diplomatic correctness to go eyeball to eyeball against \'Kiefer Sutherland\' (qv)\'s Agent Jack Bauer, Ma\'s character engages in a searing, deadly duel of wit, intimidation and lies. In _Baby (2003/I)_ (qv) and _Akeelah and the Bee (2006)_ (qv), starring \'Laurence Fishburne\' (qv) and \'Angela Bassett\' (qv), Ma again interprets fatherhood, first as an intensely competitive \"sports dad\" driving his small son to win at any cost, then as an alcoholic who sees his son embracing a similar path of failure and waste. It was a personal invitation from director Cassavetes that led to Ma\'s cameo in _Alpha Dog (2006)_ (qv), based on the headline-grabbing activities of Jesse James Hollywood, an alleged drug dealer accused of masterminding a kidnap-murder. \'Tzi Ma\' (qv) was born in Hong Kong and raised in New York City. Surrounded by music, diverse cultures, and an eclectic lifestyle, he defied tradition to study classical theater and dance. Drive and versatility resulted in steady stage and film work and since that time he has appeared in such television series as _\"The Practice\" (1997)_ (qv), _\"JAG\" (1995)_ (qv), _\"The Bernie Mac Show\" (2001)_ (qv), _\"Chicago Hope\" (1994)_ (qv), _\"Millennium\" (1996/I)_ (qv), _\"Jake 2.0\" (2003)_ (qv), _\"Martial Law\" (1998)_ (qv), _\"ER\" (1994)_ (qv), _\"Law & Order\" (1990)_ (qv), _\"Boomtown\" (2002)_ (qv), as the star of the series _\"Yellowthread Street\" (1990)_ (qv), and in the popular recurring role of Det. Harold Ng on _\"NYPD Blue\" (1993)_ (qv). His numerous feature films include _Rush Hour (1998)_ (qv), _Golden Gate (1998)_ (qv), _Dante\'s Peak (1997)_ (qv), _Rapid Fire (1992)_ (qv), _Chain Reaction (1996)_ (qv), and the acclaimed indie feature _Catfish in Black Bean Sauce (1999)_ (qv). On stage, he garnered critical and popular acclaim with his starring role of \"Master Wang/Sammy Fong\" in the revised version of \"Flower Drum Song\" by \'David Henry Hwang\' (qv), at the Mark Taper Forum in Los Angeles. Ma also appeared in two plays written especially for him, \"The Dance and The Railroad,\" by Tony award-winning playwright Hwang (M. Butterfly) and \"In Perpetuity Throughout The Universe\" by \'Eric Overmyer\' (qv) (executive producer of _\"Law & Order\" (1990)_ (qv)). Ma has received numerous awards and nominations for his work, including the Cine Golden Eagle Award for Best Actor in \"The Dance and The Railroad\"; an Ace Award nomination for Best Supporting Actor in _The Forgotten (2004)_ (qv), a TV film directed by \'James Keach\' (qv); a Dramalogue Best\"Choreographer/Best Director Award for \"The Dance and The Railroad\"; and a Garland Award nomination for Best Actor, as well as a Los Angeles City Council Citation, for \"Flower Drum Song.\" Ma maintains homes in New York and Los Angeles.',0,'0002245','images/persons/tzi-ma.jpg',124,100),(93,1,'2009-03-10 20:58:55','2009-03-10 20:58:55','Kelly','Macdonald','kelly-macdonald','23 February 1976','Glasgow, Scotland, UK','',0,'0531808','images/persons/kelly-macdonald.jpg',137,100),(3,1,'2009-03-10 20:45:37','2009-03-10 20:45:37','William H.','Macy','william-h-macy','13 March 1950','Miami, Florida, USA','',0,'0000513','images/persons/william-h-macy.jpg',140,100),(387,1,'2009-03-10 21:18:34','2009-03-10 21:24:09','Michael','Madsen','michael-madsen','25 September 1958','Chicago, Illinois, USA','At 6\' 2\" and 190 pounds, \'Michael Madsen\' (qv) - the brother of actress \'Virginia Madsen\' (qv) - is equally adept at portraying heroic as well as villainous characters. There\'s just something in the way he delivers his lines with an underlying aggression masked behind his gravelly tones that makes you feel very uneasy about his true intentions! Madsen first learned his craft at Chicago\'s Steppenwolf Theatre, where he worked under \'John Malkovich\' (qv), one of the theater\'s founders. His first few film roles were minor ones, in such projects as _Against All Hope (1982)_ (qv), _Racing with the Moon (1984)_ (qv) and _The Natural (1984)_ (qv). His work received considerable notice, however, after his knife-edged performance as deranged killer Vince Miller in _Kill Me Again (1989)_ (qv) and then as \'Susan Sarandon\' (qv)\'s rough-edged boyfriend Jimmy in _Thelma & Louise (1991)_ (qv). His big breakthrough, however, came as the sadistic jewel thief Mr. Blonde in \'Quentin Tarantino\' (qv)\'s low-budget hit _Reservoir Dogs (1992)_ (qv). Movie audiences were glued to their seats as Madsen playfully danced around a tied-down and terrified police officer, slicing him with a knife and splashing gasoline all over the petrified man, all to the cheery tunes of \"Stealer\'s Wheels\' \"Stuck In the Middle With You.\" Not to be typecast, Madsen surprised many with his performance as foster parent Glen Greenwood in the hit family movie _Free Willy (1993)_ (qv) before returning to another criminal role as bank robber Rudy Travis in the remake of the \'Steve McQueen\' (qv) heist flick _The Getaway (1994)_ (qv), and then back again as Glen Greenwood in _Free Willy 2: The Adventure Home (1995)_ (qv). Madsen continues to turn in edge-of-the-seat performances as morally bankrupt individuals on the wrong side of the law, as in his intense on-screen showings in _Donnie Brasco (1997)_ (qv), _Mulholland Falls (1996)_ (qv), and _High Noon (2000) (TV)_ (qv). In 2003 he teamed up again with Tarantino in both \"volumes\" of Tarantino\'s magnum martial arts/revenge opus _Kill Bill: Vol. 1 (2003)_ (qv) and _Kill Bill: Vol. 2 (2004)_ (qv) as the coldly evil Budd (aka \"Sidewinder\"). In addition to his film work, Madsen has contributed dialogue to two of Sony PlayStations\'s biggest-selling games, _Grand Theft Auto III (2001) (VG)_ (qv) and _Driv3r (2004) (VG)_ (qv), as well as writing several books of his own poetry. Although uncomfortable with fame, Madsen\'s star continues to shine in Hollywood and his droll, yet captivating acting style is ensuring him a steady flow of work as one on the screen\'s favorite \"heavies\".',0,'0000514','images/persons/michael-madsen.jpg',133,100),(416,1,'2009-03-10 21:19:51','2009-03-10 21:19:51','Ai','Maeda','ai-maeda','19 April 1975','Kobe, Japan','',0,'0535328','',NULL,NULL),(228,1,'2009-03-10 21:07:03','2009-03-10 21:07:03','John','Mahoney','john-mahoney','20 June 1940','Blackpool, Lancashire, England, UK','\'John Mahoney\' (qv) is an award-winning American actor who was born during the Battle of Britain in Blackpool, Lancashire, England. The seventh of eight children, Mahoney\'s family had been evacuated to the sea-side resort to avoid the Nazi bombing of their native Manchester. The Macunian Mahoneys eventually returned to Manchester during the war. Visiting the States to see his older sister, a \"war bride\" who had married an American, the young Mahoney decided to emigrate and was sponsored by his sister. He eventually won his citizenship by serving in the U.S. Army. Long interested in acting, Mahoney didn\'t actually make the transition to his craft until he was almost 40 years old. Mahoney took acting classes at the St. Nicholas Theater and finally built up the courage to quit his day job and pursue acting full time, \'John Malkovich\' (qv), one of the founders of the Second City\'s distinguished Steppenwolf Theatre, encouraged Mahoney to join Steppenwolf. In 1986, Mahoney won a Tony Award for Best Featured Actor in a Play for his performance in \'John Guare\' (qv)\'s _The House of Blue Leaves (1987) (TV)_ (qv). Mahoney made his feature film debut in 1980, but he is best known for playing the role of the father of the eponymous character _\"Frasier\" (1993)_ (qv) from 1993 until 2004. He is concentrating on stage work back in Chicago and has appeared on Broadway in 2007 in a revival of _Prelude to a Kiss (1992)_ (qv).',0,'0001498','images/persons/john-mahoney.jpg',140,100),(44,1,'2009-03-10 20:56:12','2009-03-10 20:56:12','John','Malkovich','john-malkovich','9 December 1953','Christopher, Illinois, USA','In 1976 \'\'John Malkovich\' (qv) joined Chicago\'s Steppenwolf Theatre, newly founded by his friend \'Gary Sinise\' (qv). After that it would take seven years before Malkovich would show up in New York and win an Obie in \'Sam Shepard\' (qv)\'s play \"True West\". In 1984 Malkovich would appear with \'Dustin Hoffman\' (qv) in the Broadway revival of \"Death of a Salesman\", which would earn him an Emmy when it was made into a made-for-TV movie the next year. His big-screen debut would be as the blind lodger in _Places in the Heart (1984)_ (qv), which earned him an Academy Award Nomination for best supporting actor. Other films would follow, including _The Killing Fields (1984)_ (qv) and _The Glass Menagerie (1987)_ (qv), but he would be well remembered as Vicomte de Valmont in _Dangerous Liaisons (1988)_ (qv). Playing against \'Michelle Pfeiffer\' (qv) and \'Glenn Close\' (qv) in a costume picture helped raise his standing in the industry. He would be cast as the psychotic political assassin in \'Clint Eastwood\' (qv)\'s _In the Line of Fire (1993)_ (qv), for which he would be nominated for both the Academy Award and the Golden Globe. In 1994 Malkovich would portray the sinister Kurtz in the made-for-TV movie _Heart of Darkness (1993) (TV)_ (qv), taking the story to Africa as it was originally written. Malkovich has periodically returned to Chicago to both act and direct.',0,'0000518','images/persons/john-malkovich.jpg',131,100),(405,1,'2009-03-10 21:19:25','2009-03-10 21:19:25','Julie','Manase','julie-manase','1 January 1975','Tokyo, Japan','',0,'0541300','',NULL,NULL),(134,1,'2009-03-10 21:00:56','2009-03-10 21:00:56','John','Mancha','john-mancha','','','',0,'2655186','',NULL,NULL),(162,1,'2009-03-10 21:02:49','2009-03-10 21:02:49','Marshall','Manesh','marshall-manesh','16 August 1950','Mashhad, Iran','\'Marshall Manesh\' (qv) was born on August 16, 1950 in Iran. He lost his father at an early age and was raised by his beloved mother, whom he feels he got his strength from to make it in acting. He came to America in the mid \"70s\" and joined the Persian Theater Group and traveled extensively through out The United States, Canada and Europe for 8 years. His debut film was \"True Lies\" as Jamal Khaled, directed by James Cameron. Marshall has done more than 75 feature Films, Television projects and more than 40 commercials. He currently has a recurring roles on: Will & Grace as \"Mr. Zamir\", \"How I met your mother as \"Ranjit\", Scrubs as \"Dr. Akbar\" and Boston Legal as \"George Keene\".',0,'0542000','images/persons/marshall-manesh.jpg',139,96),(171,1,'2009-03-10 21:03:17','2009-03-10 21:03:17','Aimee','Mann','aimee-mann','8 September 1960','Richmond, Virginia, USA','',0,'0005181','',NULL,NULL),(249,1,'2009-03-10 21:08:16','2009-03-10 21:08:16','Joseph','Marcus','joseph-marcus','','','',0,'0546131','',NULL,NULL),(340,1,'2009-03-10 21:15:57','2009-03-10 21:15:57','Cheech','Marin','cheech-marin','13 July 1946','Los Angeles, California, USA','',0,'0001507','images/persons/cheech-marin.jpg',126,100),(406,1,'2009-03-10 21:19:28','2009-03-10 21:19:28','Akaji','Maro','akaji-maro','1943','Ishikawa, Japan','',0,'0549457','',NULL,NULL),(318,1,'2009-03-10 21:12:14','2009-03-10 21:12:14','Paula','Martin','paula-martin','','','',0,'1565040','',NULL,NULL),(48,1,'2009-03-10 20:56:27','2009-03-10 20:56:27','Elizabeth','Marvel','elizabeth-marvel','27 November 1969','Los Angeles, California, USA','',0,'0555500','',NULL,NULL),(288,1,'2009-03-10 21:10:12','2009-03-10 21:10:12','David','Massie','david-massie','','','',0,'0557399','',NULL,NULL),(74,1,'2009-03-10 20:57:44','2009-03-10 20:57:44','Bill','Massof','bill-massof','11 January 1950','Minneapolis, Minnesota, USA','',0,'1009183','images/persons/bill-massof.jpg',139,93),(206,1,'2009-03-10 21:05:34','2009-03-10 21:11:36','John','McConnell','john-mcconnell','13 November 1958','Baton Rouge, Louisiana, USA','',0,'0566279','',NULL,NULL),(263,1,'2009-03-10 21:09:03','2009-03-10 21:09:03','Linda','McCoy','linda-mccoy','','','',0,'0566775','',NULL,NULL),(22,1,'2009-03-10 20:46:34','2009-03-10 20:56:08','Frances','McDormand','frances-mcdormand','23 June 1957','Chicago, Illinois, USA','\'Frances McDormand\' (qv) was born in Chicago in 1957, and was adopted by Canadian minister Vernan McDormand and his wife Noreen, who raised her in the suburbs of Pittsburgh. She earned her B.A. in Theater from Bethany College in 1979 and her MFA from Yale in 1982. Her career after graduation began onstage, and she has retained her association with the theater throughout her career. She soon obtained prominent roles in movies as well, first starring in _Blood Simple. (1984)_ (qv), in which she worked with filmmaker \'Joel Coen\' (qv), whom she married that year. She frequently collaborated with Coen and his brother \'Ethan Coen\' (qv) in their films. McDormand\'s skilled and versatile acting has been recognized by both the critics and the Academy and, in addition to many critics\' awards, she has been nominated for an Academy award four times - for _Mississippi Burning (1988)_ (qv), _Fargo (1996)_ (qv) (for which she won the Best Actress award), _Almost Famous (2000)_ (qv) and _North Country (2005)_ (qv). Keenly intelligent and possessed of a sharp wit, McDormand is the antithesis of the Hollywood starlet - rather than making every role about \'Frances McDormand\' (qv), \'Frances McDormand\' (qv) dissolves into the characters she plays. Accordingly, she has expressed some reservations about the iconic recognition she has gained from her touching and amusing portrayal of Police Chief Marge Gunderson, the quintessential Minnesota Scandinavian, in _Fargo (1996)_ (qv). McDormand and Coen adopted a son, Pedro, who was born in Paraguay, in 1994. They live in Manhattan.',0,'0000531','images/persons/frances-mcdormand.jpg',126,100),(372,1,'2009-03-10 21:17:32','2009-03-10 21:17:32','Michael','McKay','michael-mckay','','','',0,'0571024','images/persons/michael-mckay.jpg',121,100),(373,1,'2009-03-10 21:17:34','2009-03-10 21:17:34','Jake','McKinnon','jake-mckinnon','','','',0,'0571947','images/persons/jake-mckinnon.jpg',140,94),(187,1,'2009-03-10 21:04:42','2009-03-10 21:04:42','Ray','McKinnon','ray-mckinnon','15 November 1957','Adel, Georgia, USA','',0,'0571964','images/persons/ray-mckinnon.jpg',135,100),(354,1,'2009-03-10 21:16:44','2009-03-10 21:16:44','Heidi','McNeal','heidi-mcneal','','','',0,'0573816','',NULL,NULL),(240,1,'2009-03-10 21:07:51','2009-03-10 21:07:51','Peter','McPherson','peter-mcpherson','','','',0,'0574254','',NULL,NULL),(281,1,'2009-03-10 21:09:55','2009-03-10 21:09:55','Harvey','Meyer','harvey-meyer','','','',0,'0583145','',NULL,NULL),(123,1,'2009-03-10 21:00:26','2009-03-10 21:00:26','Josh','Meyer','josh-meyer','25 April 1979','Overland Park, Kansas, USA','',0,'1107024','images/persons/josh-meyer.jpg',140,94),(418,1,'2009-03-10 21:19:56','2009-03-10 21:19:56','Hikaru','Midorikawa','hikaru-midorikawa','2 May 1968','Tochigi, Japan','',0,'0585640','',NULL,NULL),(119,1,'2009-03-10 21:00:16','2009-03-10 21:00:16','Marc','Miles','marc-miles','','','',0,'0587185','',NULL,NULL),(204,1,'2009-03-10 21:05:29','2009-03-10 21:05:29','Lindsey','Miller','lindsey-miller','','','',0,'0588826','',NULL,NULL),(289,1,'2009-03-10 21:10:15','2009-03-10 21:10:15','Mark Jeffrey','Miller','mark-jeffrey-miller','9 June 1953','Terre Haute, Indiana, USA','',0,'0007002','images/persons/mark-jeffrey-miller.jpg',133,100),(75,1,'2009-03-10 20:57:47','2009-03-10 20:57:47','Tim','Miller','tim-miller','','','',0,'1240378','images/persons/tim-miller.jpg',103,100),(143,1,'2009-03-10 21:01:49','2009-03-10 21:01:49','Philip','Moon','philip-moon','5 November 1961','','',0,'0600657','images/persons/philip-moon.jpg',125,100),(139,1,'2009-03-10 21:01:31','2009-03-10 21:01:31','Julianne','Moore','julianne-moore','3 December 1960','Fayetteville, North Carolina, USA','The daughter of a military judge and a Scottish social worker, \'Julianne Moore\' (qv) was born in Fayetteville, North Carolina on December 3, 1960. She spent the early years of her life in over two dozen locations around the world with her parents before she finally found her place at Boston University, where she earned her Bachelor of Fine Arts (B.F.A.) degree in acting from the School of the Performing Arts. After graduation (in 1983), Julianne moved to New York and worked extensively in theater, including appearances off-Broadway in two Caryl Churchill plays, Serious Money and Ice Cream With Hot Fudge and as Ophelia in Hamlet at The Guthrie Theatre. But despite her formal training, Julianne fell into the attractive actress\' trap of the mid-1980\'s: TV soaps and miniseries. She appeared briefly in the daytime serial _\"The Edge of Night\" (1956)_ (qv) and from 1985 to 1988 she played two half-sisters Frannie and Sabrina on the soap _\"As the World Turns\" (1956)_ (qv). This performance later led to an Outstanding Ingénue Daytime Emmy Award in 1988. Her subsequent appearances were in mostly forgettable TV-movies, such as _Money, Power, Murder. (1989) (TV)_ (qv), _The Last to Go (1991) (TV)_ (qv) and _Cast a Deadly Spell (1991) (TV)_ (qv). She made her entrance into the big screen with 1990\'s _Tales from the Darkside: The Movie (1990)_ (qv), where she played the victim of a mummy. Two years later, Julianne appeared in feature films with supporting parts in _The Hand That Rocks the Cradle (1992)_ (qv) and the comedy _The Gun in Betty Lou\'s Handbag (1992)_ (qv). She kept winning better and more powerful roles as time went on, including a small but memorable role as \'Harrison Ford\' (qv)\'s colleague in _The Fugitive (1993)_ (qv). (A role that made such an impression on \'Steven Spielberg\' (qv) that he cast her in the _Jurassic Park (1993)_ (qv) sequel without an audition in 1997). In one of Moore\'s most distinguished performances, she recapitulated her \"beguiling Yelena\" from \'Andre Gregory\' (qv)\'s workshop version of Chekhov\'s Uncle Vanya in \'Louis Malle\' (qv)\'s critically acclaimed _Vanya on 42nd Street (1994)_ (qv). Director \'Todd Haynes\' (qv) gave Julianne her first opportunity to take on a lead role in _Safe (1995)_ (qv). Her portrayal of Carol White, an affluent L.A. housewife who develops an inexplicable allergic reaction to her environment, won critical praise as well as an Independent Spirit Award nomination. Later that year she found her way into romantic comedy, co-starring as \'Hugh Grant\' (qv)\'s pregnant girlfriend in _Nine Months (1995)_ (qv). Following films included _Assassins (1995)_ (qv), where she played an electronics security expert targeted for death (next to \'Sylvester Stallone\' (qv) and \'Antonio Banderas\' (qv)) and _Surviving Picasso (1996)_ (qv), where she played Dora Maar, one of the numerous lovers of Picasso (portrayed by her hero, \'Anthony Hopkins\' (qv)). A year later, after co-starring in Spielberg\'s _The Lost World: Jurassic Park (1997)_ (qv), opposite \'Jeff Goldblum\' (qv), a young and unknown director, \'Paul Thomas Anderson\' (qv) asked Julianne to appear in his movie, _Boogie Nights (1997)_ (qv). Despite her misgivings, she finally was won over by the script and her decision to play the role of Amber Waves, a loving porn star who acts as a mother figure to a ragtag crew, proved to be a wise one, since she received both Golden Globe and Academy Award nominations. Julianne started 1998 by playing an erotic artist in _The Big Lebowski (1998)_ (qv), continued with a small role in the social comedy _Chicago Cab (1997)_ (qv) and ended with a subtle performance in \'Gus Van Sant\' (qv)\'s remake of _Psycho (1960)_ (qv). 1999 had Moore as busy as an actress can be. She starred in a number of high-profile projects, beginning with \'Robert Altman\' (qv)\'s _Cookie\'s Fortune (1999)_ (qv) , in which she was cast as the mentally challenged but adorable sister of a decidedly unhinged \'Glenn Close\' (qv). A portrayal of the scheming Mrs. Cheveley followed in \'Oliver Parker\' (qv)\'s _An Ideal Husband (1999)_ (qv) with a number of critics asserting that Moore was the best part of the movie. She then enjoyed another collaboration with director Anderson in _Magnolia (1999)_ (qv) and continued with an outstanding performance in _The End of the Affair (1999)_ (qv), for which she garnered another Oscar nomination. She ended 1999 with another great performance, that of a grieving mother in _A Map of the World (1999)_ (qv), opposite \'Sigourney Weaver\' (qv).',0,'0000194','images/persons/julianne-moore.jpg',139,100),(118,1,'2009-03-10 21:00:13','2009-03-10 21:00:13','Trent','Moore','trent-moore','','','',0,'2278936','images/persons/trent-moore.jpg',140,94),(399,1,'2009-03-10 21:19:11','2009-03-10 21:19:11','Yoshiyuki','Morishita','yoshiyuki-morishita','4 December 1962','Tokyo, Japan','',0,'0605676','',NULL,NULL),(358,1,'2009-03-10 21:16:58','2009-03-10 21:16:58','Mike','Moroff','mike-moroff','','El Paso, Texas, USA','',0,'0120878','',NULL,NULL),(73,1,'2009-03-10 20:57:41','2009-03-10 20:57:41','Dermot','Mulroney','dermot-mulroney','31 October 1963','Alexandria, Virginia, USA','\'Dermot Mulroney\' (qv) grew up in Alexandria, Virginia, and went to Maury Elementary School. He played the cello in school and city youth orchestras and acted in children\'s community theater. He made his high school stage debut in an awful play called \"Are Teachers Human?\" at George Washington Middle School. He graduated from T.C. Williams High School in 1981. His dad was a lawyer. He grew up with three brothers - Sean, Conor and \'Kieran Mulroney\' (qv) (now also an actor) - and a sister named Moira.',0,'0000551','images/persons/dermot-mulroney.jpg',140,97),(223,1,'2009-03-10 21:06:16','2009-03-10 21:06:16','Mark','Munson','mark-munson','','','',0,'1766137','',NULL,NULL),(420,1,'2009-03-10 21:20:01','2009-03-10 21:20:01','Christopher Allen','Nelson','christopher-allen-nelson','','','',0,'1418898','images/persons/christopher-allen-nelson.jpg',125,100),(42,1,'2009-03-10 20:47:32','2009-03-10 20:47:32','Clifford','Nelson','clifford-nelson','','','',0,'0625257','',NULL,NULL),(178,1,'2009-03-10 21:04:07','2009-03-10 21:04:07','Tim Blake','Nelson','tim-blake-nelson','11 May 1964','Tulsa, Oklahoma, USA','',0,'0625789','images/persons/tim-blake-nelson.jpg',140,100),(227,1,'2009-03-10 21:06:53','2009-03-10 21:06:53','Paul','Newman','paul-newman','26 January 1925','Shaker Heights, Ohio, USA','Screen legend, superstar, and the man with the most famous blue eyes in movie history, \'Paul Newman\' (qv) was born in 1925 in Cleveland, Ohio, the son of a successful sporting goods store owner. He acted in grade school and high school plays and after being disharged from the navy in 1946 enrolled at Kenyon College. After graduation he spent a year at the Yale Drama School and then headed to New York, where he attended the famed New York Actors Studio. Classically handsome and with a super abundance of sex appeal, television parts came easily and, after his first Broadway appearance in \"Picnic\" (1953), he was offered a movie contract by Warner Brothers. His first film, _The Silver Chalice (1954)_ (qv) was nearly his last. He considered his performance in this costume epic to be so bad that he took out a full-page ad in a trade paper apologizing for it to anyone who might have seen it. He fared much better in his next effort, _Somebody Up There Likes Me (1956)_ (qv), in which he portrayed boxer \'Rocky Graziano\' (qv) and drew raves from the critics for his briliant performance. He went on to become one of the top box office draws of the 1960s, starring in such superior films as _The Hustler (1961)_ (qv), _The Prize (1963)_ (qv), _Hud (1963)_ (qv), _Cool Hand Luke (1967)_ (qv) and _Butch Cassidy and the Sundance Kid (1969)_ (qv). He also produced and directed many quality films, including _Rachel, Rachel (1968)_ (qv) in which he directed wife \'Joanne Woodward\' (qv) and which received an Oscar nomination for best picture. Nominated nine times for a best actor Oscar, he finally took one home for his performance as an aging pool shark in _The Color of Money (1986)_ (qv). Though well into his 70s as the century drew to a close, Newman still commanded lead roles in films such as _Message in a Bottle (1999)_ (qv). He lives with his wife in Westport, Connecticut. A caring and supremely generous man, he is the founder of \"Newman\'s Own\" a successful line of food products that has earned in excess of $100 million, every penny of which the philanthropic movie icon has donated to charity. Renowned for his sense of humor, in 1998 he quipped that he was a little embarrassed to see his salad dressing grossing more than his movies.',0,'0000056','images/persons/paul-newman.jpg',140,93),(356,1,'2009-03-10 21:16:52','2009-03-10 21:16:52','Gregory','Nicotero','gregory-nicotero','15 March 1963','Pittsburgh, Pennsylvania, USA','Gifted SFX and make-up wizard, who learned his trade under the watchful eye of SFX splatter guru \'Tom Savini\' (qv). Nicotero and buddies, \'Howard Berger\' (qv) and \'Robert Kurtzman\' (qv) started KNB Efx Group in 1988 and the group has provided eye-popping & jaw dropping special effects for major Hollywood releases including _The Green Mile (1999)_ (qv), _Vanilla Sky (2001)_ (qv), _Sin City (2005)_ (qv) and _Land of the Dead (2005)_ (qv).',0,'0630524','',NULL,NULL),(253,1,'2009-03-10 21:08:28','2009-03-10 21:08:28','Thom','Noble','thom-noble','','','',0,'0633677','images/persons/thom-noble.jpg',128,100),(323,1,'2009-03-10 21:12:26','2009-03-10 21:12:26','Nita','Norris','nita-norris','','','',0,'1565049','',NULL,NULL),(273,1,'2009-03-10 21:09:33','2009-03-10 21:09:33','Ace','O\'Connell','ace-oconnell','','','',0,'0640019','',NULL,NULL),(66,1,'2009-03-10 20:57:20','2009-03-10 20:57:20','Brian','O\'Neill','brian-oneill','','','',0,'0642104','images/persons/brian-oneill.jpg',140,99),(308,1,'2009-03-10 21:11:47','2009-03-10 21:11:47','Lyne','Odums','lyne-odums','','','',0,'0644172','images/persons/lyne-odums.jpg',140,100),(394,1,'2009-03-10 21:18:58','2009-03-10 21:18:58','Kenji','Ohba','kenji-ohba','5 February 1955','Aichi, Japan','',0,'0644979','',NULL,NULL),(38,1,'2009-03-10 20:47:20','2009-03-10 20:47:20','Robert','Ozasky','robert-ozasky','','','',0,'0654709','',NULL,NULL),(265,1,'2009-03-10 21:09:14','2009-03-10 21:09:14','Joanne','Pankow','joanne-pankow','','','',0,'0659600','images/persons/joanne-pankow.jpg',131,100),(26,1,'2009-03-10 20:46:47','2009-03-10 20:46:47','Steve','Park','steve-park','','','',0,'0661950','',NULL,NULL),(396,1,'2009-03-10 21:19:03','2009-03-10 21:19:03','James','Parks','james-parks','16 November 1968','Ventura County, California, USA','',0,'0662960','',NULL,NULL),(344,1,'2009-03-10 21:16:14','2009-03-10 21:18:50','Michael','Parks','michael-parks','24 April 1940','Corona, California, USA','',0,'0662981','',NULL,NULL),(374,1,'2009-03-10 21:17:37','2009-03-10 21:17:37','Josh','Patton','josh-patton','','','',0,'0666584','',NULL,NULL),(286,1,'2009-03-10 21:10:07','2009-03-10 21:10:07','Gil','Pearson','gil-pearson','','','',0,'0669263','',NULL,NULL),(295,1,'2009-03-10 21:10:34','2009-03-10 21:10:34','Roderick','Peeples','roderick-peeples','','','',0,'0670204','images/persons/roderick-peeples.jpg',136,100),(144,1,'2009-03-10 21:01:52','2009-03-10 21:01:52','Mark','Pellegrino','mark-pellegrino','9 April 1965','Los Angeles, California, USA','',0,'0671032','images/persons/mark-pellegrino.jpg',138,100),(427,1,'2009-03-10 21:24:13','2009-03-10 21:24:13','Chris','Penn','chris-penn','10 October 1965','Los Angeles, California, USA','',0,'0001606','images/persons/chris-penn.jpg',111,99),(182,1,'2009-03-10 21:04:25','2009-03-10 21:04:25','Del','Pentecost','del-pentecost','13 November 1963','Brady, Texas, USA','',0,'0672360','images/persons/del-pentecost.jpg',74,100),(248,1,'2009-03-10 21:08:14','2009-03-10 21:08:14','Kathleen','Perkins','kathleen-perkins','','','',0,'0673985','',NULL,NULL),(13,1,'2009-03-10 20:46:09','2009-03-10 20:46:09','Melissa','Peterman','melissa-peterman','1 July 1971','Minneapolis, Minnesota, USA','Peterman is from Minneapolis, Minnesota, USA. After graduating from Minnesota State University with theater as one of her majors, she was cast as Madeline Monroe in Hey City Theater\'s production of \"Tony & Tina\'s Wedding\". After more than 600 performances, she went on to work as a writer and performer at the improvisational comedy theater The Brave New Workshop. While with the Brave New Workshop, she also performed at the Chicago Improv Festival and the Big Stink Comedy Festival in Austin, Texas. She made her film debut as Hooker #2 in the Coen brothers\' Oscar-winning movie _Fargo (1996)_ (qv). On television, she appeared in the Oxygen sketch comedy show Running With Scissors and guest-starred on Just Shoot Me. Peterman currently lives in Los Angeles with her husband, fellow actor \'\'John Brady\' (qv)\'.',0,'0676292','images/persons/melissa-peterman.jpg',80,100),(375,1,'2009-03-10 21:17:39','2009-03-10 21:17:39','Walter','Phelan','walter-phelan','','','',0,'0679765','images/persons/walter-phelan.jpg',136,100),(46,1,'2009-03-10 20:56:21','2009-03-10 20:56:21','Brad','Pitt','brad-pitt','18 December 1963','Shawnee, Oklahoma, USA','\'Brad Pitt\' (qv) was born in Oklahoma and raised in Springfield, Missouri. His mother\'s name is Jane Etta Hillhouse. His father, William (Bill) Pitt, worked in management at a trucking firm in Springfield. He has a younger brother, Douglas (Doug) Pitt and a younger sister Julie Neal Pitt. At Kickapoo High School, Pitt was involved in sports, debating, student government and school musicals. Pitt attended the University of Missouri, where he majored in journalism with a focus on advertising. He occasionally acted in fraternity shows. He left college two credits short of graduating to move to California. Before he became successful at acting, Pitt supported himself by driving strippers in limos, moving refrigerators and dressing as a giant chicken while working for \"el Pollo Loco.\"',0,'0000093','images/persons/brad-pitt.jpg',140,100),(425,1,'2009-03-10 21:20:36','2009-03-10 21:20:36','Amanda','Plummer','amanda-plummer','23 March 1957','New York City, New York, USA','The daughter of \'Christopher Plummer\' (qv) and \'Tammy Grimes\' (qv), \'Amanda Plummer\' (qv) was born in New York City on March 23, 1957. Her breakthrough role came when she starred opposite \'Robin Williams\' (qv) in _The Fisher King (1991)_ (qv). However, Plummer may be best remembered for her work in the \'Quentin Tarantino\' (qv) classic _Pulp Fiction (1994)_ (qv). Tarantino wrote the parts of two robbers who hold up a restaurant specifically for Plummer and her partner-in-screen-crime \'Tim Roth\' (qv). Since that stand-out role, Plummer has continued to appear in a wide variety of films, including _The Prophecy (1995)_ (qv), _Freeway (1996)_ (qv), and _My Life Without Me (2003)_ (qv).',0,'0001625','images/persons/amanda-plummer.jpg',128,100),(60,1,'2009-03-10 20:57:03','2009-03-10 20:57:03','Richard','Poe','richard-poe','25 January 1946','Portola, California, USA','\'Richard Poe\' (qv) was born in Portola, California and later moved to his \"hometown\" of Pittsburg, California. He attended high school there, and then graduated from the University of San Francisco in 1967. After a stint in the army during the Vietnam War, he got his first theater job with the American Conservatory Theater in San Francisco, appearing in productions of St Joan, Hadrian VII, Rosencrantz and Guilderstern are Dead, and Oedipus Rex. He toured the country with Dame \'Judith Anderson\' (qv), who played Hamlet at the age of 73 to Richard\'s Rosencrantz. Tour stops included Carnegie Hall and all of America\'s major cities. He played major roles at the Oregon Shakespeare Festival, at Houston\'s Alley Theater, Syracuse Stage, Hartford Stage Company, Center Stage Baltimore, Goodman Theatre, Long Wharf Theater, Berkshire Theatre Festival, and Huntington Theater. He played Henry Higgins in Pygmalion opposite \'Roma Downey\' (qv) as Eliza Dolittle; George Antrobus in The Skin of Our teeth opposite \'Marcia Gay Harden\' (qv) as Sabina; with \'John Lithgow\' (qv) on Broadway in M. Butterfly; and with \'Kevin Dobson\' (qv) in ART at Chicago\'s Royal George Theater. He has appeared in eight Broadway productions, most recently standing in for \'Henry Winkler\' (qv) and \'John Ritter\' (qv) in \'Neil Simon\' (qv)\'s The Dinner Party and playing Mayor Lanyard Bellamy in the new musical, The Adventures of Tom Sawyer.',0,'0688124','',NULL,NULL),(170,1,'2009-03-10 21:03:14','2009-03-10 21:08:58','Jon','Polito','jon-polito','29 December 1950','Philadelphia, Pennsylvania, USA','A heavy set, bald character player who often sports a distinctive, pencil-thin mustache and is frequently cast as gangsters or cops, Polito appeared on Broadway in \"American Buffalo\" (1977), \"Curse of the Aching Heart\" (1982) and the 1984 revival of \"Death of a Salesman\" (which was broadcast on CBS in 1985) and starred in the original Hartford Stage Company production of \"Other People\'s Money\". He made his film debut in _The Clairvoyant (1982)_ (qv) and played Tommy Lucchese in the TV series _\"The Gangster Chronicles\" (1981)_ (qv). Polito is best known for his roles in the films by the Coen Brothers: as obsequious yet vicious crime lord Johnny Caspar in _Miller\'s Crossing (1990)_ (qv) as the toadying Lou Breeze in _Barton Fink (1991)_ and as the pansy dry cleaning investor Creighton Tolliver in The Man Who Wasn\'t There (2001).',0,'0689237','images/persons/jon-polito.jpg',125,100),(421,1,'2009-03-10 21:20:04','2009-03-10 21:24:51','Stevo','Polyi','stevo-polyi','','','',0,'0689957','',NULL,NULL),(115,1,'2009-03-10 21:00:05','2009-03-10 21:00:05','Matthew','Posey','matthew-posey','','','',0,'0692670','',NULL,NULL),(67,1,'2009-03-10 20:57:24','2009-03-10 20:57:24','Robert','Prescott','robert-prescott','','','',0,'0696127','images/persons/robert-prescott.jpg',81,100),(7,1,'2009-03-10 20:45:52','2009-03-10 20:45:52','Harve','Presnell','harve-presnell','14 September 1933','Modesto, California, USA','By the time brawny baritone \'Harve Presnell\' (qv) arrived on the film scene, the \"Golden Age\" of musicals had long passed. Born in Modesto, California in 1933, he graduated from Modesto High School and initially trained for an operatic career. He was performing nationally when the opportunity for Broadway first came his way. Legendary composer \'Meredith Willson\' (qv) happened to catch an earful of the gifted singer in concert at the Hollywood Bowl in Los Angeles and, in the virile mold of an \'Alfred Drake\' (qv) or \'Howard Keel\' (qv), wrote the role of Johnny \"Leadville\" Brown in \"The Unsinkable Molly Brown\" specifically for him as a showcase. The Broadway musical, with \'Tammy Grimes\' (qv) as the spunky title heroine, was a resounding hit while Harve wrapped his glorious tonsils around such sturdy, wide-stanced songs as \"Colorado, My Home\" and \"I\'ll Never Say No.\" Unlike Grimes, Presnell managed to recreate his part when the celluloid version of _The Unsinkable Molly Brown (1964)_ (qv) came out with a certifiable film star, the indomitable \'Debbie Reynolds\' (qv), inhabiting the backwoods role. The film version was also hugely popular with audiences. It seemed like a star was about to be born but there were precious few movie musicals for Presnell to sink his teeth into and he quickly faded into the woodwork. He tried adjusting to straight dramatics with the rugged western _The Glory Guys (1965)_ (qv) and sang again in the highly unworthy teen frolic _When the Boys Meet the Girls (1965)_ (qv) with \'Connie Francis\' (qv), but little else came his way. The disastrous film version of _Paint Your Wagon (1969)_ (qv) starring the highly miscast \'Lee Marvin\' (qv), \'Clint Eastwood\' (qv) and \'Jean Seberg\' (qv), was redeemed only by the presence of Presnell and his superb rendition of \"They Call the Wind Mariah.\"By the 70s he was finished in films and was relegated to Keel-like stock and tour roles in such productions as \"Annie Get Your Gun\" (as Frank Butler) and \"On a Clear Day You Can See Forever,\" among others. He even played Rhett Butler in a musical version of \"Gone With the Wind\" at London\'s Drury Lane Theatre, but did not generate much of a stir. In 1979, Presnell served as a replacement in the Broadway musical \"Annie\" as Daddy Warbucks and stayed with the role for years on tour, also reprising the tycoon in the failed 90s sequel \"Annie II: Miss Hannigan\'s Revenge,\" which was later retitled \"Annie Warbucks.\"More than 25 years had passed by the time Presnell returned to the movies as a brash and balding character actor. He struck pure gold as the righteous, dominating, ill-fated father-in-law of \'William H. Macy\' (qv) in the Coen Brothers\' cult film hit _Fargo (1996)_ (qv). This success, in turn, led to meaty roles in _Larger Than Life (1996)_ (qv), _The Whole Wide World (1996)_ (qv), _The Chamber (1996)_ (qv), _Face/Off (1997)_ (qv), _Saving Private Ryan (1998)_ (qv) and _The Legend of Bagger Vance (2000)_ (qv), to name a few. Over the course of his career, he has proven himself a strong presence on TV as well with recurring roles on prime-time (\"Lois & Clark\") and daytime (\"Ryan\'s Hope\"). Presnell may have been born 10-20 years too late to have become a singing film star, but he has come back in spades to launch a whole new career as a noted character performer. Recent roles at age 70+ include TV\'s \"The Pretender,\" \"The Monk\" and \"ER,\" and the films _Mr. Deeds (2002)_ (qv) and _Old School (2003)_ (qv), indicate there are no signs that the twice-married actor is interested in slowing down.',0,'0696193','',NULL,NULL),(348,1,'2009-03-10 21:16:29','2009-03-10 21:16:29','Kelly','Preston','kelly-preston','13 October 1962','Honolulu, Hawaii, USA','',0,'0000593','images/persons/kelly-preston.jpg',137,100),(258,1,'2009-03-10 21:08:47','2009-03-10 21:08:47','Sam','Raimi','sam-raimi','23 October 1959','Royal Oak, Michigan, USA','Highly inventive US film director/producer/writer/actor \'Sam Raimi\' (qv) first came to the attention of film fans with the savage, yet darkly humorous, low-budget horror film _The Evil Dead (1981)_ (qv). From his childhood Raimi was a fan of the cinema and before he was ten years old, he was out making movies with an 8mm camera. He was a devoted fan of \'The Three Stooges\' (qv), so much of Raimi\'s film work in his teens, with good friends \'Bruce Campbell\' (qv) and \'Robert G. Tapert\' (qv), was slapstick comedy based around what they had observed from Stooges movies. Among the three of them they wrote, directed, produced and edited a short horror movie titled _Within the Woods (1978)_ (qv), which was then shown to prospective investors to raise the money necessary to film _The Evil Dead (1981)_ (qv). It met with lukewarm interest in the US with local distributors, so Raimi took the film to Europe, where it was much more warmly received. After it started gaining positive reviews and, more importantly, ticket sales upon its release in Europe, US distributors showed renewed interest, and \"Evil Dead\" was eventually released stateside to strong box office returns. His next directorial effort was _Crimewave (1985)_ (qv), a quirky, cartoon-like effort that failed to catch fire with audiences. However, he bounced back with _Evil Dead II (1987)_ (qv), a racier and more humorous remake/sequel to the original \"Dead\" that did even better at the box office. Raimi was then given his biggest budget to date to shoot _Darkman (1990)_ (qv), a comic book-style fantasy about a scarred avenger. The film did moderate business, but Raimi\'s strong visual style was evident throughout the film via inventive and startling camera work that caught the attention of numerous critics. The third chapter in the Evil Dead story beckoned, and Raimi once again directed buddy Campbell as the gritty hero \"Ash\", in the Gothic horror _Army of Darkness (1993)_. Raimi surprised fans when he took a turn away from the fantasy genre and directed \'Gene Hackman\' (qv) and \'Sharon Stone\' (qv) in the sexy western _The Quick and the Dead (1995)_ (qv); four years later he took the directorial reins on _A Simple Plan (1998)_ (qv), a crime thriller about stolen money starring \'Bill Paxton\' (qv) and \'Bridget Fonda\' (qv). In early 1999 he directed the baseball film _For Love of the Game (1999)_ (qv) and in 2000 returned to the fantasy genre with a top-flight cast in _The Gift (2000)_ (qv). In 2002 Raimi was given a real opportunity to demonstrate his dynamic visual style with the big-budget film adaptation of the \'Stan Lee\' (qv) comic book superhero _Spider-Man (2002)_ (qv), and fans were not disappointed. The movie was strong in both script and effects, and was a runaway success at the box office. Of course, Raimi returned for the sequel, _Spider-Man 2 (2004)_ (qv), which surpassed the original in box-office takings. Raimi remains one of Hollywood\'s most creative, exciting and intelligent filmmakers.',0,'0000600','images/persons/sam-raimi.jpg',126,100),(202,1,'2009-03-10 21:05:25','2009-03-10 21:05:25','Georgia Rae','Rainer','georgia-rae-rainer','','','',0,'0707002','',NULL,NULL),(120,1,'2009-03-10 21:00:19','2009-03-10 21:00:19','Luce','Rains','luce-rains','','','\'Luce Rains\' (qv) grew up on a horse farm in Lexington, Kentucky. Most of his childhood was spent mucking corrals, tending to livestock and building rock walls. He walked or rode his bicycle to school. His greatest pleasures were hiking and camping in the fields and forests around the farm and fishing in the lakes that extended out into the back country. He and a few friends spent a lot of time following Tates Creek that past by their property, ending at the Kentucky river where they had a rope swing tied high in a Sycamore Tree that they used to swing out over the river and on summer days drop into the cool water. It was a Huck Finn reality. In the mid-sixties his parents moved to Santa Fe, New Mexico where he continued to muck corrals. His mom, thinking he needed a little artistic activity, enrolled him in the local theatre company and he began to play a few roles. When it came time to go to college he auditioned for and was accepted on a scholarship at Stephens College in Columbia, Missouri which had a conservatory program - students working with faculty -- and he developed some acting chops while working in the cafeteria for a few extra bucks. Upon graduation moved to California and attended California Institute of the Arts and in 1975 was cast in the role of Hardeman in Midway at Universal Studios. Since Midway, Luce has worked in over 50 films and television productions and 30 professional stage plays with many of the industries top actors, directors, producers and film and theatre professionals.',0,'0366890','images/persons/luce-rains.jpg',140,79),(28,1,'2009-03-10 20:46:52','2009-03-10 20:46:52','Cliff','Rakerd','cliff-rakerd','','','',0,'0707531','',NULL,NULL),(49,1,'2009-03-10 20:56:30','2009-03-10 20:56:30','David','Rasche','david-rasche','7 August 1944','St. Louis, Missouri, USA','',0,'0711058','images/persons/david-rasche.jpg',88,100),(196,1,'2009-03-10 21:05:10','2009-03-10 21:05:10','A. Ray','Ratliff','a-ray-ratliff','','','',0,'0711799','',NULL,NULL),(130,1,'2009-03-10 21:00:47','2009-03-10 21:00:47','Dorsey','Ray','dorsey-ray','','','',0,'1324041','',NULL,NULL),(280,1,'2009-03-10 21:09:53','2009-03-10 21:09:53','Willie','Reale','willie-reale','','','',0,'0714050','',NULL,NULL),(184,1,'2009-03-10 21:04:33','2009-03-10 21:04:33','Brian','Reddy','brian-reddy','','','',0,'0714753','',NULL,NULL),(100,1,'2009-03-10 20:59:22','2009-03-10 20:59:22','Ana','Reeder','ana-reeder','','','',0,'0715768','',NULL,NULL),(122,1,'2009-03-10 21:00:24','2009-03-10 21:00:24','Eric','Reeves','eric-reeves','','','',0,'2569884','',NULL,NULL),(14,1,'2009-03-10 20:46:12','2009-03-10 20:46:12','Steve','Reevis','steve-reevis','','Browning, Montana, USA','',0,'0716324','',NULL,NULL),(277,1,'2009-03-10 21:09:45','2009-03-10 21:09:45','Michael Earl','Reid','michael-earl-reid','','','',0,'0717369','',NULL,NULL),(142,1,'2009-03-10 21:01:46','2009-03-10 21:01:46','Tara','Reid','tara-reid','8 November 1975','Wyckoff, New Jersey, USA','Born in Wyckoff, New Jersey, USA on November 8, 1975. She got her career start at six, when she appeared on a children\'s game show called _\"Child\'s Play\" (1982)_ (qv). Later, she appeared in commercials for Jell-O, McDonald\'s, and Crayola. She attended the Professional Children\'s School in New York City. Her classmates included \'Sarah Michelle Gellar\' (qv), \'Jerry O\'Connell\' (qv), \'Macaulay Culkin\' (qv), and Ben Taylor. After several career moves, she became known after her role as Bunny, in _The Big Lebowski (1998)_ (qv).',0,'0005346','images/persons/tara-reid.jpg',140,100),(76,1,'2009-03-10 20:57:50','2009-03-10 20:57:50','Eric','Richardson','eric-richardson','','','',0,'0724532','images/persons/eric-richardson.jpg',125,100),(225,1,'2009-03-10 21:06:43','2009-03-10 21:06:43','Tim','Robbins','tim-robbins','16 October 1958','West Covina, California, USA','Born in West Covina, California, but raised in New York City, \'Tim Robbins\' (qv) is the son of former \'The Highwaymen\' (qv) singer \'Gil Robbins\' (qv) and actress \'Mary Robbins\' (qv). Robbins studied drama at UCLA, where he graduated with honors in 1981. That same year, he formed the Actors\' Gang theater group, an experimental ensemble that expressed radical political observations through the European avant-garde form of theater. He started film work in TV movies in 1983, but hit the big time in 1988 with his portrayal of dim-witted fastball pitcher \"Nuke\" Laloosh in _Bull Durham (1988)_ (qv). Tall with baby-faced looks, he has the ability to play naive and obtuse (_Cadillac Man (1990)_ (qv) and _The Hudsucker Proxy (1994)_ (qv)) or slick and shrewd (_The Player (1992)_ (qv) and _Bob Roberts (1992)_ (qv)).',0,'0000209','images/persons/tim-robbins.jpg',133,100),(334,1,'2009-03-10 21:15:22','2009-03-10 21:15:22','Robert','Rodriguez','robert-rodriguez','20 June 1968','San Antonio, Texas, USA','\'Robert Rodriguez\' (qv) was born and raised in San Antonio, Texas, USA. At a very young age he showed an interest in cartooning and filmmaking and devoted all of his time towards developing this fascination. Finally, it paid off, resulting in him in making real movies; and just the first of them - _Mariachi, El (1992)_ (qv) - made him the legend of independent, ultra-low budget filmmaking. His further career is a sign for young filmmakers that even the wildest dreams may come true if you are brave enough to follow your own path. Since then, Robert has written, directed, edited, and/or produced around 12 movies (as of 2007), including: _Desperado (1995)_ (qv), _From Dusk Till Dawn (1996)_ (qv), _The Faculty (1998)_ (qv) and _Spy Kids (2001)_ (qv).',1,'0001675','images/persons/robert-rodriguez.jpg',129,100),(298,1,'2009-03-10 21:10:42','2009-03-10 21:10:42','Jack','Rooney','jack-rooney','','Hammond, Indiana, USA','\'Jack Rooney\' (qv) was born in Hammond, Indiana. The son of an Indiana Ironworker, Jack grew up in Terre Haute, Indiana, and after completing military service in the US Army, Jack returned to Terre Haute and attended Indiana State University, majoring in Philosophy and English. In 1976 Jack entered Graduate School at Northern Arizona University, majoring in English/Creative writing and American Literature. After completing Graduate studies, Jack returned to Indiana to begin his present career in filmmaking. To date, Jack has worked on and appeared in more than twenty feature films, at first as a crewmember and bit part player in large productions, such as, \"Natural Born Killers\", \"The Negotiator\", \"I Love Trouble\", \"Blue Chips\", \"Rudy\", and the highly rated television series, \"The Untouchables\". Armed with this extensive educational background and work experience, Jack quickly moved up the ladder of showbusiness to Writer/Director/Actor, and has starred in and directed a number of feature motion pictures, including \"Deadly Discovery\", \"Our Burden Is Light\", and the classic film, \"Pushed Too Far\" starring the late Claude Akins. Jack presently resides in Indianapolis, Indiana.',0,'0740323','',NULL,NULL),(97,1,'2009-03-10 20:59:10','2009-03-10 21:11:44','Stephen','Root','stephen-root','17 November 1951','Sarasota, Florida, USA','One of the most prolific character actors working today, \'Stephen Root\' (qv) has worked alongside many of the biggest names in Hollywood. He was born November 17, 1951, in Sarasota, Florida, and went on to attend the University of Florida during the 1970s. He worked in theater after graduation, first with the National Shakespeare Company before moving up to off-Broadway theater and finally moving on to Broadway. His first acting role on screen came in \'George A. Romero\' (qv)\'s cult horror classic _Monkey Shines (1988)_ (qv). After that, many more under-the-radar supporting roles came his way until he found some moderate fame in the acclaimed series _\"NewsRadio\" (1995)_ (qv), where he played the somewhat eccentric owner of a radio station, with \'Dave Foley\' (qv) as the station manager. The show also introduced him to comedian \'Andy Dick\' (qv), one of many comedian-actors whom he would work with again later in the 1990s and beyond. The show ran from 1995 to 1999 before it was canceled. Besides the character of Jimmy James on _\"NewsRadio\" (1995)_ (qv), Root has played more eccentric characters in recent years. Root began voicing several characters in the hit animated TV series _\"King of the Hill\" (1997)_ (qv), a show created by and starring \'Mike Judge\' (qv). Judge would later cast Root in another cult classic film, 1999\'s _Office Space (1999)_ (qv), where Root played the squirrelly and unforgettable Milton Waddams, a man who is pushed around at work and has a fetish for Swingline staplers. More recently Root has worked with such directors as the Coen brothers and \'Kevin Smith\' (qv) as yet more oddball characters as well as making guest appearances on numerous TV shows.',0,'0740535','images/persons/stephen-root.jpg',140,98),(245,1,'2009-03-10 21:08:07','2009-03-10 21:08:07','Mary Lou','Rosato','mary-lou-rosato','','','',0,'0741142','',NULL,NULL),(424,1,'2009-03-10 21:20:32','2009-03-10 21:24:03','Tim','Roth','tim-roth','14 May 1961','London, England, UK','British actor whose greatest success came after 1990 when he moved to the States to play American heavies. He has been a favorite of director \'Quentin Tarantino\' (qv).',0,'0000619','images/persons/tim-roth.jpg',138,100),(6,1,'2009-03-10 20:45:48','2009-03-10 20:45:48','Kristin','Rudrüd','kristin-rudrud','23 May 1955','Fargo, North Dakota, USA','',0,'0749021','',NULL,NULL),(168,1,'2009-03-10 21:03:06','2009-03-10 21:03:06','Leon','Russom','leon-russom','6 December 1941','Little Rock, Arkansas, USA','',0,'0751762','',NULL,NULL),(437,1,'2009-03-10 21:24:56','2009-03-10 21:24:56','Robert','Ruth','robert-ruth','','','',0,'0751936','',NULL,NULL),(293,1,'2009-03-10 21:10:28','2009-03-10 21:10:28','Wantland','Sandel','wantland-sandel','','','',0,'0761355','',NULL,NULL),(246,1,'2009-03-10 21:08:10','2009-03-10 21:08:10','Ernest','Sarracino','ernest-sarracino','12 February 1915','Valdez, Colorado, USA','',0,'0765512','',NULL,NULL),(268,1,'2009-03-10 21:09:22','2009-03-10 21:09:22','Dick','Sasso','dick-sasso','1 March 1931','Oak Park, Illinois, USA','',0,'0766000','',NULL,NULL),(397,1,'2009-03-10 21:19:06','2009-03-10 21:19:06','Sakichi','Satô','sakichi-sato','1964','Osaka, Japan','',0,'0766499','',NULL,NULL),(342,1,'2009-03-10 21:16:06','2009-03-10 21:16:06','Tom','Savini','tom-savini','3 November 1946','Pittsburgh, Pennsylvania, USA','Inspired by the film _Man of a Thousand Faces (1957)_ (qv), a young \'Tom Savini\' (qv) became fascinated with the magic and illusion of film. He spent his youth in his room creating characters by tirelessly practicing make-up. Later, as a combat photographer in Vietnam, Savini saw first-hand the gruesome carnage for which he later gained fame, simulating it on screen.',0,'0767741','',NULL,NULL),(346,1,'2009-03-10 21:16:21','2009-03-10 21:16:21','John','Saxon','john-saxon','5 August 1935','Brooklyn, New York, USA','',0,'0768334','',NULL,NULL),(237,1,'2009-03-10 21:07:43','2009-03-10 21:07:43','John','Scanlan','john-scanlan','3 April 1921','Milwaukee, Wisconsin, USA','',0,'1521059','',NULL,NULL),(31,1,'2009-03-10 20:47:00','2009-03-10 20:47:00','Steven I.','Schafer','steven-i-schafer','','','',0,'0769795','',NULL,NULL),(274,1,'2009-03-10 21:09:37','2009-03-10 21:09:37','Richard','Schiff','richard-schiff','27 May 1955','Bethesda, Maryland, USA','Richard was the middle of three sons born to Edward, a real estate lawyer, and Charlotte, a cable TV and publishing executive. His parents divorced when he was 12. He dropped out of high school but obtained an equivalency diploma. He tried studying at the City College of New York (CCNY) in 1973, but had no interest. After not bothering to show up for finals, he headed to Colorado where he cut firewood and lived a hippie life. He returned to New York in 1975 and started studying acting at CCNY and eventually was accepted into their theater program. He initially disliked acting and studied to be a director. He directed several off-Broadway plays, including \"Antigone\" with a then just-graduated \'Angela Bassett\' (qv) in 1983. He also met present wife, \'Sheila Kelley\' (qv), during auditions for this play. The two married in 1996. In the mid-1980s, Richard says he conquered his fears and decided to take a stab at acting. He got several TV roles, but he was seen by \'Steven Spielberg\' (qv) in an episode of the TV drama _\"High Incident\" (1996)_ (qv). Speilberg then cast him in _The Lost World: Jurassic Park (1997)_ (qv) and his career has been on an upward climb ever since that has lead to his co-starring role in _\"The West Wing\" (1999)_ (qv).',0,'0771493','images/persons/richard-schiff.jpg',132,100),(30,1,'2009-03-10 20:46:57','2009-03-10 20:46:57','Peter','Schmitz','peter-schmitz','','','',0,'2909493','',NULL,NULL),(299,1,'2009-03-10 21:10:45','2009-03-10 21:10:45','Keith','Schrader','keith-schrader','','','\'Keith Schrader\' (qv) attended The University of Cincinnati, Ohio with undergraduate studies in Radio and Television, 1966 and 1967, and has performed on stage in the St. Valentine\'s Day Massacre, West Side Story, Bye Bye Birdie, Man of LaMancha and The King and I. He has appeared on telelvision in Crimestoppers (robber, murder victim), Crazy Crimes, Crazy Criminals (police detective), Angel Street (policeman) and three episodes of The Untouchables (reporter, street person, chauffeur). He appeared in several films as either a bit part player or an extra. Some of his works were Ferris Bueller\'s Day Off (crowd member), Harper Valley P.T.A. (crowd member), _Eight Men Out (1988)_ (qv) (umpire), Rage in Harlem (policeman), A League of their Own (umpire), _Hoffa (1992)_ (qv) (teamster), Sleepless in Seattle (architect), _Rudy (1993)_ (qv)(reporter), Hudsucker Proxy (businessman), With Honors (lawyer), The Fugitive (hotel security guard), Natural Born Killers (member of the press), Roommates (fan), Blue Chips (alumnus), Best of the Best 3 (crowd member), Crocodile Shoes (chauffeur) and Richie Rich (policeman). He was a master of talking his way into getting film roles and being seen on camera. He was devoted to his craft and will forever be a part of films which he loved so much.',0,'1138019','',NULL,NULL),(56,1,'2009-03-10 20:56:50','2009-03-10 20:56:50','Armand','Schultz','armand-schultz','17 May 1959','Rochester, New York, USA','',0,'0776193','',NULL,NULL),(11,1,'2009-03-10 20:46:04','2009-03-10 20:46:04','Kurt','Schweickhardt','kurt-schweickhardt','','','',0,'0777754','',NULL,NULL),(231,1,'2009-03-10 21:07:22','2009-03-10 21:07:22','John','Seitz','john-seitz','16 November 1937','Louisville, Kentucky, USA','',0,'0782715','',NULL,NULL),(205,1,'2009-03-10 21:05:31','2009-03-10 21:05:31','Natalie','Shedd','natalie-shedd','','','',0,'0790539','',NULL,NULL),(317,1,'2009-03-10 21:12:12','2009-03-10 21:12:12','Freda Foh','Shen','freda-foh-shen','','','',0,'0791467','',NULL,NULL),(29,1,'2009-03-10 20:46:54','2009-03-10 20:46:54','Jessica','Shepherd','jessica-shepherd','','','',0,'0791801','',NULL,NULL),(400,1,'2009-03-10 21:19:13','2009-03-10 21:19:13','Tetsuro','Shimaguchi','tetsuro-shimaguchi','','','',0,'1532998','',NULL,NULL),(50,1,'2009-03-10 20:56:33','2009-03-10 21:11:21','J.K.','Simmons','jk-simmons','9 January 1955','Detroit, Michigan, USA','',0,'0799777','images/persons/jk-simmons.jpg',140,100),(312,1,'2009-03-10 21:11:57','2009-03-10 21:11:57','Hallie','Singleton','hallie-singleton','','','',0,'0802301','',NULL,NULL),(160,1,'2009-03-10 21:02:42','2009-03-10 21:10:18','Peter','Siragusa','peter-siragusa','','Boston, Massachusetts, USA','',0,'0802742','images/persons/peter-siragusa.jpg',140,92),(35,1,'2009-03-10 20:47:12','2009-03-10 20:47:12','Bix','Skahill','bix-skahill','','','',0,'0803771','',NULL,NULL),(136,1,'2009-03-10 21:01:02','2009-03-10 21:01:02','Elizabeth','Slagsvol','elizabeth-slagsvol','','','',0,'1655354','images/persons/elizabeth-slagsvol.jpg',125,100),(324,1,'2009-03-10 21:12:29','2009-03-10 21:12:29','Vivian','Smallwood','vivian-smallwood','','','',0,'0806614','',NULL,NULL),(255,1,'2009-03-10 21:08:39','2009-03-10 21:08:39','Anna Nicole','Smith','anna-nicole-smith','28 November 1967','Houston, Texas, USA','',0,'0000645','images/persons/anna-nicole-smith.jpg',140,96),(125,1,'2009-03-10 21:00:33','2009-03-10 21:00:33','Brandon','Smith','brandon-smith','13 August 1952','Texas, USA','',0,'0807503','images/persons/brandon-smith.jpg',140,91),(217,1,'2009-03-10 21:05:59','2009-03-10 21:05:59','Ed','Snodderly','ed-snodderly','','','',0,'0811188','',NULL,NULL),(436,1,'2009-03-10 21:24:54','2009-03-10 21:24:54','Michael','Sottile','michael-sottile','','','',0,'0815649','images/persons/michael-sottile.jpg',125,100),(107,1,'2009-03-10 20:59:40','2009-03-10 20:59:40','Boots','Southerland','boots-southerland','','','',0,'0816105','',NULL,NULL),(278,1,'2009-03-10 21:09:48','2009-03-10 21:09:48','Mike','Starr','mike-starr','29 July 1950','Queens, New York, USA','',0,'0823563','images/persons/mike-starr.jpg',138,100),(434,1,'2009-03-10 21:24:47','2009-03-10 21:24:47','David','Steen','david-steen','26 June 1954','USA','',0,'0824741','images/persons/david-steen.jpg',125,100),(442,1,'2009-03-10 21:25:13','2009-03-10 21:25:13','Burr','Steers','burr-steers','8 October 1965','USA','',0,'0824882','',NULL,NULL),(284,1,'2009-03-10 21:10:02','2009-03-10 21:10:02','Jeff','Still','jeff-still','30 November 1959','New Brunswick, New Jersey, USA','',0,'0830226','',NULL,NULL),(37,1,'2009-03-10 20:47:17','2009-03-10 20:47:17','Rose','Stockton','rose-stockton','','','',0,'0830960','',NULL,NULL),(426,1,'2009-03-10 21:20:41','2009-03-10 21:20:41','Eric','Stoltz','eric-stoltz','30 September 1961','Whittier, California, USA','Born 30 September, 1961 Los Angeles, California, \'Eric Stoltz\' (qv) is a theater trained actor and producer who has starred in both independent and studio films. Born to two teachers in Los Angeles, Eric was raised in both American Samoa and Santa Barbara California, where by the age of 14 he was earning money by playing piano for the local musical theater productions, including \"Mame\" starring \'Anthony Edwards\' (qv). The two became friends, and then college roommates when both attended the University of Southern California. Dropping out in his Junior year, Eric joined a repertory company that did 10 plays at the Edinburgh Festival in Scotland, UK. Moving to New York in 1981, he studied with \'Stella Adler\' (qv) and \'Peggy Feury\' (qv), and soon appeared in his first film, _Fast Times at Ridgemont High (1982)_ (qv). In the 1980s he garnered attention (and a Golden Globe Nomination) starring as Rocky Dennis in _Mask (1985)_ (qv), and in \'John Hughes\' (qv)\' _Some Kind of Wonderful (1987)_ (qv). In 1988, he made his Broadway debut in _Our Town (1989) (TV)_ (qv), for which he was nominated for a Tony Award. In the 1990\'s he went back and forth from stage to film, building up an eclectic resume that included studio films (_Pulp Fiction (1994)_ (qv)), independent films (Sundance Festival Winner _The Waterdance (1992)_ (qv)), and films that he himself produced ( _Mr. Jealousy (1997)_ (qv)). He also continued to appear on the New York Stage both on Broadway (Three Sisters, Two Shakespearean Actors) and off-Broadway (The Importance of Being Ernest, The Glass Menagerie). He continues to work in television as well, doing a recurring role as \'Helen Hunt\' (qv)\'s ex on _\"Mad About You\" (1992)_ (qv), a year on _\"Chicago Hope\" (1994)_ (qv), and in the tv and cable movies _Inside (1996) (TV)_ (qv) (directed by \'Arthur Penn\' (qv)), _A Killer in the Family (1983) (TV)_ (qv) (with \'Robert Mitchum\' (qv)) and _The Passion of Ayn Rand (1999)_ (qv) (with \'Helen Mirren\' (qv)). Mr. Stoltz lives in New Mexico, and has been romantically linked to \'Ally Sheedy\' (qv), \'Jennifer Jason Leigh\' (qv), \'Lili Taylor\' (qv), \'Bridget Fonda\' (qv), and most recently (in the summer of 1999 during the shooting of _The House of Mirth (2000)_ (qv)) the Australian actress \'Rachel Griffiths\' (qv).',0,'0000655','images/persons/eric-stoltz.jpg',135,100),(5,1,'2009-03-10 20:45:45','2009-03-10 21:01:56','Peter','Stormare','peter-stormare','27 August 1953','Arbrå, Gävleborgs län, Sweden','\'Peter Stormare\' (qv) began his acting career at the Royal National Theatre of Sweden, performing for eleven years. In 1990 he became the Associate Artistic Director at the Tokyo Globe Theatre and directed productions of many Shakespeare plays, including \"Hamlet\". In 1993 he moved to New York, where he appeared in English productions. He continues to work in both the United States and his his homeland of Sweden. He resides in Los Angeles, California, USA, with his wife.',0,'0001780','images/persons/peter-stormare.jpg',119,100),(87,1,'2009-03-10 20:58:20','2009-03-10 20:58:20','Patrick Michael','Strange','patrick-michael-strange','9 November 1977','San Diego, California, USA','Actor, model, writer, producer, publisher, photographer, teacher... the list goes on for \'Patrick Michael Strange\' (qv)... most just call him, The Golden Child... and he is the personification of the multi-hyphenate. He is a creative genius who is able reach deep inside his soul to bare the imagination that lies within us but few of us are able to tap into. \'Patrick Michael Strange\' (qv) was born on November 9, 1977 in San Diego, California. He is the first of two children; his younger sister is Michelle Lynn Strange. His father, Samuel Arthur Strange, is a retired US Navy sailor hailing from San Francisco, California; while his mother, Dianalyn Llamado Fiandler, was born in Cavite City, Philippines. At an early age, while learning to read and write, he already showed inclinations of creativity. He astounded his family and friends with his pencil drawings and other artistic creations. He played dress-up frequently and acted out characters such as Zorro and Batman. As the son of a military man, Patrick and his family traveled frequently. After leaving San Diego, he lived in Sigonella, Sicily (Italy); Winter Harbor, Maine; Goose Creek, South Carolina; Gulfport, Mississippi and Port Orchard, Washington. With all these moves, friendships were lost and life grew further difficult for him. To help with the transitions, friends became the characters in the books that Patrick read and were ones that he could always take with him. Book after book was gobbled up with intensity. Later, a love for art arrived that eventually melded these passions in the form of comic books. Patrick grew an immense love & appreciation for the sequential art form. Adding to the mix, the original \"Star Wars\" trilogy and films such as Indiana Jones and E.T. opened his eyes to even deeper imagination and storytelling... the world of cinema. Born of mixed heritage (Filipino, Irish & German), his upbringing was also a search for identity that would eventually become his greatest strength and motivation. From youth to teen years, where-in race and social classification grows rampant, his \"outsider\" persona - being that he was always the new kid in school and even simpler \"different\" race-wise, kept him out of many things. However undeterred by the ignorance of others, books helped him find the meaning of his self and a social awareness of others. He developed an appreciation for history and knowledge. Sir Francis Bacon\'s quote, \"Knowledge is power\" is one of his favorites. Reading bore into him a deeper world view and an optimistic vision of the future and along with his creativity a desire to entertain as well as educate in art, comics, photography and film. While in school, Patrick began his first pursuits into comics, music and film. He submitted his art portfolio at comics shows and conventions and was selected for a gifted arts program. Throughout his school years, he participated in Concert Choir and was selected as a Tenor to the All-County Choir. In his junior year, he took up drama and performed in the Mr. Goose Creek High School pageant. It was through this performance, that he was selected to work on the film, \"Ace Ventura: When Nature Calls\" the sequel to the first film, \"Ace Ventura: Pet Detective\" starring Jim Carrey. In the film, Patrick was a background actor playing a Tibetan monk. In 1996, he graduated from Goose Creek High School and enlisted in the US Navy along with his best friend, Mike Agojo. While at boot camp in Great Lakes, Illinois, Patrick grew upset with his decision to enlist, due to scholarship offers he had turned down. Patrick later credited his military experience to further opening his eyes to the world and strengthening his relationship with his father; whom he grew despondent to in his youth. After boot camp, Patrick attended Yeoman school in Meridien, Mississippi and Submarine School in New London/Groton, Connecticut. His first duty station was onboard the USS Samuel B. Roberts (FFG 58) aka the \"Sammy B.\"; whose homeport was located in Norfolk, Virginia. While onboard the \"Sammy B.\", Patrick served two deployments out in the Persian Gulf region. During his first deployment, the pressures of life and his current situation took its toll. While on watch, Patrick nearly committed suicide out on the flight deck. In this lowest moment of life, he found his meaning and threw the knife into the water. In 1999, Patrick met Ebony Braxton, whom would later become his wife; and in 2000, Patrick was honorably discharged and found the freedom to finally pursue his goals and dreams. 2001 birthed Temple Far East Entertainment (Temple Studios and Far East Productions), Patrick\'s media company and dream realized. First, came the hip hop mix tape CDs featuring popular artists and his undiscovered talented friends, and then his first self-published comic, Blood of Onyx, debuted at the Baltimore Comicon in Baltimore, Maryland. The success of Blood of Onyx led to Patrick\'s autobiographical comic, The Adventures of Thong Raider and a selection as a contributing comic creator to Sky Dog Press\' Comics Legal Defense Fund benefit graphic novel, More Fund Comics featuring Patrick\'s \"The Who\'Whats!?\". At a signing at Howard University, the Time Dollar Institute\'s Dr. Edgar S. Cahn, approached Patrick after reading \'Blood of Onyx\" and that relationship grew into the comic, \"Time Dollars\". Patrick later worked with the Anime USA convention as both their Art Show & Artist Alley Director for 2002 & 2003 and with Capicons\' Tysons Corner Comics Show as a featured guest and assisted Capicons in attaining guests. Through the relationship with Capicons, Patrick partnered and hosted his own pop culture comics convention, Americon bringing a San Diego Comicon experience to the east coast. Patrick and his company also appeared at Small Press Expo (SPX), Orlando Megacon and Wizardworld East in Philadelphia, Pennsylvania. In 2006, Patrick jumped back into acting and the film industry after many contacts pursued him with film interests for his comics properties. Not wanting to let his characters freely go without a better idea of the industry, Patrick began working in multiple TV & film projects both in front of and behind the camera to gain experience and later joined both the Screen Actors Guild (SAG) and American Federation of Television and Radio Artists (AFTRA). In 2007, Patrick set up Far East Films.',0,'2397098','images/persons/patrick-michael-strange.jpg',133,100),(441,1,'2009-03-10 21:25:10','2009-03-10 21:25:10','Maria','Strova','maria-strova','','','',0,'0835211','',NULL,NULL),(319,1,'2009-03-10 21:12:17','2009-03-10 21:12:17','Jeremy','Suarez','jeremy-suarez','6 July 1990','Burbank, California, USA','',0,'0836836','',NULL,NULL),(408,1,'2009-03-10 21:19:32','2009-03-10 21:19:32','Shun','Sugata','shun-sugata','17 February 1955','Yamanashi, Japan','',0,'0837452','',NULL,NULL),(53,1,'2009-03-10 20:56:42','2009-03-10 20:56:42','Kevin','Sussman','kevin-sussman','4 December 1970','Staten Island, New York City, New York, USA','',0,'0839934','images/persons/kevin-sussman.jpg',140,91),(45,1,'2009-03-10 20:56:16','2009-03-10 20:56:16','Tilda','Swinton','tilda-swinton','5 November 1960','London, England, UK','The iconoclastic gifts of the visually striking and fiercely talented Scottish actress \'Tilda Swinton\' (qv), who was born on November 5th, 1960, have been appreciated by a more international audience of late. Born into a patrician military family, she was educated at an English and a Scottish boarding school. Tilda subsequently studied Social and Politcal Science at Cambridge University and graduated in 1983 with a degree in English Literature. During her time as a student, she performed countless stage productions and proceeded to work for a season in the Royal Shakespeare Company. A decided rebel when it came to the arts, she left the company after a year as her approach shifted dramatically: With a taste for the unique and bizarre, she found some genuinely interesting gender-bending roles come her way, such as the composer Mozart in Pushkin\'s \"Mozart and Salieri\", and as a working class woman impersonating her dead husband during World War II, in Karges\' _Man to Man (1992)_ (qv). In 1985 the pale-skinned, carrot-topped actress began a professional association with gay experimental director \'Derek Jarman\' (qv). She continued to live and work with Jarman for the next nine years, developing seven critically acclaimed films. Their alliance would produce stark turns, such as turner-prize nominated _Caravaggio (1986)_ (qv), _The Last of England (1988)_ (qv), _The Garden (1990)_ (qv), _Edward II (1991)_ (qv), and _Wittgenstein (1993)_ (qv). Jarman succumbed to complications from AIDS in 1994. His untimely demise left a devastating void in Tilda\'s life for quite some time. Her most notable performance of that period however comes from a non-Jarman film: For the title role in _Orlando (1992)_ (qv), her nobleman character lives for 400 years while changing sex from man to woman. The film, which Swinton spent years helping writer/director \'Sally Potter\' (qv) develop and finance, continues to this day to have a worldwide devoted fan following. Over the years she has preferred art to celebrity, opening herself to experimental projects with new and untried directors and mediums, delving into the worlds of installation art and cutting-edge fashion. Consistently off-centered roles in _Female Perversions (1996)_ (qv), _Love Is the Devil: Study for a Portrait of Francis Bacon (1998)_ (qv), _Teknolust (2002)_ (qv), _Young Adam (2003)_ (qv), _Broken Flowers (2005)_ (qv) and \'Béla Tarr\' (qv)\'s _A Londoni férfi (2007)_ (qv) have only added to her mystique. Hollywood too has picked up on this notoriety and, since the birth of her twins in 1997, she has successfully moved between the deep-left-field art-house and quality Hollywood blockbusters. The thriller _The Deep End (2001)_ (qv), earned her a number of critic\'s awards and her first Golden Globe nomination. Such mainstream U.S. pictures as _The Beach (2000/I)_ (qv) with \'Leonardo DiCaprio\' (qv), fantasy epic _Constantine (2005)_ (qv) with \'Keanu Reeves\' (qv), her Oscar-decorated performance in _Michael Clayton (2007)_ (qv) alongside \'George Clooney\' (qv) and of course her iconic White Witch in _The Chronicles of Narnia: The Lion, the Witch and the Wardrobe (2005)_ (qv) have cemented her place as one of cinema\'s most outstanding women.',0,'0842770','images/persons/tilda-swinton.jpg',119,100),(403,1,'2009-03-10 21:19:21','2009-03-10 21:19:21','Issei','Takahashi','issei-takahashi','','','',0,'1534063','',NULL,NULL),(402,1,'2009-03-10 21:19:19','2009-03-10 21:19:19','Yoji','Tanaka','yoji-tanaka','8 August 1963','Nagano, Japan','',0,'0849093','',NULL,NULL),(336,1,'2009-03-10 21:15:39','2009-03-10 21:24:39','Quentin','Tarantino','quentin-tarantino','27 March 1963','Knoxville, Tennessee, USA','In January of 1992 a film titled _Reservoir Dogs (1992)_ (qv) hit the Sundance Film festival. The writer-director was a first-timer by the name of \'Quentin Tarantino\' (qv). The film garnered critical acclaim and the director became a legend in the England, UK and the cult film circuit. Two years later he followed up \'Dogs\' with the film _Pulp Fiction (1994)_ (qv). \'Pulp\' premiered at the Cannes film festival, where it won the coveted \'Palme D\'Or\' the virtual equal of the Best Picture at the Academy Awards. At the 1995 Academy Awards, \'Pulp\' was nominated for the Best Picture Oscar, also for Best Director and Best Original Screenplay, among others. Tarantino and writing partner \'Roger Avary\' (qv) came away with the award only for Best Original Screenplay. In 1995, Tarantino directed one fourth of the Anthology _Four Rooms (1995)_ (qv) with friends and fellow auteurs \'Alexandre Rockwell\' (qv), \'Robert Rodriguez\' (qv), and \'Allison Anders\' (qv). That film was released on December 25th in the United States to very weak reviews. This is mainly due to the heavy cutting of the first two segments and the introduction which make much of the plotline unintelligible, and creates a complete mess out of the second segment, directed by \'Alexandre Rockwell\' (qv). The best two segments of the film are \'Robert Rodriguez\' (qv)\'s and Tarantino\'s. Tarantino\'s next film was _From Dusk Till Dawn (1996)_ (qv), a crime/vampire film which he wrote and co-starred with \'George Clooney\' (qv). The film did fairly well theatrically.',1,'0000233','images/persons/quentin-tarantino.jpg',140,100),(325,1,'2009-03-10 21:12:31','2009-03-10 21:12:31','Maryn','Tasco','maryn-tasco','','','',0,'0850846','',NULL,NULL),(197,1,'2009-03-10 21:05:13','2009-03-10 21:05:13','Mia','Tate','mia-tate','','','',0,'2482420','',NULL,NULL),(199,1,'2009-03-10 21:05:18','2009-03-10 21:05:18','Christy','Taylor','christy-taylor','29 June 1974','Anchorage, Alaska, USA','',0,'0852140','images/persons/christy-taylor.jpg',140,100),(370,1,'2009-03-10 21:17:27','2009-03-10 21:17:27','Tia','Texada','tia-texada','14 December 1971','Louisiana, USA','',0,'0004137','images/persons/tia-texada.jpg',139,92),(157,1,'2009-03-10 21:02:33','2009-03-10 21:02:33','David','Thewlis','david-thewlis','20 March 1963','Blackpool, Lancashire, England, UK','\'David Thewlis\' (qv) was born David Wheeler in 1963 and lived with his parents above their combination wallpaper and toy shop in Blackpool during his childhood. Originally he came to London with his band Door 66, however he changed his plans and entered Guildhall School of Drama. He had minor roles in films and TV until he took the main role in _Naked (1993)_ (qv). The film won him several awards including the New York Critics Award. He has since been in many other films including _Dragonheart (1996)_ (qv), _Restoration (1995)_ (qv), _Black Beauty (1994)_ (qv) and recently took the part of Professor Remus John Lupin in _Harry Potter and the Prisoner of Azkaban (2004)_ (qv). He has lived with the British actress \'Anna Friel\' (qv) since 2001.',0,'0000667','images/persons/david-thewlis.jpg',122,100),(382,1,'2009-03-10 21:18:13','2009-03-10 21:18:13','Uma','Thurman','uma-thurman','29 April 1970','Boston, Massachusetts, USA','Uma Karuna Thurman, daughter of \'Robert Thurman\' (qv) and \'Nena Thurman\' (qv), was born in Boston, Massachusetts, on April 29, 1970. Uma grew up in Amherst, Massachusetts, where her father worked at Amherst College. She left boarding school at just 15, already determined to become an actress. She moved to New York to follow her dream. A breakthrough role for the tall, blonde actress came when she played Cecile de Volanges in _Dangerous Liaisons (1988)_ (qv). More attention came with the NC-17 rated _Henry & June (1990)_ (qv), but it was Thurman\'s role in the \'Quentin Tarantino\' (qv) classic _Pulp Fiction (1994)_ (qv) that earned her an Oscar nomination for Best Supporting Actress. Donning a short black wig to play femme fatale Mia Wallace opposite \'John Travolta\' (qv)\'s hit man Vincent Vega, Thurman earned a place in film history. After roles in _The Truth About Cats & Dogs (1996)_ (qv) and the \'Ted Demme\' (qv) film _Beautiful Girls (1996)_ (qv), Thurman met her future husband \'Ethan Hawke\' (qv) on the set of _Gattaca (1997)_ (qv). Thurman returned to smaller films after playing the villainess Poison Ivy in the reviled \'Joel Schumacher\' (qv) effort _Batman & Robin (1997)_ (qv) and Emma Peel in a remake of _The Avengers (1998)_ (qv). She worked with \'Woody Allen\' (qv) and \'Sean Penn\' (qv) on _Sweet and Lowdown (1999)_ (qv), and starred in \'Richard Linklater\' (qv)\'s drama _Tape (2001)_ (qv) opposite Hawke. Thurman also won a Golden Globe award for her turn in the made-for-television film _Hysterical Blindness (2002) (TV)_ (qv), directed by \'Mira Nair\' (qv). A return to the mainstream spotlight came when Thurman redeemed with \'Quentin Tarantino\' (qv) for _Kill Bill: Vol. 1 (2003)_ (qv), a revenge flick the two had dreamed up on the set of _Pulp Fiction (1994)_ (qv). She also turned up in the \'John Woo\' (qv) cautioner _Paycheck (2003)_ (qv) that same year. The renewed attention was not altogether welcome because Thurman was dealing with the break-up of her marriage with Hawke at about this time. Thurman handled the situation with grace, however, and took her surging popularity in stride. She garnered critical acclaim for her work in _Kill Bill: Vol. 2 (2004)_ (qv) and was hailed as Tarantino\'s muse. Thurman reunited with _Pulp Fiction (1994)_ (qv) dance partner \'John Travolta\' (qv) for the _Get Shorty (1995)_ (qv) sequel _Be Cool (2005)_ (qv) and landed a role in _The Producers (2005)_ (qv) after \'Nicole Kidman\' (qv) backed out of the project.',0,'0000235','images/persons/uma-thurman.jpg',140,100),(428,1,'2009-03-10 21:24:22','2009-03-10 21:24:22','Lawrence','Tierney','lawrence-tierney','15 March 1919','Brooklyn, New York, USA','Legendary Hollywood \"tough guy\", on screen and off. Remembered as the title character in _Dillinger (1945)_ (qv) and as the consummately brutal lover of \'Claire Trevor\' (qv) in _Born to Kill (1947)_ (qv). Notorious also for his frequent, well-publicized past involvements in public altercations - like barroom brawls - and other real-life manifestations of rowdiness. (In a 1973 incident, he managed to get himself stabbed.) Though now a puffy-faced, totally bald old man, he continues as screen actor to project the hard-as-nails mien that has been ingrained since his younger days, as he evidences quite amply in \'Quentin Tarantino\' (qv)\'s _Reservoir Dogs (1992)_ (qv).',0,'0862937','',NULL,NULL),(224,1,'2009-03-10 21:06:19','2009-03-10 21:06:19','Shayne','Tingle','shayne-tingle','','','',0,'2675989','',NULL,NULL),(266,1,'2009-03-10 21:09:16','2009-03-10 21:09:16','Mario','Todisco','mario-todisco','8 October 1949','','',0,'0865356','',NULL,NULL),(282,1,'2009-03-10 21:09:57','2009-03-10 21:09:57','Tom','Toner','tom-toner','25 May 1928','Homestead, Pennsylvania, USA','',0,'0867180','',NULL,NULL),(376,1,'2009-03-10 21:17:42','2009-03-10 21:17:42','Wayne','Toth','wayne-toth','','','',0,'0869370','',NULL,NULL),(422,1,'2009-03-10 21:20:22','2009-03-10 21:20:22','John','Travolta','john-travolta','18 February 1954','Englewood, New Jersey, USA','\'John Travolta\' (qv) first gained fame as the swaggering Vinnie Barbarino on the television series _\"Welcome Back, Kotter\" (1975)_ (qv). In 1977, he parlayed his teeny-bopper fame into a big-screen career with the disco blockbuster _Saturday Night Fever (1977)_ (qv). He languished in light dramas and television movies in the 1980s, but started a comeback in 1989 with _Look Who\'s Talking (1989)_ (qv). He further resuscitated his career with an Oscar nomination for his role as a heavyset sympathetic hitman in _Pulp Fiction (1994)_ (qv) in 1994.',0,'0000237','images/persons/john-travolta.jpg',140,100),(341,1,'2009-03-10 21:16:02','2009-03-10 21:16:02','Danny','Trejo','danny-trejo','16 May 1944','Echo Park, Los Angeles, California, USA','A child drug addict and criminal, \'Danny Trejo\' (qv) was in and out of jail for 11 years. While serving time in San Quentin, he won the lightweight and welterweight boxing titles. Imprisoned for armed robbery and drug offenses, he successfully completed a 12-step rehabilitation program that changed his life. While speaking at a Cocaine Anonymous meeting in 1985, Trejo met a young man who later called him for support. Trejo went to meet him at what turned out to be the set of _Runaway Train (1985)_ (qv). Trejo was immediately offered a role as a convict extra, probably because of his tough tattooed appearance. Also on the set was a screenwriter who did time with Trejo in San Quentin. Remembering Trejo\'s boxing skills, the screenwriter offered him $350 per day to train the actors for a boxing match. Director \'Andrei Konchalovsky\' (qv) saw Trejo training \'Eric Roberts\' (qv) and immediately offered him a featured role as Roberts\' opponent in the film. Trejo has subsequently appeared in many other films, usually as a tough criminal or villain.',0,'0001803','images/persons/danny-trejo.jpg',132,100),(229,1,'2009-03-10 21:07:06','2009-03-10 21:07:06','Jim','True-Frost','jim-true-frost','31 July 1966','Greenwich, Connecticut, USA','',0,'0874082','images/persons/jim-true-frost.jpg',140,93),(65,1,'2009-03-10 20:57:17','2009-03-10 20:57:17','Yury','Tsykun','yury-tsykun','','','',0,'1541751','images/persons/yury-tsykun.jpg',120,100),(415,1,'2009-03-10 21:19:48','2009-03-10 21:19:48','Shu Lan','Tuan','shu-lan-tuan','','','',0,'1234674','',NULL,NULL),(433,1,'2009-03-10 21:24:44','2009-03-10 21:24:44','Rich','Turner','rich-turner','','','',0,'0877822','',NULL,NULL),(149,1,'2009-03-10 21:02:11','2009-03-10 21:04:04','John','Turturro','john-turturro','28 February 1957','Brooklyn, New York, USA','Highly talented, lightly built Italian American actor who always looks unsettled and jumpy has become a favourite of cult/arthouse film aficionados with his compelling performances in a broad range of cinematic vehicles. Has become a regular in the thought provoking films of \'Spike Lee\' (qv) and the off the wall comedies of \'Joel Coen\' (qv) & \'Ethan Coen\' (qv). His wonderful performances include as the highly agitated \"Pino\" in _Do the Right Thing (1989)_ (qv), as an intellectual playwright in _Barton Fink (1991)_ (qv), a pedophile tenpin bowler in _The Big Lebowski (1998)_ (qv), a confused boyfriend in _Jungle Fever (1991)_ (qv) and as the voice of Harvey the dog in _Summer of Sam (1999)_ (qv). Turturro has continued to appeal to audiences despite his unconventional looks and the often annoying onscreen mannerisms of his characters which he used to great effect in films such as his blue collar tale of warring brothers in the construction business, _Mac (1992)_ (qv), as the irate, dumped game show contestant, Herbie Stempel, in \'Robert Redford\' (qv)\'s dynamic _Quiz Show (1994)_ (qv). One of modern American cinema\'s gems of acting, Turturro remains in strong demand for his high calibre thespian talents.',0,'0001806','images/persons/john-turturro.jpg',132,100),(64,1,'2009-03-10 20:57:14','2009-03-10 20:57:14','Sándor','Técsy','sandor-tecsy','24 August 1946','Marosvásárhely, Hungary (today Romania)','',0,'0879381','',NULL,NULL),(126,1,'2009-03-10 21:00:36','2009-03-10 21:00:36','Roland','Uribe','roland-uribe','','','',0,'1587496','',NULL,NULL),(198,1,'2009-03-10 21:05:16','2009-03-10 21:05:16','Musetta','Vander','musetta-vander','26 May 1963','Durban, South Africa','A native South African, \'Musetta Vander\' (qv) was raised without that most basic of modern conveniences--television! Radio programming, childhood books and weekend trips to the drive-in introduced her to the magical world of movies. It was not until the mid-\'70s that South Africa finally got television, and the big black box in the family living room \"miraculously\" sprang to life. However, as the daughter of a ballet teacher, Musetta was no stranger to the entertainment world and debuted on stage at the age of four. Her childhood was filled with numerous dance performances including \"Giselle\", \"Coppelia\", \"The Student Prince\" and \"Showboat\", and, shortly after completing school, she qualified as a ballet teacher herself. After earning a BA in Communications and Psychology, she landed the plum job as anchor host for an MTV-like television show in South Africa. One day, a handsome visiting American, \'Jeff Celentano\' (qv), spotted her on television, made her his bride, and whisked her off to the very place she had always dreamed of--Hollywood. Shortly after her arrival, she became part of the very world she used to host, appearing as the \"dream girl\" in more than 20 music videos for such top recording artists as \'Rod Stewart\' (qv), \'Tina Turner\' (qv), \'Elton John\' (qv) and \'Chris Isaak\' (qv). It was her critically acclaimed stage performance in the original South African play \"Soweto\'s Burning\", about the trials of an interracial friendship in that racially segregated country, that provided her transition to the big screen. Musetta has since performed in numerous feature films, including collaborating with her husband on _Under the Hula Moon (1995)_ (qv) and _Gunshy (1998)_ (qv). She has also worked alongside such screen veterans as \'Kevin Kline\' (qv), \'Kenneth Branagh\' (qv) and \'Will Smith\' (qv) in _Wild Wild West (1999)_ (qv), \'George Clooney\' (qv) and \'John Turturro\' (qv) in _O Brother, Where Art Thou? (2000)_ (qv) and \'John Hurt\' (qv) and \'Louis Gossett Jr.\' (qv) in _Monolith (1993)_ (qv). She\'s also added a slew of television credits to her arsenal, including guest appearances on the hit shows _\"Star Trek: Voyager\" (1995)_ (qv), _\"Stargate SG-1\" (1997)_ (qv) and _\"Buffy the Vampire Slayer\" (1997)_ (qv). Recently Musetta made a return to the stage, combining both her dance and acting background in an extremely successful adaptation of \'Molière\' (qv)\'s \"The Bourgeois Gentleman\" at the Pasadena Civic Auditorium.',0,'0888727','images/persons/musetta-vander.jpg',140,93),(146,1,'2009-03-10 21:02:01','2009-03-10 21:02:01','Torsten','Voges','torsten-voges','','','',0,'0901024','',NULL,NULL),(444,1,'2009-03-10 21:25:18','2009-03-10 21:25:18','Rowland','Wafford','rowland-wafford','','','',0,'0905658','',NULL,NULL),(306,1,'2009-03-10 21:11:33','2009-03-10 21:11:33','George','Wallace','george-wallace','21 July 1952','Atlanta, Georgia, USA','',0,'0908648','',NULL,NULL),(68,1,'2009-03-10 20:57:27','2009-03-10 20:57:27','Matt','Walton','matt-walton','1973','Hampton, New Jersey, USA','',0,'1476990','images/persons/matt-walton.jpg',124,100),(124,1,'2009-03-10 21:00:30','2009-03-10 21:00:30','Chris','Warner','chris-warner','7 August 1970','Radford, Virginia, USA','',0,'1070870','images/persons/chris-warner.jpg',125,100),(106,1,'2009-03-10 20:59:37','2009-03-10 20:59:37','Myk','Watford','myk-watford','30 January 1971','Clearwater, Florida, USA','Myk was raised in Russellville, Alabama, where he played football and ran track for the Russellville High School Golden Tigers. He attended the University of Utah, under the tutelage of Kenneth H. Washington, and studied at The Shakespeare Theatre in Washington, D.C. Myk currently resides in New York City, where he plays guitar and sings for the band \"Utah Mafia\", when he\'s not acting.',0,'0914223','images/persons/myk-watford.jpg',139,100),(332,1,'2009-03-10 21:12:47','2009-03-10 21:12:47','Maurice','Watson','maurice-watson','','','',0,'1701580','',NULL,NULL),(302,1,'2009-03-10 21:11:18','2009-03-10 21:11:18','Marlon','Wayans','marlon-wayans','23 July 1972','New York City, New York, USA','',0,'0005541','images/persons/marlon-wayans.jpg',136,100),(307,1,'2009-03-10 21:11:39','2009-03-10 21:11:39','Jason','Weaver','jason-weaver','18 July 1979','Chicago, Illinois, USA','Born on July 18, 1979 in Chicago, Illinois, \'Jason Weaver\' (qv) has always been surrounded by the world of entertainment. His mother Kitty Haywood, a legendary studio singer, was a staple in his young life and encouraged his pursuit of singing as well as acting. In being surrounded by the some of the best entertainers to date, Jason learned some of the most intricate works of the industry and found himself even more intrigued and driven in his goal of stardom. Weaver got his break in acting as a kid named Ernie, in the movie, \"The Kid Who Loved Christmas\". By the age of 12, Jason had appeared in two other projects; \"The Long Walk Home\", a film by Whoopi Goldberg and \"Brewster\'s Place\", a television series produced by Oprah Winfrey. Having been successful in his previous three roles, it was imminent that this young man\'s career would be of legendary status. In 1992, Weaver landed the role of a lifetime. He was cast to play the young and most talented Michael Jackson in the small screen film, \"The Jackson\'s: An American Dream.\" This made for television movie garnered him raved reviews and proved to be a launching pad for other areas of his career. 1993 branded Weaver in one of the two most notable roles of his career. Playing alongside Brandy in the television series \"Thea\", Jason continued his acting success until the abrupt cancellation of the show later that year. Weaver landed a role in one of the top Disney film\'s in 1994. Jason was blessed with the opportunity to display his other talent; singing. He graced us with his passionate sound as the singing voice of Simba in the box office hit, \"The Lion King\". In 1997, he continued his on screen success as teenage sibling, Marcus Henderson, in the hit television series \"Smart Guy\". After a two year hiatus, Jason was back at it with a role in the civil rights movie, \"Freedom Song\", starring Danny Glover and Loretta Divine, to name a few. The turn of the millennium also brought about a huge turn in Weaver\'s career. In 2002, he enjoyed a highly successful role as Earnest in the mega hit movie \"Drumline\", opposite Nick Cannon. The movie was set in Jason\'s hometown of Atlanta. In 2004, Weaver followed the success of \"Drumline\" with a role in \"The Lady Killers\", starring Tom Hank. In 2006, \'Jason Weaver\' (qv) was back in Atlanta to shoot \"ATL\", starring T.I. The Chris Robinson film was set in a roller rink and depicted the life of a teenage male that deals with the everyday struggles of finance, school, and friendship, but finds solace in a female that he meets at the roller rink he frequents. Let it be known that TI\'s female costar is not as she appears. The movie was a huge box office success. In addition to Jason\'s enormous success as an actor, he sets his site on his other love, music. After releasing only one of his two albums with Motown in the early 90s, Weaver enjoyed short lived success from \"Love Ambition\". He has since refocused his energy and dedication to long hours in the studio in pursuit of his musical dreams. The 2004 hit, \"One Call Away\" by Chingy, featured a rejuvenated Weaver singing the hook. This single topped the Billboard 100 chart at #2 in the U.S and #26 in the UK. In late 2006, Jason worked with BG on his new album and did several collaborations with close friend and super producer/writer Roger \"Mista Raja\" Green on his album, \"Chip off the Ol\' Block\", due to be released in mid 2007. With Weaver\'s long list of accomplishments in his star career, many power hitters in the entertainment industry suggest that this Hollywood story is only at its midpoint. Jason is set to release his second album, entitled, \"Declaration of Independance\", in early summer 2007.',0,'0915868','images/persons/jason-weaver.jpg',140,83),(192,1,'2009-03-10 21:04:57','2009-03-10 21:04:57','Lee','Weaver','lee-weaver','10 April 1930','Ft. Lauderdale, Florida, USA','',0,'0915901','',NULL,NULL),(244,1,'2009-03-10 21:08:05','2009-03-10 21:08:05','Robert','Weil','robert-weil','18 November 1914','New York City, New York, USA','',0,'0917972','',NULL,NULL),(195,1,'2009-03-10 21:05:08','2009-03-10 21:05:08','Gillian','Welch','gillian-welch','1967','Manhattan, New York, USA','',0,'0919553','',NULL,NULL),(40,1,'2009-03-10 20:47:24','2009-03-10 20:47:24','Don','Wescott','don-wescott','','','',0,'0921682','',NULL,NULL),(326,1,'2009-03-10 21:12:33','2009-03-10 21:12:33','Muriel','Whitaker','muriel-whitaker','','','',0,'1353107','',NULL,NULL),(214,1,'2009-03-10 21:05:52','2009-03-10 21:05:52','Buck','White','buck-white','','','',0,'0924561','',NULL,NULL),(216,1,'2009-03-10 21:05:57','2009-03-10 21:05:57','Cheryl','White','cheryl-white','','','',0,'1592227','',NULL,NULL),(215,1,'2009-03-10 21:05:54','2009-03-10 21:05:54','Sharon','White','sharon-white','','','',0,'0925449','',NULL,NULL),(262,1,'2009-03-10 21:09:00','2009-03-10 21:09:00','Richard','Whiting','richard-whiting','24 June 1904','Swampscott, Massachusetts, USA','',0,'0926026','',NULL,NULL),(343,1,'2009-03-10 21:16:10','2009-03-10 21:16:10','Fred','Williamson','fred-williamson','5 March 1938','Gary, Indiana, USA','Former Oakland Raiders/Kansas City Chiefs football star who rose to prominence as one of the first African-American male action stars of the \"blaxploitation\" genre of the early 1970s, who has since gone on to a long and illustrious career as an actor, director, writer, and producer! Burly, yet handsome 6\' 3\" Williamson first came to attention in the TV series _\"Julia\" (1968)_ (qv) playing love interest, Steve Bruce. However, his rugged, athletic physique made him a natural for energetic roles and he quickly established himself as a street wise, tough guy in films including _That Man Bolt (1973)_ (qv), _Boss Nigger (1975)_ (qv), _Black Caesar (1973)_ (qv), and _Mean Johnny Barrows (1976)_ (qv). Talented Williams established his own production company \"Po \'Boy Productions\" in 1974, which has produced over 40 movies to date. Like many young American stars of the 1960s and \'70s, Williamson was noticed by Italian producers who cast him in a slew of B-grade action movies that occupied a lot of his work in the 1980s. From the late \'80s onwards, much of his work has been of the \"straight to video\" fare (often playing police officers), but none could deny he has kept actively busy in movies and TV for over three decades, both in front of and behind the camera. More recently, indie director \'Robert Rodriguez\' (qv) cast him alongside FX guru \'Tom Savini\' (qv) as two vampire killing bikers, in his bloody action film _From Dusk Till Dawn (1996)_ (qv), and he has most recently appeared on screen (displaying his wonderful comedy skills) playing grumpy Captain Dobey in _Starsky & Hutch (2004)_ (qv).',0,'0004365','',NULL,NULL),(251,1,'2009-03-10 21:08:23','2009-03-10 21:08:23','Noble','Willingham','noble-willingham','31 August 1931','Mineola, Texas, USA','\'Noble Willingham\' (qv) has appeared in more than 30 feature films, including _Up Close & Personal (1996)_ (qv), _Ace Ventura: Pet Detective (1994)_ (qv), _Chinatown (1974)_ (qv), Good Morning, Vietnam, City Slickers, City Slickers II, and The Distinguished Gentleman. He was born in the small town of Mineola, Texas, east of Dallas. After graduating from North Texas State College, he earned a master\'s degree in educational psychology from Baylor University. Willingham was a teacher before following his long-time dream of becoming an actor. He auditioned for a part in the film The Last Picture Show, which was filmed in Texas. He won the role, which led to another, in Paper Moon. On television, Willingham had a recurring role in the series Home Improvement and appeared as a guest star in the series Murder, She Wrote and Northern Exposure, both on CBS, and Quantum Leap. He appeared in the television film Men Don\'t Tell on CBS. His additional television film credits include Woman with a Past, The Alamo, and Unconquered. Willingham has a daughter, Stori. His birthday is August 31.',0,'0932244','',NULL,NULL),(10,1,'2009-03-10 20:46:01','2009-03-10 20:46:01','Sally','Wingert','sally-wingert','','','',0,'0935041','',NULL,NULL),(238,1,'2009-03-10 21:07:46','2009-03-10 21:07:46','Richard','Woods','richard-woods','9 May 1923','Buffalo, New York, USA','',0,'0939951','',NULL,NULL),(88,1,'2009-03-10 20:58:22','2009-03-10 20:58:22','Jacqueline','Wright','jacqueline-wright','','','',0,'0942467','images/persons/jacqueline-wright.jpg',134,100),(432,1,'2009-03-10 21:24:42','2009-03-10 21:24:42','Steven','Wright','steven-wright','6 December 1955','New York City, New York, USA','',0,'0942833','',NULL,NULL),(234,1,'2009-03-10 21:07:34','2009-03-10 21:07:34','John','Wylie','john-wylie','14 December 1925','Peacock, Texas, USA','',0,'0943788','',NULL,NULL),(413,1,'2009-03-10 21:19:44','2009-03-10 21:19:44','Yoshiko','Yamaguchi','yoshiko-yamaguchi','','','',0,'1534384','',NULL,NULL),(404,1,'2009-03-10 21:19:23','2009-03-10 21:19:23','Satoshi','Yamanaka','satoshi-yamanaka','','','',0,'1476051','',NULL,NULL),(409,1,'2009-03-10 21:19:35','2009-03-10 21:19:35','Zhang Jin','Zhan','zhang-jin-zhan','','','',0,'1552777','',NULL,NULL),(188,1,'2009-03-10 21:04:45','2009-03-10 21:04:45','Daniel','von Bargen','daniel-von-bargen','5 June 1950','Cincinnati, Ohio, USA','Daniel Von Bargen was born in Cincinnati, Ohio on June 5, 1950. He grew up there for most of his childhood, before moving with his family to Southern California. He attended Purdue University, majoring in drama. Daniel joined the Trinity Repertory Theatre in Providence, Rhode Island after graduation, and worked with them for many years. A breakthrough role in \"Mastergate\" by \'Larry Gelbart\' (qv) launched him onto Broadway stages. He has also starred in off-Broadway productions of \"Beggars in the House of Plenty,\" \"Macbeth,\" \"The Cherry Orchard,\" \"Hurlyburly,\" and \"Uncle Vanya.\" On TV, he is best known for his roles in _\"Malcolm in the Middle\" (2000)_ (qv) and _\"The West Wing\" (1999)_ (qv). A seemingly typecast actor, he\'s often playing a military officer or policeman.',0,'0901926','',NULL,NULL),(377,1,'2009-03-10 21:17:44','2009-03-10 21:17:44','Henrik','von Ryzin','henrik-von-ryzin','','','',0,'0902908','',NULL,NULL);
/*!40000 ALTER TABLE `movie_person` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `myapp_person`
--

DROP TABLE IF EXISTS `myapp_person`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `myapp_person` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `first_name` varchar(30) NOT NULL,
  `last_name` varchar(30) NOT NULL,
  `fun` tinyint(1) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=3 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `myapp_person`
--

LOCK TABLES `myapp_person` WRITE;
/*!40000 ALTER TABLE `myapp_person` DISABLE KEYS */;
INSERT INTO `myapp_person` VALUES (1,'Bugs','Bunny',1),(2,'Droopy','Dog',0);
/*!40000 ALTER TABLE `myapp_person` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `myapp_result`
--

DROP TABLE IF EXISTS `myapp_result`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `myapp_result` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(15) NOT NULL,
  `status` varchar(4) NOT NULL,
  `test_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `myapp_result_a88de8dc` (`test_id`)
) ENGINE=MyISAM AUTO_INCREMENT=68 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `myapp_result`
--

LOCK TABLES `myapp_result` WRITE;
/*!40000 ALTER TABLE `myapp_result` DISABLE KEYS */;
INSERT INTO `myapp_result` VALUES (1,'ceLxjUY','pass',1),(2,'WONmJp','pass',1),(3,'qbmnUZVN','pass',1),(4,'WsVAL','fail',1),(5,'ucoiW','pass',2),(6,'sodyfrxaBR','fail',2),(7,'TQrVIZFg','fail',2),(8,'drWYf','fail',2),(9,'erVPzw','fail',3),(10,'XDTK','fail',3),(11,'YSUIhsm','fail',4),(12,'fzDlJKA','fail',4),(13,'oyNwd','fail',4),(14,'rBgIF','pass',4),(15,'MZHRYAg','fail',4),(16,'kYTgGFNx','pass',5),(17,'snVUro','pass',5),(18,'ElPT','fail',5),(19,'UvHJilQ','pass',6),(20,'CVTjr','pass',6),(21,'pLKacAeJiE','pass',6),(22,'lgNh','fail',7),(23,'kxpvFANu','fail',7),(24,'aTcxYC','fail',7),(25,'LfTasBnQ','pass',7),(26,'oiThX','pass',8),(27,'egAXlGJ','fail',8),(28,'zfBYsNpr','pass',9),(29,'jPTtLwrWC','pass',9),(30,'RgHDKn','pass',9),(31,'StvNqKr','pass',10),(32,'SFUpinqI','fail',10),(33,'zTwy','fail',10),(34,'ReDBbvOyjK','pass',10),(35,'dWAefc','fail',10),(36,'UWqoxm','fail',11),(37,'cfIWYb','fail',11),(38,'TCNclF','pass',11),(39,'yczKpIt','pass',11),(40,'qeGP','pass',12),(41,'xelP','fail',12),(42,'BrKnhyWALY','fail',13),(43,'uXnofG','fail',13),(44,'LcwC','pass',13),(45,'POCYsv','fail',13),(46,'wvbkXMEtTr','fail',13),(47,'xFtR','pass',14),(48,'EpdnUiowyO','pass',14),(49,'dChvgkI','pass',14),(50,'bWjXYVn','fail',14),(51,'bBzd','fail',14),(52,'RzMInZcbTp','pass',15),(53,'ONrnxZLlg','fail',15),(54,'TtQjKDrsFO','pass',15),(55,'kotmRy','pass',16),(56,'mwJXC','fail',17),(57,'hpGnOjC','pass',17),(58,'FJjwbxX','fail',18),(59,'ncZLkVPa','pass',18),(60,'IcQOpd','pass',18),(61,'oBjlwGC','pass',19),(62,'HZAVrGvFxm','fail',19),(63,'apyRZiL','pass',20),(64,'JbsLk','fail',20),(65,'TfonpjkFE','pass',20),(66,'BNVuU','pass',20),(67,'OqxhDoQnW','fail',20);
/*!40000 ALTER TABLE `myapp_result` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `myapp_test`
--

DROP TABLE IF EXISTS `myapp_test`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `myapp_test` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(32) NOT NULL,
  `desc` varchar(64) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=21 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `myapp_test`
--

LOCK TABLES `myapp_test` WRITE;
/*!40000 ALTER TABLE `myapp_test` DISABLE KEYS */;
INSERT INTO `myapp_test` VALUES (1,'test0','desc for 0'),(2,'test1','desc for 1'),(3,'test2','desc for 2'),(4,'test3','desc for 3'),(5,'test4','desc for 4'),(6,'test5','desc for 5'),(7,'test6','desc for 6'),(8,'test7','desc for 7'),(9,'test8','desc for 8'),(10,'test9','desc for 9'),(11,'test10','desc for 10'),(12,'test11','desc for 11'),(13,'test12','desc for 12'),(14,'test13','desc for 13'),(15,'test14','desc for 14'),(16,'test15','desc for 15'),(17,'test16','desc for 16'),(18,'test17','desc for 17'),(19,'test18','desc for 18'),(20,'test19','desc for 19');
/*!40000 ALTER TABLE `myapp_test` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `notes_note`
--

DROP TABLE IF EXISTS `notes_note`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `notes_note` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(100) NOT NULL,
  `slug` varchar(50) NOT NULL,
  `text` longtext,
  PRIMARY KEY (`id`),
  KEY `notes_note_a951d5d6` (`slug`)
) ENGINE=MyISAM AUTO_INCREMENT=10 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `notes_note`
--

LOCK TABLES `notes_note` WRITE;
/*!40000 ALTER TABLE `notes_note` DISABLE KEYS */;
INSERT INTO `notes_note` VALUES (1,'Physics','modern physics',NULL),(2,'Physics','123','Superconductor'),(3,'mathematics','223','This is a test'),(4,'Taiwan','235','Taichung'),(5,'','',NULL),(6,'English','889','ESL'),(7,'Music','000','Chopin'),(8,'Movie','333','True Romance'),(9,'Sports','111',NULL);
/*!40000 ALTER TABLE `notes_note` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `siteconfig_siteconfiguration`
--

DROP TABLE IF EXISTS `siteconfig_siteconfiguration`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `siteconfig_siteconfiguration` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `site_id` int(11) NOT NULL,
  `version` varchar(20) NOT NULL,
  `settings` longtext NOT NULL,
  PRIMARY KEY (`id`),
  KEY `siteconfig_siteconfiguration_6223029` (`site_id`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `siteconfig_siteconfiguration`
--

LOCK TABLES `siteconfig_siteconfiguration` WRITE;
/*!40000 ALTER TABLE `siteconfig_siteconfiguration` DISABLE KEYS */;
/*!40000 ALTER TABLE `siteconfig_siteconfiguration` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tagging_tag`
--

DROP TABLE IF EXISTS `tagging_tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `tagging_tag` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=MyISAM AUTO_INCREMENT=13 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tagging_tag`
--

LOCK TABLES `tagging_tag` WRITE;
/*!40000 ALTER TABLE `tagging_tag` DISABLE KEYS */;
INSERT INTO `tagging_tag` VALUES (1,'Comedy'),(2,'Crime'),(3,'Thriller'),(4,'Action'),(5,'Horror'),(6,'Drama'),(7,'Western'),(8,'Adventure'),(9,'Music'),(10,'Fantasy'),(11,'Romance'),(12,'Programming');
/*!40000 ALTER TABLE `tagging_tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tagging_taggeditem`
--

DROP TABLE IF EXISTS `tagging_taggeditem`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `tagging_taggeditem` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `tag_id` int(11) NOT NULL,
  `content_type_id` int(11) NOT NULL,
  `object_id` int(10) unsigned NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `tag_id` (`tag_id`,`content_type_id`,`object_id`),
  KEY `tagging_taggeditem_tag_id` (`tag_id`),
  KEY `tagging_taggeditem_content_type_id` (`content_type_id`),
  KEY `tagging_taggeditem_object_id` (`object_id`)
) ENGINE=MyISAM AUTO_INCREMENT=32 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tagging_taggeditem`
--

LOCK TABLES `tagging_taggeditem` WRITE;
/*!40000 ALTER TABLE `tagging_taggeditem` DISABLE KEYS */;
INSERT INTO `tagging_taggeditem` VALUES (1,1,21,2),(2,2,21,2),(3,2,21,1),(4,3,21,1),(5,4,21,8),(6,5,21,8),(7,3,21,8),(8,4,21,9),(9,3,21,9),(10,2,21,3),(11,6,21,3),(12,3,21,3),(13,7,21,3),(14,8,21,5),(15,1,21,5),(16,2,21,5),(17,9,21,5),(18,2,21,10),(19,6,21,10),(20,2,21,11),(21,6,21,11),(22,3,21,11),(23,1,21,4),(24,2,21,4),(25,1,21,6),(26,6,21,6),(27,10,21,6),(28,11,21,6),(29,1,21,7),(30,2,21,7),(31,3,21,7);
/*!40000 ALTER TABLE `tagging_taggeditem` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2012-04-12 10:41:46
